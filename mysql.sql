-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: May 03, 2025 at 07:19 PM
-- Server version: 10.4.32-MariaDB
-- PHP Version: 8.2.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `mysql`
--

-- --------------------------------------------------------

--
-- Table structure for table `columns_priv`
--

CREATE TABLE `columns_priv` (
  `Host` char(60) NOT NULL DEFAULT '',
  `Db` char(64) NOT NULL DEFAULT '',
  `User` char(80) NOT NULL DEFAULT '',
  `Table_name` char(64) NOT NULL DEFAULT '',
  `Column_name` char(64) NOT NULL DEFAULT '',
  `Timestamp` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT ''
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- --------------------------------------------------------

--
-- Table structure for table `column_stats`
--

CREATE TABLE `column_stats` (
  `db_name` varchar(64) NOT NULL,
  `table_name` varchar(64) NOT NULL,
  `column_name` varchar(64) NOT NULL,
  `min_value` varbinary(255) DEFAULT NULL,
  `max_value` varbinary(255) DEFAULT NULL,
  `nulls_ratio` decimal(12,4) DEFAULT NULL,
  `avg_length` decimal(12,4) DEFAULT NULL,
  `avg_frequency` decimal(12,4) DEFAULT NULL,
  `hist_size` tinyint(3) UNSIGNED DEFAULT NULL,
  `hist_type` enum('SINGLE_PREC_HB','DOUBLE_PREC_HB') DEFAULT NULL,
  `histogram` varbinary(255) DEFAULT NULL
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- --------------------------------------------------------

--
-- Table structure for table `db`
--

CREATE TABLE `db` (
  `Host` char(60) NOT NULL DEFAULT '',
  `Db` char(64) NOT NULL DEFAULT '',
  `User` char(80) NOT NULL DEFAULT '',
  `Select_priv` enum('N','Y') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'N',
  `Insert_priv` enum('N','Y') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'N',
  `Update_priv` enum('N','Y') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'N',
  `Delete_priv` enum('N','Y') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'N',
  `Create_priv` enum('N','Y') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'N',
  `Drop_priv` enum('N','Y') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'N',
  `Grant_priv` enum('N','Y') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'N',
  `References_priv` enum('N','Y') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'N',
  `Index_priv` enum('N','Y') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'N',
  `Alter_priv` enum('N','Y') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'N',
  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'N',
  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'N',
  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'N',
  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'N',
  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'N',
  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'N',
  `Execute_priv` enum('N','Y') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'N',
  `Event_priv` enum('N','Y') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'N',
  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'N',
  `Delete_history_priv` enum('N','Y') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'N'
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

--
-- Dumping data for table `db`
--

INSERT INTO `db` (`Host`, `Db`, `User`, `Select_priv`, `Insert_priv`, `Update_priv`, `Delete_priv`, `Create_priv`, `Drop_priv`, `Grant_priv`, `References_priv`, `Index_priv`, `Alter_priv`, `Create_tmp_table_priv`, `Lock_tables_priv`, `Create_view_priv`, `Show_view_priv`, `Create_routine_priv`, `Alter_routine_priv`, `Execute_priv`, `Event_priv`, `Trigger_priv`, `Delete_history_priv`) VALUES
('%', 'test', '', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'N', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'N', 'N', 'Y', 'Y', 'Y'),
('%', 'test\\_%', '', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'N', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'N', 'N', 'Y', 'Y', 'Y'),
('localhost', 'phpmyadmin', 'pma', 'Y', 'Y', 'Y', 'Y', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N');

-- --------------------------------------------------------

--
-- Table structure for table `event`
--

CREATE TABLE `event` (
  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',
  `name` char(64) NOT NULL DEFAULT '',
  `body` longblob NOT NULL,
  `definer` char(141) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',
  `execute_at` datetime DEFAULT NULL,
  `interval_value` int(11) DEFAULT NULL,
  `interval_field` enum('YEAR','QUARTER','MONTH','DAY','HOUR','MINUTE','WEEK','SECOND','MICROSECOND','YEAR_MONTH','DAY_HOUR','DAY_MINUTE','DAY_SECOND','HOUR_MINUTE','HOUR_SECOND','MINUTE_SECOND','DAY_MICROSECOND','HOUR_MICROSECOND','MINUTE_MICROSECOND','SECOND_MICROSECOND') DEFAULT NULL,
  `created` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `last_executed` datetime DEFAULT NULL,
  `starts` datetime DEFAULT NULL,
  `ends` datetime DEFAULT NULL,
  `status` enum('ENABLED','DISABLED','SLAVESIDE_DISABLED') NOT NULL DEFAULT 'ENABLED',
  `on_completion` enum('DROP','PRESERVE') NOT NULL DEFAULT 'DROP',
  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','IGNORE_BAD_TABLE_OPTIONS','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH','EMPTY_STRING_IS_NULL','SIMULTANEOUS_ASSIGNMENT','TIME_ROUND_FRACTIONAL') NOT NULL DEFAULT '',
  `comment` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',
  `originator` int(10) UNSIGNED NOT NULL,
  `time_zone` char(64) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL DEFAULT 'SYSTEM',
  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `body_utf8` longblob DEFAULT NULL
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;

-- --------------------------------------------------------

--
-- Table structure for table `func`
--

CREATE TABLE `func` (
  `name` char(64) NOT NULL DEFAULT '',
  `ret` tinyint(1) NOT NULL DEFAULT 0,
  `dl` char(128) NOT NULL DEFAULT '',
  `type` enum('function','aggregate') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- --------------------------------------------------------

--
-- Table structure for table `general_log`
--

CREATE TABLE `general_log` (
  `event_time` timestamp(6) NOT NULL DEFAULT current_timestamp(6) ON UPDATE current_timestamp(6),
  `user_host` mediumtext NOT NULL,
  `thread_id` bigint(21) UNSIGNED NOT NULL,
  `server_id` int(10) UNSIGNED NOT NULL,
  `command_type` varchar(64) NOT NULL,
  `argument` mediumtext NOT NULL
) ENGINE=CSV DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci COMMENT='General log';

-- --------------------------------------------------------

--
-- Table structure for table `global_priv`
--

CREATE TABLE `global_priv` (
  `Host` char(60) NOT NULL DEFAULT '',
  `User` char(80) NOT NULL DEFAULT '',
  `Priv` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL DEFAULT '{}' CHECK (json_valid(`Priv`))
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

--
-- Dumping data for table `global_priv`
--

INSERT INTO `global_priv` (`Host`, `User`, `Priv`) VALUES
('localhost', 'root', '{\"access\":18446744073709551615}'),
('127.0.0.1', 'root', '{\"access\":18446744073709551615}'),
('::1', 'root', '{\"access\":18446744073709551615}'),
('localhost', 'pma', '{\"access\":0,\"plugin\":\"mysql_native_password\",\"authentication_string\":\"\",\"password_last_changed\":1571661132}');

-- --------------------------------------------------------

--
-- Table structure for table `gtid_slave_pos`
--

CREATE TABLE `gtid_slave_pos` (
  `domain_id` int(10) UNSIGNED NOT NULL,
  `sub_id` bigint(20) UNSIGNED NOT NULL,
  `server_id` int(10) UNSIGNED NOT NULL,
  `seq_no` bigint(20) UNSIGNED NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci COMMENT='Replication slave GTID position';

-- --------------------------------------------------------

--
-- Table structure for table `help_category`
--

CREATE TABLE `help_category` (
  `help_category_id` smallint(5) UNSIGNED NOT NULL,
  `name` char(64) NOT NULL,
  `parent_category_id` smallint(5) UNSIGNED DEFAULT NULL,
  `url` text NOT NULL
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;

--
-- Dumping data for table `help_category`
--

INSERT INTO `help_category` (`help_category_id`, `name`, `parent_category_id`, `url`) VALUES
(1, 'Geographic', 0, ''),
(2, 'Polygon Properties', 34, ''),
(3, 'WKT', 34, ''),
(4, 'Numeric Functions', 38, ''),
(5, 'Plugins', 35, ''),
(6, 'MBR', 34, ''),
(7, 'Control Flow Functions', 38, ''),
(8, 'Transactions', 35, ''),
(9, 'Help Metadata', 35, ''),
(10, 'Account Management', 35, ''),
(11, 'Point Properties', 34, ''),
(12, 'Encryption Functions', 38, ''),
(13, 'LineString Properties', 34, ''),
(14, 'Miscellaneous Functions', 38, ''),
(15, 'Logical Operators', 38, ''),
(16, 'Functions and Modifiers for Use with GROUP BY', 35, ''),
(17, 'Information Functions', 38, ''),
(18, 'Comparison Operators', 38, ''),
(19, 'Bit Functions', 38, ''),
(20, 'Table Maintenance', 35, ''),
(21, 'User-Defined Functions', 35, ''),
(22, 'Data Types', 35, ''),
(23, 'Compound Statements', 35, ''),
(24, 'Geometry Constructors', 34, ''),
(25, 'GeometryCollection Properties', 1, ''),
(26, 'Administration', 35, ''),
(27, 'Data Manipulation', 35, ''),
(28, 'Utility', 35, ''),
(29, 'Language Structure', 35, ''),
(30, 'Geometry Relations', 34, ''),
(31, 'Date and Time Functions', 38, ''),
(32, 'WKB', 34, ''),
(33, 'Procedures', 35, ''),
(34, 'Geographic Features', 35, ''),
(35, 'Contents', 0, ''),
(36, 'Geometry Properties', 34, ''),
(37, 'String Functions', 38, ''),
(38, 'Functions', 35, ''),
(39, 'Data Definition', 35, ''),
(40, 'Sequences', 35, ''),
(41, 'JSON Functions', 38, ''),
(42, 'Window Functions', 38, ''),
(43, 'Spider Functions', 38, ''),
(44, 'Dynamic Column Functions', 38, ''),
(45, 'Storage Engines', 35, ''),
(46, 'InnoDB', 45, ''),
(47, 'Optimization and Indexes', 35, ''),
(48, 'Full-text Indexes', 47, '');

-- --------------------------------------------------------

--
-- Table structure for table `help_keyword`
--

CREATE TABLE `help_keyword` (
  `help_keyword_id` int(10) UNSIGNED NOT NULL,
  `name` char(64) NOT NULL
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;

--
-- Dumping data for table `help_keyword`
--

INSERT INTO `help_keyword` (`help_keyword_id`, `name`) VALUES
(1, 'account'),
(2, 'aggregate'),
(3, 'add'),
(4, 'after'),
(5, 'alter'),
(6, 'completion'),
(7, 'schedule'),
(8, 'server'),
(9, 'columns'),
(10, 'drop'),
(11, 'analyze'),
(12, 'json'),
(13, 'value'),
(14, 'master_ssl_ca'),
(15, 'master_ssl_verify_cert'),
(16, 'nchar'),
(17, 'action'),
(18, 'create'),
(19, 'at'),
(20, 'starts'),
(21, 'returns'),
(22, 'host'),
(23, 'row_format'),
(24, 'deallocate prepare'),
(25, 'drop prepare'),
(26, 'against'),
(27, 'fulltext'),
(28, 'escape'),
(29, 'mode'),
(30, 'repeat'),
(31, 'sql_big_result'),
(32, 'isolation'),
(33, 'read committed'),
(34, 'read uncommitted'),
(35, 'repeatable read'),
(36, 'serializable'),
(37, 'work');

-- --------------------------------------------------------

--
-- Table structure for table `help_relation`
--

CREATE TABLE `help_relation` (
  `help_topic_id` int(10) UNSIGNED NOT NULL,
  `help_keyword_id` int(10) UNSIGNED NOT NULL
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;

--
-- Dumping data for table `help_relation`
--

INSERT INTO `help_relation` (`help_topic_id`, `help_keyword_id`) VALUES
(116, 1),
(118, 1),
(119, 1),
(183, 2),
(184, 2),
(185, 2),
(186, 2),
(187, 2),
(188, 2),
(189, 2),
(190, 2),
(191, 2),
(192, 2),
(193, 2),
(194, 2),
(196, 2),
(197, 2),
(199, 2),
(258, 2),
(724, 2),
(652, 3),
(751, 3),
(652, 4),
(119, 5),
(645, 5),
(646, 5),
(647, 5),
(648, 5),
(649, 5),
(650, 5),
(652, 5),
(653, 5),
(654, 5),
(646, 6),
(657, 6),
(646, 7),
(657, 7),
(651, 8),
(357, 9),
(652, 9),
(665, 9),
(97, 10),
(120, 10),
(259, 10),
(652, 10),
(669, 10),
(670, 10),
(671, 10),
(672, 10),
(673, 10),
(674, 10),
(675, 10),
(676, 10),
(677, 10),
(678, 10),
(680, 10),
(681, 10),
(251, 11),
(444, 11),
(446, 11),
(447, 11),
(280, 12),
(447, 12),
(448, 12),
(449, 12),
(264, 13),
(317, 13),
(320, 13),
(419, 13),
(435, 13),
(95, 14),
(95, 15),
(271, 16),
(655, 17),
(665, 17),
(118, 18),
(127, 18),
(258, 18),
(656, 18),
(657, 18),
(658, 18),
(659, 18),
(660, 18),
(661, 18),
(662, 18),
(663, 18),
(664, 18),
(665, 18),
(666, 18),
(667, 18),
(668, 18),
(657, 19),
(657, 20),
(258, 21),
(664, 22),
(665, 23),
(97, 24),
(97, 25),
(614, 26),
(752, 26),
(752, 27),
(753, 27),
(607, 28),
(436, 29),
(614, 29),
(316, 30),
(625, 30),
(436, 31),
(108, 32),
(108, 33),
(108, 34),
(108, 35),
(108, 36),
(110, 37);

-- --------------------------------------------------------

--
-- Table structure for table `help_topic`
--

CREATE TABLE `help_topic` (
  `help_topic_id` int(10) UNSIGNED NOT NULL,
  `name` char(64) NOT NULL,
  `help_category_id` smallint(5) UNSIGNED NOT NULL,
  `description` text NOT NULL,
  `example` text NOT NULL,
  `url` text NOT NULL
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;

--
-- Dumping data for table `help_topic`
--

INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(1, 'HELP_DATE', 9, 'This help information was generated from the MariaDB Knowledge Base\non 2 September 2019.', '', ''),
(2, 'AREA', 2, 'A synonym for ST_AREA.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/polygon-properties-area/', '', 'https://mariadb.com/kb/en/polygon-properties-area/'),
(3, 'CENTROID', 2, 'A synonym for ST_CENTROID.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/centroid/', '', 'https://mariadb.com/kb/en/centroid/'),
(4, 'ExteriorRing', 2, 'A synonym for ST_ExteriorRing.\n \n\n \n \n \n \n \n \n \n\nURL:\nhttps://mariadb.com/kb/en/polygon-properties-exteriorring/', '', 'https://mariadb.com/kb/en/polygon-properties-exteriorring/'),
(5, 'InteriorRingN', 2, 'A synonym for ST_InteriorRingN.\n \n\n \n \n \n \n \n \n \n\nURL:\nhttps://mariadb.com/kb/en/polygon-properties-interiorringn/', '', 'https://mariadb.com/kb/en/polygon-properties-interiorringn/'),
(6, 'NumInteriorRings', 2, 'A synonym for ST_NumInteriorRings.\n \n\n \n \n \n \n \n \n \n\nURL:\nhttps://mariadb.com/kb/en/polygon-properties-numinteriorrings/', '', 'https://mariadb.com/kb/en/polygon-properties-numinteriorrings/'),
(7, 'ST_AREA', 2, 'Syntax\n------ \nST_Area(poly)\nArea(poly)\n \nDescription\n----------- \nReturns as a double-precision number the area of the Polygon\nvalue poly, as measured in its spatial reference system.\n \nST_Area() and Area() are synonyms.\n \nExamples\n-------- \nSET @poly = \'Polygon((0 0,0 3,3 0,0 0),(1 1,1 2,2 1,1\n1))\';\n \nSELECT Area(GeomFromText(@poly));\n+---------------------------+\n| Area(GeomFromText(@poly)) |\n+---------------------------+\n| 4 |\n+---------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_area/', '', 'https://mariadb.com/kb/en/st_area/'),
(8, 'ST_CENTROID', 2, 'Syntax\n------ \nST_Centroid(mpoly)\nCentroid(mpoly)\n \nDescription\n----------- \nReturns a point reflecting the mathematical centroid\n(geometric center) for the MultiPolygon mpoly. The resulting\npoint will not necessarily be on the MultiPolygon. \n \nST_Centroid() and Centroid() are synonyms.\n \nExamples\n-------- \nSET @poly = ST_GeomFromText(\'POLYGON((0 0,20 0,20 20,0 20,0\n0))\');\nSELECT ST_AsText(ST_Centroid(@poly)) AS center;\n \n+--------------+\n| center |\n+--------------+\n| POINT(10 10) |\n+--------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_centroid/', '', 'https://mariadb.com/kb/en/st_centroid/'),
(9, 'ST_ExteriorRing', 2, 'Syntax\n------ \nST_ExteriorRing(poly)\nExteriorRing(poly)\n \nDescription\n----------- \nReturns the exterior ring of the Polygon value poly as a\nLineString.\n \nST_ExteriorRing() and ExteriorRing() are synonyms.\n \nExamples\n-------- \nSET @poly = \'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2\n1,1 1))\';\n \nSELECT AsText(ExteriorRing(GeomFromText(@poly)));\n+-------------------------------------------+\n| AsText(ExteriorRing(GeomFromText(@poly))) |\n+-------------------------------------------+\n| LINESTRING(0 0,0 3,3 3,3 0,0 0) |\n+-------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_exteriorring/', '', 'https://mariadb.com/kb/en/st_exteriorring/'),
(10, 'ST_InteriorRingN', 2, 'Syntax\n------ \nST_InteriorRingN(poly,N)\nInteriorRingN(poly,N)\n \nDescription\n----------- \nReturns the N-th interior ring for the Polygon value poly as\na LineString. Rings are numbered beginning with 1.\n \nST_InteriorRingN() and InteriorRingN() are synonyms.\n \nExamples\n-------- \nSET @poly = \'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2\n1,1 1))\';\n \nSELECT AsText(InteriorRingN(GeomFromText(@poly),1));\n+----------------------------------------------+\n| AsText(InteriorRingN(GeomFromText(@poly),1)) |\n+----------------------------------------------+\n| LINESTRING(1 1,1 2,2 2,2 1,1 1) |\n+----------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_interiorringn/', '', 'https://mariadb.com/kb/en/st_interiorringn/'),
(11, 'ST_NumInteriorRings', 2, 'Syntax\n------ \nST_NumInteriorRings(poly)\nNumInteriorRings(poly)\n \nDescription\n----------- \nReturns an integer containing the number of interior rings\nin the Polygon value poly.\n \nNote that according the the OpenGIS standard, a POLYGON\nshould have exactly one ExteriorRing and all other rings\nshould lie within that ExteriorRing and thus be the\nInteriorRings. Practically, however, some systems, including\nMariaDB\'s, permit polygons to have several\n\'ExteriorRings\'. In the case of there being multiple,\nnon-overlapping exterior rings ST_NumInteriorRings() will\nreturn 1.\n \nST_NumInteriorRings() and NumInteriorRings() are synonyms.\n \nExamples\n-------- \nSET @poly = \'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2\n1,1 1))\';\n \nSELECT NumInteriorRings(GeomFromText(@poly));\n+---------------------------------------+\n| NumInteriorRings(GeomFromText(@poly)) |\n+---------------------------------------+\n| 1 |\n+---------------------------------------+\n \nNon-overlapping \'polygon\':\n \nSELECT ST_NumInteriorRings(ST_PolyFromText(\'POLYGON((0 0,10\n0,10 10,0 10,0 0),\n (-1 -1,-5 -1,-5 -5,-1 -5,-1 -1))\')) AS NumInteriorRings;\n \n+------------------+\n| NumInteriorRings |\n+------------------+\n| 1 |\n+------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_numinteriorrings/', '', 'https://mariadb.com/kb/en/st_numinteriorrings/'),
(12, 'WKT Definition', 3, 'Description\n----------- \nThe Well-Known Text (WKT) representation of Geometry is\ndesigned to exchange geometry data in ASCII form. Examples\nof the basic geometry types include:\n \nGeometry Types | \n \nPOINT | \n \nLINESTRING | \n \nPOLYGON | \n \nMULTIPOINT | \n \nMULTILINESTRING | \n \nMULTIPOLYGON | \n \nGEOMETRYCOLLECTION | \n \nGEOMETRY | \n \n\n\nURL: https://mariadb.com/kb/en/wkt-definition/', '', 'https://mariadb.com/kb/en/wkt-definition/'),
(13, 'AsText', 3, 'A synonym for ST_AsText().\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/wkt-astext/', '', 'https://mariadb.com/kb/en/wkt-astext/'),
(14, 'AsWKT', 3, 'A synonym for ST_AsText().\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/wkt-aswkt/', '', 'https://mariadb.com/kb/en/wkt-aswkt/'),
(15, 'GeomCollFromText', 3, 'A synonym for ST_GeomCollFromText.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/wkt-geomcollfromtext/', '', 'https://mariadb.com/kb/en/wkt-geomcollfromtext/'),
(16, 'GeometryCollectionFromText', 3, 'A synonym for ST_GeomCollFromText.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/geometrycollectionfromtext/', '', 'https://mariadb.com/kb/en/geometrycollectionfromtext/'),
(17, 'GeometryFromText', 3, 'A synonym for ST_GeomFromText.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/geometryfromtext/', '', 'https://mariadb.com/kb/en/geometryfromtext/'),
(18, 'GeomFromText', 3, 'A synonym for ST_GeomFromText.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/wkt-geomfromtext/', '', 'https://mariadb.com/kb/en/wkt-geomfromtext/'),
(19, 'LineFromText', 3, 'A synonym for ST_LineFromText.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/wkt-linefromtext/', '', 'https://mariadb.com/kb/en/wkt-linefromtext/'),
(20, 'LineStringFromText', 3, 'A synonym for ST_LineFromText.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/linestringfromtext/', '', 'https://mariadb.com/kb/en/linestringfromtext/'),
(21, 'MLineFromText', 3, 'Syntax\n------ \nMLineFromText(wkt[,srid])\nMultiLineStringFromText(wkt[,srid])\n \nDescription\n----------- \nConstructs a MULTILINESTRING value using its WKT\nrepresentation and SRID.\n \nMLineFromText() and MultiLineStringFromText() are synonyms.\n \nExamples\n-------- \nCREATE TABLE gis_multi_line (g MULTILINESTRING);\nSHOW FIELDS FROM gis_multi_line;\n \nINSERT INTO gis_multi_line VALUES\n (MultiLineStringFromText(\'MULTILINESTRING((10 48,10 21,10\n0),(16 0,16 23,16 48))\')),\n (MLineFromText(\'MULTILINESTRING((10 48,10 21,10 0))\')),\n (MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 2),\nPoint(3, 5)), LineString(Point(2, 5), Point(5, 8), Point(21,\n7))))));\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/mlinefromtext/', '', 'https://mariadb.com/kb/en/mlinefromtext/'),
(22, 'MPointFromText', 3, 'Syntax\n------ \nMPointFromText(wkt[,srid])\nMultiPointFromText(wkt[,srid])\n \nDescription\n----------- \nConstructs a MULTIPOINT value using its WKT representation\nand SRID.\n \nMPointFromText() and MultiPointFromText() are synonyms.\n \nExamples\n-------- \nCREATE TABLE gis_multi_point (g MULTIPOINT);\nSHOW FIELDS FROM gis_multi_point;\n \nINSERT INTO gis_multi_point VALUES\n (MultiPointFromText(\'MULTIPOINT(0 0,10 10,10 20,20\n20)\')),\n (MPointFromText(\'MULTIPOINT(1 1,11 11,11 21,21 21)\')),\n (MPointFromWKB(AsWKB(MultiPoint(Point(3, 6), Point(4,\n10)))));\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/mpointfromtext/', '', 'https://mariadb.com/kb/en/mpointfromtext/'),
(23, 'MPolyFromText', 3, 'Syntax\n------ \nMPolyFromText(wkt[,srid])\nMultiPolygonFromText(wkt[,srid])\n \nDescription\n----------- \nConstructs a MULTIPOLYGON value using its WKT representation\nand SRID.\n \nMPolyFromText() and MultiPolygonFromText() are synonyms.\n \nExamples\n-------- \nCREATE TABLE gis_multi_polygon (g MULTIPOLYGON);\nSHOW FIELDS FROM gis_multi_polygon;\n \nINSERT INTO gis_multi_polygon VALUES\n (MultiPolygonFromText(\'MULTIPOLYGON(((28 26,28 0,84 0,84\n42,28 26),(52 18,66 23,73 9,48 6,52 18)),((59 18,67 18,67\n13,59 13,59 18)))\')),\n (MPolyFromText(\'MULTIPOLYGON(((28 26,28 0,84 0,84 42,28\n26),(52 18,66 23,73 9,48 6,52 18)),((59 18,67 18,67 13,59\n13,59 18)))\')),\n (MPolyFromWKB(AsWKB(MultiPolygon(Polygon(LineString(Point(0,\n3), Point(3, 3), Point(3, 0), Point(0, 3)))))));\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/mpolyfromtext/', '', 'https://mariadb.com/kb/en/mpolyfromtext/'),
(24, 'MultiLineStringFromText', 3, 'A synonym for MLineFromText.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/multilinestringfromtext/', '', 'https://mariadb.com/kb/en/multilinestringfromtext/'),
(25, 'MultiPointFromText', 3, 'A synonym for MPointFromText.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/multipointfromtext/', '', 'https://mariadb.com/kb/en/multipointfromtext/'),
(26, 'MultiPolygonFromText', 3, 'A synonym for MPolyFromText.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/multipolygonfromtext/', '', 'https://mariadb.com/kb/en/multipolygonfromtext/'),
(27, 'PointFromText', 3, 'A synonym for ST_PointFromText.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/wkt-pointfromtext/', '', 'https://mariadb.com/kb/en/wkt-pointfromtext/'),
(28, 'PolyFromText', 3, 'A synonym for ST_PolyFromText.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/wkt-polyfromtext/', '', 'https://mariadb.com/kb/en/wkt-polyfromtext/'),
(29, 'PolygonFromText', 3, 'A synonym for ST_PolyFromText.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/polygonfromtext/', '', 'https://mariadb.com/kb/en/polygonfromtext/'),
(30, 'ST_AsText', 3, 'Syntax\n------ \nST_AsText(g)\nAsText(g)\nST_AsWKT(g)\nAsWKT(g)\n \nDescription\n----------- \nConverts a value in internal geometry format to its WKT\nrepresentation and returns the string result.\n \nST_AsText(), AsText(), ST_AsWKT() and AsWKT() are all\nsynonyms.\n \nExamples\n-------- \nSET @g = \'LineString(1 1,4 4,6 6)\';\n \nSELECT ST_AsText(ST_GeomFromText(@g));\n+--------------------------------+\n| ST_AsText(ST_GeomFromText(@g)) |\n+--------------------------------+\n| LINESTRING(1 1,4 4,6 6) |\n+--------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_astext/', '', 'https://mariadb.com/kb/en/st_astext/'),
(31, 'ST_ASWKT', 3, 'A synonym for ST_ASTEXT().\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_aswkt/', '', 'https://mariadb.com/kb/en/st_aswkt/'),
(32, 'ST_GeomCollFromText', 3, 'Syntax\n------ \nST_GeomCollFromText(wkt[,srid])\nST_GeometryCollectionFromText(wkt[,srid])\nGeomCollFromText(wkt[,srid])\nGeometryCollectionFromText(wkt[,srid])\n \nDescription\n----------- \nConstructs a GEOMETRYCOLLECTION value using its WKT \nrepresentation and SRID.\n \nST_GeomCollFromText(), ST_GeometryCollectionFromText(),\nGeomCollFromText() and GeometryCollectionFromText() are all\nsynonyms.\n \nExample\n \nCREATE TABLE gis_geometrycollection (g GEOMETRYCOLLECTION);\nSHOW FIELDS FROM gis_geometrycollection;\n \nINSERT INTO gis_geometrycollection VALUES\n (GeomCollFromText(\'GEOMETRYCOLLECTION(POINT(0 0),\nLINESTRING(0 0,10 10))\')),\n (GeometryFromWKB(AsWKB(GeometryCollection(Point(44, 6),\nLineString(Point(3, 6), Point(7, 9)))))),\n (GeomFromText(\'GeometryCollection()\')),\n (GeomFromText(\'GeometryCollection EMPTY\'));\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_geomcollfromtext/', '', 'https://mariadb.com/kb/en/st_geomcollfromtext/'),
(33, 'ST_GeometryCollectionFromText', 3, 'A synonym for ST_GeomCollFromText.\n \n\n \n \n \n \n \n \n \n\nURL:\nhttps://mariadb.com/kb/en/st_geometrycollectionfromtext/', '', 'https://mariadb.com/kb/en/st_geometrycollectionfromtext/'),
(34, 'ST_GeometryFromText', 3, 'A synonym for ST_GeomFromText.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_geometryfromtext/', '', 'https://mariadb.com/kb/en/st_geometryfromtext/'),
(35, 'ST_GeomFromText', 3, 'Syntax\n------ \nST_GeomFromText(wkt[,srid])\nST_GeometryFromText(wkt[,srid])\nGeomFromText(wkt[,srid])\nGeometryFromText(wkt[,srid])\n \nDescription\n----------- \nConstructs a geometry value of any type using its WKT\nrepresentation and SRID.\n \nGeomFromText(), GeometryFromText(), ST_GeomFromText() and\nST_GeometryFromText() are all synonyms.\n \nExample\n \nSET @g = ST_GEOMFROMTEXT(\'POLYGON((1 1,1 5,4 9,6 9,9 3,7\n2,1 1))\');\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_geomfromtext/', '', 'https://mariadb.com/kb/en/st_geomfromtext/'),
(36, 'ST_LineFromText', 3, 'Syntax\n------ \nST_LineFromText(wkt[,srid])\nST_LineStringFromText(wkt[,srid])\nLineFromText(wkt[,srid])\nLineStringFromText(wkt[,srid])\n \nDescription\n----------- \nConstructs a LINESTRING value using its WKT representation\nand SRID.\n \nST_LineFromText(), ST_LineStringFromText(),\nST_LineFromText() and ST_LineStringFromText() are all\nsynonyms.\n \nExamples\n-------- \nCREATE TABLE gis_line (g LINESTRING);\nSHOW FIELDS FROM gis_line;\n \nINSERT INTO gis_line VALUES\n (LineFromText(\'LINESTRING(0 0,0 10,10 0)\')),\n (LineStringFromText(\'LINESTRING(10 10,20 10,20 20,10 20,10\n10)\')),\n (LineStringFromWKB(AsWKB(LineString(Point(10, 10),\nPoint(40, 10)))));\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_linefromtext/', '', 'https://mariadb.com/kb/en/st_linefromtext/'),
(37, 'ST_LineStringFromText', 3, 'A synonym for ST_LineFromText.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_linestringfromtext/', '', 'https://mariadb.com/kb/en/st_linestringfromtext/'),
(38, 'ST_PointFromText', 3, 'Syntax\n------ \nST_PointFromText(wkt[,srid])\nPointFromText(wkt[,srid])\n \nDescription\n----------- \nConstructs a POINT value using its WKT representation and\nSRID.\n \nST_PointFromText() and PointFromText() are synonyms.\n \nExamples\n-------- \nCREATE TABLE gis_point (g POINT);\nSHOW FIELDS FROM gis_point;\n \nINSERT INTO gis_point VALUES\n (PointFromText(\'POINT(10 10)\')),\n (PointFromText(\'POINT(20 10)\')),\n (PointFromText(\'POINT(20 20)\')),\n (PointFromWKB(AsWKB(PointFromText(\'POINT(10 20)\'))));\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_pointfromtext/', '', 'https://mariadb.com/kb/en/st_pointfromtext/'),
(39, 'ST_PolyFromText', 3, 'Syntax\n------ \nST_PolyFromText(wkt[,srid])\nST_PolygonFromText(wkt[,srid])\nPolyFromText(wkt[,srid])\nPolygonFromText(wkt[,srid])\n \nDescription\n----------- \nConstructs a POLYGON value using its WKT representation and\nSRID.\n \nST_PolyFromText(), ST_PolygonFromText(), PolyFromText() and\nST_PolygonFromText() are all synonyms.\n \nExamples\n-------- \nCREATE TABLE gis_polygon (g POLYGON);\nINSERT INTO gis_polygon VALUES\n (PolygonFromText(\'POLYGON((10 10,20 10,20 20,10 20,10\n10))\')),\n (PolyFromText(\'POLYGON((0 0,50 0,50 50,0 50,0 0), (10\n10,20 10,20 20,10 20,10 10))\'));\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_polyfromtext/', '', 'https://mariadb.com/kb/en/st_polyfromtext/'),
(40, 'ST_PolygonFromText', 3, 'A synonym for ST_PolyFromText.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_polygonfromtext/', '', 'https://mariadb.com/kb/en/st_polygonfromtext/'),
(41, 'Addition Operator (+)', 4, 'Syntax\n------ \n+\n \nDescription\n----------- \nAddition.\n \nIf both operands are integers, the result is calculated with\nBIGINT precision. If either integer is unsigned, the result\nis also an unsigned integer.\n \nFor real or string operands, the operand with the highest\nprecision determines the result precision.\n \nExamples\n-------- \nSELECT 3+5;\n \n+-----+\n| 3+5 |\n+-----+\n| 8 |\n+-----+\n \n\n\nURL: https://mariadb.com/kb/en/addition-operator/', '', 'https://mariadb.com/kb/en/addition-operator/'),
(42, 'Subtraction Operator (-)', 4, 'Syntax\n------ \n-\n \nDescription\n----------- \nSubtraction. The operator is also used as the unary minus\nfor changing sign.\n \nIf both operands are integers, the result is calculated with\nBIGINT precision. If either integer is unsigned, the result\nis also an unsigned integer, unless the\nNO_UNSIGNED_SUBTRACTION SQL_MODE is enabled, in which case\nthe result is always signed.\n \nFor real or string operands, the operand with the highest\nprecision determines the result precision.\n \nExamples\n-------- \nSELECT 96-9;\n \n+------+\n| 96-9 |\n+------+\n| 87 |\n+------+\n \nSELECT 15-17;\n \n+-------+\n| 15-17 |\n+-------+\n| -2 |\n+-------+\n \nSELECT 3.66 + 1.333;\n \n+--------------+\n| 3.66 + 1.333 |\n+--------------+\n| 4.993 |\n+--------------+\n \nUnary minus:\n \n SELECT - (3+5);\n+---------+\n| - (3+5) |\n+---------+\n| -8 |\n+---------+\n \n\n\nURL: https://mariadb.com/kb/en/subtraction-operator-/', '', 'https://mariadb.com/kb/en/subtraction-operator-/'),
(43, 'Division Operator (/)', 4, 'Syntax\n------ \n/\n \nDescription\n----------- \nDivision operator. Dividing by zero will return NULL. By\ndefault, returns four digits after the decimal. This is\ndetermined by the server system variable\ndiv_precision_increment which by default is four. It can be\nset from 0 to 30.\n \nDividing by zero returns NULL. If the\nERROR_ON_DIVISION_BY_ZERO SQL_MODE is used (the default\nsince MariaDB 10.2.4), a division by zero also produces a\nwarning.\n \nExamples\n-------- \nSELECT 4/5;\n \n+--------+\n| 4/5 |\n+--------+\n| 0.8000 |\n+--------+\n \nSELECT 300/(2-2);\n+-----------+\n| 300/(2-2) |\n+-----------+\n| NULL |\n+-----------+\n \nSELECT 300/7;\n \n+---------+\n| 300/7 |\n+---------+\n| 42.8571 |\n+---------+\n \nChanging div_precision_increment for the session from the\ndefault of four to six:\n \nSET div_precision_increment = 6;\n \nSELECT 300/7;\n \n+-----------+\n| 300/7 |\n+-----------+\n| 42.857143 |\n+-----------+\n \nSELECT 300/7;\n \n+-----------+\n| 300/7 |\n+-----------+\n| 42.857143 |\n+-----------+\n \n\n\nURL: https://mariadb.com/kb/en/division-operator/', '', 'https://mariadb.com/kb/en/division-operator/'),
(44, 'Multiplication Operator (*)', 4, 'Syntax\n------ \n*\n \nDescription\n----------- \nMultiplication operator.\n \nExamples\n-------- \nSELECT 7*6;\n \n+-----+\n| 7*6 |\n+-----+\n| 42 |\n+-----+\n \nSELECT 1234567890*9876543210;\n \n+-----------------------+\n| 1234567890*9876543210 |\n+-----------------------+\n| -6253480962446024716 |\n+-----------------------+\n \nSELECT 18014398509481984*18014398509481984.0;\n \n+---------------------------------------+\n| 18014398509481984*18014398509481984.0 |\n+---------------------------------------+\n| 324518553658426726783156020576256.0 |\n+---------------------------------------+\n \nSELECT 18014398509481984*18014398509481984;\n \n+-------------------------------------+\n| 18014398509481984*18014398509481984 |\n+-------------------------------------+\n| 0 |\n+-------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/multiplication-operator/', '', 'https://mariadb.com/kb/en/multiplication-operator/'),
(45, 'Modulo Operator (%)', 4, 'Syntax\n------ \nN % M\n \nDescription\n----------- \nModulo operator. Returns the remainder of N divided by M.\nSee also MOD.\n \nExamples\n-------- \nSELECT 1042 % 50;\n \n+-----------+\n| 1042 % 50 |\n+-----------+\n| 42 |\n+-----------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/modulo-operator/', '', 'https://mariadb.com/kb/en/modulo-operator/'),
(46, 'DIV', 4, 'Syntax\n------ \nDIV\n \nDescription\n----------- \nInteger division. Similar to FLOOR(), but is safe with\nBIGINT values.\nIncorrect results may occur for non-integer operands that\nexceed BIGINT range.\n \nIf the ERROR_ON_DIVISION_BY_ZERO SQL_MODE is used, a\ndivision by zero produces an error. Otherwise, it returns\nNULL.\n \nThe remainder of a division can be obtained using the MOD\noperator.\n \nExamples\n-------- \nSELECT 300 DIV 7;\n \n+-----------+\n| 300 DIV 7 |\n+-----------+\n| 42 |\n+-----------+\n \nSELECT 300 DIV 0;\n \n+-----------+\n| 300 DIV 0 |\n+-----------+\n| NULL |\n+-----------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/div/', '', 'https://mariadb.com/kb/en/div/'),
(47, 'ABS', 4, 'Syntax\n------ \nABS(X)\n \nDescription\n----------- \nReturns the absolute (non-negative) value of X. If X is not\na number, it is converted to a numeric type.\n \nExamples\n-------- \nSELECT ABS(42);\n+---------+\n| ABS(42) |\n+---------+\n| 42 |\n+---------+\n \nSELECT ABS(-42);\n+----------+\n| ABS(-42) |\n+----------+\n| 42 |\n+----------+\n \nSELECT ABS(DATE \'1994-01-01\');\n+------------------------+\n| ABS(DATE \'1994-01-01\') |\n+------------------------+\n| 19940101 |\n+------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/abs/', '', 'https://mariadb.com/kb/en/abs/'),
(48, 'ACOS', 4, 'Syntax\n------ \nACOS(X)\n \nDescription\n----------- \nReturns the arc cosine of X, that is, the value whose cosine\nis X.\nReturns NULL if X is not in the range -1 to 1.\n \nExamples\n-------- \nSELECT ACOS(1);\n+---------+\n| ACOS(1) |\n+---------+\n| 0 |\n+---------+\n \nSELECT ACOS(1.0001);\n+--------------+\n| ACOS(1.0001) |\n+--------------+\n| NULL |\n+--------------+\n \nSELECT ACOS(0);\n+-----------------+\n| ACOS(0) |\n+-----------------+\n| 1.5707963267949 |\n+-----------------+\n \nSELECT ACOS(0.234);\n+------------------+\n| ACOS(0.234) |\n+------------------+\n| 1.33460644244679 |\n+------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/acos/', '', 'https://mariadb.com/kb/en/acos/'),
(49, 'ASIN', 4, 'Syntax\n------ \nASIN(X)\n \nDescription\n----------- \nReturns the arc sine of X, that is, the value whose sine is\nX. Returns\nNULL if X is not in the range -1 to 1.\n \nExamples\n-------- \nSELECT ASIN(0.2);\n+--------------------+\n| ASIN(0.2) |\n+--------------------+\n| 0.2013579207903308 |\n+--------------------+\n \nSELECT ASIN(\'foo\');\n+-------------+\n| ASIN(\'foo\') |\n+-------------+\n| 0 |\n+-------------+\n \nSHOW WARNINGS;\n \n+---------+------+-----------------------------------------+\n| Level | Code | Message |\n+---------+------+-----------------------------------------+\n| Warning | 1292 | Truncated incorrect DOUBLE value: \'foo\'\n|\n+---------+------+-----------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/asin/', '', 'https://mariadb.com/kb/en/asin/'),
(50, 'ATAN', 4, 'Syntax\n------ \nATAN(X)\n \nDescription\n----------- \nReturns the arc tangent of X, that is, the value whose\ntangent is X.\n \nExamples\n-------- \nSELECT ATAN(2);\n+--------------------+\n| ATAN(2) |\n+--------------------+\n| 1.1071487177940904 |\n+--------------------+\n \nSELECT ATAN(-2);\n+---------------------+\n| ATAN(-2) |\n+---------------------+\n| -1.1071487177940904 |\n+---------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/atan/', '', 'https://mariadb.com/kb/en/atan/'),
(51, 'ATAN2', 4, 'Syntax\n------ \nATAN(Y,X), ATAN2(Y,X)\n \nDescription\n----------- \nReturns the arc tangent of the two variables X and Y. It is\nsimilar to\ncalculating the arc tangent of Y / X, except that the signs\nof both\narguments are used to determine the quadrant of the result.\n \nExamples\n-------- \nSELECT ATAN(-2,2);\n+---------------------+\n| ATAN(-2,2) |\n+---------------------+\n| -0.7853981633974483 |\n+---------------------+\n \nSELECT ATAN2(PI(),0);\n+--------------------+\n| ATAN2(PI(),0) |\n+--------------------+\n| 1.5707963267948966 |\n+--------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/atan2/', '', 'https://mariadb.com/kb/en/atan2/'),
(52, 'CEIL', 4, 'Syntax\n------ \nCEIL(X)\n \nDescription\n----------- \nCEIL() is a synonym for CEILING().\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/ceil/', '', 'https://mariadb.com/kb/en/ceil/'),
(53, 'CEILING', 4, 'Syntax\n------ \nCEILING(X)\n \nDescription\n----------- \nReturns the smallest integer value not less than X.\n \nExamples\n-------- \nSELECT CEILING(1.23);\n+---------------+\n| CEILING(1.23) |\n+---------------+\n| 2 |\n+---------------+\n \nSELECT CEILING(-1.23);\n+----------------+\n| CEILING(-1.23) |\n+----------------+\n| -1 |\n+----------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/ceiling/', '', 'https://mariadb.com/kb/en/ceiling/'),
(54, 'CONV', 4, 'Syntax\n------ \nCONV(N,from_base,to_base)\n \nDescription\n----------- \nConverts numbers between different number bases. Returns a\nstring\nrepresentation of the number N, converted from base\nfrom_base\nto base to_base.\n \nReturns NULL if any argument is NULL, or if the second or\nthird argument are not in the allowed range.\n \nThe argument N is interpreted as an integer, but may be\nspecified as an\ninteger or a string. The minimum base is 2 and the maximum\nbase is 36. If\nto_base is a negative number, N is regarded as a signed\nnumber.\nOtherwise, N is treated as unsigned. CONV() works with\n64-bit\nprecision.\n \nSome shortcuts for this function are also available: BIN(),\nOCT(), HEX(), UNHEX(). Also, MariaDB allows binary literal\nvalues and hexadecimal literal values.\n \nExamples\n-------- \nSELECT CONV(\'a\',16,2);\n+----------------+\n| CONV(\'a\',16,2) |\n+----------------+\n| 1010 |\n+----------------+\n \nSELECT CONV(\'6E\',18,8);\n+-----------------+\n| CONV(\'6E\',18,8) |\n+-----------------+\n| 172 |\n+-----------------+\n \nSELECT CONV(-17,10,-18);\n+------------------+\n| CONV(-17,10,-18) |\n+------------------+\n| -H |\n+------------------+\n \nSELECT CONV(12+\'10\'+\'10\'+0xa,10,10);\n+------------------------------+\n| CONV(12+\'10\'+\'10\'+0xa,10,10) |\n+------------------------------+\n| 42 |\n+------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/conv/', '', 'https://mariadb.com/kb/en/conv/'),
(55, 'COS', 4, 'Syntax\n------ \nCOS(X)\n \nDescription\n----------- \nReturns the cosine of X, where X is given in radians.\n \nExamples\n-------- \nSELECT COS(PI());\n+-----------+\n| COS(PI()) |\n+-----------+\n| -1 |\n+-----------\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/cos/', '', 'https://mariadb.com/kb/en/cos/'),
(56, 'COT', 4, 'Syntax\n------ \nCOT(X)\n \nDescription\n----------- \nReturns the cotangent of X.\n \nExamples\n-------- \nSELECT COT(42);\n+--------------------+\n| COT(42) |\n+--------------------+\n| 0.4364167060752729 |\n+--------------------+\n \nSELECT COT(12);\n+---------------------+\n| COT(12) |\n+---------------------+\n| -1.5726734063976893 |\n+---------------------+\n \nSELECT COT(0);\nERROR 1690 (22003): DOUBLE value is out of range in\n\'cot(0)\'\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/cot/', '', 'https://mariadb.com/kb/en/cot/'),
(57, 'CRC32', 4, 'Syntax\n------ \nCRC32(expr)\n \nDescription\n----------- \nComputes a cyclic redundancy check value and returns a\n32-bit unsigned\nvalue. The result is NULL if the argument is NULL. The\nargument is\nexpected to be a string and (if possible) is treated as one\nif it is\nnot.\n \nExamples\n-------- \nSELECT CRC32(\'MariaDB\');\n+------------------+\n| CRC32(\'MariaDB\') |\n+------------------+\n| 4227209140 |\n+------------------+\n \nSELECT CRC32(\'mariadb\');\n+------------------+\n| CRC32(\'mariadb\') |\n+------------------+\n| 2594253378 |\n+------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/crc32/', '', 'https://mariadb.com/kb/en/crc32/'),
(58, 'DEGREES', 4, 'Syntax\n------ \nDEGREES(X)\n \nDescription\n----------- \nReturns the argument X, converted from radians to degrees.\n \nThis is the converse of the RADIANS() function.\n \nExamples\n-------- \nSELECT DEGREES(PI());\n+---------------+\n| DEGREES(PI()) |\n+---------------+\n| 180 |\n+---------------+\n \nSELECT DEGREES(PI() / 2);\n+-------------------+\n| DEGREES(PI() / 2) |\n+-------------------+\n| 90 |\n+-------------------+\n \nSELECT DEGREES(45);\n+-----------------+\n| DEGREES(45) |\n+-----------------+\n| 2578.3100780887 |\n+-----------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/degrees/', '', 'https://mariadb.com/kb/en/degrees/'),
(59, 'EXP', 4, 'Syntax\n------ \nEXP(X)\n \nDescription\n----------- \nReturns the value of e (the base of natural logarithms)\nraised to the\npower of X. The inverse of this function is LOG() (using a\nsingle\nargument only) or LN().\n \nIf X is NULL, this function returns NULL.\n \nExamples\n-------- \nSELECT EXP(2);\n+------------------+\n| EXP(2) |\n+------------------+\n| 7.38905609893065 |\n+------------------+\n \nSELECT EXP(-2);\n+--------------------+\n| EXP(-2) |\n+--------------------+\n| 0.1353352832366127 |\n+--------------------+\n \nSELECT EXP(0);\n+--------+\n| EXP(0) |\n+--------+\n| 1 |\n+--------+\n \nSELECT EXP(NULL);\n+-----------+\n| EXP(NULL) |\n+-----------+\n| NULL |\n+-----------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/exp/', '', 'https://mariadb.com/kb/en/exp/'),
(60, 'FLOOR', 4, 'Syntax\n------ \nFLOOR(X)\n \nDescription\n----------- \nReturns the largest integer value not greater than X.\n \nExamples\n-------- \nSELECT FLOOR(1.23);\n+-------------+\n| FLOOR(1.23) |\n+-------------+\n| 1 |\n+-------------+\n \nSELECT FLOOR(-1.23);\n+--------------+\n| FLOOR(-1.23) |\n+--------------+\n| -2 |\n+--------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/floor/', '', 'https://mariadb.com/kb/en/floor/'),
(61, 'LN', 4, 'Syntax\n------ \nLN(X)\n \nDescription\n----------- \nReturns the natural logarithm of X; that is, the base-e\nlogarithm of X.\nIf X is less than or equal to 0, or NULL, then NULL is\nreturned.\n \nThe inverse of this function is EXP().\n \nExamples\n-------- \nSELECT LN(2);\n+-------------------+\n| LN(2) |\n+-------------------+\n| 0.693147180559945 |\n+-------------------+\n \nSELECT LN(-2);\n+--------+\n| LN(-2) |\n+--------+\n| NULL |\n+--------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/ln/', '', 'https://mariadb.com/kb/en/ln/'),
(62, 'LOG', 4, 'Syntax\n------ \nLOG(X), LOG(B,X)\n \nDescription\n----------- \nIf called with one parameter, this function returns the\nnatural\nlogarithm of X. If X is less than or equal to 0, then NULL\nis\nreturned.\n \nIf called with two parameters, it returns the logarithm of X\nto the base B. If B is \n\nURL: https://mariadb.com/kb/en/log/', '', 'https://mariadb.com/kb/en/log/'),
(63, 'LOG10', 4, 'Syntax\n------ \nLOG10(X)\n \nDescription\n----------- \nReturns the base-10 logarithm of X.\n \nExamples\n-------- \nSELECT LOG10(2);\n+-------------------+\n| LOG10(2) |\n+-------------------+\n| 0.301029995663981 |\n+-------------------+\n \nSELECT LOG10(100);\n+------------+\n| LOG10(100) |\n+------------+\n| 2 |\n+------------+\n \nSELECT LOG10(-100);\n+-------------+\n| LOG10(-100) |\n+-------------+\n| NULL |\n+-------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/log10/', '', 'https://mariadb.com/kb/en/log10/'),
(64, 'LOG2', 4, 'Syntax\n------ \nLOG2(X)\n \nDescription\n----------- \nReturns the base-2 logarithm of X.\n \nExamples\n-------- \nSELECT LOG2(4398046511104);\n+---------------------+\n| LOG2(4398046511104) |\n+---------------------+\n| 42 |\n+---------------------+\n \nSELECT LOG2(65536);\n+-------------+\n| LOG2(65536) |\n+-------------+\n| 16 |\n+-------------+\n \nSELECT LOG2(-100);\n+------------+\n| LOG2(-100) |\n+------------+\n| NULL |\n+------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/log2/', '', 'https://mariadb.com/kb/en/log2/'),
(66, 'OCT', 4, 'Syntax\n------ \nOCT(N)\n \nDescription\n----------- \nReturns a string representation of the octal value of N,\nwhere N is a longlong (BIGINT) number. This is equivalent to\nCONV(N,10,8). Returns NULL if N is NULL.\n \nExamples\n-------- \nSELECT OCT(34);\n+---------+\n| OCT(34) |\n+---------+\n| 42 |\n+---------+\n \nSELECT OCT(12);\n+---------+\n| OCT(12) |\n+---------+\n| 14 |\n+---------+\n \n\n\nURL: https://mariadb.com/kb/en/oct/', '', 'https://mariadb.com/kb/en/oct/'),
(65, 'MOD', 4, 'Syntax\n------ \nMOD(N,M), N % M, N MOD M\n \nDescription\n----------- \nModulo operation. Returns the remainder of N divided by M.\nSee also Modulo Operator.\n \nIf the ERROR_ON_DIVISION_BY_ZERO SQL_MODE is used, any\nnumber modulus zero produces an error. Otherwise, it returns\nNULL.\n \nThe integer part of a division can be obtained using DIV.\n \nExamples\n-------- \nSELECT 1042 % 50;\n \n+-----------+\n| 1042 % 50 |\n+-----------+\n| 42 |\n+-----------+\n \nSELECT MOD(234, 10);\n+--------------+\n| MOD(234, 10) |\n+--------------+\n| 4 |\n+--------------+\n \nSELECT 253 % 7;\n \n+---------+\n| 253 % 7 |\n+---------+\n| 1 |\n+---------+\n \nSELECT MOD(29,9);\n+-----------+\n| MOD(29,9) |\n+-----------+\n| 2 |\n+-----------+\n \nSELECT 29 MOD 9;\n \n+----------+\n| 29 MOD 9 |\n+----------+\n| 2 |\n+----------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/mod/', '', 'https://mariadb.com/kb/en/mod/'),
(67, 'PI', 4, 'Syntax\n------ \nPI()\n \nDescription\n----------- \nReturns the value of π (pi). The default number of decimal\nplaces\ndisplayed is six, but MariaDB uses the full double-precision\nvalue\ninternally.\n \nExamples\n-------- \nSELECT PI();\n+----------+\n| PI() |\n+----------+\n| 3.141593 |\n+----------+\n \nSELECT PI()+0.0000000000000000000000;\n \n+-------------------------------+\n| PI()+0.0000000000000000000000 |\n+-------------------------------+\n| 3.1415926535897931159980 |\n+-------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/pi/', '', 'https://mariadb.com/kb/en/pi/'),
(68, 'POW', 4, 'Syntax\n------ \nPOW(X,Y)\n \nDescription\n----------- \nReturns the value of X raised to the power of Y.\n \nPOWER() is a synonym.\n \nExamples\n-------- \nSELECT POW(2,3);\n+----------+\n| POW(2,3) |\n+----------+\n| 8 |\n+----------+\n \nSELECT POW(2,-2);\n+-----------+\n| POW(2,-2) |\n+-----------+\n| 0.25 |\n+-----------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/pow/', '', 'https://mariadb.com/kb/en/pow/'),
(69, 'POWER', 4, 'Syntax\n------ \nPOWER(X,Y)\n \nDescription\n----------- \nThis is a synonym for POW(), which returns the value of X\nraised to the power of Y.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/power/', '', 'https://mariadb.com/kb/en/power/'),
(70, 'RADIANS', 4, 'Syntax\n------ \nRADIANS(X)\n \nDescription\n----------- \nReturns the argument X, converted from degrees to radians.\nNote that\nπ radians equals 180 degrees. \n \nThis is the converse of the DEGREES() function.\n \nExamples\n-------- \nSELECT RADIANS(45);\n+-------------------+\n| RADIANS(45) |\n+-------------------+\n| 0.785398163397448 |\n+-------------------+\n \nSELECT RADIANS(90);\n+-----------------+\n| RADIANS(90) |\n+-----------------+\n| 1.5707963267949 |\n+-----------------+\n \nSELECT RADIANS(PI());\n+--------------------+\n| RADIANS(PI()) |\n+--------------------+\n| 0.0548311355616075 |\n+--------------------+\n \nSELECT RADIANS(180);\n+------------------+\n| RADIANS(180) |\n+------------------+\n| 3.14159265358979 |\n+------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/radians/', '', 'https://mariadb.com/kb/en/radians/'),
(71, 'RAND', 4, 'Syntax\n------ \nRAND(), RAND(N)\n \nDescription\n----------- \nReturns a random DOUBLE precision floating point value v in\nthe range 0 \n\nURL: https://mariadb.com/kb/en/rand/', '', 'https://mariadb.com/kb/en/rand/'),
(72, 'ROUND', 4, 'Syntax\n------ \nROUND(X), ROUND(X,D)\n \nDescription\n----------- \nRounds the argument X to D decimal places. The rounding\nalgorithm\ndepends on the data type of X. D defaults to 0 if not\nspecified.\nD can be negative to cause D digits left of the decimal\npoint of the\nvalue X to become zero.\n \nExamples\n-------- \nSELECT ROUND(-1.23);\n+--------------+\n| ROUND(-1.23) |\n+--------------+\n| -1 |\n+--------------+\n \nSELECT ROUND(-1.58);\n+--------------+\n| ROUND(-1.58) |\n+--------------+\n| -2 |\n+--------------+\n \nSELECT ROUND(1.58); \n+-------------+\n| ROUND(1.58) |\n+-------------+\n| 2 |\n+-------------+\n \nSELECT ROUND(1.298, 1);\n+-----------------+\n| ROUND(1.298, 1) |\n+-----------------+\n| 1.3 |\n+-----------------+\n \nSELECT ROUND(1.298, 0);\n+-----------------+\n| ROUND(1.298, 0) |\n+-----------------+\n| 1 |\n+-----------------+\n \nSELECT ROUND(23.298, -1);\n+-------------------+\n| ROUND(23.298, -1) |\n+-------------------+\n| 20 |\n+-------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/round/', '', 'https://mariadb.com/kb/en/round/'),
(73, 'SIGN', 4, 'Syntax\n------ \nSIGN(X)\n \nDescription\n----------- \nReturns the sign of the argument as -1, 0, or 1, depending\non whether\nX is negative, zero, or positive.\n \nExamples\n-------- \nSELECT SIGN(-32);\n+-----------+\n| SIGN(-32) |\n+-----------+\n| -1 |\n+-----------+\n \nSELECT SIGN(0);\n+---------+\n| SIGN(0) |\n+---------+\n| 0 |\n+---------+\n \nSELECT SIGN(234);\n+-----------+\n| SIGN(234) |\n+-----------+\n| 1 |\n+-----------+\n \n\n\nURL: https://mariadb.com/kb/en/sign/', '', 'https://mariadb.com/kb/en/sign/'),
(74, 'SIN', 4, 'Syntax\n------ \nSIN(X)\n \nDescription\n----------- \nReturns the sine of X, where X is given in radians.\n \nExamples\n-------- \nSELECT SIN(1.5707963267948966);\n+-------------------------+\n| SIN(1.5707963267948966) |\n+-------------------------+\n| 1 |\n+-------------------------+\n \nSELECT SIN(PI());\n+----------------------+\n| SIN(PI()) |\n+----------------------+\n| 1.22460635382238e-16 |\n+----------------------+\n \nSELECT ROUND(SIN(PI()));\n+------------------+\n| ROUND(SIN(PI())) |\n+------------------+\n| 0 |\n+------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/sin/', '', 'https://mariadb.com/kb/en/sin/'),
(75, 'SQRT', 4, 'Syntax\n------ \nSQRT(X)\n \nDescription\n----------- \nReturns the square root of X. If X is negative, NULL is\nreturned.\n \nExamples\n-------- \nSELECT SQRT(4);\n+---------+\n| SQRT(4) |\n+---------+\n| 2 |\n+---------+\n \nSELECT SQRT(20);\n+------------------+\n| SQRT(20) |\n+------------------+\n| 4.47213595499958 |\n+------------------+\n \nSELECT SQRT(-16);\n+-----------+\n| SQRT(-16) |\n+-----------+\n| NULL |\n+-----------+\n \nSELECT SQRT(1764);\n+------------+\n| SQRT(1764) |\n+------------+\n| 42 |\n+------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/sqrt/', '', 'https://mariadb.com/kb/en/sqrt/'),
(76, 'TAN', 4, 'Syntax\n------ \nTAN(X)\n \nDescription\n----------- \nReturns the tangent of X, where X is given in radians.\n \nExamples\n-------- \nSELECT TAN(0.7853981633974483);\n+-------------------------+\n| TAN(0.7853981633974483) |\n+-------------------------+\n| 0.9999999999999999 |\n+-------------------------+\n \nSELECT TAN(PI());\n+-----------------------+\n| TAN(PI()) |\n+-----------------------+\n| -1.22460635382238e-16 |\n+-----------------------+\n \nSELECT TAN(PI()+1);\n+-----------------+\n| TAN(PI()+1) |\n+-----------------+\n| 1.5574077246549 |\n+-----------------+\n \nSELECT TAN(RADIANS(PI()));\n+--------------------+\n| TAN(RADIANS(PI())) |\n+--------------------+\n| 0.0548861508080033 |\n+--------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/tan/', '', 'https://mariadb.com/kb/en/tan/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(78, 'Plugin Overview', 5, 'Plugins are server components that enhance MariaDB in some\nway. These can be anything from new storage engines, plugins\nfor enhancing full-text parsing, or even small enhancements,\nsuch as a plugin to get a timestamp as an integer.\n \nQuerying Plugin Information\n \nThere are a number of ways to see which plugins are\ncurrently active.\n \nA server almost always has a large number of active plugins,\nbecause the server contains a large number of built-in\nplugins, which are active by default and cannot be\nuninstalled.\n \nQuerying Plugin Information with SHOW PLUGINS\n \nThe SHOW PLUGINS statement can be used to query information\nabout all active plugins.\n \nFor example:\n \nSHOW PLUGINS;\n \n+----------------------------+----------+--------------------+---------+---------+\n| Name | Status | Type | Library | License |\n+----------------------------+----------+--------------------+---------+---------+\n...\n| mysql_native_password | ACTIVE | AUTHENTICATION | NULL |\nGPL |\n| mysql_old_password | ACTIVE | AUTHENTICATION | NULL | GPL\n|\n| MRG_MyISAM | ACTIVE | STORAGE ENGINE | NULL | GPL |\n...\n+----------------------------+----------+--------------------+---------+---------+\n \nIf a plugin\'s Library column has the NULL value, then the\nplugin is built-in, and it cannot be uninstalled.\n \nQuerying Plugin Information with information_schema.PLUGINS\n \nThe information_schema.PLUGINS table can be queried to get\nmore detailed information about plugins.\n \nFor example:\n \nSELECT * FROM information_schema.PLUGINS\\G\n...\n*************************** 6. row\n***************************\n PLUGIN_NAME: CSV\n PLUGIN_VERSION: 1.0\n PLUGIN_STATUS: ACTIVE\n PLUGIN_TYPE: STORAGE ENGINE\n PLUGIN_TYPE_VERSION: 100003.0\n PLUGIN_LIBRARY: NULL\nPLUGIN_LIBRARY_VERSION: NULL\n PLUGIN_AUTHOR: Brian Aker, MySQL AB\n PLUGIN_DESCRIPTION: CSV storage engine\n PLUGIN_LICENSE: GPL\n LOAD_OPTION: FORCE\n PLUGIN_MATURITY: Stable\n PLUGIN_AUTH_VERSION: 1.0\n*************************** 7. row\n***************************\n PLUGIN_NAME: MEMORY\n PLUGIN_VERSION: 1.0\n PLUGIN_STATUS: ACTIVE\n PLUGIN_TYPE: STORAGE ENGINE\n PLUGIN_TYPE_VERSION: 100003.0\n PLUGIN_LIBRARY: NULL\nPLUGIN_LIBRARY_VERSION: NULL\n PLUGIN_AUTHOR: MySQL AB\n PLUGIN_DESCRIPTION: Hash based, stored in memory, useful\nfor temporary tables\n PLUGIN_LICENSE: GPL\n LOAD_OPTION: FORCE\n PLUGIN_MATURITY: Stable\n PLUGIN_AUTH_VERSION: 1.0\n...\n \nIf a plugin\'s PLUGIN_LIBRARY column has the NULL value,\nthen the plugin is built-in, and it cannot be uninstalled.\n \nQuerying Plugin Information with mysql.plugin\n \nThe mysql.plugin table can be queried to get information\nabout installed plugins.\n \nThis table only contains information about plugins that have\nbeen installed via the following methods:\nThe INSTALL SONAME statement.\nThe INSTALL PLUGIN statement.\nThe mysql_plugin utility.\n \nThis table does not contain information about:\nBuilt-in plugins.\nPlugins loaded with the --plugin-load-add option.\nPlugins loaded with the --plugin-load option.\n \nThis table only contains enough information to reload the\nplugin when the server is restarted, which means it only\ncontains the plugin name and the plugin library.\n \nFor example:\n \nSELECT * FROM mysql.plugin;\n \n+------+------------+\n| name | dl |\n+------+------------+\n| PBXT | libpbxt.so |\n+------+------------+\n \nInstalling a Plugin\n \nThere are three primary ways to install a plugin:\nA plugin can be installed dynamically with an SQL statement.\nA plugin can be installed with a mysqld option, but it\nrequires a server restart.\nA plugin can be installed with the mysql_plugin utility,\nwhile the server is completely offline.\n \nWhen you are installing a plugin, you also have to ensure\nthat:\nThe server\'s plugin directory is properly configured, and\nthe plugin\'s library is in the plugin directory.\nThe server\'s minimum plugin maturity is properly\nconfigured, and the plugin is mature enough to be installed.\n \nInstalling a Plugin Dynamically\n \nA plugin can be installed dynamically by executing either\nthe INSTALL SONAME or the INSTALL PLUGIN statement.\n \nIf a plugin is installed with one of these statements, then\na record will be added to the mysql.plugins table for the\nplugin. This means that the plugin will automatically be\nloaded every time the server restarts, unless specifically\nuninstalled or deactivated.\n \nInstalling a Plugin with INSTALL SONAME\n \nYou can install a plugin dynamically by executing the\nINSTALL SONAME statement. INSTALL SONAME installs all\nplugins from the given plugin library. This could be\nrequired for some plugin libraries.\n \nFor example, to install all plugins in the server_audit\nplugin library (which is currently only the server_audit\naudit plugin), you could execute the following:\n \nINSTALL SONAME \'server_audit\';\n \nInstalling a Plugin with INSTALL PLUGIN\n \nYou can install a plugin dynamically by executing the\nINSTALL PLUGIN statement. INSTALL PLUGIN installs a single\nplugin from the given plugin library.\n \nFor example, to install the server_audit audit plugin from\nthe server_audit plugin library, you could execute the\nfollowing:\n \nINSTALL PLUGIN server_audit SONAME \'server_audit\';\n \nInstalling a Plugin with Plugin Load Options\n \nA plugin can be installed with a mysqld option by providing\neither the --plugin-load-add or the --plugin-load option.\n \nIf a plugin is installed with one of these options, then a\nrecord will not be added to the mysql.plugins table for the\nplugin. This means that if the server is restarted without\nthe same option set, then the plugin will not automatically\nbe loaded.\n \nInstalling a Plugin with --plugin-load-add\n \nYou can install a plugin with the --plugin-load-add option\nby specifying the option as a command-line argument to\nmysqld or by specifying the option in a relevant server\noption group in an option file.\n \nThe --plugin-load-add option uses the following format:\nPlugins can be specified in the format name=library, where\nname is the plugin name and library is the plugin library.\nThis format installs a single plugin from the given plugin\nlibrary.\nPlugins can also be specified in the format library, where\nlibrary is the plugin library. This format installs all\nplugins from the given plugin library.\nMultiple plugins can be specified by separating them with\nsemicolons.\n \nFor example, to install all plugins in the server_audit\nplugin library (which is currently only the server_audit\naudit plugin) and also the ed25519 authentication plugin\nfrom the auth_ed25519 plugin library, you could set the\noption to the following values on the command-line:\n \n$ mysqld --user=mysql --plugin-load-add=\'server_audit\'\n--plugin-load-add=\'ed25519=auth_ed25519\'\n \nYou could also set the option to the same values in an\noption file:\n \n[mariadb]\n...\nplugin_load_add = server_audit\nplugin_load_add = ed25519=auth_ed25519\n \nSpecial care must be taken when specifying both the\n--plugin-load option and the --plugin-load-add option\ntogether. The --plugin-load option resets the plugin load\nlist, and this can cause unexpected problems if you are not\naware. The --plugin-load-add option does not reset the\nplugin load list, so it is much safer to use. See Specifying\nMultiple Plugin Load Options for more information.\n \nInstalling a Plugin with --plugin-load\n \nYou can install a plugin with the --plugin-load option by\nspecifying the option as a command-line argument to mysqld\nor by specifying the option in a relevant server option\ngroup in an option file.\n \nThe --plugin-load option uses the following format:\nPlugins can be specified in the format name=library, where\nname is the plugin name and library is the plugin library.\nThis format installs a single plugin from the given plugin\nlibrary.\nPlugins can also be specified in the format library, where\nlibrary is the plugin library. This format installs all\nplugins from the given plugin library.\nMultiple plugins can be specified by separating them with\nsemicolons.\n \nFor example, to install all plugins in the server_audit\nplugin library (which is currently only the server_audit\naudit plugin) and also the ed25519 authentication plugin\nfrom the auth_ed25519 plugin library, you could set the\noption to the following values on the command-line:\n \n$ mysqld --user=mysql\n--plugin-load=\'server_audit;ed25519=auth_ed25519\'\n \nYou could also set the option to the same values in an\noption file:\n \n[mariadb]\n...\nplugin_load = server_audit;ed25519=auth_ed25519\n \nSpecial care must be taken when specifying the --plugin-load\noption multiple times, or when specifying both the\n--plugin-load option and the --plugin-load-add option\ntogether. The --plugin-load option resets the plugin load\nlist, and this can cause unexpected problems if you are not\naware. The --plugin-load-add option does not reset the\nplugin load list, so it is much safer to use. See Specifying\nMultiple Plugin Load Options for more information.\n \nSpecifying Multiple Plugin Load Options\n \nSpecial care must be taken when specifying the --plugin-load\noption multiple times, or when specifying both the\n--plugin-load option and the --plugin-load-add option. The\n--plugin-load option resets the plugin load list, and this\ncan cause unexpected problems if you are not aware. The\n--plugin-load-add option does not reset the plugin load\nlist, so it is much safer to use.\n \nThis can have the following consequences:\nIf the --plugin-load option is specified multiple times,\nthen only the last instance will have any effect. For\nexample, in the following case, the first instance of the\noption is reset:\n \n[mariadb]\n...\nplugin_load = server_audit\nplugin_load = ed25519=auth_ed25519\nIf the --plugin-load option is specified after the\n--plugin-load-add option, then it will also reset the\nchanges made by that option. For example, in the following\ncase, the --plugin-load-add option does not do anything,\nbecause the subsequent --plugin-load option resets the\nplugin load list:\n \n[mariadb]\n...\nplugin_load_add = server_audit\nplugin_load = ed25519=auth_ed25519\nIn contrast, if the --plugin-load option is specified before\nthe --plugin-load-add option, then it will work fine,\nbecause the --plugin-load-add option does not reset the\nplugin load list. For example, in the following case, both\nplugins are properly loaded:\n \n[mariadb]\n...\nplugin_load = server_audit\nplugin_load_add = ed25519=auth_ed25519\n \nInstalling a Plugin with mysql_plugin\n \nA plugin can be installed with the mysql_plugin utility if\nthe server is completely offline. \n \nThe syntax is:\n \nmysql_plugin [options] \n ENABLE|DISABLE\n \nFor example, to install the server_audit audit plugin, you\ncould execute the following:\n \nmysql_plugin server_audit ENABLE\n \nIf a plugin is installed with this utility, then a record\nwill be added to the mysql.plugins table for the plugin.\nThis means that the plugin will automatically be loaded\nevery time the server restarts, unless specifically\nuninstalled or deactivated.\n \nConfiguring the Plugin Directory\n \nWhen a plugin is being installed, the server looks for the\nplugin\'s library in the server\'s plugin directory. This\ndirectory is configured by the plugin_dir system variable.\nThis can be specified as a command-line argument to mysqld\nor it can be specified in a relevant server option group in\nan option file. For example:\n \n[mariadb]\n...\nplugin_dir = /usr/lib64/mysql/plugin\n \nConfiguring the Minimum Plugin Maturity\n \nWhen a plugin is being installed, the server compares the\nplugin\'s maturity level against the server\'s minimum\nallowed plugin maturity. This can help prevent users from\nusing unstable plugins on production servers. This minimum\nplugin maturity is configured by the plugin_maturity system\nvariable. This can be specified as a command-line argument\nto mysqld or it can be specified in a relevant server option\ngroup in an option file. For example:\n \n[mariadb]\n...\nplugin_maturity = stable\n \nConfiguring Plugin Activation at Server Startup\n \nA plugin will be loaded by default when the server starts\nif:\nThe plugin was installed with the INSTALL SONAME statement.\nThe plugin was installed with the INSTALL PLUGIN statement.\nThe plugin was installed with the mysql_plugin utility.\nThe server is configured to load the plugin with the\n--plugin-load-add option.\nThe server is configured to load the plugin with the\n--plugin-load option.\n \nThis behavior can be changed with special options that take\nthe form --plugin-name. For example, for the server_audit\naudit plugin, the special option is called --server-audit.\n \nThe possible values for these special options are:\n \nOption Value | Description | \n \nOFF | Disables the plugin without removing it from the\nmysql.plugins table. | \n \nON | Enables the plugin. If the plugin cannot be\ninitialized, then the server will still continue starting\nup, but the plugin will be disabled. | \n \nFORCE | Enables the plugin. If the plugin cannot be\ninitialized, then the server will fail to start with an\nerror. | \n \nFORCE_PLUS_PERMANENT | Enables the plugin. If the plugin\ncannot be initialized, then the server will fail to start\nwith an error. In addition, the plugin cannot be uninstalled\nwith UNINSTALL SONAME or UNINSTALL PLUGIN while the server\nis running. | \n \nA plugin\'s status can be found by looking at the\nPLUGIN_STATUS column of the information_schema.PLUGINS\ntable.\n \nUninstalling Plugins\n \nPlugins that are found in the mysql.plugin table, that is\nthose that were installed with INSTALL SONAME, INSTALL\nPLUGIN or mysql_plugin can be uninstalled in one of two\nways:\nThe UNINSTALL SONAME or the UNINSTALL PLUGIN statement while\nthe server is running\nWith mysql_plugin while the server is offline.\n \nPlugins that were enabled as a --plugin-load option do not\nneed to be uninstalled. If --plugin-load is omitted the next\ntime the server starts, or the plugin is not listed as one\nof the --plugin-load entries, the plugin will not be loaded.\n \nUNINSTALL PLUGIN uninstalls a single installed plugin, while\nUNINSTALL SONAME uninstalls all plugins belonging to a given\nlibrary.\n \n\n\nURL: https://mariadb.com/kb/en/plugin-overview/', '', 'https://mariadb.com/kb/en/plugin-overview/'),
(83, 'MBR Definition', 6, 'Description\n----------- \nThe MBR (Minimum Bounding Rectangle), or Envelope is the\nbounding\ngeometry, formed by the minimum and maximum (X,Y)\ncoordinates:\n \nExamples\n-------- \n((MINX MINY, MAXX MINY, MAXX MAXY, MINX MAXY, MINX MINY))\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/mbr-definition/', '', 'https://mariadb.com/kb/en/mbr-definition/'),
(84, 'MBRContains', 6, 'Syntax\n------ \nMBRContains(g1,g2)\n \nDescription\n----------- \nReturns 1 or 0 to indicate whether the Minimum Bounding\nRectangle of\ng1 contains the Minimum Bounding Rectangle of g2. This tests\nthe\nopposite relationship as MBRWithin().\n \nExamples\n-------- \nSET @g1 = GeomFromText(\'Polygon((0 0,0 3,3 3,3 0,0 0))\');\n \nSET @g2 = GeomFromText(\'Point(1 1)\');\n \nSELECT MBRContains(@g1,@g2), MBRContains(@g2,@g1);\n+----------------------+----------------------+\n| MBRContains(@g1,@g2) | MBRContains(@g2,@g1) |\n+----------------------+----------------------+\n| 1 | 0 |\n+----------------------+----------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/mbrcontains/', '', 'https://mariadb.com/kb/en/mbrcontains/'),
(77, 'TRUNCATE', 4, 'This page documents the TRUNCATE function. See TRUNCATE\nTABLE for the DDL statement.\n \nSyntax\n------ \nTRUNCATE(X,D)\n \nDescription\n----------- \nReturns the number X, truncated to D decimal places. If D is\n0, the\nresult has no decimal point or fractional part. D can be\nnegative to\ncause D digits left of the decimal point of the value X to\nbecome\nzero.\n \nExamples\n-------- \nSELECT TRUNCATE(1.223,1);\n+-------------------+\n| TRUNCATE(1.223,1) |\n+-------------------+\n| 1.2 |\n+-------------------+\n \nSELECT TRUNCATE(1.999,1);\n+-------------------+\n| TRUNCATE(1.999,1) |\n+-------------------+\n| 1.9 |\n+-------------------+\n \nSELECT TRUNCATE(1.999,0); \n+-------------------+\n| TRUNCATE(1.999,0) |\n+-------------------+\n| 1 |\n+-------------------+\n \nSELECT TRUNCATE(-1.999,1);\n+--------------------+\n| TRUNCATE(-1.999,1) |\n+--------------------+\n| -1.9 |\n+--------------------+\n \nSELECT TRUNCATE(122,-2);\n+------------------+\n| TRUNCATE(122,-2) |\n+------------------+\n| 100 |\n+------------------+\n \nSELECT TRUNCATE(10.28*100,0);\n+-----------------------+\n| TRUNCATE(10.28*100,0) |\n+-----------------------+\n| 1028 |\n+-----------------------+\n \n\n\nURL: https://mariadb.com/kb/en/truncate/', '', 'https://mariadb.com/kb/en/truncate/'),
(79, 'INSTALL PLUGIN', 5, 'Syntax\n------ \nINSTALL PLUGIN [IF NOT EXISTS] plugin_name SONAME\n\'plugin_library\'\n \nDescription\n----------- \nThis statement installs an individual plugin from the\nspecified library. To install the whole library (which could\nbe required), use INSTALL SONAME.\n \nplugin_name is the name of the plugin as defined in the\nplugin declaration structure contained in the library file.\nPlugin names are\nnot case sensitive. For maximal compatibility, plugin names\nshould be limited\nto ASCII letters, digits, and underscore, because they are\nused in C source\nfiles, shell command lines, M4 and Bourne shell scripts, and\nSQL environments.\n \nplugin_library is the name of the shared library that\ncontains the plugin code. Before MariaDB 5.5.21, the name\nshould include the file name extension (for\nexample, libmyplugin.so or libmyplugin.dll). Starting from\nMariaDB 5.5.21, the file name extension can be omitted\n(which makes the statement look the same on all\narchitectures).\n \nThe shared library must be located in the plugin directory\n(that is,\nthe directory named by the plugin_dir system variable). The\nlibrary must be in the plugin directory itself, not in a\nsubdirectory. By\ndefault, plugin_dir is plugin directory under the directory\nnamed by\nthe pkglibdir configuration variable, but it can be changed\nby setting\nthe value of plugin_dir at server startup. For example, set\nits value in a my.cnf file:\n \n[mysqld]\nplugin_dir=/path/to/plugin/directory\nIf the value of plugin_dir is a relative path name, it is\ntaken to be relative to the MySQL base directory (the value\nof the basedir\nsystem variable).\n \nINSTALL PLUGIN adds a line to the mysql.plugin table that\ndescribes the plugin. This table contains the plugin name\nand library file\nname.\n \nINSTALL PLUGIN causes the server to read\noption (my.cnf) files just as during server startup. This\nenables the plugin to\npick up any relevant options from those files. It is\npossible to add plugin\noptions to an option file even before loading a plugin (if\nthe loose prefix is\nused). It is also possible to uninstall a plugin, edit\nmy.cnf, and install the\nplugin again. Restarting the plugin this way enables it to\nthe new option\nvalues without a server restart.\n \nBefore MySQL 5.1.33, a plugin was started with each option\nset to its\ndefault value.\n \nINSTALL PLUGIN also loads and initializes the plugin code to\nmake the plugin available for use. A plugin is initialized\nby executing its\ninitialization function, which handles any setup that the\nplugin must perform\nbefore it can be used.\n \nTo use INSTALL PLUGIN, you must have the\nINSERT privilege for the mysql.plugin table.\n \nAt server startup, the server loads and initializes any\nplugin that is\nlisted in the mysql.plugin table. This means that a plugin\nis installed\nwith INSTALL PLUGIN only once, not every time the server\nstarts. Plugin loading at startup does not occur if the\nserver is started with\nthe --skip-grant-tables option.\n \nWhen the server shuts down, it executes the deinitialization\nfunction\nfor each plugin that is loaded so that the plugin has a\nchance to\nperform any final cleanup.\n \nIf you need to load plugins for a single server startup when\nthe\n--skip-grant-tables option is given (which tells the server\nnot to read system tables), use the \n--plugin-load mysqld option.\n \nIF NOT EXISTS\n \nWhen the IF NOT EXISTS clause is used, MariaDB will return a\nnote instead of an error if the specified plugin already\nexists. See SHOW WARNINGS.\n \nExamples\n-------- \nINSTALL PLUGIN sphinx SONAME \'ha_sphinx.so\';\n \nStarting from MariaDB 5.5.21, the extension can be omitted:\n \nINSTALL PLUGIN innodb SONAME \'ha_xtradb\';\n \nFrom MariaDB 10.4.0:\n \nINSTALL PLUGIN IF NOT EXISTS example SONAME \'ha_example\';\n \nQuery OK, 0 rows affected (0.104 sec)\n \nINSTALL PLUGIN IF NOT EXISTS example SONAME \'ha_example\';\n \nQuery OK, 0 rows affected, 1 warning (0.000 sec)\n \nSHOW WARNINGS;\n \n+-------+------+------------------------------------+\n| Level | Code | Message |\n+-------+------+------------------------------------+\n| Note | 1968 | Plugin \'example\' already installed |\n+-------+------+------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/install-plugin/', '', 'https://mariadb.com/kb/en/install-plugin/'),
(86, 'MBREqual', 6, 'Syntax\n------ \nMBREqual(g1,g2)\n \nDescription\n----------- \nReturns 1 or 0 to indicate whether the Minimum Bounding\nRectangles of\nthe two geometries g1 and g2 are the same.\n \nExamples\n-------- \nSET @g1=GEOMFROMTEXT(\'LINESTRING(0 0, 1 2)\');\nSET @g2=GEOMFROMTEXT(\'POLYGON((0 0, 0 2, 1 2, 1 0, 0\n0))\');\nSELECT MbrEqual(@g1,@g2);\n+-------------------+\n| MbrEqual(@g1,@g2) |\n+-------------------+\n| 1 |\n+-------------------+\n \nSET @g1=GEOMFROMTEXT(\'LINESTRING(0 0, 1 3)\');\nSET @g2=GEOMFROMTEXT(\'POLYGON((0 0, 0 2, 1 4, 1 0, 0\n0))\');\nSELECT MbrEqual(@g1,@g2);\n+-------------------+\n| MbrEqual(@g1,@g2) |\n+-------------------+\n| 0 |\n+-------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/mbrequal/', '', 'https://mariadb.com/kb/en/mbrequal/'),
(90, 'MBRWithin', 6, 'Syntax\n------ \nMBRWithin(g1,g2)\n \nDescription\n----------- \nReturns 1 or 0 to indicate whether the Minimum Bounding\nRectangle of\ng1 is within the Minimum Bounding Rectangle of g2. This\ntests the\nopposite relationship as MBRContains().\n \nExamples\n-------- \nSET @g1 = GeomFromText(\'Polygon((0 0,0 3,3 3,3 0,0 0))\');\nSET @g2 = GeomFromText(\'Polygon((0 0,0 5,5 5,5 0,0 0))\');\nSELECT MBRWithin(@g1,@g2), MBRWithin(@g2,@g1);\n+--------------------+--------------------+\n| MBRWithin(@g1,@g2) | MBRWithin(@g2,@g1) |\n+--------------------+--------------------+\n| 1 | 0 |\n+--------------------+--------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/mbrwithin/', '', 'https://mariadb.com/kb/en/mbrwithin/'),
(92, 'IF Function', 7, 'Syntax\n------ \nIF(expr1,expr2,expr3)\n \nDescription\n----------- \nIf expr1 is TRUE (expr1  0 and expr1  NULL) then IF()\nreturns expr2; otherwise it returns expr3. IF() returns a\nnumeric\nor string value, depending on the context in which it is\nused.\n \nNote: There is also an IF statement which differs from the\nIF() function described here.\n \nExamples\n-------- \nSELECT IF(1>2,2,3);\n+-------------+\n| IF(1>2,2,3) |\n+-------------+\n| 3 |\n+-------------+\n \nSELECT IF(1\n\nURL: https://mariadb.com/kb/en/if-function/', '', 'https://mariadb.com/kb/en/if-function/'),
(80, 'UNINSTALL PLUGIN', 5, 'Syntax\n------ \nUNINSTALL PLUGIN [IF EXISTS] plugin_name\n \nDescription\n----------- \nThis statement removes a single installed plugin. To\nuninstall the whole library which contains the plugin, use\nUNINSTALL SONAME. You cannot uninstall a plugin if any table\nthat uses it is open.\n \nplugin_name must be the name of some plugin that is listed\nin the mysql.plugin table. The server executes the plugin\'s\ndeinitialization\nfunction and removes the row for the plugin from the\nmysql.plugin\ntable, so that subsequent server restarts will not load and\ninitialize\nthe plugin. UNINSTALL PLUGIN does not remove the plugin\'s\nshared library file.\n \nTo use UNINSTALL PLUGIN, you must have the\nDELETE privilege for the mysql.plugin table.\n \nIF EXISTS\n \nIf the IF EXISTS clause is used, MariaDB will return a note\ninstead of an error if the plugin does not exist. See SHOW\nWARNINGS.\n \nExamples\n-------- \nUNINSTALL PLUGIN example;\n \nFrom MariaDB 10.4.0:\n \nUNINSTALL PLUGIN IF EXISTS example;\n \nQuery OK, 0 rows affected (0.099 sec)\n \nUNINSTALL PLUGIN IF EXISTS example;\n \nQuery OK, 0 rows affected, 1 warning (0.000 sec)\n \nSHOW WARNINGS;\n \n+-------+------+-------------------------------+\n| Level | Code | Message |\n+-------+------+-------------------------------+\n| Note | 1305 | PLUGIN example does not exist |\n+-------+------+-------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/uninstall-plugin/', '', 'https://mariadb.com/kb/en/uninstall-plugin/'),
(81, 'INSTALL SONAME', 5, 'INSTALL SONAME has been supported since MariaDB 5.5.21.\n \nSyntax\n------ \nINSTALL SONAME \'plugin_library\'\n \nDescription\n----------- \nThis statement is a variant of INSTALL PLUGIN. It installs\nall plugins from a given plugin_library. See INSTALL PLUGIN\nfor details.\n \nplugin_library is the name of the shared library that\ncontains the plugin code. The file name extension (for\nexample, libmyplugin.so or libmyplugin.dll) can be omitted\n(which makes the statement look the same on all\narchitectures).\n \nThe shared library must be located in the plugin directory\n(that is,\nthe directory named by the plugin_dir system variable). The\nlibrary must be in the plugin directory itself, not in a\nsubdirectory. By\ndefault, plugin_dir is plugin directory under the directory\nnamed by\nthe pkglibdir configuration variable, but it can be changed\nby setting\nthe value of plugin_dir at server startup. For example, set\nits value in a my.cnf file:\n \n[mysqld]\nplugin_dir=/path/to/plugin/directory\nIf the value of plugin_dir is a relative path name, it is\ntaken to be relative to the MySQL base directory (the value\nof the basedir\nsystem variable).\n \nINSTALL SONAME adds one or more lines to the mysql.plugin\ntable that\ndescribes the plugin. This table contains the plugin name\nand library file\nname.\n \nINSTALL SONAME causes the server to read\noption (my.cnf) files just as during server startup. This\nenables the plugin to\npick up any relevant options from those files. It is\npossible to add plugin\noptions to an option file even before loading a plugin (if\nthe loose prefix is\nused). It is also possible to uninstall a plugin, edit\nmy.cnf, and install the\nplugin again. Restarting the plugin this way enables it to\nthe new option\nvalues without a server restart.\n \nINSTALL SONAME also loads and initializes the plugin code to\nmake the plugin available for use. A plugin is initialized\nby executing its\ninitialization function, which handles any setup that the\nplugin must perform\nbefore it can be used.\n \nTo use INSTALL SONAME, you must have the\nINSERT privilege for the mysql.plugin table.\n \nAt server startup, the server loads and initializes any\nplugin that is\nlisted in the mysql.plugin table. This means that a plugin\nis installed\nwith INSTALL SONAME only once, not every time the server\nstarts. Plugin loading at startup does not occur if the\nserver is started with\nthe --skip-grant-tables option.\n \nWhen the server shuts down, it executes the deinitialization\nfunction\nfor each plugin that is loaded so that the plugin has a\nchance to\nperform any final cleanup.\n \nIf you need to load plugins for a single server startup when\nthe\n--skip-grant-tables option is given (which tells the server\nnot to read system tables), use the \n--plugin-load mysqld option.\n \nIf you need to install only one plugin from a library, use\nthe INSTALL PLUGIN statement.\n \nExamples\n-------- \nTo load the XtraDB storage engine and all of its\ninformation_schema tables with one statement, use\n \nINSTALL SONAME \'ha_xtradb\';\n \nThis statement can be used instead of INSTALL PLUGIN even\nwhen the library contains only one plugin:\n \nINSTALL SONAME \'ha_sequence\';\n \n\n\nURL: https://mariadb.com/kb/en/install-soname/', '', 'https://mariadb.com/kb/en/install-soname/'),
(82, 'UNINSTALL SONAME', 5, 'UNINSTALL SONAME has been supported since MariaDB 5.5.21.\n \nSyntax\n------ \nUNINSTALL SONAME [IF EXISTS] \'plugin_library\'\n \nDescription\n----------- \nThis statement is a variant of UNINSTALL PLUGIN statement,\nthat removes all plugins belonging to a specified\nplugin_library. See UNINSTALL PLUGIN for details.\n \nplugin_library is the name of the shared library that\ncontains the plugin code. The file name extension (for\nexample, libmyplugin.so or libmyplugin.dll) can be omitted\n(which makes the statement look the same on all\narchitectures).\n \nTo use UNINSTALL SONAME, you must have the\nDELETE privilege for the mysql.plugin table.\n \nIF EXISTS\n \nIf the IF EXISTS clause is used, MariaDB will return a note\ninstead of an error if the plugin library does not exist.\nSee SHOW WARNINGS.\n \nExamples\n-------- \nTo uninstall the XtraDB plugin and all of its\ninformation_schema tables with one statement, use\n \nUNINSTALL SONAME \'ha_xtradb\';\n \nFrom MariaDB 10.4.0:\n \nUNINSTALL SONAME IF EXISTS \'ha_example\';\n \nQuery OK, 0 rows affected (0.099 sec)\n \nUNINSTALL SONAME IF EXISTS \'ha_example\';\n \nQuery OK, 0 rows affected, 1 warning (0.000 sec)\n \nSHOW WARNINGS;\n \n+-------+------+-------------------------------------+\n| Level | Code | Message |\n+-------+------+-------------------------------------+\n| Note | 1305 | SONAME ha_example.so does not exist |\n+-------+------+-------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/uninstall-soname/', '', 'https://mariadb.com/kb/en/uninstall-soname/'),
(93, 'IFNULL', 7, 'Syntax\n------ \nIFNULL(expr1,expr2)\n \nDescription\n----------- \nIf expr1 is not NULL, IFNULL() returns expr1; otherwise it\nreturns\nexpr2. IFNULL() returns a numeric or string value, depending\non the\ncontext in which it is used.\n \nExamples\n-------- \nSELECT IFNULL(1,0); \n+-------------+\n| IFNULL(1,0) |\n+-------------+\n| 1 |\n+-------------+\n \nSELECT IFNULL(NULL,10);\n+-----------------+\n| IFNULL(NULL,10) |\n+-----------------+\n| 10 |\n+-----------------+\n \nSELECT IFNULL(1/0,10);\n+----------------+\n| IFNULL(1/0,10) |\n+----------------+\n| 10.0000 |\n+----------------+\n \nSELECT IFNULL(1/0,\'yes\');\n+-------------------+\n| IFNULL(1/0,\'yes\') |\n+-------------------+\n| yes |\n+-------------------+\n \n\n\nURL: https://mariadb.com/kb/en/ifnull/', '', 'https://mariadb.com/kb/en/ifnull/'),
(94, 'NULLIF', 7, 'Syntax\n------ \nNULLIF(expr1,expr2)\n \nDescription\n----------- \nReturns NULL if expr1 = expr2 is true, otherwise returns\nexpr1. This is\nthe same as CASE WHEN expr1 = expr2 THEN NULL ELSE expr1\nEND.\n \nExamples\n-------- \nSELECT NULLIF(1,1);\n+-------------+\n| NULLIF(1,1) |\n+-------------+\n| NULL |\n+-------------+\n \nSELECT NULLIF(1,2);\n+-------------+\n| NULLIF(1,2) |\n+-------------+\n| 1 |\n+-------------+\n \n\n\nURL: https://mariadb.com/kb/en/nullif/', '', 'https://mariadb.com/kb/en/nullif/'),
(85, 'MBRDisjoint', 6, 'Syntax\n------ \nMBRDisjoint(g1,g2)\n \nDescription\n----------- \nReturns 1 or 0 to indicate whether the Minimum Bounding\nRectangles of the two geometries g1 and g2 are disjoint. Two\ngeometries are disjoint if they do not intersect, that is\ntouch or overlap.\n \nExamples\n-------- \nSET @g1 = GeomFromText(\'Polygon((0 0,0 3,3 3,3 0,0 0))\');\nSET @g2 = GeomFromText(\'Polygon((4 4,4 7,7 7,7 4,4 4))\');\nSELECTmbrdisjoint(@g1,@g2);\n+----------------------+\n| mbrdisjoint(@g1,@g2) |\n+----------------------+\n| 1 |\n+----------------------+\n \nSET @g1 = GeomFromText(\'Polygon((0 0,0 3,3 3,3 0,0 0))\');\nSET @g2 = GeomFromText(\'Polygon((3 3,3 6,6 6,6 3,3 3))\');\nSELECT mbrdisjoint(@g1,@g2);\n+----------------------+\n| mbrdisjoint(@g1,@g2) |\n+----------------------+\n| 0 |\n+----------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/mbrdisjoint/', '', 'https://mariadb.com/kb/en/mbrdisjoint/'),
(87, 'MBRIntersects', 6, 'Syntax\n------ \nMBRIntersects(g1,g2)\n \nDescription\n----------- \nReturns 1 or 0 to indicate whether the Minimum Bounding\nRectangles of the two geometries g1 and g2 intersect.\n \nExamples\n-------- \nSET @g1 = GeomFromText(\'Polygon((0 0,0 3,3 3,3 0,0 0))\');\nSET @g2 = GeomFromText(\'Polygon((3 3,3 6,6 6,6 3,3 3))\');\nSELECT mbrintersects(@g1,@g2);\n+------------------------+\n| mbrintersects(@g1,@g2) |\n+------------------------+\n| 1 |\n+------------------------+\n \nSET @g1 = GeomFromText(\'Polygon((0 0,0 3,3 3,3 0,0 0))\');\nSET @g2 = GeomFromText(\'Polygon((4 4,4 7,7 7,7 4,4 4))\');\nSELECT mbrintersects(@g1,@g2);\n+------------------------+\n| mbrintersects(@g1,@g2) |\n+------------------------+\n| 0 |\n+------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/mbrintersects/', '', 'https://mariadb.com/kb/en/mbrintersects/'),
(88, 'MBROverlaps', 6, 'Syntax\n------ \nMBROverlaps(g1,g2)\n \nDescription\n----------- \nReturns 1 or 0 to indicate whether the Minimum Bounding\nRectangles of\nthe two geometries g1 and g2 overlap. The term spatially\noverlaps is\nused if two geometries intersect and their intersection\nresults in a\ngeometry of the same dimension but not equal to either of\nthe given\ngeometries.\n \nExamples\n-------- \nSET @g1 = GeomFromText(\'Polygon((0 0,0 3,3 3,3 0,0 0))\');\nSET @g2 = GeomFromText(\'Polygon((4 4,4 7,7 7,7 4,4 4))\');\nSELECT mbroverlaps(@g1,@g2);\n+----------------------+\n| mbroverlaps(@g1,@g2) |\n+----------------------+\n| 0 |\n+----------------------+\n \nSET @g1 = GeomFromText(\'Polygon((0 0,0 3,3 3,3 0,0 0))\');\nSET @g2 = GeomFromText(\'Polygon((3 3,3 6,6 6,6 3,3 3))\');\nSELECT mbroverlaps(@g1,@g2);\n+----------------------+\n| mbroverlaps(@g1,@g2) |\n+----------------------+\n| 0 |\n+----------------------+\n \nSET @g1 = GeomFromText(\'Polygon((0 0,0 4,4 4,4 0,0 0))\');\nSET @g2 = GeomFromText(\'Polygon((3 3,3 6,6 6,6 3,3 3))\');\nSELECT mbroverlaps(@g1,@g2);\n+----------------------+\n| mbroverlaps(@g1,@g2) |\n+----------------------+\n| 1 |\n+----------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/mbroverlaps/', '', 'https://mariadb.com/kb/en/mbroverlaps/'),
(89, 'MBRTouches', 6, 'Syntax\n------ \nMBRTouches(g1,g2)\n \nDescription\n----------- \nReturns 1 or 0 to indicate whether the Minimum Bounding\nRectangles of\nthe two geometries g1 and g2 touch. Two geometries spatially\ntouch if\nthe interiors of the geometries do not intersect, but the\nboundary of\none of the geometries intersects either the boundary or the\ninterior\nof the other.\n \nExamples\n-------- \nSET @g1 = GeomFromText(\'Polygon((0 0,0 3,3 3,3 0,0 0))\');\nSET @g2 = GeomFromText(\'Polygon((4 4,4 7,7 7,7 4,4 4))\');\nSELECT mbrtouches(@g1,@g2);\n+---------------------+\n| mbrtouches(@g1,@g2) |\n+---------------------+\n| 0 |\n+---------------------+\n \nSET @g1 = GeomFromText(\'Polygon((0 0,0 3,3 3,3 0,0 0))\');\nSET @g2 = GeomFromText(\'Polygon((3 3,3 6,6 6,6 3,3 3))\');\nSELECT mbrtouches(@g1,@g2);\n+---------------------+\n| mbrtouches(@g1,@g2) |\n+---------------------+\n| 1 |\n+---------------------+\n \nSET @g1 = GeomFromText(\'Polygon((0 0,0 4,4 4,4 0,0 0))\');\nSET @g2 = GeomFromText(\'Polygon((3 3,3 6,6 6,6 3,3 3))\');\nSELECT mbrtouches(@g1,@g2);\n+---------------------+\n| mbrtouches(@g1,@g2) |\n+---------------------+\n| 0 |\n+---------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/mbrtouches/', '', 'https://mariadb.com/kb/en/mbrtouches/'),
(91, 'CASE OPERATOR', 7, 'Syntax\n------ \nCASE value WHEN [compare_value] THEN result [WHEN\n[compare_value] THEN\nresult ...] [ELSE result] END\n \nCASE WHEN [condition] THEN result [WHEN [condition] THEN\nresult ...]\n[ELSE result] END\n \nDescription\n----------- \nThe first version returns the result where\nvalue=compare_value. The\nsecond version returns the result for the first condition\nthat is\ntrue. If there was no matching result value, the result\nafter ELSE is\nreturned, or NULL if there is no ELSE part.\n \nThere is also a CASE statement, which differs from the CASE\noperator described here.\n \nExamples\n-------- \nSELECT CASE 1 WHEN 1 THEN \'one\' WHEN 2 THEN \'two\' ELSE\n\'more\' END;\n \n+------------------------------------------------------------+\n| CASE 1 WHEN 1 THEN \'one\' WHEN 2 THEN \'two\' ELSE\n\'more\' END |\n+------------------------------------------------------------+\n| one |\n+------------------------------------------------------------+\n \nSELECT CASE WHEN 1>0 THEN \'true\' ELSE \'false\' END;\n \n+--------------------------------------------+\n| CASE WHEN 1>0 THEN \'true\' ELSE \'false\' END |\n+--------------------------------------------+\n| true |\n+--------------------------------------------+\n \nSELECT CASE BINARY \'B\' WHEN \'a\' THEN 1 WHEN \'b\' THEN 2\nEND;\n \n+-----------------------------------------------------+\n| CASE BINARY \'B\' WHEN \'a\' THEN 1 WHEN \'b\' THEN 2 END\n|\n+-----------------------------------------------------+\n| NULL |\n+-----------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/case-operator/', '', 'https://mariadb.com/kb/en/case-operator/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(95, 'CHANGE MASTER TO', 8, 'Syntax\n------ \nCHANGE MASTER [\'connection_name\'] TO master_def [,\nmaster_def] ...\n \nmaster_def:\n MASTER_BIND = \'interface_name\'\n | MASTER_HOST = \'host_name\'[\n | MASTER_USER = \'user_name\'\n | MASTER_PASSWORD = \'password\'\n | MASTER_PORT = port_num\n | MASTER_CONNECT_RETRY = interval\n | MASTER_HEARTBEAT_PERIOD = interval\n | MASTER_LOG_FILE = \'master_log_name\'\n | MASTER_LOG_POS = master_log_pos\n | RELAY_LOG_FILE = \'relay_log_name\'\n | RELAY_LOG_POS = relay_log_pos\n | MASTER_DELAY = interval\n | MASTER_SSL = {0|1}\n | MASTER_SSL_CA = \'ca_file_name\'\n | MASTER_SSL_CAPATH = \'ca_directory_name\'\n | MASTER_SSL_CERT = \'cert_file_name\'\n | MASTER_SSL_CRL = \'crl_file_name\'\n | MASTER_SSL_CRLPATH = \'crl_directory_name\'\n | MASTER_SSL_KEY = \'key_file_name\'\n | MASTER_SSL_CIPHER = \'cipher_list\'\n | MASTER_SSL_VERIFY_SERVER_CERT = {0|1}\n | MASTER_USE_GTID = {current_pos|slave_pos|no}\n | IGNORE_SERVER_IDS = (server_id_list)\n | DO_DOMAIN_IDS = ([N,..])\n | IGNORE_DOMAIN_IDS = ([N,..])\n \nDescription\n----------- \nThe CHANGE MASTER statement sets the options that a\nreplication slave uses to connect to and replicate from a\nreplication master. \n \nMariaDB until 10.0.7\n \nIn MariaDB 10.0.7 and before, the relay_log_purge system\nvariable was silently set to 0 when CHANGE MASTER was\nexecuted.\n \nMulti-Source Replication\n \nMulti-source replication was added in MariaDB 10.0.1.\n \nIf you are using multi-source replication, then you need to\nspecify a connection name when you execute CHANGE MASTER.\nThere are two ways to do this:\nSetting the default_master_connection system variable prior\nto executing CHANGE MASTER.\nSetting the connection_name parameter when executing CHANGE\nMASTER.\n \ndefault_master_connection\n \nSET default_master_connection = \'gandalf\';\n \nSTOP SLAVE;\n \nCHANGE MASTER TO \n MASTER_PASSWORD=\'new3cret\';\n \nSTART SLAVE;\n \nconnection_name\n \nSTOP SLAVE \'gandalf\';\n \nCHANGE MASTER \'gandalf\' TO \n MASTER_PASSWORD=\'new3cret\';\n \nSTART SLAVE \'gandalf\';\n \nOptions\n \nConnection Options\n \nMASTER_USER\n \nThe MASTER_USER option for CHANGE MASTER defines the user\naccount that the replication slave will use to connect to\nthe replication master.\n \nThis user account will need the REPLICATION SLAVE privilege\non the master.\n \nFor example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO\n MASTER_USER=\'repl\',\n MASTER_PASSWORD=\'new3cret\';\n \nSTART SLAVE;\n \nMASTER_PASSWORD\n \nThe MASTER_USER option for CHANGE MASTER defines the\npassword that the replication slave will use to connect to\nthe replication master as the user account defined by the\nMASTER_USER option.\n \nFor example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO \n MASTER_PASSWORD=\'new3cret\';\n \nSTART SLAVE;\n \nMASTER_HOST\n \nThe MASTER_HOST option for CHANGE MASTER defines the\nhostname or IP address of the replication master.\n \nIf you set the value of the MASTER_HOST option to the empty\nstring, then that is not the same as not setting the\noption\'s value at all. In MariaDB 5.5 and later, if you set\nthe value of the MASTER_HOST option to the empty string,\nthen the CHANGE MASTER command will fail with an error. In\nMariaDB 5.3 and before, if you set the value of the\nMASTER_HOST option to the empty string, then the CHANGE\nMASTER command would succeed, but the subsequent START SLAVE\ncommand would fail.\n \nFor example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO\n MASTER_HOST=\'dbserver1.example.com\',\n MASTER_USER=\'repl\',\n MASTER_PASSWORD=\'new3cret\',\n MASTER_USE_GTID=slave_pos;\n \nSTART SLAVE;\n \nIf you set the value of the MASTER_HOST option in a CHANGE\nMASTER command, then the slave assumes that the master is\ndifferent from before, even if you set the value of this\noption to the same value it had previously. In this\nscenario, the slave will consider the old values for the\nmaster\'s binary\nlog file name and position to be invalid for the new master.\nAs a side effect, if you do not explicitly set the values of\nthe MASTER_LOG_FILE and MASTER_LOG_POS options in the\nstatement, then the statement will be implicitly appended\nwith MASTER_LOG_FILE=\'\' and MASTER_LOG_POS=4. However, if\nyou enable GTID mode for replication by setting the\nMASTER_USE_GTID option to some value other than no in the\nstatement, then these values will effectively be ignored\nanyway.\n \nReplication slaves cannot connect to replication masters\nusing Unix socket files or Windows named pipes. The\nreplication slave must connect to the replication master\nusing TCP/IP.\n \nMASTER_PORT\n \nThe MASTER_PORT option for CHANGE MASTER defines the TCP/IP\nport of the replication master.\n \nFor example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO\n MASTER_HOST=\'dbserver1.example.com\',\n MASTER_PORT=3307,\n MASTER_USER=\'repl\',\n MASTER_PASSWORD=\'new3cret\',\n MASTER_USE_GTID=slave_pos;\n \nSTART SLAVE;\n \nIf you set the value of the MASTER_PORT option in a CHANGE\nMASTER command, then the slave assumes that the master is\ndifferent from before, even if you set the value of this\noption to the same value it had previously. In this\nscenario, the slave will consider the old values for the\nmaster\'s binary\nlog file name and position to be invalid for the new master.\nAs a side effect, if you do not explicitly set the values of\nthe MASTER_LOG_FILE and MASTER_LOG_POS options in the\nstatement, then the statement will be implicitly appended\nwith MASTER_LOG_FILE=\'\' and MASTER_LOG_POS=4. However, if\nyou enable GTID mode for replication by setting the\nMASTER_USE_GTID option to some value other than no in the\nstatement, then these values will effectively be ignored\nanyway.\n \nReplication slaves cannot connect to replication masters\nusing Unix socket files or Windows named pipes. The\nreplication slave must connect to the replication master\nusing TCP/IP.\n \nMASTER_CONNECT_RETRY\n \nThe MASTER_CONNECT_RETRY option for CHANGE MASTER defines\nhow many seconds that the slave will wait between connection\nretries. The default is 60.\n \nSTOP SLAVE;\n \nCHANGE MASTER TO \n MASTER_CONNECT_RETRY=20;\n \nSTART SLAVE;\n \nThe number of connection attempts is limited by the\nmaster_retry_count option. It can be set either on the\ncommand-line or in a server option group in an option file\nprior to starting up the server. For example:\n \n[mariadb]\n...\nmaster_retry_count=4294967295\n \nMASTER_BIND\n \nThe MASTER_BIND option for CHANGE MASTER is only supported\nby MySQL 5.6.2 and later and by MySQL NDB Cluster 7.3.1 and\nlater. This option is not yet supported by MariaDB. See\nMDEV-19248 for more information.\n \nThe MASTER_BIND option for CHANGE MASTER can be used on\nreplication slaves that have multiple network interfaces to\nchoose which network interface the slave will use to connect\nto the master.\n \nMASTER_HEARTBEAT_PERIOD\n \nThe MASTER_HEARTBEAT_PERIOD option for CHANGE MASTER can be\nused to set the interval in seconds between replication\nheartbeats. Whenever the master\'s binary log is updated\nwith an event, the waiting period for the next heartbeat is\nreset.\n \nThis option\'s interval argument has the following\ncharacteristics:\nIt is a decimal value with a range of 0 to 4294967 seconds.\nIt has a resolution of hundredths of a second.\nIts smallest valid non-zero value is 0.001.\nIts default value is the value of the slave_net_timeout\nsystem variable divided by 2.\nIf it\'s set to 0, then heartbeats are disabled.\n \nHeartbeats are sent by the master only if there are no\nunsent events in the binary log file for a period longer\nthan the interval.\n \nIf the RESET SLAVE statement is executed, then the heartbeat\ninterval is reset to the default.\n \nIf the slave_net_timeout system variable is set to a value\nthat is lower than the current heartbeat interval, then a\nwarning will be issued.\n \nTLS Options\n \nThe TLS options are used for providing information about\nTLS. The options can be set even on slaves that are compiled\nwithout TLS support. The TLS options are saved to either the\ndefault master.info file or the file that is configured by\nthe master_info_file option, but these TLS options are\nignored unless the slave supports TLS.\n \nSee Replication with Secure Connections for more\ninformation.\n \nMASTER_SSL\n \nThe MASTER_SSL option for CHANGE MASTER tells the slave\nwhether to force TLS for the connection. The valid values\nare 0 or 1.\n \nFor example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO\n MASTER_SSL=1;\n \nSTART SLAVE;\n \nMASTER_SSL_CA\n \nThe MASTER_SSL_CA option for CHANGE MASTER defines a path to\na PEM file that should contain one or more X509 certificates\nfor trusted Certificate Authorities (CAs) to use for TLS.\nThis option requires that you use the absolute path, not a\nrelative path. This option implies the MASTER_SSL option.\n \nFor example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO\n MASTER_SSL_CERT=\'/etc/my.cnf.d/certificates/server-cert.pem\',\n MASTER_SSL_KEY=\'/etc/my.cnf.d/certificates/server-key.pem\',\n MASTER_SSL_CA=\'/etc/my.cnf.d/certificates/ca.pem\',\n MASTER_SSL_VERIFY_SERVER_CERT=1;\n \nSTART SLAVE;\n \nSee Secure Connections Overview: Certificate Authorities\n(CAs) for more information.\n \nMASTER_SSL_CAPATH\n \nThe MASTER_SSL_CAPATH option for CHANGE MASTER defines a\npath to a directory that contains one or more PEM files that\nshould each contain one X509 certificate for a trusted\nCertificate Authority (CA) to use for TLS. This option\nrequires that you use the absolute path, not a relative\npath. The directory specified by this option needs to be run\nthrough the openssl rehash command. This option implies the\nMASTER_SSL option.\n \nFor example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO\n MASTER_SSL_CERT=\'/etc/my.cnf.d/certificates/server-cert.pem\',\n MASTER_SSL_KEY=\'/etc/my.cnf.d/certificates/server-key.pem\',\n MASTER_SSL_CAPATH=\'/etc/my.cnf.d/certificates/ca/\',\n MASTER_SSL_VERIFY_SERVER_CERT=1;\n \nSTART SLAVE;\n \nSee Secure Connections Overview: Certificate Authorities\n(CAs) for more information.\n \nMASTER_SSL_CERT\n \nThe MASTER_SSL_CERT option for CHANGE MASTER defines a path\nto the X509 certificate file to use for TLS. This option\nrequires that you use the absolute path, not a relative\npath. This option implies the MASTER_SSL option.\n \nFor example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO\n MASTER_SSL_CERT=\'/etc/my.cnf.d/certificates/server-cert.pem\',\n MASTER_SSL_KEY=\'/etc/my.cnf.d/certificates/server-key.pem\',\n MASTER_SSL_CA=\'/etc/my.cnf.d/certificates/ca.pem\',\n MASTER_SSL_VERIFY_SERVER_CERT=1;\n \nSTART SLAVE;\n \nMASTER_SSL_CRL\n \nThe MASTER_SSL_CRL option for CHANGE MASTER defines a path\nto a PEM file that should contain one or more revoked X509\ncertificates to use for TLS. This option requires that you\nuse the absolute path, not a relative path.\n \nThis option is only supported if the server was built with\nOpenSSL. If the server was built with yaSSL, then this\noption is not supported. See TLS and Cryptography Libraries\nUsed by MariaDB for more information about which libraries\nare used on which platforms.\n \nFor example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO\n MASTER_SSL_CERT=\'/etc/my.cnf.d/certificates/server-cert.pem\',\n MASTER_SSL_KEY=\'/etc/my.cnf.d/certificates/server-key.pem\',\n MASTER_SSL_CA=\'/etc/my.cnf.d/certificates/ca.pem\',\n MASTER_SSL_VERIFY_SERVER_CERT=1,\n MASTER_SSL_CRL=\'/etc/my.cnf.d/certificates/crl.pem\';\n \nSTART SLAVE;\n \nSee Secure Connections Overview: Certificate Revocation\nLists (CRLs) for more information.\n \nMASTER_SSL_CRLPATH\n \nThe MASTER_SSL_CRLPATH option for CHANGE MASTER defines a\npath to a directory that contains one or more PEM files that\nshould each contain one revoked X509 certificate to use for\nTLS. This option requires that you use the absolute path,\nnot a relative path. The directory specified by this\nvariable needs to be run through the openssl rehash command.\n \nThis option is only supported if the server was built with\nOpenSSL. If the server was built with yaSSL, then this\noption is not supported. See TLS and Cryptography Libraries\nUsed by MariaDB for more information about which libraries\nare used on which platforms.\n \nFor example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO\n MASTER_SSL_CERT=\'/etc/my.cnf.d/certificates/server-cert.pem\',\n MASTER_SSL_KEY=\'/etc/my.cnf.d/certificates/server-key.pem\',\n MASTER_SSL_CA=\'/etc/my.cnf.d/certificates/ca.pem\',\n MASTER_SSL_VERIFY_SERVER_CERT=1,\n MASTER_SSL_CRLPATH=\'/etc/my.cnf.d/certificates/crl/\';\n \nSTART SLAVE;\n \nSee Secure Connections Overview: Certificate Revocation\nLists (CRLs) for more information.\n \nMASTER_SSL_KEY\n \nThe MASTER_SSL_KEY option for CHANGE MASTER defines a path\nto a private key file to use for TLS. This option requires\nthat you use the absolute path, not a relative path. This\noption implies the MASTER_SSL option.\n \nFor example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO\n MASTER_SSL_CERT=\'/etc/my.cnf.d/certificates/server-cert.pem\',\n MASTER_SSL_KEY=\'/etc/my.cnf.d/certificates/server-key.pem\',\n MASTER_SSL_CA=\'/etc/my.cnf.d/certificates/ca.pem\',\n MASTER_SSL_VERIFY_SERVER_CERT=1;\n \nSTART SLAVE;\n \nMASTER_SSL_CIPHER\n \nThe MASTER_SSL_CIPHER option for CHANGE MASTER defines the\nlist of permitted ciphers or cipher suites to use for TLS.\nBesides cipher names, if MariaDB was compiled with OpenSSL,\nthis option could be set to \"SSLv3\" or \"TLSv1.2\" to\nallow all SSLv3 or all TLSv1.2 ciphers. Note that the\nTLSv1.3 ciphers cannot be excluded when using OpenSSL, even\nby using this option. See Using TLSv1.3 for details. This\noption implies the MASTER_SSL option.\n \nFor example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO\n MASTER_SSL_CERT=\'/etc/my.cnf.d/certificates/server-cert.pem\',\n MASTER_SSL_KEY=\'/etc/my.cnf.d/certificates/server-key.pem\',\n MASTER_SSL_CA=\'/etc/my.cnf.d/certificates/ca.pem\',\n MASTER_SSL_VERIFY_SERVER_CERT=1,\n MASTER_SSL_CIPHER=\'TLSv1.2\';\n \nSTART SLAVE;\n \nMASTER_SSL_VERIFY_SERVER_CERT\n \nThe MASTER_SSL_VERIFY_SERVER_CERT option for CHANGE MASTER\nenables server certificate verification. This option is\ndisabled by default.\n \nFor example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO\n MASTER_SSL_CERT=\'/etc/my.cnf.d/certificates/server-cert.pem\',\n MASTER_SSL_KEY=\'/etc/my.cnf.d/certificates/server-key.pem\',\n MASTER_SSL_CA=\'/etc/my.cnf.d/certificates/ca.pem\',\n MASTER_SSL_VERIFY_SERVER_CERT=1;\n \nSTART SLAVE;\n \nSee Secure Connections Overview: Server Certificate\nVerification for more information.\n \nBinary Log Options\n \nThese options are related to the binary log position on the\nmaster.\n \nMASTER_LOG_FILE\n \nThe MASTER_LOG_FILE option for CHANGE MASTER can be used\nalong with MASTER_LOG_POS to specify the coordinates at\nwhich the slave\'s I/O thread should begin reading from the\nmaster\'s binary logs the next time the thread starts.\n \nFor example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO\n MASTER_LOG_FILE=\'master2-bin.001\',\n MASTER_LOG_POS=4;\n \nSTART SLAVE;\n \nThe MASTER_LOG_FILE and MASTER_LOG_POS options cannot be\nspecified if the RELAY_LOG_FILE and RELAY_LOG_POS options\nwere also specified.\n \nThe MASTER_LOG_FILE and MASTER_LOG_POS options are\neffectively ignored if you enable GTID mode for replication\nby setting the MASTER_USE_GTID option to some value other\nthan no in the statement.\n \nMASTER_LOG_POS\n \nThe MASTER_LOG_POS option for CHANGE MASTER can be used\nalong with MASTER_LOG_FILE to specify the coordinates at\nwhich the slave\'s I/O thread should begin reading from the\nmaster\'s binary logs the next time the thread starts.\n \nFor example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO\n MASTER_LOG_FILE=\'master2-bin.001\',\n MASTER_LOG_POS=4;\n \nSTART SLAVE;\n \nThe MASTER_LOG_FILE and MASTER_LOG_POS options cannot be\nspecified if the RELAY_LOG_FILE and RELAY_LOG_POS options\nwere also specified.\n \nThe MASTER_LOG_FILE and MASTER_LOG_POS options are\neffectively ignored if you enable GTID mode for replication\nby setting the MASTER_USE_GTID option to some value other\nthan no in the statement.\n \nRelay Log Options\n \nThese options are related to the relay log position on the\nslave.\n \nRELAY_LOG_FILE\n \nThe RELAY_LOG_FILE option for CHANGE MASTER can be used\nalong with the RELAY_LOG_POS option to specify the\ncoordinates at which the slave\'s SQL thread should begin\nreading from the relay log the next time the thread starts.\n \nThe CHANGE MASTER statement usually deletes all relay log\nfiles. However, if the RELAY_LOG_FILE and/or RELAY_LOG_POS\noptions are specified, then existing relay log files are\nkept.\n \nWhen you want to change the relay log position, you only\nneed to stop the slave\'s SQL thread. The slave\'s I/O\nthread can continue running. The STOP SLAVE and START SLAVE\nstatements support the SQL_THREAD option for this scenario.\nFor example:\n \nSTOP SLAVE SQL_THREAD;\n \nCHANGE MASTER TO\n RELAY_LOG_FILE=\'slave-relay-bin.006\',\n RELAY_LOG_POS=4025;\n \nSTART SLAVE SQL_THREAD;\n \nWhen the value of this option is changed, the metadata about\nthe slave\'s SQL thread\'s position in the relay logs will\nalso be changed in the relay-log.info file or the file that\nis configured by the relay_log_info_file system variable.\n \nThe RELAY_LOG_FILE and RELAY_LOG_POS options cannot be\nspecified if the MASTER_LOG_FILE and MASTER_LOG_POS options\nwere also specified.\n \nRELAY_LOG_POS\n \nThe RELAY_LOG_POS option for CHANGE MASTER can be used along\nwith the RELAY_LOG_FILE option to specify the coordinates at\nwhich the slave\'s SQL thread should begin reading from the\nrelay log the next time the thread starts.\n \nThe CHANGE MASTER statement usually deletes all relay log\nfiles. However, if the RELAY_LOG_FILE and/or RELAY_LOG_POS\noptions are specified, then existing relay log files are\nkept.\n \nWhen you want to change the relay log position, you only\nneed to stop the slave\'s SQL thread. The slave\'s I/O\nthread can continue running. The STOP SLAVE and START SLAVE\nstatements support the SQL_THREAD option for this scenario.\nFor example:\n \nSTOP SLAVE SQL_THREAD;\n \nCHANGE MASTER TO\n RELAY_LOG_FILE=\'slave-relay-bin.006\',\n RELAY_LOG_POS=4025;\n \nSTART SLAVE SQL_THREAD;\n \nWhen the value of this option is changed, the metadata about\nthe slave\'s SQL thread\'s position in the relay logs will\nalso be changed in the relay-log.info file or the file that\nis configured by the relay_log_info_file system variable.\n \nThe RELAY_LOG_FILE and RELAY_LOG_POS options cannot be\nspecified if the MASTER_LOG_FILE and MASTER_LOG_POS options\nwere also specified.\n \nGTID Options\n \nMASTER_USE_GTID\n \nThe MASTER_USE_GTID option for CHANGE MASTER was first added\nin MariaDB 10.0.2 to enable replication with Global\nTransaction IDs (GTIDs).\n \nThe MASTER_USE_GTID option for CHANGE MASTER can be used to\nconfigure the slave to use the global transaction ID (GTID)\nwhen connecting to a master. The possible values are:\ncurrent_pos - Replicate in GTID mode and use\ngtid_current_pos as the position to start downloading\ntransactions from the master.\nslave_pos - Replicate in GTID mode and use gtid_slave_pos as\nthe position to start downloading transactions from the\nmaster.\nno - Don\'t replicate in GTID mode.\n \nFor example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO\n MASTER_USE_GTID = current_pos;\n \nSTART SLAVE;\n \nOr:\n \nSTOP SLAVE;\n \nSET GLOBAL gtid_slave_pos=\'0-1-153\';\n \nCHANGE MASTER TO\n MASTER_USE_GTID = slave_pos;\n \nSTART SLAVE;\n \nReplication Filter Options\n \nIGNORE_SERVER_IDS\n \nThe IGNORE_SERVER_IDS option for CHANGE MASTER can be used\nto configure a replication slave to ignore binary log events\nthat originated from certain servers. Filtered binary log\nevents will not get logged to the slave’s relay log, and\nthey will not be applied by the slave.\n \nThe option\'s value can be specified by providing a\ncomma-separated list of server_id values. For example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO \n IGNORE_SERVER_IDS = (3,5);\nSTART SLAVE;\n \nIf you would like to clear a previously set list, then you\ncan set the value to an empty list. For example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO \n IGNORE_SERVER_IDS = ();\nSTART SLAVE;\n \nDO_DOMAIN_IDS\n \nThe DO_DOMAIN_IDS option for CHANGE MASTER was first added\nin MariaDB 10.1.2.\n \nThe DO_DOMAIN_IDS option for CHANGE MASTER can be used to\nconfigure a replication slave to only apply binary log\nevents if the transaction\'s GTID is in a specific\ngtid_domain_id value. Filtered binary log events will not\nget logged to the slave’s relay log, and they will not be\napplied by the slave.\n \nThe option\'s value can be specified by providing a\ncomma-separated list of gtid_domain_id values. Duplicate\nvalues are automatically ignored. For example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO \n DO_DOMAIN_IDS = (1,2);\nSTART SLAVE;\n \nIf you would like to clear a previously set list, then you\ncan set the value to an empty list. For example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO \n DO_DOMAIN_IDS = ();\nSTART SLAVE;\n \nThe DO_DOMAIN_IDS option and the IGNORE_DOMAIN_IDS option\ncannot both be set to non-empty values at the same time. If\nyou want to set the DO_DOMAIN_IDS option, and the\nIGNORE_DOMAIN_IDS option was previously set, then you need\nto clear the value of the IGNORE_DOMAIN_IDS option. For\nexample:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO \n IGNORE_DOMAIN_IDS = (), \n DO_DOMAIN_IDS = (1,2);\nSTART SLAVE;\n \nThe DO_DOMAIN_IDS option can only be specified if the slave\nis replicating in GTID mode. Therefore, the MASTER_USE_GTID\noption must also be set to some value other than no in order\nto use this option.\n \nIGNORE_DOMAIN_IDS\n \nThe IGNORE_DOMAIN_IDS option for CHANGE MASTER was first\nadded in MariaDB 10.1.2.\n \nThe IGNORE_DOMAIN_IDS option for CHANGE MASTER can be used\nto configure a replication slave to ignore binary log events\nif the transaction\'s GTID is in a specific gtid_domain_id\nvalue. Filtered binary log events will not get logged to the\nslave’s relay log, and they will not be applied by the\nslave.\n \nThe option\'s value can be specified by providing a\ncomma-separated list of gtid_domain_id values. Duplicate\nvalues are automatically ignored. For example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO \n IGNORE_DOMAIN_IDS = (1,2);\nSTART SLAVE;\n \nIf you would like to clear a previously set list, then you\ncan set the value to an empty list. For example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO \n IGNORE_DOMAIN_IDS = ();\nSTART SLAVE;\n \nThe DO_DOMAIN_IDS option and the IGNORE_DOMAIN_IDS option\ncannot both be set to non-empty values at the same time. If\nyou want to set the IGNORE_DOMAIN_IDS option, and the\nDO_DOMAIN_IDS option was previously set, then you need to\nclear the value of the DO_DOMAIN_IDS option. For example:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO \n DO_DOMAIN_IDS = (), \n IGNORE_DOMAIN_IDS = (1,2);\nSTART SLAVE;\n \nThe IGNORE_DOMAIN_IDS option can only be specified if the\nslave is replicating in GTID mode. Therefore, the\nMASTER_USE_GTID option must also be set to some value other\nthan no in order to use this option.\n \nDelayed Replication Options\n \nMASTER_DELAY\n \nThe MASTER_DELAY option for CHANGE MASTER was first added in\nMariaDB 10.2.3 to enable delayed replication.\n \nThe MASTER_DELAY option for CHANGE MASTER can be used to\nenable delayed replication. This option specifies the time\nin seconds (at least) that a replication slave should lag\nbehind the master. Before executing an event, the slave will\nfirst wait, if necessary, until the given time has passed\nsince the event was created on the master. The result is\nthat the slave will reflect the state of the master some\ntime back in the past. The default is zero, no delay.\n \nSTOP SLAVE;\n \nCHANGE MASTER TO \n MASTER_DELAY=3600;\n \nSTART SLAVE;\n \nChanging Option Values\n \nIf you don\'t specify a given option when executing the\nCHANGE MASTER statement, then the option keeps its old value\nin most cases. Most of the time, there is no need to specify\nthe options that do not need to change. For example, if the\npassword for the user account that the slave uses to connect\nto its master has changed, but no other options need to\nchange, then you can just change the MASTER_PASSWORD option\nby executing the following commands:\n \nSTOP SLAVE;\n \nCHANGE MASTER TO \n MASTER_PASSWORD=\'new3cret\';\n \nSTART SLAVE;\n \nThere are some cases where options are implicitly reset,\nsuch as when the MASTER_HOST and MASTER_PORT options are\nchanged.\n \nOption Persistence\n \nThe values of the MASTER_LOG_FILE and MASTER_LOG_POS options\n(i.e. the binary log position on the master) and most other\noptions are written to either the default master.info file\nor the file that is configured by the master_info_file\noption. The slave\'s I/O thread keeps this binary log\nposition updated as it downloads events only when\nMASTER_USE_GTID option\n is set to NO. Otherwise the file is not updated on a per\nevent basis.\n \nThe master_info_file option can be set either on the\ncommand-line or in a server option group in an option file\nprior to starting up the server. For example:\n \n[mariadb]\n...\nmaster_info_file=/mariadb/myserver1-master.info\n \nThe values of the RELAY_LOG_FILE and RELAY_LOG_POS options\n(i.e. the relay log position) are written to either the\ndefault relay-log.info file or the file that is configured\nby the relay_log_info_file system variable. The slave\'s SQL\nthread keeps this relay log position updated as it applies\nevents.\n \nThe relay_log_info_file system variable can be set either on\nthe command-line or in a server option group in an option\nfile prior to starting up the server. For example:\n \n[mariadb]\n...\nrelay_log_info_file=/mariadb/myserver1-relay-log.info\n \nGTID Persistence\n \nIf the slave is replicating binary log events that contain\nGTIDs, then the slave\'s SQL thread will write every GTID\nthat it applies to the mysql.gtid_slave_pos table. This GTID\ncan be inspected and modified through the gtid_slave_pos\nsystem variable.\n \nIf the slave has the log_slave_updates system variable\nenabled and if the slave has the binary log enabled, then\nevery write by the slave\'s SQL thread will also go into the\nslave\'s binary log. This means that GTIDs of replicated\ntransactions would be reflected in the value of the\ngtid_binlog_pos system variable.\n \nCreating a Slave from a Backup\n \nThe CHANGE MASTER statement is useful for setting up a slave\nwhen you have a backup of the master and you also have the\nbinary log position or GTID position corresponding to the\nbackup.\n \nAfter restoring the backup on the slave, you could execute\nsomething like this to use the binary log position:\n \nCHANGE MASTER TO\n MASTER_LOG_FILE=\'master2-bin.001\',\n MASTER_LOG_POS=4;\n \nSTART SLAVE;\n \nOr you could execute something like this to use the GTID\nposition:\n \nSET GLOBAL gtid_slave_pos=\'0-1-153\';\n \nCHANGE MASTER TO\n MASTER_USE_GTID=slave_pos;\n \nSTART SLAVE;\n \nSee Setting up a Replication Slave with Mariabackup for more\ninformation on how to do this with Mariabackup.\n \nExample\n \nThe following example changes the master and master\'s\nbinary log coordinates.\nThis is used when you want to set up the slave to replicate\nthe master:\n \nCHANGE MASTER TO\n MASTER_HOST=\'master2.mycompany.com\',\n MASTER_USER=\'replication\',\n MASTER_PASSWORD=\'bigs3cret\',\n MASTER_PORT=3306,\n MASTER_LOG_FILE=\'master2-bin.001\',\n MASTER_LOG_POS=4,\n MASTER_CONNECT_RETRY=10;\n \nSTART SLAVE;\n \n\n\nURL: https://mariadb.com/kb/en/change-master-to/', '', 'https://mariadb.com/kb/en/change-master-to/'),
(106, 'RESET MASTER', 8, 'RESET MASTER [TO #]\n \nDeletes all binary log files listed in the index file,\nresets the\nbinary log index file to be empty, and creates a new binary\nlog file with a suffix of .000001.\n \nIf TO # is given, then the first new binary log file will\nstart from number #.\n \nThis statement is for use only when the master is started\nfor the first time, and should never be used if any slaves\nare actively replicating from the binary log.\n \n\n\nURL: https://mariadb.com/kb/en/reset-master/', '', 'https://mariadb.com/kb/en/reset-master/'),
(113, 'UNLOCK TABLES', 8, 'Syntax\n------ \nUNLOCK TABLES\n \nDescription\n----------- \nUNLOCK TABLES explicitly releases any table locks held by\nthe\ncurrent session. See LOCK TABLES for more information.\n \nIn addition to releasing table locks acquired by the LOCK\nTABLES statement, the UNLOCK TABLES statement also releases\nthe global read lock acquired by the FLUSH TABLES WITH READ\nLOCK statement. The FLUSH TABLES WITH READ LOCK statement is\nvery useful for performing backups. See FLUSH for more\ninformation about FLUSH TABLES WITH READ LOCK.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/transactions-unlock-tables/', '', 'https://mariadb.com/kb/en/transactions-unlock-tables/'),
(115, 'XA Transactions', 8, 'Overview\n \nThe MariaDB XA implementation is based on the X/Open CAE\ndocument Distributed Transaction Processing: The XA\nSpecification. This document is published by The Open Group\nand available at\nhttp://www.opengroup.org/public/pubs/catalog/c193.htm.\n \nXA transactions are designed to allow distributed\ntransactions, where a transaction manager (the application)\ncontrols a transaction which involves multiple resources.\nSuch resources are usually DBMSs, but could be resources of\nany type. The whole set of required transactional operations\nis called a global transaction. Each subset of operations\nwhich involve a single resource is called a local\ntransaction. XA used a 2-phases commit (2PC). With the first\ncommit, the transaction manager tells each resource to\nprepare an effective commit, and waits for a confirm\nmessage. The changes are not still made effective at this\npoint. If any of the resources encountered an error, the\ntransaction manager will rollback the global transaction. If\nall resources communicate that the first commit is\nsuccessful, the transaction manager can require a second\ncommit, which makes the changes effective.\n \nIn MariaDB, XA transactions can only be used with storage\nengines that support them. At least InnoDB, TokuDB, SPIDER\nand MyRocks support them. For InnoDB, XA transactions can be\ndisabled by setting the innodb_support_xa server system\nvariable to 0. \n \nLike regular transactions, XA transactions create metadata\nlocks on accessed tables.\n \nXA transactions require REPEATABLE READ as a minimum\nisolation level. However, distributed transactions should\nalways use SERIALIZABLE.\n \nTrying to start more than one XA transaction at the same\ntime produces a 1400 error (SQLSTATE \'XAE09\'). The same\nerror is produced when attempting to start an XA transaction\nwhile a regular transaction is in effect. Trying to start a\nregular transaction while an XA transaction is in effect\nproduces a 1399 error (SQLSTATE \'XAE07\').\n \nThe statements that cause an implicit COMMIT for regular\ntransactions produce a 1400 error (SQLSTATE \'XAE09\') if a\nXA transaction is in effect.\n \nInternal XA vs External XA\n \nXA transactions are an overloaded term in MariaDB. If a\nstorage engine is XA-capable, it can mean one or both of\nthese:\nIt supports MariaDB\'s internal two-phase commit API. This\nis transparent to the user. Sometimes this is called\n\"internal XA\", since MariaDB\'s internal transaction\ncoordinator log can handle coordinating these transactions.\n \nIt supports XA transactions, with the XA START, XA PREPARE,\nXA COMMIT, etc. statements. Sometimes this is called\n\"external XA\", since it requires the use of an external\ntransaction coordinator to use this feature properly.\n \nTransaction Coordinator Log\n \nIf you have two or more XA-capable storage engines enabled,\nthen a transaction coordinator log must be available.\n \nThere are currently two implementations of the transaction\ncoordinator log:\nBinary log-based transaction coordinator log\nMemory-mapped file-based transaction coordinator log\n \nIf the binary log is enabled on a server, then the server\nwill use the binary log-based transaction coordinator log.\nOtherwise, it will use the memory-mapped file-based\ntransaction coordinator log.\n \nSee Transaction Coordinator Log for more information.\n \nSyntax\n------ \nXA {START|BEGIN} xid [JOIN|RESUME]\n \nXA END xid [SUSPEND [FOR MIGRATE]]\n \nXA PREPARE xid\n \nXA COMMIT xid [ONE PHASE]\n \nXA ROLLBACK xid\n \nXA RECOVER [FORMAT=[\'RAW\'|\'SQL\']]\n \nxid: gtrid [, bqual [, formatID ]]\n \nThe interface to XA transactions is a set of SQL statements\nstarting with XA. Each statement changes a transaction\'s\nstate, determining which actions it can perform. A\ntransaction which does not exist is in the NON-EXISTING\nstate.\n \nXA START (or BEGIN) starts a transaction and defines its xid\n(a transaction identifier). The JOIN or RESUME keywords have\nno effect. The new transaction will be in ACTIVE state.\n \nThe xid can have 3 components, though only the first one is\nmandatory. gtrid is a quoted string representing a global\ntransaction identifier. bqual is a quoted string\nrepresenting a local transaction identifier. formatID is an\nunsigned integer indicating the format used for the first\ntwo components; if not specified, defaults to 1. MariaDB\ndoes not interpret in any way these components, and only\nuses them to identify a transaction. xids of transactions in\neffect must be unique.\n \nXA END declares that the specified ACTIVE transaction is\nfinished and it changes its state to IDLE. SUSPEND [FOR\nMIGRATE] has no effect.\n \nXA PREPARE prepares an IDLE transaction for commit, changing\nits state to PREPARED. This is the first commit.\n \nXA COMMIT definitely commits and terminates a transaction\nwhich has already been PREPARED. If the ONE PHASE clause is\nspecified, this statements performs a 1-phase commit on an\nIDLE transaction.\n \nXA ROLLBACK rolls back and terminates an IDLE or PREPARED\ntransaction.\n \nXA RECOVER shows information about all PREPARED\ntransactions.\n \nWhen trying to execute an operation which is not allowed for\nthe transaction\'s current state, an error is produced:\n \nXA COMMIT \'test\' ONE PHASE;\n \nERROR 1399 (XAE07): XAER_RMFAIL: The command cannot be\nexecuted when global transaction is in the ACTIVE state\n \nXA COMMIT \'test2\';\n \nERROR 1399 (XAE07): XAER_RMFAIL: The command cannot be\nexecuted when global transaction is in the NON-EXISTING\nstate\n \nXA RECOVER\n \nThe XA RECOVER statement shows information about all\ntransactions which are in the PREPARED state. It does not\nmatter which connection created the transaction: if it has\nbeen PREPARED, it appears. But this does not mean that a\nconnection can commit or rollback a transaction which was\nstarted by another connection. Note that transactions using\na 1-phase commit are never in the PREPARED state, so they\ncannot be shown by XA RECOVER.\n \nXA RECOVER produces four columns:\n \nXA RECOVER;\n \n+----------+--------------+--------------+------+\n| formatID | gtrid_length | bqual_length | data |\n+----------+--------------+--------------+------+\n| 1 | 4 | 0 | test |\n+----------+--------------+--------------+------+\n \nYou can use XA RECOVER FORMAT=\'SQL\' to get the data in a\nhuman readable\nform that can be directly copy-pasted into XA COMMIT or XA\nROLLBACK. This is particularly useful for binary xid\ngenerated by some transaction coordinators.\n \nformatID is the formatID part of xid.\n \ndata are the gtrid and bqual parts of xid, concatenated.\n \ngtrid_length and bqual_length are the lengths of gtrid and\nbqual, respectevely.\n \nExamples\n-------- \n2-phases commit:\n \nXA START \'test\';\n \nINSERT INTO t VALUES (1,2);\n \nXA END \'test\';\n \nXA PREPARE \'test\';\n \nXA COMMIT \'test\';\n \n1-phase commit:\n \nXA START \'test\';\n \nINSERT INTO t VALUES (1,2);\n \nXA END \'test\';\n \nXA COMMIT \'test\' ONE PHASE;\n \nHuman-readable:\n \nxa start \'12\\r34\\t67\\v78\', \'abc\\ndef\', 3;\n \ninsert t1 values (40);\n \nxa end \'12\\r34\\t67\\v78\', \'abc\\ndef\', 3;\n \nxa prepare \'12\\r34\\t67\\v78\', \'abc\\ndef\', 3;\n \nxa recover format=\'RAW\';\n \n+----------+--------------+--------------+--------------------+\n| formatID | gtrid_length | bqual_length | data |\n+----------+--------------+--------------+--------------------+\n34 67v78abc 11 | 7 | 12\ndef |\n+----------+--------------+--------------+--------------------+\n \nxa recover format=\'SQL\';\n \n+----------+--------------+--------------+-----------------------------------------------+\n| formatID | gtrid_length | bqual_length | data |\n+----------+--------------+--------------+-----------------------------------------------+\n| 3 | 11 | 7 |\nX\'31320d3334093637763738\',X\'6162630a646566\',3 |\n+----------+--------------+--------------+-----------------------------------------------+\n \nxa rollback\nX\'31320d3334093637763738\',X\'6162630a646566\',3;\n \nKnown Issues\n \nMariaDB Galera Cluster\n \nMariaDB Galera Cluster does not support XA transactions. See\nMDEV-10532 for more information on that. The request to\nimplement that feature is being tracked at MDEV-17099.\n \nHowever, MariaDB Galera Cluster builds include a built-in\nplugin called wsrep. Prior to MariaDB 10.4.3, this plugin\nwas internally considered an XA-capable storage engine.\nConsequently, these MariaDB Galera Cluster builds have\nmultiple XA-capable storage engines by default, even if the\nonly \"real\" storage engine that supports external XA\ntransactions enabled on these builds by default is InnoDB.\nTherefore, when using one these builds MariaDB would be\nforced to use a transaction coordinator log by default,\nwhich could have performance implications.\n \nSee Transaction Coordinator Log Overview: MariaDB Galera\nCluster for more information.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/xa-transactions/', '', 'https://mariadb.com/kb/en/xa-transactions/'),
(117, 'Authentication from MariaDB 10.4', 10, 'MariaDB 10.4 introduces a number of changes to the\nauthentication process, intended to make things easier and\nmore intuitive.\n \nOverview\n \nThere are four main changes relating to authentication:\nIt is possible to use more than one authentication plugin\nfor each user account. For example, this can be useful to\nslowly migrate users to the more secure ed25519\nauthentication plugin over time, while allowing the old\nmysql_native_password authentication plugin as an\nalternative for the transitional period.\nThe root@localhost user account created by mysql_install_db\nis created with the ability to use two authentication\nplugins.\nFirst, it is configured to try to use the unix_socket\nauthentication plugin. This allows the the root@localhost\nuser to login without a password via the local Unix socket\nfile defined by the socket system variable, as long as the\nlogin is attempted from a process owned by the operating\nsystem root user account.\nSecond, if authentication fails with the unix_socket\nauthentication plugin, then it is configured to try to use\nthe mysql_native_password authentication plugin. However, an\ninvalid password is initially set, so in order to\nauthenticate this way, a password must be set with SET\nPASSWORD.\nHowever, just using the unix_socket authentication plugin\nmay be fine for many users, and it is very secure. You may\nwant to try going without password authentication to see how\nwell it works for you. Remember, the best way to keep your\npassword safe is not to have one!\n \nAll user accounts, passwords, and global privileges are now\nstored in the mysql.global_priv table. The mysql.user table\nstill exists and has exactly the same set of columns as\nbefore, but it’s now a view that references the\nmysql.global_priv table. Tools that analyze the mysql.user\ntable should continue to workas before.\nMariaDB 10.4 supports User Password Expiry, which is not\nactive by default.\n \nDescription\n----------- \nAs a result of the above changes, the open-for-everyone\nall-powerful root account is finally gone. And installation\nscripts will no longer demand that you “PLEASE REMEMBER TO\nSET A PASSWORD FOR THE MariaDB root USER !”, because the\nroot account is securely created automatically.\n \nTwo all-powerful accounts are created by default — root\nand the OS user that owns the data directory, typically\nmysql. They are created as:\n \nCREATE USER root@localhost IDENTIFIED VIA unix_socket OR\nmysql_native_password USING \'invalid\'\nCREATE USER mysql@localhost IDENTIFIED VIA unix_socket OR\nmysql_native_password USING \'invalid\'\n \nUsing unix_socket means that if you are the system root\nuser, you can login as root@locahost without a password.\nThis technique was pioneered by Otto Kekäläinen in Debian\nMariaDB packages and has been successfully used in Debian\nsince as early as MariaDB 10.0. \n \nIt is based on a simple fact that asking the system root for\na password adds no extra security — root has full access\nto all the data files and all process memory anyway. But not\nasking for a password means, there is no root password to\nforget (no need for the numerous tutorials on “how to\nreset MariaDB root password”). And if you want to script\nsome tedious database work, there is no need to store the\nroot password in plain text for the scipt to use (no need\nfor debian-sys-maint user).\n \nStill, some users may wish to log in as MariaDB root without\nusing sudo. Hence the old authentication method —\nconventional MariaDB password — is still available. By\ndefault it is disabled (“invalid” is not a valid\npassword hash), but one can set the password with a usual\nSET PASSWORD statement. And still retain the password-less\naccess via sudo.\n \nIf you install MariaDB locally (say from a tarball, you\nwould not want to use sudo to be able to login. This is why\nMariaDB creates a second all-powerful user with the same\nname as a system user that owns the data directory. In local\n(not system-wide) installations, this will be the user who\ninstalled MariaDB — they automatically get convenient\npassword-less root-like access, because they can access all\nthe data files anyway.\n \nEven if MariaDB is installed system-wide, you may not want\nto run your database maintenance scripts as system root —\nnow you can run them as system mysql user. And you will know\nthat they will never destroy your entire system, even if you\nmake a typo in a shell script.\n \nHowever, seasoned MariaDB DBAs who are used to the old ways\ndo need to makes some changes. See the examples below for\ncommon tasks. \n \nCookbook\n \nAfter installing MariaDB system-wide the first thing\nyou’ve got used to doing is logging in into the\nunprotected root account and protecting it, that is, setting\nthe root password:\n \n$ sudo dnf install MariaDB-server\n$ mysql -uroot\n...\nMariaDB> set password = password(\"XH4VmT3_jt\");\n \nThis is not only unnecessary now, it will simply not work\n— there is no unprotected root account. To login as root\nuse\n \n$ sudo dnf install MariaDB-server\n$ sudo mysql\n \nNote that it implies you are connecting via the unix socket,\nnot tcp. If you happen to have protocol=tcp in a system-wide\n/etc/my.cnf file, use sudo mysql --protocol=socket.\n \nAfter installing MariaDB locally you’ve also used to\nconnect to the unprotected root account using mysql -uroot.\nThis will not work either, simply use mysql without\nspecifying a username.\n \nIf you\'ve forgotten your root password, no problem — you\ncan still connect using sudo and change the password. And if\nyou\'ve also removed unix_socket authentication, to restore\naccess do as follows:\nrestart MariaDB with --skip-grant-tables\nlogin into the unprotected server\nrun FLUSH PRIVILEGES (note, before 10.4 this would’ve been\nthe last step, not anymore). This disables\n--skip-grant-tables and allows you to change the stored\nauthentication method.\nrun SET PASSWORD FOR root@localhost to change the root\npassword\n \nTo view inside privilege tables, the old mysql.user table\nstill exists. You can select from it as before, although you\ncannot update it anymore. It doesn’t show alternative\nauthentication plugins and this was one of the reasons for\nswitching to the mysql.global_priv table — complex\nauthentication rules did not fit into rigid structure of a\nrelational table. You can select from the new table, for\nexample: \n \nselect concat(user, \'@\', host, \' => \',\njson_detailed(priv)) from mysql.global_priv;\n \nReverting to the Previous Authentication Method for\nroot@localhost\n \nIf you don\'t want the root@localhost user account created\nby mysql_install_db to use unix_socket authentication by\ndefault, then there are a few ways to revert to the previous\nmysql_native_password authentication method for this user\naccount.\n \nConfiguring mysql_install_db to Revert to the Previous\nAuthentication Method\n \nOne way to revert to the previous mysql_native_password\nauthentication method for the root@localhost user account is\nto execute mysql_install_db with a special option. If\nmysql_install_db is executed while\n--auth-root-authentication-method=normal is specified, then\nit will create the default user accounts using the default\nbehavior of MariaDB 10.3 and before.\n \nThis means that the root@localhost user account will use\nmysql_native_password authentication by default. There are\nsome other differences as well. See mysql_install_db: User\nAccounts Created by Default for more information.\n \nFor example, the option can be set on the command-line while\nrunning mysql_install_db:\n \nmysql_install_db --user=mysql --datadir=/var/lib/mysql\n--auth-root-authentication-method=normal\n \nThe option can also be set in an option file in an option\ngroup supported by mysql_install_db. For example:\n \n[mysql_install_db]\nauth_root_authentication_method=normal\n \nIf the option is set in an option file and if\nmysql_install_db is executed, then mysql_install_db will\nread this option from the option file, and it will\nautomatically set this option.\n \nAltering the User Account to Revert to the Previous\nAuthentication Method\n \nIf you have already installed MariaDB, and if the\nroot@localhost user account is already using unix_socket\nauthentication, then you can revert to the old\nmysql_native_password authentication method for the user\naccount by executing the following:\n \nALTER USER root@localhost IDENTIFIED VIA\nmysql_native_password USING PASSWORD(\"verysecret\")\n \n\n\nURL:\nhttps://mariadb.com/kb/en/authentication-from-mariadb-104/', '', 'https://mariadb.com/kb/en/authentication-from-mariadb-104/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(118, 'CREATE USER', 10, 'Syntax\n------ \nCREATE [OR REPLACE] USER [IF NOT EXISTS] \n user_specification [,user_specification ...] \n [REQUIRE {NONE | tls_option [[AND] tls_option ...] }]\n [WITH resource_option [resource_option ...] ]\n [password_option | lock_option] \n \nuser_specification:\n username [authentication_option]\n \nauthentication_option:\n IDENTIFIED BY \'password\' \n | IDENTIFIED BY PASSWORD \'password_hash\'\n | IDENTIFIED {VIA|WITH} authentication_rule [OR\nauthentication_rule ...]\n \nauthentication_rule:\n authentication_plugin\n | authentication_plugin {USING|AS}\n\'authentication_string\'\n | authentication_plugin {USING|AS} PASSWORD(\'password\')\n \ntls_option:\n SSL \n | X509\n | CIPHER \'cipher\'\n | ISSUER \'issuer\'\n | SUBJECT \'subject\'\n \nresource_option:\n MAX_QUERIES_PER_HOUR count\n | MAX_UPDATES_PER_HOUR count\n | MAX_CONNECTIONS_PER_HOUR count\n | MAX_USER_CONNECTIONS count\n | MAX_STATEMENT_TIME time\n \npassword_option:\n PASSWORD EXPIRE\n | PASSWORD EXPIRE DEFAULT\n | PASSWORD EXPIRE NEVER\n | PASSWORD EXPIRE INTERVAL N DAY\n \nlock_option:\n ACCOUNT LOCK\n | ACCOUNT UNLOCK\n}\n \nDescription\n----------- \nThe CREATE USER statement creates new MariaDB accounts. To\nuse it, you must have the global CREATE USER privilege or\nthe INSERT privilege for the mysql database. For each\naccount, CREATE USER creates a new row in\nthe mysql.user table that has no privileges.\n \nIf any of the specified accounts, or any permissions for the\nspecified accounts, already exist, then the server returns\nERROR 1396 (HY000). If an error occurs, CREATE USER will\nstill create the accounts that do not result in an error.\nOnly one error is produced for all users which have not been\ncreated:\n \nERROR 1396 (HY000): \n Operation CREATE USER failed for \'u1\'@\'%\',\'u2\'@\'%\'\n \nCREATE USER, DROP USER, CREATE ROLE, and DROP ROLE all\nproduce the\nsame error code when they fail.\n \nSee Account Names below for details on how account names are\nspecified. \n \nOR REPLACE\n \nIf the optional OR REPLACE clause is used, it is basically a\nshortcut for:\n \nDROP USER IF EXISTS name;\n \nCREATE USER name ...;\n \nFor example:\n \nCREATE USER foo2@test IDENTIFIED BY \'password\';\n \nERROR 1396 (HY000): Operation CREATE USER failed for\n\'foo2\'@\'test\'\n \nCREATE OR REPLACE USER foo2@test IDENTIFIED BY \'password\';\n \nQuery OK, 0 rows affected (0.00 sec)\n \nIF NOT EXISTS\n \nWhen the IF NOT EXISTS clause is used, MariaDB will return a\nwarning instead of an error if the specified user already\nexists.\n \nFor example:\n \nCREATE USER foo2@test IDENTIFIED BY \'password\';\n \nERROR 1396 (HY000): Operation CREATE USER failed for\n\'foo2\'@\'test\'\n \nCREATE USER IF NOT EXISTS foo2@test IDENTIFIED BY\n\'password\';\n \nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n \nSHOW WARNINGS;\n \n+-------+------+----------------------------------------------------+\n| Level | Code | Message |\n+-------+------+----------------------------------------------------+\n| Note | 1973 | Can\'t create user \'foo2\'@\'test\';\n it already exists |\n+-------+------+----------------------------------------------------+\n1 row in set (0.00 sec\n \nAuthentication Options\n \nIDENTIFIED BY \'password\'\n \nThe optional IDENTIFIED BY clause can be used to provide an\naccount with a password. The password should be specified in\nplain text. It will be hashed by the PASSWORD function prior\nto being stored to the mysql.user table.\n \nFor example, if our password is mariadb, then we can create\nthe user with:\n \nCREATE USER foo2@test IDENTIFIED BY \'mariadb\';\n \nIf you do not specify a password with the IDENTIFIED BY\nclause, the user\nwill be able to connect without a password. A blank password\nis not a wildcard\nto match any password. The user must connect without\nproviding a password if no\npassword is set.\n \nThe only authentication plugins that this clause supports\nare mysql_native_password and mysql_old_password.\n \nIDENTIFIED BY PASSWORD \'password_hash\'\n \nThe optional IDENTIFIED BY PASSWORD clause can be used to\nprovide an account with a password that has already been\nhashed. The password should be specified as a hash that was\nprovided by the PASSWORD function. It will be stored to the\nmysql.user table as-is.\n \nFor example, if our password is mariadb, then we can find\nthe hash with:\n \nSELECT PASSWORD(\'mariadb\');\n+-------------------------------------------+\n| PASSWORD(\'mariadb\') |\n+-------------------------------------------+\n| *54958E764CE10E50764C2EECBB71D01F08549980 |\n+-------------------------------------------+\n1 row in set (0.00 sec)\n \nAnd then we can create a user with the hash:\n \nCREATE USER foo2@test IDENTIFIED BY PASSWORD\n\'*54958E764CE10E50764C2EECBB71D01F08549980\';\n \nIf you do not specify a password with the IDENTIFIED BY\nclause, the user\nwill be able to connect without a password. A blank password\nis not a wildcard\nto match any password. The user must connect without\nproviding a password if no\npassword is set.\n \nThe only authentication plugins that this clause supports\nare mysql_native_password and mysql_old_password.\n \nIDENTIFIED {VIA|WITH} authentication_plugin\n \nThe optional IDENTIFIED VIA authentication_plugin allows you\nto specify that the account should be authenticated by a\nspecific authentication plugin. The plugin name must be an\nactive authentication plugin as per SHOW PLUGINS. If it\ndoesn\'t show up in that output, then you will need to\ninstall it with INSTALL PLUGIN or INSTALL SONAME.\n \nFor example, this could be used with the PAM authentication\nplugin:\n \nCREATE USER foo2@test IDENTIFIED VIA pam;\n \nSome authentication plugins allow additional arguments to be\nspecified after a USING or AS keyword. For example, the PAM\nauthentication plugin accepts a service name:\n \nCREATE USER foo2@test IDENTIFIED VIA pam USING \'mariadb\';\n \nThe exact meaning of the additional argument would depend on\nthe specific authentication plugin.\n \nThe USING or AS keyword can also be used to provide a\nplain-text password to a plugin if it\'s provided as an\nargument to the PASSWORD() function. This is only valid for\nauthentication plugins that have implemented a hook for the\nPASSWORD() function. For example, the ed25519 authentication\nplugin supports this:\n \nCREATE USER safe@\'%\' IDENTIFIED VIA ed25519 USING\nPASSWORD(\'secret\');\n \nOne can specify many authentication plugins, they all works\nas alternatives ways of authenticating a user:\n \nCREATE USER safe@\'%\' IDENTIFIED VIA ed25519 USING\nPASSWORD(\'secret\') OR unix_socket;\n \nTLS Options\n \nBy default, MariaDB transmits data between the server and\nclients without encrypting it. This is generally acceptable\nwhen the server and client run on the same host or in\nnetworks where security is guaranteed through other means.\nHowever, in cases where the server and client exist on\nseparate networks or they are in a high-risk network, the\nlack of encryption does introduce security concerns as a\nmalicious actor could potentially eavesdrop on the traffic\nas it is sent over the network between them.\n \nTo mitigate this concern, MariaDB allows you to encrypt data\nin transit between the server and clients using the\nTransport Layer Security (TLS) protocol. TLS was formerly\nknown as Secure Socket Layer (SSL), but strictly speaking\nthe SSL protocol is a predecessor to TLS and, that version\nof the protocol is now considered insecure. The\ndocumentation still uses the term SSL often and for\ncompatibility reasons TLS-related server system and status\nvariables still use the prefix ssl_, but internally, MariaDB\nonly supports its secure successors.\n \nSee Secure Connections Overview for more information about\nhow to determine whether your MariaDB server has TLS\nsupport.\n \nYou can set certain TLS-related restrictions for specific\nuser accounts. For instance, you might use this with user\naccounts that require access to sensitive data while sending\nit across networks that you do not control. These\nrestrictions can be enabled for a user account with the\nCREATE USER, ALTER USER, or GRANT statements. The following\noptions are available:\n \nOption | Description | \n \nREQUIRE NONE | TLS is not required for this account, but can\nstill be used. | \n \nREQUIRE SSL | The account must use TLS, but no valid X509\ncertificate is required. This option cannot be combined with\nother TLS options. | \n \nREQUIRE X509 | The account must use TLS and must have a\nvalid X509 certificate. This option implies REQUIRE SSL.\nThis option cannot be combined with other TLS options. | \n \nREQUIRE ISSUER \'issuer\' | The account must use TLS and\nmust have a valid X509 certificate. Also, the Certificate\nAuthority must be the one specified via the string issuer.\nThis option implies REQUIRE X509. This option can be\ncombined with the SUBJECT, and CIPHER options in any order.\n| \n \nREQUIRE SUBJECT \'subject\' | The account must use TLS and\nmust have a valid X509 certificate. Also, the certificate\'s\nSubject must be the one specified via the string subject.\nThis option implies REQUIRE X509. This option can be\ncombined with the ISSUER, and CIPHER options in any order. |\n\n \nREQUIRE CIPHER \'cipher\' | The account must use TLS, but no\nvalid X509 certificate is required. Also, the encryption\nused for the connection must use one of the methods\nspecified in the string cipher. This option implies REQUIRE\nSSL. This option can be combined with the ISSUER, and\nSUBJECT options in any order. | \n \nThe REQUIRE keyword must be used only once for all specified\noptions, and the AND keyword can be used to separate\nindividual options, but it is not required.\n \nFor example, you can create a user account that requires\nthese TLS options with the following:\n \nCREATE USER \'alice\'@\'%\'\n REQUIRE SUBJECT \'/CN=alice/O=My Dom,\nInc./C=US/ST=Oregon/L=Portland\'\n AND ISSUER \'/C=FI/ST=Somewhere/L=City/ O=Some\nCompany/CN=Peter Parker/emailAddress=p.parker@marvel.com\'\n AND CIPHER \'TLSv1.2\';\n \nIf any of these options are set for a specific user account,\nthen any client who tries to connect with that user account\nwill have to be configured to connect with TLS.\n \nSee Securing Connections for Client and Server for\ninformation on how to enable TLS on the client and server.\n \nResource Limit Options\n \nMariaDB 10.2.0 introduced a number of resource limit\noptions.\n \nIt is possible to set per-account limits for certain server\nresources. The following table shows the values that can be\nset per account:\n \nLimit Type | Decription | \n \nMAX_QUERIES_PER_HOUR | Number of statements that the account\ncan issue per hour (including updates) | \n \nMAX_UPDATES_PER_HOUR | Number of updates (not queries) that\nthe account can issue per hour | \n \nMAX_CONNECTIONS_PER_HOUR | Number of connections that the\naccount can start per hour | \n \nMAX_USER_CONNECTIONS | Number of simultaneous connections\nthat can be accepted from the same account; if it is 0,\nmax_connections will be used instead; if max_connections is\n0, there is no limit for this account\'s simultaneous\nconnections. | \n \nMAX_STATEMENT_TIME | Timeout, in seconds, for statements\nexecuted by the user. See also Aborting Statements that\nExceed a Certain Time to Execute. | \n \nIf any of these limits are set to 0, then there is no limit\nfor that resource for that user.\n \nHere is an example showing how to create a user with\nresource limits:\n \nCREATE USER \'someone\'@\'localhost\' WITH\n MAX_USER_CONNECTIONS 10\n MAX_QUERIES_PER_HOUR 200;\n \nThe resources are tracked per account, which means\n\'user\'@\'server\'; not per user name or per connection.\n \nThe count can be reset for all users using FLUSH\nUSER_RESOURCES, FLUSH PRIVILEGES or mysqladmin reload.\n \nPer account resource limits are stored in the user table, in\nthe mysql database. Columns used for resources limits are\nnamed max_questions, max_updates, max_connections (for\nMAX_CONNECTIONS_PER_HOUR), and max_user_connections (for\nMAX_USER_CONNECTIONS).\n \nAccount Names\n \nAccount names have both a user name component and a host\nname component, and are specified as\n\'user_name\'@\'host_name\'.\n \nThe user name and host name may be unquoted, quoted as\nstrings using double quotes (\") or\nsingle quotes (\'), or quoted as identifiers using backticks\n(`). You must use quotes\nwhen using special characters (such as a hyphen) or wildcard\ncharacters. If you quote, you \nmust quote the user name and host name separately (for\nexample \'user_name\'@\'host_name\').\n \nHost Name Component\n \nIf the host name is not provided, it is assumed to be \'%\'.\n \nHost names may contain the wildcard characters % and _. They\nare matched as if by\nthe LIKE clause. If you need to use a wildcard character\nliterally (for example, to\nmatch a domain name with an underscore), prefix the\ncharacter with a backslash. See LIKE\nfor more information on escaping wildcard characters.\n \nHost name matches are case-insensitive. Host names can match\neither domain names or IP\naddresses. Use \'localhost\' as the host name to allow only\nlocal client connections.\n \nYou can use a netmask to match a range of IP addresses using\n\'base_ip/netmask\' as the\nhost name. A user with an IP address ip_addr will be allowed\nto connect if the following\ncondition is true:\n \nip_addr & netmask = base_ip\n \nYou can only use netmasks that specify a multiple of 8 bits\nof the address to match. That is,\nonly the following netmasks are allowed:\n \n255.0.0.0\n255.255.0.0\n255.255.255.0\n255.255.255.255\n \nUsing 255.255.255.255 is equivalent to not using a netmask\nat all.\n \nUser Name Component\n \nUser names must match exactly, including case. A user name\nthat is empty is known as an anonymous account and is\nallowed to match a login attempt with any user name\ncomponent. These are described more in the next section.\n \nFor valid identifiers to use as user names, see Identifier\nNames.\n \nIt is possible for more than one account to match when a\nuser connects. MariaDB selects\nthe first matching account after sorting according to the\nfollowing criteria:\nAccounts with an exact host name are sorted before accounts\nusing a wildcard in the\nhost name. Host names using a netmask are considered to be\nexact for sorting.\nAccounts with a wildcard in the host name are sorted\naccording to the position of\nthe first wildcard character. Those with a wildcard\ncharacter later in the host name\nsort before those with a wildcard character earlier in the\nhost name.\nAccounts with a non-empty user name sort before accounts\nwith an empty user name.\nAccounts with an empty user name are sorted last. As\nmentioned previously, these are known as anonymous accounts.\nThese are described more in the next section.\n \nThe following table shows a list of example account as\nsorted by these criteria:\n \n+---------+-------------+\n| User | Host |\n+---------+-------------+\n| joffrey | 192.168.0.3 |\n| | 192.168.0.% |\n| joffrey | 192.168.% |\n| | 192.168.% |\n+---------+-------------+\n \nOnce connected, you only have the privileges granted to the\naccount that matched,\nnot all accounts that could have matched. For example,\nconsider the following\ncommands:\n \nCREATE USER \'joffrey\'@\'192.168.0.3\';\n \nCREATE USER \'joffrey\'@\'%\';\n \nGRANT SELECT ON test.t1 to \'joffrey\'@\'192.168.0.3\';\n \nGRANT SELECT ON test.t2 to \'joffrey\'@\'%\';\n \nIf you connect as joffrey from 192.168.0.3, you will have\nthe SELECT\nprivilege on the table test.t1, but not on the table\ntest.t2. If you connect as joffrey from any other IP\naddress, you will have the SELECT privilege on the table\ntest.t2, but not\non the table test.t1.\n \nBeginning with MariaDB 5.5.31, usernames can be up to 80\ncharacters long. From MariaDB 10.0 the system tables are all\nby default this length. However, in order to enable this\nfeature in MariaDB 5.5, the following schema changes must be\nmade:\n \nALTER TABLE mysql.user MODIFY User CHAR(80) BINARY NOT NULL\nDEFAULT \'\';\n \nALTER TABLE mysql.db MODIFY User CHAR(80) BINARY NOT NULL\nDEFAULT \'\';\n \nALTER TABLE mysql.tables_priv MODIFY User CHAR(80) BINARY\nNOT NULL DEFAULT \'\';\n \nALTER TABLE mysql.columns_priv MODIFY User CHAR(80) BINARY\nNOT NULL DEFAULT \'\';\n \nALTER TABLE mysql.procs_priv MODIFY User CHAR(80) BINARY NOT\nNULL DEFAULT \'\';\n \nALTER TABLE mysql.proc MODIFY definer CHAR(141) COLLATE\nutf8_bin NOT NULL DEFAULT \'\';\n \nALTER TABLE mysql.event MODIFY definer CHAR(141) COLLATE\nutf8_bin NOT NULL DEFAULT \'\';\n \nALTER TABLE mysql.proxies_priv MODIFY User CHAR(80) COLLATE\nutf8_bin NOT NULL DEFAULT \'\';\n \nALTER TABLE mysql.proxies_priv MODIFY Proxied_user CHAR(80)\nCOLLATE utf8_bin NOT NULL DEFAULT \'\';\n \nALTER TABLE mysql.proxies_priv MODIFY Grantor CHAR(141)\nCOLLATE utf8_bin NOT NULL DEFAULT \'\';\n \nALTER TABLE mysql.servers MODIFY Username CHAR(80) NOT NULL\nDEFAULT \'\';\n \nALTER TABLE mysql.procs_priv MODIFY Grantor CHAR(141)\nCOLLATE utf8_bin NOT NULL DEFAULT \'\';\n \nALTER TABLE mysql.tables_priv MODIFY Grantor CHAR(141)\nCOLLATE utf8_bin NOT NULL DEFAULT \'\';\n \nFLUSH PRIVILEGES;\n \nAnonymous Accounts\n \nAnonymous accounts are accounts where the user name portion\nof the account name is empty. These accounts act as special\ncatch-all accounts. If a user attempts to log into the\nsystem from a host, and an anonymous account exists with a\nhost name portion that matches the user\'s host, then the\nuser will log in as the anonymous account if there is no\nmore specific account match for the user name that the user\nentered.\n \nFor example, here are some anonymous accounts:\n \nCREATE USER \'\'@\'localhost\';\n \nCREATE USER \'\'@\'192.168.0.3\';\n \nFixing a Legacy Default Anonymous Account\n \nOn some systems, the mysql.db table has some entries for the\n\'\'@\'%\' anonymous account by default. Unfortunately,\nthere is no matching entry in the mysql.user table, which\nmeans that this anonymous account doesn\'t exactly exist,\nbut it does have privileges--usually on the default test\ndatabase created by mysql_install_db. These account-less\nprivileges are a legacy that is leftover from a time when\nMySQL\'s privilege system was less advanced.\n \nThis situation means that you will run into errors if you\ntry to create a \'\'@\'%\' account. For example:\n \nCREATE USER \'\'@\'%\';\n \nERROR 1396 (HY000): Operation CREATE USER failed for\n\'\'@\'%\'\n \nThe fix is to DELETE the row in the mysql.db table and then\nexecute FLUSH PRIVILEGES:\n \nDELETE FROM mysql.db WHERE User=\'\' AND Host=\'%\';\n \nFLUSH PRIVILEGES;\n \nAnd then the account can be created:\n \nCREATE USER \'\'@\'%\';\n \nQuery OK, 0 rows affected (0.01 sec)\n \nSee MDEV-13486 for more information.\n \nPassword Expiry\n \nBesides automatic password expiry, as determined by\ndefault_password_lifetime, password expiry times can be set\non an individual user basis, overriding the global setting,\nfor example:\n \nCREATE USER \'monty\'@\'localhost\' PASSWORD EXPIRE INTERVAL\n120 DAY;\n \nSee User Password Expiry for more details.\n \nAccount Locking\n \nAccount locking permits privileged administrators to\nlock/unlock user accounts. No new client connections will be\npermitted if an account is locked (existing connections are\nnot affected). For example:\n \nCREATE USER \'marijn\'@\'localhost\' ACCOUNT LOCK;\n \nSee Account Locking for more details.\n \n\n\nURL: https://mariadb.com/kb/en/create-user/', '', 'https://mariadb.com/kb/en/create-user/'),
(119, 'ALTER USER', 10, 'The ALTER USER statement was introduced in MariaDB 10.2.0.\n \nSyntax\n------ \nALTER USER [IF EXISTS] \n user_specification [,user_specification] ...\n [REQUIRE {NONE | tls_option [[AND] tls_option] ...}]\n [WITH resource_option [resource_option] ...]\n [password_option | lock_option] \n \nuser_specification:\n username [authentication_option]\n \nauthentication_option:\n IDENTIFIED BY \'password\' \n | IDENTIFIED BY PASSWORD \'password_hash\'\n | IDENTIFIED {VIA|WITH} authentication_plugin\n | IDENTIFIED {VIA|WITH} authentication_plugin {USING|AS}\n\'authentication_string\'\n | IDENTIFIED {VIA|WITH} authentication_plugin {USING|AS}\nPASSWORD(\'password\')\n \ntls_option\n SSL \n | X509\n | CIPHER \'cipher\'\n | ISSUER \'issuer\'\n | SUBJECT \'subject\'\n \nresource_option\n MAX_QUERIES_PER_HOUR count\n | MAX_UPDATES_PER_HOUR count\n | MAX_CONNECTIONS_PER_HOUR count\n | MAX_USER_CONNECTIONS count\n | MAX_STATEMENT_TIME time\n \npassword_option:\n PASSWORD EXPIRE\n | PASSWORD EXPIRE DEFAULT\n | PASSWORD EXPIRE NEVER\n | PASSWORD EXPIRE INTERVAL N DAY\n \nlock_option:\n ACCOUNT LOCK\n | ACCOUNT UNLOCK\n}\n \nDescription\n----------- \nThe ALTER USER statement modifies existing MariaDB accounts.\nTo use it, you must have the global CREATE USER privilege or\nthe UPDATE privilege for the mysql database. The global\nSUPER privilege is also required if the read_only system\nvariable is enabled.\n \nIf any of the specified user accounts do not yet exist, an\nerror results. If an error occurs, ALTER USER will still\nmodify the accounts that do not result in an error. Only one\nerror is produced for all users which have not been\nmodified.\n \nIF EXISTS\n \nWhen the IF EXISTS clause is used, MariaDB will return a\nwarning instead of an error for each specified user that\ndoes not exist.\n \nAccount Names\n \nFor ALTER USER statements, account names are specified as\nthe username argument in the same way as they are for CREATE\nUSER statements. See account names from the CREATE USER page\nfor details on how account names are specified.\n \nCURRENT_USER or CURRENT_USER() can also be used to alter the\naccount logged into the current session. For example, to\nchange the current user\'s password to mariadb:\n \nALTER USER CURRENT_USER() IDENTIFIED BY \'mariadb\';\n \nAuthentication Options\n \nIDENTIFIED BY \'password\'\n \nThe optional IDENTIFIED BY clause can be used to provide an\naccount with a password. The password should be specified in\nplain text. It will be hashed by the PASSWORD function prior\nto being stored to the mysql.user table.\n \nFor example, if our password is mariadb, then we can set the\naccount\'s password with:\n \nALTER USER foo2@test IDENTIFIED BY \'mariadb\';\n \nIf you do not specify a password with the IDENTIFIED BY\nclause, the user\nwill be able to connect without a password. A blank password\nis not a wildcard\nto match any password. The user must connect without\nproviding a password if no\npassword is set.\n \nThe only authentication plugins that this clause supports\nare mysql_native_password and mysql_old_password.\n \nIDENTIFIED BY PASSWORD \'password_hash\'\n \nThe optional IDENTIFIED BY PASSWORD clause can be used to\nprovide an account with a password that has already been\nhashed. The password should be specified as a hash that was\nprovided by the PASSWORD function. It will be stored to the\nmysql.user table as-is.\n \nFor example, if our password is mariadb, then we can find\nthe hash with:\n \nSELECT PASSWORD(\'mariadb\');\n+-------------------------------------------+\n| PASSWORD(\'mariadb\') |\n+-------------------------------------------+\n| *54958E764CE10E50764C2EECBB71D01F08549980 |\n+-------------------------------------------+\n1 row in set (0.00 sec)\n \nAnd then we can set an account\'s password with the hash:\n \nALTER USER foo2@test IDENTIFIED BY PASSWORD\n\'*54958E764CE10E50764C2EECBB71D01F08549980\';\n \nIf you do not specify a password with the IDENTIFIED BY\nclause, the user\nwill be able to connect without a password. A blank password\nis not a wildcard\nto match any password. The user must connect without\nproviding a password if no\npassword is set.\n \nThe only authentication plugins that this clause supports\nare mysql_native_password and mysql_old_password.\n \nIDENTIFIED {VIA|WITH} authentication_plugin\n \nThe optional IDENTIFIED VIA authentication_plugin allows you\nto specify that the account should be authenticated by a\nspecific authentication plugin. The plugin name must be an\nactive authentication plugin as per SHOW PLUGINS. If it\ndoesn\'t show up in that output, then you will need to\ninstall it with INSTALL PLUGIN or INSTALL SONAME.\n \nFor example, this could be used with the PAM authentication\nplugin:\n \nALTER USER foo2@test IDENTIFIED VIA pam;\n \nSome authentication plugins allow additional arguments to be\nspecified after a USING or AS keyword. For example, the PAM\nauthentication plugin accepts a service name:\n \nALTER USER foo2@test IDENTIFIED VIA pam USING \'mariadb\';\n \nThe exact meaning of the additional argument would depend on\nthe specific authentication plugin.\n \nIn MariaDB 10.4 and later, the USING or AS keyword can also\nbe used to provide a plain-text password to a plugin if\nit\'s provided as an argument to the PASSWORD() function.\nThis is only valid for authentication plugins that have\nimplemented a hook for the PASSWORD() function. For example,\nthe ed25519 authentication plugin supports this:\n \nALTER USER safe@\'%\' IDENTIFIED VIA ed25519 USING\nPASSWORD(\'secret\');\n \nTLS Options\n \nBy default, MariaDB transmits data between the server and\nclients without encrypting it. This is generally acceptable\nwhen the server and client run on the same host or in\nnetworks where security is guaranteed through other means.\nHowever, in cases where the server and client exist on\nseparate networks or they are in a high-risk network, the\nlack of encryption does introduce security concerns as a\nmalicious actor could potentially eavesdrop on the traffic\nas it is sent over the network between them.\n \nTo mitigate this concern, MariaDB allows you to encrypt data\nin transit between the server and clients using the\nTransport Layer Security (TLS) protocol. TLS was formerly\nknown as Secure Socket Layer (SSL), but strictly speaking\nthe SSL protocol is a predecessor to TLS and, that version\nof the protocol is now considered insecure. The\ndocumentation still uses the term SSL often and for\ncompatibility reasons TLS-related server system and status\nvariables still use the prefix ssl_, but internally, MariaDB\nonly supports its secure successors.\n \nSee Secure Connections Overview for more information about\nhow to determine whether your MariaDB server has TLS\nsupport.\n \nYou can set certain TLS-related restrictions for specific\nuser accounts. For instance, you might use this with user\naccounts that require access to sensitive data while sending\nit across networks that you do not control. These\nrestrictions can be enabled for a user account with the\nCREATE USER, ALTER USER, or GRANT statements. The following\noptions are available:\n \nOption | Description | \n \nREQUIRE NONE | TLS is not required for this account, but can\nstill be used. | \n \nREQUIRE SSL | The account must use TLS, but no valid X509\ncertificate is required. This option cannot be combined with\nother TLS options. | \n \nREQUIRE X509 | The account must use TLS and must have a\nvalid X509 certificate. This option implies REQUIRE SSL.\nThis option cannot be combined with other TLS options. | \n \nREQUIRE ISSUER \'issuer\' | The account must use TLS and\nmust have a valid X509 certificate. Also, the Certificate\nAuthority must be the one specified via the string issuer.\nThis option implies REQUIRE X509. This option can be\ncombined with the SUBJECT, and CIPHER options in any order.\n| \n \nREQUIRE SUBJECT \'subject\' | The account must use TLS and\nmust have a valid X509 certificate. Also, the certificate\'s\nSubject must be the one specified via the string subject.\nThis option implies REQUIRE X509. This option can be\ncombined with the ISSUER, and CIPHER options in any order. |\n\n \nREQUIRE CIPHER \'cipher\' | The account must use TLS, but no\nvalid X509 certificate is required. Also, the encryption\nused for the connection must use one of the methods\nspecified in the string cipher. This option implies REQUIRE\nSSL. This option can be combined with the ISSUER, and\nSUBJECT options in any order. | \n \nThe REQUIRE keyword must be used only once for all specified\noptions, and the AND keyword can be used to separate\nindividual options, but it is not required.\n \nFor example, you can alter a user account to require these\nTLS options with the following:\n \nALTER USER \'alice\'@\'%\'\n REQUIRE SUBJECT \'/CN=alice/O=My Dom,\nInc./C=US/ST=Oregon/L=Portland\'\n AND ISSUER \'/C=FI/ST=Somewhere/L=City/ O=Some\nCompany/CN=Peter Parker/emailAddress=p.parker@marvel.com\'\n AND CIPHER \'TLSv1.2\';\n \nIf any of these options are set for a specific user account,\nthen any client who tries to connect with that user account\nwill have to be configured to connect with TLS.\n \nSee Securing Connections for Client and Server for\ninformation on how to enable TLS on the client and server.\n \nResource Limit Options\n \nMariaDB 10.2.0 introduced a number of resource limit\noptions.\n \nIt is possible to set per-account limits for certain server\nresources. The following table shows the values that can be\nset per account:\n \nLimit Type | Decription | \n \nMAX_QUERIES_PER_HOUR | Number of statements that the account\ncan issue per hour (including updates) | \n \nMAX_UPDATES_PER_HOUR | Number of updates (not queries) that\nthe account can issue per hour | \n \nMAX_CONNECTIONS_PER_HOUR | Number of connections that the\naccount can start per hour | \n \nMAX_USER_CONNECTIONS | Number of simultaneous connections\nthat can be accepted from the same account; if it is 0,\nmax_connections will be used instead; if max_connections is\n0, there is no limit for this account\'s simultaneous\nconnections. | \n \nMAX_STATEMENT_TIME | Timeout, in seconds, for statements\nexecuted by the user. See also Aborting Statements that\nExceed a Certain Time to Execute. | \n \nIf any of these limits are set to 0, then there is no limit\nfor that resource for that user.\n \nHere is an example showing how to set an account\'s resource\nlimits:\n \nALTER USER \'someone\'@\'localhost\' WITH\n MAX_USER_CONNECTIONS 10\n MAX_QUERIES_PER_HOUR 200;\n \nThe resources are tracked per account, which means\n\'user\'@\'server\'; not per user name or per connection.\n \nThe count can be reset for all users using FLUSH\nUSER_RESOURCES, FLUSH PRIVILEGES or mysqladmin reload.\n \nPer account resource limits are stored in the user table, in\nthe mysql database. Columns used for resources limits are\nnamed max_questions, max_updates, max_connections (for\nMAX_CONNECTIONS_PER_HOUR), and max_user_connections (for\nMAX_USER_CONNECTIONS).\n \nPassword Expiry\n \nBesides automatic password expiry, as determined by\ndefault_password_lifetime, password expiry times can be set\non an individual user basis, overriding the global setting,\nfor example:\n \nALTER USER \'monty\'@\'localhost\' PASSWORD EXPIRE INTERVAL\n120 DAY;\n \nALTER USER \'monty\'@\'localhost\' PASSWORD EXPIRE NEVER;\n \nALTER USER \'monty\'@\'localhost\' PASSWORD EXPIRE DEFAULT;\n \nSee User Password Expiry for more details.\n \nAccount Locking\n \nAccount locking permits privileged administrators to\nlock/unlock user accounts. No new client connections will be\npermitted if an account is locked (existing connections are\nnot affected). For example:\n \nALTER USER \'marijn\'@\'localhost\' ACCOUNT LOCK;\n \nSee Account Locking for more details.\n \n\n\nURL: https://mariadb.com/kb/en/alter-user/', '', 'https://mariadb.com/kb/en/alter-user/'),
(96, 'COMMIT', 8, 'The COMMIT statement ends a transaction, saving any changes\nto the data so that they become visible to subsequent\ntransactions. Also, unlocks metadata changed by current\ntransaction. If autocommit is set to 1, an implicit commit\nis performed after each statement. Otherwise, all\ntransactions which don\'t end with an explicit COMMIT are\nimplicitly rollbacked and the changes are lost. The ROLLBACK\nstatement can be used to do this explicitly.\n \nThe required syntax for the COMMIT statement is as follows:\n \nCOMMIT [WORK] [AND [NO] CHAIN] [[NO] RELEASE]\n \nCOMMIT is the more important transaction terminator, as well\nas the more interesting one. The basic form of the COMMIT\nstatement is simply the keyword COMMIT (the keyword WORK is\nsimply noise and can be omitted without changing the\neffect).\n \nThe optional AND CHAIN clause is a convenience for\ninitiating a new transaction as soon as the old transaction\nterminates. If AND CHAIN is specified, then there is\neffectively nothing between the old and new transactions,\nalthough they remain separate. The characteristics of the\nnew transaction will be the same as the characteristics of\nthe old one — that is, the new transaction will have the\nsame access mode, isolation level and diagnostics area size\n(we\'ll discuss all of these shortly) as the transaction\njust terminated. \n \nRELEASE tells the server to disconnect the client\nimmediately after the current transaction.\n \nThere are NO RELEASE and AND NO CHAIN options. By default,\ncommits do not RELEASE or CHAIN, but it\'s possible to\nchange this default behavior with the completion_type server\nsystem variable. In this case, the AND NO CHAIN and NO\nRELEASE options override the server default.\n \n\n\nURL: https://mariadb.com/kb/en/commit/', '', 'https://mariadb.com/kb/en/commit/'),
(97, 'DEALLOCATE / DROP PREPARE', 8, 'Syntax\n------ \n{DEALLOCATE | DROP} PREPARE stmt_name\n \nDescription\n----------- \nTo deallocate a prepared statement produced with PREPARE,\nuse a\nDEALLOCATE PREPARE statement that refers to the prepared\nstatement\nname.\n \nA prepared statement is implicitly deallocated when a new\nPREPARE command is issued. In that case, there is no need to\nuse DEALLOCATE.\n \nAttempting to execute a prepared statement after\ndeallocating it\nresults in an error, as if it was not prepared at all:\n \nERROR 1243 (HY000): Unknown prepared statement handler\n(stmt_name) given to EXECUTE\n \nIf the specified statement has not been PREPAREd, an error\nsimilar to the following will be produced:\n \nERROR 1243 (HY000): Unknown prepared statement handler\n(stmt_name) given to DEALLOCATE PREPARE\n \nExample\n \nSee example in PREPARE.\n \n\n\nURL:\nhttps://mariadb.com/kb/en/deallocate-drop-prepared-statement/', '', 'https://mariadb.com/kb/en/deallocate-drop-prepared-statement/'),
(98, 'EXECUTE Statement', 8, 'Syntax\n------ \nEXECUTE stmt_name\n [USING expression[, expression] ...]\n \nEXECUTE with expression as parameters was introduced in\nMariaDB 10.2.3. Before that one could only use variables\n(@var_name) as parameters.\n \nDescription\n----------- \nAfter preparing a statement with PREPARE, you execute it\nwith an\nEXECUTE statement that refers to the prepared statement\nname. If the\nprepared statement contains any parameter markers, you must\nsupply a\nUSING clause that lists user variables containing the values\nto be\nbound to the parameters. Parameter values can be supplied\nonly by user\nvariables, and the USING clause must name exactly as many\nvariables as\nthe number of parameter markers in the statement.\n \nYou can execute a given prepared statement multiple times,\npassing\ndifferent variables to it or setting the variables to\ndifferent values\nbefore each execution.\n \nIf the specified statement has not been PREPAREd, an error\nsimilar to the following is produced:\n \nERROR 1243 (HY000): Unknown prepared statement handler\n(stmt_name) given to EXECUTE\n \nExample\n \nSee example in PREPARE.\n \n\n\nURL: https://mariadb.com/kb/en/execute-statement/', '', 'https://mariadb.com/kb/en/execute-statement/'),
(102, 'SAVEPOINT', 8, 'Syntax\n------ \nSAVEPOINT identifier\nROLLBACK [WORK] TO [SAVEPOINT] identifier\nRELEASE SAVEPOINT identifier\n \nDescription\n----------- \nInnoDB supports the SQL statements SAVEPOINT,\nROLLBACK TO SAVEPOINT, RELEASE SAVEPOINT\nand the optional WORK keyword for\nROLLBACK.\n \nEach savepoint must have a legal MariaDB identifier. A\nsavepoint is a named sub-transaction.\n \nNormally ROLLBACK undoes the changes performed by the whole\ntransaction. When used with the TO clause, it undoes the\nchanges performed after the specified savepoint, and erases\nall subsequent savepoints. However, all locks that have been\nacquired after the save point will survive. RELEASE\nSAVEPOINT does not rollback or commit any changes, but\nremoves the specified savepoint.\n \nWhen the execution of a trigger or a stored function begins,\nit is not possible to use statements which reference a\nsavepoint which was defined from out of that stored program.\n \nWhen a COMMIT (including implicit commits) or a ROLLBACK\nstatement (with no TO clause) is performed, they act on the\nwhole transaction, and all savepoints are removed.\n \nErrors\n \nIf COMMIT or ROLLBACK is issued and no transaction was\nstarted, no error is reported.\n \nIf SAVEPOINT is issued and no transaction was started, no\nerror is reported but no savepoint is created. When ROLLBACK\nTO SAVEPOINT or RELEASE SAVEPOINT is called for a savepoint\nthat does not exist, an error like this is issued:\n \nERROR 1305 (42000): SAVEPOINT svp_name does not exist\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/savepoint/', '', 'https://mariadb.com/kb/en/savepoint/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(121, 'GRANT', 10, 'Syntax\n------ \nGRANT\n priv_type [(column_list)]\n [, priv_type [(column_list)]] ...\n ON [object_type] priv_level\n TO user_specification [ user_options ...]\n \nuser_specification:\n username [authentication_option]\n \nauthentication_option:\n IDENTIFIED BY \'password\' \n | IDENTIFIED BY PASSWORD \'password_hash\'\n | IDENTIFIED {VIA|WITH} authentication_rule [OR\nauthentication_rule ...]\n \nauthentication_rule:\n authentication_plugin\n | authentication_plugin {USING|AS}\n\'authentication_string\'\n | authentication_plugin {USING|AS} PASSWORD(\'password\')\n \nGRANT PROXY ON username\n TO username [, username] ...\n [WITH GRANT OPTION]\n \nuser_options:\n [REQUIRE {NONE | tls_option [[AND] tls_option] ...}]\n [WITH with_option [with_option] ...]\n \nobject_type:\n TABLE\n | FUNCTION\n | PROCEDURE\n \npriv_level:\n *\n | *.*\n | db_name.*\n | db_name.tbl_name\n | tbl_name\n | db_name.routine_name\n \nwith_option:\n GRANT OPTION\n | resource_option\n \nresource_option:\n MAX_QUERIES_PER_HOUR count\n | MAX_UPDATES_PER_HOUR count\n | MAX_CONNECTIONS_PER_HOUR count\n | MAX_USER_CONNECTIONS count\n | MAX_STATEMENT_TIME time\n \ntls_option:\n SSL \n | X509\n | CIPHER \'cipher\'\n | ISSUER \'issuer\'\n | SUBJECT \'subject\'\n \nDescription\n----------- \nThe GRANT statement allows you to grant privileges or roles\nto accounts. To use GRANT, you must have the GRANT OPTION\nprivilege, and you must have the privileges that you are\ngranting.\n \nUse the REVOKE statement to revoke privileges granted with\nthe GRANT statement.\n \nUse the SHOW GRANTS statement to determine what privileges\nan account has.\n \nAccount Names\n \nFor GRANT statements, account names are specified as the\nusername argument in the same way as they are for CREATE\nUSER statements. See account names from the CREATE USER page\nfor details on how account names are specified.\n \nImplicit Account Creation\n \nThe GRANT statement also allows you to implicitly create\naccounts in some cases.\n \nIf the account does not yet exist, then GRANT can implicitly\ncreate it. To implicitly create an account with GRANT, a\nuser is required to have the same privileges that would be\nrequired to explicitly create the account with the CREATE\nUSER statement.\n \nIf the NO_AUTO_CREATE_USER SQL_MODE is set, then accounts\ncan only be created if authentication information is\nspecified, or with a CREATE USER statement. If no\nauthentication information is provided, GRANT will produce\nan error when the specified account does not exist, for\nexample:\n \nshow variables like \'%sql_mode%\' ;\n+---------------+--------------------------------------------+\n| Variable_name | Value |\n+---------------+--------------------------------------------+\n| sql_mode | NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |\n+---------------+--------------------------------------------+\n \nGRANT USAGE ON *.* TO \'user123\'@\'%\' IDENTIFIED BY \'\';\nERROR 1133 (28000): Can\'t find any matching row in the user\ntable\n \nGRANT USAGE ON *.* TO \'user123\'@\'%\' IDENTIFIED VIA PAM\nusing \'mariadb\' require ssl ;\nQuery OK, 0 rows affected (0.00 sec)\n \nselect host, user from mysql.user where user=\'user123\' ;\n \n+------+----------+\n| host | user |\n+------+----------+\n| % | user123 |\n+------+----------+\n \nPrivilege Levels\n \nPrivileges can be set globally, for an entire database, for\na table or routine,\nor for individual columns in a table. Certain privileges can\nonly be set at\ncertain levels.\nGlobal privileges are granted using *.* for\npriv_level. Global privileges include privileges to\nadminister the database\nand manage user accounts, as well as privileges for all\ntables, functions, and\nprocedures. Global privileges are stored in the mysql.user\ntable.\nDatabase privileges are granted using db_name.*\nfor priv_level, or using just * to use default database.\nDatabase\nprivileges include privileges to create tables and\nfunctions, as well as\nprivileges for all tables, functions, and procedures in the\ndatabase. Database privileges are stored in the mysql.db\ntable.\nTable privileges are granted using db_name.tbl_name\nfor priv_level, or using just tbl_name to specify a table in\nthe default\ndatabase. The TABLE keyword is optional. Table privileges\ninclude the\nability to select and change data in the table. Certain\ntable privileges can\nbe granted for individual columns.\nColumn privileges are granted by specifying a table for\npriv_level and providing a column list after the privilege\ntype. They allow\nyou to control exactly which columns in a table users can\nselect and change.\nFunction privileges are granted using FUNCTION\ndb_name.routine_name\nfor priv_level, or using just FUNCTION routine_name to\nspecify a function\nin the default database.\nProcedure privileges are granted using PROCEDURE\ndb_name.routine_name\nfor priv_level, or using just PROCEDURE routine_name to\nspecify a procedure\nin the default database.\n \nThe USAGE Privilege\n \nThe USAGE privilege grants no real privileges. The SHOW\nGRANTS\nstatement will show a global USAGE privilege for a\nnewly-created user. You\ncan use USAGE with the GRANT statement to change options\nlike GRANT OPTION\nand MAX_USER_CONNECTIONS without changing any account\nprivileges.\n \nThe ALL PRIVILEGES Privilege\n \nThe ALL PRIVILEGES privilege grants all available\nprivileges. Granting all\nprivileges only affects the given privilege level. For\nexample, granting all\nprivileges on a table does not grant any privileges on the\ndatabase or globally.\n \nUsing ALL PRIVILEGES does not grant the special GRANT OPTION\nprivilege.\n \nYou can use ALL instead of ALL PRIVILEGES.\n \nThe GRANT OPTION Privilege\n \nUse the WITH GRANT OPTION clause to give users the ability\nto grant privileges\nto other users at the given privilege level. Users with the\nGRANT OPTION privilege can\nonly grant privileges they have. They cannot grant\nprivileges at a higher privilege level than\nthey have the GRANT OPTION privilege.\n \nThe GRANT OPTION privilege cannot be set for individual\ncolumns.\nIf you use WITH GRANT OPTION when specifying column\nprivileges,\nthe GRANT OPTION privilege will be granted for the entire\ntable.\n \nUsing the WITH GRANT OPTION clause is equivalent to listing\nGRANT OPTION\nas a privilege.\n \nGlobal Privileges\n \nThe following table lists the privileges that can be granted\nglobally. You can\nalso grant all database, table, and function privileges\nglobally. When granted\nglobally, these privileges apply to all databases, tables,\nor functions,\nincluding those created later.\n \nTo set a global privilege, use *.* for priv_level.\n \nPrivilege | Description | \n \nCREATE USER | Create a user using the CREATE USER statement,\nor implicitly create a user with the GRANT statement. | \n \nFILE | Read and write files on the server, using statements\nlike LOAD DATA INFILE or functions like LOAD_FILE(). Also\nneeded to create CONNECT outward tables. MariaDB server must\nhave the permissions to access those files. | \n \nGRANT OPTION | Grant global privileges. You can only grant\nprivileges that you have. | \n \nPROCESS | Show information about the active processes, via\nSHOW PROCESSLIST or mysqladmin processlist. | \n \nRELOAD | Execute FLUSH statements or equivalent mysqladmin\ncommands. | \n \nREPLICATION CLIENT | Execute SHOW MASTER STATUS and SHOW\nSLAVE STATUS informative statements. | \n \nREPLICATION SLAVE | Accounts used by slave servers on the\nmaster need this privilege. This is needed to get the\nupdates made on the master. | \n \nSHOW DATABASES | List all databases using the SHOW DATABASES\nstatement. Without the SHOW DATABASES privilege, you can\nstill issue the SHOW DATABASES statement, but it will only\nlist databases containing tables on which you have\nprivileges. | \n \nSHUTDOWN | Shut down the server using SHUTDOWN or the\nmysqladmin shutdown command. | \n \nSUPER | Execute superuser statements: CHANGE MASTER TO, KILL\n(users who do not have this privilege can only KILL their\nown threads), PURGE LOGS, SET global system variables, or\nthe mysqladmin debug command. Also, this permission allows\nthe user to write data even if the read_only startup option\nis set, enable or disable logging, enable or disable\nreplication on slaves, specify a DEFINER for statements that\nsupport that clause, connect once after reaching the\nMAX_CONNECTIONS. If a statement has been specified for the\ninit-connect mysqld option, that command will not be\nexecuted when a user with SUPER privileges connects to the\nserver. | \n \nDatabase Privileges\n \nThe following table lists the privileges that can be granted\nat the database\nlevel. You can also grant all table and function privileges\nat the database\nlevel. Table and function privileges on a database apply to\nall tables or\nfunctions in that database, including those created later.\n \nTo set a privilege for a database, specify the database\nusing\ndb_name.* for priv_level, or just use *\nto specify the default database.\n \nPrivilege | Description | \n \nCREATE | Create a database using the CREATE DATABASE\nstatement, when the privilege is granted for a database. You\ncan grant the CREATE privilege on databases that do not yet\nexist. This also grants the CREATE privilege on all tables\nin the database. | \n \nCREATE ROUTINE | Create Stored Programs using the CREATE\nPROCEDURE and CREATE FUNCTION statements. | \n \nCREATE TEMPORARY TABLES | Create temporary tables with the\nCREATE TEMPORARY TABLE statement. This privilege enable\nwriting and dropping those temporary tables | \n \nDROP | Drop a database using the DROP DATABASE statement,\nwhen the privilege is granted for a database. This also\ngrants the DROP privilege on all tables in the database. | \n \nEVENT | Create, drop and alter EVENTs. Added in MySQL 5.1.6.\n| \n \nGRANT OPTION | Grant database privileges. You can only grant\nprivileges that you have. | \n \nLOCK TABLES | Acquire explicit locks using the LOCK TABLES\nstatement; you also need to have the SELECT privilege on a\ntable, in order to lock it. | \n \nTable Privileges\n \nPrivilege | Description | \n \nALTER | Change the structure of an existing table using the\nALTER TABLE statement. | \n \nCREATE | Create a table using the CREATE TABLE statement.\nYou can grant the CREATE privilege on tables that do not yet\nexist. | \n \nCREATE VIEW | Create a view using the CREATE_VIEW statement.\n| \n \nDELETE | Remove rows from a table using the DELETE\nstatement. | \n \nDELETE HISTORY | Remove historical rows from a table using\nthe DELETE HISTORY statement. Displays as DELETE VERSIONING\nROWS when running SHOW GRANTS until MariaDB 10.3.15 and\nuntil MariaDB 10.4.5 (MDEV-17655), or when running SHOW\nPRIVILEGES (MDEV-20382). From MariaDB 10.3.4. From MariaDB\n10.3.5, if a user has the SUPER privilege but not this\nprivilege, running mysql_upgrade will grant this privilege\nas well. | \n \nDROP | Drop a table using the DROP TABLE statement or a view\nusing the DROP VIEW statement. Also required to execute the\nTRUNCATE TABLE statement. | \n \nGRANT OPTION | Grant table privileges. You can only grant\nprivileges that you have. | \n \nINDEX | Create an index on a table using the CREATE INDEX\nstatement. Without the INDEX privilege, you can still create\nindexes when creating a table using the CREATE TABLE\nstatement if the you have the CREATE privilege, and you can\ncreate indexes using the ALTER TABLE statement if you have\nthe ALTER privilege. | \n \nINSERT | Add rows to a table using the INSERT statement. The\nINSERT privilege can also be set on individual columns; see\nColumn Privileges below for details. | \n \nREFERENCES | Unused. | \n \nSELECT | Read data from a table using the SELECT statement.\nThe SELECT privilege can also be set on individual columns;\nsee Column Privileges below for details. | \n \nSHOW VIEW | Show the CREATE VIEW statement to create a view\nusing the SHOW CREATE VIEW statement. | \n \nTRIGGER | Execute triggers associated to tables you update,\nexecute the CREATE TRIGGER and DROP TRIGGER statements. You\nwill still be able to see triggers. | \n \nUPDATE | Update existing rows in a table using the UPDATE\nstatement. UPDATE statements usually include a WHERE clause\nto update only certain rows. You must have SELECT privileges\non the table or the appropriate columns for the WHERE\nclause. The UPDATE privilege can also be set on individual\ncolumns; see Column Privileges below for details. | \n \nColumn Privileges\n \nSome table privileges can be set for individual columns of a\ntable. To use\ncolumn privileges, specify the table explicitly and provide\na list of column\nnames after the privilege type. For example, the following\nstatement would allow\nthe user to read the names and positions of employees, but\nnot other information\nfrom the same table, such as salaries.\n \nGRANT SELECT (name, position) on Employee to\n\'jeffrey\'@\'localhost\';\n \nPrivilege | Description | \n \nINSERT (column_list) | Add rows specifying values in columns\nusing the INSERT statement. If you only have column-level\nINSERT privileges, you must specify the columns you are\nsetting in the INSERT statement. All other columns will be\nset to their default values, or NULL. | \n \nREFERENCES (column_list) | Unused. | \n \nSELECT (column_list) | Read values in columns using the\nSELECT statement. You cannot access or query any columns for\nwhich you do not have SELECT privileges, including in WHERE,\nON, GROUP BY, and ORDER BY clauses. | \n \nUPDATE (column_list) | Update values in columns of existing\nrows using the UPDATE statement. UPDATE statements usually\ninclude a WHERE clause to update only certain rows. You must\nhave SELECT privileges on the table or the appropriate\ncolumns for the WHERE clause. | \n \nFunction Privileges\n \nPrivilege | Description | \n \nALTER ROUTINE | Change the characteristics of a stored\nfunction using the ALTER FUNCTION statement. | \n \nEXECUTE | Use a stored function. You need SELECT privileges\nfor any tables or columns accessed by the function. | \n \nGRANT OPTION | Grant function privileges. You can only grant\nprivileges that you have. | \n \nProcedure Privileges\n \nPrivilege | Description | \n \nALTER ROUTINE | Change the characteristics of a stored\nprocedure using the ALTER PROCEDURE statement. | \n \nEXECUTE | Execute a stored procedure using the CALL\nstatement. The privilege to call a procedure may allow you\nto perform actions you wouldn\'t otherwise be able to do,\nsuch as insert rows into a table. | \n \nGRANT OPTION | Grant procedure privileges. You can only\ngrant privileges that you have. | \n \nProxy Privileges\n \nPrivilege | Description | \n \nPROXY | Permits one user to be a proxy for another. | \n \nThe PROXY privilege allows one user to proxy as another\nuser, which means their privileges change to that of the\nproxy user, and the CURRENT_USER() function returns the user\nname of the proxy user.\n \nThe PROXY privilege only works with authentication plugins\nthat support it. The default mysql_native_password\nauthentication plugin does not support proxy users.\n \nThe pam authentication plugin is the only plugin included\nwith MariaDB that currently supports proxy users. The PROXY\nprivilege is commonly used with the pam authentication\nplugin to enable user and group mapping with PAM.\n \nFor example, to grant the PROXY privilege to an anonymous\naccount that authenticates with the pam authentication\nplugin, you could execute the following:\n \nCREATE USER \'dba\'@\'%\' IDENTIFIED BY \'strongpassword\';\n \nGRANT ALL PRIVILEGES ON *.* TO \'dba\'@\'%\' ;\n \nCREATE USER \'\'@\'%\' IDENTIFIED VIA pam USING \'mariadb\';\n \nGRANT PROXY ON \'dba\'@\'%\' TO \'\'@\'%\';\n \nA user account can only grant the PROXY privilege for a\nspecific user account if the granter also has the PROXY\nprivilege for that specific user account, and if that\nprivilege is defined WITH GRANT OPTION. For example, the\nfollowing example fails because the granter does not have\nthe PROXY privilege for that specific user account at all:\n \nSELECT USER(), CURRENT_USER();\n+-----------------+-----------------+\n| USER() | CURRENT_USER() |\n+-----------------+-----------------+\n| alice@localhost | alice@localhost |\n+-----------------+-----------------+\n \nSHOW GRANTS;\n \n+-----------------------------------------------------------------------------------------------------------------------+\n| Grants for alice@localhost |\n+-----------------------------------------------------------------------------------------------------------------------+\n| GRANT ALL PRIVILEGES ON *.* TO \'alice\'@\'localhost\'\nIDENTIFIED BY PASSWORD\n\'*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19\' |\n+-----------------------------------------------------------------------------------------------------------------------+\n \nGRANT PROXY ON \'dba\'@\'localhost\' TO\n\'bob\'@\'localhost\';\n \nERROR 1698 (28000): Access denied for user\n\'alice\'@\'localhost\'\n \nAnd the following example fails because the granter does\nhave the PROXY privilege for that specific user account, but\nit is not defined WITH GRANT OPTION:\n \nSELECT USER(), CURRENT_USER();\n+-----------------+-----------------+\n| USER() | CURRENT_USER() |\n+-----------------+-----------------+\n| alice@localhost | alice@localhost |\n+-----------------+-----------------+\n \nSHOW GRANTS;\n \n+-----------------------------------------------------------------------------------------------------------------------+\n| Grants for alice@localhost |\n+-----------------------------------------------------------------------------------------------------------------------+\n| GRANT ALL PRIVILEGES ON *.* TO \'alice\'@\'localhost\'\nIDENTIFIED BY PASSWORD\n\'*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19\' |\n| GRANT PROXY ON \'dba\'@\'localhost\' TO\n\'alice\'@\'localhost\' |\n+-----------------------------------------------------------------------------------------------------------------------+\n \nMariaDB [(none)]> GRANT PROXY ON \'dba\'@\'localhost\' TO\n\'bob\'@\'localhost\';\n \nERROR 1698 (28000): Access denied for user\n\'alice\'@\'localhost\'\n \nBut the following example succeeds because the granter does\nhave the PROXY privilege for that specific user account, and\nit is defined WITH GRANT OPTION:\n \nSELECT USER(), CURRENT_USER();\n+-----------------+-----------------+\n| USER() | CURRENT_USER() |\n+-----------------+-----------------+\n| alice@localhost | alice@localhost |\n+-----------------+-----------------+\n \nSHOW GRANTS;\n \n+-----------------------------------------------------------------------------------------------------------------------------------------+\n| Grants for alice@localhost |\n+-----------------------------------------------------------------------------------------------------------------------------------------+\n| GRANT ALL PRIVILEGES ON *.* TO \'alice\'@\'localhost\'\nIDENTIFIED BY PASSWORD\n\'*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19\' WITH GRANT\nOPTION |\n| GRANT PROXY ON \'dba\'@\'localhost\' TO\n\'alice\'@\'localhost\' WITH GRANT OPTION |\n+-----------------------------------------------------------------------------------------------------------------------------------------+\n \nGRANT PROXY ON \'dba\'@\'localhost\' TO\n\'bob\'@\'localhost\';\n \nQuery OK, 0 rows affected (0.004 sec)\n \nA user account can grant the PROXY privilege for any other\nuser account if the granter has the PROXY privilege for the\n\'\'@\'%\' anonymous user account, like this:\n \nGRANT PROXY ON \'\'@\'%\' TO \'dba\'@\'localhost\' WITH\nGRANT OPTION;\n \nFor example, the following example succeeds because the user\ncan grant the PROXY privilege for any other user account:\n \nSELECT USER(), CURRENT_USER();\n+-----------------+-----------------+\n| USER() | CURRENT_USER() |\n+-----------------+-----------------+\n| alice@localhost | alice@localhost |\n+-----------------+-----------------+\n \nSHOW GRANTS;\n \n+-----------------------------------------------------------------------------------------------------------------------------------------+\n| Grants for alice@localhost |\n+-----------------------------------------------------------------------------------------------------------------------------------------+\n| GRANT ALL PRIVILEGES ON *.* TO \'alice\'@\'localhost\'\nIDENTIFIED BY PASSWORD\n\'*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19\' WITH GRANT\nOPTION |\n| GRANT PROXY ON \'\'@\'%\' TO \'alice\'@\'localhost\' WITH\nGRANT OPTION |\n+-----------------------------------------------------------------------------------------------------------------------------------------+\n \nGRANT PROXY ON \'app1_dba\'@\'localhost\' TO\n\'bob\'@\'localhost\';\n \nQuery OK, 0 rows affected (0.004 sec)\n \nGRANT PROXY ON \'app2_dba\'@\'localhost\' TO\n\'carol\'@\'localhost\';\n \nQuery OK, 0 rows affected (0.004 sec)\n \nThe default root user accounts created by mysql_install_db\nhave this privilege. For example:\n \nGRANT ALL PRIVILEGES ON *.* TO \'root\'@\'localhost\' WITH\nGRANT OPTION;\n \nGRANT PROXY ON \'\'@\'%\' TO \'root\'@\'localhost\' WITH\nGRANT OPTION;\n \nThis allows the default root user accounts to grant the\nPROXY privilege for any other user account, and it also\nallows the default root user accounts to grant others the\nprivilege to do the same.\n \nAuthentication Options\n \nThe authentication options for the GRANT statement are the\nsame as those for the CREATE USER statement.\n \nIDENTIFIED BY \'password\'\n \nThe optional IDENTIFIED BY clause can be used to provide an\naccount with a password. The password should be specified in\nplain text. It will be hashed by the PASSWORD function prior\nto being stored to the mysql.user table.\n \nFor example, if our password is mariadb, then we can create\nthe user with:\n \nGRANT USAGE ON *.* TO foo2@test IDENTIFIED BY \'mariadb\';\n \nIf you do not specify a password with the IDENTIFIED BY\nclause, the user\nwill be able to connect without a password. A blank password\nis not a wildcard\nto match any password. The user must connect without\nproviding a password if no\npassword is set.\n \nIf the user account already exists and if you provide the\nIDENTIFIED BY clause, then the user\'s password will be\nchanged. You must have the privileges needed for the SET\nPASSWORD\nstatement to change a user\'s password with GRANT.\n \nThe only authentication plugins that this clause supports\nare mysql_native_password and mysql_old_password.\n \nIDENTIFIED BY PASSWORD \'password_hash\'\n \nThe optional IDENTIFIED BY PASSWORD clause can be used to\nprovide an account with a password that has already been\nhashed. The password should be specified as a hash that was\nprovided by the PASSWORD function. It will be stored to the\nmysql.user table as-is.\n \nFor example, if our password is mariadb, then we can find\nthe hash with:\n \nSELECT PASSWORD(\'mariadb\');\n+-------------------------------------------+\n| PASSWORD(\'mariadb\') |\n+-------------------------------------------+\n| *54958E764CE10E50764C2EECBB71D01F08549980 |\n+-------------------------------------------+\n1 row in set (0.00 sec)\n \nAnd then we can create a user with the hash:\n \nGRANT USAGE ON *.* TO foo2@test IDENTIFIED BY PASSWORD\n\'*54958E764CE10E50764C2EECBB71D01F08549980\';\n \nIf you do not specify a password with the IDENTIFIED BY\nclause, the user\nwill be able to connect without a password. A blank password\nis not a wildcard\nto match any password. The user must connect without\nproviding a password if no\npassword is set.\n \nIf the user account already exists and if you provide the\nIDENTIFIED BY clause, then the user\'s password will be\nchanged. You must have the privileges needed for the SET\nPASSWORD\nstatement to change a user\'s password with GRANT.\n \nThe only authentication plugins that this clause supports\nare mysql_native_password and mysql_old_password.\n \nIDENTIFIED {VIA|WITH} authentication_plugin\n \nThe optional IDENTIFIED VIA authentication_plugin allows you\nto specify that the account should be authenticated by a\nspecific authentication plugin. The plugin name must be an\nactive authentication plugin as per SHOW PLUGINS. If it\ndoesn\'t show up in that output, then you will need to\ninstall it with INSTALL PLUGIN or INSTALL SONAME.\n \nFor example, this could be used with the PAM authentication\nplugin:\n \nGRANT USAGE ON *.* TO foo2@test IDENTIFIED VIA pam;\n \nSome authentication plugins allow additional arguments to be\nspecified after a USING or AS keyword. For example, the PAM\nauthentication plugin accepts a service name:\n \nGRANT USAGE ON *.* TO foo2@test IDENTIFIED VIA pam USING\n\'mariadb\';\n \nThe exact meaning of the additional argument would depend on\nthe specific authentication plugin.\n \nThe USING or AS keyword can also be used to provide a\nplain-text password to a plugin if it\'s provided as an\nargument to the PASSWORD() function. This is only valid for\nauthentication plugins that have implemented a hook for the\nPASSWORD() function. For example, the ed25519 authentication\nplugin supports this:\n \nCREATE USER safe@\'%\' IDENTIFIED VIA ed25519 USING\nPASSWORD(\'secret\');\n \nOne can specify many authentication plugins, they all works\nas alternatives ways of authenticating a user:\n \nCREATE USER safe@\'%\' IDENTIFIED VIA ed25519 USING\nPASSWORD(\'secret\') OR unix_socket;\n \nResource Limit Options\n \nMariaDB 10.2.0 introduced a number of resource limit\noptions.\n \nIt is possible to set per-account limits for certain server\nresources. The following table shows the values that can be\nset per account:\n \nLimit Type | Decription | \n \nMAX_QUERIES_PER_HOUR | Number of statements that the account\ncan issue per hour (including updates) | \n \nMAX_UPDATES_PER_HOUR | Number of updates (not queries) that\nthe account can issue per hour | \n \nMAX_CONNECTIONS_PER_HOUR | Number of connections that the\naccount can start per hour | \n \nMAX_USER_CONNECTIONS | Number of simultaneous connections\nthat can be accepted from the same account; if it is 0,\nmax_connections will be used instead; if max_connections is\n0, there is no limit for this account\'s simultaneous\nconnections. | \n \nMAX_STATEMENT_TIME | Timeout, in seconds, for statements\nexecuted by the user. See also Aborting Statements that\nExceed a Certain Time to Execute. | \n \nIf any of these limits are set to 0, then there is no limit\nfor that resource for that user.\n \nTo set resource limits for an account, if you do not want to\nchange that account\'s privileges, you can issue a GRANT\nstatement with the USAGE privilege, which has no meaning.\nThe statement can name some or all limit types, in any\norder.\n \nHere is an example showing how to set resource limits:\n \nGRANT USAGE ON *.* TO \'someone\'@\'localhost\' WITH\n MAX_USER_CONNECTIONS 0\n MAX_QUERIES_PER_HOUR 200;\n \nThe resources are tracked per account, which means\n\'user\'@\'server\'; not per user name or per connection.\n \nThe count can be reset for all users using FLUSH\nUSER_RESOURCES, FLUSH PRIVILEGES or mysqladmin reload.\n \nPer account resource limits are stored in the user table, in\nthe mysql database. Columns used for resources limits are\nnamed max_questions, max_updates, max_connections (for\nMAX_CONNECTIONS_PER_HOUR), and max_user_connections (for\nMAX_USER_CONNECTIONS).\n \nTLS Options\n \nBy default, MariaDB transmits data between the server and\nclients without encrypting it. This is generally acceptable\nwhen the server and client run on the same host or in\nnetworks where security is guaranteed through other means.\nHowever, in cases where the server and client exist on\nseparate networks or they are in a high-risk network, the\nlack of encryption does introduce security concerns as a\nmalicious actor could potentially eavesdrop on the traffic\nas it is sent over the network between them.\n \nTo mitigate this concern, MariaDB allows you to encrypt data\nin transit between the server and clients using the\nTransport Layer Security (TLS) protocol. TLS was formerly\nknown as Secure Socket Layer (SSL), but strictly speaking\nthe SSL protocol is a predecessor to TLS and, that version\nof the protocol is now considered insecure. The\ndocumentation still uses the term SSL often and for\ncompatibility reasons TLS-related server system and status\nvariables still use the prefix ssl_, but internally, MariaDB\nonly supports its secure successors.\n \nSee Secure Connections Overview for more information about\nhow to determine whether your MariaDB server has TLS\nsupport.\n \nYou can set certain TLS-related restrictions for specific\nuser accounts. For instance, you might use this with user\naccounts that require access to sensitive data while sending\nit across networks that you do not control. These\nrestrictions can be enabled for a user account with the\nCREATE USER, ALTER USER, or GRANT statements. The following\noptions are available:\n \nOption | Description | \n \nREQUIRE NONE | TLS is not required for this account, but can\nstill be used. | \n \nREQUIRE SSL | The account must use TLS, but no valid X509\ncertificate is required. This option cannot be combined with\nother TLS options. | \n \nREQUIRE X509 | The account must use TLS and must have a\nvalid X509 certificate. This option implies REQUIRE SSL.\nThis option cannot be combined with other TLS options. | \n \nREQUIRE ISSUER \'issuer\' | The account must use TLS and\nmust have a valid X509 certificate. Also, the Certificate\nAuthority must be the one specified via the string issuer.\nThis option implies REQUIRE X509. This option can be\ncombined with the SUBJECT, and CIPHER options in any order.\n| \n \nREQUIRE SUBJECT \'subject\' | The account must use TLS and\nmust have a valid X509 certificate. Also, the certificate\'s\nSubject must be the one specified via the string subject.\nThis option implies REQUIRE X509. This option can be\ncombined with the ISSUER, and CIPHER options in any order. |\n\n \nREQUIRE CIPHER \'cipher\' | The account must use TLS, but no\nvalid X509 certificate is required. Also, the encryption\nused for the connection must use one of the methods\nspecified in the string cipher. This option implies REQUIRE\nSSL. This option can be combined with the ISSUER, and\nSUBJECT options in any order. | \n \nThe REQUIRE keyword must be used only once for all specified\noptions, and the AND keyword can be used to separate\nindividual options, but it is not required.\n \nFor example, you can create a user account that requires\nthese TLS options with the following:\n \nGRANT USAGE ON *.* TO \'alice\'@\'%\'\n REQUIRE SUBJECT \'/CN=alice/O=My Dom,\nInc./C=US/ST=Oregon/L=Portland\'\n AND ISSUER \'/C=FI/ST=Somewhere/L=City/ O=Some\nCompany/CN=Peter Parker/emailAddress=p.parker@marvel.com\'\n AND CIPHER \'TLSv1.2\';\n \nIf any of these options are set for a specific user account,\nthen any client who tries to connect with that user account\nwill have to be configured to connect with TLS.\n \nSee Securing Connections for Client and Server for\ninformation on how to enable TLS on the client and server.\n \nRoles\n \nRoles were introduced in MariaDB 10.0.5.\n \nSyntax\n------ \nGRANT role TO grantee [, grantee2 ... ]\n[ WITH ADMIN OPTION ]\n \nThe GRANT statement is also used to grant the use a role to\none or more users or other roles. In order to be able to\ngrant a role, the grantor doing so must have permission to\ndo so (see WITH ADMIN in the CREATE ROLE article).\n \nSpecifying the WITH ADMIN OPTION permits the grantee to in\nturn grant the role to another.\n \nFor example, the following commands show how to grant the\nsame role to a couple different users.\n \nGRANT journalist TO hulda;\n \nGRANT journalist TO berengar WITH ADMIN OPTION;\n \nIf a user has been granted a role, they do not automatically\nobtain all permissions associated with that role. These\npermissions are only in use when the user activates the role\nwith the SET ROLE statement.\n \nGrant Examples\n \nGranting Root-like Privileges\n \nYou can create a user that has privileges similar to the\ndefault root accounts by executing the following:\n \nCREATE USER \'alexander\'@\'localhost\';\n \nGRANT ALL PRIVILEGES ON *.* to \'alexander\'@\'localhost\'\nWITH GRANT OPTION;\n \n\n\nURL: https://mariadb.com/kb/en/grant/', '', 'https://mariadb.com/kb/en/grant/'),
(131, 'ST_X', 11, 'Syntax\n------ \nST_X(p)\nX(p)\n \nDescription\n----------- \nReturns the X-coordinate value for the point p as a\ndouble-precision number.\n \nST_X() and X() are synonyms.\n \nExamples\n-------- \nSET @pt = \'Point(56.7 53.34)\';\n \nSELECT X(GeomFromText(@pt));\n+----------------------+\n| X(GeomFromText(@pt)) |\n+----------------------+\n| 56.7 |\n+----------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_x/', '', 'https://mariadb.com/kb/en/st_x/'),
(132, 'ST_Y', 11, 'Syntax\n------ \nST_Y(p)\nY(p)\n \nDescription\n----------- \nReturns the Y-coordinate value for the point p as a\ndouble-precision number.\n \nST_Y() and Y() are synonyms.\n \nExamples\n-------- \nSET @pt = \'Point(56.7 53.34)\';\n \nSELECT Y(GeomFromText(@pt));\n+----------------------+\n| Y(GeomFromText(@pt)) |\n+----------------------+\n| 53.34 |\n+----------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_y/', '', 'https://mariadb.com/kb/en/st_y/'),
(133, 'X', 11, 'A synonym for ST_X.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/point-properties-x/', '', 'https://mariadb.com/kb/en/point-properties-x/'),
(134, 'Y', 11, 'A synonym for ST_Y.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/point-properties-y/', '', 'https://mariadb.com/kb/en/point-properties-y/'),
(135, 'AES_DECRYPT', 12, 'Syntax\n------ \nAES_DECRYPT(crypt_str,key_str)\n \nDescription\n----------- \nThis function allows decryption of data using the official\nAES\n(Advanced Encryption Standard) algorithm. For more\ninformation, see\nthe description of AES_ENCRYPT().\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/aes_decrypt/', '', 'https://mariadb.com/kb/en/aes_decrypt/'),
(138, 'DECODE', 12, 'Syntax\n------ \nDECODE(crypt_str,pass_str)\n \nDescription\n----------- \nDecrypts the encrypted string crypt_str using pass_str as\nthe\npassword. crypt_str should be a string returned from\nENCODE(). The resulting string will be the original string\nonly if pass_str is the same.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/decode/', '', 'https://mariadb.com/kb/en/decode/'),
(99, 'EXECUTE IMMEDIATE', 8, 'EXECUTE IMMEDIATE was introduced in MariaDB 10.2.3.\n \nSyntax\n------ \nEXECUTE IMMEDIATE statement\n \nDescription\n----------- \nEXECUTE IMMEDIATE executes a dynamic SQL statement created\non the fly, which can reduce performance overhead.\n \nFor example:\n \nEXECUTE IMMEDIATE \'SELECT 1\' \n \nwhich is shorthand for:\n \nprepare stmt from \"select 1\";\n \nexecute stmt;\n \ndeallocate prepare stmt;\n \nEXECUTE IMMEDIATE supports complex expressions as prepare\nsource and parameters:\n \nEXECUTE IMMEDIATE CONCAT(\'SELECT COUNT(*) FROM \', \'t1\',\n\' WHERE a=?\') USING 5+5;\n \nLimitations: subselects and stored function calls are not\nsupported as a prepare source.\n \nThe following examples return an error:\n \nCREATE OR REPLACE FUNCTION f1() RETURNS VARCHAR(64) RETURN\n\'SELECT * FROM t1\';\nEXECUTE IMMEDIATE f1();\nERROR 1970 (42000): EXECUTE IMMEDIATE does not support\nsubqueries or stored functions\n \nEXECUTE IMMEDIATE (SELECT \'SELECT * FROM t1\');\nERROR 1064 (42000): You have an error in your SQL syntax;\ncheck the manual that \n corresponds to your MariaDB server version for the right\nsyntax to use near \n \'SELECT \'SELECT * FROM t1\')\' at line 1\n \nCREATE OR REPLACE FUNCTION f1() RETURNS INT RETURN 10;\nEXECUTE IMMEDIATE \'SELECT * FROM t1 WHERE a=?\' USING f1();\nERROR 1970 (42000): EXECUTE..USING does not support\nsubqueries or stored functions\n \nEXECUTE IMMEDIATE \'SELECT * FROM t1 WHERE a=?\' USING\n(SELECT 10);\nERROR 1064 (42000): You have an error in your SQL syntax;\ncheck the manual that \n corresponds to your MariaDB server version for the right\nsyntax to use near \n \'SELECT 10)\' at line 1\n \nOne can use a user or an SP variable as a workaround:\n \nCREATE OR REPLACE FUNCTION f1() RETURNS VARCHAR(64) RETURN\n\'SELECT * FROM t1\';\nSET @stmt=f1();\nEXECUTE IMMEDIATE @stmt;\n \nSET @stmt=(SELECT \'SELECT 1\');\nEXECUTE IMMEDIATE @stmt;\n \nCREATE OR REPLACE FUNCTION f1() RETURNS INT RETURN 10;\nSET @param=f1();\nEXECUTE IMMEDIATE \'SELECT * FROM t1 WHERE a=?\' USING\n@param;\n \nSET @param=(SELECT 10);\nEXECUTE IMMEDIATE \'SELECT * FROM t1 WHERE a=?\' USING\n@param;\n \nEXECUTE IMMEDIATE supports user variables and SP variables\nas OUT parameters\n \nDELIMITER $$\nCREATE OR REPLACE PROCEDURE p1(OUT a INT)\nBEGIN\n SET a:= 10;\nEND;\n$$\nDELIMITER ;\nSET @a=2;\nEXECUTE IMMEDIATE \'CALL p1(?)\' USING @a;\nSELECT @a;\n+------+\n| @a |\n+------+\n| 10 |\n+------+\n \nSimilar to PREPARE, EXECUTE IMMEDIATE is allowed in stored\nprocedures but is not allowed in stored functions.\n \nThis example uses EXECUTE IMMEDIATE inside a stored\nprocedure:\n \nDELIMITER $$\nCREATE OR REPLACE PROCEDURE p1()\nBEGIN\n EXECUTE IMMEDIATE \'SELECT 1\';\nEND;\n$$\nDELIMITER ;\nCALL p1;\n+---+\n| 1 |\n+---+\n| 1 |\n+---+\n \nThis script returns an error:\n \nDELIMITER $$\nCREATE FUNCTION f1() RETURNS INT\nBEGIN\n EXECUTE IMMEDIATE \'DO 1\';\n RETURN 1;\nEND;\n$$\nERROR 1336 (0A000): Dynamic SQL is not allowed in stored\nfunction or trigger\n \nEXECUTE IMMEDIATE can use DEFAULT and IGNORE indicators as\nbind parameters:\n \nCREATE OR REPLACE TABLE t1 (a INT DEFAULT 10);\nEXECUTE IMMEDIATE \'INSERT INTO t1 VALUES (?)\' USING\nDEFAULT;\nSELECT * FROM t1;\n+------+\n| a |\n+------+\n| 10 |\n+------+\n \nEXECUTE IMMEDIATE increments the Com_execute_immediate\nstatus variable, as well as the Com_stmt_prepare,\nCom_stmt_execute and Com_stmt_close status variables.\n \nNote, EXECUTE IMMEDIATE does not increment the\nCom_execute_sql status variable. Com_execute_sql is used\nonly for PREPARE..EXECUTE.\n \nThis session screenshot demonstrates how EXECUTE IMMEDIATE\naffects status variables:\n \nSELECT * FROM INFORMATION_SCHEMA.SESSION_STATUS WHERE\nVARIABLE_NAME RLIKE \n (\'COM_(EXECUTE|STMT_PREPARE|STMT_EXECUTE|STMT_CLOSE)\');\n \n+-----------------------+----------------+\n| VARIABLE_NAME | VARIABLE_VALUE |\n+-----------------------+----------------+\n| COM_EXECUTE_IMMEDIATE | 0 |\n| COM_EXECUTE_SQL | 0 |\n| COM_STMT_CLOSE | 0 |\n| COM_STMT_EXECUTE | 0 |\n| COM_STMT_PREPARE | 0 |\n+-----------------------+----------------+\n \nEXECUTE IMMEDIATE \'SELECT 1\';\n+---+\n| 1 |\n+---+\n| 1 |\n+---+\n \nSELECT * FROM INFORMATION_SCHEMA.SESSION_STATUS WHERE\nVARIABLE_NAME RLIKE \n (\'COM_(EXECUTE|STMT_PREPARE|STMT_EXECUTE|STMT_CLOSE)\');\n+-----------------------+----------------+\n| VARIABLE_NAME | VARIABLE_VALUE |\n+-----------------------+----------------+\n| COM_EXECUTE_IMMEDIATE | 1 |\n| COM_EXECUTE_SQL | 0 |\n| COM_STMT_CLOSE | 1 |\n| COM_STMT_EXECUTE | 1 |\n| COM_STMT_PREPARE | 1 |\n+-----------------------+----------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/execute-immediate/', '', 'https://mariadb.com/kb/en/execute-immediate/'),
(103, 'Metadata Locking', 8, 'Metadata locking has been supported since MariaDB 5.5. This\nmeans that when a transaction (including XA transactions)\nuses a table, it locks its metadata until the end of\ntransaction. Non-transactional tables are also locked, as\nwell as views and objects which are related to locked\ntables/views (stored functions, triggers, etc). When a\nconnection tries to use a DDL statement (like an ALTER\nTABLE) which modifies a table that is locked, that\nconnection is queued, and has to wait until it\'s unlocked.\nUsing savepoints and performing a partial rollback does not\nrelease metadata locks.\n \nLOCK TABLES ... WRITE are also queued. Some wrong statements\nwhich produce an error may not need to wait for the lock to\nbe freed.\n \nMetadata lock\'s timeout is determined by the value of the\nlock_wait_timeout server system variable (in seconds).\nHowever, note that its default value is 31536000 (1 year).\nIf this timeout exceeds, the following error is returned:\n \nERROR 1205 (HY000): Lock wait timeout exceeded;\n try restarting transaction\n \nIf the metadata_lock_info plugin is installed, the\nInformation Schema metadata_lock_info table stores\ninformation about existing metadata locks.\n \nExample\n \nLet\'s use the following MEMORY (non-transactional) table:\n \nCREATE TABLE t (a INT) ENGINE = MEMORY;\n \nConnection 1 starts a transaction, and INSERTs a row into t:\n \nSTART TRANSACTION;\n \nINSERT INTO t SET a=1;\n \nt\'s metadata is now locked by connection 1. Connection 2\ntries to alter t, but has to wait:\n \nALTER TABLE t ADD COLUMN b INT;\n \nConnection 2\'s prompt is blocked now.\n \nNow connection 1 ends the transaction:\n \nCOMMIT;\n \n...and connection 2 finally gets the output of its command:\n \nQuery OK, 1 row affected (35.23 sec)\nRecords: 1 Duplicates: 0 Warnings: 0\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/metadata-locking/', '', 'https://mariadb.com/kb/en/metadata-locking/'),
(143, 'MD5', 12, 'Syntax\n------ \nMD5(str)\n \nDescription\n----------- \nCalculates an MD5 128-bit checksum for the string. \n \nThe return value is a 32-hex digit string, and as of MariaDB\n5.5, is a nonbinary string in the connection character set\nand collation, determined by the values of the\ncharacter_set_connection and collation_connection system\nvariables. Before 5.5, the return value was a binary string.\n \nNULL is returned if the argument was NULL. \n \nExamples\n-------- \nSELECT MD5(\'testing\');\n+----------------------------------+\n| MD5(\'testing\') |\n+----------------------------------+\n| ae2b1fca515949e5d54fb22b8ed95575 |\n+----------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/md5/', '', 'https://mariadb.com/kb/en/md5/'),
(145, 'PASSWORD', 12, 'Syntax\n------ \nPASSWORD(str)\n \nDescription\n----------- \nThe PASSWORD() function is used for hashing passwords for\nuse in authentication by the MariaDB server. It is not\nintended for use in other applications.\n \nCalculates and returns a hashed password string from the\nplaintext password str. Returns an empty string (>= MariaDB\n10.0.4) or NULL (\n\nURL: https://mariadb.com/kb/en/password/', '', 'https://mariadb.com/kb/en/password/'),
(100, 'LOCK TABLES', 8, 'Syntax\n------ \nLOCK TABLE[S]\n tbl_name [[AS] alias] lock_type\n [, tbl_name [[AS] alias] lock_type] ...\n [WAIT n|NOWAIT]\n \nlock_type:\n READ [LOCAL]\n | [LOW_PRIORITY] WRITE\n | WRITE CONCURRENT\n \nUNLOCK TABLES\n \nDescription\n----------- \nThe lock_type can be one of:\n \nOption | Description | \n \nREAD | Read lock, no writes allowed | \n \nREAD LOCAL | Read lock, but allow concurrent inserts | \n \nWRITE | Exclusive write lock. No other connections can read\nor write to this table | \n \nLOW_PRIORITY WRITE | Exclusive write lock, but allow new\nread locks on the table until we get the write lock. | \n \nWRITE CONCURRENT | Exclusive write lock, but allow READ\nLOCAL locks to the table. | \n \nMariaDB enables client sessions to acquire table locks\nexplicitly for the\npurpose of cooperating with other sessions for access to\ntables, or to\nprevent other sessions from modifying tables during periods\nwhen a\nsession requires exclusive access to them. A session can\nacquire or\nrelease locks only for itself. One session cannot acquire\nlocks for\nanother session or release locks held by another session.\n \nLocks may be used to emulate transactions or to get more\nspeed when\nupdating tables.\n \nLOCK TABLES explicitly acquires table locks for the current\nclient session.\nTable locks can be acquired for base tables or views. To use\nLOCK TABLES,\nyou must have the LOCK TABLES privilege, and the SELECT\nprivilege for\neach object to be locked. See GRANT\n \nFor view locking, LOCK TABLES adds all base tables used in\nthe view to the\nset of tables to be locked and locks them automatically. If\nyou lock a table\nexplicitly with LOCK TABLES, any tables used in triggers are\nalso locked\nimplicitly, as described in Triggers and Implicit Locks.\n \nUNLOCK TABLES explicitly releases any table locks held by\nthe\ncurrent session.\n \nWAIT/NOWAIT\n \nSet the lock wait timeout. See WAIT and NOWAIT.\n \nLimitations\n \nLOCK TABLES doesn\'t work when using Galera cluster. You may\nexperience crashes or locks when used with Galera.\n \nLOCK TABLES works on XtraDB/InnoDB tables only if the\ninnodb_table_locks system variable is set to 1 (the default)\nand autocommit is set to 0 (1 is default). Please note that\nno error message will be returned on LOCK TABLES with\ninnodb_table_locks = 0.\n \nLOCK TABLES implicitly commits the active transaction, if\nany. Also, starting a transaction always releases all table\nlocks acquired with LOCK TABLES. This means that there is no\nway to have table locks and an active transaction at the\nsame time. The only exceptions are the transactions in\nautocommit mode. To preserve the data integrity between\ntransactional and non-transactional tables, the GET_LOCK()\nfunction can be used.\n \nWhile a connection holds an explicit read lock on a table,\nit cannot modify it. If you try, the following error will be\nproduced:\n \nERROR 1099 (HY000): Table \'tab_name\' was locked with a\nREAD lock and can\'t be updated\n \nWhile a connection holds an explicit lock on a table, it\ncannot access a non-locked table. If you try, the following\nerror will be produced:\n \nERROR 1100 (HY000): Table \'tab_name\' was not locked with\nLOCK TABLES\n \nWhile a connection holds an explicit lock on a table, it\ncannot issue the following: INSERT DELAYED, CREATE TABLE,\nCREATE TABLE ... LIKE, and DDL statements involving stored\nprograms and views (except for triggers). If you try, the\nfollowing error will be produced:\n \nERROR 1192 (HY000): Can\'t execute the given command because\nyou have active locked tables or an active transaction\n \nLOCK TABLES can not be used in stored routines - if you try,\nthe following error will be produced on creation:\n \nERROR 1314 (0A000): LOCK is not allowed in stored procedures\n \n\n\nURL: https://mariadb.com/kb/en/lock-tables/', '', 'https://mariadb.com/kb/en/lock-tables/'),
(105, 'PURGE BINARY LOGS', 8, 'Syntax\n------ \nPURGE { BINARY | MASTER } LOGS\n { TO \'log_name\' | BEFORE datetime_expr }\n \nDescription\n----------- \nThe PURGE BINARY LOGS statement deletes all the binary log\nfiles listed in the log index file prior to the specified\nlog file name or\ndate. BINARY and MASTER are synonyms.\nDeleted log files also are removed from the list recorded in\nthe index file, so\nthat the given log file becomes the first in the list.\n \nThe datetime expression is in the format \'YYYY-MM-DD\nhh:mm:ss\'. \n \nIf a slave is active but has yet to read from a binary log\nfile you attempt to delete, the statement will fail with an\nerror. However, if the slave is not connected and has yet to\nread from a log file you delete, the file will be deleted,\nbut the slave will be unable to continue replicating once it\nconnects again.\n \nThis statement has no effect if the server was not started\nwith the\n--log-bin option to enable binary logging.\n \nTo list the binary log files on the server, use SHOW BINARY\nLOGS. To see which files they are reading, use SHOW SLAVE\nSTATUS. You can only delete the files that are older than\nthe oldest file that is used by the slaves.\n \nTo delete all binary log files, use RESET MASTER.\nTo move to a new log file (for example if you want to remove\nthe current log file), use FLUSH LOGS before you execute\nPURGE LOGS.\n \nIf the expire_logs_days server system variable is not set to\n0, the server automatically deletes binary log files after\nthe given number of days.\n \nExamples\n-------- \nPURGE BINARY LOGS TO \'mariadb-bin.000063\';\n \nPURGE BINARY LOGS BEFORE \'2013-04-21\';\n \nPURGE BINARY LOGS BEFORE \'2013-04-22 09:55:22\';\n \n\n\nURL: https://mariadb.com/kb/en/purge-binary-logs/', '', 'https://mariadb.com/kb/en/purge-binary-logs/'),
(150, 'ENDPOINT', 13, 'A synonym for ST_ENDPOINT.\n \n\n \n \n \n \n \n \n \n\nURL:\nhttps://mariadb.com/kb/en/linestring-properties-endpoint/', '', 'https://mariadb.com/kb/en/linestring-properties-endpoint/'),
(151, 'GLENGTH', 13, 'Syntax\n------ \nGLength(ls)\n \nDescription\n----------- \nReturns as a double-precision number the length of the\nLineString value ls in its associated spatial reference.\n \nExamples\n-------- \nSET @ls = \'LineString(1 1,2 2,3 3)\';\n \nSELECT GLength(GeomFromText(@ls));\n+----------------------------+\n| GLength(GeomFromText(@ls)) |\n+----------------------------+\n| 2.82842712474619 |\n+----------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/glength/', '', 'https://mariadb.com/kb/en/glength/'),
(152, 'NumPoints', 13, 'A synonym for ST_NumPoints.\n \n\n \n \n \n \n \n \n \n\nURL:\nhttps://mariadb.com/kb/en/linestring-properties-numpoints/', '', 'https://mariadb.com/kb/en/linestring-properties-numpoints/'),
(153, 'PointN', 13, 'A synonym for ST_PointN.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/linestring-properties-pointn/', '', 'https://mariadb.com/kb/en/linestring-properties-pointn/'),
(154, 'STARTPOINT', 13, 'A synonym for ST_STARTPOINT.\n \n\n \n \n \n \n \n \n \n\nURL:\nhttps://mariadb.com/kb/en/linestring-properties-startpoint/', '', 'https://mariadb.com/kb/en/linestring-properties-startpoint/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(155, 'ST_ENDPOINT', 13, 'Syntax\n------ \nST_EndPoint(ls)\nEndPoint(ls)\n \nDescription\n----------- \nReturns the Point that is the endpoint of the\nLineString value ls.\n \nST_EndPoint() and EndPoint() are synonyms.\n \nExamples\n-------- \nSET @ls = \'LineString(1 1,2 2,3 3)\';\n \nSELECT AsText(EndPoint(GeomFromText(@ls)));\n+-------------------------------------+\n| AsText(EndPoint(GeomFromText(@ls))) |\n+-------------------------------------+\n| POINT(3 3) |\n+-------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_endpoint/', '', 'https://mariadb.com/kb/en/st_endpoint/'),
(101, 'ROLLBACK', 8, 'The ROLLBACK statement rolls back (ends) a transaction,\ndestroying any changes to SQL-data so that they never become\nvisible to subsequent transactions. The required syntax for\nthe ROLLBACK statement is as follows. \n \nROLLBACK [ WORK ] [ AND [ NO ] CHAIN ] \n[ TO [ SAVEPOINT ] { | } ]\n \nThe ROLLBACK statement will either end a transaction,\ndestroying all data changes that happened during any of the\ntransaction, or it will just destroy any data changes that\nhappened since you established a savepoint. The basic form\nof the ROLLBACK statement is just the keyword ROLLBACK (the\nkeyword WORK is simply noise and can be omitted without\nchanging the effect). \n \nThe optional AND CHAIN clause is a convenience for\ninitiating a new transaction as soon as the old transaction\nterminates. If AND CHAIN is specified, then there is\neffectively nothing between the old and new transactions,\nalthough they remain separate. The characteristics of the\nnew transaction will be the same as the characteristics of\nthe old one — that is, the new transaction will have the\nsame access mode, isolation level and diagnostics area size\n(we\'ll discuss all of these shortly) as the transaction\njust terminated. The AND NO CHAIN option just tells your\nDBMS to end the transaction — that is, these four SQL\nstatements are equivalent: \n \nROLLBACK;\n \nROLLBACK WORK;\n \nROLLBACK AND NO CHAIN;\n \nROLLBACK WORK AND NO CHAIN;\n \nAll of them end a transaction without saving any transaction\ncharacteristics. The only other options, the equivalent\nstatements: \n \nROLLBACK AND CHAIN;\n \nROLLBACK WORK AND CHAIN;\n \nboth tell your DBMS to end a transaction, but to save that\ntransaction\'s characteristics for the next transaction. \n \nROLLBACK is much simpler than COMMIT: it may involve no more\nthan a few deletions (of Cursors, locks, prepared SQL\nstatements and log-file entries). It\'s usually assumed that\nROLLBACK can\'t fail, although such a thing is conceivable\n(for example, an encompassing transaction might reject an\nattempt to ROLLBACK because it\'s lining up for a COMMIT). \n \nROLLBACK cancels all effects of a transaction. It does not\ncancel effects on objects outside the DBMS\'s control (for\nexample the values in host program variables or the settings\nmade by some SQL/CLI function calls). But in general, it is\na convenient statement for those situations when you say\n\"oops, this isn\'t working\" or when you simply don\'t care\nwhether your temporary work becomes permanent or not.\n \nHere is a moot question. If all you\'ve been doing is\nSELECTs, so that there have been no data changes, should you\nend the transaction with ROLLBACK or COMMIT? It shouldn\'t\nreally matter because both ROLLBACK and COMMIT do the same\ntransaction-terminating job. However, the popular conception\nis that ROLLBACK implies failure, so after a successful\nseries of SELECT statements the convention is to end the\ntransaction with COMMIT rather than ROLLBACK.\n \nMariaDB (and most other DBMSs) supports rollback of SQL-data\nchange statements, but not of SQL-Schema statements. This\nmeans that if you use any of CREATE, ALTER, DROP, GRANT,\nREVOKE, you are implicitly committing at execution time.\n \nINSERT INTO Table_2 VALUES(5); \nDROP TABLE Table_3 CASCADE;\n \nROLLBACK;\n \nThe result will be that both the INSERT and the DROP will go\nthrough as separate transactions so the ROLLBACK will have\nno effect. \n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/rollback/', '', 'https://mariadb.com/kb/en/rollback/'),
(107, 'RESET SLAVE', 8, 'RESET SLAVE [\"connection_name\"] [ALL] \n \nRESET SLAVE makes the slave forget its replication position\nin the\nmaster\'s binary log. This statement is meant to be used for\na clean\nstart. It deletes the master.info and relay-log.info files,\nall the\nrelay log files, and starts a new relay log file. To use\nRESET SLAVE,\nthe slave replication threads must be stopped (use STOP\nSLAVE if\nnecessary).\n \nNote: All relay log files are deleted, even if they have not\nbeen\ncompletely executed by the slave SQL thread. (This is a\ncondition\nlikely to exist on a replication slave if you have issued a\nSTOP SLAVE\nstatement or if the slave is highly loaded.)\n \nConnection information stored in the master.info file is\nimmediately\nreset using any values specified in the corresponding\nstartup options.\nThis information includes values such as master host, master\nport,\nmaster user, and master password. If the slave SQL thread\nwas in the\nmiddle of replicating temporary tables when it was stopped,\nand RESET\nSLAVE is issued, these replicated temporary tables are\ndeleted on the\nslave.\n \nThe ALL also resets the PORT, HOST, USER and PASSWORD\nparameters for the slave. If you are using a connection\nname, it will permanently delete it and it will not show up\nanymore in SHOW ALL SLAVES STATUS.\n \nconnection_name\n \nThe connection_name option was added as part of multi-source\nreplication added in MariaDB 10.0\n \nIf there is only one nameless master, or the default master\n(as specified by the default_master_connection system\nvariable) is intended, connection_name can be omitted. If\nprovided, the RESET SLAVE statement will apply to the\nspecified master. connection_name is case-insensitive.\n \n\n\nURL: https://mariadb.com/kb/en/reset-slave-connection_name/', '', 'https://mariadb.com/kb/en/reset-slave-connection_name/'),
(156, 'ST_NUMPOINTS', 13, 'Syntax\n------ \nST_NumPoints(ls)\nNumPoints(ls)\n \nDescription\n----------- \nReturns the number of Point objects in the LineString\nvalue ls.\n \nST_NumPoints() and NumPoints() are synonyms.\n \nExamples\n-------- \nSET @ls = \'LineString(1 1,2 2,3 3)\';\n \nSELECT NumPoints(GeomFromText(@ls));\n+------------------------------+\n| NumPoints(GeomFromText(@ls)) |\n+------------------------------+\n| 3 |\n+------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_numpoints/', '', 'https://mariadb.com/kb/en/st_numpoints/'),
(157, 'ST_POINTN', 13, 'Syntax\n------ \nST_PointN(ls,N)\nPointN(ls,N)\n \nDescription\n----------- \nReturns the N-th Point in the LineString value ls.\nPoints are numbered beginning with 1.\n \nST_PointN() and PointN() are synonyms.\n \nExamples\n-------- \nSET @ls = \'LineString(1 1,2 2,3 3)\';\n \nSELECT AsText(PointN(GeomFromText(@ls),2));\n+-------------------------------------+\n| AsText(PointN(GeomFromText(@ls),2)) |\n+-------------------------------------+\n| POINT(2 2) |\n+-------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_pointn/', '', 'https://mariadb.com/kb/en/st_pointn/'),
(161, 'INET_ATON', 14, 'Syntax\n------ \nINET_ATON(expr)\n \nDescription\n----------- \nGiven the dotted-quad representation of an IPv4 network\naddress as a string,\nreturns an integer that represents the numeric value of the\naddress.\nAddresses may be 4- or 8-byte addresses.\n \nReturns NULL if the argument is not understood.\n \nExamples\n-------- \nSELECT INET_ATON(\'192.168.1.1\');\n+--------------------------+\n| INET_ATON(\'192.168.1.1\') |\n+--------------------------+\n| 3232235777 |\n+--------------------------+\n \nThis is calculated as follows: 192 x 2563 + 168 x 256 2 + 1\nx 256 + 1\n \n\n\nURL: https://mariadb.com/kb/en/inet_aton/', '', 'https://mariadb.com/kb/en/inet_aton/'),
(162, 'INET_NTOA', 14, 'Syntax\n------ \nINET_NTOA(expr)\n \nDescription\n----------- \nGiven a numeric IPv4 network address in network byte order\n(4 or 8 byte),\nreturns the dotted-quad representation of the address as a\nstring.\n \nExamples\n-------- \nSELECT INET_NTOA(3232235777);\n+-----------------------+\n| INET_NTOA(3232235777) |\n+-----------------------+\n| 192.168.1.1 |\n+-----------------------+\n \n192.168.1.1 corresponds to 3232235777 since 192 x 2563 + 168\nx 256 2 + 1 x 256 + 1 = 3232235777\n \n\n\nURL: https://mariadb.com/kb/en/inet_ntoa/', '', 'https://mariadb.com/kb/en/inet_ntoa/'),
(104, 'PREPARE Statement', 8, 'Syntax\n------ \nPREPARE stmt_name FROM preparable_stmt\n \nDescription\n----------- \nThe PREPARE statement prepares a statement and assigns it a\nname,\nstmt_name, by which to refer to the statement later.\nStatement names\nare not case sensitive. preparable_stmt is either a string\nliteral or a user variable (not a local variable, an SQL\nexpression or a subquery) that contains the text of the\nstatement. The text must \nrepresent a single SQL statement, not multiple statements.\nWithin the\nstatement, \"?\" characters can be used as parameter markers\nto indicate\nwhere data values are to be bound to the query later when\nyou execute\nit. The \"?\" characters should not be enclosed within\nquotes, even if\nyou intend to bind them to string values. Parameter markers\ncan be used\nonly where data values should appear, not for SQL keywords,\nidentifiers, and so forth.\n \nThe scope of a prepared statement is the session within\nwhich it is\ncreated. Other sessions cannot see it.\n \nIf a prepared statement with the given name already exists,\nit is\ndeallocated implicitly before the new statement is prepared.\nThis means\nthat if the new statement contains an error and cannot be\nprepared, an\nerror is returned and no statement with the given name\nexists.\n \nPrepared statements can be PREPAREd and EXECUTEd in a stored\nprocedure, but not in a stored function or trigger. Also,\neven if the statement is PREPAREd in a procedure, it will\nnot be deallocated when the procedure execution ends.\n \nA prepared statement can access user-defined variables, but\nnot local variables or procedure\'s parameters.\n \nIf the prepared statement contains a syntax error, PREPARE\nwill fail. As a side effect, stored procedures can use it to\ncheck if a statement is valid. For example:\n \nCREATE PROCEDURE `test_stmt`(IN sql_text TEXT)\nBEGIN\n DECLARE EXIT HANDLER FOR SQLEXCEPTION\n BEGIN\n SELECT CONCAT(sql_text, \' is not valid\');\n END;\n SET @SQL := sql_text;\n PREPARE stmt FROM @SQL;\n DEALLOCATE PREPARE stmt;\nEND;\n \nThe FOUND_ROWS() and ROW_COUNT() functions, if called\nimmediatly after EXECUTE, return the number of rows read or\naffected by the prepared statements; however, if they are\ncalled after DEALLOCATE PREPARE, they provide information\nabout this statement. If the prepared statement produces\nerrors or warnings, GET DIAGNOSTICS return information about\nthem. DEALLOCATE PREPARE shouldn\'t clear the diagnostics\narea, unless it produces an error.\n \nA prepared statement is executed with EXECUTE and released \nwith DEALLOCATE PREPARE.\n \nThe max_prepared_stmt_count server system variable\ndetermines the number of allowed prepared statements that\ncan be prepared on the server. If it is set to 0, prepared\nstatements are not allowed. If the limit is reached, an\nerror similar to the following will be produced:\n \nERROR 1461 (42000): Can\'t create more than\nmax_prepared_stmt_count statements \n (current value: 0)\n \nOracle Mode\n \nIn Oracle mode from MariaDB 10.3, PREPARE stmt FROM \'SELECT\n:1, :2\' is used, instead of ?.\n \nPermitted Statements\n \nNot all statements can be prepared. Only the following SQL\ncommands are permitted:\nALTER TABLE\nANALYZE TABLE\nBINLOG\nCACHE INDEX\nCALL\nCHANGE MASTER\nCHECKSUM {TABLE | TABLES}\nCOMMIT\n{CREATE | DROP} DATABASE\n{CREATE | DROP} INDEX\n{CREATE | RENAME | DROP} TABLE\n{CREATE | RENAME | DROP} USER\n{CREATE | DROP} VIEW\nDELETE\nDESCRIBE\nDO\nEXPLAIN\nFLUSH {TABLE | TABLES | TABLES WITH READ LOCK | HOSTS |\nPRIVILEGES | LOGS | STATUS | \n MASTER | SLAVE | DES_KEY_FILE | USER_RESOURCES | QUERY\nCACHE | TABLE_STATISTICS | \n INDEX_STATISTICS | USER_STATISTICS | CLIENT_STATISTICS}\nGRANT\nINSERT\nINSTALL {PLUGIN | SONAME}\nHANDLER READ\nKILL\nLOAD INDEX INTO CACHE\nOPTIMIZE TABLE\nREPAIR TABLE\nREPLACE\nRESET {MASTER | SLAVE | QUERY CACHE}\nREVOKE\nROLLBACK\nSELECT\nSET\nSET GLOBAL SQL_SLAVE_SKIP_COUNTER\nSET ROLE\nSET SQL_LOG_BIN\nSET TRANSACTION ISOLATION LEVEL\nSHOW EXPLAIN\nSHOW {DATABASES | TABLES | OPEN TABLES | TABLE STATUS |\nCOLUMNS | INDEX | TRIGGERS | \n EVENTS | GRANTS | CHARACTER SET | COLLATION | ENGINES |\nPLUGINS [SONAME] | PRIVILEGES | \n PROCESSLIST | PROFILE | PROFILES | VARIABLES | STATUS |\nWARNINGS | ERRORS | \n TABLE_STATISTICS | INDEX_STATISTICS | USER_STATISTICS |\nCLIENT_STATISTICS | AUTHORS | \n CONTRIBUTORS}\nSHOW CREATE {DATABASE | TABLE | VIEW | PROCEDURE | FUNCTION\n| TRIGGER | EVENT}\nSHOW {FUNCTION | PROCEDURE} CODE\nSHOW BINLOG EVENTS\nSHOW SLAVE HOSTS\nSHOW {MASTER | BINARY} LOGS\nSHOW {MASTER | SLAVE | TABLES | INNODB | FUNCTION |\nPROCEDURE} STATUS\nSLAVE {START | STOP}\nTRUNCATE TABLE\nSHUTDOWN\nUNINSTALL {PLUGIN | SONAME}\nUPDATE\n \nSynonyms are not listed here, but can be used. For example,\nDESC can be used instead of DESCRIBE.\n \nCompound statements can be prepared too.\n \nNote that if a statement can be run in a stored routine, it\nwill work even if it is called by a prepared statement. For\nexample, SIGNAL can\'t be directly prepared. However, it is\nallowed in stored routines. If the x() procedure contains\nSIGNAL, you can still prepare and execute the \'CALL x();\'\nprepared statement.\n \nPREPARE now supports most kinds of expressions as well, for\nexample:\n \nPREPARE stmt FROM CONCAT(\'SELECT * FROM \', table_name);\n \nWhen PREPARE is used with a statement which is not\nsupported, the following error is produced:\n \nERROR 1295 (HY000): This command is not supported in the\nprepared statement protocol yet\n \nExample\n \ncreate table t1 (a int,b char(10));\ninsert into t1 values (1,\"one\"),(2,\n\"two\"),(3,\"three\");\nprepare test from \"select * from t1 where a=?\";\nset @param=2;\nexecute test using @param;\n+------+------+\n| a | b |\n+------+------+\n| 2 | two |\n+------+------+\nset @param=3;\nexecute test using @param;\n+------+-------+\n| a | b |\n+------+-------+\n| 3 | three |\n+------+-------+\ndeallocate prepare test;\n \nSince identifiers are not permitted as prepared statements\nparameters, sometimes it is necessary to dynamically compose\nan SQL statement. This technique is called dynamic SQL). The\nfollowing example shows how to use dynamic SQL:\n \nCREATE PROCEDURE test.stmt_test(IN tab_name VARCHAR(64))\nBEGIN\n SET @sql = CONCAT(\'SELECT COUNT(*) FROM \', tab_name);\n PREPARE stmt FROM @sql;\n EXECUTE stmt;\n DEALLOCATE PREPARE stmt;\nEND;\n \nCALL test.stmt_test(\'mysql.user\');\n+----------+\n| COUNT(*) |\n+----------+\n| 4 |\n+----------+\n \nUse of variables in prepared statements:\n \nPREPARE stmt FROM \'SELECT @x;\';\n \nSET @x = 1;\n \nEXECUTE stmt;\n+------+\n| @x |\n+------+\n| 1 |\n+------+\n \nSET @x = 0;\n \nEXECUTE stmt;\n+------+\n| @x |\n+------+\n| 0 |\n+------+\n \nDEALLOCATE PREPARE stmt;\n \n\n\nURL: https://mariadb.com/kb/en/prepare-statement/', '', 'https://mariadb.com/kb/en/prepare-statement/'),
(163, 'IS_FREE_LOCK', 14, 'Syntax\n------ \nIS_FREE_LOCK(str)\n \nDescription\n----------- \nChecks whether the lock named str is free to use (that is,\nnot locked).\nReturns 1 if the lock is free (no one is using the lock),\n 0 if the lock is in use, and NULL if an\nerror occurs (such as an incorrect argument, like an empty\nstring or NULL). str is case insensitive.\n \nIf the metadata_lock_info plugin is installed, the\nInformation Schema metadata_lock_info table contains\ninformation about locks of this kind (as well as metadata\nlocks).\n \nStatements using the IS_FREE_LOCK() function are not safe\nfor replication.\n \n\n\nURL: https://mariadb.com/kb/en/is_free_lock/', '', 'https://mariadb.com/kb/en/is_free_lock/'),
(167, 'IS_IPV6', 14, 'IS_IPV6() has been available since MariaDB 10.0.12.\n \nSyntax\n------ \nIS_IPV6(expr)\n \nDescription\n----------- \nReturns 1 if the expression is a valid IPv6 address\nspecified as a string, otherwise returns 0. Does not\nconsider IPv4 addresses to be valid IPv6 addresses.\n \nExamples\n-------- \n SELECT IS_IPV6(\'48f3::d432:1431:ba23:846f\');\n+--------------------------------------+\n| IS_IPV6(\'48f3::d432:1431:ba23:846f\') |\n+--------------------------------------+\n| 1 |\n+--------------------------------------+\n1 row in set (0.02 sec)\n \nSELECT IS_IPV6(\'10.0.1.1\');\n+---------------------+\n| IS_IPV6(\'10.0.1.1\') |\n+---------------------+\n| 0 |\n+---------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/is_ipv6/', '', 'https://mariadb.com/kb/en/is_ipv6/'),
(108, 'SET TRANSACTION', 8, 'Syntax\n------ \nSET [GLOBAL | SESSION] TRANSACTION\n transaction_property [, transaction_property] ...\n \ntransaction_property:\n ISOLATION LEVEL level\n | READ WRITE\n | READ ONLY\n \nlevel:\n REPEATABLE READ\n | READ COMMITTED\n | READ UNCOMMITTED\n | SERIALIZABLE\n \nDescription\n----------- \nThis statement sets the transaction isolation level or the\ntransaction access mode globally, for the current session,\nor for the next transaction:\nWith the GLOBAL keyword, the statement sets the default\n transaction level globally for all subsequent sessions.\nExisting sessions are\n unaffected.\nWith the SESSION keyword, the statement sets the default\n transaction level for all subsequent transactions performed\nwithin the\n current session.\nWithout any SESSION or GLOBAL keyword,\n the statement sets the isolation level for the next (not\nstarted) transaction\n performed within the current session.\n \nA change to the global default isolation level requires the \nSUPER privilege. Any session is free to change its\nsession isolation level (even in the middle of a\ntransaction), or the isolation\nlevel for its next transaction.\n \nIsolation Level\n \nTo set the global default isolation level at server startup,\nuse the\n--transaction-isolation=level option on the command line or\nin an option file. Values of level for this option use\ndashes\nrather than spaces, so the allowable values are\nREAD-UNCOMMITTED,\nREAD-COMMITTED, REPEATABLE-READ, or\nSERIALIZABLE. For example, to set the default isolation\nlevel to REPEATABLE READ, use these lines in the [mysqld]\nsection of an option file:\n \n[mysqld]\ntransaction-isolation = REPEATABLE-READ\nTo determine the global and session transaction isolation\nlevels at\nruntime, check the value of the tx_isolation system\nvariable:\n \nSELECT @@GLOBAL.tx_isolation, @@tx_isolation;\n \nInnoDB supports each of the translation isolation levels\ndescribed here\nusing different locking strategies. The default level is \nREPEATABLE READ. For additional information about InnoDB\nrecord-level locks and how it uses them to execute various\ntypes of statements,\nsee XtraDB/InnoDB Lock Modes,\nand\nhttp://dev.mysql.com/doc/refman/en/innodb-locks-set.html.\n \nIsolation Levels\n \nThe following sections describe how MariaDB supports the\ndifferent transaction levels.\n \nREAD UNCOMMITTED\n \nSELECT statements are performed in a non-locking fashion,\nbut a possible earlier version of a row might be used. Thus,\nusing this\nisolation level, such reads are not consistent. This is also\ncalled a \"dirty\nread.\" Otherwise, this isolation level works like \nREAD COMMITTED.\n \nREAD COMMITTED\n \nA somewhat Oracle-like isolation level with respect to\nconsistent\n(non-locking) reads: Each consistent read, even within the\nsame\ntransaction, sets and reads its own fresh snapshot. See\nhttp://dev.mysql.com/doc/refman/en/innodb-consistent-read.html.\n \nFor locking reads (SELECT with FOR UPDATE\nor LOCK IN SHARE MODE), InnoDB locks only index records, not\nthe gaps before them, and thus allows the free insertion of\nnew records next to\nlocked records. For UPDATE and DELETE\nstatements, locking depends on whether the statement uses a\nunique index with a\nunique search condition (such as WHERE id = 100), or a\nrange-type search condition (such as WHERE id > 100). For a\nunique index with a unique search condition, InnoDB locks\nonly the index record\nfound, not the gap before it. For range-type searches,\nInnoDB locks the index\nrange scanned, using gap locks or next-key (gap plus\nindex-record) locks to\nblock insertions by other sessions into the gaps covered by\nthe range. This is\nnecessary because \"phantom rows\" must be blocked for MySQL\nreplication and\nrecovery to work.\n \nNote: Since MariaDB 5.1, if the READ COMMITTED isolation\nlevel is used or the innodb_locks_unsafe_for_binlog system\nvariable is enabled,\nthere is no InnoDB gap locking except for foreign-key\nconstraint checking and\nduplicate-key checking. Also, record locks for non-matching\nrows are released\nafter MariaDB has evaluated the WHERE condition. As of\nMariaDB/MySQL\n5.1, if you use READ COMMITTED or enable\ninnodb_locks_unsafe_for_binlog, you must use row-based\nbinary logging.\n \nREPEATABLE READ\n \nThis is the default isolation level for InnoDB. For\nconsistent reads,\nthere is an important difference from the READ COMMITTED\nisolation level: All consistent reads within the same\ntransaction read the\nsnapshot established by the first read. This convention\nmeans that if you issue\nseveral plain (non-locking) SELECT statements within the\nsame transaction, these SELECT statements are consistent\nalso with respect to each other. See\nhttp://dev.mysql.com/doc/refman/en/innodb-consistent-read.html.\n \nFor locking reads (SELECT with FOR UPDATE or LOCK IN SHARE\nMODE),\nUPDATE, and DELETE statements, locking depends on whether\nthe\nstatement uses a unique index with a unique search\ncondition, or a\nrange-type search condition. For a unique index with a\nunique search\ncondition, InnoDB locks only the index record found, not the\ngap\nbefore it. For other search conditions, InnoDB locks the\nindex range\nscanned, using gap locks or next-key (gap plus index-record)\nlocks to\nblock insertions by other sessions into the gaps covered by\nthe range.\n \nThis is the minimum isolation level for non-distributed XA\ntransactions.\n \nSERIALIZABLE\n \nThis level is like REPEATABLE READ, but InnoDB implicitly\nconverts all\nplain SELECT statements to SELECT ... LOCK IN SHARE MODE if\nautocommit\nis disabled. If autocommit is enabled, the SELECT is its own\ntransaction. It therefore is known to be read only and can\nbe\nserialized if performed as a consistent (non-locking) read\nand need\nnot block for other transactions. (This means that to force\na plain\nSELECT to block if other transactions have modified the\nselected rows,\nyou should disable autocommit.)\n \nDistributed XA transactions should always use this isolation\nlevel.\n \nAccess Mode\n \nThese clauses appeared in MariaDB 10.0.\n \nThe access mode specifies whether the transaction is allowed\nto write data or not. By default, transactions are in READ\nWRITE mode (see the tx_read_only system variable). READ ONLY\nmode allows the storage engine to apply optimizations that\ncannot be used for transactions which write data. The only\nexception to this rule is that read only transactions can\nperform DDL statements on temporary tables.\n \nIt is not permitted to specify both READ WRITE and READ ONLY\nin the same statement.\n \nREAD WRITE and READ ONLY can also be specified in the START\nTRANSACTION statement, in which case the specified mode is\nonly valid for one transaction.\n \nExamples\n-------- \nSET GLOBAL TRANSACTION ISOLATION LEVEL SERIALIZABLE;\n \nAttempting to set the isolation level within an existing\ntransaction without specifying GLOBAL or SESSION.\n \nSTART TRANSACTION;\n \nSET TRANSACTION ISOLATION LEVEL SERIALIZABLE;\nERROR 1568 (25001): Transaction characteristics can\'t be\nchanged while a transaction is in progress\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/set-transaction/', '', 'https://mariadb.com/kb/en/set-transaction/'),
(168, 'IS_USED_LOCK', 14, 'Syntax\n------ \nIS_USED_LOCK(str)\n \nDescription\n----------- \nChecks whether the lock named str is in use (that is,\nlocked). If so,\nit returns the connection identifier of the client that\nholds the\nlock. Otherwise, it returns NULL. str is case insensitive.\n \nIf the metadata_lock_info plugin is installed, the\nInformation Schema metadata_lock_info table contains\ninformation about locks of this kind (as well as metadata\nlocks).\n \nStatements using the IS_USED_LOCK() function are not safe\nfor replication.\n \n\n\nURL: https://mariadb.com/kb/en/is_used_lock/', '', 'https://mariadb.com/kb/en/is_used_lock/'),
(109, 'START SLAVE', 8, 'Syntax\n------ \nSTART SLAVE [\"connection_name\"] [thread_type [,\nthread_type] ... ]\nSTART SLAVE [\"connection_name\"] [SQL_THREAD] UNTIL \n MASTER_LOG_FILE = \'log_name\', MASTER_LOG_POS = log_pos\nSTART SLAVE [\"connection_name\"] [SQL_THREAD] UNTIL\n RELAY_LOG_FILE = \'log_name\', RELAY_LOG_POS = log_pos\nSTART SLAVE [\"connection_name\"] [SQL_THREAD] UNTIL\n MASTER_GTID_POS = \nSTART ALL SLAVES [thread_type [, thread_type]]\nthread_type: IO_THREAD | SQL_THREAD\n \nDescription\n----------- \nSTART SLAVE with no thread_type options starts both of the\nslave\nthreads (see replication). The I/O thread reads events from\nthe master server and stores\nthem in the relay log. The SQL thread reads events from the\nrelay log\nand executes them. START SLAVE requires the SUPER privilege.\n \nIf START SLAVE succeeds in starting the slave threads, it\nreturns\nwithout any error. However, even in that case, it might be\nthat the\nslave threads start and then later stop (for example,\nbecause they do\nnot manage to connect to the master or read its binary log,\nor some\nother problem). START SLAVE does not warn you about this.\nYou must\ncheck the slave\'s error log for error messages generated by\nthe slave\nthreads, or check that they are running satisfactorily with\nSHOW SLAVE\nSTATUS.\n \nSTART SLAVE UNTIL\n \nSTART SLAVE UNTIL refers to the SQL_THREAD slave position at\nwhich the SQL_THREAD replication will halt. If SQL_THREAD\nisn\'t specified both threads are started.\n \nSince version 10.0.2, START SLAVE UNTIL master_gtid_pos=xxx\nhas also been supported. See Global Transaction ID/START\nSLAVE UNTIL master_gtid_pos=xxx for more details.\n \nconnection_name\n \nThe connection_name option was added as part of multi-source\nreplication added in MariaDB 10.0\n \nIf there is only one nameless master, or the default master\n(as specified by the default_master_connection system\nvariable) is intended, connection_name can be omitted. If\nprovided, the START SLAVE statement will apply to the\nspecified master. connection_name is case-insensitive.\n \nSTART ALL SLAVES\n \nSTART ALL SLAVES starts all configured slaves (slaves with\nmaster_host not empty) that were not started before. It will\ngive a note for all started connections. You can check the\nnotes with SHOW WARNINGS.\n \n\n\nURL: https://mariadb.com/kb/en/start-slave/', '', 'https://mariadb.com/kb/en/start-slave/'),
(110, 'START TRANSACTION', 8, 'Syntax\n------ \nSTART TRANSACTION [transaction_property [,\ntransaction_property] ...] | BEGIN [WORK]\nCOMMIT [WORK] [AND [NO] CHAIN] [[NO] RELEASE]\nROLLBACK [WORK] [AND [NO] CHAIN] [[NO] RELEASE]\nSET autocommit = {0 | 1}\n \ntransaction_property:\n WITH CONSISTENT SNAPSHOT\n | READ WRITE\n | READ ONLY\n \nDescription\n----------- \nThe START TRANSACTION or BEGIN statement\nbegins a new transaction. COMMIT commits the current\ntransaction, making its changes permanent. ROLLBACK rolls\nback the current transaction, canceling its changes. The SET\nautocommit statement disables or enables the default\nautocommit mode for the current session.\n \nSTART TRANSACTION and SET autocommit = 1 implicitly commit\nthe current transaction, if any.\n \nThe optional WORK keyword is supported for\nCOMMIT and ROLLBACK, as are the\nCHAIN and RELEASE clauses.\nCHAIN and RELEASE can be used for\nadditional control over transaction completion. The value of\nthe\ncompletion_type system variable determines the default\ncompletion behavior.\n \nThe AND CHAIN clause causes a new transaction to begin as\nsoon as the current one ends, and the new transaction has\nthe same isolation\nlevel as the just-terminated transaction. The RELEASE clause\ncauses the server to disconnect the current client session\nafter terminating\nthe current transaction. Including the NO keyword suppresses\nCHAIN or RELEASE completion, which can be\nuseful if the completion_type system variable is set to\ncause chaining or release completion by default.\n \nAccess Mode\n \nThese clauses appeared in MariaDB 10.0.\n \nThe access mode specifies whether the transaction is allowed\nto write data or not. By default, transactions are in READ\nWRITE mode (see the tx_read_only system variable). READ ONLY\nmode allows the storage engine to apply optimizations that\ncannot be used for transactions which write data. The only\nexception to this rule is that read only transactions can\nperform DDL statements on temporary tables.\n \nIt is not permitted to specify both READ WRITE and READ ONLY\nin the same statement.\n \nREAD WRITE and READ ONLY can also be specified in the SET\nTRANSACTION statement, in which case the specified mode is\nvalid for all sessions, or for all subsequent transaction\nused by the current session.\n \nautocommit\n \nBy default, MariaDB runs with autocommit mode enabled. This\nmeans that as soon as you execute a statement that updates\n(modifies) a table, MariaDB stores the update on disk to\nmake it permanent. To disable autocommit mode, use the\nfollowing statement:\n \nSET autocommit=0;\n \nAfter disabling autocommit mode by setting the autocommit\nvariable to zero, changes to transaction-safe tables (such\nas those for InnoDB or\nNDBCLUSTER) are not made permanent immediately. You must use\nCOMMIT to store your changes to disk or ROLLBACK to ignore\nthe changes.\n \nTo disable autocommit mode for a single series of\nstatements, use the START TRANSACTION statement.\n \nDDL Statements\n \nDDL statements (CREATE, ALTER, DROP) and administrative\nstatements (FLUSH, RESET, OPTIMIZE, ANALYZE, CHECK, REPAIR,\nCACHE INDEX), and LOAD DATA INFILE, cause an implicit COMMIT\nand start a new transaction. An exception to this rule are\nthe DDL that operate on temporary tables: you can CREATE,\nALTER and DROP them without causing any COMMIT, but those\nactions cannot be rolled back. This means that if you call\nROLLBACK, the temporary tables you created in the\ntransaction will remain, while the rest of the transaction\nwill be rolled back.\n \nTransactions cannot be used in Stored Functions or Triggers.\nIn Stored Procedures and Events BEGIN is not allowed, so you\nshould use START TRANSACTION instead.\n \nA transaction acquires a metadata lock on every table it\naccesses to prevent other connections from altering their\nstructure. The lock is released at the end of the\ntransaction. This happens even with non-transactional\nstorage engines (like MEMORY or CONNECT), so it makes sense\nto use transactions with non-transactional tables.\n \nin_transaction\n \nThe in_transaction system variable appeared in MariaDB 5.3.\n \nIt is a session-only, read-only variable that returns 1\ninside a transaction, and 0 if not in a transaction.\n \nWITH CONSISTENT SNAPSHOT\n \nThe WITH CONSISTENT SNAPSHOT option starts a consistent read\nfor storage engines such as XtraDB and InnoDB that can do\nso, the same as if a START TRANSACTION followed by a SELECT\nfrom any InnoDB table was issued. \n \nMariaDB 5.3 introduced enhancements to this feature. See\nEnhancements for START TRANSACTION WITH CONSISTENT SNAPSHOT.\n \nExamples\n-------- \nSTART TRANSACTION;\n \nSELECT @A:=SUM(salary) FROM table1 WHERE type=1;\n \nUPDATE table2 SET summary=@A WHERE type=1;\n \nCOMMIT;\n \n\n\nURL: https://mariadb.com/kb/en/start-transaction/', '', 'https://mariadb.com/kb/en/start-transaction/'),
(171, 'NAME_CONST', 14, 'Syntax\n------ \nNAME_CONST(name,value)\n \nDescription\n----------- \nReturns the given value. When used to produce a result set\ncolumn,\n NAME_CONST() causes the column to have the given name. The\narguments should be constants.\n \nThis function is used internally when replicating stored\nprocedures. It makes little sense to use it explicitly in\nSQL statements, and it was not supposed to be used like\nthat.\n \nSELECT NAME_CONST(\'myname\', 14);\n+--------+\n| myname |\n+--------+\n| 14 |\n+--------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/name_const/', '', 'https://mariadb.com/kb/en/name_const/'),
(111, 'STOP SLAVE', 8, 'Syntax\n------ \nSTOP SLAVE [\"connection_name\"] [thread_type [,\nthread_type] ... ]\n \nSTOP ALL SLAVES [thread_type [, thread_type]]\n \nthread_type: IO_THREAD | SQL_THREAD\n \nDescription\n----------- \nStops the slave threads. STOP SLAVE requires the SUPER\nprivilege.\n \nLike START SLAVE, this statement may be used with the\nIO_THREAD and\nSQL_THREAD options to name the thread or threads to be\nstopped. In almost all cases, one never need to use the\nthread_type options.\n \nSTOP SLAVE waits until any current replication event group\naffecting\none or more non-transactional tables has finished executing\n(if there\nis any such replication group), or until the user issues a\nKILL QUERY or KILL CONNECTION statement.\n \nNote that STOP SLAVE doesn\'t delete the connection\npermanently. Next time you execute START SLAVE or the\nMariaDB server restarts, the slave connection is restored\nwith it\'s original arguments. If you want to delete a\nconnection, you should execute RESET SLAVE.\n \nSTOP ALL SLAVES\n \nSTOP ALL SLAVES stops all your running slaves. It will give\nyou a note for every stopped connection. You can check the\nnotes with SHOW WARNINGS.\n \nconnection_name\n \nThe connection_name option was added as part of multi-source\nreplication added in MariaDB 10.0\n \nIf there is only one nameless master, or the default master\n(as specified by the default_master_connection system\nvariable) is intended, connection_name can be omitted. If\nprovided, the STOP SLAVE statement will apply to the\nspecified master. connection_name is case-insensitive.\n \n\n\nURL: https://mariadb.com/kb/en/stop-slave/', '', 'https://mariadb.com/kb/en/stop-slave/'),
(112, 'Transaction Timeouts', 8, 'MariaDB has always had the wait_timeout and\ninteractive_timeout settings, which close connections after\na certain period of inactivity.\n \nHowever, these are by default set to a long wait period. In\nsituations where transactions may be started, but not\ncommitted or rolled back, more granular control and a\nshorter timeout may be desirable so as to avoid locks being\nheld for too long.\n \nMariaDB 10.3 introduced three new variables to handle this\nsituation.\nidle_transaction_timeout (all transactions)\nidle_write_transaction_timeout (write transactions - called\nidle_readwrite_transaction_timeout until MariaDB 10.3.2)\nidle_readonly_transaction_timeout (read transactions)\n \nThese accept a time in seconds to time out, by closing the\nconnection, transactions that are idle for longer than this\nperiod. By default all are set to zero, or no timeout.\n \nidle_transaction_timeout affects all transactions,\nidle_write_transaction_timeout affects write transactions\nonly and idle_readonly_transaction_timeout affects read\ntransactions only. The latter two variables work\nindependently. However, if either is set along with\nidle_transaction_timeout, the settings for\nidle_write_transaction_timeout or\nidle_readonly_transaction_timeout will take precedence.\n \nExamples\n-------- \nSET SESSION idle_transaction_timeout=2;\n \nBEGIN;\n \nSELECT * FROM t;\n \nEmpty set (0.000 sec)\n## wait 3 seconds\nSELECT * FROM t;\n \nERROR 2006 (HY000): MySQL server has gone away\n \nSET SESSION idle_write_transaction_timeout=2;\n \nBEGIN;\n \nSELECT * FROM t;\n \nEmpty set (0.000 sec)\n## wait 3 seconds\nSELECT * FROM t;\n \nEmpty set (0.000 sec)\nINSERT INTO t VALUES(1);\n## wait 3 seconds\nSELECT * FROM t;\n \nERROR 2006 (HY000): MySQL server has gone away\n \nSET SESSION idle_transaction_timeout=2, SESSION\nidle_readonly_transaction_timeout=10;\n \nBEGIN;\n \nSELECT * FROM t;\n \nEmpty set (0.000 sec)\n ## wait 3 seconds\nSELECT * FROM t;\n \nEmpty set (0.000 sec)\n## wait 11 seconds\nSELECT * FROM t;\n \nERROR 2006 (HY000): MySQL server has gone away\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/transaction-timeouts/', '', 'https://mariadb.com/kb/en/transaction-timeouts/'),
(114, 'WAIT and NOWAIT', 8, 'MariaDB 10.3.0 introduced extended syntax so that it is\npossible to set innodb_lock_wait_timeout and\nlock_wait_timeout for the following statements:\n \nSyntax\n------ \nALTER TABLE tbl_name [WAIT n|NOWAIT] ...\nCREATE ... INDEX ON tbl_name (index_col_name, ...) [WAIT\nn|NOWAIT] ...\nDROP INDEX ... [WAIT n|NOWAIT]\nDROP TABLE tbl_name [WAIT n|NOWAIT] ...\nLOCK TABLE ... [WAIT n|NOWAIT]\nOPTIMIZE TABLE tbl_name [WAIT n|NOWAIT]\nRENAME TABLE tbl_name [WAIT n|NOWAIT] ...\nSELECT ... FOR UPDATE [WAIT n|NOWAIT]\nSELECT ... LOCK IN SHARE MODE [WAIT n|NOWAIT]\nTRUNCATE TABLE tbl_name [WAIT n|NOWAIT]\n \nDescription\n----------- \nThe lock wait timeout can be explicitly set in the statement\nby using either WAIT n (to set the wait in seconds) or\nNOWAIT, in which case the statement will immediately fail if\nthe lock cannot be obtained. WAIT 0 is equivalent to NOWAIT.\n \n\n\nURL: https://mariadb.com/kb/en/wait-and-nowait/', '', 'https://mariadb.com/kb/en/wait-and-nowait/'),
(116, 'Account Locking', 10, 'Account locking was introduced in MariaDB 10.4.2.\n \nDescription\n----------- \nAccount locking permits privileged administrators to\nlock/unlock user accounts. No new client connections will be\npermitted if an account is locked (existing connections are\nnot affected).\n \nUser accounts can be locked at creation, with the CREATE\nUSER statement, or modified after creation with the ALTER\nUSER statement. For example:\n \nCREATE USER \'lorin\'@\'localhost\' ACCOUNT LOCK;\n \nor\n \nALTER USER \'marijn\'@\'localhost\' ACCOUNT LOCK;\n \nThe server will return an ER_ACCOUNT_HAS_BEEN_LOCKED error\nwhen locked users attempt to connect:\n \nmysql -ulorin\n ERROR 4151 (HY000): Access denied, this account is locked\n \nThe ALTER USER statement is also used to unlock a user:\n \nALTER USER \'lorin\'@\'localhost\' ACCOUNT UNLOCK;\n \nThe SHOW CREATE USER statement will show whether the account\nis locked:\n \nSHOW CREATE USER \'marijn\'@\'localhost\';\n \n+-----------------------------------------------+\n| CREATE USER for marijn@localhost |\n+-----------------------------------------------+\n| CREATE USER \'marijn\'@\'localhost\' ACCOUNT LOCK |\n+-----------------------------------------------+\n \nas well as querying the mysql.global_priv table:\n \nSELECT CONCAT(user, \'@\', host, \' => \',\nJSON_DETAILED(priv)) FROM mysql.global_priv \n WHERE user=\'marijn\';\n+--------------------------------------------------------------------------------------+\n| CONCAT(user, \'@\', host, \' => \', JSON_DETAILED(priv)) |\n+--------------------------------------------------------------------------------------+\n| marijn@localhost => {\n \"access\": 0,\n \"plugin\": \"mysql_native_password\",\n \"authentication_string\": \"\",\n \"account_locked\": true,\n \"password_last_changed\": 1558017158\n} |\n+--------------------------------------------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/account-locking/', '', 'https://mariadb.com/kb/en/account-locking/'),
(173, 'SLEEP', 14, 'Syntax\n------ \nSLEEP(duration)\n \nDescription\n----------- \nSleeps (pauses) for the number of seconds given by the\nduration argument, then\nreturns 0. If SLEEP() is interrupted, it\nreturns 1. The duration may have a fractional part given in\nmicroseconds.\n \nStatements using the SLEEP() function are not safe for\nreplication.\n \nExample\n \nSELECT SLEEP(5.5);\n+------------+\n| SLEEP(5.5) |\n+------------+\n| 0 |\n+------------+\n1 row in set (5.50 sec)\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/sleep/', '', 'https://mariadb.com/kb/en/sleep/'),
(175, 'UUID_SHORT', 14, 'Syntax\n------ \nUUID_SHORT()\n \nDescription\n----------- \nReturns a \"short\" universal identifier as a 64-bit\nunsigned integer (rather\nthan a string-form 128-bit identifier as returned by the\nUUID() function).\n \nThe value of UUID_SHORT() is guaranteed to be unique if the\nfollowing conditions hold:\nThe server_id of the current host is unique among your set\nof master and\n slave servers\nserver_id is between 0 and 255\nYou don\'t set back your system time for your server between\nmysqld restarts\nYou do not invoke UUID_SHORT() on average more than 16\n million times per second between mysqld restarts\n \nThe UUID_SHORT() return value is constructed this way:\n \n (server_id & 255) \n\nURL: https://mariadb.com/kb/en/uuid_short/', '', 'https://mariadb.com/kb/en/uuid_short/'),
(120, 'DROP USER', 10, 'Syntax\n------ \nDROP USER [IF EXISTS] user_name [, user_name] ...\n \nDescription\n----------- \nThe DROP USER statement removes one or more MariaDB\naccounts. It removes\nprivilege rows for the account from all grant tables. To use\nthis statement,\nyou must have the global CREATE USER privilege\nor the DELETE privilege for the mysql database.\nEach account is named using the same format as for the\nCREATE USER\nstatement; for example, \'jeffrey\'@\'localhost\'. If you\nspecify\nonly the user name part of the account name, a host name\npart of \'%\' is\nused. For additional information about specifying account\nnames, see\nCREATE USER.\n \nNote that, if you specify an account that is currently\nconnected, it will not\nbe deleted until the connection is closed. The connection\nwill not be\nautomatically closed.\n \nIf any of the specified user accounts do not exist, ERROR\n1396 (HY000)\nresults. If an error occurs, DROP USER will still drop the\naccounts that do\nnot result in an error. Only one error is produced for all\nusers which have not\nbeen dropped:\n \nERROR 1396 (HY000): Operation DROP USER failed for\n\'u1\'@\'%\',\'u2\'@\'%\'\n \nFailed CREATE or DROP operations, for both users and roles,\nproduce the\nsame error code.\n \nIF EXISTS\n \nThe IF EXISTS clause was added in MariaDB 10.1.3\n \nIf the IF EXISTS clause is used, MariaDB will return a note\ninstead of an error if the user does not exist.\n \nExamples\n-------- \nDROP USER bob;\n \nIF EXISTS:\n \nDROP USER bob;\n \nERROR 1396 (HY000): Operation DROP USER failed for\n\'bob\'@\'%\'\n \nDROP USER IF EXISTS bob;\n \nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n \nSHOW WARNINGS;\n \n+-------+------+---------------------------------------------+\n| Level | Code | Message |\n+-------+------+---------------------------------------------+\n| Note | 1974 | Can\'t drop user \'bob\'@\'%\'; it doesn\'t\nexist |\n+-------+------+---------------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/drop-user/', '', 'https://mariadb.com/kb/en/drop-user/'),
(122, 'User Password Expiry', 10, 'User password expiry was introduced in MariaDB 10.4.3.\n \nPassword expiry permits administrators to expire user\npasswords, either manually or automatically. \n \nSystem Variables\n \nThere are two system variables which affect password expiry:\ndefault_password_lifetime, which determines the amount of\ntime between requiring the user to change their password. 0,\nthe default, means automatic password expiry is not active.\n \nThe second variable, disconnect_on_expired_password\ndetermines whether a client is permitted to connect if their\npassword has expired, or whether they are permitted to\nconnect in sandbox mode, able to perform a limited subset of\nqueries related to resetting the password, in particular SET\nPASSWORD and SET.\n \nSetting a Password Expiry Limit for a User\n \nBesides automatic password expiry, as determined by\ndefault_password_lifetime, password expiry times can be set\non an individual user basis, overriding the global using the\nCREATE USER or ALTER USER statements, for example:\n \nCREATE USER \'monty\'@\'localhost\' PASSWORD EXPIRE INTERVAL\n120 DAY;\n \nALTER USER \'monty\'@\'localhost\' PASSWORD EXPIRE INTERVAL\n120 DAY;\n \nLimits can be disabled by use of the NEVER keyword, for\nexample:\n \nCREATE USER \'monty\'@\'localhost\' PASSWORD EXPIRE NEVER;\n \nALTER USER \'monty\'@\'localhost\' PASSWORD EXPIRE NEVER;\n \nA manually set limit can be restored the system default by\nuse of DEFAULT, for example:\n \nCREATE USER \'monty\'@\'localhost\' PASSWORD EXPIRE DEFAULT;\n \nALTER USER \'monty\'@\'localhost\' PASSWORD EXPIRE DEFAULT;\n \nSHOW CREATE USER\n \nThe SHOW CREATE USER statement will display information\nabout the password expiry status of the user. Unlike MySQL,\nit will not display if the user is unlocked, or if the\npassword expiry is set to default.\n \nCREATE USER \'monty\'@\'localhost\' PASSWORD EXPIRE INTERVAL\n120 DAY;\n \nCREATE USER \'konstantin\'@\'localhost\' PASSWORD EXPIRE\nNEVER;\n \nCREATE USER \'amse\'@\'localhost\' PASSWORD EXPIRE DEFAULT;\n \nSHOW CREATE USER \'monty\'@\'localhost\';\n \n+------------------------------------------------------------------+\n| CREATE USER for monty@localhost |\n+------------------------------------------------------------------+\n| CREATE USER \'monty\'@\'localhost\' PASSWORD EXPIRE\nINTERVAL 120 DAY |\n+------------------------------------------------------------------+\n \nSHOW CREATE USER \'konstantin\'@\'localhost\';\n \n+------------------------------------------------------------+\n| CREATE USER for konstantin@localhost |\n+------------------------------------------------------------+\n| CREATE USER \'konstantin\'@\'localhost\' PASSWORD EXPIRE\nNEVER |\n+------------------------------------------------------------+\n \nSHOW CREATE USER \'amse\'@\'localhost\';\n \n+--------------------------------+\n| CREATE USER for amse@localhost |\n+--------------------------------+\n| CREATE USER \'amse\'@\'localhost\' |\n+--------------------------------+\n \n--connect-expired-password Client Option\n \nThe mysql client --connect-expired-password option notifies\nthe server that the client is prepared to handle expired\npassword sandbox mode (even if the --batch option was\nspecified).\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/user-password-expiry/', '', 'https://mariadb.com/kb/en/user-password-expiry/'),
(177, '!', 15, 'Syntax\n------ \nNOT, !\n \nDescription\n----------- \nLogical NOT. Evaluates to 1 if the operand is 0, to 0 if the\noperand\nis non-zero, and NOT NULL returns NULL.\n \nBy default, the ! operator has a higher precedence. If the\nHIGH_NOT_PRECEDENCE SQL_MODE flag is set, NOT and ! have the\nsame precedence.\n \nExamples\n-------- \nSELECT NOT 10;\n \n+--------+\n| NOT 10 |\n+--------+\n| 0 |\n+--------+\n \nSELECT NOT 0;\n \n+-------+\n| NOT 0 |\n+-------+\n| 1 |\n+-------+\n \nSELECT NOT NULL;\n \n+----------+\n| NOT NULL |\n+----------+\n| NULL |\n+----------+\n \nSELECT ! (1+1);\n+---------+\n| ! (1+1) |\n+---------+\n| 0 |\n+---------+\n \nSELECT ! 1+1;\n \n+-------+\n| ! 1+1 |\n+-------+\n| 1 |\n+-------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/not/', '', 'https://mariadb.com/kb/en/not/'),
(178, '&amp;&amp;', 15, 'Syntax\n------ \nAND, &&\n \nDescription\n----------- \nLogical AND. Evaluates to 1 if all operands are non-zero and\nnot NULL,\nto 0 if one or more operands are 0, otherwise NULL is\nreturned.\n \nFor this operator, short-circuit evaluation can be used.\n \nExamples\n-------- \nSELECT 1 && 1;\n \n+--------+\n| 1 && 1 |\n+--------+\n| 1 |\n+--------+\n \nSELECT 1 && 0;\n \n+--------+\n| 1 && 0 |\n+--------+\n| 0 |\n+--------+\n \nSELECT 1 && NULL;\n \n+-----------+\n| 1 && NULL |\n+-----------+\n| NULL |\n+-----------+\n \nSELECT 0 && NULL;\n \n+-----------+\n| 0 && NULL |\n+-----------+\n| 0 |\n+-----------+\n \nSELECT NULL && 0;\n \n+-----------+\n| NULL && 0 |\n+-----------+\n| 0 |\n+-----------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/and/', '', 'https://mariadb.com/kb/en/and/'),
(180, 'XOR', 15, 'Syntax\n------ \nXOR\n \nDescription\n----------- \nXOR stands for eXclusive OR. Returns NULL if either operand\nis NULL. For non-NULL\noperands, evaluates to 1 if an odd number of operands is\nnon-zero,\notherwise 0 is returned.\n \nExamples\n-------- \nSELECT 1 XOR 1;\n \n+---------+\n| 1 XOR 1 |\n+---------+\n| 0 |\n+---------+\n \nSELECT 1 XOR 0;\n \n+---------+\n| 1 XOR 0 |\n+---------+\n| 1 |\n+---------+\n \nSELECT 1 XOR NULL;\n \n+------------+\n| 1 XOR NULL |\n+------------+\n| NULL |\n+------------+\n \nIn the following example, the right 1 XOR 1 is evaluated\nfirst, and returns 0. Then, 1 XOR 0 is evaluated, and 1 is\nreturned.\n \nSELECT 1 XOR 1 XOR 1;\n \n+---------------+\n| 1 XOR 1 XOR 1 |\n+---------------+\n| 1 |\n+---------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/xor/', '', 'https://mariadb.com/kb/en/xor/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(123, 'RENAME USER', 10, 'Syntax\n------ \nRENAME USER old_user TO new_user\n [, old_user TO new_user] ...\n \nDescription\n----------- \nThe RENAME USER statement renames existing MariaDB accounts.\nTo use it,\nyou must have the global CREATE USER privilege\nor the UPDATE privilege for the mysql database.\nEach account is named using the same format as for the\nCREATE USER\nstatement; for example, \'jeffrey\'@\'localhost\'.\nIf you specify only the user name part of the account name,\na host\nname part of \'%\' is used.\n \nIf any of the old user accounts do not exist or any of the\nnew user accounts already\nexist, ERROR 1396 (HY000) results. If an error occurs,\nRENAME USER\nwill still rename the accounts that do not result in an\nerror.\n \nExamples\n-------- \nCREATE USER \'donald\', \'mickey\';\n \nRENAME USER \'donald\' TO \'duck\'@\'localhost\', \'mickey\'\nTO \'mouse\'@\'localhost\';\n \n\n \n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/rename-user/', '', 'https://mariadb.com/kb/en/rename-user/'),
(124, 'REVOKE', 10, 'Privileges\n \nSyntax\n------ \nREVOKE \n priv_type [(column_list)]\n [, priv_type [(column_list)]] ...\n ON [object_type] priv_level\n FROM user [, user] ...\n \nREVOKE ALL PRIVILEGES, GRANT OPTION\n FROM user [, user] ...\n \nDescription\n----------- \nThe REVOKE statement enables system administrators to revoke\nprivileges (or roles - see section below) from MariaDB\naccounts. Each account is named using the same format\nas for the GRANT statement; for example,\n\'jeffrey\'@\'localhost\'. If you specify only the user name\npart\nof the account name, a host name part of \'%\' is used. For\ndetails on the levels at which privileges exist, the\nallowable\npriv_type and priv_level values, and the\nsyntax for specifying users and passwords, see GRANT.\n \nTo use the first REVOKE syntax, you must have the\nGRANT OPTION privilege, and you must have the privileges\nthat\nyou are revoking.\n \nTo revoke all privileges, use the second syntax, which drops\nall\nglobal, database, table, column, and routine privileges for\nthe named\nuser or users:\n \nREVOKE ALL PRIVILEGES, GRANT OPTION FROM user [, user] ...\n \nTo use this REVOKE syntax, you must have the global\nCREATE USER privilege or the\nUPDATE privilege for the mysql database. See\nGRANT.\n \nExamples\n-------- \nREVOKE SUPER ON *.* FROM \'alexander\'@\'localhost\';\n \nRoles\n \nRoles were introduced in MariaDB 10.0.5.\n \nSyntax\n------ \nREVOKE role [, role ...]\n FROM grantee [, grantee2 ... ]\n \nDescription\n----------- \nREVOKE is also used to remove a role from a user or another\nrole that it\'s previously been assigned to. If a role has\npreviously been set as a default role, REVOKE does not\nremove the record of the default role from the mysql.user\ntable. If the role is subsequently granted again, it will\nagain be the user\'s default. Use SET DEFAULT ROLE NONE to\nexplicitly remove this.\n \nBefore MariaDB 10.1.13, the REVOKE role statement was not\npermitted in prepared statements.\n \nExample\n \nREVOKE journalist FROM hulda\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/revoke/', '', 'https://mariadb.com/kb/en/revoke/'),
(127, 'CREATE ROLE', 10, 'Roles were introduced in MariaDB 10.0.5.\n \nSyntax\n------ \nCREATE [OR REPLACE] ROLE [IF NOT EXISTS] role \n [WITH ADMIN \n {CURRENT_USER | CURRENT_ROLE | user | role}]\n \nDescription\n----------- \nThe CREATE ROLE statement creates one or more MariaDB roles.\nTo\nuse it, you must have the global CREATE USER\nprivilege or the INSERT privilege for the mysql\ndatabase. For each account, CREATE ROLE creates a new row in\nthe\nmysql.user table that has no privileges, and with the\ncorresponding is_role field set to Y. It also creates a\nrecord in the\nmysql.roles_mapping table.\n \nIf any of the specified roles already exist, ERROR 1396\n(HY000) results. If\nan error occurs, CREATE ROLE will still create the roles\nthat do not result\nin an error. The maximum length for a role is 128\ncharacters. Role names can be\nquoted, as explained in the Identifier names page. Only\none error is produced for all roles which have not been\ncreated:\n \nERROR 1396 (HY000): Operation CREATE ROLE failed for\n\'a\',\'b\',\'c\'\n \nFailed CREATE or DROP operations, for both users and roles,\nproduce the\nsame error code.\n \nPUBLIC and NONE are reserved, and cannot be used as role\nnames.\n \nBefore MariaDB 10.1.13, the CREATE ROLE statement was not\npermitted in prepared statements.\n \nFor valid identifiers to use as role names, see Identifier\nNames.\n \nWITH ADMIN\n \nThe optional WITH ADMIN clause determines whether the\ncurrent user, the\ncurrent role or another user or role has use of the newly\ncreated role. If the\nclause is omitted, WITH ADMIN CURRENT_USER is treated as the\ndefault, which\nmeans that the current user will be able to GRANT this role\nto\nusers.\n \nOR REPLACE\n \nThe OR REPLACE clause was added in MariaDB 10.1.3\n \nIf the optional OR REPLACE clause is used, it acts as a\nshortcut for:\n \nDROP ROLE IF EXISTS name;\n \nCREATE ROLE name ...;\n \nIF NOT EXISTS\n \nThe IF NOT EXISTS clause was added in MariaDB 10.1.3\n \nWhen the IF NOT EXISTS clause is used, MariaDB will return a\nwarning instead of an error if the specified role already\nexists. Cannot be used together with the OR REPLACE clause.\n \nExamples\n-------- \nCREATE ROLE journalist;\n \nCREATE ROLE developer WITH ADMIN lorinda;\n \nThe OR REPLACE and IF NOT EXISTS clauses:\n \nCREATE ROLE journalist;\nERROR 1396 (HY000): Operation CREATE ROLE failed for\n\'journalist\'\n \nCREATE OR REPLACE ROLE journalist;\nQuery OK, 0 rows affected (0.00 sec)\n \nCREATE ROLE IF NOT EXISTS journalist;\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n \nSHOW WARNINGS;\n+-------+------+---------------------------------------------------+\n| Level | Code | Message |\n+-------+------+---------------------------------------------------+\n| Note | 1975 | Can\'t create role \'journalist\'; it\nalready exists |\n+-------+------+---------------------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/create-role/', '', 'https://mariadb.com/kb/en/create-role/'),
(182, 'Assignment Operator (:=)', 15, 'Syntax\n------ \nvar_name := expr\n \nDescription\n----------- \nAssignment operator for assigning a value. The value on the\nright is assigned to the variable on left.\n \nUnlike the = operator, := can always be used to assign a\nvalue to a variable.\n \nThis operator works with both user-defined variables and\nlocal variables.\n \nWhen assigning the same value to several variables,\nLAST_VALUE() can be useful.\n \nExamples\n-------- \n SELECT @x := 10;\n \n+----------+\n| @x := 10 |\n+----------+\n| 10 |\n+----------+\n \nSELECT @x, @y := @x;\n \n+------+----------+\n| @x | @y := @x |\n+------+----------+\n| 10 | 10 |\n+------+----------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/assignment-operator/', '', 'https://mariadb.com/kb/en/assignment-operator/'),
(189, 'GROUP_CONCAT', 16, 'Syntax\n------ \nGROUP_CONCAT(expr)\n \nDescription\n----------- \nThis function returns a string result with the concatenated\nnon-NULL\nvalues from a group. It returns NULL if there are no\nnon-NULL values.\n \nThe maximum returned length in bytes is determined by the\ngroup_concat_max_len server system variable, which defaults\nto 1M (>= MariaDB 10.2.4) or 1K (\n\nURL: https://mariadb.com/kb/en/group_concat/', '', 'https://mariadb.com/kb/en/group_concat/'),
(195, 'STDDEV_SAMP', 16, 'Syntax\n------ \nSTDDEV_SAMP(expr)\n \nDescription\n----------- \nReturns the sample standard deviation of expr (the square\nroot of VAR_SAMP()).\n \nIt is an aggregate function, and so can be used with the\nGROUP BY clause.\n \nFrom MariaDB 10.2.2, STDDEV_SAMP() can be used as a window\nfunction.\n \nSTDDEV_SAMP() returns NULL if there were no matching rows.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/stddev_samp/', '', 'https://mariadb.com/kb/en/stddev_samp/'),
(125, 'SET PASSWORD', 10, 'Syntax\n------ \nSET PASSWORD [FOR user] =\n {\n PASSWORD(\'some password\')\n | OLD_PASSWORD(\'some password\')\n | \'encrypted password\'\n }\n \nDescription\n----------- \nThe SET PASSWORD statement assigns a password to an existing\nMariaDB user\naccount.\n \nIf the password is specified using the PASSWORD() or\nOLD_PASSWORD()\nfunction, the literal text of the password should be given.\nIf the\npassword is specified without using either function, the\npassword\nshould be the already-encrypted password value as returned\nby\nPASSWORD().\n \nOLD_PASSWORD() should only be used if your MariaDB/MySQL\nclients are very old (< 4.0.0).\n \nWith no FOR clause, this statement sets the password for the\ncurrent\nuser. Any client that has connected to the server using a\nnon-anonymous\naccount can change the password for that account.\n \nWith a FOR clause, this statement sets the password for a\nspecific\naccount on the current server host. Only clients that have\nthe UPDATE\nprivilege for the mysql database can do this. The user value\nshould be\ngiven in user_name@host_name format, where user_name and\nhost_name are\nexactly as they are listed in the User and Host columns of\nthe\nmysql.user table entry. \n \nThe argument to PASSWORD() and the password given to MariaDB\nclients can be of arbitrary length.\n \nAuthentication Plugin Support\n \nIn MariaDB 10.4 and later, SET PASSWORD (with or without\nPASSWORD()) works for accounts authenticated via any\nauthentication plugin that supports passwords stored in the\nmysql.global_priv table.\n \nThe ed25519, mysql_native_password, and mysql_old_password\nauthentication plugins store passwords in the\nmysql.global_priv table.\n \nIf you run SET PASSWORD on an account that authenticates\nwith one of these authentication plugins that stores\npasswords in the mysql.global_priv table, then the\nPASSWORD() function is evaluated by the specific\nauthentication plugin used by the account. The\nauthentication plugin hashes the password with a method that\nis compatible with that specific authentication plugin.\n \nThe unix_socket, named_pipe, gssapi, and pam authentication\nplugins do not store passwords in the mysql.global_priv\ntable. These authentication plugins rely on other methods to\nauthenticate the user.\n \nIf you attempt to run SET PASSWORD on an account that\nauthenticates with one of these authentication plugins that\ndoesn\'t store a password in the mysql.global_priv table,\nthen MariaDB Server will raise a warning like the following:\n \nSET PASSWORD is ignored for users authenticating via\nunix_socket plugin\n \nSee Authentication from MariaDB 10.4 for an overview of\nauthentication changes in MariaDB 10.4.\n \nMariaDB until 10.3\n \nIn MariaDB 10.3 and before, SET PASSWORD (with or without\nPASSWORD()) only works for accounts authenticated via\nmysql_native_password or mysql_old_password authentication\nplugins\n \nPasswordless User Accounts\n \nUser accounts do not always require passwords to login.\n \nThe unix_socket , named_pipe and gssapi authentication\nplugins do not require a password to authenticate the user.\n \nThe pam authentication plugin may or may not require a\npassword to authenticate the user, depending on the specific\nconfiguration.\n \nThe mysql_native_password and mysql_old_password\nauthentication plugins require passwords for authentication,\nbut the password can be blank. In that case, no password is\nrequired.\n \nIf you provide a password while attempting to log into the\nserver as an account that doesn\'t require a password, then\nMariaDB server will simply ignore the password.\n \nIn MariaDB 10.4 and later, a user account can be defined to\nuse multiple authentication plugins in a specific order of\npreference. This specific scenario may be more noticeable in\nthese versions, since an account could be associated with\nsome authentication plugins that require a password, and\nsome that do not.\n \nExample\n \nFor example, if you had an entry with User and\nHost column values of \'bob\' and \n\'%.loc.gov\', you would write the\nstatement like this:\n \nSET PASSWORD FOR \'bob\'@\'%.loc.gov\' =\nPASSWORD(\'newpass\');\n \n\n\nURL: https://mariadb.com/kb/en/set-password/', '', 'https://mariadb.com/kb/en/set-password/'),
(128, 'DROP ROLE', 10, 'Roles were introduced in MariaDB 10.0.5.\n \nSyntax\n------ \nDROP ROLE [IF EXISTS] role_name [,role_name ...]\n \nDescription\n----------- \nThe DROP ROLE statement removes one or more MariaDB roles.\nTo use this\nstatement, you must have the global CREATE USER privilege or\nthe DELETE privilege for the mysql database.\n \nDROP ROLE does not disable roles for connections which\nselected them with SET ROLE. If a role has previously been\nset as a default role, DROP ROLE does not remove the record\nof the default role from the mysql.user table. If the role\nis subsequently recreated and granted, it will again be the\nuser\'s default. Use SET DEFAULT ROLE NONE to explicitly\nremove this.\n \nIf any of the specified user accounts do not exist, ERROR\n1396 (HY000)\nresults. If an error occurs, DROP ROLE will still drop the\nroles that\ndo not result in an error. Only one error is produced for\nall roles which have not been dropped:\n \nERROR 1396 (HY000): Operation DROP ROLE failed for\n\'a\',\'b\',\'c\'\n \nFailed CREATE or DROP operations, for both users and roles,\nproduce the same error code.\n \nBefore MariaDB 10.1.13, the DROP ROLE statement was not\npermitted in prepared statements.\n \nIF EXISTS\n \nThe IF EXISTS clause was added in MariaDB 10.1.3\n \nIf the IF EXISTS clause is used, MariaDB will return a\nwarning instead of an error if the role does not exist.\n \nExamples\n-------- \nDROP ROLE journalist;\n \nThe same thing using the optional IF EXISTS clause:\n \nDROP ROLE journalist;\n \nERROR 1396 (HY000): Operation DROP ROLE failed for\n\'journalist\'\n \nDROP ROLE IF EXISTS journalist;\n \nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n \nNote (Code 1975): Can\'t drop role \'journalist\'; it\ndoesn\'t exist\n \n\n\nURL: https://mariadb.com/kb/en/drop-role/', '', 'https://mariadb.com/kb/en/drop-role/'),
(200, 'BENCHMARK', 17, 'Syntax\n------ \nBENCHMARK(count,expr)\n \nDescription\n----------- \nThe BENCHMARK() function executes the expression expr\nrepeatedly count\ntimes. It may be used to time how quickly MariaDB processes\nthe\nexpression. The result value is always 0. The intended use\nis from\nwithin the mysql client, which reports query execution\ntimes.\n \nExamples\n-------- \nSELECT BENCHMARK(1000000,ENCODE(\'hello\',\'goodbye\'));\n+----------------------------------------------+\n| BENCHMARK(1000000,ENCODE(\'hello\',\'goodbye\')) |\n+----------------------------------------------+\n| 0 |\n+----------------------------------------------+\n1 row in set (0.21 sec)\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/benchmark/', '', 'https://mariadb.com/kb/en/benchmark/'),
(201, 'BINLOG_GTID_POS', 17, 'From version 10.0.2, MariaDB supports global transaction IDs\nfor replication.\n \nSyntax\n------ \nBINLOG_GTID_POS(binlog_filename,binlog_offset)\n \nDescription\n----------- \nThe BINLOG_GTID_POS() function takes as input an old-style\nbinary log position in the form of a file name and a file\noffset. It looks up the position in the current binlog, and\nreturns a string representation of the corresponding GTID\nposition. If the position is not found in the current\nbinlog, NULL is returned.\n \nExamples\n-------- \nSELECT BINLOG_GTID_POS(\"master-bin.000001\", 600);\n \n\n\nURL: https://mariadb.com/kb/en/binlog_gtid_pos/', '', 'https://mariadb.com/kb/en/binlog_gtid_pos/'),
(204, 'COLLATION', 17, 'Syntax\n------ \nCOLLATION(str)\n \nDescription\n----------- \nReturns the collation of the string argument. If str is not\na string, it is considered as a binary string (so the\nfunction returns \'binary\'). This applies to NULL, too. The\nreturn value is a string in the utf8 character set.\n \nSee Character Sets and Collations.\n \nExamples\n-------- \nSELECT COLLATION(\'abc\');\n+-------------------+\n| COLLATION(\'abc\') |\n+-------------------+\n| latin1_swedish_ci |\n+-------------------+\n \nSELECT COLLATION(_utf8\'abc\');\n+-----------------------+\n| COLLATION(_utf8\'abc\') |\n+-----------------------+\n| utf8_general_ci |\n+-----------------------+\n \n\n\nURL: https://mariadb.com/kb/en/collation/', '', 'https://mariadb.com/kb/en/collation/'),
(126, 'Roles Overview', 10, 'Roles were introduced in MariaDB 10.0.5.\n \nDescription\n----------- \nA role bundles a number of privileges together. It assists\nlarger organizations where, typically, a number of users\nwould have the same privileges, and, previously, the only\nway to change the privileges for a group of users was by\nchanging each user\'s privileges individually. \n \nAlternatively, multiple external users could have been\nassigned the same user, and there would have been no way to\nsee which actual user was responsible for which action.\n \nWith roles, managing this is easy. For example, there could\nbe a number of users assigned to a journalist role, with\nidentical privileges. Changing the privileges for all the\njournalists is a matter of simply changing the role\'s\nprivileges, while the individual user is still linked with\nany changes that take place.\n \nRoles are created with the CREATE ROLE statement, and\ndropped with the DROP ROLE statement. Roles are then\nassigned to a user with an extension to the GRANT statement,\nwhile privileges are assigned to a role in the regular way\nwith GRANT. Similarly, the REVOKE statement can be used to\nboth revoke a role from a user, or revoke a privilege from a\nrole.\n \nOnce a user has connected, he can obtain all privileges\nassociated with a role by setting a role with the SET ROLE\nstatement. The CURRENT_ROLE function returns the currently\nset role for the session, if any.\n \nOnly roles granted directly to a user can be set, roles\ngranted to other roles cannot. Instead the privileges\ngranted to a role, which is, in turn, granted to another\nrole (grantee), will be immediately available to any user\nwho sets this second grantee role.\n \nRoles were implemented as a GSoC 2013 project by Vicentiu\nCiorbaru. \n \nThe SET DEFAULT ROLE statement allows one to set a default\nrole for a user. A default role is automatically enabled\nwhen a user connects (an implicit SET ROLE statement is\nexecuted immediately after a connection is established).\n \nSystem Tables\n \nInformation about roles and who they\'ve been granted to can\nbe found in the Information Schema APPLICABLE_ROLES table as\nwell as the mysql.ROLES_MAPPING table.\n \nThe Information Schema ENABLED_ROLES table shows the enabled\nroles for the current session.\n \nExamples\n-------- \nCreating a role and granting a privilege:\n \nCREATE ROLE journalist;\n \nGRANT SHOW DATABASES ON *.* TO journalist;\n \nGRANT journalist to hulda;\n \nNote, that hulda has no SHOW DATABASES privilege, even\nthough she was granted the journalist role. She needs to set\nthe role first:\n \nSHOW DATABASES;\n \n+--------------------+\n| Database |\n+--------------------+\n| information_schema |\n+--------------------+\n \nSELECT CURRENT_ROLE;\n \n+--------------+\n| CURRENT_ROLE |\n+--------------+\n| NULL |\n+--------------+\n \nSET ROLE journalist;\n \nSELECT CURRENT_ROLE;\n \n+--------------+\n| CURRENT_ROLE |\n+--------------+\n| journalist |\n+--------------+\n \nSHOW DATABASES;\n \n+--------------------+\n| Database |\n+--------------------+\n| ... |\n| information_schema |\n| mysql |\n| performance_schema |\n| test |\n| ... |\n+--------------------+\n \nSET ROLE NONE;\n \nRoles can be granted to roles:\n \nCREATE ROLE writer;\n \nGRANT SELECT ON data.* TO writer;\n \nGRANT writer TO journalist;\n \nBut one does not need to set a role granted to a role. For\nexample, hulda will automatically get all writer privileges\nwhen she sets the journalist role:\n \nSELECT CURRENT_ROLE;\n \n+--------------+\n| CURRENT_ROLE |\n+--------------+\n| NULL |\n+--------------+\n \nSHOW TABLES FROM data;\n \nEmpty set (0.01 sec)\n \nSET ROLE journalist;\n \nSELECT CURRENT_ROLE;\n \n+--------------+\n| CURRENT_ROLE |\n+--------------+\n| journalist |\n+--------------+\n \nSHOW TABLES FROM data;\n \n+------------------------------+\n| Tables_in_data |\n+------------------------------+\n| set1 |\n| ... |\n+------------------------------+\n \nRoles and Views (and Stored Routines)\n \nWhen a user sets a role, he, in a sense, has two identities\nwith two associated sets of privileges.\nBut a view (or a stored routine) can have only one definer.\nSo, when a view (or a stored routine) is created with the\nSQL SECURITY DEFINER, one can specify whether the definer\nshould be CURRENT_USER (and the view will have none of the\nprivileges of the user\'s role) or CURRENT_ROLE (in this\ncase, the view will use role\'s privileges, but none of the\nuser\'s privileges). As a result, sometimes one can create a\nview that is impossible to use.\n \nCREATE ROLE r1;\n \nGRANT ALL ON db1.* TO r1;\n \nGRANT r1 TO foo@localhost;\n \nGRANT ALL ON db.* TO foo@localhost;\n \nSELECT CURRENT_USER\n+---------------+\n| current_user |\n+---------------+\n| foo@localhost |\n+---------------+\n \nSET ROLE r1;\n \nCREATE TABLE db1.t1 (i int);\n \nCREATE VIEW db.v1 AS SELECT * FROM db1.t1;\n \nSHOW CREATE VIEW db.v1;\n \n+------+------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+\n| View | Create View | character_set_client |\ncollation_connection |\n+------+------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+\n| v1 | CREATE ALGORITHM=UNDEFINED DEFINER=`foo`@`localhost`\nSQL SECURITY DEFINER VIEW `db`.`v1` AS SELECT `db1`.`t1`.`i`\nAS `i` from `db1`.`t1` | utf8 | utf8_general_ci |\n+------+------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+\n \nCREATE DEFINER=CURRENT_ROLE VIEW db.v2 AS SELECT * FROM\ndb1.t1;\n \nSHOW CREATE VIEW db.b2;\n \n+------+-----------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+\n| View | Create View | character_set_client |\ncollation_connection |\n+------+-----------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+\n| v2 | CREATE ALGORITHM=UNDEFINED DEFINER=`r1` SQL SECURITY\nDEFINER VIEW `db`.`v2` AS select `db1`.`t1`.`a` AS `a` from\n`db1`.`t1` | utf8 | utf8_general_ci |\n+------+-----------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+\n \nOther Resources\n \nRoles Review by Peter Gulutzan\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/roles_overview/', '', 'https://mariadb.com/kb/en/roles_overview/'),
(205, 'CONNECTION_ID', 17, 'Syntax\n------ \nCONNECTION_ID()\n \nDescription\n----------- \nReturns the connection ID (thread ID) for the connection.\nEvery\nthread (including events) has an ID that is unique among the\nset of currently\nconnected clients.\n \nUntil MariaDB 10.3.1, returns MYSQL_TYPE_LONGLONG, or\nbigint(10), in all cases. From MariaDB 10.3.1, returns\nMYSQL_TYPE_LONG, or int(10), when the result would fit\nwithin 32-bits.\n \nExamples\n-------- \nSELECT CONNECTION_ID();\n+-----------------+\n| CONNECTION_ID() |\n+-----------------+\n| 3 |\n+-----------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/connection_id/', '', 'https://mariadb.com/kb/en/connection_id/'),
(216, 'SCHEMA', 17, 'Syntax\n------ \nSCHEMA()\n \nDescription\n----------- \nThis function is a synonym for DATABASE().\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/schema/', '', 'https://mariadb.com/kb/en/schema/'),
(129, 'SET ROLE', 10, 'Roles were introduced in MariaDB 10.0.5.\n \nSyntax\n------ \nSET ROLE { role | NONE }\n \nDescription\n----------- \nThe SET ROLE statement enables a role, along with all of its\nassociated permissions, for the current session. To unset a\nrole, use NONE .\n \nIf a role that doesn\'t exist, or to which the user has not\nbeen assigned, is specified, an ERROR 1959 (OP000): Invalid\nrole specification error occurs.\n \nFrom MariaDB 10.1.1, an automatic SET ROLE is implicitly\nperformed when a user connects if that user has been\nassigned a default role. See SET DEFAULT ROLE.\n \nExample\n \nSELECT CURRENT_ROLE;\n \n+--------------+\n| CURRENT_ROLE |\n+--------------+\n| NULL |\n+--------------+\n \nSET ROLE staff;\n \nSELECT CURRENT_ROLE;\n \n+--------------+\n| CURRENT_ROLE |\n+--------------+\n| staff |\n+--------------+\n \nSET ROLE NONE;\n \nQuery OK, 0 rows affected (0.00 sec)\n \nSELECT CURRENT_ROLE();\n+----------------+\n| CURRENT_ROLE() |\n+----------------+\n| NULL |\n+----------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/set-role/', '', 'https://mariadb.com/kb/en/set-role/'),
(130, 'SET DEFAULT ROLE', 10, 'Default roles were implemented in MariaDB 10.1.1.\n \nSyntax\n------ \nSET DEFAULT ROLE { role | NONE } [ FOR user@host ]\n \nDescription\n----------- \nThe SET DEFAULT ROLE statement sets a default role for a\nspecified (or current) user. A default role is automatically\nenabled when a user connects (an implicit SET ROLE statement\nis executed immediately after a connection is established).\n \nTo be able to set a role as a default, one needs the\nprivileges to enable this role (if you cannot do SET ROLE X,\nyou won\'t be able to do SET DEFAULT ROLE X). To set a\ndefault role for another user one needs to have write access\nto the mysql database.\n \nTo remove a user\'s default role, use SET DEFAULT ROLE NONE\n[ FOR user@host ]. The record of the default role is not\nremoved if the role is dropped or revoked, so if the role is\nsubsequently re-created or granted, it will again be the\nuser\'s default role.\n \nThe default role is stored in a new column in the mysql.user\ntable, and currently viewing this table is the only way to\nsee which role has been assigned to a user as the default. \n \nExamples\n-------- \nSetting a default role for the current user:\n \nSET DEFAULT ROLE journalist;\n \nRemoving a default role from the current user:\n \nSET DEFAULT ROLE NONE;\n \n\n \n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/set-default-role/', '', 'https://mariadb.com/kb/en/set-default-role/'),
(136, 'AES_ENCRYPT', 12, 'Syntax\n------ \nAES_ENCRYPT(str,key_str)\n \nDescription\n----------- \nAES_ENCRYPT() and AES_DECRYPT() allow encryption and\ndecryption of\ndata using the official AES (Advanced Encryption Standard)\nalgorithm,\npreviously known as \"Rijndael.\" Encoding with a 128-bit\nkey length is\nused, but you can extend it up to 256 bits by modifying the\nsource. We\nchose 128 bits because it is much faster and it is secure\nenough for\nmost purposes.\n \nAES_ENCRYPT() encrypts a string str using the key key_str,\nand returns a binary string.\n \nAES_DECRYPT() decrypts the encrypted string and returns the\noriginal\nstring.\n \nThe input arguments may be any length. If either argument is\nNULL, the result of this function is also NULL.\n \nBecause AES is a block-level algorithm, padding is used to\nencode\nuneven length strings and so the result string length may be\ncalculated using this formula:\n \n16 x (trunc(string_length / 16) + 1)\n \nIf AES_DECRYPT() detects invalid data or incorrect padding,\nit returns\nNULL. However, it is possible for AES_DECRYPT() to return a\nnon-NULL\nvalue (possibly garbage) if the input data or the key is\ninvalid.\n \nExamples\n-------- \nINSERT INTO t VALUES\n(AES_ENCRYPT(\'text\',SHA2(\'password\',512)));\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/aes_encrypt/', '', 'https://mariadb.com/kb/en/aes_encrypt/'),
(137, 'COMPRESS', 12, 'Syntax\n------ \nCOMPRESS(string_to_compress)\n \nDescription\n----------- \nCompresses a string and returns the result as a binary\nstring. This\nfunction requires MariaDB to have been compiled with a\ncompression\nlibrary such as zlib. Otherwise, the return value is always\nNULL. The\ncompressed string can be uncompressed with UNCOMPRESS().\n \nThe have_compress server system variable indicates whether a\ncompression library is present. \n \nExamples\n-------- \nSELECT LENGTH(COMPRESS(REPEAT(\'a\',1000)));\n+------------------------------------+\n| LENGTH(COMPRESS(REPEAT(\'a\',1000))) |\n+------------------------------------+\n| 21 |\n+------------------------------------+\n \nSELECT LENGTH(COMPRESS(\'\'));\n+----------------------+\n| LENGTH(COMPRESS(\'\')) |\n+----------------------+\n| 0 |\n+----------------------+\n \nSELECT LENGTH(COMPRESS(\'a\'));\n+-----------------------+\n| LENGTH(COMPRESS(\'a\')) |\n+-----------------------+\n| 13 |\n+-----------------------+\n \nSELECT LENGTH(COMPRESS(REPEAT(\'a\',16)));\n+----------------------------------+\n| LENGTH(COMPRESS(REPEAT(\'a\',16))) |\n+----------------------------------+\n| 15 |\n+----------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/compress/', '', 'https://mariadb.com/kb/en/compress/'),
(217, 'SESSION_USER', 17, 'Syntax\n------ \nSESSION_USER()\n \nDescription\n----------- \nSESSION_USER() is a synonym for USER().\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/session_user/', '', 'https://mariadb.com/kb/en/session_user/'),
(218, 'SYSTEM_USER', 17, 'Syntax\n------ \nSYSTEM_USER()\n \nDescription\n----------- \nSYSTEM_USER() is a synonym for USER().\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/system_user/', '', 'https://mariadb.com/kb/en/system_user/'),
(222, '&lt;', 18, 'Syntax\n------ \n\n\nURL: https://mariadb.com/kb/en/less-than/', '', 'https://mariadb.com/kb/en/less-than/'),
(223, '&lt;=', 18, 'Syntax\n------ \n\n\nURL: https://mariadb.com/kb/en/less-than-or-equal/', '', 'https://mariadb.com/kb/en/less-than-or-equal/'),
(228, 'BETWEEN AND', 18, 'Syntax\n------ \nexpr BETWEEN min AND max\n \nDescription\n----------- \nIf expr is greater than or equal to min and expr is less\nthan or equal\nto max, BETWEEN returns 1, otherwise it returns 0. This is\nequivalent\nto the expression (min \n\nURL: https://mariadb.com/kb/en/between-and/', '', 'https://mariadb.com/kb/en/between-and/'),
(230, 'GREATEST', 18, 'Syntax\n------ \nGREATEST(value1,value2,...)\n \nDescription\n----------- \nWith two or more arguments, returns the largest\n(maximum-valued)\nargument. The arguments are compared using the same rules as\nfor\nLEAST().\n \nExamples\n-------- \nSELECT GREATEST(2,0);\n+---------------+\n| GREATEST(2,0) |\n+---------------+\n| 2 |\n+---------------+\n \nSELECT GREATEST(34.0,3.0,5.0,767.0);\n+------------------------------+\n| GREATEST(34.0,3.0,5.0,767.0) |\n+------------------------------+\n| 767.0 |\n+------------------------------+\n \nSELECT GREATEST(\'B\',\'A\',\'C\');\n+-----------------------+\n| GREATEST(\'B\',\'A\',\'C\') |\n+-----------------------+\n| C |\n+-----------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/greatest/', '', 'https://mariadb.com/kb/en/greatest/'),
(232, 'INTERVAL', 18, 'Syntax\n------ \nINTERVAL(N,N1,N2,N3,...)\n \nDescription\n----------- \nReturns the index of the last argument that is less than the\nfirst argument or is NULL. \n \nReturns 0 if N < N1, 1 if N < N2, 2 if N < N3 and so on or\n-1 if N is NULL. All\narguments are treated as integers. It is required that N1 <\nN2 < N3 \n\nURL: https://mariadb.com/kb/en/interval/', '', 'https://mariadb.com/kb/en/interval/'),
(235, 'IS NOT NULL', 18, 'Syntax\n------ \nIS NOT NULL\n \nDescription\n----------- \nTests whether a value is not NULL. See also NULL Values in\nMariaDB.\n \nExamples\n-------- \nSELECT 1 IS NOT NULL, 0 IS NOT NULL, NULL IS NOT NULL;\n+---------------+---------------+------------------+\n| 1 IS NOT NULL | 0 IS NOT NULL | NULL IS NOT NULL |\n+---------------+---------------+------------------+\n| 1 | 1 | 0 |\n+---------------+---------------+------------------+\n \n\n\nURL: https://mariadb.com/kb/en/is-not-null/', '', 'https://mariadb.com/kb/en/is-not-null/'),
(139, 'DES_DECRYPT', 12, 'Syntax\n------ \nDES_DECRYPT(crypt_str[,key_str])\n \nDescription\n----------- \nDecrypts a string encrypted with DES_ENCRYPT(). If an error\noccurs,\nthis function returns NULL.\n \nThis function works only if MariaDB has been configured with\nTLS\nsupport.\n \nIf no key_str argument is given, DES_DECRYPT() examines the\nfirst byte\nof the encrypted string to determine the DES key number that\nwas used\nto encrypt the original string, and then reads the key from\nthe DES\nkey file to decrypt the message. For this to work, the user\nmust have\nthe SUPER privilege. The key file can be specified with the\n--des-key-file server option.\n \nIf you pass this function a key_str argument, that string is\nused as\nthe key for decrypting the message.\n \nIf the crypt_str argument does not appear to be an encrypted\nstring,\nMariaDB returns the given crypt_str.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/des_decrypt/', '', 'https://mariadb.com/kb/en/des_decrypt/'),
(140, 'DES_ENCRYPT', 12, 'Syntax\n------ \nDES_ENCRYPT(str[,{key_num|key_str}])\n \nDescription\n----------- \nEncrypts the string with the given key using the Triple-DES\nalgorithm.\n \nThis function works only if MariaDB has been configured with\nTLS support.\n \nThe encryption key to use is chosen based on the second\nargument to\nDES_ENCRYPT(), if one was given. With no argument, the first\nkey from\nthe DES key file is used. With a key_num argument, the given\nkey \nnumber (0-9) from the DES key file is used. With a key_str\nargument,\nthe given key string is used to encrypt str. \n \nThe key file can be specified with the --des-key-file server\noption.\n \nThe return string is a binary string where the first\ncharacter is \nCHAR(128 | key_num). If an error occurs, DES_ENCRYPT()\nreturns NULL.\n \nThe 128 is added to make it easier to recognize an encrypted\nkey. If\nyou use a string key, key_num is 127.\n \nThe string length for the result is given by this formula:\n \nnew_len = orig_len + (8 - (orig_len % 8)) + 1\n \nEach line in the DES key file has the following format:\n \nkey_num des_key_str\n \nEach key_num value must be a number in the range from 0 to\n9. Lines in\nthe file may be in any order. des_key_str is the string that\nis used\nto encrypt the message. There should be at least one space\nbetween the\nnumber and the key. The first key is the default key that is\nused if\nyou do not specify any key argument to DES_ENCRYPT().\n \nYou can tell MariaDB to read new key values from the key\nfile with the\nFLUSH DES_KEY_FILE statement. This requires the RELOAD\nprivilege.\n \nOne benefit of having a set of default keys is that it gives\napplications a way to check for the existence of encrypted\ncolumn\nvalues, without giving the end user the right to decrypt\nthose values.\n \nExamples\n-------- \nSELECT customer_address FROM customer_table \n WHERE crypted_credit_card =\nDES_ENCRYPT(\'credit_card_number\');\n \n\n\nURL: https://mariadb.com/kb/en/des_encrypt/', '', 'https://mariadb.com/kb/en/des_encrypt/'),
(141, 'ENCODE', 12, 'Syntax\n------ \nENCODE(str,pass_str)\n \nDescription\n----------- \nENCODE is not considered cryptographically secure, and\nshould not be used for password encryption.\n \nEncrypt str using pass_str as the password. To decrypt the\nresult, use\nDECODE().\n \nThe result is a binary string of the same length as str.\n \nThe strength of the encryption is based on how good the\nrandom generator is. \n \nIt is not recommended to rely on the encryption performed by\nthe ENCODE function. Using a salt value (changed when a\npassword is updated) will improve matters somewhat, but for\nstoring passwords, consider a more cryptographically secure\nfunction, such as SHA2().\n \nExamples\n-------- \nENCODE(\'not so secret text\',\nCONCAT(\'random_salt\',\'password\'))\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/encode/', '', 'https://mariadb.com/kb/en/encode/'),
(142, 'ENCRYPT', 12, 'Syntax\n------ \nENCRYPT(str[,salt])\n \nDescription\n----------- \nEncrypts a string using the Unix crypt() system call,\nreturning an encrypted binary string. The salt argument\nshould be a string with at least two characters or the\nreturned result will be NULL. If no salt argument is given,\na random value of sufficient length is used.\n \nIt is not recommended to use ENCRYPT() with utf16, utf32 or\nucs2 multi-byte character sets because the crypt() system\ncall expects a string terminated with a zero byte.\n \nNote that the underlying crypt() system call may have some\nlimitations, such as ignoring all but the first eight\ncharacters.\n \nIf the have_crypt system variable is set to NO (because the\ncrypt() system call is not available), the ENCRYPT function\nwill always return NULL.\n \nExamples\n-------- \nSELECT ENCRYPT(\'encrypt me\');\n+-----------------------+\n| ENCRYPT(\'encrypt me\') |\n+-----------------------+\n| 4I5BsEx0lqTDk |\n+-----------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/encrypt/', '', 'https://mariadb.com/kb/en/encrypt/'),
(144, 'OLD_PASSWORD', 12, 'Syntax\n------ \nOLD_PASSWORD(str)\n \nDescription\n----------- \nOLD_PASSWORD() was added to MySQL when the implementation of\n\nPASSWORD() was changed to improve security. OLD_PASSWORD()\nreturns the\nvalue of the old (pre-MySQL 4.1) implementation of\nPASSWORD() as a\nstring, and is intended to permit you to reset passwords for\nany\npre-4.1 clients that need to connect to a more recent MySQL\nserver version, or any version of MariaDB,\nwithout locking them out.\n \nAs of MariaDB 5.5, the return value is a nonbinary string in\nthe connection character set and collation, determined by\nthe values of the character_set_connection and\ncollation_connection system variables. Before 5.5, the\nreturn value was a binary string.\n \nThe return value is 16 bytes in length, or NULL if the\nargument was NULL.\n \n\n\nURL: https://mariadb.com/kb/en/old_password/', '', 'https://mariadb.com/kb/en/old_password/'),
(237, 'ISNULL', 18, 'Syntax\n------ \nISNULL(expr)\n \nDescription\n----------- \nIf expr is NULL, ISNULL() returns 1, otherwise it returns 0.\n \nSee also NULL Values in MariaDB.\n \nExamples\n-------- \nSELECT ISNULL(1+1);\n+-------------+\n| ISNULL(1+1) |\n+-------------+\n| 0 |\n+-------------+\n \nSELECT ISNULL(1/0);\n+-------------+\n| ISNULL(1/0) |\n+-------------+\n| 1 |\n+-------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/isnull/', '', 'https://mariadb.com/kb/en/isnull/'),
(241, 'Operator Precedence', 19, 'The precedence is the order in which the SQL operators are\nevaluated.\n \nThe following list shows the SQL operator precedence.\nOperators that appear first in the list have a higher\nprecedence. Operators which are listed together have the\nsame precedence.\nINTERVAL\nBINARY, COLLATE\n!\n- (unary minus), [[bitwise-not|]] (unary bit inversion)\n|| (string concatenation)\n^\n*, /, DIV, %, MOD\n-, +\n \n&\n|\n= (comparison), , >=, >, \n\nURL: https://mariadb.com/kb/en/operator-precedence/', '', 'https://mariadb.com/kb/en/operator-precedence/'),
(242, '&amp;', 19, 'Syntax\n------ \n&\n \nDescription\n----------- \nBitwise AND. Converts the values to binary and compares\nbits. Only if both the corresponding bits are 1 is the\nresulting bit also 1.\n \nSee also bitwise OR.\n \nExamples\n-------- \nSELECT 2&1;\n+-----+\n| 2&1 |\n+-----+\n| 0 |\n+-----+\n \nSELECT 3&1;\n+-----+\n| 3&1 |\n+-----+\n| 1 |\n+-----+\n \nSELECT 29 & 15;\n+---------+\n| 29 & 15 |\n+---------+\n| 13 |\n+---------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/bitwise_and/', '', 'https://mariadb.com/kb/en/bitwise_and/'),
(243, '&lt;&lt;', 19, 'Syntax\n------ \nvalue1 \n\nURL: https://mariadb.com/kb/en/shift-left/', '', 'https://mariadb.com/kb/en/shift-left/'),
(146, 'SHA1', 12, 'Syntax\n------ \nSHA1(str), SHA(str)\n \nDescription\n----------- \nCalculates an SHA-1 160-bit checksum for the string str, as\ndescribed in\nRFC 3174 (Secure Hash Algorithm).\n \nThe value is returned as a string of 40 hex digits, or NULL\nif the argument was NULL. As of MariaDB 5.5, the return\nvalue is a nonbinary string in the connection character set\nand collation, determined by the values of the\ncharacter_set_connection and collation_connection system\nvariables. Before 5.5, the return value was a binary string.\n \nExamples\n-------- \nSELECT SHA1(\'some boring text\');\n+------------------------------------------+\n| SHA1(\'some boring text\') |\n+------------------------------------------+\n| af969fc2085b1bb6d31e517d5c456def5cdd7093 |\n+------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/sha1/', '', 'https://mariadb.com/kb/en/sha1/'),
(147, 'SHA2', 12, 'SHA2() was introduced in MariaDB 5.5\n \nSyntax\n------ \nSHA2(str,hash_len)\n \nDescription\n----------- \nGiven a string str, calculates an SHA-2 checksum, which is\nconsidered more cryptographically secure than its SHA-1\nequivalent. The SHA-2 family includes SHA-224, SHA-256,\nSHA-384, and SHA-512, and the hash_len must correspond to\none of these, i.e. 224, 256, 384 or 512. 0 is equivalent to\n256.\n \nThe return value is a nonbinary string in the connection\ncharacter set and collation, determined by the values of the\ncharacter_set_connection and collation_connection system\nvariables. \n \nNULL is returned if the hash length is not valid, or the\nstring str is NULL.\n \nSHA2 will only work if MariaDB was has been configured with\nTLS support. \n \nExamples\n-------- \nSELECT SHA2(\'Maria\',224);\n+----------------------------------------------------------+\n| SHA2(\'Maria\',224) |\n+----------------------------------------------------------+\n| 6cc67add32286412efcab9d0e1675a43a5c2ef3cec8879f81516ff83 |\n+----------------------------------------------------------+\n \nSELECT SHA2(\'Maria\',256);\n+------------------------------------------------------------------+\n| SHA2(\'Maria\',256) |\n+------------------------------------------------------------------+\n|\n9ff18ebe7449349f358e3af0b57cf7a032c1c6b2272cb2656ff85eb112232f16\n|\n+------------------------------------------------------------------+\n \nSELECT SHA2(\'Maria\',0);\n+------------------------------------------------------------------+\n| SHA2(\'Maria\',0) |\n+------------------------------------------------------------------+\n|\n9ff18ebe7449349f358e3af0b57cf7a032c1c6b2272cb2656ff85eb112232f16\n|\n+------------------------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/sha2/', '', 'https://mariadb.com/kb/en/sha2/'),
(148, 'UNCOMPRESS', 12, 'Syntax\n------ \nUNCOMPRESS(string_to_uncompress)\n \nDescription\n----------- \nUncompresses a string compressed by the COMPRESS() function.\nIf the\nargument is not a compressed value, the result is NULL. This\nfunction\nrequires MariaDB to have been compiled with a compression\nlibrary such\nas zlib. Otherwise, the return value is always NULL. The\nhave_compress server system variable indicates whether a\ncompression library is present. \n \nExamples\n-------- \nSELECT UNCOMPRESS(COMPRESS(\'a string\'));\n+----------------------------------+\n| UNCOMPRESS(COMPRESS(\'a string\')) |\n+----------------------------------+\n| a string |\n+----------------------------------+\n \nSELECT UNCOMPRESS(\'a string\');\n+------------------------+\n| UNCOMPRESS(\'a string\') |\n+------------------------+\n| NULL |\n+------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/uncompress/', '', 'https://mariadb.com/kb/en/uncompress/'),
(149, 'UNCOMPRESSED_LENGTH', 12, 'Syntax\n------ \nUNCOMPRESSED_LENGTH(compressed_string)\n \nDescription\n----------- \nReturns the length that the compressed string had before\nbeing\ncompressed with COMPRESS().\n \nUNCOMPRESSED_LENGTH() returns NULL or an incorrect result if\nthe string is not compressed.\n \nUntil MariaDB 10.3.1, returns MYSQL_TYPE_LONGLONG, or\nbigint(10), in all cases. From MariaDB 10.3.1, returns\nMYSQL_TYPE_LONG, or int(10), when the result would fit\nwithin 32-bits.\n \nExamples\n-------- \nSELECT UNCOMPRESSED_LENGTH(COMPRESS(REPEAT(\'a\',30)));\n+-----------------------------------------------+\n| UNCOMPRESSED_LENGTH(COMPRESS(REPEAT(\'a\',30))) |\n+-----------------------------------------------+\n| 30 |\n+-----------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/uncompressed_length/', '', 'https://mariadb.com/kb/en/uncompressed_length/'),
(159, 'INET6_ATON', 14, 'INET6_ATON() has been available since MariaDB 10.0.12.\n \nSyntax\n------ \nINET6_ATON(expr)\n \nDescription\n----------- \nGiven an IPv6 or IPv4 network address as a string, returns a\nbinary string that represents the numeric value of the\naddress.\n \nNo trailing zone ID\'s or traling network masks are\npermitted. For IPv4 addresses, or IPv6 addresses with IPv4\naddress parts, no classful addresses or trailing port\nnumbers are permitted and octal numbers are not supported.\n \nThe returned binary string will be VARBINARY(16) or\nVARBINARY(4) for IPv6 and IPv4 addresses respectively.\n \nReturns NULL if the argument is not understood.\n \nExamples\n-------- \nSELECT HEX(INET6_ATON(\'10.0.1.1\'));\n+-----------------------------+\n| HEX(INET6_ATON(\'10.0.1.1\')) |\n+-----------------------------+\n| 0A000101 |\n+-----------------------------+\n \nSELECT HEX(INET6_ATON(\'48f3::d432:1431:ba23:846f\'));\n+----------------------------------------------+\n| HEX(INET6_ATON(\'48f3::d432:1431:ba23:846f\')) |\n+----------------------------------------------+\n| 48F3000000000000D4321431BA23846F |\n+----------------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/inet6_aton/', '', 'https://mariadb.com/kb/en/inet6_aton/'),
(244, '&gt;&gt;', 19, 'Syntax\n------ \nvalue1 >> value2\n \nDescription\n----------- \nConverts a longlong (BIGINT) number (value1) to binary and\nshifts value2 units to the right.\n \nExamples\n-------- \nSELECT 4 >> 2;\n+--------+\n| 4 >> 2 |\n+--------+\n| 1 |\n+--------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/shift-right/', '', 'https://mariadb.com/kb/en/shift-right/'),
(245, 'BIT_COUNT', 19, 'Syntax\n------ \nBIT_COUNT(N)\n \nDescription\n----------- \nReturns the number of bits that are set in the argument N.\n \nExamples\n-------- \nSELECT BIT_COUNT(29), BIT_COUNT(b\'101010\');\n+---------------+----------------------+\n| BIT_COUNT(29) | BIT_COUNT(b\'101010\') |\n+---------------+----------------------+\n| 4 | 3 |\n+---------------+----------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/bit_count/', '', 'https://mariadb.com/kb/en/bit_count/'),
(246, '^', 19, 'Syntax\n------ \n^\n \nDescription\n----------- \nBitwise XOR. Converts the values to binary and compares\nbits. If one (and only one) of the corresponding bits is 1\nis the resulting bit also 1.\n \nExamples\n-------- \nSELECT 1 ^ 1;\n+-------+\n| 1 ^ 1 |\n+-------+\n| 0 |\n+-------+\n \nSELECT 1 ^ 0;\n+-------+\n| 1 ^ 0 |\n+-------+\n| 1 |\n+-------+\n \nSELECT 11 ^ 3;\n+--------+\n| 11 ^ 3 |\n+--------+\n| 8 |\n+--------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/bitwise-xor/', '', 'https://mariadb.com/kb/en/bitwise-xor/'),
(247, '|', 19, 'Syntax\n------ \n|\n \nDescription\n----------- \nBitwise OR. Converts the values to binary and compares bits.\nIf either of the corresponding bits has a value of 1, the\nresulting bit is also 1.\n \nSee also bitwise AND.\n \nExamples\n-------- \nSELECT 2|1;\n+-----+\n| 2|1 |\n+-----+\n| 3 |\n+-----+\n \nSELECT 29 | 15;\n+---------+\n| 29 | 15 |\n+---------+\n| 31 |\n+---------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/bitwise-or/', '', 'https://mariadb.com/kb/en/bitwise-or/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(158, 'GET_LOCK', 14, 'Syntax\n------ \nGET_LOCK(str,timeout)\n \nDescription\n----------- \nTries to obtain a lock with a name given by the string str,\nusing a timeout of timeout seconds. Returns 1 if the lock\nwas obtained successfully, 0 if the attempt timed out (for\nexample, because another client has previously locked the\nname), or NULL if an error occurred (such as running out of\nmemory or the thread was killed with mysqladmin kill).\n \nA lock is released with RELEASE_LOCK(), when the connection\nterminates (either normally or abnormally), or before\nMariaDB 10.0.2, when the connection executes another\nGET_LOCK statement. From MariaDB 10.0.2, a connection can\nhold multiple locks at the same time, so a lock that is no\nlonger needed needs to be explicitly released.\n \nThe IS_FREE_LOCK function returns whether a specified lock a\nfree or not, and the IS_USED_LOCK whether the function is in\nuse or not.\n \nLocks obtained with GET_LOCK() do not interact with\ntransactions. That is, committing a transaction does not\nrelease any such locks obtained during the transaction.\n \nFrom MariaDB 10.0.2, it is also possible to recursively set\nthe same lock. If a lock with the same name is set n times,\nit needs to be released n times as well. \n \nstr is case insensitive for GET_LOCK() and related\nfunctions. If str is an empty string or NULL, GET_LOCK()\nreturns NULL and does nothing. From MariaDB 10.2.2, timeout\nsupports microseconds. Before then, it was rounded to the\nclosest integer.\n \nIf the metadata_lock_info plugin is installed, locks\nacquired with this function are visible in the Information\nSchema METADATA_LOCK_INFO table.\n \nThis function can be used to implement application locks or\nto simulate record locks. Names are locked on a server-wide\nbasis. If a name has been locked by one client, GET_LOCK()\nblocks any request by another client for a lock with the\nsame name. This allows clients that agree on a given lock\nname to use the name to perform cooperative advisory\nlocking. But be aware that it also allows a client that is\nnot among the set of cooperating clients to lock a name,\neither inadvertently or deliberately, and thus prevent any\nof the cooperating clients from locking that name. One way\nto reduce the likelihood of this is to use lock names that\nare database-specific or application-specific. For example,\nuse lock names of the form db_name.str or app_name.str.\n \nStatements using the GET_LOCK() function are not safe for\nreplication.\n \nThe patch to permit multiple locks was contributed by\nKonstantin \"Kostja\" Osipov (MDEV-3917).\n \nExamples\n-------- \nSELECT GET_LOCK(\'lock1\',10);\n+----------------------+\n| GET_LOCK(\'lock1\',10) |\n+----------------------+\n| 1 |\n+----------------------+\n \nSELECT IS_FREE_LOCK(\'lock1\'), IS_USED_LOCK(\'lock1\');\n+-----------------------+-----------------------+\n| IS_FREE_LOCK(\'lock1\') | IS_USED_LOCK(\'lock1\') |\n+-----------------------+-----------------------+\n| 0 | 46 |\n+-----------------------+-----------------------+\n \nSELECT IS_FREE_LOCK(\'lock2\'), IS_USED_LOCK(\'lock2\');\n+-----------------------+-----------------------+\n| IS_FREE_LOCK(\'lock2\') | IS_USED_LOCK(\'lock2\') |\n+-----------------------+-----------------------+\n| 1 | NULL |\n+-----------------------+-----------------------+\n \nFrom MariaDB 10.0.2, multiple locks can be held:\n \nSELECT GET_LOCK(\'lock2\',10);\n+----------------------+\n| GET_LOCK(\'lock2\',10) |\n+----------------------+\n| 1 |\n+----------------------+\n \nSELECT IS_FREE_LOCK(\'lock1\'), IS_FREE_LOCK(\'lock2\');\n+-----------------------+-----------------------+\n| IS_FREE_LOCK(\'lock1\') | IS_FREE_LOCK(\'lock2\') |\n+-----------------------+-----------------------+\n| 0 | 0 |\n+-----------------------+-----------------------+\n \nSELECT RELEASE_LOCK(\'lock1\'), RELEASE_LOCK(\'lock2\');\n+-----------------------+-----------------------+\n| RELEASE_LOCK(\'lock1\') | RELEASE_LOCK(\'lock2\') |\n+-----------------------+-----------------------+\n| 1 | 1 |\n+-----------------------+-----------------------+\n \nBefore MariaDB 10.0.2, a connection could only hold a single\nlock:\n \nSELECT GET_LOCK(\'lock2\',10);\n+----------------------+\n| GET_LOCK(\'lock2\',10) |\n+----------------------+\n| 1 |\n+----------------------+\n \nSELECT IS_FREE_LOCK(\'lock1\'), IS_FREE_LOCK(\'lock2\');\n+-----------------------+-----------------------+\n| IS_FREE_LOCK(\'lock1\') | IS_FREE_LOCK(\'lock2\') |\n+-----------------------+-----------------------+\n| 1 | 0 |\n+-----------------------+-----------------------+\n \nSELECT RELEASE_LOCK(\'lock1\'), RELEASE_LOCK(\'lock2\');\n+-----------------------+-----------------------+\n| RELEASE_LOCK(\'lock1\') | RELEASE_LOCK(\'lock2\') |\n+-----------------------+-----------------------+\n| NULL | 1 |\n+-----------------------+-----------------------+\n \nFrom MariaDB 10.0.2, it is possible to hold the same lock\nrecursively. This example is viewed using the\nmetadata_lock_info plugin:\n \nSELECT GET_LOCK(\'lock3\',10);\n+----------------------+\n| GET_LOCK(\'lock3\',10) |\n+----------------------+\n| 1 |\n+----------------------+\n \nSELECT GET_LOCK(\'lock3\',10);\n+----------------------+\n| GET_LOCK(\'lock3\',10) |\n+----------------------+\n| 1 |\n+----------------------+\n \nSELECT * FROM INFORMATION_SCHEMA.METADATA_LOCK_INFO;\n \n+-----------+---------------------+---------------+-----------+--------------+------------+\n| THREAD_ID | LOCK_MODE | LOCK_DURATION | LOCK_TYPE |\nTABLE_SCHEMA | TABLE_NAME |\n+-----------+---------------------+---------------+-----------+--------------+------------+\n| 46 | MDL_SHARED_NO_WRITE | NULL | User lock | lock3 | |\n+-----------+---------------------+---------------+-----------+--------------+------------+\n \nSELECT RELEASE_LOCK(\'lock3\');\n+-----------------------+\n| RELEASE_LOCK(\'lock3\') |\n+-----------------------+\n| 1 |\n+-----------------------+\n \nSELECT * FROM INFORMATION_SCHEMA.METADATA_LOCK_INFO;\n \n+-----------+---------------------+---------------+-----------+--------------+------------+\n| THREAD_ID | LOCK_MODE | LOCK_DURATION | LOCK_TYPE |\nTABLE_SCHEMA | TABLE_NAME |\n+-----------+---------------------+---------------+-----------+--------------+------------+\n| 46 | MDL_SHARED_NO_WRITE | NULL | User lock | lock3 | |\n+-----------+---------------------+---------------+-----------+--------------+------------+\n \nSELECT RELEASE_LOCK(\'lock3\');\n+-----------------------+\n| RELEASE_LOCK(\'lock3\') |\n+-----------------------+\n| 1 |\n+-----------------------+\n \nSELECT * FROM INFORMATION_SCHEMA.METADATA_LOCK_INFO;\n \nEmpty set (0.000 sec)\n \nTimeout example: Connection 1:\n \nSELECT GET_LOCK(\'lock4\',10);\n+----------------------+\n| GET_LOCK(\'lock4\',10) |\n+----------------------+\n| 1 |\n+----------------------+\n \nConnection 2:\n \nSELECT GET_LOCK(\'lock4\',10);\n \nAfter 10 seconds...\n \n+----------------------+\n| GET_LOCK(\'lock4\',10) |\n+----------------------+\n| 0 |\n+----------------------+\n \nDeadlocks are automatically detected and resolved.\nConnection 1:\n \nSELECT GET_LOCK(\'lock5\',10); \n+----------------------+\n| GET_LOCK(\'lock5\',10) |\n+----------------------+\n| 1 |\n+----------------------+\n \nConnection 2:\n \nSELECT GET_LOCK(\'lock6\',10);\n+----------------------+\n| GET_LOCK(\'lock6\',10) |\n+----------------------+\n| 1 |\n+----------------------+\n \nConnection 1:\n \nSELECT GET_LOCK(\'lock6\',10); \n+----------------------+\n| GET_LOCK(\'lock6\',10) |\n+----------------------+\n| 0 |\n+----------------------+\n \nConnection 2:\n \nSELECT GET_LOCK(\'lock5\',10);\nERROR 1213 (40001): Deadlock found when trying to get lock;\n try restarting transaction\n \n\n\nURL: https://mariadb.com/kb/en/get_lock/', '', 'https://mariadb.com/kb/en/get_lock/'),
(160, 'INET6_NTOA', 14, 'INET6_NTOA() has been available from MariaDB 10.0.12.\n \nSyntax\n------ \nINET6_NTOA(expr)\n \nDescription\n----------- \nGiven an IPv6 or IPv4 network address as a numeric binary\nstring, returns the address as a nonbinary string in the\nconnection character set.\n \nThe return string is lowercase, and is platform independent,\nsince it does not use functions specific to the operating\nsystem. It has a maximum length of 39 characters.\n \nReturns NULL if the argument is not understood.\n \nExamples\n-------- \nSELECT INET6_NTOA(UNHEX(\'0A000101\'));\n+-------------------------------+\n| INET6_NTOA(UNHEX(\'0A000101\')) |\n+-------------------------------+\n| 10.0.1.1 |\n+-------------------------------+\n \nSELECT\nINET6_NTOA(UNHEX(\'48F3000000000000D4321431BA23846F\'));\n+-------------------------------------------------------+\n| INET6_NTOA(UNHEX(\'48F3000000000000D4321431BA23846F\')) |\n+-------------------------------------------------------+\n| 48f3::d432:1431:ba23:846f |\n+-------------------------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/inet6_ntoa/', '', 'https://mariadb.com/kb/en/inet6_ntoa/'),
(164, 'IS_IPV4', 14, 'IS_IPV4() has been available since MariaDB 10.0.12.\n \nSyntax\n------ \nIS_IPV4(expr)\n \nDescription\n----------- \nIf the expression is a valid IPv4 address, returns 1,\notherwise returns 0.\n \nIS_IPV4() is stricter than INET_ATON(), but as strict as\nINET6_ATON(), in determining the validity of an IPv4\naddress. This implies that if IS_IPV4 returns 1, the same\nexpression will always return a non-NULL result when passed\nto INET_ATON(), but that the reverse may not apply.\n \nExamples\n-------- \nSELECT IS_IPV4(\'1110.0.1.1\');\n+-----------------------+\n| IS_IPV4(\'1110.0.1.1\') |\n+-----------------------+\n| 0 |\n+-----------------------+\n \nSELECT IS_IPV4(\'48f3::d432:1431:ba23:846f\');\n+--------------------------------------+\n| IS_IPV4(\'48f3::d432:1431:ba23:846f\') |\n+--------------------------------------+\n| 0 |\n+--------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/is_ipv4/', '', 'https://mariadb.com/kb/en/is_ipv4/'),
(165, 'IS_IPV4_COMPAT', 14, 'IS_IPV4_COMPAT() has been available since MariaDB 10.0.12.\n \nSyntax\n------ \nIS_IPV4_COMPAT(expr)\n \nDescription\n----------- \nReturns 1 if a given numeric binary string IPv6 address,\nsuch as returned by INET6_ATON(), is IPv4-compatible,\notherwise returns 0. \n \nExamples\n-------- \nSELECT IS_IPV4_COMPAT(INET6_ATON(\'::10.0.1.1\'));\n+------------------------------------------+\n| IS_IPV4_COMPAT(INET6_ATON(\'::10.0.1.1\')) |\n+------------------------------------------+\n| 1 |\n+------------------------------------------+\n \nSELECT\nIS_IPV4_COMPAT(INET6_ATON(\'::48f3::d432:1431:ba23:846f\'));\n+-----------------------------------------------------------+\n|\nIS_IPV4_COMPAT(INET6_ATON(\'::48f3::d432:1431:ba23:846f\'))\n|\n+-----------------------------------------------------------+\n| 0 |\n+-----------------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/is_ipv4_compat/', '', 'https://mariadb.com/kb/en/is_ipv4_compat/'),
(166, 'IS_IPV4_MAPPED', 14, 'IS_IPV4_MAPPED() has been available since MariaDB 10.0.12.\n \nSyntax\n------ \nIS_IPV4_MAPPED(expr)\n \nDescription\n----------- \nReturns 1 if a given a numeric binary string IPv6 address,\nsuch as returned by INET6_ATON(), is a valid IPv4-mapped\naddress, otherwise returns 0.\n \nExamples\n-------- \nSELECT IS_IPV4_MAPPED(INET6_ATON(\'::10.0.1.1\'));\n+------------------------------------------+\n| IS_IPV4_MAPPED(INET6_ATON(\'::10.0.1.1\')) |\n+------------------------------------------+\n| 0 |\n+------------------------------------------+\n \nSELECT IS_IPV4_MAPPED(INET6_ATON(\'::ffff:10.0.1.1\'));\n+-----------------------------------------------+\n| IS_IPV4_MAPPED(INET6_ATON(\'::ffff:10.0.1.1\')) |\n+-----------------------------------------------+\n| 1 |\n+-----------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/is_ipv4_mapped/', '', 'https://mariadb.com/kb/en/is_ipv4_mapped/'),
(170, 'MASTER_POS_WAIT', 14, 'MASTER_POS_WAIT was introduced in MariaDB 10.0.9.\n \nSyntax\n------ \nMASTER_POS_WAIT(log_name,log_pos[,timeout,[\"connection_name\"]])\n \nDescription\n----------- \nThis function is useful in replication for controlling\nmaster/slave synchronization. It blocks until the slave has\nread and applied all updates up to the specified position\n(log_name,log_pos) in the master log. The return value is\nthe number of log events the slave had to wait for to\nadvance to the specified position. The function returns NULL\nif\nthe slave SQL thread is not started, the slave\'s master\ninformation is not\ninitialized, the arguments are incorrect, or an error\noccurs. It returns -1 if\nthe timeout has been exceeded. If the slave SQL thread stops\nwhile\n MASTER_POS_WAIT() is waiting, the function returns NULL. If\nthe slave is past the specified position, the function\nreturns immediately.\n \nIf a timeout value is specified, MASTER_POS_WAIT() stops\nwaiting when timeout seconds have elapsed. timeout must be\ngreater than 0; a\nzero or negative timeout means no timeout.\n \nThe connection_name is used when you are using\nmulti-source-replication. If you don\'t specify it, it\'s\nset to the value of the default_master_connection system\nvariable.\n \nStatements using the MASTER_POS_WAIT() function are not safe\nfor replication.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/master_pos_wait/', '', 'https://mariadb.com/kb/en/master_pos_wait/'),
(248, '~', 19, 'Syntax\n------ \n~\n \nDescription\n----------- \nBitwise NOT. Converts the value to 4 bytes binary and\ninverts all bits.\n \nExamples\n-------- \nSELECT 3 & ~1;\n+--------+\n| 3 & ~1 |\n+--------+\n| 2 |\n+--------+\n \nSELECT 5 & ~1;\n+--------+\n| 5 & ~1 |\n+--------+\n| 4 |\n+--------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/bitwise-not/', '', 'https://mariadb.com/kb/en/bitwise-not/'),
(250, 'TRUE FALSE', 19, 'Description\n----------- \nThe constants TRUE and FALSE evaluate to 1 and 0,\nrespectively. The\nconstant names can be written in any lettercase.\n \nExamples\n-------- \nSELECT TRUE, true, FALSE, false;\n \n+------+------+-------+-------+\n| TRUE | TRUE | FALSE | FALSE |\n+------+------+-------+-------+\n| 1 | 1 | 0 | 0 |\n+------+------+-------+-------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/true-false/', '', 'https://mariadb.com/kb/en/true-false/'),
(253, 'CHECK VIEW', 20, 'CHECK VIEW was introduced in MariaDB 10.0.18.\n \nSyntax\n------ \nCHECK VIEW view_name\n \nDescription\n----------- \nThe CHECK VIEW statement was introduced in MariaDB 10.0.18\nto assist with fixing MDEV-6916, an issue introduced in\nMariaDB 5.2 where the view algorithms were swapped. It\nchecks whether the view algorithm is correct. It is run as\npart of mysql_upgrade, and should not normally be required\nin regular use.\n \n\n\nURL: https://mariadb.com/kb/en/check-view/', '', 'https://mariadb.com/kb/en/check-view/'),
(254, '', 20, 'URL: https://mariadb.com/kb/en/checksum-table/', '', 'https://mariadb.com/kb/en/checksum-table/'),
(269, 'BLOB and TEXT Data Types', 22, 'Description\n----------- \nA BLOB is a binary large object that can hold a variable\namount of\ndata. The four BLOB types are \nTINYBLOB,\nBLOB, \nMEDIUMBLOB, and\nLONGBLOB.\n \nThese differ only in the maximum length of the values they\ncan hold. \n \nThe TEXT types are \nTINYTEXT,\nTEXT,\nMEDIUMTEXT, and\nLONGTEXT.\nJSON (alias for LONGTEXT)\n \nThese correspond to the four BLOB types and have the same\nmaximum lengths and storage requirements.\n \nStarting from MariaDB 10.2.1, BLOB and TEXT columns can have\na DEFAULT value.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/blob-and-text-data-types/', '', 'https://mariadb.com/kb/en/blob-and-text-data-types/'),
(169, 'MASTER_GTID_WAIT', 14, 'MASTER_GTID_WAIT() was included in MariaDB 10.0.9.\n \nSyntax\n------ \nMASTER_GTID_WAIT(gtid-list[, timeout)\n \nDescription\n----------- \nThis function takes a string containing a comma-separated\nlist of global transaction id\'s\n(similar to the value of, for example, gtid_binlog_pos). It\nwaits until the value of gtid_slave_pos has the same or\nhigher seq_no within all replication domains specified in\nthe gtid-list; in other words, it waits until the slave has\nreached the specified GTID position.\n \nAn optional second argument gives a timeout in seconds. If\nthe timeout\nexpires before the specified GTID position is reached, then\nthe function\nreturns -1. Passing NULL or a negative number for the\ntimeout means no timeout, and the function will wait\nindefinitely.\n \n If the wait completes without a timeout, 0 is returned.\nPassing NULL for the\n gtid-list makes the function return NULL immediately,\nwithout waiting.\n \nThe gtid-list may be the empty string, in which case\nMASTER_GTID_WAIT()\nreturns immediately. If the gtid-list contains fewer domains\nthan\ngtid_slave_pos, then only those domains are waited upon. If\ngtid-list\ncontains a domain that is not present in @@gtid_slave_pos,\nthen\nMASTER_GTID_WAIT() will wait until an event containing such\ndomain_id arrives\non the slave (or until timed out or killed).\n \nMASTER_GTID_WAIT() can be useful to ensure that a slave has\ncaught up to\na master. Simply take the value of gtid_binlog_pos on the\nmaster, and use it in a MASTER_GTID_WAIT() call on the\nslave; when the call completes, the slave\nwill have caught up with that master position.\n \nMASTER_GTID_WAIT() can also be used in client applications\ntogether with the\nlast_gtid session variable. This is useful in a\nread-scaleout replication setup, where the application\nwrites to a single master but divides the\nreads out to a number of slaves to distribute the load. In\nsuch a setup, there\nis a risk that an application could first do an update on\nthe master, and then\na bit later do a read on a slave, and if the slave is not\nfast enough, the\ndata read from the slave might not include the update just\nmade, possibly\nconfusing the application and/or the end-user. One way to\navoid this is to\nrequest the value of last_gtid on the master just after the\nupdate. Then\nbefore doing the read on the slave, do a MASTER_GTID_WAIT()\non the value\nobtained from the master; this will ensure that the read is\nnot performed\nuntil the slave has replicated sufficiently far for the\nupdate to have become\nvisible.\n \nNote that MASTER_GTID_WAIT() can be used even if the slave\nis configured not\nto use GTID for connections (CHANGE MASTER TO\nmaster_use_gtid=no). This is\nbecause from MariaDB 10, GTIDs are always logged on the\nmaster server, and\nalways recorded on the slave servers.\n \nDifferences to MASTER_POS_WAIT()\n \nMASTER_GTID_WAIT() is global; it waits for any master\nconnection to reach\n the specified GTID position. MASTER_POS_WAIT() works only\nagainst a\n specific connection. This also means that while\nMASTER_POS_WAIT() aborts if\n its master connection is terminated with STOP SLAVE or due\nto an error,\n MASTER_GTID_WAIT() continues to wait while slaves are\nstopped.\n \nMASTER_GTID_WAIT() can take its timeout as a floating-point\nvalue, so a\n timeout in fractional seconds is supported, eg.\nMASTER_GTID_WAIT(\"0-1-100\",\n 0.5). (The minimum wait is one microsecond, 0.000001\nseconds).\n \nMASTER_GTID_WAIT() allows one to specify a timeout of zero\nin order to do a\n non-blocking check to see if the slaves have progressed to\na specific GTID position\n (MASTER_POS_WAIT() takes a zero timeout as meaning an\ninfinite wait). To do\n an infinite MASTER_GTID_WAIT(), specify a negative timeout,\nor omit the\n timeout argument.\n \nMASTER_GTID_WAIT() does not return the number of events\nexecuted since the\n wait started, nor does it return NULL if a slave thread is\nstopped. It\n always returns either 0 for successful wait completed, or\n-1 for timeout\n reached (or NULL if the specified gtid-pos is NULL).\n \nSince MASTER_GTID_WAIT() looks only at the seq_no part of\nthe GTIDs, not the\nserver_id, care is needed if a slave becomes diverged from\nanother server so\nthat two different GTIDs with the same seq_no (in the same\ndomain) arrive at\nthe same server. This situation is in any case best avoided;\nsetting\ngtid_strict_mode is recommended, as this will prevent any\nsuch out-of-order sequence numbers from ever being\nreplicated on a slave.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/master_gtid_wait/', '', 'https://mariadb.com/kb/en/master_gtid_wait/'),
(174, 'UUID', 14, 'Syntax\n------ \nUUID()\n \nDescription\n----------- \nReturns a Universal Unique Identifier (UUID) generated\naccording to \"DCE 1.1:\nRemote Procedure Call\" (Appendix A) CAE (Common\nApplications Environment)\nSpecifications published by The Open Group in October\n1997 \n(Document Number C706).\n \nA UUID is designed as a number that is globally unique in\nspace and time. Two\ncalls to UUID() are expected to generate two different\nvalues, even if these calls are performed on two separate\ncomputers that are\nnot connected to each other.\n \nA UUID is a 128-bit number represented by a utf8 string of\nfive\nhexadecimal numbers in aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\nformat:\nThe first three numbers are generated from a timestamp.\nThe fourth number preserves temporal uniqueness in case the\ntimestamp value\n loses monotonicity (for example, due to daylight saving\ntime).\nThe fifth number is an IEEE 802 node number that provides\nspatial uniqueness.\n A random number is substituted if the latter is not\navailable (for example,\n because the host computer has no Ethernet card, or we do\nnot know how to find\n the hardware address of an interface on your operating\nsystem). In this case,\n spatial uniqueness cannot be guaranteed. Nevertheless, a\ncollision should\n have very low probability.\n \nCurrently, the MAC address of an interface is taken into\naccount only on FreeBSD and Linux. On other operating\nsystems, MariaDB uses a randomly generated 48-bit number.\n \nStatements using the UUID() function are not safe for\nreplication.\n \nUUID() results are intended to be unique, but cannot always\nbe relied upon to unpredictable and unguessable, so should\nnot be relied upon for these purposes.\n \nExamples\n-------- \nSELECT UUID();\n+--------------------------------------+\n| UUID() |\n+--------------------------------------+\n| cd41294a-afb0-11df-bc9b-00241dd75637 |\n+--------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/uuid/', '', 'https://mariadb.com/kb/en/uuid/'),
(272, 'CHAR BYTE', 22, 'Description\n----------- \nThe CHAR BYTE data type is an alias for the \nBINARY data type. This is a\ncompatibility feature.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/char-byte/', '', 'https://mariadb.com/kb/en/char-byte/'),
(281, 'LONGBLOB', 22, 'Syntax\n------ \nLONGBLOB\n \nDescription\n----------- \nA BLOB column with a \nmaximum length of 4,294,967,295 bytes or 4GB (232 - 1). The\neffective maximum length of LONGBLOB columns depends on the\nconfigured maximum packet size in the client/server protocol\nand\navailable memory. Each LONGBLOB value is stored using a\nfour-byte\nlength prefix that indicates the number of bytes in the\nvalue.\n \nOracle Mode\n \nIn Oracle mode from MariaDB 10.3, BLOB is a synonym for\nLONGBLOB.\n \n\n\nURL: https://mariadb.com/kb/en/longblob/', '', 'https://mariadb.com/kb/en/longblob/'),
(282, 'LONGTEXT', 22, 'Syntax\n------ \nLONGTEXT [CHARACTER SET charset_name] [COLLATE\ncollation_name]\n \nDescription\n----------- \nA TEXT column with a maximum length of 4,294,967,295 or 4GB\n(232 - 1) characters. The effective maximum length is less\nif the value contains multi-byte characters. The effective\nmaximum length of LONGTEXT columns also depends on the\nconfigured maximum packet size in the client/server protocol\nand available memory. Each LONGTEXT value is stored using a\nfour-byte length prefix that indicates the number of bytes\nin the value.\n \nFrom MariaDB 10.2.7, JSON is an alias for LONGTEXT. See JSON\nData Type for details.\n \nOracle Mode\n \nIn Oracle mode from MariaDB 10.3, CLOB is a synonym for\nLONGTEXT.\n \n\n\nURL: https://mariadb.com/kb/en/longtext/', '', 'https://mariadb.com/kb/en/longtext/'),
(172, 'RELEASE_LOCK', 14, 'Syntax\n------ \nRELEASE_LOCK(str)\n \nDescription\n----------- \nReleases the lock named by the string str that was obtained\nwith GET_LOCK(). Returns 1 if the lock was released, 0 if\nthe lock was not established by this thread (in which case\nthe lock is not\nreleased), and NULL if the named lock did not exist. The\nlock does not exist if it was never obtained by a call to\nGET_LOCK() or if it has previously been released.\n \nMariaDB until 10.0.1\n \nBefore 10.0.2, GET_LOCK() released the existing lock, if\nany. Since 10.0.2 this does not happen, because multiple\nlocks are allowed.\n \nstr is case insensitive. If str is an empty string or NULL,\nRELEASE_LOCK() returns NULL and does nothing.\n \nStatements using the RELEASE_LOCK() function are not safe\nfor replication.\n \nThe DO statement is convenient to use with RELEASE_LOCK().\n \nExamples\n-------- \nConnection1:\n \nSELECT GET_LOCK(\'lock1\',10);\n+----------------------+\n| GET_LOCK(\'lock1\',10) |\n+----------------------+\n| 1 |\n+----------------------+\n \nConnection 2:\n \nSELECT GET_LOCK(\'lock2\',10);\n+----------------------+\n| GET_LOCK(\'lock2\',10) |\n+----------------------+\n| 1 |\n+----------------------+\n \nConnection 1:\n \nSELECT RELEASE_LOCK(\'lock1\'), RELEASE_LOCK(\'lock2\'),\nRELEASE_LOCK(\'lock3\');\n+-----------------------+-----------------------+-----------------------+\n| RELEASE_LOCK(\'lock1\') | RELEASE_LOCK(\'lock2\') |\nRELEASE_LOCK(\'lock3\') |\n+-----------------------+-----------------------+-----------------------+\n| 1 | 0 | NULL |\n+-----------------------+-----------------------+-----------------------+\n \nFrom MariaDB 10.0.2, it is possible to hold the same lock\nrecursively. This example is viewed using the\nmetadata_lock_info plugin:\n \nSELECT GET_LOCK(\'lock3\',10);\n+----------------------+\n| GET_LOCK(\'lock3\',10) |\n+----------------------+\n| 1 |\n+----------------------+\n \nSELECT GET_LOCK(\'lock3\',10);\n+----------------------+\n| GET_LOCK(\'lock3\',10) |\n+----------------------+\n| 1 |\n+----------------------+\n \nSELECT * FROM INFORMATION_SCHEMA.METADATA_LOCK_INFO;\n \n+-----------+---------------------+---------------+-----------+--------------+------------+\n| THREAD_ID | LOCK_MODE | LOCK_DURATION | LOCK_TYPE |\nTABLE_SCHEMA | TABLE_NAME |\n+-----------+---------------------+---------------+-----------+--------------+------------+\n| 46 | MDL_SHARED_NO_WRITE | NULL | User lock | lock3 | |\n+-----------+---------------------+---------------+-----------+--------------+------------+\n \nSELECT RELEASE_LOCK(\'lock3\');\n+-----------------------+\n| RELEASE_LOCK(\'lock3\') |\n+-----------------------+\n| 1 |\n+-----------------------+\n \nSELECT * FROM INFORMATION_SCHEMA.METADATA_LOCK_INFO;\n \n+-----------+---------------------+---------------+-----------+--------------+------------+\n| THREAD_ID | LOCK_MODE | LOCK_DURATION | LOCK_TYPE |\nTABLE_SCHEMA | TABLE_NAME |\n+-----------+---------------------+---------------+-----------+--------------+------------+\n| 46 | MDL_SHARED_NO_WRITE | NULL | User lock | lock3 | |\n+-----------+---------------------+---------------+-----------+--------------+------------+\n \nSELECT RELEASE_LOCK(\'lock3\');\n+-----------------------+\n| RELEASE_LOCK(\'lock3\') |\n+-----------------------+\n| 1 |\n+-----------------------+\n \nSELECT * FROM INFORMATION_SCHEMA.METADATA_LOCK_INFO;\n \nEmpty set (0.000 sec)\n \n\n\nURL: https://mariadb.com/kb/en/release_lock/', '', 'https://mariadb.com/kb/en/release_lock/'),
(176, 'VALUES / VALUE', 14, 'Syntax\n------ \nVALUE(col_name) \n \nMariaDB until 10.3.2\n \nVALUES(col_name) \n \nDescription\n----------- \nIn an INSERT ... ON DUPLICATE KEY UPDATE statement, you can\nuse the VALUES(col_name) function in the UPDATE clause to\nrefer to column values from the INSERT portion of the\nstatement. In other words, VALUES(col_name) in the UPDATE\nclause refers to the value of col_name that would be\ninserted, had no duplicate-key conflict occurred. This\nfunction is especially useful in multiple-row inserts.\n \nThe VALUES() function is meaningful only in INSERT ... ON\nDUPLICATE KEY UPDATE statements and returns NULL otherwise.\n \nIn MariaDB 10.3.3 this function was renamed to VALUE(),\nbecause it\'s incompatible with the standard Table Value\nConstructors syntax, implemented in MariaDB 10.3.3.\n \nThe VALUES() function can still be used even from MariaDB\n10.3.3, but only in INSERT ... ON DUPLICATE KEY UPDATE\nstatements; it\'s a syntax error otherwise.\n \nExamples\n-------- \nINSERT INTO t (a,b,c) VALUES (1,2,3),(4,5,6)\n ON DUPLICATE KEY UPDATE c=VALUE(a)+VALUE(b);\n \nMariaDB until 10.3.2\n \nINSERT INTO t (a,b,c) VALUES (1,2,3),(4,5,6)\n ON DUPLICATE KEY UPDATE c=VALUES(a)+VALUES(b);\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/values-value/', '', 'https://mariadb.com/kb/en/values-value/'),
(179, '||', 15, 'Syntax\n------ \nOR, ||\n \nDescription\n----------- \nLogical OR. When both operands are non-NULL, the result is 1\nif any\noperand is non-zero, and 0 otherwise. With a NULL operand,\nthe result\nis 1 if the other operand is non-zero, and NULL otherwise.\nIf both\noperands are NULL, the result is NULL.\n \nFor this operator, short-circuit evaluation can be used.\n \nNote that, if the PIPES_AS_CONCAT SQL_MODE is set, || is\nused as a string concatenation operator. This means that a\n|| b is the same as CONCAT(a,b). See CONCAT() for details.\n \nOracle Mode\n \nIn Oracle mode from MariaDB 10.3, || ignores NULL.\n \nExamples\n-------- \nSELECT 1 || 1;\n \n+--------+\n| 1 || 1 |\n+--------+\n| 1 |\n+--------+\n \nSELECT 1 || 0;\n \n+--------+\n| 1 || 0 |\n+--------+\n| 1 |\n+--------+\n \nSELECT 0 || 0;\n \n+--------+\n| 0 || 0 |\n+--------+\n| 0 |\n+--------+\n \nSELECT 0 || NULL;\n \n+-----------+\n| 0 || NULL |\n+-----------+\n| NULL |\n+-----------+\n \nSELECT 1 || NULL;\n \n+-----------+\n| 1 || NULL |\n+-----------+\n| 1 |\n+-----------+\n \nIn Oracle mode, from MariaDB 10.3:\n \nSELECT 0 || NULL;\n \n+-----------+\n| 0 || NULL |\n+-----------+\n| 0 |\n+-----------+\n \n\n\nURL: https://mariadb.com/kb/en/or/', '', 'https://mariadb.com/kb/en/or/'),
(283, 'MEDIUMBLOB', 22, 'Syntax\n------ \nMEDIUMBLOB\n \nDescription\n----------- \nA BLOB column with a maximum\nlength of 16,777,215 (224 - 1) bytes.\nEach MEDIUMBLOB value is stored using a three-byte length\nprefix that\nindicates the number of bytes in the value. \n \n\n\nURL: https://mariadb.com/kb/en/mediumblob/', '', 'https://mariadb.com/kb/en/mediumblob/'),
(285, 'MEDIUMTEXT', 22, 'Syntax\n------ \nMEDIUMTEXT [CHARACTER SET charset_name] [COLLATE\ncollation_name]\n \nDescription\n----------- \nA TEXT column with a \nmaximum length of 16,777,215 (224 - 1)\ncharacters. The effective maximum length is less if the\nvalue\ncontains multi-byte characters. Each MEDIUMTEXT value is\nstored using\na three-byte length prefix that indicates the number of\nbytes in the\nvalue.\n \n\n\nURL: https://mariadb.com/kb/en/mediumtext/', '', 'https://mariadb.com/kb/en/mediumtext/'),
(287, 'ROW', 22, 'The ROW data type was introduced in MariaDB 10.3.0.\n \nSyntax\n------ \nROW (  [{,  }... ])\n \nDescription\n----------- \nROW is a data type for stored procedure variables.\n \nFeatures\n \nROW fields as normal variables\n \nROW fields (members) act as normal variables, and are able\nto appear in all\nquery parts where a stored procedure variable is allowed:\nAssignment is using the := operator and the SET command:\n \na.x:= 10;\n \na.x:= b.x;\n \nSET a.x= 10, a.y=20, a.z= b.z;\n \nPassing to functions and operators:\n \nSELECT f1(rec.a), rec.a\n\nURL: https://mariadb.com/kb/en/row/', '', 'https://mariadb.com/kb/en/row/'),
(288, 'SET Data Type', 22, 'Syntax\n------ \nSET(\'value1\',\'value2\',...) [CHARACTER SET charset_name]\n[COLLATE collation_name]\n \nDescription\n----------- \nA set. A string object that can have zero or more values,\neach of\nwhich must be chosen from the list of values \'value1\',\n\'value2\', ... A\nSET column can have a maximum of 64 members. SET values are\nrepresented internally as integers.\n \n\n\nURL: https://mariadb.com/kb/en/set-data-type/', '', 'https://mariadb.com/kb/en/set-data-type/'),
(181, 'Assignment Operator (=)', 15, 'Syntax\n------ \nidentifier = expr\n \nDescription\n----------- \nThe equal sign is used as both an assignment operator in\ncertain contexts, and as a comparison operator. When used as\nassignment operator, the value on the right is assigned to\nthe variable (or column, in some contexts) on the left.\n \nSince its use can be ambiguous, unlike the := assignment\noperator, the = assignment operator cannot be used in all\ncontexts, and is only valid as part of a SET statement, or\nthe SET clause of an UPDATE statement\n \nThis operator works with both user-defined variables and\nlocal variables.\n \nExamples\n-------- \nUPDATE table_name SET x = 2 WHERE x > 100;\n \nSET @x = 1, @y := 2;\n \n\n \n \n \n \n \n \n \n \n\nURL:\nhttps://mariadb.com/kb/en/assignment-operators-assignment-operator/', '', 'https://mariadb.com/kb/en/assignment-operators-assignment-operator/'),
(183, 'Stored Aggregate Functions', 16, 'The ability to create stored aggregate functions was added\nin MariaDB 10.3.3.\n \nAggregate functions are functions that are computed over a\nsequence of rows and return one result for the sequence of\nrows.\n \nCreating a custom aggregate function is done using the\nCREATE FUNCTION statement with two main differences:\nThe addition of the AGGREGATE keyword, so CREATE AGGREGATE\nFUNCTION\nThe FETCH GROUP NEXT ROW instruction inside the loop\nOracle PL/SQL compatibility using SQL/PL is provided\n \nStandard Syntax\n \nCREATE AGGREGATE FUNCTION function_name (parameters) RETURNS\nreturn_type\nBEGIN\n All types of declarations\n DECLARE CONTINUE HANDLER FOR NOT FOUND RETURN return_val;\n LOOP\n FETCH GROUP NEXT ROW; // fetches next row from table\n other instructions\n END LOOP;\nEND\n \nStored aggregate functions were a 2016 Google Summer of Code\nproject by Varun Gupta.\n \nUsing SQL/PL\n \nSET sql_mode=Oracle;\nDELIMITER //\n \nCREATE AGGREGATE FUNCTION function_name (parameters) RETURN\nreturn_type\n declarations\nBEGIN\n LOOP\n FETCH GROUP NEXT ROW; -- fetches next row from table\n -- other instructions\n \n END LOOP;\nEXCEPTION\n WHEN NO_DATA_FOUND THEN\n RETURN return_val;\nEND //\n \nDELIMITER ;\n \nExamples\n-------- \nFirst a simplified example:\n \nCREATE TABLE marks(stud_id INT, grade_count INT);\n \nINSERT INTO marks VALUES (1,6), (2,4), (3,7), (4,5), (5,8);\n \nSELECT * FROM marks;\n \n+---------+-------------+\n| stud_id | grade_count |\n+---------+-------------+\n| 1 | 6 |\n| 2 | 4 |\n| 3 | 7 |\n| 4 | 5 |\n| 5 | 8 |\n+---------+-------------+\n \nDELIMITER //\nCREATE AGGREGATE FUNCTION IF NOT EXISTS aggregate_count(x\nINT) RETURNS INT\nBEGIN\n DECLARE count_students INT DEFAULT 0;\n \n DECLARE CONTINUE HANDLER FOR NOT FOUND\n RETURN count_students;\n \n LOOP\n FETCH GROUP NEXT ROW;\n \n IF x THEN\n SET count_students = count_students+1;\n \n END IF;\n \n END LOOP;\n \nEND //\nDELIMITER ;\n \nA non-trivial example that cannot easily be rewritten using\nexisting functions:\n \nDELIMITER //\nCREATE AGGREGATE FUNCTION medi_int(x INT) RETURNS DOUBLE\nBEGIN\n DECLARE CONTINUE HANDLER FOR NOT FOUND\n BEGIN\n DECLARE res DOUBLE;\n \n DECLARE cnt INT DEFAULT (SELECT COUNT(*) FROM tt);\n DECLARE lim INT DEFAULT (cnt-1) DIV 2;\n \n IF cnt % 2 = 0 THEN\n SET res = (SELECT AVG(a) FROM (SELECT a FROM tt ORDER BY a\nLIMIT lim,2) ttt);\n ELSE\n SET res = (SELECT a FROM tt ORDER BY a LIMIT lim,1);\n END IF;\n \n DROP TEMPORARY TABLE tt;\n \n RETURN res;\n \n END;\n \n CREATE TEMPORARY TABLE tt (a INT);\n LOOP\n FETCH GROUP NEXT ROW;\n \n INSERT INTO tt VALUES (x);\n END LOOP;\n \nEND //\nDELIMITER ;\n \nSQL/PL Example\n \nThis uses the same marks table as created above.\n \nSET sql_mode=Oracle;\n \nDELIMITER //\n \nCREATE AGGREGATE FUNCTION aggregate_count(x INT) RETURN INT\nAS count_students INT DEFAULT 0;\n \nBEGIN\n LOOP\n FETCH GROUP NEXT ROW;\n \n IF x THEN\n SET count_students := count_students+1;\n \n END IF;\n \n END LOOP;\n \nEXCEPTION\n WHEN NO_DATA_FOUND THEN\n RETURN count_students;\n \nEND aggregate_count //\nDELIMITER ;\n \nSELECT aggregate_count(stud_id) FROM marks;\n \n\n\nURL: https://mariadb.com/kb/en/stored-aggregate-functions/', '', 'https://mariadb.com/kb/en/stored-aggregate-functions/'),
(184, 'AVG', 16, 'Syntax\n------ \nAVG([DISTINCT] expr)\n \nDescription\n----------- \nReturns the average value of expr. The DISTINCT option can\nbe used to return the average of the distinct values of\nexpr. NULL values are ignored. It is an aggregate function,\nand so can be used with the GROUP BY clause.\n \nAVG() returns NULL if there were no matching rows.\n \nFrom MariaDB 10.2.0, AVG() can be used as a window function.\n \nExamples\n-------- \nCREATE TABLE sales (sales_value INT);\n \nINSERT INTO sales VALUES(10),(20),(20),(40);\n \nSELECT AVG(sales_value) FROM sales;\n \n+------------------+\n| AVG(sales_value) |\n+------------------+\n| 22.5000 |\n+------------------+\n \nSELECT AVG(DISTINCT(sales_value)) FROM sales;\n \n+----------------------------+\n| AVG(DISTINCT(sales_value)) |\n+----------------------------+\n| 23.3333 |\n+----------------------------+\n \nCommonly, AVG() is used with a GROUP BY clause:\n \nCREATE TABLE student (name CHAR(10), test CHAR(10), score\nTINYINT); \n \nINSERT INTO student VALUES \n (\'Chun\', \'SQL\', 75), (\'Chun\', \'Tuning\', 73), \n (\'Esben\', \'SQL\', 43), (\'Esben\', \'Tuning\', 31), \n (\'Kaolin\', \'SQL\', 56), (\'Kaolin\', \'Tuning\', 88), \n (\'Tatiana\', \'SQL\', 87), (\'Tatiana\', \'Tuning\', 83);\n \nSELECT name, AVG(score) FROM student GROUP BY name;\n \n+---------+------------+\n| name | AVG(score) |\n+---------+------------+\n| Chun | 74.0000 |\n| Esben | 37.0000 |\n| Kaolin | 72.0000 |\n| Tatiana | 85.0000 |\n+---------+------------+\n \nBe careful to avoid this common mistake, not grouping\ncorrectly and returning mismatched data: \n \nSELECT name,test,AVG(score) FROM student;\n \n+------+------+------------+\n| name | test | MIN(score) |\n+------+------+------------+\n| Chun | SQL | 31 |\n+------+------+------------+\n \nAs a window function:\n \nCREATE TABLE student_test (name CHAR(10), test CHAR(10),\nscore TINYINT); \n \nINSERT INTO student_test VALUES \n (\'Chun\', \'SQL\', 75), (\'Chun\', \'Tuning\', 73), \n (\'Esben\', \'SQL\', 43), (\'Esben\', \'Tuning\', 31), \n (\'Kaolin\', \'SQL\', 56), (\'Kaolin\', \'Tuning\', 88), \n (\'Tatiana\', \'SQL\', 87), (\'Tatiana\', \'Tuning\', 83);\n \nSELECT name, test, score, AVG(score) OVER (PARTITION BY\ntest) \n AS average_by_test FROM student_test;\n \n+---------+--------+-------+-----------------+\n| name | test | score | average_by_test |\n+---------+--------+-------+-----------------+\n| Chun | SQL | 75 | 65.2500 |\n| Chun | Tuning | 73 | 68.7500 |\n| Esben | SQL | 43 | 65.2500 |\n| Esben | Tuning | 31 | 68.7500 |\n| Kaolin | SQL | 56 | 65.2500 |\n| Kaolin | Tuning | 88 | 68.7500 |\n| Tatiana | SQL | 87 | 65.2500 |\n| Tatiana | Tuning | 83 | 68.7500 |\n+---------+--------+-------+-----------------+\n \n\n\nURL: https://mariadb.com/kb/en/avg/', '', 'https://mariadb.com/kb/en/avg/'),
(293, 'TIMESTAMP', 22, 'Syntax\n------ \nTIMESTAMP [(\n\nURL: https://mariadb.com/kb/en/timestamp/', '', 'https://mariadb.com/kb/en/timestamp/'),
(294, 'TINYBLOB', 22, 'Syntax\n------ \nTINYBLOB\n \nDescription\n----------- \nA BLOB column with a maximum length of \n255 (28 - 1) bytes. Each\nTINYBLOB value is stored using a one-byte length prefix that\nindicates\nthe number of bytes in the value.\n \n\n\nURL: https://mariadb.com/kb/en/tinyblob/', '', 'https://mariadb.com/kb/en/tinyblob/'),
(296, 'TINYTEXT', 22, 'Syntax\n------ \nTINYTEXT [CHARACTER SET charset_name] [COLLATE\ncollation_name]\n \nDescription\n----------- \nA TEXT column with a maximum length of 255 (28 - 1)\ncharacters. The effective maximum length is less if the\nvalue contains multi-byte characters. Each TINYTEXT value is\nstored using a one-byte length prefix that indicates the\nnumber of bytes in the value.\n \n\n\nURL: https://mariadb.com/kb/en/tinytext/', '', 'https://mariadb.com/kb/en/tinytext/'),
(185, 'BIT_AND', 16, 'Syntax\n------ \nBIT_AND(expr)\n \nDescription\n----------- \nReturns the bitwise AND of all bits in expr. The calculation\nis performed with 64-bit (BIGINT) precision. It is an\naggregate function, and so can be used with the GROUP BY\nclause.\n \nFrom MariaDB 10.2.0, BIT_AND() can be used as a window\nfunction.\n \nExamples\n-------- \nCREATE TABLE vals (x INT);\n \nINSERT INTO vals VALUES(111),(110),(100);\n \nSELECT BIT_AND(x), BIT_OR(x), BIT_XOR(x) FROM vals;\n \n+------------+-----------+------------+\n| BIT_AND(x) | BIT_OR(x) | BIT_XOR(x) |\n+------------+-----------+------------+\n| 100 | 111 | 101 |\n+------------+-----------+------------+\n \nAs an aggregate function:\n \nCREATE TABLE vals2 (category VARCHAR(1), x INT);\n \nINSERT INTO vals2 VALUES\n (\'a\',111),(\'a\',110),(\'a\',100),\n (\'b\',\'000\'),(\'b\',001),(\'b\',011);\n \nSELECT category, BIT_AND(x), BIT_OR(x), BIT_XOR(x) \n FROM vals GROUP BY category;\n \n+----------+------------+-----------+------------+\n| category | BIT_AND(x) | BIT_OR(x) | BIT_XOR(x) |\n+----------+------------+-----------+------------+\n| a | 100 | 111 | 101 |\n| b | 0 | 11 | 10 |\n+----------+------------+-----------+------------+\n \n\n\nURL: https://mariadb.com/kb/en/bit_and/', '', 'https://mariadb.com/kb/en/bit_and/'),
(186, 'BIT_OR', 16, 'Syntax\n------ \nBIT_OR(expr)\n \nDescription\n----------- \nReturns the bitwise OR of all bits in expr. The calculation\nis performed with 64-bit (BIGINT) precision. It is an\naggregate function, and so can be used with the GROUP BY\nclause.\n \nFrom MariaDB 10.2.0, BIT_OR can be used as a window\nfunction.\n \nExamples\n-------- \nCREATE TABLE vals (x INT);\n \nINSERT INTO vals VALUES(111),(110),(100);\n \nSELECT BIT_AND(x), BIT_OR(x), BIT_XOR(x) FROM vals;\n \n+------------+-----------+------------+\n| BIT_AND(x) | BIT_OR(x) | BIT_XOR(x) |\n+------------+-----------+------------+\n| 100 | 111 | 101 |\n+------------+-----------+------------+\n \nAs an aggregate function:\n \nCREATE TABLE vals2 (category VARCHAR(1), x INT);\n \nINSERT INTO vals2 VALUES\n (\'a\',111),(\'a\',110),(\'a\',100),\n (\'b\',\'000\'),(\'b\',001),(\'b\',011);\n \nSELECT category, BIT_AND(x), BIT_OR(x), BIT_XOR(x) \n FROM vals GROUP BY category;\n \n+----------+------------+-----------+------------+\n| category | BIT_AND(x) | BIT_OR(x) | BIT_XOR(x) |\n+----------+------------+-----------+------------+\n| a | 100 | 111 | 101 |\n| b | 0 | 11 | 10 |\n+----------+------------+-----------+------------+\n \n\n\nURL: https://mariadb.com/kb/en/bit_or/', '', 'https://mariadb.com/kb/en/bit_or/'),
(187, 'BIT_XOR', 16, 'Syntax\n------ \nBIT_XOR(expr)\n \nDescription\n----------- \nReturns the bitwise XOR of all bits in expr. The calculation\nis performed with 64-bit (BIGINT) precision. It is an\naggregate function, and so can be used with the GROUP BY\nclause.\n \nFrom MariaDB 10.2.0, BIT_XOR() can be used as a window\nfunction.\n \nExamples\n-------- \nCREATE TABLE vals (x INT);\n \nINSERT INTO vals VALUES(111),(110),(100);\n \nSELECT BIT_AND(x), BIT_OR(x), BIT_XOR(x) FROM vals;\n \n+------------+-----------+------------+\n| BIT_AND(x) | BIT_OR(x) | BIT_XOR(x) |\n+------------+-----------+------------+\n| 100 | 111 | 101 |\n+------------+-----------+------------+\n \nAs an aggregate function:\n \nCREATE TABLE vals2 (category VARCHAR(1), x INT);\n \nINSERT INTO vals2 VALUES\n (\'a\',111),(\'a\',110),(\'a\',100),\n (\'b\',\'000\'),(\'b\',001),(\'b\',011);\n \nSELECT category, BIT_AND(x), BIT_OR(x), BIT_XOR(x) \n FROM vals GROUP BY category;\n \n+----------+------------+-----------+------------+\n| category | BIT_AND(x) | BIT_OR(x) | BIT_XOR(x) |\n+----------+------------+-----------+------------+\n| a | 100 | 111 | 101 |\n| b | 0 | 11 | 10 |\n+----------+------------+-----------+------------+\n \n\n\nURL: https://mariadb.com/kb/en/bit_xor/', '', 'https://mariadb.com/kb/en/bit_xor/'),
(188, 'COUNT', 16, 'Syntax\n------ \nCOUNT(expr)\n \nDescription\n----------- \nReturns a count of the number of non-NULL values of expr in\nthe rows retrieved by a SELECT statement. The result is a\nBIGINT value. It is an aggregate function, and so can be\nused with the GROUP BY clause.\n \nCOUNT(*) counts the total number of rows in a table.\n \nCOUNT() returns 0 if there were no matching rows.\n \nFrom MariaDB 10.2.0, COUNT() can be used as a window\nfunction.\n \nExamples\n-------- \nCREATE TABLE student (name CHAR(10), test CHAR(10), score\nTINYINT); \n \nINSERT INTO student VALUES \n (\'Chun\', \'SQL\', 75), (\'Chun\', \'Tuning\', 73), \n (\'Esben\', \'SQL\', 43), (\'Esben\', \'Tuning\', 31), \n (\'Kaolin\', \'SQL\', 56), (\'Kaolin\', \'Tuning\', 88), \n (\'Tatiana\', \'SQL\', 87), (\'Tatiana\', \'Tuning\', 83);\n \nSELECT COUNT(*) FROM student;\n \n+----------+\n| COUNT(*) |\n+----------+\n| 8 |\n+----------+\n \nCOUNT(DISTINCT) example:\n \nSELECT COUNT(DISTINCT (name)) FROM student;\n \n+------------------------+\n| COUNT(DISTINCT (name)) |\n+------------------------+\n| 4 |\n+------------------------+\n \nAs a window function\n \nCREATE OR REPLACE TABLE student_test (name CHAR(10), test\nCHAR(10), score TINYINT);\n \nINSERT INTO student_test VALUES \n (\'Chun\', \'SQL\', 75), (\'Chun\', \'Tuning\', 73), \n (\'Esben\', \'SQL\', 43), (\'Esben\', \'Tuning\', 31), \n (\'Kaolin\', \'SQL\', 56), (\'Kaolin\', \'Tuning\', 88), \n (\'Tatiana\', \'SQL\', 87);\n \nSELECT name, test, score, COUNT(score) OVER (PARTITION BY\nname) \n AS tests_written FROM student_test;\n \n+---------+--------+-------+---------------+\n| name | test | score | tests_written |\n+---------+--------+-------+---------------+\n| Chun | SQL | 75 | 2 |\n| Chun | Tuning | 73 | 2 |\n| Esben | SQL | 43 | 2 |\n| Esben | Tuning | 31 | 2 |\n| Kaolin | SQL | 56 | 2 |\n| Kaolin | Tuning | 88 | 2 |\n| Tatiana | SQL | 87 | 1 |\n+---------+--------+-------+---------------+\n \n\n\nURL: https://mariadb.com/kb/en/count/', '', 'https://mariadb.com/kb/en/count/'),
(302, 'CLOSE', 23, 'Syntax\n------ \nCLOSE cursor_name\n \nDescription\n----------- \nThis statement closes a previously opened cursor. The cursor\nmust have been previously opened or else an error occurs.\n \nIf not closed explicitly, a cursor is closed at the end of\nthe\ncompound statement in which it was declared.\n \nSee Cursor Overview for an example.\n \n\n\nURL: https://mariadb.com/kb/en/close/', '', 'https://mariadb.com/kb/en/close/'),
(304, 'DECLARE CURSOR', 23, 'Syntax\n------ \n\n\nURL: https://mariadb.com/kb/en/declare-cursor/', '', 'https://mariadb.com/kb/en/declare-cursor/'),
(307, 'FETCH', 23, 'Syntax\n------ \nFETCH cursor_name INTO var_name [, var_name] ...\n \nDescription\n----------- \nThis statement fetches the next row (if a row exists) using\nthe\nspecified open cursor, and advances the cursor pointer.\n \nvar_name can be a local variable, but not a user-defined\nvariable.\n \nIf no more rows are available, a No Data condition occurs\nwith\nSQLSTATE value 02000. To detect this condition, you can set\nup a\nhandler for it (or for a NOT FOUND condition).\n \nSee Cursor Overview for an example.\n \n\n\nURL: https://mariadb.com/kb/en/fetch/', '', 'https://mariadb.com/kb/en/fetch/'),
(309, 'GOTO', 23, 'The GOTO statement was introduced in MariaDB 10.3 for Oracle\ncompatibility.\n \nSyntax\n------ \nGOTO label\n \nDescription\n----------- \nThe GOTO statement causes the code to jump to the specified\nlabel, and continue operating from there. It is only\naccepted when in Oracle mode.\n \nExample\n \nSET sql_mode=ORACLE;\n \nDELIMITER //\n \nCREATE OR REPLACE PROCEDURE p1 AS\n \nBEGIN\n \n SELECT 1;\n \n GOTO label;\n \n SELECT 2;\n \n SELECT 3;\n \nEND;\n \n//\n \nDELIMITER \n \ncall p1();\n+---+\n| 1 |\n+---+\n| 1 |\n+---+\n1 row in set (0.000 sec)\n \n+---+\n| 3 |\n+---+\n| 3 |\n+---+\n1 row in set (0.000 sec)\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/goto/', '', 'https://mariadb.com/kb/en/goto/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(190, 'MAX', 16, 'Syntax\n------ \nMAX([DISTINCT] expr)\n \nDescription\n----------- \nReturns the largest, or maximum, value of expr. MAX() can\nalso take a string\nargument in which case it returns the maximum string value.\nThe DISTINCT\nkeyword can be used to find the maximum of the distinct\nvalues of expr,\nhowever, this produces the same result as omitting DISTINCT.\n \nNote that SET and ENUM fields are currently compared by\ntheir string value rather than their relative position in\nthe set, so MAX() may produce a different highest result\nthan ORDER BY DESC.\n \nIt is an aggregate function, and so can be used with the\nGROUP BY clause.\n \nFrom MariaDB 10.2.2, MAX() can be used as a window function.\n \nMAX() returns NULL if there were no matching rows.\n \nExamples\n-------- \nCREATE TABLE student (name CHAR(10), test CHAR(10), score\nTINYINT); \n \nINSERT INTO student VALUES \n (\'Chun\', \'SQL\', 75), (\'Chun\', \'Tuning\', 73), \n (\'Esben\', \'SQL\', 43), (\'Esben\', \'Tuning\', 31), \n (\'Kaolin\', \'SQL\', 56), (\'Kaolin\', \'Tuning\', 88), \n (\'Tatiana\', \'SQL\', 87), (\'Tatiana\', \'Tuning\', 83);\n \nSELECT name, MAX(score) FROM student GROUP BY name;\n \n+---------+------------+\n| name | MAX(score) |\n+---------+------------+\n| Chun | 75 |\n| Esben | 43 |\n| Kaolin | 88 |\n| Tatiana | 87 |\n+---------+------------+\n \nMAX string:\n \nSELECT MAX(name) FROM student;\n \n+-----------+\n| MAX(name) |\n+-----------+\n| Tatiana |\n+-----------+\n \nBe careful to avoid this common mistake, not grouping\ncorrectly and returning mismatched data: \n \nSELECT name,test,MAX(SCORE) FROM student;\n \n+------+------+------------+\n| name | test | MAX(SCORE) |\n+------+------+------------+\n| Chun | SQL | 88 |\n+------+------+------------+\n \nDifference between ORDER BY DESC and MAX():\n \nCREATE TABLE student2(name CHAR(10),grade\nENUM(\'b\',\'c\',\'a\'));\n \nINSERT INTO student2\nVALUES(\'Chun\',\'b\'),(\'Esben\',\'c\'),(\'Kaolin\',\'a\');\n \nSELECT MAX(grade) FROM student2;\n \n+------------+\n| MAX(grade) |\n+------------+\n| c |\n+------------+\n \nSELECT grade FROM student2 ORDER BY grade DESC LIMIT 1;\n \n+-------+\n| grade |\n+-------+\n| a |\n+-------+\n \nAs a window function:\n \nCREATE OR REPLACE TABLE student_test (name CHAR(10), test\nCHAR(10), score TINYINT);\nINSERT INTO student_test VALUES \n (\'Chun\', \'SQL\', 75), (\'Chun\', \'Tuning\', 73), \n (\'Esben\', \'SQL\', 43), (\'Esben\', \'Tuning\', 31), \n (\'Kaolin\', \'SQL\', 56), (\'Kaolin\', \'Tuning\', 88), \n (\'Tatiana\', \'SQL\', 87);\n \nSELECT name, test, score, MAX(score) \n OVER (PARTITION BY name) AS highest_score FROM\nstudent_test;\n \n+---------+--------+-------+---------------+\n| name | test | score | highest_score |\n+---------+--------+-------+---------------+\n| Chun | SQL | 75 | 75 |\n| Chun | Tuning | 73 | 75 |\n| Esben | SQL | 43 | 43 |\n| Esben | Tuning | 31 | 43 |\n| Kaolin | SQL | 56 | 88 |\n| Kaolin | Tuning | 88 | 88 |\n| Tatiana | SQL | 87 | 87 |\n+---------+--------+-------+---------------+\n \n\n\nURL: https://mariadb.com/kb/en/max/', '', 'https://mariadb.com/kb/en/max/'),
(191, 'MIN', 16, 'Syntax\n------ \nMIN([DISTINCT] expr)\n \nDescription\n----------- \nReturns the minimum value of expr. MIN() may take a string\nargument, in which case it returns the minimum string value.\nThe DISTINCT\nkeyword can be used to find the minimum of the distinct\nvalues of expr,\nhowever, this produces the same result as omitting DISTINCT.\n \nNote that SET and ENUM fields are currently compared by\ntheir string value rather than their relative position in\nthe set, so MIN() may produce a different lowest result than\nORDER BY ASC.\n \nIt is an aggregate function, and so can be used with the\nGROUP BY clause.\n \nFrom MariaDB 10.2.2, MIN() can be used as a window function.\n \nMIN() returns NULL if there were no matching rows.\n \nExamples\n-------- \nCREATE TABLE student (name CHAR(10), test CHAR(10), score\nTINYINT); \n \nINSERT INTO student VALUES \n (\'Chun\', \'SQL\', 75), (\'Chun\', \'Tuning\', 73), \n (\'Esben\', \'SQL\', 43), (\'Esben\', \'Tuning\', 31), \n (\'Kaolin\', \'SQL\', 56), (\'Kaolin\', \'Tuning\', 88), \n (\'Tatiana\', \'SQL\', 87), (\'Tatiana\', \'Tuning\', 83);\n \nSELECT name, MIN(score) FROM student GROUP BY name;\n \n+---------+------------+\n| name | MIN(score) |\n+---------+------------+\n| Chun | 73 |\n| Esben | 31 |\n| Kaolin | 56 |\n| Tatiana | 83 |\n+---------+------------+\n \nMIN() with a string:\n \nSELECT MIN(name) FROM student;\n \n+-----------+\n| MIN(name) |\n+-----------+\n| Chun |\n+-----------+\n \nBe careful to avoid this common mistake, not grouping\ncorrectly and returning mismatched data: \n \nSELECT name,test,MIN(score) FROM student;\n \n+------+------+------------+\n| name | test | MIN(score) |\n+------+------+------------+\n| Chun | SQL | 31 |\n+------+------+------------+\n \nDifference between ORDER BY ASC and MIN():\n \nCREATE TABLE student2(name CHAR(10),grade\nENUM(\'b\',\'c\',\'a\'));\n \nINSERT INTO student2\nVALUES(\'Chun\',\'b\'),(\'Esben\',\'c\'),(\'Kaolin\',\'a\');\n \nSELECT MIN(grade) FROM student2;\n \n+------------+\n| MIN(grade) |\n+------------+\n| a |\n+------------+\n \nSELECT grade FROM student2 ORDER BY grade ASC LIMIT 1;\n \n+-------+\n| grade |\n+-------+\n| b |\n+-------+\n \nAs a window function:\n \nCREATE OR REPLACE TABLE student_test (name CHAR(10), test\nCHAR(10), score TINYINT);\nINSERT INTO student_test VALUES \n (\'Chun\', \'SQL\', 75), (\'Chun\', \'Tuning\', 73), \n (\'Esben\', \'SQL\', 43), (\'Esben\', \'Tuning\', 31), \n (\'Kaolin\', \'SQL\', 56), (\'Kaolin\', \'Tuning\', 88), \n (\'Tatiana\', \'SQL\', 87);\n \nSELECT name, test, score, MIN(score) \n OVER (PARTITION BY name) AS lowest_score FROM student_test;\n \n+---------+--------+-------+--------------+\n| name | test | score | lowest_score |\n+---------+--------+-------+--------------+\n| Chun | SQL | 75 | 73 |\n| Chun | Tuning | 73 | 73 |\n| Esben | SQL | 43 | 31 |\n| Esben | Tuning | 31 | 31 |\n| Kaolin | SQL | 56 | 56 |\n| Kaolin | Tuning | 88 | 56 |\n| Tatiana | SQL | 87 | 87 |\n+---------+--------+-------+--------------+\n \n\n\nURL: https://mariadb.com/kb/en/min/', '', 'https://mariadb.com/kb/en/min/'),
(310, 'IF', 23, 'Syntax\n------ \nIF search_condition THEN statement_list\n [ELSEIF search_condition THEN statement_list] ...\n [ELSE statement_list]\nEND IF;\n \nDescription\n----------- \nIF implements a basic conditional construct. If the\nsearch_condition\nevaluates to true, the corresponding SQL statement list is\nexecuted.\nIf no search_condition matches, the statement list in the\nELSE clause\nis executed. Each statement_list consists of one or more\nstatements.\n \n\n\nURL: https://mariadb.com/kb/en/if/', '', 'https://mariadb.com/kb/en/if/'),
(311, 'ITERATE', 23, 'Syntax\n------ \nITERATE label\n \nITERATE can appear only within LOOP, REPEAT, and WHILE\nstatements.\nITERATE means \"do the loop again\", and uses the\nstatement\'s label to determine which statements to repeat.\nThe label must be in the same stored program, not in a\ncaller procedure.\n \nIf you try to use ITERATE with a non-existing label, or if\nthe label is associated to a construct which is not a loop,\nthe following error will be produced:\n \nERROR 1308 (42000): ITERATE with no matching label: \n \nBelow is an example of how ITERATE might be used:\n \nCREATE PROCEDURE doiterate(p1 INT)\nBEGIN\n label1: LOOP\n SET p1 = p1 + 1;\n \n IF p1 \n\nURL: https://mariadb.com/kb/en/iterate/', '', 'https://mariadb.com/kb/en/iterate/'),
(314, 'LOOP', 23, 'Syntax\n------ \n[begin_label:] LOOP\n statement_list\nEND LOOP [end_label]\n \nDescription\n----------- \nLOOP implements a simple loop construct, enabling repeated\nexecution\nof the statement list, which consists of one or more\nstatements, each\nterminated by a semicolon (i.e., ;) statement delimiter. The\nstatements\nwithin the loop are repeated until the loop is exited;\nusually this is\naccomplished with a LEAVE statement.\n \nA LOOP statement can be labeled. end_label cannot be given\nunless\nbegin_label also is present. If both are present, they must\nbe the\nsame.\n \nSee Delimiters in the mysql client for more on delimiter\nusage in the client.\n \n\n\nURL: https://mariadb.com/kb/en/loop/', '', 'https://mariadb.com/kb/en/loop/'),
(192, 'STD', 16, 'Syntax\n------ \nSTD(expr)\n \nDescription\n----------- \nReturns the population standard deviation of expr. This is\nan extension\nto standard SQL. The standard SQL function STDDEV_POP() can\nbe used instead. \n \nIt is an aggregate function, and so can be used with the\nGROUP BY clause.\n \nFrom MariaDB 10.2.2, STD() can be used as a window function.\n \nThis function returns NULL if there were no matching rows.\n \nExamples\n-------- \nAs an aggregate function:\n \nCREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n \nINSERT INTO stats VALUES \n (\'a\',1),(\'a\',2),(\'a\',3),\n (\'b\',11),(\'b\',12),(\'b\',20),(\'b\',30),(\'b\',60);\n \nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n FROM stats GROUP BY category;\n \n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a | 0.8165 | 1.0000 | 0.6667 |\n| b | 18.0400 | 20.1693 | 325.4400 |\n+----------+---------------+----------------+------------+\n \nAs a window function:\n \nCREATE OR REPLACE TABLE student_test (name CHAR(10), test\nCHAR(10), score TINYINT);\n \nINSERT INTO student_test VALUES \n (\'Chun\', \'SQL\', 75), (\'Chun\', \'Tuning\', 73), \n (\'Esben\', \'SQL\', 43), (\'Esben\', \'Tuning\', 31), \n (\'Kaolin\', \'SQL\', 56), (\'Kaolin\', \'Tuning\', 88), \n (\'Tatiana\', \'SQL\', 87);\n \nSELECT name, test, score, STDDEV_POP(score) \n OVER (PARTITION BY test) AS stddev_results FROM\nstudent_test;\n \n+---------+--------+-------+----------------+\n| name | test | score | stddev_results |\n+---------+--------+-------+----------------+\n| Chun | SQL | 75 | 16.9466 |\n| Chun | Tuning | 73 | 24.1247 |\n| Esben | SQL | 43 | 16.9466 |\n| Esben | Tuning | 31 | 24.1247 |\n| Kaolin | SQL | 56 | 16.9466 |\n| Kaolin | Tuning | 88 | 24.1247 |\n| Tatiana | SQL | 87 | 16.9466 |\n+---------+--------+-------+----------------+\n \n\n\nURL: https://mariadb.com/kb/en/std/', '', 'https://mariadb.com/kb/en/std/'),
(193, 'STDDEV', 16, 'Syntax\n------ \nSTDDEV(expr)\n \nDescription\n----------- \nReturns the population standard deviation of expr. This\nfunction is\nprovided for compatibility with Oracle. The standard SQL\nfunction\nSTDDEV_POP() can be used instead.\n \nIt is an aggregate function, and so can be used with the\nGROUP BY clause.\n \nFrom MariaDB 10.2.2, STDDEV() can be used as a window\nfunction.\n \nThis function returns NULL if there were no matching rows.\n \nExamples\n-------- \nAs an aggregate function:\n \nCREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n \nINSERT INTO stats VALUES \n (\'a\',1),(\'a\',2),(\'a\',3),\n (\'b\',11),(\'b\',12),(\'b\',20),(\'b\',30),(\'b\',60);\n \nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n FROM stats GROUP BY category;\n \n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a | 0.8165 | 1.0000 | 0.6667 |\n| b | 18.0400 | 20.1693 | 325.4400 |\n+----------+---------------+----------------+------------+\n \nAs a window function:\n \nCREATE OR REPLACE TABLE student_test (name CHAR(10), test\nCHAR(10), score TINYINT);\n \nINSERT INTO student_test VALUES \n (\'Chun\', \'SQL\', 75), (\'Chun\', \'Tuning\', 73), \n (\'Esben\', \'SQL\', 43), (\'Esben\', \'Tuning\', 31), \n (\'Kaolin\', \'SQL\', 56), (\'Kaolin\', \'Tuning\', 88), \n (\'Tatiana\', \'SQL\', 87);\n \nSELECT name, test, score, STDDEV_POP(score) \n OVER (PARTITION BY test) AS stddev_results FROM\nstudent_test;\n \n+---------+--------+-------+----------------+\n| name | test | score | stddev_results |\n+---------+--------+-------+----------------+\n| Chun | SQL | 75 | 16.9466 |\n| Chun | Tuning | 73 | 24.1247 |\n| Esben | SQL | 43 | 16.9466 |\n| Esben | Tuning | 31 | 24.1247 |\n| Kaolin | SQL | 56 | 16.9466 |\n| Kaolin | Tuning | 88 | 24.1247 |\n| Tatiana | SQL | 87 | 16.9466 |\n+---------+--------+-------+----------------+\n \n\n\nURL: https://mariadb.com/kb/en/stddev/', '', 'https://mariadb.com/kb/en/stddev/'),
(194, 'STDDEV_POP', 16, 'Syntax\n------ \nSTDDEV_POP(expr)\n \nDescription\n----------- \nReturns the population standard deviation of expr (the\nsquare root of\nVAR_POP()). You can also use STD() or\nSTDDEV(), which are equivalent but not standard SQL.\n \nIt is an aggregate function, and so can be used with the\nGROUP BY clause.\n \nFrom MariaDB 10.2.2, STDDEV_POP() can be used as a window\nfunction.\n \nSTDDEV_POP() returns NULL if there were no matching rows.\n \nExamples\n-------- \nAs an aggregate function:\n \nCREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n \nINSERT INTO stats VALUES \n (\'a\',1),(\'a\',2),(\'a\',3),\n (\'b\',11),(\'b\',12),(\'b\',20),(\'b\',30),(\'b\',60);\n \nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n FROM stats GROUP BY category;\n \n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a | 0.8165 | 1.0000 | 0.6667 |\n| b | 18.0400 | 20.1693 | 325.4400 |\n+----------+---------------+----------------+------------+\n \nAs a window function:\n \nCREATE OR REPLACE TABLE student_test (name CHAR(10), test\nCHAR(10), score TINYINT);\n \nINSERT INTO student_test VALUES \n (\'Chun\', \'SQL\', 75), (\'Chun\', \'Tuning\', 73), \n (\'Esben\', \'SQL\', 43), (\'Esben\', \'Tuning\', 31), \n (\'Kaolin\', \'SQL\', 56), (\'Kaolin\', \'Tuning\', 88), \n (\'Tatiana\', \'SQL\', 87);\n \nSELECT name, test, score, STDDEV_POP(score) \n OVER (PARTITION BY test) AS stddev_results FROM\nstudent_test;\n \n+---------+--------+-------+----------------+\n| name | test | score | stddev_results |\n+---------+--------+-------+----------------+\n| Chun | SQL | 75 | 16.9466 |\n| Chun | Tuning | 73 | 24.1247 |\n| Esben | SQL | 43 | 16.9466 |\n| Esben | Tuning | 31 | 24.1247 |\n| Kaolin | SQL | 56 | 16.9466 |\n| Kaolin | Tuning | 88 | 24.1247 |\n| Tatiana | SQL | 87 | 16.9466 |\n+---------+--------+-------+----------------+\n \n\n\nURL: https://mariadb.com/kb/en/stddev_pop/', '', 'https://mariadb.com/kb/en/stddev_pop/'),
(315, 'OPEN', 23, 'Syntax\n------ \n\n\nURL: https://mariadb.com/kb/en/open/', '', 'https://mariadb.com/kb/en/open/'),
(318, 'RETURN', 23, 'Syntax\n------ \nRETURN expr \n \nThe RETURN statement terminates execution of a stored\nfunction and\nreturns the value expr to the function caller. There must be\nat least\none RETURN statement in a stored function. If the function\nhas multiple exit points, all exit points must have a\nRETURN.\n \nThis statement is not used in stored procedures, triggers,\nor events. LEAVE can be used instead.\n \nThe following example shows that RETURN can return the\nresult of a scalar subquery:\n \nCREATE FUNCTION users_count() RETURNS BOOL\n READS SQL DATA\nBEGIN\n RETURN (SELECT COUNT(DISTINCT User) FROM mysql.user);\nEND;\n \n\n \n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/return/', '', 'https://mariadb.com/kb/en/return/'),
(321, 'WHILE', 23, 'Syntax\n------ \n[begin_label:] WHILE search_condition DO\n statement_list\nEND WHILE [end_label]\n \nDescription\n----------- \nThe statement list within a WHILE statement is repeated as\nlong as the\nsearch_condition is true. statement_list consists of one or\nmore\nstatements. If the loop must be executed at least once,\nREPEAT ... LOOP can be used instead.\n \nA WHILE statement can be labeled. end_label cannot be given\nunless\nbegin_label also is present. If both are present, they must\nbe the\nsame.\n \nExamples\n-------- \nCREATE PROCEDURE dowhile()\nBEGIN\n DECLARE v1 INT DEFAULT 5;\n \n WHILE v1 > 0 DO\n ...\n SET v1 = v1 - 1;\n \n END WHILE;\n \nEND\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/while/', '', 'https://mariadb.com/kb/en/while/'),
(196, 'SUM', 16, 'Syntax\n------ \nSUM([DISTINCT] expr)\n \nDescription\n----------- \nReturns the sum of expr. If the return set has no rows,\nSUM() returns\nNULL. The DISTINCT keyword can be used to sum only the\ndistinct values\nof expr.\n \nFrom MariaDB 10.2.0, SUM() can be used as a window function,\nalthough not with the DISTINCT specifier.\n \nExamples\n-------- \nCREATE TABLE sales (sales_value INT);\nINSERT INTO sales VALUES(10),(20),(20),(40);\n \nSELECT SUM(sales_value) FROM sales;\n \n+------------------+\n| SUM(sales_value) |\n+------------------+\n| 90 |\n+------------------+\n \nSELECT SUM(DISTINCT(sales_value)) FROM sales;\n \n+----------------------------+\n| SUM(DISTINCT(sales_value)) |\n+----------------------------+\n| 70 |\n+----------------------------+\n \nCommonly, SUM is used with a GROUP BY clause:\n \nCREATE TABLE sales (name CHAR(10), month CHAR(10), units\nINT);\n \nINSERT INTO sales VALUES \n (\'Chun\', \'Jan\', 75), (\'Chun\', \'Feb\', 73),\n (\'Esben\', \'Jan\', 43), (\'Esben\', \'Feb\', 31),\n (\'Kaolin\', \'Jan\', 56), (\'Kaolin\', \'Feb\', 88),\n (\'Tatiana\', \'Jan\', 87), (\'Tatiana\', \'Feb\', 83);\n \nSELECT name, SUM(units) FROM sales GROUP BY name;\n \n+---------+------------+\n| name | SUM(units) |\n+---------+------------+\n| Chun | 148 |\n| Esben | 74 |\n| Kaolin | 144 |\n| Tatiana | 170 |\n+---------+------------+\n \nThe GROUP BY clause is required when using an aggregate\nfunction along with regular column data, otherwise the\nresult will be a mismatch, as in the following common type\nof mistake:\n \nSELECT name,SUM(units) FROM sales\n;\n+------+------------+\n| name | SUM(units) |\n+------+------------+\n| Chun | 536 |\n+------+------------+\n \nAs a window function:\n \nCREATE OR REPLACE TABLE student_test (name CHAR(10), test\nCHAR(10), score TINYINT);\nINSERT INTO student_test VALUES \n (\'Chun\', \'SQL\', 75), (\'Chun\', \'Tuning\', 73), \n (\'Esben\', \'SQL\', 43), (\'Esben\', \'Tuning\', 31), \n (\'Kaolin\', \'SQL\', 56), (\'Kaolin\', \'Tuning\', 88), \n (\'Tatiana\', \'SQL\', 87);\n \nSELECT name, test, score, SUM(score) OVER (PARTITION BY\nname) AS total_score FROM student_test;\n \n+---------+--------+-------+-------------+\n| name | test | score | total_score |\n+---------+--------+-------+-------------+\n| Chun | SQL | 75 | 148 |\n| Chun | Tuning | 73 | 148 |\n| Esben | SQL | 43 | 74 |\n| Esben | Tuning | 31 | 74 |\n| Kaolin | SQL | 56 | 144 |\n| Kaolin | Tuning | 88 | 144 |\n| Tatiana | SQL | 87 | 87 |\n+---------+--------+-------+-------------+\n \n\n\nURL: https://mariadb.com/kb/en/sum/', '', 'https://mariadb.com/kb/en/sum/'),
(197, 'VARIANCE', 16, 'Syntax\n------ \nVARIANCE(expr) \n \nDescription\n----------- \nReturns the population standard variance of expr. This is an\nextension to\nstandard SQL. The standard SQL function VAR_POP() can be\nused\ninstead.\n \nVariance is calculated by\nworking out the mean for the set\nfor each number, subtracting the mean and squaring the\nresult\ncalculate the average of the resulting differences\n \nIt is an aggregate function, and so can be used with the\nGROUP BY clause.\n \nFrom MariaDB 10.2.2, VARIANCE() can be used as a window\nfunction.\n \nVARIANCE() returns NULL if there were no matching rows.\n \nExamples\n-------- \nCREATE TABLE v(i tinyint);\n \nINSERT INTO v VALUES(101),(99);\n \nSELECT VARIANCE(i) FROM v;\n \n+-------------+\n| VARIANCE(i) |\n+-------------+\n| 1.0000 |\n+-------------+\n \nINSERT INTO v VALUES(120),(80);\n \nSELECT VARIANCE(i) FROM v;\n \n+-------------+\n| VARIANCE(i) |\n+-------------+\n| 200.5000 |\n+-------------+\n \nAs an aggregate function:\n \nCREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n \nINSERT INTO stats VALUES \n (\'a\',1),(\'a\',2),(\'a\',3),\n (\'b\',11),(\'b\',12),(\'b\',20),(\'b\',30),(\'b\',60);\n \nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n FROM stats GROUP BY category;\n \n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a | 0.8165 | 1.0000 | 0.6667 |\n| b | 18.0400 | 20.1693 | 325.4400 |\n+----------+---------------+----------------+------------+\n \nAs a window function:\n \nCREATE OR REPLACE TABLE student_test (name CHAR(10), test\nCHAR(10), score TINYINT);\n \nINSERT INTO student_test VALUES \n (\'Chun\', \'SQL\', 75), (\'Chun\', \'Tuning\', 73), \n (\'Esben\', \'SQL\', 43), (\'Esben\', \'Tuning\', 31), \n (\'Kaolin\', \'SQL\', 56), (\'Kaolin\', \'Tuning\', 88), \n (\'Tatiana\', \'SQL\', 87);\n \nSELECT name, test, score, VAR_POP(score) \n OVER (PARTITION BY test) AS variance_results FROM\nstudent_test;\n \n+---------+--------+-------+------------------+\n| name | test | score | variance_results |\n+---------+--------+-------+------------------+\n| Chun | SQL | 75 | 287.1875 |\n| Chun | Tuning | 73 | 582.0000 |\n| Esben | SQL | 43 | 287.1875 |\n| Esben | Tuning | 31 | 582.0000 |\n| Kaolin | SQL | 56 | 287.1875 |\n| Kaolin | Tuning | 88 | 582.0000 |\n| Tatiana | SQL | 87 | 287.1875 |\n+---------+--------+-------+------------------+\n \n\n\nURL: https://mariadb.com/kb/en/variance/', '', 'https://mariadb.com/kb/en/variance/'),
(322, 'BUFFER', 24, 'A synonym for ST_BUFFER.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/buffer/', '', 'https://mariadb.com/kb/en/buffer/'),
(323, 'CONVEXHULL', 24, 'A synonym for ST_CONVEXHULL.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/convexhull/', '', 'https://mariadb.com/kb/en/convexhull/'),
(324, 'GEOMETRYCOLLECTION', 24, 'Syntax\n------ \nGeometryCollection(g1,g2,...)\n \nDescription\n----------- \nConstructs a WKB GeometryCollection. If any argument is not\na well-formed WKB representation of a geometry, the return\nvalue is NULL.\n \nExamples\n-------- \nCREATE TABLE gis_geometrycollection (g GEOMETRYCOLLECTION);\nSHOW FIELDS FROM gis_geometrycollection;\n \nINSERT INTO gis_geometrycollection VALUES\n (GeomCollFromText(\'GEOMETRYCOLLECTION(POINT(0 0),\nLINESTRING(0 0,10 10))\')),\n (GeometryFromWKB(AsWKB(GeometryCollection(Point(44, 6),\nLineString(Point(3, 6), Point(7, 9)))))),\n (GeomFromText(\'GeometryCollection()\')),\n (GeomFromText(\'GeometryCollection EMPTY\'));\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/geometrycollection/', '', 'https://mariadb.com/kb/en/geometrycollection/'),
(326, 'MULTILINESTRING', 24, 'Syntax\n------ \nMultiLineString(ls1,ls2,...)\n \nDescription\n----------- \nConstructs a WKB MultiLineString value using WKB LineString\narguments. If any argument is not a WKB LineString, the\nreturn value is\nNULL.\n \nExample\n \nCREATE TABLE gis_multi_line (g MULTILINESTRING);\nINSERT INTO gis_multi_line VALUES\n (MultiLineStringFromText(\'MULTILINESTRING((10 48,10 21,10\n0),(16 0,16 23,16 48))\')),\n (MLineFromText(\'MULTILINESTRING((10 48,10 21,10 0))\')),\n (MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 2),\nPoint(3, 5)), LineString(Point(2, 5),Point(5, 8),Point(21,\n7))))));\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/multilinestring/', '', 'https://mariadb.com/kb/en/multilinestring/'),
(327, 'MULTIPOINT', 24, 'Syntax\n------ \nMultiPoint(pt1,pt2,...)\n \nDescription\n----------- \nConstructs a WKB MultiPoint value using WKB Point arguments.\nIf any argument is not a WKB Point, the return value is\nNULL.\n \nExamples\n-------- \nSET @g = ST_GEOMFROMTEXT(\'MultiPoint( 1 1, 2 2, 5 3, 7 2, 9\n3, 8 4, 6 6, 6 9, 4 9, 1 5 )\');\n \nCREATE TABLE gis_multi_point (g MULTIPOINT);\nINSERT INTO gis_multi_point VALUES\n (MultiPointFromText(\'MULTIPOINT(0 0,10 10,10 20,20\n20)\')),\n (MPointFromText(\'MULTIPOINT(1 1,11 11,11 21,21 21)\')),\n (MPointFromWKB(AsWKB(MultiPoint(Point(3, 6), Point(4,\n10)))));\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/multipoint/', '', 'https://mariadb.com/kb/en/multipoint/'),
(198, 'VAR_POP', 16, 'Syntax\n------ \nVAR_POP(expr)\n \nDescription\n----------- \nReturns the population standard variance of expr. It\nconsiders rows as\nthe whole population, not as a sample, so it has the number\nof rows as\nthe denominator. You can also use VARIANCE(), which is\nequivalent but\nis not standard SQL.\n \nVariance is calculated by\nworking out the mean for the set\nfor each number, subtracting the mean and squaring the\nresult\ncalculate the average of the resulting differences\n \nIt is an aggregate function, and so can be used with the\nGROUP BY clause.\n \nFrom MariaDB 10.2.2, VAR_POP() can be used as a window\nfunction.\n \nVAR_POP() returns NULL if there were no matching rows.\n \nExamples\n-------- \nCREATE TABLE v(i tinyint);\n \nINSERT INTO v VALUES(101),(99);\n \nSELECT VAR_POP(i) FROM v;\n \n+------------+\n| VAR_POP(i) |\n+------------+\n| 1.0000 |\n+------------+\n \nINSERT INTO v VALUES(120),(80);\n \nSELECT VAR_POP(i) FROM v;\n \n+------------+\n| VAR_POP(i) |\n+------------+\n| 200.5000 |\n+------------+\n \nAs an aggregate function:\n \nCREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n \nINSERT INTO stats VALUES \n (\'a\',1),(\'a\',2),(\'a\',3),\n (\'b\',11),(\'b\',12),(\'b\',20),(\'b\',30),(\'b\',60);\n \nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n FROM stats GROUP BY category;\n \n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a | 0.8165 | 1.0000 | 0.6667 |\n| b | 18.0400 | 20.1693 | 325.4400 |\n+----------+---------------+----------------+------------+\n \nAs a window function:\n \nCREATE OR REPLACE TABLE student_test (name CHAR(10), test\nCHAR(10), score TINYINT);\n \nINSERT INTO student_test VALUES \n (\'Chun\', \'SQL\', 75), (\'Chun\', \'Tuning\', 73), \n (\'Esben\', \'SQL\', 43), (\'Esben\', \'Tuning\', 31), \n (\'Kaolin\', \'SQL\', 56), (\'Kaolin\', \'Tuning\', 88), \n (\'Tatiana\', \'SQL\', 87);\n \nSELECT name, test, score, VAR_POP(score) \n OVER (PARTITION BY test) AS variance_results FROM\nstudent_test;\n \n+---------+--------+-------+------------------+\n| name | test | score | variance_results |\n+---------+--------+-------+------------------+\n| Chun | SQL | 75 | 287.1875 |\n| Chun | Tuning | 73 | 582.0000 |\n| Esben | SQL | 43 | 287.1875 |\n| Esben | Tuning | 31 | 582.0000 |\n| Kaolin | SQL | 56 | 287.1875 |\n| Kaolin | Tuning | 88 | 582.0000 |\n| Tatiana | SQL | 87 | 287.1875 |\n+---------+--------+-------+------------------+\n \n\n\nURL: https://mariadb.com/kb/en/var_pop/', '', 'https://mariadb.com/kb/en/var_pop/'),
(199, 'VAR_SAMP', 16, 'Syntax\n------ \nVAR_SAMP(expr)\n \nDescription\n----------- \nReturns the sample variance of expr. That is, the\ndenominator is the number of rows minus one.\n \nIt is an aggregate function, and so can be used with the\nGROUP BY clause.\n \nFrom MariaDB 10.2.2, VAR_SAMP() can be used as a window\nfunction.\n \nVAR_SAMP() returns NULL if there were no matching rows.\n \nExamples\n-------- \nAs an aggregate function:\n \nCREATE OR REPLACE TABLE stats (category VARCHAR(2), x INT);\n \nINSERT INTO stats VALUES \n (\'a\',1),(\'a\',2),(\'a\',3),\n (\'b\',11),(\'b\',12),(\'b\',20),(\'b\',30),(\'b\',60);\n \nSELECT category, STDDEV_POP(x), STDDEV_SAMP(x), VAR_POP(x) \n FROM stats GROUP BY category;\n \n+----------+---------------+----------------+------------+\n| category | STDDEV_POP(x) | STDDEV_SAMP(x) | VAR_POP(x) |\n+----------+---------------+----------------+------------+\n| a | 0.8165 | 1.0000 | 0.6667 |\n| b | 18.0400 | 20.1693 | 325.4400 |\n+----------+---------------+----------------+------------+\n \nAs a window function:\n \nCREATE OR REPLACE TABLE student_test (name CHAR(10), test\nCHAR(10), score TINYINT);\n \nINSERT INTO student_test VALUES \n (\'Chun\', \'SQL\', 75), (\'Chun\', \'Tuning\', 73), \n (\'Esben\', \'SQL\', 43), (\'Esben\', \'Tuning\', 31), \n (\'Kaolin\', \'SQL\', 56), (\'Kaolin\', \'Tuning\', 88), \n (\'Tatiana\', \'SQL\', 87);\n \nSELECT name, test, score, VAR_SAMP(score) \n OVER (PARTITION BY test) AS variance_results FROM\nstudent_test;\n \n+---------+--------+-------+------------------+\n| name | test | score | variance_results |\n+---------+--------+-------+------------------+\n| Chun | SQL | 75 | 382.9167 |\n| Chun | Tuning | 73 | 873.0000 |\n| Esben | SQL | 43 | 382.9167 |\n| Esben | Tuning | 31 | 873.0000 |\n| Kaolin | SQL | 56 | 382.9167 |\n| Kaolin | Tuning | 88 | 873.0000 |\n| Tatiana | SQL | 87 | 382.9167 |\n+---------+--------+-------+------------------+\n \n\n\nURL: https://mariadb.com/kb/en/var_samp/', '', 'https://mariadb.com/kb/en/var_samp/'),
(202, 'CHARSET', 17, 'Syntax\n------ \nCHARSET(str)\n \nDescription\n----------- \nReturns the character set of the string argument. If str is\nnot a string, it is considered as a binary string (so the\nfunction returns \'binary\'). This applies to NULL, too. The\nreturn value is a string in the utf8 character set.\n \nExamples\n-------- \nSELECT CHARSET(\'abc\');\n+----------------+\n| CHARSET(\'abc\') |\n+----------------+\n| latin1 |\n+----------------+\n \nSELECT CHARSET(CONVERT(\'abc\' USING utf8));\n+------------------------------------+\n| CHARSET(CONVERT(\'abc\' USING utf8)) |\n+------------------------------------+\n| utf8 |\n+------------------------------------+\n \nSELECT CHARSET(USER());\n+-----------------+\n| CHARSET(USER()) |\n+-----------------+\n| utf8 |\n+-----------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/charset/', '', 'https://mariadb.com/kb/en/charset/'),
(328, 'MULTIPOLYGON', 24, 'Syntax\n------ \nMultiPolygon(poly1,poly2,...)\n \nDescription\n----------- \nConstructs a WKB MultiPolygon value from a set of WKB\nPolygon arguments. If any argument is not a WKB Polygon, the\nreturn value is NULL.\n \nExample\n \nCREATE TABLE gis_multi_polygon (g MULTIPOLYGON);\nINSERT INTO gis_multi_polygon VALUES\n (MultiPolygonFromText(\'MULTIPOLYGON(((28 26,28 0,84 0,84\n42,28 26),(52 18,66 23,73 9,48 6,52 18)),((59 18,67 18,67\n13,59 13,59 18)))\')),\n (MPolyFromText(\'MULTIPOLYGON(((28 26,28 0,84 0,84 42,28\n26),(52 18,66 23,73 9,48 6,52 18)),((59 18,67 18,67 13,59\n13,59 18)))\')),\n (MPolyFromWKB(AsWKB(MultiPolygon(Polygon(LineString(Point(0,\n3), Point(3, 3), Point(3, 0), Point(0, 3)))))));\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/multipolygon/', '', 'https://mariadb.com/kb/en/multipolygon/'),
(329, 'POINT', 24, 'Syntax\n------ \nPoint(x,y)\n \nDescription\n----------- \nConstructs a WKB Point using the given coordinates.\n \nExamples\n-------- \nSET @g = ST_GEOMFROMTEXT(\'Point(1 1)\');\n \nCREATE TABLE gis_point (g POINT);\nINSERT INTO gis_point VALUES\n (PointFromText(\'POINT(10 10)\')),\n (PointFromText(\'POINT(20 10)\')),\n (PointFromText(\'POINT(20 20)\')),\n (PointFromWKB(AsWKB(PointFromText(\'POINT(10 20)\'))));\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/point/', '', 'https://mariadb.com/kb/en/point/'),
(330, 'PointOnSurface', 24, 'A synonym for ST_PointOnSurface.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/pointonsurface/', '', 'https://mariadb.com/kb/en/pointonsurface/'),
(334, 'ST_INTERSECTION', 24, 'Syntax\n------ \nST_INTERSECTION(g1,g2)\n \nDescription\n----------- \nReturns a geometry that is the intersection, or shared\nportion, of geometry g1 and geometry g2.\n \nExamples\n-------- \nSET @g1 = ST_GEOMFROMTEXT(\'POINT(2 1)\');\n \nSET @g2 = ST_GEOMFROMTEXT(\'LINESTRING(2 1, 0 2)\');\n \nSELECT ASTEXT(ST_INTERSECTION(@g1,@g2));\n+----------------------------------+\n| ASTEXT(ST_INTERSECTION(@g1,@g2)) |\n+----------------------------------+\n| POINT(2 1) |\n+----------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_intersection/', '', 'https://mariadb.com/kb/en/st_intersection/'),
(203, 'COERCIBILITY', 17, 'Syntax\n------ \nCOERCIBILITY(str)\n \nDescription\n----------- \nReturns the collation coercibility value of the string\nargument. Coercibility defines what will be converted to\nwhat in case of collation conflict, with an expression with\nhigher coercibility being converted to the collation of an\nexpression with lower coercibility.\n \nCoercibility | Description | Example | \n \n0 | Explicit | Value using a COLLATE clause | \n \n1 | No collation | Concatenated strings using different\ncollations | \n \n2 | Implicit | Column value | \n \n3 | Constant | USER() return value | \n \n4 | Coercible | Literal string | \n \n5 | Ignorable | NULL or derived from NULL | \n \nExamples\n-------- \nSELECT COERCIBILITY(\'abc\' COLLATE latin1_swedish_ci);\n+-----------------------------------------------+\n| COERCIBILITY(\'abc\' COLLATE latin1_swedish_ci) |\n+-----------------------------------------------+\n| 0 |\n+-----------------------------------------------+\n \nSELECT COERCIBILITY(USER());\n+----------------------+\n| COERCIBILITY(USER()) |\n+----------------------+\n| 3 |\n+----------------------+\n \nSELECT COERCIBILITY(\'abc\');\n+---------------------+\n| COERCIBILITY(\'abc\') |\n+---------------------+\n| 4 |\n+---------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/coercibility/', '', 'https://mariadb.com/kb/en/coercibility/'),
(206, 'CURRENT_ROLE', 17, 'Roles were introduced in MariaDB 10.0.5.\n \nSyntax\n------ \nCURRENT_ROLE, CURRENT_ROLE()\n \nDescription\n----------- \nReturns the current role name. This determines your access\nprivileges. The return value is a string in the\nutf8 character set.\n \nIf there is no current role, NULL is returned.\n \nThe output of SELECT CURRENT_ROLE is equivalent to the\ncontents of the ENABLED_ROLES Information Schema table.\n \nUSER() returns the combination of user and host used to\nlogin. CURRENT_USER() returns the account used to determine\ncurrent connection\'s privileges.\n \nExamples\n-------- \nSELECT CURRENT_ROLE;\n \n+--------------+\n| CURRENT_ROLE |\n+--------------+\n| NULL |\n+--------------+\n \nSET ROLE staff;\n \nSELECT CURRENT_ROLE;\n \n+--------------+\n| CURRENT_ROLE |\n+--------------+\n| staff |\n+--------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/current_role/', '', 'https://mariadb.com/kb/en/current_role/'),
(207, 'CURRENT_USER', 17, 'Syntax\n------ \nCURRENT_USER, CURRENT_USER()\n \nDescription\n----------- \nReturns the user name and host name combination for the\nMariaDB account\nthat the server used to authenticate the current client.\nThis account\ndetermines your access privileges. The return value is a\nstring in the\nutf8 character set.\n \nThe value of CURRENT_USER() can differ from the value of\nUSER(). CURRENT_ROLE() returns the current active role.\n \nExamples\n-------- \nshell> mysql --user=\"anonymous\"\n \nMariaDB [(none)]> select user(),current_user();\n+---------------------+----------------+\n| user() | current_user() |\n+---------------------+----------------+\n| anonymous@localhost | @localhost |\n+---------------------+----------------+\n \nWhen calling CURRENT_USER() in a stored procedure, it\nreturns the owner of the stored procedure, as defined with\nDEFINER.\n \n\n\nURL: https://mariadb.com/kb/en/current_user/', '', 'https://mariadb.com/kb/en/current_user/'),
(208, 'DATABASE', 17, 'Syntax\n------ \nDATABASE()\n \nDescription\n----------- \nReturns the default (current) database name as a string in\nthe utf8 character set. If there is no default database,\nDATABASE() returns NULL. Within a stored routine, the\ndefault database is the database that the routine is\nassociated with, which is not necessarily the same as the\ndatabase that is the default in the calling context.\n \nSCHEMA() is a synonym for DATABASE().\n \nTo select a default database, the USE statement can be run.\nAnother way to set the default database is specifying its\nname at mysql command line client startup.\n \nExamples\n-------- \nSELECT DATABASE();\n+------------+\n| DATABASE() |\n+------------+\n| NULL |\n+------------+\n \nUSE test;\n \nDatabase changed\n \nSELECT DATABASE();\n+------------+\n| DATABASE() |\n+------------+\n| test |\n+------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/database/', '', 'https://mariadb.com/kb/en/database/'),
(210, 'DEFAULT', 17, 'Syntax\n------ \nDEFAULT(col_name)\n \nDescription\n----------- \nReturns the default value for a table column. If the column\nhas no default value, NULL is returned.\nFor integer columns using AUTO_INCREMENT, 0 is returned.\n \nWhen using DEFAULT as a value to set in an INSERT or UPDATE\nstatement, you can use the bare keyword DEFAULT without the\nparentheses and argument to\nrefer to the column in context. You can only use DEFAULT as\na bare keyword if you are using it\nalone without a surrounding expression or function.\n \nExamples\n-------- \nSelect only non-default values for a column:\n \nSELECT i FROM t WHERE i != DEFAULT(i);\n \nUpdate values to be one greater than the default value:\n \nUPDATE t SET i = DEFAULT(i)+1 WHERE i \n\nURL: https://mariadb.com/kb/en/default/', '', 'https://mariadb.com/kb/en/default/'),
(335, 'ST_POINTONSURFACE', 24, 'ST_POINTONSURFACE() was introduced in MariaDB 10.1.2\n \nSyntax\n------ \nST_PointOnSurface(g)\nPointOnSurface(g)\n \nDescription\n----------- \nGiven a geometry, returns a POINT guaranteed to intersect a\nsurface. However, see MDEV-7514.\n \nST_PointOnSurface() and PointOnSurface() are synonyms.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_pointonsurface/', '', 'https://mariadb.com/kb/en/st_pointonsurface/'),
(340, 'BINLOG', 26, 'Syntax\n------ \nBINLOG \'str\'\n \nDescription\n----------- \nBINLOG is an internal-use statement. It is generated by the\nmysqlbinlog program as the printable representation of\ncertain events\nin binary log files. The \'str\' value is a base 64-encoded\nstring the that server decodes to determine the data change\nindicated by the\ncorresponding event. This statement requires the SUPER\nprivilege. It was added in MySQL 5.1.5.\n \n\n\nURL: https://mariadb.com/kb/en/binlog/', '', 'https://mariadb.com/kb/en/binlog/'),
(342, 'FLUSH', 26, 'Syntax\n------ \nFLUSH [NO_WRITE_TO_BINLOG | LOCAL]\n flush_option [, flush_option] ...\n \nor when flushing tables:\n \nFLUSH [NO_WRITE_TO_BINLOG | LOCAL] TABLES [table_list]\n[table_flush_option]\n \nwhere table_list is a list of tables separated by , (comma).\n \nDescription\n----------- \nThe FLUSH statement clears or reloads various internal\ncaches used by\nMariaDB. To execute FLUSH, you must have the RELOAD\nprivilege. See GRANT.\n \nThe RESET statement is similar to FLUSH. See\nRESET.\n \nYou cannot issue a FLUSH statement from within a stored\nfunction or a trigger. Doing so within a stored procedure is\npermitted, as long as it is not called by a stored function\nor trigger. See Stored Routine Limitations, Stored Function\nLimitations and Trigger Limitations.\n \nIf a listed table is a view, an error like the following\nwill be produced:\n \nERROR 1347 (HY000): \'test.v\' is not BASE TABLE\n \nBy default, FLUSH statements are written to the binary log\nand will be replicated. The NO_WRITE_TO_BINLOG keyword\n(LOCAL is an alias) will ensure the statement is not written\nto the binary log. \n \nThe different flush options are:\n \nOption | Description | \n \nCHANGED_PAGE_BITMAPS | Internal command used for backup\npurposes. See the Information Schema CHANGED_PAGE_BITMAPS\nTable. | \n \nCLIENT_STATISTICS | Reset client statistics (see SHOW\nCLIENT_STATISTICS). | \n \nDES_KEY_FILE | Reloads the DES key file (Specified with the\n--des-key-file startup option). | \n \nHOSTS | Flush the hostname cache (used for converting ip to\nhost names and for unblocking blocked hosts. See\nmax_connect_errors) | \n \nINDEX_STATISTICS | Reset index statistics (see SHOW\nINDEX_STATISTICS). | \n \n[ERROR | ENGINE | GENERAL | SLOW | BINARY | RELAY] LOGS |\nClose and reopen the specified log type, or all log types if\nnone are specified. FLUSH RELAY LOGS [connection-name] can\nbe used to flush the relay logs for a specific connection.\nOnly one connection can be specified per FLUSH command. See\nMulti-source replication. FLUSH ENGINE LOGS will delete all\nunneeded Aria redo logs. Since MariaDB 10.1.30 and MariaDB\n10.2.11, FLUSH BINARY LOGS\nDELETE_DOMAIN_ID=(list-of-domains) can be used to discard\nobsolete GTID domains from the server\'s binary log state.\nIn order for this to be successful, no event group from the\nlisted GTID domains can be present in existing binary log\nfiles. If some still exist, then they must be purged prior\nto executing this command. If the command completes\nsuccessfully, then it also rotates the binary log. | \n \nMASTER | Deprecated option, use RESET MASTER instead. | \n \nPRIVILEGES | Reload all privileges from the privilege tables\nin the mysql database. If the server is started with\n--skip-grant-table option, this will activate the privilege\ntables again. | \n \nQUERY CACHE | Defragment the query cache to better utilize\nits memory. If you want to reset the query cache, you can do\nit with RESET QUERY CACHE. | \n \nQUERY_RESPONSE_TIME | See the QUERY_RESPONSE_TIME plugin. | \n \nSLAVE | Deprecated option, use RESET SLAVE instead. | \n \nSSL | Used to dynamically reinitialize the server\'s TLS\ncontext by reloading the files defined by several TLS system\nvariables. See FLUSH SSL for more information. This command\nwas first added in MariaDB 10.4.1. | \n \nSTATUS | Resets all server status variables that can be\nreset to 0. Not all global status variables support this, so\nnot all global values are reset. See FLUSH STATUS for more\ninformation. | \n \nTABLE | Close tables given as options or all open tables if\nno table list was used. From MariaDB 10.4.1, using without\nany table list will only close tables not in use, and tables\nnot locked by the FLUSH TABLES connection. If there are no\nlocked tables, FLUSH TABLES will be instant and will not\ncause any waits, as it no longer waits for tables in use.\nWhen a table list is provided, from MariaDB 10.4.1, the\nserver will wait for the end of any transactions that are\nusing the tables. Previously, FLUSH TABLES only waited for\nthe statements to complete. | \n \nTABLES | Same as FLUSH TABLE. | \n \nTABLES ... FOR EXPORT | For InnoDB tables, flushes table\nchanges to disk to permit binary table copies while the\nserver is running. Introduced in MariaDB 10.0.8. See FLUSH\nTABLES ... FOR EXPORT for more. | \n \nTABLES WITH READ LOCK | Closes all open tables. New tables\nare only allowed to be opened with read locks until an\nUNLOCK TABLES is given. | \n \nTABLES WITH READ LOCK AND DISABLE CHECKPOINT | As TABLES\nWITH READ LOCK but also disable all checkpoint writes by\ntransactional table engines. This is useful when doing a\ndisk snapshot of all tables. | \n \nTABLE_STATISTICS | Reset table statistics (see SHOW\nTABLE_STATISTICS). | \n \nUSER_RESOURCES | Resets all per hour user resources. This\nenables clients that have exhausted their resources to\nconnect again. | \n \nUSER_STATISTICS | Reset user statistics (see SHOW\nUSER_STATISTICS). | \n \nYou can also use the mysqladmin client to flush things. Use\nmysqladmin --help to examine what flush commands it\nsupports.\n \nFLUSH STATUS\n \nServer status variables can be reset by executing the\nfollowing:\n \nFLUSH STATUS;\n \nGlobal Status Variables that Support FLUSH STATUS\n \nNot all global status variables support being reset by FLUSH\nSTATUS. Currently, the following status variables are reset\nby FLUSH STATUS:\nAborted_clients\nAborted_connects\nAria_pagecache_blocks_not_flushed\nAria_pagecache_blocks_unused\nAria_pagecache_blocks_used\nBinlog_cache_disk_use\nBinlog_cache_use\nBinlog_stmt_cache_disk_use\nBinlog_stmt_cache_use\nConnection_errors_accept\nConnection_errors_internal\nConnection_errors_max_connections\nConnection_errors_peer_address\nConnection_errors_select\nConnection_errors_tcpwrap\nCreated_tmp_files\nDelayed_errors\nDelayed_writes\nFeature_check_constraint\nFeature_delay_key_write\nMax_used_connections\nOpened_plugin_libraries\nPerformance_schema_accounts_lost\nPerformance_schema_cond_instances_lost\nPerformance_schema_digest_lost\nPerformance_schema_file_handles_lost\nPerformance_schema_file_instances_lost\nPerformance_schema_hosts_lost\nPerformance_schema_locker_lost\nPerformance_schema_mutex_instances_lost\nPerformance_schema_rwlock_instances_lost\nPerformance_schema_session_connect_attrs_lost\nPerformance_schema_socket_instances_lost\nPerformance_schema_stage_classes_lost\nPerformance_schema_statement_classes_lost\nPerformance_schema_table_handles_lost\nPerformance_schema_table_instances_lost\nPerformance_schema_thread_instances_lost\nPerformance_schema_users_lost\nQcache_hits\nQcache_inserts\nQcache_lowmem_prunes\nQcache_not_cached\nRpl_semi_sync_master_no_times\nRpl_semi_sync_master_no_tx\nRpl_semi_sync_master_timefunc_failures\nRpl_semi_sync_master_wait_pos_backtraverse\nRpl_semi_sync_master_yes_tx\nRpl_transactions_multi_engine\nServer_audit_writes_failed\nSlave_retried_transactions\nSlow_launch_threads\nSsl_accept_renegotiates\nSsl_accepts\nSsl_callback_cache_hits\nSsl_client_connects\nSsl_connect_renegotiates\nSsl_ctx_verify_depth\nSsl_ctx_verify_mode\nSsl_finished_accepts\nSsl_finished_connects\nSsl_session_cache_hits\nSsl_session_cache_misses\nSsl_session_cache_overflows\nSsl_session_cache_size\nSsl_session_cache_timeouts\nSsl_sessions_reused\nSsl_used_session_cache_entries\nSubquery_cache_hit\nSubquery_cache_miss\nTable_locks_immediate\nTable_locks_waited\nTc_log_max_pages_used\nTc_log_page_waits\nTransactions_gtid_foreign_engine\nTransactions_multi_engine\n \nFLUSH SSL\n \nThe FLUSH SSL command was first added in MariaDB 10.4.\n \nIn MariaDB 10.4 and later, the FLUSH SSL command can be used\nto dynamically reinitialize the server\'s TLS context. This\nis most useful if you need to replace a certificate that is\nabout to expire without restarting the server.\n \nThis operation is performed by reloading the files defined\nby the following TLS system variables:\nssl_cert\nssl_key\nssl_ca\nssl_capath\nssl_crl\nssl_crlpath\n \nThese TLS system variables are not dynamic, so their values\ncan not be changed without restarting the server.\n \nIf you want to dynamically reinitialize the server\'s TLS\ncontext, then you need to change the certificate and key\nfiles at the relevant paths defined by these TLS system\nvariables, without actually changing the values of the\nvariables. See MDEV-19341 for more information.\n \nReducing Memory Usage\n \nTo flush some of the global caches that take up memory, you\ncould execute the following command:\n \nFLUSH LOCAL HOSTS,\n QUERY CACHE, \n TABLE_STATISTICS, \n INDEX_STATISTICS, \n USER_STATISTICS;\n \n\n \n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/flush/', '', 'https://mariadb.com/kb/en/flush/'),
(343, 'FLUSH QUERY CACHE', 26, 'Description\n----------- \nYou can defragment the query cache to better utilize its\nmemory with\nthe FLUSH QUERY CACHE statement. The statement does not\nremove any queries from the cache.\n \nThe RESET QUERY CACHE statement removes all query results\nfrom the query cache.\nThe FLUSH TABLES statement also does this.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/flush-query-cache/', '', 'https://mariadb.com/kb/en/flush-query-cache/'),
(347, 'LOAD INDEX', 26, 'Syntax\n------ \nLOAD INDEX INTO CACHE\n tbl_index_list [, tbl_index_list] ...\n \ntbl_index_list:\n tbl_name\n [[INDEX|KEY] (index_name[, index_name] ...)]\n [IGNORE LEAVES]\n \nDescription\n----------- \nThe LOAD INDEX INTO CACHE statement preloads a table index\ninto the key\ncache to which it has been assigned by an explicit CACHE\nINDEX\nstatement, or into the default key cache otherwise. \nLOAD INDEX INTO CACHE is used only for MyISAM or Aria\ntables. Until MariaDB 5.3, it was not supported for tables\nhaving user-defined partitioning, but this limitation was\nremoved in MariaDB 5.5.\n \nThe IGNORE LEAVES modifier causes only blocks for the\nnonleaf nodes of\nthe index to be preloaded.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/load-index/', '', 'https://mariadb.com/kb/en/load-index/'),
(377, 'SHOW FUNCTION CODE', 26, 'Syntax\n------ \nSHOW FUNCTION CODE func_name\n \nDescription\n----------- \nSHOW FUNCTION CODE shows a representation of the internal\nimplementation of the stored function.\n \nIt is similar to SHOW PROCEDURE CODE but for stored\nfunctions.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-function-code/', '', 'https://mariadb.com/kb/en/show-function-code/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(209, 'DECODE_HISTOGRAM', 17, 'DECODE_HISTOGRAM() was introduced in MariaDB 10.0.2\n \nSyntax\n------ \nDECODE_HISTOGRAM(hist_type,histogram)\n \nNote: Before MariaDB 10.0.10 the arguments were reversed.\n \nDescription\n----------- \nReturns a string of comma separated numeric values\ncorresponding to a probability distribution represented by\nthe histogram of type hist_type (SINGLE_PREC_HB or\nDOUBLE_PREC_HB). The hist_type and histogram would be\ncommonly used from the mysql.column_stats table.\n \nSee Histogram Based Statistics for details.\n \nExamples\n-------- \nCREATE TABLE origin (\n i INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,\n v INT UNSIGNED NOT NULL\n);\n \nINSERT INTO origin(v) VALUES \n (1),(2),(3),(4),(5),(10),(20),\n (30),(40),(50),(60),(70),(80),\n (90),(100),(200),(400),(800);\n \nSET histogram_size=10,histogram_type=SINGLE_PREC_HB;\n \nANALYZE TABLE origin PERSISTENT FOR ALL;\n \n+-------------+---------+----------+-----------------------------------------+\n| Table | Op | Msg_type | Msg_text |\n+-------------+---------+----------+-----------------------------------------+\n| test.origin | analyze | status | Engine-independent\nstatistics collected |\n| test.origin | analyze | status | OK |\n+-------------+---------+----------+-----------------------------------------+\n \nSELECT db_name,table_name,column_name,hist_type,\n hex(histogram),decode_histogram(hist_type,histogram) \n FROM mysql.column_stats WHERE db_name=\'test\' and\ntable_name=\'origin\';\n \n+---------+------------+-------------+----------------+----------------------+-------------------------------------------------------------------+\n| db_name | table_name | column_name | hist_type |\nhex(histogram) | decode_histogram(hist_type,histogram) |\n+---------+------------+-------------+----------------+----------------------+-------------------------------------------------------------------+\n| test | origin | i | SINGLE_PREC_HB | 0F2D3C5A7887A5C3D2F0\n|\n0.059,0.118,0.059,0.118,0.118,0.059,0.118,0.118,0.059,0.118,0.059\n|\n| test | origin | v | SINGLE_PREC_HB | 000001060C0F161C1F7F\n|\n0.000,0.000,0.004,0.020,0.024,0.012,0.027,0.024,0.012,0.376,0.502\n|\n+---------+------------+-------------+----------------+----------------------+-------------------------------------------------------------------+\n \nSET histogram_size=20,histogram_type=DOUBLE_PREC_HB;\n \nANALYZE TABLE origin PERSISTENT FOR ALL;\n \n+-------------+---------+----------+-----------------------------------------+\n| Table | Op | Msg_type | Msg_text |\n+-------------+---------+----------+-----------------------------------------+\n| test.origin | analyze | status | Engine-independent\nstatistics collected |\n| test.origin | analyze | status | OK |\n+-------------+---------+----------+-----------------------------------------+\n \nSELECT db_name,table_name,column_name,\n hist_type,hex(histogram),decode_histogram(hist_type,histogram)\n\n FROM mysql.column_stats WHERE db_name=\'test\' and\ntable_name=\'origin\';\n \n+---------+------------+-------------+----------------+------------------------------------------+-----------------------------------------------------------------------------------------+\n| db_name | table_name | column_name | hist_type |\nhex(histogram) | decode_histogram(hist_type,histogram) |\n+---------+------------+-------------+----------------+------------------------------------------+-----------------------------------------------------------------------------------------+\n| test | origin | i | DOUBLE_PREC_HB |\n0F0F2D2D3C3C5A5A78788787A5A5C3C3D2D2F0F0 |\n0.05882,0.11765,0.05882,0.11765,0.11765,0.05882,0.11765,0.11765,0.05882,0.11765,0.05882\n|\n| test | origin | v | DOUBLE_PREC_HB |\n5200F600480116067E0CB30F1B16831CB81FD67F |\n0.00125,0.00250,0.00125,0.01877,0.02502,0.01253,0.02502,0.02502,0.01253,0.37546,0.50063\n|\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/decode_histogram/', '', 'https://mariadb.com/kb/en/decode_histogram/'),
(211, 'FOUND_ROWS', 17, 'Syntax\n------ \nFOUND_ROWS()\n \nDescription\n----------- \nA SELECT statement may include a LIMIT clause to restrict\nthe number\nof rows the server returns to the client. In some cases, it\nis\ndesirable to know how many rows the statement would have\nreturned\nwithout the LIMIT, but without running the statement again.\nTo obtain\nthis row count, include a SQL_CALC_FOUND_ROWS option in the\nSELECT\nstatement, and then invoke FOUND_ROWS() afterwards.\n \nYou can also use FOUND_ROWS() to obtain the number of rows\nreturned by a SELECT which does not contain a LIMIT clause.\nIn this case you don\'t need to use the SQL_CALC_FOUND_ROWS\noption. This can be useful for example in a stored\nprocedure.\n \nAlso, this function works with some other statements which\nreturn a resultset, including SHOW, DESC and HELP. For\nDELETE ... RETURNING you should use ROW_COUNT(). It also\nworks as a prepared statement, or after executing a prepared\nstatement.\n \nStatements which don\'t return any results don\'t affect\nFOUND_ROWS() - the previous value will still be returned.\n \nWarning: When used after a CALL statement, this function\nreturns the number of rows selected by the last query in the\nprocedure, not by the whole procedure.\n \nStatements using the FOUND_ROWS() function are not safe for\nreplication.\n \nExamples\n-------- \nSHOW ENGINES;\n \n+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+\n| Engine | Support | Comment | Transactions | XA |\nSavepoints |\n+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+\n| InnoDB | DEFAULT | Supports transactions, row-level\nlocking, and foreign keys | YES | YES | YES |\n...\n| SPHINX | YES | Sphinx storage engine | NO | NO | NO |\n+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+\n11 rows in set (0.01 sec)\n \nSELECT FOUND_ROWS();\n+--------------+\n| FOUND_ROWS() |\n+--------------+\n| 11 |\n+--------------+\n \nSELECT SQL_CALC_FOUND_ROWS * FROM tbl_name WHERE id > 100\nLIMIT 10;\n \nSELECT FOUND_ROWS();\n+--------------+\n| FOUND_ROWS() |\n+--------------+\n| 23 |\n+--------------+\n \n\n\nURL: https://mariadb.com/kb/en/found_rows/', '', 'https://mariadb.com/kb/en/found_rows/'),
(393, 'SHOW PROFILES', 26, 'Syntax\n------ \nSHOW PROFILES\n \nDescription\n----------- \nThe SHOW PROFILES statement displays profiling information\nthat indicates resource usage for statements executed during\nthe course of the\ncurrent session. It is used together with \nSHOW PROFILE.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-profiles/', '', 'https://mariadb.com/kb/en/show-profiles/'),
(394, 'SHOW QUERY_RESPONSE_TIME', 26, 'SHOW QUERY_RESPONSE_TIME was introduced in MariaDB 10.1.1.\n \nStarting with MariaDB 10.1.1, which introduced the\nInformation Schema plugin extension, it is possible to use\nSHOW QUERY_RESPONSE_TIME as an alternative for retrieving\ninformation from the QUERY_RESPONSE_TIME plugin.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-query_response_time/', '', 'https://mariadb.com/kb/en/show-query_response_time/'),
(397, 'SHOW SLAVE STATUS', 26, 'Syntax\n------ \nSHOW SLAVE [\"connection_name\"] STATUS\n \nor\n \nSHOW ALL SLAVES STATUS\n \nDescription\n----------- \nThis statement is to be run on a slave and provides status\ninformation on essential parameters of the replication slave\nthreads.\n \nThis statement requires the SUPER or the REPLICATION_CLIENT\nprivilege.\n \nMulti-source\n \nMariaDB 10.0 introduced the FULL and \"connection_name\"\noptions to\nallow you to connect to many masters at the same time.\n \nALL SLAVES gives you a list of all connections to the\nmaster.\n \nThe rows will be sorted according to Connection_name.\n \nIf you specify a connection_name, you only get the\ninformation about that\nconnection. If connection_name is not used, then the name\nset by default_master_connection is used. If the connection\nname doesn\'t exist you will get an error:\nThere is no master connection for \'xxx\'.\n \nColumn descriptions\n \nName | Description | Added | \n \nConnection_name | Name of the master connection. Returned\nwith SHOW ALL SLAVES STATUS only. | MariaDB 10.0 | \n \nSlave_SQL_State | State of SQL thread. Returned with SHOW\nALL SLAVES STATUS only. See Slave SQL Thread States. |\nMariaDB 10.0 | \n \nSlave_IO_State | State of I/O thread. See Slave I/O Thread\nStates. | MariaDB 10.0 | \n \nMaster_host | Master host that the slave is connected to. | \n| \n \nMaster_user | Account user name being used to connect to the\nmaster. |  | \n \nMaster_port | The port being used to connect to the master.\n|  | \n \nConnect_Retry | Time in seconds between retries to connect.\nThe default is 60. The CHANGE MASTER TO statement can set\nthis. The master-retry-count option determines the maximum\nnumber of reconnection attempts. |  | \n \nMaster_Log_File | Name of the master binary log file that\nthe I/O thread is currently reading from. |  | \n \nRead_Master_Log_Pos | Position up to which the I/O thread\nhas read in the current master binary log file. |  | \n \nRelay_Log_File | Name of the relay log file that the SQL\nthread is currently processing. |  | \n \nRelay_Log_Pos | Position up to which the SQL thread has\nfinished processing in the current relay log file. |  | \n \nRelay_Master_Log_File | Name of the master binary log file\nthat contains the most recent event executed by the SQL\nthread. |  | \n \nSlave_IO_Running | Whether the slave I/O thread is running\nand connected (Yes), running but not connected to a master\n(Connecting) or not running (No). |  | \n \nSlave_SQL_Running | Whether or not the SQL thread is\nrunning. |  | \n \nReplicate_Do_DB | Databases specified for replicating with\nthe replicate_do_db option. |  | \n \nReplicate_Ignore_DB | Databases specified for ignoring with\nthe replicate_ignore_db option. |  | \n \nReplicate_Do_Table | Tables specified for replicating with\nthe replicate_do_table option. |  | \n \nReplicate_Ignore_Table | Tables specified for ignoring with\nthe replicate_ignore_table option. |  | \n \nReplicate_Wild_Do_Table | Tables specified for replicating\nwith the replicate_wild_do_table option. |  | \n \nReplicate_Wild_Ignore_Table | Tables specified for ignoring\nwith the replicate_wild_ignore_table option. |  | \n \nLast_Errno | Alias for Last_SQL_Errno (see below) |  | \n \nLast Error | Alias for Last_SQL_Error (see below) |  | \n \nSkip_Counter | Number of events that a slave skips from the\nmaster, as recorded in the sql_slave_skip_counter system\nvariable. |  | \n \nExec_Master_Log_Pos | Position up to which the SQL thread\nhas processed in the current master binary log file. Can be\nused to start a new slave from a current slave with the\nCHANGE MASTER TO ... MASTER_LOG_POS option. |  | \n \nRelay_Log_Space | Total size of all relay log files\ncombined. |  | \n \nUntil_Condition |  |  | \n \nUntil_Log_File | The MASTER_LOG_FILE value of the START\nSLAVE UNTIL condition. |  | \n \nUntil_Log_Pos | The MASTER_LOG_POS value of the START SLAVE\nUNTIL condition. |  | \n \nMaster_SSL_Allowed | Whether an SSL connection is permitted\n(Yes), not permitted (No) or permitted but without the slave\nhaving SSL support enabled (Ignored) |  | \n \nMaster_SSL_CA_File | The MASTER_SSL_CA option of the CHANGE\nMASTER TO statement. |  | \n \nMaster_SSL_CA_Path | The MASTER_SSL_CAPATH option of the\nCHANGE MASTER TO statement. |  | \n \nMaster_SSL_Cert | The MASTER_SSL_CERT option of the CHANGE\nMASTER TO statement. |  | \n \nMaster_SSL_Cipher | The MASTER_SSL_CIPHER option of the\nCHANGE MASTER TO statement. |  | \n \nMaster_SSL_Key | The MASTER_SSL_KEY option of the CHANGE\nMASTER TO statement. |  | \n \nSeconds_Behind_Master | Difference between the timestamp\nlogged on the master for the event that the slave is\ncurrently processing, and the current timestamp on the\nslave. Zero if the slave is not currently processing an\nevent. From MariaDB 10.0.23 and MariaDB 10.1.9, with\nparallel replication, seconds_behind_master is updated only\nafter transactions commit. |  | \n \nMaster_SSL_Verify_Server_Cert | The\nMASTER_SSL_VERIFY_SERVER_CERT option of the CHANGE MASTER TO\nstatement. |  | \n \nLast_IO_Errno | Error code of the most recent error that\ncaused the I/O thread to stop (also recorded in the slave\'s\nerror log). 0 means no error. RESET SLAVE or RESET MASTER\nwill reset this value. |  | \n \nLast_IO_Error | Error message of the most recent error that\ncaused the I/O thread to stop (also recorded in the slave\'s\nerror log). An empty string means no error. RESET SLAVE or\nRESET MASTER will reset this value. |  | \n \nLast_SQL_Errno | Error code of the most recent error that\ncaused the SQL thread to stop (also recorded in the slave\'s\nerror log). 0 means no error. RESET SLAVE or RESET MASTER\nwill reset this value. |  | \n \nLast_SQL_Error | Error message of the most recent error that\ncaused the SQL thread to stop (also recorded in the slave\'s\nerror log). An empty string means no error. RESET SLAVE or\nRESET MASTER will reset this value. |  | \n \nReplicate_Ignore_Server_Ids | List of server_ids that are\ncurrently being ignored for replication purposes, or an\nempty string for none, as specified in the IGNORE_SERVER_IDS\noption of the CHANGE MASTER TO statement. |  | \n \nMaster_Server_Id | The master\'s server_id value. |  | \n \nMaster_SSL_Crl | The MASTER_SSL_CRL option of the CHANGE\nMASTER TO statement. | MariaDB 10.0 | \n \nMaster_SSL_Crlpath | The MASTER_SSL_CRLPATH option of the\nCHANGE MASTER TO statement. | MariaDB 10.0 | \n \nUsing_Gtid | Whether or not global transaction ID\'s are\nbeing used for replication (can be No, Slave_Pos, or\nCurrent_Pos). | MariaDB 10.0.2 | \n \nGtid_IO_Pos | Current global transaction ID value. | MariaDB\n10.0.2 | \n \nRetried_transactions | Number of retried transactions for\nthis connection. Returned with SHOW ALL SLAVES STATUS only.\n| MariaDB 10.0 | \n \nMax_relay_log_size | Max relay log size for this connection.\nReturned with SHOW ALL SLAVES STATUS only. | MariaDB 10.0 | \n \nExecuted_log_entries | How many log entries the slave has\nexecuted. Returned with SHOW ALL SLAVES STATUS only. |\nMariaDB 10.0 | \n \nSlave_received_heartbeats | How many heartbeats we have got\nfrom the master. Returned with SHOW ALL SLAVES STATUS only.\n| MariaDB 10.0 | \n \nSlave_heartbeat_period | How often to request a heartbeat\npacket from the master (in seconds). Returned with SHOW ALL\nSLAVES STATUS only. | MariaDB 10.0 | \n \nGtid_Slave_Pos | GTID of the last event group replicated on\na slave server, for each replication domain, as stored in\nthe gtid_slave_pos system variable. Returned with SHOW ALL\nSLAVES STATUS only. | MariaDB 10.0 | \n \nSQL_Delay | Value specified by MASTER_DELAY in CHANGE MASTER\n(or 0 if none). | MariaDB 10.2.3 | \n \nSQL_Remaining_Delay | When the slave is delaying the\nexecution of an event due to MASTER_DELAY, this is the\nnumber of seconds of delay remaining before the event will\nbe applied. Otherwise, the value is NULL. | MariaDB 10.2.3 |\n\n \nSlave_SQL_Running_State | The state of the SQL driver\nthreads, same as in SHOW PROCESSLIST. When the slave is\ndelaying the execution of an event due to MASTER_DELAY, this\nfield displays: \"Waiting until MASTER_DELAY seconds after\nmaster executed event\". | MariaDB 10.2.3 | \n \nSlave_DDL_Groups | This status variable counts the\noccurrence of DDL statements. This is a slave-side counter\nfor optimistic parallel replication. | MariaDB 10.3.7 | \n \nSlave_Non_Transactional_Groups | This status variable counts\nthe occurrence of non-transactional event groups. This is a\nslave-side counter for optimistic parallel replication. |\nMariaDB 10.3.7 | \n \nSlave_Transactional_Groups | This status variable counts the\noccurrence of transactional event groups. This is a\nslave-side counter for optimistic parallel replication. |\nMariaDB 10.3.7 | \n \nExamples\n-------- \nIf you issue this statement using the mysql client,\nyou can use a \\G statement terminator rather than a\nsemicolon to\nobtain a more readable vertical layout.\n \nSHOW SLAVE STATUS\\G\n*************************** 1. row\n***************************\n Slave_IO_State: Waiting for master to send event\n Master_Host: db01.example.com\n Master_User: replicant\n Master_Port: 3306\n Connect_Retry: 60\n Master_Log_File: mariadb-bin.000010\n Read_Master_Log_Pos: 548\n Relay_Log_File: relay-bin.000004\n Relay_Log_Pos: 837\n Relay_Master_Log_File: mariadb-bin.000010\n Slave_IO_Running: Yes\n Slave_SQL_Running: Yes\n Replicate_Do_DB: \n Replicate_Ignore_DB: \n Replicate_Do_Table: \n Replicate_Ignore_Table: \n Replicate_Wild_Do_Table: \n Replicate_Wild_Ignore_Table: \n Last_Errno: 0\n Last_Error: \n Skip_Counter: 0\n Exec_Master_Log_Pos: 548\n Relay_Log_Space: 1497\n Until_Condition: None\n Until_Log_File: \n Until_Log_Pos: 0\n Master_SSL_Allowed: No\n Master_SSL_CA_File: \n Master_SSL_CA_Path: \n Master_SSL_Cert: \n Master_SSL_Cipher: \n Master_SSL_Key: \n Seconds_Behind_Master: 0\nMaster_SSL_Verify_Server_Cert: No\n Last_IO_Errno: 0\n Last_IO_Error: \n Last_SQL_Errno: 0\n Last_SQL_Error: \n Replicate_Ignore_Server_Ids: \n Master_Server_Id: 101\n Master_SSL_Crl: \n Master_SSL_Crlpath: \n Using_Gtid: No\n Gtid_IO_Pos: \n \nMariaDB [(none)]> SHOW ALL SLAVES STATUS\\G\n*************************** 1. row\n***************************\n Connection_name: \n Slave_SQL_State: Slave has read all relay log; waiting for\nthe slave I/O thread to update it\n Slave_IO_State: Waiting for master to send event\n Master_Host: db01.example.com\n Master_User: replicant\n Master_Port: 3306\n Connect_Retry: 60\n Master_Log_File: mariadb-bin.000010\n Read_Master_Log_Pos: 3608\n Relay_Log_File: relay-bin.000004\n Relay_Log_Pos: 3897\n Relay_Master_Log_File: mariadb-bin.000010\n Slave_IO_Running: Yes\n Slave_SQL_Running: Yes\n Replicate_Do_DB: \n Replicate_Ignore_DB: \n Replicate_Do_Table: \n Replicate_Ignore_Table: \n Replicate_Wild_Do_Table: \n Replicate_Wild_Ignore_Table: \n Last_Errno: 0\n Last_Error: \n Skip_Counter: 0\n Exec_Master_Log_Pos: 3608\n Relay_Log_Space: 4557\n Until_Condition: None\n Until_Log_File: \n Until_Log_Pos: 0\n Master_SSL_Allowed: No\n Master_SSL_CA_File: \n Master_SSL_CA_Path: \n Master_SSL_Cert: \n Master_SSL_Cipher: \n Master_SSL_Key: \n Seconds_Behind_Master: 0\nMaster_SSL_Verify_Server_Cert: No\n Last_IO_Errno: 0\n Last_IO_Error: \n Last_SQL_Errno: 0\n Last_SQL_Error: \n Replicate_Ignore_Server_Ids: \n Master_Server_Id: 101\n Master_SSL_Crl: \n Master_SSL_Crlpath: \n Using_Gtid: No\n Gtid_IO_Pos:\n Retried_transactions: 0\n Max_relay_log_size: 104857600\n Executed_log_entries: 40\n Slave_received_heartbeats: 11\n Slave_heartbeat_period: 1800.000\n Gtid_Slave_Pos: 0-101-2320\n \nYou can also access some of the variables directly from\nstatus variables:\n \nSET @@default_master_connection=\"test\" ;\nshow status like \"%slave%\"\n \nVariable_name Value\nCom_show_slave_hosts 0\nCom_show_slave_status 0\nCom_start_all_slaves 0\nCom_start_slave 0\nCom_stop_all_slaves 0\nCom_stop_slave 0\nRpl_semi_sync_slave_status OFF\nSlave_connections 0\nSlave_heartbeat_period 1800.000\nSlave_open_temp_tables 0\nSlave_received_heartbeats 0\nSlave_retried_transactions 0\nSlave_running OFF\nSlaves_connected 0\nSlaves_running 1\n \n\n\nURL: https://mariadb.com/kb/en/show-slave-status/', '', 'https://mariadb.com/kb/en/show-slave-status/'),
(398, 'SHOW STATUS', 26, 'Syntax\n------ \nSHOW [GLOBAL | SESSION] STATUS\n [LIKE \'pattern\' | WHERE expr]\n \nDescription\n----------- \nSHOW STATUS provides server status information. This\ninformation also can be obtained using the mysqladmin\nextended-status command, or by querying the Information\nSchema GLOBAL_STATUS and SESSION_STATUS tables.\nThe LIKE clause, if present, indicates which variable names\nto match. The WHERE clause can be given to select rows using\nmore general conditions.\n \nWith the GLOBAL modifier, SHOW STATUS\ndisplays the status values for all connections to MariaDB.\nWith\nSESSION, it displays the status values\nfor the current connection. If no modifier is present, the\ndefault is\n SESSION. LOCAL is a synonym for\n SESSION. If you see a lot of 0 values, the reason is\nprobably that you have used SHOW STATUS with a new\nconnection instead of SHOW GLOBAL STATUS.\n \nSome status variables have only a global value. For these,\nyou get the\nsame value for both GLOBAL and SESSION.\n \nSee Server Status Variables for a full list, scope and\ndescription of the variables that can be viewed with SHOW\nSTATUS.\n \nThe LIKE clause, if present on its own, indicates which\nvariable name to match.\n \nThe WHERE and LIKE clauses can be given to select rows using\nmore general conditions, as discussed in Extended SHOW.\n \nExamples\n-------- \nFull output from MariaDB 10.1.17:\n \nSHOW GLOBAL STATUS;\n \n+--------------------------------------------------------------+----------------------------------------+\n| Variable_name | Value |\n+--------------------------------------------------------------+----------------------------------------+\n| Aborted_clients | 0 |\n| Aborted_connects | 0 |\n| Access_denied_errors | 0 |\n| Acl_column_grants | 0 |\n| Acl_database_grants | 2 |\n| Acl_function_grants | 0 |\n| Acl_procedure_grants | 0 |\n| Acl_proxy_users | 2 |\n| Acl_role_grants | 0 |\n| Acl_roles | 0 |\n| Acl_table_grants | 0 |\n| Acl_users | 6 |\n| Aria_pagecache_blocks_not_flushed | 0 |\n| Aria_pagecache_blocks_unused | 15706 |\n| Aria_pagecache_blocks_used | 0 |\n| Aria_pagecache_read_requests | 0 |\n| Aria_pagecache_reads | 0 |\n| Aria_pagecache_write_requests | 0 |\n| Aria_pagecache_writes | 0 |\n| Aria_transaction_log_syncs | 0 |\n| Binlog_commits | 0 |\n| Binlog_group_commits | 0 |\n| Binlog_group_commit_trigger_count | 0 |\n| Binlog_group_commit_trigger_lock_wait | 0 |\n| Binlog_group_commit_trigger_timeout | 0 |\n| Binlog_snapshot_file | |\n| Binlog_snapshot_position | 0 |\n| Binlog_bytes_written | 0 |\n| Binlog_cache_disk_use | 0 |\n| Binlog_cache_use | 0 |\n| Binlog_stmt_cache_disk_use | 0 |\n| Binlog_stmt_cache_use | 0 |\n| Busy_time | 0.000000 |\n| Bytes_received | 432 |\n| Bytes_sent | 15183 |\n| Com_admin_commands | 1 |\n| Com_alter_db | 0 |\n| Com_alter_db_upgrade | 0 |\n| Com_alter_event | 0 |\n| Com_alter_function | 0 |\n| Com_alter_procedure | 0 |\n| Com_alter_server | 0 |\n| Com_alter_table | 0 |\n| Com_alter_tablespace | 0 |\n| Com_analyze | 0 |\n| Com_assign_to_keycache | 0 |\n| Com_begin | 0 |\n| Com_binlog | 0 |\n| Com_call_procedure | 0 |\n| Com_change_db | 0 |\n| Com_change_master | 0 |\n| Com_check | 0 |\n| Com_checksum | 0 |\n| Com_commit | 0 |\n| Com_compound_sql | 0 |\n| Com_create_db | 0 |\n| Com_create_event | 0 |\n| Com_create_function | 0 |\n| Com_create_index | 0 |\n| Com_create_procedure | 0 |\n| Com_create_role | 0 |\n| Com_create_server | 0 |\n| Com_create_table | 0 |\n| Com_create_temporary_table | 0 |\n| Com_create_trigger | 0 |\n| Com_create_udf | 0 |\n| Com_create_user | 0 |\n| Com_create_view | 0 |\n| Com_dealloc_sql | 0 |\n| Com_delete | 0 |\n| Com_delete_multi | 0 |\n| Com_do | 0 |\n| Com_drop_db | 0 |\n| Com_drop_event | 0 |\n| Com_drop_function | 0 |\n| Com_drop_index | 0 |\n| Com_drop_procedure | 0 |\n| Com_drop_role | 0 |\n| Com_drop_server | 0 |\n| Com_drop_table | 0 |\n| Com_drop_temporary_table | 0 |\n| Com_drop_trigger | 0 |\n| Com_drop_user | 0 |\n| Com_drop_view | 0 |\n| Com_empty_query | 0 |\n| Com_execute_sql | 0 |\n| Com_flush | 0 |\n| Com_get_diagnostics | 0 |\n| Com_grant | 0 |\n| Com_grant_role | 0 |\n| Com_ha_close | 0 |\n| Com_ha_open | 0 |\n| Com_ha_read | 0 |\n| Com_help | 0 |\n| Com_insert | 0 |\n| Com_insert_select | 0 |\n| Com_install_plugin | 0 |\n| Com_kill | 0 |\n| Com_load | 0 |\n| Com_lock_tables | 0 |\n| Com_optimize | 0 |\n| Com_preload_keys | 0 |\n| Com_prepare_sql | 0 |\n| Com_purge | 0 |\n| Com_purge_before_date | 0 |\n| Com_release_savepoint | 0 |\n| Com_rename_table | 0 |\n| Com_rename_user | 0 |\n| Com_repair | 0 |\n| Com_replace | 0 |\n| Com_replace_select | 0 |\n| Com_reset | 0 |\n| Com_resignal | 0 |\n| Com_revoke | 0 |\n| Com_revoke_all | 0 |\n| Com_revoke_role | 0 |\n| Com_rollback | 0 |\n| Com_rollback_to_savepoint | 0 |\n| Com_savepoint | 0 |\n| Com_select | 1 |\n| Com_set_option | 0 |\n| Com_show_authors | 0 |\n| Com_show_binlog_events | 0 |\n| Com_show_binlogs | 0 |\n| Com_show_charsets | 0 |\n| Com_show_collations | 0 |\n| Com_show_contributors | 0 |\n| Com_show_create_db | 0 |\n| Com_show_create_event | 0 |\n| Com_show_create_func | 0 |\n| Com_show_create_proc | 0 |\n| Com_show_create_table | 0 |\n| Com_show_create_trigger | 0 |\n| Com_show_databases | 0 |\n| Com_show_engine_logs | 0 |\n| Com_show_engine_mutex | 0 |\n| Com_show_engine_status | 0 |\n| Com_show_errors | 0 |\n| Com_show_events | 0 |\n| Com_show_explain | 0 |\n| Com_show_fields | 0 |\n| Com_show_function_status | 0 |\n| Com_show_generic | 0 |\n| Com_show_grants | 0 |\n| Com_show_keys | 0 |\n| Com_show_master_status | 0 |\n| Com_show_open_tables | 0 |\n| Com_show_plugins | 0 |\n| Com_show_privileges | 0 |\n| Com_show_procedure_status | 0 |\n| Com_show_processlist | 0 |\n| Com_show_profile | 0 |\n| Com_show_profiles | 0 |\n| Com_show_relaylog_events | 0 |\n| Com_show_slave_hosts | 0 |\n| Com_show_slave_status | 0 |\n| Com_show_status | 2 |\n| Com_show_storage_engines | 0 |\n| Com_show_table_status | 0 |\n| Com_show_tables | 0 |\n| Com_show_triggers | 0 |\n| Com_show_variables | 0 |\n| Com_show_warnings | 0 |\n| Com_shutdown | 0 |\n| Com_signal | 0 |\n| Com_start_all_slaves | 0 |\n| Com_start_slave | 0 |\n| Com_stmt_close | 0 |\n| Com_stmt_execute | 0 |\n| Com_stmt_fetch | 0 |\n| Com_stmt_prepare | 0 |\n| Com_stmt_reprepare | 0 |\n| Com_stmt_reset | 0 |\n| Com_stmt_send_long_data | 0 |\n| Com_stop_all_slaves | 0 |\n| Com_stop_slave | 0 |\n| Com_truncate | 0 |\n| Com_uninstall_plugin | 0 |\n| Com_unlock_tables | 0 |\n| Com_update | 0 |\n| Com_update_multi | 0 |\n| Com_xa_commit | 0 |\n| Com_xa_end | 0 |\n| Com_xa_prepare | 0 |\n| Com_xa_recover | 0 |\n| Com_xa_rollback | 0 |\n| Com_xa_start | 0 |\n| Compression | OFF |\n| Connection_errors_accept | 0 |\n| Connection_errors_internal | 0 |\n| Connection_errors_max_connections | 0 |\n| Connection_errors_peer_address | 0 |\n| Connection_errors_select | 0 |\n| Connection_errors_tcpwrap | 0 |\n| Connections | 4 |\n| Cpu_time | 0.000000 |\n| Created_tmp_disk_tables | 0 |\n| Created_tmp_files | 6 |\n| Created_tmp_tables | 2 |\n| Delayed_errors | 0 |\n| Delayed_insert_threads | 0 |\n| Delayed_writes | 0 |\n| Delete_scan | 0 |\n| Empty_queries | 0 |\n| Executed_events | 0 |\n| Executed_triggers | 0 |\n| Feature_delay_key_write | 0 |\n| Feature_dynamic_columns | 0 |\n| Feature_fulltext | 0 |\n| Feature_gis | 0 |\n| Feature_locale | 0 |\n| Feature_subquery | 0 |\n| Feature_timezone | 0 |\n| Feature_trigger | 0 |\n| Feature_xml | 0 |\n| Flush_commands | 1 |\n| Handler_commit | 1 |\n| Handler_delete | 0 |\n| Handler_discover | 0 |\n| Handler_external_lock | 0 |\n| Handler_icp_attempts | 0 |\n| Handler_icp_match | 0 |\n| Handler_mrr_init | 0 |\n| Handler_mrr_key_refills | 0 |\n| Handler_mrr_rowid_refills | 0 |\n| Handler_prepare | 0 |\n| Handler_read_first | 3 |\n| Handler_read_key | 0 |\n| Handler_read_last | 0 |\n| Handler_read_next | 0 |\n| Handler_read_prev | 0 |\n| Handler_read_retry | 0 |\n| Handler_read_rnd | 0 |\n| Handler_read_rnd_deleted | 0 |\n| Handler_read_rnd_next | 537 |\n| Handler_rollback | 0 |\n| Handler_savepoint | 0 |\n| Handler_savepoint_rollback | 0 |\n| Handler_tmp_update | 0 |\n| Handler_tmp_write | 516 |\n| Handler_update | 0 |\n| Handler_write | 0 |\n| Innodb_available_undo_logs | 128 |\n| Innodb_background_log_sync | 222 |\n| Innodb_buffer_pool_bytes_data | 2523136 |\n| Innodb_buffer_pool_bytes_dirty | 0 |\n| Innodb_buffer_pool_dump_status | Dumping buffer pool(s)\nnot yet started |\n| Innodb_buffer_pool_load_status | Loading buffer pool(s)\nnot yet started |\n| Innodb_buffer_pool_pages_data | 154 |\n| Innodb_buffer_pool_pages_dirty | 0 |\n| Innodb_buffer_pool_pages_flushed | 1 |\n| Innodb_buffer_pool_pages_free | 8037 |\n| Innodb_buffer_pool_pages_lru_flushed | 0 |\n| Innodb_buffer_pool_pages_made_not_young | 0 |\n| Innodb_buffer_pool_pages_made_young | 0 |\n| Innodb_buffer_pool_pages_misc | 0 |\n| Innodb_buffer_pool_pages_old | 0 |\n| Innodb_buffer_pool_pages_total | 8191 |\n| Innodb_buffer_pool_read_ahead | 0 |\n| Innodb_buffer_pool_read_ahead_evicted | 0 |\n| Innodb_buffer_pool_read_ahead_rnd | 0 |\n| Innodb_buffer_pool_read_requests | 558 |\n| Innodb_buffer_pool_reads | 155 |\n| Innodb_buffer_pool_wait_free | 0 |\n| Innodb_buffer_pool_write_requests | 1 |\n| Innodb_checkpoint_age | 0 |\n| Innodb_checkpoint_max_age | 80826164 |\n| Innodb_data_fsyncs | 5 |\n| Innodb_data_pending_fsyncs | 0 |\n| Innodb_data_pending_reads | 0 |\n| Innodb_data_pending_writes | 0 |\n| Innodb_data_read | 2609664 |\n| Innodb_data_reads | 172 |\n| Innodb_data_writes | 5 |\n| Innodb_data_written | 34304 |\n| Innodb_dblwr_pages_written | 1 |\n| Innodb_dblwr_writes | 1 |\n| Innodb_deadlocks | 0 |\n| Innodb_have_atomic_builtins | ON |\n| Innodb_history_list_length | 0 |\n| Innodb_ibuf_discarded_delete_marks | 0 |\n| Innodb_ibuf_discarded_deletes | 0 |\n| Innodb_ibuf_discarded_inserts | 0 |\n| Innodb_ibuf_free_list | 0 |\n| Innodb_ibuf_merged_delete_marks | 0 |\n| Innodb_ibuf_merged_deletes | 0 |\n| Innodb_ibuf_merged_inserts | 0 |\n| Innodb_ibuf_merges | 0 |\n| Innodb_ibuf_segment_size | 2 |\n| Innodb_ibuf_size | 1 |\n| Innodb_log_waits | 0 |\n| Innodb_log_write_requests | 0 |\n| Innodb_log_writes | 1 |\n| Innodb_lsn_current | 1616829 |\n| Innodb_lsn_flushed | 1616829 |\n| Innodb_lsn_last_checkpoint | 1616829 |\n| Innodb_master_thread_active_loops | 0 |\n| Innodb_master_thread_idle_loops | 222 |\n| Innodb_max_trx_id | 2308 |\n| Innodb_mem_adaptive_hash | 2217568 |\n| Innodb_mem_dictionary | 630703 |\n| Innodb_mem_total | 140771328 |\n| Innodb_mutex_os_waits | 1 |\n| Innodb_mutex_spin_rounds | 30 |\n| Innodb_mutex_spin_waits | 1 |\n| Innodb_oldest_view_low_limit_trx_id | 0 |\n| Innodb_os_log_fsyncs | 3 |\n| Innodb_os_log_pending_fsyncs | 0 |\n| Innodb_os_log_pending_writes | 0 |\n| Innodb_os_log_written | 512 |\n| Innodb_page_size | 16384 |\n| Innodb_pages_created | 0 |\n| Innodb_pages_read | 154 |\n| Innodb_pages_written | 1 |\n| Innodb_purge_trx_id | 0 |\n| Innodb_purge_undo_no | 0 |\n| Innodb_read_views_memory | 88 |\n| Innodb_row_lock_current_waits | 0 |\n| Innodb_row_lock_time | 0 |\n| Innodb_row_lock_time_avg | 0 |\n| Innodb_row_lock_time_max | 0 |\n| Innodb_row_lock_waits | 0 |\n| Innodb_rows_deleted | 0 |\n| Innodb_rows_inserted | 0 |\n| Innodb_rows_read | 0 |\n| Innodb_rows_updated | 0 |\n| Innodb_system_rows_deleted | 0 |\n| Innodb_system_rows_inserted | 0 |\n| Innodb_system_rows_read | 0 |\n| Innodb_system_rows_updated | 0 |\n| Innodb_s_lock_os_waits | 2 |\n| Innodb_s_lock_spin_rounds | 60 |\n| Innodb_s_lock_spin_waits | 2 |\n| Innodb_truncated_status_writes | 0 |\n| Innodb_x_lock_os_waits | 0 |\n| Innodb_x_lock_spin_rounds | 0 |\n| Innodb_x_lock_spin_waits | 0 |\n| Innodb_page_compression_saved | 0 |\n| Innodb_page_compression_trim_sect512 | 0 |\n| Innodb_page_compression_trim_sect1024 | 0 |\n| Innodb_page_compression_trim_sect2048 | 0 |\n| Innodb_page_compression_trim_sect4096 | 0 |\n| Innodb_page_compression_trim_sect8192 | 0 |\n| Innodb_page_compression_trim_sect16384 | 0 |\n| Innodb_page_compression_trim_sect32768 | 0 |\n| Innodb_num_index_pages_written | 0 |\n| Innodb_num_non_index_pages_written | 5 |\n| Innodb_num_pages_page_compressed | 0 |\n| Innodb_num_page_compressed_trim_op | 0 |\n| Innodb_num_page_compressed_trim_op_saved | 0 |\n| Innodb_num_pages_page_decompressed | 0 |\n| Innodb_num_pages_page_compression_error | 0 |\n| Innodb_num_pages_encrypted | 0 |\n| Innodb_num_pages_decrypted | 0 |\n| Innodb_have_lz4 | OFF |\n| Innodb_have_lzo | OFF |\n| Innodb_have_lzma | OFF |\n| Innodb_have_bzip2 | OFF |\n| Innodb_have_snappy | OFF |\n| Innodb_defragment_compression_failures | 0 |\n| Innodb_defragment_failures | 0 |\n| Innodb_defragment_count | 0 |\n| Innodb_onlineddl_rowlog_rows | 0 |\n| Innodb_onlineddl_rowlog_pct_used | 0 |\n| Innodb_onlineddl_pct_progress | 0 |\n| Innodb_secondary_index_triggered_cluster_reads | 0 |\n| Innodb_secondary_index_triggered_cluster_reads_avoided | 0\n|\n| Innodb_encryption_rotation_pages_read_from_cache | 0 |\n| Innodb_encryption_rotation_pages_read_from_disk | 0 |\n| Innodb_encryption_rotation_pages_modified | 0 |\n| Innodb_encryption_rotation_pages_flushed | 0 |\n| Innodb_encryption_rotation_estimated_iops | 0 |\n| Innodb_scrub_background_page_reorganizations | 0 |\n| Innodb_scrub_background_page_splits | 0 |\n| Innodb_scrub_background_page_split_failures_underflow | 0\n|\n|\nInnodb_scrub_background_page_split_failures_out_of_filespace\n| 0 |\n| Innodb_scrub_background_page_split_failures_missing_index\n| 0 |\n| Innodb_scrub_background_page_split_failures_unknown | 0 |\n| Key_blocks_not_flushed | 0 |\n| Key_blocks_unused | 107163 |\n| Key_blocks_used | 0 |\n| Key_blocks_warm | 0 |\n| Key_read_requests | 0 |\n| Key_reads | 0 |\n| Key_write_requests | 0 |\n| Key_writes | 0 |\n| Last_query_cost | 0.000000 |\n| Master_gtid_wait_count | 0 |\n| Master_gtid_wait_time | 0 |\n| Master_gtid_wait_timeouts | 0 |\n| Max_statement_time_exceeded | 0 |\n| Max_used_connections | 1 |\n| Memory_used | 273614696 |\n| Not_flushed_delayed_rows | 0 |\n| Open_files | 25 |\n| Open_streams | 0 |\n| Open_table_definitions | 18 |\n| Open_tables | 11 |\n| Opened_files | 77 |\n| Opened_plugin_libraries | 0 |\n| Opened_table_definitions | 18 |\n| Opened_tables | 18 |\n| Opened_views | 0 |\n| Performance_schema_accounts_lost | 0 |\n| Performance_schema_cond_classes_lost | 0 |\n| Performance_schema_cond_instances_lost | 0 |\n| Performance_schema_digest_lost | 0 |\n| Performance_schema_file_classes_lost | 0 |\n| Performance_schema_file_handles_lost | 0 |\n| Performance_schema_file_instances_lost | 0 |\n| Performance_schema_hosts_lost | 0 |\n| Performance_schema_locker_lost | 0 |\n| Performance_schema_mutex_classes_lost | 0 |\n| Performance_schema_mutex_instances_lost | 0 |\n| Performance_schema_rwlock_classes_lost | 0 |\n| Performance_schema_rwlock_instances_lost | 0 |\n| Performance_schema_session_connect_attrs_lost | 0 |\n| Performance_schema_socket_classes_lost | 0 |\n| Performance_schema_socket_instances_lost | 0 |\n| Performance_schema_stage_classes_lost | 0 |\n| Performance_schema_statement_classes_lost | 0 |\n| Performance_schema_table_handles_lost | 0 |\n| Performance_schema_table_instances_lost | 0 |\n| Performance_schema_thread_classes_lost | 0 |\n| Performance_schema_thread_instances_lost | 0 |\n| Performance_schema_users_lost | 0 |\n| Prepared_stmt_count | 0 |\n| Qcache_free_blocks | 1 |\n| Qcache_free_memory | 1031336 |\n| Qcache_hits | 0 |\n| Qcache_inserts | 0 |\n| Qcache_lowmem_prunes | 0 |\n| Qcache_not_cached | 0 |\n| Qcache_queries_in_cache | 0 |\n| Qcache_total_blocks | 1 |\n| Queries | 4 |\n| Questions | 4 |\n| Rows_read | 10 |\n| Rows_sent | 517 |\n| Rows_tmp_read | 516 |\n| Rpl_status | AUTH_MASTER |\n| Select_full_join | 0 |\n| Select_full_range_join | 0 |\n| Select_range | 0 |\n| Select_range_check | 0 |\n| Select_scan | 2 |\n| Slave_connections | 0 |\n| Slave_heartbeat_period | 0.000 |\n| Slave_open_temp_tables | 0 |\n| Slave_received_heartbeats | 0 |\n| Slave_retried_transactions | 0 |\n| Slave_running | OFF |\n| Slave_skipped_errors | 0 |\n| Slaves_connected | 0 |\n| Slaves_running | 0 |\n| Slow_launch_threads | 0 |\n| Slow_queries | 0 |\n| Sort_merge_passes | 0 |\n| Sort_priority_queue_sorts | 0 |\n| Sort_range | 0 |\n| Sort_rows | 0 |\n| Sort_scan | 0 |\n| Ssl_accept_renegotiates | 0 |\n| Ssl_accepts | 0 |\n| Ssl_callback_cache_hits | 0 |\n| Ssl_cipher | |\n| Ssl_cipher_list | |\n| Ssl_client_connects | 0 |\n| Ssl_connect_renegotiates | 0 |\n| Ssl_ctx_verify_depth | 0 |\n| Ssl_ctx_verify_mode | 0 |\n| Ssl_default_timeout | 0 |\n| Ssl_finished_accepts | 0 |\n| Ssl_finished_connects | 0 |\n| Ssl_server_not_after | |\n| Ssl_server_not_before | |\n| Ssl_session_cache_hits | 0 |\n| Ssl_session_cache_misses | 0 |\n| Ssl_session_cache_mode | NONE |\n| Ssl_session_cache_overflows | 0 |\n| Ssl_session_cache_size | 0 |\n| Ssl_session_cache_timeouts | 0 |\n| Ssl_sessions_reused | 0 |\n| Ssl_used_session_cache_entries | 0 |\n| Ssl_verify_depth | 0 |\n| Ssl_verify_mode | 0 |\n| Ssl_version | |\n| Subquery_cache_hit | 0 |\n| Subquery_cache_miss | 0 |\n| Syncs | 2 |\n| Table_locks_immediate | 21 |\n| Table_locks_waited | 0 |\n| Tc_log_max_pages_used | 0 |\n| Tc_log_page_size | 4096 |\n| Tc_log_page_waits | 0 |\n| Threadpool_idle_threads | 0 |\n| Threadpool_threads | 0 |\n| Threads_cached | 0 |\n| Threads_connected | 1 |\n| Threads_created | 2 |\n| Threads_running | 1 |\n| Update_scan | 0 |\n| Uptime | 223 |\n| Uptime_since_flush_status | 223 |\n| wsrep_cluster_conf_id | 18446744073709551615 |\n| wsrep_cluster_size | 0 |\n| wsrep_cluster_state_uuid | |\n| wsrep_cluster_status | Disconnected |\n| wsrep_connected | OFF |\n| wsrep_local_bf_aborts | 0 |\n| wsrep_local_index | 18446744073709551615 |\n| wsrep_provider_name | |\n| wsrep_provider_vendor | |\n| wsrep_provider_version | |\n| wsrep_ready | OFF |\n| wsrep_thread_count | 0 |\n+--------------------------------------------------------------+----------------------------------------+\n516 rows in set (0.00 sec)\n \nExample of filtered output:\n \nSHOW STATUS LIKE \'Key%\';\n \n+------------------------+--------+\n| Variable_name | Value |\n+------------------------+--------+\n| Key_blocks_not_flushed | 0 |\n| Key_blocks_unused | 107163 |\n| Key_blocks_used | 0 |\n| Key_blocks_warm | 0 |\n| Key_read_requests | 0 |\n| Key_reads | 0 |\n| Key_write_requests | 0 |\n| Key_writes | 0 |\n+------------------------+--------+\n8 rows in set (0.00 sec)\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-status/', '', 'https://mariadb.com/kb/en/show-status/'),
(411, 'DO', 27, 'Syntax\n------ \nDO expr [, expr] ...\n \nDescription\n----------- \n DO executes the expressions but does not return any\nresults. In most respects, DO is shorthand for\n SELECT expr, ..., but has the advantage that it is slightly\nfaster when you do not care about the result.\n \n DO is useful primarily with functions that have side\n effects, such as RELEASE_LOCK().\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/do/', '', 'https://mariadb.com/kb/en/do/'),
(212, 'LAST_INSERT_ID', 17, 'Syntax\n------ \nLAST_INSERT_ID(), LAST_INSERT_ID(expr)\n \nDescription\n----------- \nLAST_INSERT_ID() (no arguments) returns\nthe first automatically generated value successfully\ninserted for an\nAUTO_INCREMENT column as a result of the most recently\nexecuted INSERT\nstatement. The value of LAST_INSERT_ID() remains unchanged\nif no rows\nare successfully inserted.\n \nIf one gives an argument to LAST_INSERT_ID(), then it will\nreturn the value of the expression and\nthe next call to LAST_INSERT_ID() will return the same\nvalue. The value will also be sent to the client\nand can be accessed by the mysql_insert_id function.\n \nFor example, after inserting a row that generates an\nAUTO_INCREMENT\nvalue, you can get the value like this:\n \nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n| 9 |\n+------------------+\n \nYou can also use LAST_INSERT_ID() to delete the last\ninserted row:\n \nDELETE FROM product WHERE id = LAST_INSERT_ID();\n \nIf no rows were successfully inserted, LAST_INSERT_ID()\nreturns 0.\n \nThe value of LAST_INSERT_ID() will be consistent across all\nversions\nif all rows in the INSERT or UPDATE statement were\nsuccessful.\n \nThe currently executing statement does not affect the value\nof\nLAST_INSERT_ID(). Suppose that you generate an\nAUTO_INCREMENT value\nwith one statement, and then refer to LAST_INSERT_ID() in a\nmultiple-row INSERT statement that inserts rows into a table\nwith its\nown AUTO_INCREMENT column. The value of LAST_INSERT_ID()\nwill remain\nstable in the second statement; its value for the second and\nlater\nrows is not affected by the earlier row insertions.\n(However, if you\nmix references to LAST_INSERT_ID() and LAST_INSERT_ID(expr),\nthe\neffect is undefined.)\n \nIf the previous statement returned an error, the value of\nLAST_INSERT_ID() is undefined. For transactional tables, if\nthe\nstatement is rolled back due to an error, the value of\nLAST_INSERT_ID() is left undefined. For manual ROLLBACK, the\nvalue of\nLAST_INSERT_ID() is not restored to that before the\ntransaction; it\nremains as it was at the point of the ROLLBACK.\n \nWithin the body of a stored routine (procedure or function)\nor a\ntrigger, the value of LAST_INSERT_ID() changes the same way\nas for\nstatements executed outside the body of these kinds of\nobjects. The\neffect of a stored routine or trigger upon the value of\nLAST_INSERT_ID() that is seen by following statements\ndepends on the\nkind of routine:\nIf a stored procedure executes statements that change the\nvalue of LAST_INSERT_ID(), the new value will be seen by\nstatements that follow the procedure call.\n \nFor stored functions and triggers that change the value, the\nvalue is restored when the function or trigger ends, so\nfollowing statements will not see a changed value.\n \nExamples\n-------- \nCREATE TABLE t (\n id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY KEY, \n f VARCHAR(1)) \nENGINE = InnoDB;\n \nINSERT INTO t(f) VALUES(\'a\');\n \nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n| 1 |\n+------------------+\n \nINSERT INTO t(f) VALUES(\'b\');\n \nINSERT INTO t(f) VALUES(\'c\');\n \nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n| 3 |\n+------------------+\n \nINSERT INTO t(f) VALUES(\'d\'),(\'e\');\n \nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n| 4 |\n+------------------+\n \nSELECT * FROM t;\n \n+----+------+\n| id | f |\n+----+------+\n| 1 | a |\n| 2 | b |\n| 3 | c |\n| 4 | d |\n| 5 | e |\n+----+------+\n \nSELECT LAST_INSERT_ID(12);\n+--------------------+\n| LAST_INSERT_ID(12) |\n+--------------------+\n| 12 |\n+--------------------+\n \nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n| 12 |\n+------------------+\n \nINSERT INTO t(f) VALUES(\'f\');\n \nSELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n| 6 |\n+------------------+\n \nSELECT * FROM t;\n \n+----+------+\n| id | f |\n+----+------+\n| 1 | a |\n| 2 | b |\n| 3 | c |\n| 4 | d |\n| 5 | e |\n| 6 | f |\n+----+------+\n \nSELECT LAST_INSERT_ID(12);\n+--------------------+\n| LAST_INSERT_ID(12) |\n+--------------------+\n| 12 |\n+--------------------+\n \nINSERT INTO t(f) VALUES(\'g\');\n \nSELECT * FROM t;\n \n+----+------+\n| id | f |\n+----+------+\n| 1 | a |\n| 2 | b |\n| 3 | c |\n| 4 | d |\n| 5 | e |\n| 6 | f |\n| 7 | g |\n+----+------+\n \n\n\nURL: https://mariadb.com/kb/en/last_insert_id/', '', 'https://mariadb.com/kb/en/last_insert_id/'),
(214, 'PROCEDURE ANALYSE', 17, 'Syntax\n------ \nanalyse([max_elements[,max_memory]])\n \nDescription\n----------- \nThis procedure is defined in the sql/sql_analyse.cc file. It\nexamines\nthe result from a query and returns an analysis of the\nresults that\nsuggests optimal data types for each column. To obtain this\nanalysis,\nappend PROCEDURE ANALYSE to the end of a SELECT statement:\n \nSELECT ... FROM ... WHERE ... PROCEDURE\nANALYSE([max_elements,[max_memory]])\n \nFor example:\n \nSELECT col1, col2 FROM table1 PROCEDURE ANALYSE(10, 2000);\n \nThe results show some statistics for the values returned by\nthe query,\nand propose an optimal data type for the columns. This can\nbe helpful\nfor checking your existing tables, or after importing new\ndata. You\nmay need to try different settings for the arguments so that\nPROCEDURE\nANALYSE() does not suggest the ENUM data type when it is not\nappropriate.\n \nThe arguments are optional and are used as follows:\nmax_elements (default 256) is the maximum number of distinct\nvalues that analyse notices per column. This is used by\nanalyse to check whether the optimal data type should be of\ntype ENUM; if there are more than max_elements distinct\nvalues, then ENUM is not a suggested type.\nmax_memory (default 8192) is the maximum amount of memory\nthat analyse should allocate per column while trying to find\nall distinct values.\n \n\n\nURL: https://mariadb.com/kb/en/procedure-analyse/', '', 'https://mariadb.com/kb/en/procedure-analyse/'),
(412, 'DUAL', 27, 'Description\n----------- \nYou are allowed to specify DUAL as a dummy table name in\nsituations where no tables are referenced, such as the\nfollowing SELECT statement:\n \nSELECT 1 + 1 FROM DUAL;\n \n+-------+\n| 1 + 1 |\n+-------+\n| 2 |\n+-------+\n \n DUAL is purely for the convenience of people who require\n that all SELECT statements should have\n FROM and possibly other clauses. MariaDB ignores the\n clauses. MariaDB does not require FROM DUAL if no tables\n are referenced.\n \nFROM DUAL could be used when you only SELECT computed\nvalues, but require a WHERE clause, perhaps to test that a\nscript correctly handles empty resultsets:\n \nSELECT 1 FROM DUAL WHERE FALSE;\n \nEmpty set (0.00 sec)\n \n\n\nURL: https://mariadb.com/kb/en/dual/', '', 'https://mariadb.com/kb/en/dual/'),
(414, 'FOR UPDATE', 27, 'The FOR UPDATE clause of SELECT applies only when autocommit\nis set to 0 or the SELECT is enclosed in a transaction. A\nlock is acquired on the rows, and other transactions are\nprevented from writing the rows, acquire locks, and from\nreading them (unless their isolation level is READ\nUNCOMMITTED).\n \nIf autocommit is set to 1, the LOCK IN SHARE MODE and FOR\nUPDATE clauses have no effect.\n \nIf the isolation level is set to SERIALIZABLE, all plain\nSELECT statements are converted to SELECT ... LOCK IN SHARE\nMODE.\n \nExample\n \nSELECT * FROM trans WHERE period=2001 FOR UPDATE;\n \n\n\nURL: https://mariadb.com/kb/en/for-update/', '', 'https://mariadb.com/kb/en/for-update/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(213, 'LAST_VALUE', 17, 'Syntax\n------ \nLAST_VALUE(expr,[expr,...])\n \nLAST_VALUE(expr) OVER (\n [ PARTITION BY partition_expression ]\n [ ORDER BY order_list ]\n) \n \nDescription\n----------- \nLAST_VALUE() evaluates all expressions and returns the last.\n \nThis is useful together with setting user variables to a\nvalue with @var:=expr, for example when you want to get data\nof rows updated/deleted without having to do two queries\nagainst the table.\n \nSince MariaDB 10.2.2, LAST_VALUE can be used as a window\nfunction.\n \nReturns NULL if no last value exists.\n \nExamples\n-------- \nCREATE TABLE t1 (a int, b int);\nINSERT INTO t1 VALUES(1,10),(2,20);\nDELETE FROM t1 WHERE a=1 AND last_value(@a:=a,@b:=b,1);\nSELECT @a,@b;\n \n+------+------+\n| @a | @b |\n+------+------+\n| 1 | 10 |\n+------+------+\n \nAs a window function:\n \nCREATE TABLE t1 (\n pk int primary key,\n a int,\n b int,\n c char(10),\n d decimal(10, 3),\n e real\n);\n \nINSERT INTO t1 VALUES\n( 1, 0, 1, \'one\', 0.1, 0.001),\n( 2, 0, 2, \'two\', 0.2, 0.002),\n( 3, 0, 3, \'three\', 0.3, 0.003),\n( 4, 1, 2, \'three\', 0.4, 0.004),\n( 5, 1, 1, \'two\', 0.5, 0.005),\n( 6, 1, 1, \'one\', 0.6, 0.006),\n( 7, 2, NULL, \'n_one\', 0.5, 0.007),\n( 8, 2, 1, \'n_two\', NULL, 0.008),\n( 9, 2, 2, NULL, 0.7, 0.009),\n(10, 2, 0, \'n_four\', 0.8, 0.010),\n(11, 2, 10, NULL, 0.9, NULL);\n \nSELECT pk, FIRST_VALUE(pk) OVER (ORDER BY pk) AS first_asc,\n LAST_VALUE(pk) OVER (ORDER BY pk) AS last_asc,\n FIRST_VALUE(pk) OVER (ORDER BY pk DESC) AS first_desc,\n LAST_VALUE(pk) OVER (ORDER BY pk DESC) AS last_desc\nFROM t1\nORDER BY pk DESC;\n \n+----+-----------+----------+------------+-----------+\n| pk | first_asc | last_asc | first_desc | last_desc |\n+----+-----------+----------+------------+-----------+\n| 11 | 1 | 11 | 11 | 11 |\n| 10 | 1 | 10 | 11 | 10 |\n| 9 | 1 | 9 | 11 | 9 |\n| 8 | 1 | 8 | 11 | 8 |\n| 7 | 1 | 7 | 11 | 7 |\n| 6 | 1 | 6 | 11 | 6 |\n| 5 | 1 | 5 | 11 | 5 |\n| 4 | 1 | 4 | 11 | 4 |\n| 3 | 1 | 3 | 11 | 3 |\n| 2 | 1 | 2 | 11 | 2 |\n| 1 | 1 | 1 | 11 | 1 |\n+----+-----------+----------+------------+-----------+\n \nCREATE OR REPLACE TABLE t1 (i int);\nINSERT INTO t1 VALUES\n(1),(2),(3),(4),(5),(6),(7),(8),(9),(10);\n \nSELECT i,\n FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW\nand 1 FOLLOWING) AS f_1f,\n LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW and\n1 FOLLOWING) AS l_1f,\n FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING\nAND 1 FOLLOWING) AS f_1p1f,\n LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND\n1 FOLLOWING) AS f_1p1f,\n FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING\nAND 1 PRECEDING) AS f_2p1p,\n LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND\n1 PRECEDING) AS f_2p1p,\n FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 FOLLOWING\nAND 2 FOLLOWING) AS f_1f2f,\n LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 FOLLOWING AND\n2 FOLLOWING) AS f_1f2f\nFROM t1;\n \n+------+------+------+--------+--------+--------+--------+--------+--------+\n| i | f_1f | l_1f | f_1p1f | f_1p1f | f_2p1p | f_2p1p |\nf_1f2f | f_1f2f |\n+------+------+------+--------+--------+--------+--------+--------+--------+\n| 1 | 1 | 2 | 1 | 2 | NULL | NULL | 2 | 3 |\n| 2 | 2 | 3 | 1 | 3 | 1 | 1 | 3 | 4 |\n| 3 | 3 | 4 | 2 | 4 | 1 | 2 | 4 | 5 |\n| 4 | 4 | 5 | 3 | 5 | 2 | 3 | 5 | 6 |\n| 5 | 5 | 6 | 4 | 6 | 3 | 4 | 6 | 7 |\n| 6 | 6 | 7 | 5 | 7 | 4 | 5 | 7 | 8 |\n| 7 | 7 | 8 | 6 | 8 | 5 | 6 | 8 | 9 |\n| 8 | 8 | 9 | 7 | 9 | 6 | 7 | 9 | 10 |\n| 9 | 9 | 10 | 8 | 10 | 7 | 8 | 10 | 10 |\n| 10 | 10 | 10 | 9 | 10 | 8 | 9 | NULL | NULL |\n+------+------+------+--------+--------+--------+--------+--------+--------+\n \n\n\nURL: https://mariadb.com/kb/en/last_value/', '', 'https://mariadb.com/kb/en/last_value/'),
(215, 'ROW_COUNT', 17, 'Syntax\n------ \nROW_COUNT()\n \nDescription\n----------- \nROW_COUNT() returns the number of rows updated, inserted or\ndeleted\nby the preceding statement. This is the same as the row\ncount that the\nmysql client displays and the value from the\nmysql_affected_rows() C\nAPI function.\n \nGenerally:\nFor statements which return a result set (such as SELECT,\nSHOW, DESC or HELP), returns -1, even when the result set is\nempty. This is also true for administrative statements, such\nas OPTIMIZE.\nFor DML statements other than SELECT and for ALTER TABLE,\nreturns the number of affected rows.\nFor DDL statements (including TRUNCATE) and for other\nstatements which don\'t return any result set (such as USE,\nDO, SIGNAL or DEALLOCATE PREPARE), returns 0.\n \nFor UPDATE, affected rows is by default the number of rows\nthat were actually changed. If the CLIENT_FOUND_ROWS flag to\nmysql_real_connect() is specified when connecting to mysqld,\naffected rows is instead the number of rows matched by the\nWHERE clause. \n \nFor REPLACE, deleted rows are also counted. So, if REPLACE\ndeletes a row and adds a new row, ROW_COUNT() returns 2.\n \nFor INSERT ... ON DUPLICATE KEY, updated rows are counted\ntwice. So, if INSERT adds a new rows and modifies another\nrow, ROW_COUNT() returns 3.\n \nROW_COUNT() does not take into account rows that are not\ndirectly deleted/updated by the last statement. This means\nthat rows deleted by foreign keys or triggers are not\ncounted.\n \nWarning: You can use ROW_COUNT() with prepared statements,\nbut you need to call it after EXECUTE, not after DEALLOCATE\nPREPARE, because the row count for allocate prepare is\nalways 0.\n \nWarning: When used after a CALL statement, this function\nreturns the number of rows affected by the last statement in\nthe procedure, not by the whole procedure.\n \nWarning: After INSERT DELAYED, ROW_COUNT() returns the\nnumber of the rows you tried to insert, not the number of\nthe successful writes.\n \nThis information can also be found in the diagnostics area.\n \nStatements using the ROW_COUNT() function are not safe for\nreplication.\n \nExamples\n-------- \nCREATE TABLE t (A INT);\n \nINSERT INTO t VALUES(1),(2),(3);\n \nSELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n| 3 |\n+-------------+\n \nDELETE FROM t WHERE A IN(1,2);\n \nSELECT ROW_COUNT(); \n+-------------+\n| ROW_COUNT() |\n+-------------+\n| 2 |\n+-------------+\n \nExample with prepared statements:\n \nSET @q = \'INSERT INTO t VALUES(1),(2),(3);\';\n \nPREPARE stmt FROM @q;\n \nEXECUTE stmt;\n \nQuery OK, 3 rows affected (0.39 sec)\nRecords: 3 Duplicates: 0 Warnings: 0\n \nSELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n| 3 |\n+-------------+\n \n\n\nURL: https://mariadb.com/kb/en/row_count/', '', 'https://mariadb.com/kb/en/row_count/'),
(416, 'HANDLER Commands', 27, 'Syntax\n------ \nHANDLER tbl_name OPEN [ [AS] alias]\nHANDLER tbl_name READ index_name { = | >= | = | \n\nURL: https://mariadb.com/kb/en/handler-commands/', '', 'https://mariadb.com/kb/en/handler-commands/'),
(430, 'LOCK IN SHARE MODE', 27, 'When LOCK IN SHARE MODE is specified in a SELECT statement,\nMariaDB will wait until all transactions that have modified\nthe rows are committed. Then, a write lock is acquired. All\ntransactions can read the rows, but if they want to modify\nthem, they have to wait until your transaction is committed.\n \nInnoDB/XtraDB supports row-level locking. selected rows can\nbe locked using LOCK IN SHARE MODE or FOR UPDATE. In both\ncases, a lock is acquired on the rows read by the query, and\nit will be released when the current transaction is\ncommitted.\n \nIf autocommit is set to 1, the LOCK IN SHARE MODE and FOR\nUPDATE clauses have no effect.\n \n\n\nURL: https://mariadb.com/kb/en/lock-in-share-mode/', '', 'https://mariadb.com/kb/en/lock-in-share-mode/'),
(219, 'USER', 17, 'Syntax\n------ \nUSER()\n \nDescription\n----------- \nReturns the current MariaDB user name and host name, given\nwhen authenticating to MariaDB, as a string in the utf8\ncharacter set.\n \nNote that the value of USER() may differ from the value of\nCURRENT_USER(), which is the user used to authenticate the\ncurrent client. \nCURRENT_ROLE() returns the current active role.\n \nSYSTEM_USER() and SESSION_USER are synonyms for USER().\n \nStatements using the USER() function or one of its synonyms\nare not safe for statement level replication.\n \nExamples\n-------- \nshell> mysql --user=\"anonymous\"\n \nMariaDB [(none)]> select user(),current_user();\n+---------------------+----------------+\n| user() | current_user() |\n+---------------------+----------------+\n| anonymous@localhost | @localhost |\n+---------------------+----------------+\n \n\n\nURL: https://mariadb.com/kb/en/user/', '', 'https://mariadb.com/kb/en/user/'),
(220, 'VERSION', 17, 'Syntax\n------ \nVERSION()\n \nDescription\n----------- \nReturns a string that indicates the MariaDB server version.\nThe string\nuses the utf8 character set.\n \nExamples\n-------- \nSELECT VERSION();\n+----------------+\n| VERSION() |\n+----------------+\n| 10.4.7-MariaDB |\n+----------------+\n \nThe VERSION() string may have one or more of the following\nsuffixes:\n \nSuffix | Description | \n \n-embedded | The server is an embedded server (libmysqld). | \n \n-log | General logging, slow logging or binary (replication)\nlogging is enabled. | \n \n-debug | The server is compiled for debugging. | \n \n-valgrind |  The server is compiled to be instrumented with\nvalgrind. | \n \nChanging the Version String\n \nSome old legacy code may break because they are parsing the\nVERSION string and expecting a MySQL string or a simple\nversion\nstring like Joomla til API17, see MDEV-7780.\n \nFrom MariaDB 10.2, one can fool these applications by\nsetting the version string from the command line or the\nmy.cnf files with --version=....\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/version/', '', 'https://mariadb.com/kb/en/version/'),
(221, 'Not Equal Operator', 18, 'Syntax\n------ \n, !=\n \nDescription\n----------- \nNot equal operator. Evaluates both SQL expressions and\nreturns 1 if they are not equal and 0 if they are equal, or\nNULL if either expression is NULL. If the expressions return\ndifferent data types, (for instance, a number and a string),\nperforms type conversion.\n \nWhen used in row comparisons these two queries return the\nsame results:\n \nSELECT (t1.a, t1.b) != (t2.x, t2.y) \nFROM t1 INNER JOIN t2;\n \nSELECT (t1.a != t2.x) OR (t1.b != t2.y)\nFROM t1 INNER JOIN t2;\n \nExamples\n-------- \nSELECT \'.01\'  \'0.01\';\n \n+-----------------+\n| \'.01\'  \'0.01\' |\n+-----------------+\n| 1 |\n+-----------------+\n \nSELECT .01  \'0.01\';\n \n+---------------+\n| .01  \'0.01\' |\n+---------------+\n| 0 |\n+---------------+\n \nSELECT \'zapp\'  \'zappp\';\n \n+-------------------+\n| \'zapp\'  \'zappp\' |\n+-------------------+\n| 1 |\n+-------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/not-equal/', '', 'https://mariadb.com/kb/en/not-equal/'),
(224, '&lt;=&gt;', 18, 'Syntax\n------ \n\n \nDescription\n----------- \nNULL-safe equal operator. It performs an equality comparison\nlike\nthe = operator, but returns 1 rather than NULL if both\noperands are\nNULL, and 0 rather than NULL if one operand is NULL.\n \na  b is equivalent to a = b OR (a IS NULL AND b IS NULL).\n \nWhen used in row comparisons these two queries return the\nsame results:\n \nSELECT (t1.a, t1.b)  (t2.x, t2.y) \nFROM t1 INNER JOIN t2;\n \nSELECT (t1.a  t2.x) AND (t1.b  t2.y)\nFROM t1 INNER JOIN t2;\n \nSee also NULL Values in MariaDB.\n \nExamples\n-------- \nSELECT 1  1, NULL  NULL, 1  NULL;\n \n+---------+---------------+------------+\n| 1  1 | NULL  NULL | 1  NULL |\n+---------+---------------+------------+\n| 1 | 1 | 0 |\n+---------+---------------+------------+\n \nSELECT 1 = 1, NULL = NULL, 1 = NULL;\n \n+-------+-------------+----------+\n| 1 = 1 | NULL = NULL | 1 = NULL |\n+-------+-------------+----------+\n| 1 | NULL | NULL |\n+-------+-------------+----------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/null-safe-equal/', '', 'https://mariadb.com/kb/en/null-safe-equal/'),
(225, '=', 18, 'Syntax\n------ \nleft_expr = right_expr\n \nDescription\n----------- \nEqual operator. Evaluates both SQL expressions and returns 1\nif they are equal, 0 if they are not equal, or NULL if\neither expression is NULL. If the expressions return\ndifferent data types (for example, a number and a string), a\ntype conversion is performed.\n \nWhen used in row comparisons these two queries are\nsynonymous and return the same results:\n \nSELECT (t1.a, t1.b) = (t2.x, t2.y) FROM t1 INNER JOIN t2;\n \nSELECT (t1.a = t2.x) AND (t1.b = t2.y) FROM t1 INNER JOIN\nt2;\n \nTo perform a NULL-safe comparison, use the  operator.\n \n= can also be used as an assignment operator.\n \nExamples\n-------- \nSELECT 1 = 0;\n \n+-------+\n| 1 = 0 |\n+-------+\n| 0 |\n+-------+\n \nSELECT \'0\' = 0;\n \n+---------+\n| \'0\' = 0 |\n+---------+\n| 1 |\n+---------+\n \nSELECT \'0.0\' = 0;\n \n+-----------+\n| \'0.0\' = 0 |\n+-----------+\n| 1 |\n+-----------+\n \nSELECT \'0.01\' = 0;\n \n+------------+\n| \'0.01\' = 0 |\n+------------+\n| 0 |\n+------------+\n \nSELECT \'.01\' = 0.01;\n \n+--------------+\n| \'.01\' = 0.01 |\n+--------------+\n| 1 |\n+--------------+\n \nSELECT (5 * 2) = CONCAT(\'1\', \'0\');\n+----------------------------+\n| (5 * 2) = CONCAT(\'1\', \'0\') |\n+----------------------------+\n| 1 |\n+----------------------------+\n \nSELECT 1 = NULL;\n \n+----------+\n| 1 = NULL |\n+----------+\n| NULL |\n+----------+\n \nSELECT NULL = NULL;\n \n+-------------+\n| NULL = NULL |\n+-------------+\n| NULL |\n+-------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/equal/', '', 'https://mariadb.com/kb/en/equal/'),
(433, 'PROCEDURE', 27, 'The PROCEDURE clause of SELECT passes the whole result set\nto a Procedure which will process it. These Procedures are\nnot Stored Procedures, and can only be written in the C\nlanguage, so it is necessary to recompile the server.\n \nCurrently, the only available procedure is ANALYSE, which\nexamines the resultset and suggests the optimal datatypes\nfor each column. It is defined in the sql/sql_analyse.cc\nfile, and can be used as an example to create more\nProcedures.\n \nThis clause cannot be used in a view\'s definition.\n \n\n\nURL: https://mariadb.com/kb/en/procedure/', '', 'https://mariadb.com/kb/en/procedure/'),
(445, 'EXPLAIN', 28, 'Syntax\n------ \nEXPLAIN tbl_name\n \nOr\n \nEXPLAIN [EXTENDED | PARTITIONS] \n {SELECT select_options | UPDATE update_options | DELETE\ndelete_options}\n \nDescription\n----------- \nThe EXPLAIN statement can be used either as a synonym for\nDESCRIBE or as a way to obtain information about how MariaDB\nexecutes a SELECT (as well as UPDATE and DELETE since\nMariaDB 10.0.5) statement:\n\'EXPLAIN tbl_name\' is synonymous with \n \'DESCRIBE tbl_name\' or \n \'SHOW COLUMNS FROM tbl_name\'.\nWhen you precede a SELECT statement (or, since MariaDB\n10.0.5, an UPDATE or a DELETE as well) with the keyword \n EXPLAIN, MariaDB displays information from the optimizer\n about the query execution plan. That is, MariaDB explains\nhow it would\n process the SELECT, UPDATE or DELETE, including information\nabout how tables\n are joined and in which order. EXPLAIN EXTENDED can be\n used to provide additional information.\nEXPLAIN PARTITIONS has been available since MySQL 5.1.5. It\nis useful only when examining queries involving partitioned\ntables. For details, see Partition pruning and selection.\nANALYZE statement, which performs the query as well as\nproducing EXPLAIN output, and provides actual as well as\nestimated statistics, has been available from MariaDB\n10.1.0.\nSince MariaDB 10.0.5, it has been possible to have EXPLAIN\noutput printed in the slow query log. See EXPLAIN in the\nSlow Query Log for details.\n \nSince MariaDB 10.0, SHOW EXPLAIN shows the output of a\nrunning statement. In some cases, its output can be closer\nto reality than EXPLAIN.\n \nSince MariaDB 10.1, the ANALYZE statement runs a statement\nand returns information about its execution plan. It also\nshows additional columns, to check how much the optimizer\'s\nestimation about filtering and found rows are close to\nreality.\n \nThere is an online EXPLAIN Analyzer that you can use to\nshare EXPLAIN and EXPLAIN EXTENDED output with others.\n \nEXPLAIN can acquire metadata locks in the same way that\nSELECT does, as it needs to know table metadata and,\nsometimes, data as well.\n \nThe columns in EXPLAIN ... SELECT\n \nColumn name | Description | \n \nid | Sequence number that shows in which order tables are\njoined. | \n \nselect_type | What kind of SELECT the table comes from. | \n \ntable | Alias name of table. Materialized temporary tables\nfor sub queries are named  | \n \ntype | How rows are found from the table (join type). | \n \npossible_keys | keys in table that could be used to find\nrows in the table | \n \nkey | The name of the key that is used to retrieve rows.\nNULL is no key was used. | \n \nkey_len | How many bytes of the key that was used (shows if\nwe are using only parts of the multi-column key). | \n \nref | The reference that is used to as the key value. | \n \nrows | An estimate of how many rows we will find in the\ntable for each key lookup. | \n \nExtra | Extra information about this join. | \n \nHere are descriptions of the values for some of the more\ncomplex columns in EXPLAIN ... SELECT:\n \n\"select_type\" column\n \nThe select_type column can have the following values:\n \nValue | Description | \n \nDEPENDENT SUBQUERY | The SUBQUERY is DEPENDENT. | \n \nDEPENDENT UNION | The UNION is DEPENDENT. | \n \nDERIVED | The SELECT is DERIVED from the PRIMARY. | \n \nMATERIALIZED | The SUBQUERY is MATERIALIZED. | \n \nPRIMARY | The SELECT is a PRIMARY one. | \n \nSIMPLE | The SELECT is a SIMPLE one. | \n \nSUBQUERY | The SELECT is a SUBQUERY of the PRIMARY. | \n \nUNCACHEABLE SUBQUERY | The SUBQUERY is UNCACHEABLE. | \n \nUNCACHEABLE UNION | The UNION is UNCACHEABLE. | \n \nUNION | The SELECT is a UNION of the PRIMARY. | \n \nUNION RESULT | The result of the UNION. | \n \n\"Type\" column\n \nThis column contains information on how the table is\naccessed.\n \nValue | Description | \n \nALL | A full table scan is done for the table (all rows are\nread). This is bad if the table is large and the table is\njoined against a previous table! This happens when the\noptimizer could not find any usable index to access rows. | \n \nconst | There is only one possibly matching row in the\ntable. The row is read before the optimization phase and all\ncolumns in the table are treated as constants. | \n \neq_ref | A unique index is used to find the rows. This is\nthe best possible plan to find the row. | \n \nfulltext | A fulltext index is used to access the rows. | \n \nindex_merge | A \'range\' access is done for for several\nindex and the found rows are merged. The key column shows\nwhich keys are used. | \n \nindex_subquery | This is similar as ref, but used for sub\nqueries that are transformed to key lookups. | \n \nindex | A full scan over the used index. Better than ALL but\nstill bad if index is large and the table is joined against\na previous table. | \n \nrange | The table will be accessed with a key over one or\nmore value ranges. | \n \nref_or_null | Like \'ref\' but in addition another search\nfor the \'null\' value is done if the first value was not\nfound. This happens usually with sub queries. | \n \nref | A non unique index or prefix of an unique index is\nused to find the rows. Good if the prefix doesn\'t match\nmany rows. | \n \nsystem | The table has 0 or 1 rows. | \n \nunique_subquery | This is similar as eq_ref, but used for\nsub queries that are transformed to key lookups | \n \n\"Extra\" column\n \nThis column consists of one or more of the following values,\nseparated by \';\'\n \n Note that some of these values are detected after the\noptimization phase.\n \nThe optimization phase can do the following changes to the\nWHERE clause:\nAdd the expressions from the ON and USING clauses to the\nWHERE\n clause.\nConstant propagation: If there is column=constant, replace\nall column\n instances with this constant.\nReplace all columns from \'const\' tables with their values.\nRemove the used key columns from the WHERE (as this will be\ntested as\n part of the key lookup).\nRemove impossible constant sub expressions.\n For example WHERE \'(a=1 and a=2) OR b=1\' becomes \'b=1\'.\nReplace columns with other columns that has identical\nvalues:\n Example: WHERE a=b and a=c may be treated\n as \'WHERE a=b and a=c and b=c\'.\nAdd extra conditions to detect impossible row conditions\nearlier. This\n happens mainly with OUTER JOIN where we in some cases add\ndetection\n of NULL values in the WHERE (Part of \'Not exists\'\noptimization).\n This can cause an unexpected \'Using where\' in the Extra\ncolumn.\nFor each table level we remove expressions that have already\nbeen tested when\n we read the previous row. Example: When joining tables t1\nwith t2\n using the following WHERE \'t1.a=1 and t1.a=t2.b\', we\ndon\'t have to\n test \'t1.a=1\' when checking rows in t2 as we already know\nthat this\n expression is true. \n \nValue | Description | \n \nconst row not found | The table was a system table (a table\nwith should exactly one row), but no row was found. | \n \nDistinct | If distinct optimization (remove duplicates) was\nused. This is marked only for the last table in the SELECT.\n| \n \nFull scan on NULL key | The table is a part of the sub query\nand if the value that is used to match the sub query will be\nNULL, we will do a full table scan. | \n \nImpossible HAVING | The used HAVING clause is always false\nso the SELECT will return no rows. | \n \nImpossible WHERE noticed after reading const tables. | The\nused WHERE clause is always false so the SELECT will return\nno rows. This case was detected after we had read all\n\'const\' tables and used the column values as constant in\nthe WHERE clause. For example: WHERE const_column=5 and\nconst_column had a value of 4. | \n \nImpossible WHERE | The used WHERE clause is always false so\nthe SELECT will return no rows. For example: WHERE 1=2 | \n \nNo matching min/max row | During early optimization of\nMIN()/MAX() values it was detected that no row could match\nthe WHERE clause. The MIN()/MAX() function will return NULL.\n| \n \nno matching row in const table | The table was a const table\n(a table with only one possible matching row), but no row\nwas found. | \n \nNo tables used | The SELECT was a sub query that did not use\nany tables. For example a there was no FROM clause or a FROM\nDUAL clause. | \n \nNot exists | Stop searching after more row if we find one\nsingle matching row. This optimization is used with LEFT\nJOIN where one is explicitly searching for rows that\ndoesn\'t exists in the LEFT JOIN TABLE. Example: SELECT *\nFROM t1 LEFT JOIN t2 on (...) WHERE t2.not_null_column IS\nNULL. As t2.not_null_column can only be NULL if there was no\nmatching row for on condition, we can stop searching if we\nfind a single matching row. | \n \nOpen_frm_only | For information_schema tables. Only the frm\n(table definition file was opened) was opened for each\nmatching row. | \n \nOpen_full_table | For information_schema tables. A full\ntable open for each matching row is done to retrieve the\nrequested information. (Slow) | \n \nOpen_trigger_only | For information_schema tables. Only the\ntrigger file definition was opened for each matching row. | \n \nRange checked for each record (index map: ...) | This only\nhappens when there was no good default index to use but\nthere may some index that could be used when we can treat\nall columns from previous table as constants. For each row\ncombination the optimizer will decide which index to use (if\nany) to fetch a row from this table. This is not fast, but\nfaster than a full table scan that is the only other choice.\nThe index map is a bitmask that shows which index are\nconsidered for each row condition. | \n \nScanned 0/1/all databases | For information_schema tables.\nShows how many times we had to do a directory scan. | \n \nSelect tables optimized away | All tables in the join was\noptimized away. This happens when we are only using\nCOUNT(*), MIN() and MAX() functions in the SELECT and we\nwhere able to replace all of these with constants. | \n \nSkip_open_table | For information_schema tables. The queried\ntable didn\'t need to be opened. | \n \nunique row not found | The table was detected to be a const\ntable (a table with only one possible matching row) during\nthe early optimization phase, but no row was found. | \n \nUsing filesort | Filesort is needed to resolve the query.\nThis means an extra phase where we first collect all columns\nto sort, sort them with a disk based merge sort and then use\nthe sorted set to retrieve the rows in sorted order. If the\ncolumn set is small, we store all the columns in the sort\nfile to not have to go to the database to retrieve them\nagain. | \n \nUsing index | Only the index is used to retrieve the needed\ninformation from the table. There is no need to perform an\nextra seek to retrieve the actual record. | \n \nUsing index condition | Like \'Using where\' but the where\ncondition is pushed down to the table engine for internal\noptimization at the index level. | \n \nUsing index condition(BKA) | Like \'Using index condition\'\nbut in addition we use batch key access to retrieve rows. | \n \nUsing index for group-by | The index is being used to\nresolve a GROUP BY or DISTINCT query. The rows are not read.\nThis is very efficient if the table has a lot of identical\nindex entries as duplicates are quickly jumped over. | \n \nUsing intersect(...) | For index_merge joins. Shows which\nindex are part of the intersect. | \n \nUsing join buffer | We store previous row combinations in a\nrow buffer to be able to match each row against all of the\nrows combinations in the join buffer at one go. | \n \nUsing sort_union(...) | For index_merge joins. Shows which\nindex are part of the union. | \n \nUsing temporary | A temporary table is created to hold the\nresult. This typically happens if you are using GROUP BY,\nDISTINCT or ORDER BY. | \n \nUsing where | A WHERE expression (in additional to the\npossible key lookup) is used to check if the row should be\naccepted. If you don\'t have \'Using where\' together with a\njoin type of ALL, you are probably doing something wrong! | \n \nUsing where with pushed condition | Like \'Using where\' but\nthe where condition is pushed down to the table engine for\ninternal optimization at the row level. | \n \nUsing buffer | The UPDATE statement will first buffer the\nrows, and then run the updates, rather than do updates on\nthe fly. See Using Buffer UPDATE Algorithm for a detailed\nexplanation. | \n \nEXPLAIN EXTENDED\n \nThe EXTENDED keyword adds another column, filtered, to the\noutput. This is a percentage estimate of the table rows that\nwill be filtered by the condition.\n \nAn EXPLAIN EXTENDED will always throw a warning, as it adds\nextra Message information to a subsequent SHOW WARNINGS\nstatement. This includes what the SELECT query would look\nlike after optimizing and rewriting rules are applied and\nhow the optimizer qualifies columns and tables.\n \nExamples\n-------- \nAs synonym for DESCRIBE or SHOW COLUMNS FROM:\n \nDESCRIBE city;\n \n+------------+----------+------+-----+---------+----------------+\n| Field | Type | Null | Key | Default | Extra |\n+------------+----------+------+-----+---------+----------------+\n| Id | int(11) | NO | PRI | NULL | auto_increment |\n| Name | char(35) | YES | | NULL | |\n| Country | char(3) | NO | UNI | | |\n| District | char(20) | YES | MUL | | |\n| Population | int(11) | YES | | NULL | |\n+------------+----------+------+-----+---------+----------------+\n \nA simple set of examples to see how EXPLAIN can identify\npoor index usage:\n \nCREATE TABLE IF NOT EXISTS `employees_example` (\n `id` int(11) NOT NULL AUTO_INCREMENT,\n `first_name` varchar(30) NOT NULL,\n `last_name` varchar(40) NOT NULL,\n `position` varchar(25) NOT NULL,\n `home_address` varchar(50) NOT NULL,\n `home_phone` varchar(12) NOT NULL,\n `employee_code` varchar(25) NOT NULL,\n PRIMARY KEY (`id`),\n UNIQUE KEY `employee_code` (`employee_code`),\n KEY `first_name` (`first_name`,`last_name`)\n) ENGINE=Aria;\n \nINSERT INTO `employees_example` (`first_name`, `last_name`,\n`position`, `home_address`, `home_phone`, `employee_code`)\n VALUES\n (\'Mustapha\', \'Mond\', \'Chief Executive Officer\', \'692\nPromiscuous Plaza\', \'326-555-3492\', \'MM1\'),\n (\'Henry\', \'Foster\', \'Store Manager\', \'314 Savage\nCircle\', \'326-555-3847\', \'HF1\'),\n (\'Bernard\', \'Marx\', \'Cashier\', \'1240 Ambient\nAvenue\', \'326-555-8456\', \'BM1\'),\n (\'Lenina\', \'Crowne\', \'Cashier\', \'281 Bumblepuppy\nBoulevard\', \'328-555-2349\', \'LC1\'),\n (\'Fanny\', \'Crowne\', \'Restocker\', \'1023 Bokanovsky\nLane\', \'326-555-6329\', \'FC1\'),\n (\'Helmholtz\', \'Watson\', \'Janitor\', \'944 Soma\nCourt\', \'329-555-2478\', \'HW1\');\n \nSHOW INDEXES FROM employees_example;\n \n+-------------------+------------+---------------+--------------+---------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| Table | Non_unique | Key_name | Seq_in_index | Column_name\n| Collation | Cardinality | Sub_part | Packed | Null |\nIndex_type | Comment | Index_comment |\n+-------------------+------------+---------------+--------------+---------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| employees_example | 0 | PRIMARY | 1 | id | A | 7 | NULL |\nNULL | | BTREE | | |\n| employees_example | 0 | employee_code | 1 | employee_code\n| A | 7 | NULL | NULL | | BTREE | | |\n| employees_example | 1 | first_name | 1 | first_name | A |\nNULL | NULL | NULL | | BTREE | | |\n| employees_example | 1 | first_name | 2 | last_name | A |\nNULL | NULL | NULL | | BTREE | | |\n+-------------------+------------+---------------+--------------+---------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n \nSELECT on a primary key:\n \nEXPLAIN SELECT * FROM employees_example WHERE id=1;\n \n+------+-------------+-------------------+-------+---------------+---------+---------+-------+------+-------+\n| id | select_type | table | type | possible_keys | key |\nkey_len | ref | rows | Extra |\n+------+-------------+-------------------+-------+---------------+---------+---------+-------+------+-------+\n| 1 | SIMPLE | employees_example | const | PRIMARY | PRIMARY\n| 4 | const | 1 | |\n+------+-------------+-------------------+-------+---------------+---------+---------+-------+------+-------+\n \nThe type is const, which means that only one possible result\ncould be returned. \nNow, returning the same record but searching by their phone\nnumber:\n \nEXPLAIN SELECT * FROM employees_example WHERE\nhome_phone=\'326-555-3492\';\n \n+------+-------------+-------------------+------+---------------+------+---------+------+------+-------------+\n| id | select_type | table | type | possible_keys | key |\nkey_len | ref | rows | Extra |\n+------+-------------+-------------------+------+---------------+------+---------+------+------+-------------+\n| 1 | SIMPLE | employees_example | ALL | NULL | NULL | NULL\n| NULL | 6 | Using where |\n+------+-------------+-------------------+------+---------------+------+---------+------+------+-------------+\n \nHere, the type is All, which means no index could be used.\nLooking at the rows count, a full table scan (all six rows)\nhad to be performed in order to retrieve the record. If\nit\'s a requirement to search by phone number, an index will\nhave to be created.\n \nSHOW EXPLAIN example:\n \nSHOW EXPLAIN FOR 1;\n \n+------+-------------+-------+-------+---------------+------+---------+------+---------+-------------+\n| id | select_type | table | type | possible_keys | key |\nkey_len | ref | rows | Extra |\n+------+-------------+-------+-------+---------------+------+---------+------+---------+-------------+\n| 1 | SIMPLE | tbl | index | NULL | a | 5 | NULL | 1000107 |\nUsing index |\n+------+-------------+-------+-------+---------------+------+---------+------+---------+-------------+\n1 row in set, 1 warning (0.00 sec)\n \nExample of ref_or_null optimization\n \nSELECT * FROM table_name\n WHERE key_column=expr OR key_column IS NULL;\n \nref_or_null is something that often happens when you use\nsubqueries with NOT IN as then one has to do an extra check\nfor NULL values if the first value didn\'t have a matching\nrow. \n \n\n\nURL: https://mariadb.com/kb/en/explain/', '', 'https://mariadb.com/kb/en/explain/'),
(446, 'EXPLAIN ANALYZE', 28, 'The syntax for the EXPLAIN ANALYZE feature was changed to\nANALYZE statement, available since MariaDB 10.1.0. See\nANALYZE statement. \n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/explain-analyze/', '', 'https://mariadb.com/kb/en/explain-analyze/'),
(450, 'CONTAINS', 30, 'Syntax\n------ \nContains(g1,g2)\n \nDescription\n----------- \nReturns 1 or 0 to indicate whether a geometry g1 completely\ncontains geometry g2. CONTAINS() is based on the original\nMySQL implementation and uses object bounding rectangles,\nwhile ST_CONTAINS() uses object shapes. \n \nThis tests the opposite relationship to Within().\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/contains/', '', 'https://mariadb.com/kb/en/contains/'),
(451, 'CROSSES', 30, 'Syntax\n------ \nCrosses(g1,g2)\n \nDescription\n----------- \nReturns 1 if g1 spatially crosses g2. Returns NULL if g1 is\na Polygon or a MultiPolygon, or if g2 is a\nPoint or a MultiPoint. Otherwise, returns 0.\n \nThe term spatially crosses denotes a spatial relation\nbetween two\ngiven geometries that has the following properties:\nThe two geometries intersect\nTheir intersection results in a geometry that has a\ndimension that is one\n less than the maximum dimension of the two given geometries\nTheir intersection is not equal to either of the two given\ngeometries\n \nCROSSES() is based on the original MySQL implementation, and\nuses object bounding rectangles, while ST_CROSSES() uses\nobject shapes.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/crosses/', '', 'https://mariadb.com/kb/en/crosses/'),
(226, '&gt;', 18, 'Syntax\n------ \n>\n \nDescription\n----------- \nGreater than operator. Evaluates both SQL expressions and\nreturns 1 if the left value is greater than the right value\nand 0 if it is not, or NULL if either expression is NULL. If\nthe expressions return different data types, (for instance,\na number and a string), performs type conversion.\n \nWhen used in row comparisons these two queries return the\nsame results:\n \nSELECT (t1.a, t1.b) > (t2.x, t2.y) \nFROM t1 INNER JOIN t2;\n \nSELECT (t1.a > t2.x) OR ((t1.a = t2.x) AND (t1.b > t2.y))\nFROM t1 INNER JOIN t2;\n \nExamples\n-------- \nSELECT 2 > 2;\n \n+-------+\n| 2 > 2 |\n+-------+\n| 0 |\n+-------+\n \nSELECT \'b\' > \'a\';\n \n+-----------+\n| \'b\' > \'a\' |\n+-----------+\n| 1 |\n+-----------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/greater-than/', '', 'https://mariadb.com/kb/en/greater-than/'),
(227, '&gt;=', 18, 'Syntax\n------ \n>=\n \nDescription\n----------- \nGreater than or equal operator. Evaluates both SQL\nexpressions and returns 1 if the left value is greater than\nor equal to the right value and 0 if it is not, or NULL if\neither expression is NULL. If the expressions return\ndifferent data types, (for instance, a number and a string),\nperforms type conversion.\n \nWhen used in row comparisons these two queries return the\nsame results:\n \nSELECT (t1.a, t1.b) >= (t2.x, t2.y) \nFROM t1 INNER JOIN t2;\n \nSELECT (t1.a > t2.x) OR ((t1.a = t2.x) AND (t1.b >= t2.y))\nFROM t1 INNER JOIN t2;\n \nExamples\n-------- \nSELECT 2 >= 2;\n \n+--------+\n| 2 >= 2 |\n+--------+\n| 1 |\n+--------+\n \nSELECT \'A\' >= \'a\';\n \n+------------+\n| \'A\' >= \'a\' |\n+------------+\n| 1 |\n+------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/greater-than-or-equal/', '', 'https://mariadb.com/kb/en/greater-than-or-equal/'),
(229, 'COALESCE', 18, 'Syntax\n------ \nCOALESCE(value,...)\n \nDescription\n----------- \nReturns the first non-NULL value in the list, or NULL if\nthere are no\nnon-NULL values. At least one parameter must be passed.\n \nSee also NULL Values in MariaDB.\n \nExamples\n-------- \nSELECT COALESCE(NULL,1);\n+------------------+\n| COALESCE(NULL,1) |\n+------------------+\n| 1 |\n+------------------+\n \nSELECT COALESCE(NULL,NULL,NULL);\n+--------------------------+\n| COALESCE(NULL,NULL,NULL) |\n+--------------------------+\n| NULL |\n+--------------------------+\n \nWhen two arguments are given, COALESCE() is the same as\nIFNULL():\n \nSET @a=NULL, @b=1;\n \nSELECT COALESCE(@a, @b), IFNULL(@a, @b);\n+------------------+----------------+\n| COALESCE(@a, @b) | IFNULL(@a, @b) |\n+------------------+----------------+\n| 1 | 1 |\n+------------------+----------------+\n \nHex type confusion:\n \nCREATE TABLE t1 (a INT, b VARCHAR(10));\nINSERT INTO t1 VALUES (0x31, 0x61),(COALESCE(0x31),\nCOALESCE(0x61));\n \nSELECT * FROM t1;\n \n+------+------+\n| a | b |\n+------+------+\n| 49 | a |\n| 1 | a |\n+------+------+\n \nThe reason for the differing results above is that when 0x31\nis inserted directly to the column, it\'s treated as a\nnumber (see Hexadecimal Literals), while when 0x31 is passed\nto COALESCE(), it\'s treated as a string, because:\nHEX values have a string data type by default.\nCOALESCE() has the same data type as the argument. \n \n\n\nURL: https://mariadb.com/kb/en/coalesce/', '', 'https://mariadb.com/kb/en/coalesce/'),
(231, 'IN', 18, 'Syntax\n------ \nexpr IN (value,...)\n \nDescription\n----------- \nReturns 1 if expr is equal to any of the values in the IN\nlist, else\nreturns 0. If all values are constants, they are evaluated\naccording\nto the type of expr and sorted. The search for the item then\nis done\nusing a binary search. This means IN is very quick if the IN\nvalue\nlist consists entirely of constants. Otherwise, type\nconversion takes\nplace according to the rules described at Type Conversion,\nbut\napplied to all the arguments.\n \nIf expr is NULL, IN always returns NULL. If at least one of\nthe values in the list is NULL, and one of the comparisons\nis true, the result is 1. If at least one of the values in\nthe list is NULL and none of the comparisons is true, the\nresult is NULL.\n \nExamples\n-------- \nSELECT 2 IN (0,3,5,7);\n+----------------+\n| 2 IN (0,3,5,7) |\n+----------------+\n| 0 |\n+----------------+\n \nSELECT \'wefwf\' IN (\'wee\',\'wefwf\',\'weg\');\n+----------------------------------+\n| \'wefwf\' IN (\'wee\',\'wefwf\',\'weg\') |\n+----------------------------------+\n| 1 |\n+----------------------------------+ \n \nType conversion:\n \nSELECT 1 IN (\'1\', \'2\', \'3\');\n+----------------------+\n| 1 IN (\'1\', \'2\', \'3\') |\n+----------------------+\n| 1 |\n+----------------------+\n \nSELECT NULL IN (1, 2, 3);\n+-------------------+\n| NULL IN (1, 2, 3) |\n+-------------------+\n| NULL |\n+-------------------+\n \nMariaDB [(none)]> SELECT 1 IN (1, 2, NULL);\n+-------------------+\n| 1 IN (1, 2, NULL) |\n+-------------------+\n| 1 |\n+-------------------+\n \nMariaDB [(none)]> SELECT 5 IN (1, 2, NULL);\n+-------------------+\n| 5 IN (1, 2, NULL) |\n+-------------------+\n| NULL |\n+-------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/in/', '', 'https://mariadb.com/kb/en/in/'),
(452, 'DISJOINT', 30, 'Syntax\n------ \nDisjoint(g1,g2)\n \nDescription\n----------- \nReturns 1 or 0 to indicate whether g1 is spatially disjoint\nfrom\n(does not intersect) g2.\n \nDISJOINT() tests the opposite relationship to INTERSECTS().\n \nDISJOINT() is based on the original MySQL implementation and\nuses object bounding rectangles, while ST_DISJOINT() uses\nobject shapes.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/disjoint/', '', 'https://mariadb.com/kb/en/disjoint/'),
(453, 'EQUALS', 30, 'Syntax\n------ \nEquals(g1,g2)\n \nFrom MariaDB 10.2.3:\n \nMBREQUALS(g1,g2)\n \nDescription\n----------- \nReturns 1 or 0 to indicate whether g1 is spatially equal to\ng2.\n \nEQUALS() is based on the original MySQL implementation and\nuses object bounding rectangles, while ST_EQUALS() uses\nobject shapes.\n \nFrom MariaDB 10.2.3, MBREQUALS is a synonym for Equals.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/equals/', '', 'https://mariadb.com/kb/en/equals/'),
(454, 'INTERSECTS', 30, 'Syntax\n------ \nINTERSECTS(g1,g2)\n \nDescription\n----------- \nReturns 1 or 0 to indicate whether geometry g1 spatially\nintersects geometry g2.\n \nINTERSECTS() is based on the original MySQL implementation\nand uses object bounding rectangles, while ST_INTERSECTS()\nuses object shapes.\n \nINTERSECTS() tests the opposite relationship to DISJOINT().\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/intersects/', '', 'https://mariadb.com/kb/en/intersects/'),
(455, 'OVERLAPS', 30, 'Syntax\n------ \nOVERLAPS(g1,g2)\n \nDescription\n----------- \nReturns 1 or 0 to indicate whether g1 spatially overlaps g2.\nThe term spatially overlaps is used if two geometries\nintersect and their\nintersection results in a geometry of the same dimension but\nnot equal to\neither of the given geometries.\n \nOVERLAPS() is based on the original MySQL implementation and\nuses object bounding rectangles, while ST_OVERLAPS() uses\nobject shapes.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/overlaps/', '', 'https://mariadb.com/kb/en/overlaps/'),
(458, 'ST_DIFFERENCE', 30, 'Syntax\n------ \nST_DIFFERENCE(g1,g2)\n \nDescription\n----------- \nReturns a geometry representing the point set difference of\nthe given geometry values.\n \nExample\n \nSET @g1 = POINT(10,10), @g2 = POINT(20,20);\n \nSELECT ST_AsText(ST_Difference(@g1, @g2));\n+------------------------------------+\n| ST_AsText(ST_Difference(@g1, @g2)) |\n+------------------------------------+\n| POINT(10 10) |\n+------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_difference/', '', 'https://mariadb.com/kb/en/st_difference/'),
(233, 'IS', 18, 'Syntax\n------ \nIS boolean_value\n \nDescription\n----------- \nTests a value against a boolean value, where boolean_value\ncan be\nTRUE, FALSE, or UNKNOWN.\n \nThere is an important difference between using IS TRUE or\ncomparing a value with TRUE using =. When using =, only 1\nequals to TRUE. But when using IS TRUE, all values which are\nlogically true (like a number > 1) return TRUE.\n \nExamples\n-------- \nSELECT 1 IS TRUE, 0 IS FALSE, NULL IS UNKNOWN;\n+-----------+------------+-----------------+\n| 1 IS TRUE | 0 IS FALSE | NULL IS UNKNOWN |\n+-----------+------------+-----------------+\n| 1 | 1 | 1 |\n+-----------+------------+-----------------+\n \nDifference between = and IS TRUE:\n \nSELECT 2 = TRUE, 2 IS TRUE;\n+----------+-----------+\n| 2 = TRUE | 2 IS TRUE |\n+----------+-----------+\n| 0 | 1 |\n+----------+-----------+\n \n\n\nURL: https://mariadb.com/kb/en/is/', '', 'https://mariadb.com/kb/en/is/'),
(234, 'IS NOT', 18, 'Syntax\n------ \nIS NOT boolean_value\n \nDescription\n----------- \nTests a value against a boolean value, where boolean_value\ncan be\nTRUE, FALSE, or UNKNOWN. \n \nExamples\n-------- \nSELECT 1 IS NOT UNKNOWN, 0 IS NOT UNKNOWN, NULL IS NOT\nUNKNOWN;\n+------------------+------------------+---------------------+\n| 1 IS NOT UNKNOWN | 0 IS NOT UNKNOWN | NULL IS NOT UNKNOWN\n|\n+------------------+------------------+---------------------+\n| 1 | 1 | 0 |\n+------------------+------------------+---------------------+\n \nSELECT NULL IS NOT TRUE, NULL IS NOT FALSE;\n+------------------+-------------------+\n| NULL IS NOT TRUE | NULL IS NOT FALSE |\n+------------------+-------------------+\n| 1 | 1 |\n+------------------+-------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/is-not/', '', 'https://mariadb.com/kb/en/is-not/'),
(236, 'IS NULL', 18, 'Syntax\n------ \nIS NULL\n \nDescription\n----------- \nTests whether a value is NULL. See also NULL Values in\nMariaDB.\n \nExamples\n-------- \nSELECT 1 IS NULL, 0 IS NULL, NULL IS NULL;\n+-----------+-----------+--------------+\n| 1 IS NULL | 0 IS NULL | NULL IS NULL |\n+-----------+-----------+--------------+\n| 0 | 0 | 1 |\n+-----------+-----------+--------------+\n \nCompatibility\n \nSome ODBC applications use the syntax auto_increment_field\nIS NOT NULL to find the latest row that was inserted with an\nautogenerated key value. If your applications need this, you\ncan set the sql_auto_is_null variable to 1.\n \nSET @@sql_auto_is_null=1;\nCREATE TABLE t1 (auto_increment_column INT NOT NULL\nAUTO_INCREMENT PRIMARY KEY);\nINSERT INTO t1 VALUES (NULL);\nSELECT * FROM t1 WHERE auto_increment_column IS NULL;\n \n+-----------------------+\n| auto_increment_column |\n+-----------------------+\n| 1 |\n+-----------------------+\n \n\n\nURL: https://mariadb.com/kb/en/is-null/', '', 'https://mariadb.com/kb/en/is-null/'),
(238, 'LEAST', 18, 'Syntax\n------ \nLEAST(value1,value2,...)\n \nDescription\n----------- \nWith two or more arguments, returns the smallest\n(minimum-valued)\nargument. The arguments are compared using the following\nrules:\nIf the return value is used in an INTEGER context or all\narguments are integer-valued, they are compared as integers.\nIf the return value is used in a REAL context or all\narguments are real-valued, they are compared as reals.\nIf any argument is a case-sensitive string, the arguments\nare compared as case-sensitive strings.\nIn all other cases, the arguments are compared as\ncase-insensitive strings.\n \nLEAST() returns NULL if any argument is NULL.\n \nExamples\n-------- \nSELECT LEAST(2,0);\n+------------+\n| LEAST(2,0) |\n+------------+\n| 0 |\n+------------+\n \nSELECT LEAST(34.0,3.0,5.0,767.0);\n+---------------------------+\n| LEAST(34.0,3.0,5.0,767.0) |\n+---------------------------+\n| 3.0 |\n+---------------------------+\n \nSELECT LEAST(\'B\',\'A\',\'C\');\n+--------------------+\n| LEAST(\'B\',\'A\',\'C\') |\n+--------------------+\n| A |\n+--------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/least/', '', 'https://mariadb.com/kb/en/least/'),
(239, 'NOT BETWEEN', 18, 'Syntax\n------ \nexpr NOT BETWEEN min AND max\n \nDescription\n----------- \nThis is the same as NOT (expr BETWEEN min AND max).\n \nNote that the meaning of the alternative form NOT expr\nBETWEEN min AND max is affected by the HIGH_NOT_PRECEDENCE\nSQL_MODE flag.\n \nExamples\n-------- \nSELECT 1 NOT BETWEEN 2 AND 3;\n+-----------------------+\n| 1 NOT BETWEEN 2 AND 3 |\n+-----------------------+\n| 1 |\n+-----------------------+\n \nSELECT \'b\' NOT BETWEEN \'a\' AND \'c\';\n+-----------------------------+\n| \'b\' NOT BETWEEN \'a\' AND \'c\' |\n+-----------------------------+\n| 0 |\n+-----------------------------+\n \nNULL:\n \nSELECT 1 NOT BETWEEN 1 AND NULL;\n+--------------------------+\n| 1 NOT BETWEEN 1 AND NULL |\n+--------------------------+\n| NULL |\n+--------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/not-between/', '', 'https://mariadb.com/kb/en/not-between/'),
(240, 'NOT IN', 18, 'Syntax\n------ \nexpr NOT IN (value,...)\n \nDescription\n----------- \nThis is the same as NOT (expr IN (value,...)).\n \nExamples\n-------- \nSELECT 2 NOT IN (0,3,5,7);\n+--------------------+\n| 2 NOT IN (0,3,5,7) |\n+--------------------+\n| 1 |\n+--------------------+\n \nSELECT \'wefwf\' NOT IN (\'wee\',\'wefwf\',\'weg\');\n+--------------------------------------+\n| \'wefwf\' NOT IN (\'wee\',\'wefwf\',\'weg\') |\n+--------------------------------------+\n| 0 |\n+--------------------------------------+\n \nSELECT 1 NOT IN (\'1\', \'2\', \'3\');\n+--------------------------+\n| 1 NOT IN (\'1\', \'2\', \'3\') |\n+--------------------------+\n| 0 |\n+--------------------------+\n \nNULL:\n \nSELECT NULL NOT IN (1, 2, 3);\n+-----------------------+\n| NULL NOT IN (1, 2, 3) |\n+-----------------------+\n| NULL |\n+-----------------------+\n \nSELECT 1 NOT IN (1, 2, NULL);\n+-----------------------+\n| 1 NOT IN (1, 2, NULL) |\n+-----------------------+\n| 0 |\n+-----------------------+\n \nSELECT 5 NOT IN (1, 2, NULL);\n+-----------------------+\n| 5 NOT IN (1, 2, NULL) |\n+-----------------------+\n| NULL |\n+-----------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/not-in/', '', 'https://mariadb.com/kb/en/not-in/'),
(460, 'ST_DISTANCE', 30, 'ST_DISTANCE() was introduced in MariaDB 5.3.3.\n \nSyntax\n------ \nST_DISTANCE(g1,g2)\n \nDescription\n----------- \nReturns the distance between two geometries, or null if not\ngiven valid inputs.\n \nExample\n \nSELECT ST_Distance(POINT(1,2),POINT(2,2));\n+------------------------------------+\n| ST_Distance(POINT(1,2),POINT(2,2)) |\n+------------------------------------+\n| 1 |\n+------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_distance/', '', 'https://mariadb.com/kb/en/st_distance/'),
(463, 'ST_LENGTH', 30, 'Syntax\n------ \nST_LENGTH(ls)\n \nDescription\n----------- \nReturns as a double-precision number the length of the\nLineString value ls in its associated spatial reference.\n \nExamples\n-------- \nSET @ls = \'LineString(1 1,2 2,3 3)\';\n \nSELECT ST_LENGTH(ST_GeomFromText(@ls));\n+---------------------------------+\n| ST_LENGTH(ST_GeomFromText(@ls)) |\n+---------------------------------+\n| 2.82842712474619 |\n+---------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_length/', '', 'https://mariadb.com/kb/en/st_length/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(464, 'ST_OVERLAPS', 30, 'Syntax\n------ \nST_OVERLAPS(g1,g2)\n \nDescription\n----------- \nReturns 1 or 0 to indicate whether geometry g1 spatially\noverlaps geometry g2.\n \nThe term spatially overlaps is used if two geometries\nintersect and their\nintersection results in a geometry of the same dimension but\nnot equal to\neither of the given geometries.\n \nST_OVERLAPS() uses object shapes, while OVERLAPS(), based on\nthe original MySQL implementation, uses object bounding\nrectangles.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st-overlaps/', '', 'https://mariadb.com/kb/en/st-overlaps/'),
(249, 'Parentheses', 19, 'Parentheses are sometimes called precedence operators - this\nmeans that they can be used to change the other operator\'s\nprecedence in an expression. The expressions that are\nwritten between parentheses are computed before the\nexpressions that are written outside. Parentheses must\nalways contain an expression (that is, they cannot be\nempty), and can be nested.\n \nFor example, the following expressions could return\ndifferent results:\nNOT a OR b\nNOT (a OR b)\n \nIn the first case, NOT applies to a, so if a is FALSE or b\nis TRUE, the expression returns TRUE. In the second case,\nNOT applies to the result of a OR b, so if at least one of a\nor b is TRUE, the expression is TRUE.\n \nWhen the precedence of operators is not intuitive, you can\nuse parentheses to make it immediately clear for whoever\nreads the statement.\n \nThe precedence of the NOT operator can also be affected by\nthe HIGH_NOT_PRECEDENCE SQL_MODE flag.\n \nOther uses\n \nParentheses must always be used to enclose subqueries.\n \nParentheses can also be used in a JOIN statement between\nmultiple tables to determine which tables must be joined\nfirst.\n \nAlso, parentheses are used to enclose the list of parameters\nto be passed to built-in functions, user-defined functions\nand stored routines. However, when no parameter is passed to\na stored procedure, parentheses are optional. For builtin\nfunctions and user-defined functions, spaces are not allowed\nbetween the function name and the open parenthesis, unless\nthe IGNORE_SPACE SQL_MODE is set. For stored routines (and\nfor functions if IGNORE_SPACE is set) spaces are allowed\nbefore the open parenthesis, including tab characters and\nnew line characters.\n \nSyntax errors\n \nIf there are more open parentheses than closed parentheses,\nthe error usually looks like this:\n \nERROR 1064 (42000): You have an error in your SQL syntax;\ncheck the manual that\ncorresponds to your MariaDB server version for the right\nsyntax to use near \'\' a\nt line 1\n \nNote the empty string.\n \nIf there are more closed parentheses than open parentheses,\nthe error usually looks like this:\n \nERROR 1064 (42000): You have an error in your SQL syntax;\ncheck the manual that\ncorresponds to your MariaDB server version for the right\nsyntax to use near \')\'\nat line 1\n \nNote the quoted closed parenthesis.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/parentheses/', '', 'https://mariadb.com/kb/en/parentheses/'),
(251, 'ANALYZE TABLE', 20, 'Syntax\n------ \nANALYZE [NO_WRITE_TO_BINLOG | LOCAL] TABLE tbl_name\n[,tbl_name ...] \n [PERSISTENT FOR [ALL|COLUMNS ([col_name [,col_name ...]])] \n [INDEXES ([index_name [,index_name ...]])]] \n \nDescription\n----------- \nANALYZE TABLE analyzes and stores the key distribution for a\ntable (index statistics). During the analysis, the table is\nlocked with a read lock. This statement works with MyISAM,\nAria and InnoDB tables. For MyISAM tables, this statement is\nequivalent\nto using myisamchk --analyze.\n \nFor more information on how the analysis works within\nInnoDB, see\nInnoDB Limitations.\n \nMariaDB uses the stored key distribution to decide the order\nin which\ntables should be joined when you perform a join on something\nother than\na constant. In addition, key distributions can be used when\ndeciding\nwhich indexes to use for a specific table within a query.\n \nThis statement requires SELECT and INSERT privileges for the\ntable.\n \nBy default, ANALYZE TABLE statements are written to the\nbinary log and will be replicated. The NO_WRITE_TO_BINLOG\nkeyword (LOCAL is an alias) will ensure the statement is not\nwritten to the binary log. \n \nANALYZE TABLE is also supported for partitioned tables. You\ncan use ALTER TABLE ... ANALYZE PARTITION to analyze one or\nmore partitions.\n \nThe Aria storage engine supports progress reporting for the\nANALYZE TABLE statement.\n \nEngine-Independent Statistics\n \nIn MariaDB 10.0 and later, ANALYZE TABLE supports\nengine-independent statistics. See Engine-Independent Table\nStatistics: Collecting Statistics with the ANALYZE TABLE\nStatement for more information.\n \n\n\nURL: https://mariadb.com/kb/en/analyze-table/', '', 'https://mariadb.com/kb/en/analyze-table/'),
(252, 'CHECK TABLE', 20, 'Syntax\n------ \nCHECK TABLE tbl_name [, tbl_name] ... [option] ...\n \noption = {FOR UPGRADE | QUICK | FAST | MEDIUM | EXTENDED |\nCHANGED}\n \nDescription\n----------- \nCHECK TABLE checks a table or tables for errors. CHECK TABLE\nworks for\nArchive, Aria, CSV, InnoDB, and MyISAM tables. For Aria and\nMyISAM tables, the\nkey statistics are updated as well. For CSV, see also\nChecking and Repairing CSV Tables.\n \nAs an alternative, myisamchk is a commandline tool for\nchecking MyISAM tables when the tables are not being\naccessed.\n \nFor checking dynamic columns integrity, COLUMN_CHECK() can\nbe used.\n \nCHECK TABLE can also check views for problems, such as\ntables\nthat are referenced in the view definition that no longer\nexist.\n \nCHECK TABLE is also supported for partitioned tables. You\ncan\nuse ALTER TABLE ... CHECK PARTITION \nto check one or more partitions.\n \nThe meaning of the different options are as follows - note\nthat this can vary a bit between\nstorage engines:\n \nFOR UPGRADE | Do a very quick check if the storage format\nfor the table has changed so that one needs to do a REPAIR.\nThis is only needed when one upgrades between major versions\nof MariaDB or MySQL. This is usually done by running\nmysql_upgrade. | \n \nFAST | Only check tables that has not been closed properly\nor are marked as corrupt. Only supported by the MyISAM and\nAria engines. For other engines the table is checked\nnormally | \n \nCHANGED | Check only tables that has changed since last\nREPAIR / CHECK. Only supported by the MyISAM and Aria\nengines. For other engines the table is checked normally. | \n \nQUICK | Do a fast check. For MyISAM and Aria engine this\nmeans we skip checking the delete link chain which may take\nsome time. | \n \nMEDIUM | Scan also the data files. Checks integrity between\ndata and index files with checksums. In most cases this\nshould find all possible errors. | \n \nEXTENDED | Does a full check to verify every possible error.\nFor MyISAM and Aria we verify for each row that all it keys\nexists and points to the row. This may take a long time on\nbig tables! | \n \nFor most cases running CHECK TABLE without options or MEDIUM\nshould be\ngood enough.\n \nSince MariaDB 5.3, the Aria storage engine supports progress\nreporting for this statement.\n \nIf you want to know if two tables are identical, take a look\nat CHECKSUM TABLE.\n \nXtraDB/InnoDB\n \nIf CHECK TABLE finds an error in an InnoDB table, MariaDB\nmight shutdown to prevent the error propagation. In this\ncase, the problem will be reported in the error log.\nOtherwise, since MariaDB 5.5, the table or an index might be\nmarked as corrupted, to prevent use. This does not happen\nwith some minor problems, like a wrong number of entries in\na secondary index. Those problems are reported in the output\nof CHECK TABLE.\n \nEach tablespace contains a header with metadata. This header\nis not checked by this statement.\n \nDuring the execution of CHECK TABLE, other threads may be\nblocked.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/sql-commands-check-table/', '', 'https://mariadb.com/kb/en/sql-commands-check-table/'),
(467, 'TOUCHES', 30, 'Syntax\n------ \nTouches(g1,g2)\n \nDescription\n----------- \nReturns 1 or 0 to indicate whether g1 spatially touches g2.\nTwo\ngeometries spatially touch if the interiors of the\ngeometries do not intersect,\nbut the boundary of one of the geometries intersects either\nthe boundary or the\ninterior of the other.\n \nTOUCHES() is based on the original MySQL implementation and\nuses object bounding rectangles, while ST_TOUCHES() uses\nobject shapes.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/touches/', '', 'https://mariadb.com/kb/en/touches/'),
(255, 'OPTIMIZE TABLE', 20, 'Syntax\n------ \nOPTIMIZE [NO_WRITE_TO_BINLOG | LOCAL] TABLE\n tbl_name [, tbl_name] ...\n [WAIT n | NOWAIT]\n \nDescription\n----------- \nOPTIMIZE TABLE has two main functions. It can either be used\nto defragment tables, or to update the InnoDB fulltext\nindex.\n \nWAIT/NOWAIT\n \nSet the lock wait timeout. See WAIT and NOWAIT.\n \nDefragmenting\n \nOPTIMIZE TABLE works for InnoDB (before MariaDB 10.1.1, only\nif the innodb_file_per_table server system variable is set),\nAria, MyISAM and ARCHIVE tables, and should be used if you\nhave deleted a large part of a table or if you have made\nmany changes to a table with variable-length\nrows (tables that have VARCHAR, VARBINARY, BLOB, or TEXT\ncolumns). Deleted rows are maintained in a\nlinked list and subsequent INSERT operations reuse old row\npositions.\n \nThis statement requires SELECT and INSERT privileges for the\ntable.\n \nBy default, OPTIMIZE TABLE statements are written to the\nbinary log and will be replicated. The NO_WRITE_TO_BINLOG\nkeyword (LOCAL is an alias) will ensure the statement is not\nwritten to the binary log. \n \nOPTIMIZE TABLE is also supported for partitioned tables. You\ncan use \nALTER TABLE ... OPTIMIZE PARTITION \nto optimize one or more partitions.\n \nYou can use OPTIMIZE TABLE to reclaim the unused\nspace and to defragment the data file. With other storage\nengines, OPTIMIZE TABLE does nothing by default, and returns\nthis message: \" The storage engine for the table doesn\'t\nsupport optimize\". However, if the server has been started\nwith the --skip-new option, OPTIMIZE TABLE is linked to\nALTER TABLE, and recreates the table. This operation frees\nthe unused space and updates index statistics.\n \nSince MariaDB 5.3, the Aria storage engine supports progress\nreporting for this statement.\n \nIf a MyISAM table is fragmented, concurrent inserts will not\nbe performed until an OPTIMIZE TABLE statement is executed\non that table, unless the concurrent_insert server system\nvariable is set to ALWAYS.\n \nUpdating an InnoDB fulltext index\n \nWhen rows are added or deleted to an InnoDB fulltext index,\nthe index is not immediately re-organized, as this can be an\nexpensive operation. Change statistics are stored in a\nseparate location . The fulltext index is only fully\nre-organized when an OPTIMIZE TABLE statement is run.\n \nBy default, an OPTIMIZE TABLE will defragment a table. In\norder to use it to update fulltext index statistics, the\ninnodb_optimize_fulltext_only system variable must be set to\n1. This is intended to be a temporary setting, and should be\nreset to 0 once the fulltext index has been re-organized.\n \nSince fulltext re-organization can take a long time, the\ninnodb_ft_num_word_optimize variable limits the\nre-organization to a number of words (2000 by default). You\ncan run multiple OPTIMIZE statements to fully re-organize\nthe index.\n \nDefragmenting InnoDB tablespaces\n \nMariaDB 10.1.1 merged the Facebook/Kakao defragmentation\npatch \n \nMariaDB 10.1.1 merged the Facebook/Kakao defragmentation\npatch, allowing one to use OPTIMIZE TABLE to defragment\nInnoDB tablespaces. For this functionality to be enabled,\nthe innodb_defragment system variable must be enabled. No\nnew tables are created and there is no need to copy data\nfrom old tables to new tables. Instead, this feature loads n\npages (determined by innodb-defragment-n-pages) and tries to\nmove records so that pages would be full of records and then\nfrees pages that are fully empty after the operation. Note\nthat tablespace files (including ibdata1) will not shrink as\nthe result of defragmentation, but one will get better\nmemory utilization in the InnoDB buffer pool as there are\nfewer data pages in use.\n \nSee Defragmenting InnoDB Tablespaces for more details.\n \n\n\nURL: https://mariadb.com/kb/en/optimize-table/', '', 'https://mariadb.com/kb/en/optimize-table/'),
(256, 'REPAIR TABLE', 20, 'Syntax\n------ \nREPAIR [NO_WRITE_TO_BINLOG | LOCAL] TABLE\n tbl_name [, tbl_name] ...\n [QUICK] [EXTENDED] [USE_FRM]\n \nDescription\n----------- \nREPAIR TABLE repairs a possibly corrupted table. By default,\nit has the same effect as\n \nmyisamchk --recover tbl_name\n \nor\n \naria_chk --recover tbl_name\n \nSee aria_chk and myisamchk for more.\n \nREPAIR TABLE works for Archive, Aria, CSV and MyISAM tables.\nFor XtraDB/InnoDB, see recovery modes. For CSV, see also\nChecking and Repairing CSV Tables. For Archive, this\nstatement also improves compression. If the storage engine\ndoes not support this statement, a warning is issued.\n \nThis statement requires SELECT and INSERT privileges for the\ntable.\n \nBy default, REPAIR TABLE statements are written to the\nbinary log and will be replicated. The NO_WRITE_TO_BINLOG\nkeyword (LOCAL is an alias) will ensure the statement is not\nwritten to the binary log.\n \nWhen an index is recreated, the storage engine may use a\nconfigurable buffer in the process. Incrementing the buffer\nspeeds up the index creation. Aria and MyISAM allocate a\nbuffer whose size is defined by aria_sort_buffer_size or\nmyisam_sort_buffer_size, also used for ALTER TABLE.\n \nREPAIR TABLE is also supported for partitioned tables.\nHowever, the USE_FRM option cannot be used with this\nstatement\non a partitioned table.\n \n ALTER TABLE ... REPAIR PARTITION can be used\nto repair one or more partitions.\n \nThe Aria storage engine supports progress reporting for this\nstatement.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/repair-table/', '', 'https://mariadb.com/kb/en/repair-table/'),
(472, 'CURDATE', 31, 'Syntax\n------ \nCURDATE()\n \nDescription\n----------- \nReturns the current date as a value in \'YYYY-MM-DD\' or\nYYYYMMDD\nformat, depending on whether the function is used in a\nstring or\nnumeric context.\n \nExamples\n-------- \nSELECT CURDATE();\n+------------+\n| CURDATE() |\n+------------+\n| 2019-03-05 |\n+------------+\n \nIn a numeric context (note this is not performing date\ncalculations):\n \nSELECT CURDATE() +0;\n \n+--------------+\n| CURDATE() +0 |\n+--------------+\n| 20190305 |\n+--------------+\n \nData calculation:\n \nSELECT CURDATE() - INTERVAL 5 DAY;\n \n+----------------------------+\n| CURDATE() - INTERVAL 5 DAY |\n+----------------------------+\n| 2019-02-28 |\n+----------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/curdate/', '', 'https://mariadb.com/kb/en/curdate/'),
(473, 'CURRENT_DATE', 31, 'Syntax\n------ \nCURRENT_DATE, CURRENT_DATE()\n \nDescription\n----------- \nCURRENT_DATE and CURRENT_DATE() are synonyms for CURDATE().\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/current_date/', '', 'https://mariadb.com/kb/en/current_date/'),
(474, 'CURRENT_TIME', 31, 'Syntax\n------ \nCURRENT_TIME\nCURRENT_TIME([precision])\n \nDescription\n----------- \nCURRENT_TIME and CURRENT_TIME() are synonyms for CURTIME().\n \n\n\nURL: https://mariadb.com/kb/en/current_time/', '', 'https://mariadb.com/kb/en/current_time/'),
(475, 'CURRENT_TIMESTAMP', 31, 'Syntax\n------ \nCURRENT_TIMESTAMP\nCURRENT_TIMESTAMP([precision])\n \nDescription\n----------- \nCURRENT_TIMESTAMP and CURRENT_TIMESTAMP() are synonyms for\nNOW().\n \n\n\nURL: https://mariadb.com/kb/en/current_timestamp/', '', 'https://mariadb.com/kb/en/current_timestamp/'),
(476, 'CURTIME', 31, 'Syntax\n------ \nCURTIME([precision])\n \nDescription\n----------- \nReturns the current time as a value in \'HH:MM:SS\' or\nHHMMSS.uuuuuu format, depending on whether the function is\nused in a string or numeric context. The value is expressed\nin the current time zone.\n \nThe optional precision determines the microsecond precision.\nSee Microseconds in MariaDB.\n \nExamples\n-------- \nSELECT CURTIME();\n+-----------+\n| CURTIME() |\n+-----------+\n| 12:45:39 |\n+-----------+\n \nSELECT CURTIME() + 0;\n \n+---------------+\n| CURTIME() + 0 |\n+---------------+\n| 124545.000000 |\n+---------------+\n \nWith precision:\n \nSELECT CURTIME(2);\n+-------------+\n| CURTIME(2) |\n+-------------+\n| 09:49:08.09 |\n+-------------+\n \n\n\nURL: https://mariadb.com/kb/en/curtime/', '', 'https://mariadb.com/kb/en/curtime/'),
(257, 'REPAIR VIEW', 20, 'REPAIR VIEW was introduced in MariaDB 10.0.18 and MariaDB\n5.5.43.\n \nSyntax\n------ \nREPAIR [NO_WRITE_TO_BINLOG | LOCAL] VIEW view_name[,\nview_name] ... [FROM MYSQL]\n \nDescription\n----------- \nThe REPAIR VIEW statement was introduced to assist with\nfixing MDEV-6916, an issue introduced in MariaDB 5.2 where\nthe view algorithms were swapped compared to their MySQL on\ndisk representation. It checks whether the view algorithm is\ncorrect. It is run as part of mysql_upgrade, and should not\nnormally be required in regular use.\n \nBy default it corrects the checksum and if necessary adds\nthe mariadb-version field. If the optional FROM MYSQL clause\nis used, and no mariadb-version field is present, the MERGE\nand TEMPTABLE algorithms are toggled.\n \nBy default, REPAIR VIEW statements are written to the binary\nlog and will be replicated. The NO_WRITE_TO_BINLOG keyword\n(LOCAL is an alias) will ensure the statement is not written\nto the binary log.\n \nNote that REPAIR VIEW in MariaDB 10.0.18 and MariaDB 5.5.43\ncould crash the server (see MDEV-8115). Upgrade to a later\nversion.\n \n\n\nURL: https://mariadb.com/kb/en/repair-view/', '', 'https://mariadb.com/kb/en/repair-view/'),
(258, 'CREATE FUNCTION UDF', 21, 'Syntax\n------ \nCREATE [OR REPLACE] [AGGREGATE] FUNCTION [IF NOT EXISTS]\nfunction_name\n RETURNS {STRING|INTEGER|REAL|DECIMAL}\n SONAME shared_library_name\n \nDescription\n----------- \nA user-defined function (UDF) is a way to extend MariaDB\nwith a new function\nthat works like a native (built-in) MariaDB function such as\nABS() or\nCONCAT().\n \nfunction_name is the name that should be used in SQL\nstatements to invoke\nthe function. \n \nTo create a function, you must have the INSERT privilege for\nthe\nmysql database. This is necessary because CREATE FUNCTION\nadds a row to the\nmysql.func system table that records the function\'s name,\ntype, and shared library name. If you do not have this\ntable, you should run\nthe mysql_upgrade command to create it.\n \nUDFs need to be written in C, C++ or another language that\nuses C calling\nconventions, MariaDB needs to have been dynamically\ncompiled, and your\noperating system must support dynamic loading.\n \nFor an example, see sql/udf_example.cc in the source tree.\nFor a collection of existing UDFs see\nhttp://www.mysqludf.org/.\n \nStatements making use of user-defined functions are not\nsafe for replication.\n \nFor creating a stored function as opposed to a user-defined\nfunction, see\nCREATE FUNCTION.\n \nFor valid identifiers to use as function names, see\nIdentifier Names.\n \nRETURNS\n \nThe RETURNS clause indicates the type of the function\'s\nreturn value, and can be one of STRING, INTEGER, REAL or\nDECIMAL. DECIMAL functions currently return string values\nand should be written like STRING functions.\n \nshared_library_name\n \nshared_library_name is the basename of the shared object\nfile that contains\nthe code that implements the function. The file must be\nlocated in the plugin\ndirectory. This directory is given by the value of the\nplugin_dir system variable. Note that\nbefore MariaDB/MySQL 5.1, the shared object could be located\nin any directory\nthat was searched by your system\'s dynamic linker.\n \nAGGREGATE\n \nAggregate functions are summary functions such as SUM() and\nAVG().\n \nAggregate UDF functions can be used as window functions.\n \nOR REPLACE\n \nThe OR REPLACE clause was added in MariaDB 10.1.3\n \nIf the optional OR REPLACE clause is used, it acts as a\nshortcut for:\n \nDROP FUNCTION IF EXISTS function_name;\n \nCREATE FUNCTION name ...;\n \nIF NOT EXISTS\n \nThe IF NOT EXISTS clause was added in MariaDB 10.1.3\n \nWhen the IF NOT EXISTS clause is used, MariaDB will return a\nwarning instead of an error if the specified function\nalready exists. Cannot be used together with OR REPLACE.\n \nUpgrading a UDF\n \nTo upgrade the UDF\'s shared library, first run a\nDROP FUNCTION statement, then upgrade the shared library and\nfinally run the CREATE FUNCTION statement. If you upgrade\nwithout following\nthis process, you may crash the server.\n \nExamples\n-------- \nCREATE FUNCTION jsoncontains_path RETURNS integer SONAME\n\'ha_connect.so\';\n \nQuery OK, 0 rows affected (0.00 sec)\n \nOR REPLACE and IF NOT EXISTS:\n \nCREATE FUNCTION jsoncontains_path RETURNS integer SONAME\n\'ha_connect.so\';\n \nERROR 1125 (HY000): Function \'jsoncontains_path\' already\nexists\n \nCREATE OR REPLACE FUNCTION jsoncontains_path RETURNS integer\nSONAME \'ha_connect.so\';\n \nQuery OK, 0 rows affected (0.00 sec)\n \nCREATE FUNCTION IF NOT EXISTS jsoncontains_path RETURNS\ninteger SONAME \'ha_connect.so\';\n \nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n \nSHOW WARNINGS;\n \n+-------+------+---------------------------------------------+\n| Level | Code | Message |\n+-------+------+---------------------------------------------+\n| Note | 1125 | Function \'jsoncontains_path\' already\nexists |\n+-------+------+---------------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/create-function-udf/', '', 'https://mariadb.com/kb/en/create-function-udf/'),
(477, 'DATE FUNCTION', 31, 'Syntax\n------ \nDATE(expr)\n \nDescription\n----------- \nExtracts the date part of the date or datetime expression\nexpr.\n \nExamples\n-------- \nSELECT DATE(\'2013-07-18 12:21:32\');\n+-----------------------------+\n| DATE(\'2013-07-18 12:21:32\') |\n+-----------------------------+\n| 2013-07-18 |\n+-----------------------------+\n \nError Handling\n \nUntil MariaDB 5.5.32, some versions of MariaDB returned\n0000-00-00 when passed an invalid date. From 5.5.32, NULL is\nreturned.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/date-function/', '', 'https://mariadb.com/kb/en/date-function/'),
(482, 'DAY', 31, 'Syntax\n------ \nDAY(date)\n \nDescription\n----------- \nDAY() is a synonym for DAYOFMONTH().\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/day/', '', 'https://mariadb.com/kb/en/day/'),
(486, 'DAYOFYEAR', 31, 'Syntax\n------ \nDAYOFYEAR(date)\n \nDescription\n----------- \nReturns the day of the year for date, in the range 1 to 366.\n \nExamples\n-------- \nSELECT DAYOFYEAR(\'2018-02-16\');\n+-------------------------+\n| DAYOFYEAR(\'2018-02-16\') |\n+-------------------------+\n| 47 |\n+-------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/dayofyear/', '', 'https://mariadb.com/kb/en/dayofyear/'),
(488, 'FROM_DAYS', 31, 'Syntax\n------ \nFROM_DAYS(N)\n \nDescription\n----------- \nGiven a day number N, returns a DATE value. The day count is\nbased on the number of days from the start of the standard\ncalendar (0000-00-00). \n \nThe function is not designed for use with dates before the\nadvent of the Gregorian calendar in October 1582. Results\nwill not be reliable since it doesn\'t account for the lost\ndays when the calendar changed from the Julian calendar.\n \nThis is the converse of the TO_DAYS() function.\n \nExamples\n-------- \nSELECT FROM_DAYS(730669);\n+-------------------+\n| FROM_DAYS(730669) |\n+-------------------+\n| 2000-07-03 |\n+-------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/from_days/', '', 'https://mariadb.com/kb/en/from_days/'),
(493, 'LOCALTIME', 31, 'Syntax\n------ \nLOCALTIME\nLOCALTIME([precision])\n \nDescription\n----------- \nLOCALTIME and LOCALTIME() are synonyms for NOW().\n \n\n\nURL: https://mariadb.com/kb/en/localtime/', '', 'https://mariadb.com/kb/en/localtime/'),
(494, 'LOCALTIMESTAMP', 31, 'Syntax\n------ \nLOCALTIMESTAMP\nLOCALTIMESTAMP([precision])\n \nDescription\n----------- \nLOCALTIMESTAMP and LOCALTIMESTAMP() are synonyms for NOW().\n \n\n\nURL: https://mariadb.com/kb/en/localtimestamp/', '', 'https://mariadb.com/kb/en/localtimestamp/'),
(259, 'DROP FUNCTION UDF', 21, 'Syntax\n------ \nDROP FUNCTION [IF EXISTS] function_name\n \nDescription\n----------- \nThis statement drops the user-defined function (UDF) named\nfunction_name.\n \nTo drop a function, you must have the DELETE privilege for\nthe mysql database. This is because DROP FUNCTION removes\nthe row from the mysql.func system table that records the\nfunction\'s name, type and shared library name.\n \nFor dropping a stored function, see DROP FUNCTION.\n \nUpgrading a UDF\n \nTo upgrade the UDF\'s shared library, first run a DROP\nFUNCTION statement, then upgrade the shared library and\nfinally run the CREATE FUNCTION statement. If you upgrade\nwithout following this process, you may crash the server.\n \nExamples\n-------- \nDROP FUNCTION jsoncontains_path;\n \nIF EXISTS:\n \nDROP FUNCTION jsoncontains_path;\n \nERROR 1305 (42000): FUNCTION test.jsoncontains_path does not\nexist\n \nDROP FUNCTION IF EXISTS jsoncontains_path;\n \nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n \nSHOW WARNINGS;\n \n+-------+------+------------------------------------------------+\n| Level | Code | Message |\n+-------+------+------------------------------------------------+\n| Note | 1305 | FUNCTION test.jsoncontains_path does not\nexist |\n+-------+------+------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/drop-function-udf/', '', 'https://mariadb.com/kb/en/drop-function-udf/'),
(260, 'Creating User-Defined Functions', 21, 'User-defined functions allow MariaDB to be extended with a\nnew function that works like a native (built-in) MariaDB\nfunction such as ABS() or CONCAT(). There are alternative\nways to add a new function: writing a native function (which\nrequires modifying and compiling the server source code), or\nwriting a stored function.\n \nStatements making use of user-defined functions are not safe\nfor replication.\n \nFunctions are written in C or C++, and to make use of them,\nthe operating system must support dynamic loading. \n \nEach new SQL function requires corresponding functions\nwritten in C/C++. In the list below, at least the main\nfunction - x() - and one other, are required. x should be\nreplaced by the name of the function you are creating.\n \nAll functions need to be thread-safe, so not global or\nstatic variables that change can be allocated. Memory is\nallocated in x_init()/ and freed in x_deinit(). \n \nSimple Functions\n \nx()\n \nRequired for all UDF\'s, this is where the results are\ncalculated.\n \nC/C++ type | SQL type | \n \nchar * | STRING | \n \nlong long | INTEGER | \n \ndouble | REAL | \n \nDECIMAL functions return string values, and so should be\nwritten accordingly. It is not possible to create ROW\nfunctions.\n \nx_init()\n \nInitialization function for x(). Can be used for the\nfollowing:\nCheck the number of arguments to X() (the SQL equivalent).\nVerify the argument types, or to force arguments to be of a\nparticular type after the function is called.\nSpecify whether the result can be NULL.\nSpecify the maximum result length.\nFor REAL functions, specify the maximum number of decimals\nfor the result.\nAllocate any required memory.\n To verify that the arguments are of a required type or,\nalternatively, to tell MySQL to coerce arguments to the\nrequired types when the main function is called.\n \nx_deinit()\n \nDe-initialization function for x(). Used to de-allocate\nmemory that was allocated in x_init().\n \nDescription\n----------- \nEach time the SQL function X() is called:\nMariaDB will first call the C/C++ initialization function,\nx_init(), assuming it exists. All setup will be performed,\nand if it returns an error, the SQL statement is aborted and\nno further functions are called.\nIf there is no x_init() function, or it has been called and\ndid not return an error, x() is then called once per row.\nAfter all rows have finished processing, x_deinit() is\ncalled, if present, to clean up by de-allocating any memory\nthat was allocated in x_init().\nSee User-defined Functions Calling Sequences for more\ndetails on the functions.\n \nAggregate Functions\n \nThe following functions are required for aggregate\nfunctions, such as AVG() and SUM(). \n \nx_clear()\n \nUsed to reset the current aggregate, but without inserting\nthe argument as the initial aggregate value for the new\ngroup.\n \nx_add()\n \nUsed to add the argument to the current aggregate. \n \nx_remove()\n \nStaring from MariaDB 10.4 it improves the support of window\nfunctions (so it is not obligatory to add it) and should\nremove the argument from the current aggregate.\n \nDescription\n----------- \nEach time the aggregate SQL function X() is called:\nMariaDB will first call the C/C++ initialization function,\nx_init(), assuming it exists. All setup will be performed,\nand if it returns an error, the SQL statement is aborted and\nno further functions are called.\nIf there is no x_init() function, or it has been called and\ndid not return an error, x() is then called once per row.\nAfter all rows have finished processing, x_deinit() is\ncalled, if present, to clean up by de-allocating any memory\nthat was allocated in x_init().\n \nMariaDB will first call the C/C++ initialization function,\nx_init(), assuming it exists. All setup will be performed,\nand if it returns an error, the SQL statement is aborted and\nno further functions are called.\nThe table is sorted according to the GROUP BY expression.\nx_clear() is called for the first row of each new group.\nx_add() is called once per row for each row in the same\ngroup.\nx() is called when the group changes, or after the last row,\nto get the aggregate result. \nThe latter three steps are repeated until all rows have been\nprocessed.\nAfter all rows have finished processing, x_deinit() is\ncalled, if present, to clean up by de-allocating any memory\nthat was allocated in x_init().\n \nExamples\n-------- \nFor an example, see sql/udf_example.cc in the source tree.\nFor a collection of existing UDFs see\nhttps://github.com/mysqludf.\n \n\n\nURL:\nhttps://mariadb.com/kb/en/creating-user-defined-functions/', '', 'https://mariadb.com/kb/en/creating-user-defined-functions/'),
(498, 'MINUTE', 31, 'Syntax\n------ \nMINUTE(time)\n \nDescription\n----------- \nReturns the minute for time, in the range 0 to 59. \n \nExamples\n-------- \nSELECT MINUTE(\'2013-08-03 11:04:03\');\n+-------------------------------+\n| MINUTE(\'2013-08-03 11:04:03\') |\n+-------------------------------+\n| 4 |\n+-------------------------------+\n \n SELECT MINUTE (\'23:12:50\');\n+---------------------+\n| MINUTE (\'23:12:50\') |\n+---------------------+\n| 12 |\n+---------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/minute/', '', 'https://mariadb.com/kb/en/minute/'),
(499, 'MONTH', 31, 'Syntax\n------ \nMONTH(date)\n \nDescription\n----------- \nReturns the month for date in the range 1 to 12 for January\nto\nDecember, or 0 for dates such as \'0000-00-00\' or\n\'2008-00-00\' that\nhave a zero month part.\n \nExamples\n-------- \nSELECT MONTH(\'2019-01-03\');\n+---------------------+\n| MONTH(\'2019-01-03\') |\n+---------------------+\n| 1 |\n+---------------------+\n \nSELECT MONTH(\'2019-00-03\');\n+---------------------+\n| MONTH(\'2019-00-03\') |\n+---------------------+\n| 0 |\n+---------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/month/', '', 'https://mariadb.com/kb/en/month/'),
(500, 'MONTHNAME', 31, 'Syntax\n------ \nMONTHNAME(date)\n \nDescription\n----------- \nReturns the full name of the month for date. The language\nused for the name is controlled by the value of the\nlc_time_names system variable. See server locale for more on\nthe supported locales.\n \nExamples\n-------- \nSELECT MONTHNAME(\'2019-02-03\');\n+-------------------------+\n| MONTHNAME(\'2019-02-03\') |\n+-------------------------+\n| February |\n+-------------------------+\n \nChanging the locale:\n \nSET lc_time_names = \'fr_CA\';\n \nSELECT MONTHNAME(\'2019-05-21\');\n+-------------------------+\n| MONTHNAME(\'2019-05-21\') |\n+-------------------------+\n| mai |\n+-------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/monthname/', '', 'https://mariadb.com/kb/en/monthname/'),
(261, 'User-Defined Functions Calling Sequences', 21, 'The functions described in Creating User-defined Functions\nare expanded on this page. They are declared as follows:\n \nSimple Functions\n \nx()\n \nIf x() returns an integer, it is declared as follows:\n \nlong long x(UDF_INIT *initid, UDF_ARGS *args,\n char *is_null, char *error);\n \nIf x() returns a string (DECIMAL functions also return\nstring values), it is declared as follows:\n \nchar *x(UDF_INIT *initid, UDF_ARGS *args,\n char *result, unsigned long *length,\n char *is_null, char *error);\n \nIf x() returns a real, it is declared as follows:\n \ndouble x(UDF_INIT *initid, UDF_ARGS *args,\n char *is_null, char *error);\n \nx_init()\n \nmy_bool x_init(UDF_INIT *initid, UDF_ARGS *args, char\n*message);\n \nx_deinit()\n \nvoid x_deinit(UDF_INIT *initid);\n \nDescription\n----------- \ninitid is a parameter passed to all three functions that\npoints to a UDF_INIT structure, used for communicating\ninformation between the functions. Its structure members\nare:\nmy_bool maybe_null\nmaybe_null should be set to 1 if x_init can return a NULL\nvalue, Defaults to 1 if any arguments are declared\nmaybe_null.\n \nunsigned int decimals\nNumber of decimals after the decimal point. The default, if\nan explicit number of decimals is passed in the arguments to\nthe main function, is the maximum number of decimals, so if\n9.5, 9.55 and 9.555 are passed to the function, the default\nwould be three (based on 9.555, the maximum). If there are\nno explicit number of decimals, the default is set to 31, or\none more than the maximum for the DOUBLE, FLOAT and DECIMAL\ntypes. This default can be changed in the function to suit\nthe actual calculation.\n \nunsigned int max_length\nMaximum length of the result. For integers, the default is\n21. For strings, the length of the longest argument. For\nreals, the default is 13 plus the number of decimals\nindicated by initid->decimals. The length includes any signs\nor decimal points. Can also be set to 65KB or 16MB in order\nto return a BLOB. The memory remains unallocated, but this\nis used to decide on the data type to use if the data needs\nto be temporarily stored.\n \nchar *ptr\nA pointer for use as required by the function. Commonly,\ninitid->ptr is used to communicate allocated memory, with\nx_init() allocating the memory and assigning it to this\npointer, x() using it, and x_deinit() de-allocating it.\n \nmy_bool const_item\nShould be set to 1 in x_init() if x() always returns the\nsame value, otherwise 0.\n \n\nAggregate Functions\n \nx_clear()\n \nx_clear() is a required function for aggregate functions,\nand is declared as follows:\n \nvoid x_clear(UDF_INIT *initid, char *is_null, char *error);\n \nIt is called when the summary results need to be reset, that\nis at the beginning of each new group. but also to reset the\nvalues when there were no matching rows.\n \nis_null is set to point to CHAR(0) before calling x_clear().\n \nIn the case of an error, you can store the value to which\nthe error argument points (a single-byte variable, not a\nstring string buffer) in the variable.\n \nx_reset()\n \nx_reset() is declared as follows:\n \nvoid x_reset(UDF_INIT *initid, UDF_ARGS *args,\n char *is_null, char *error);\n \nIt is called on finding the first row in a new group. Should\nreset the summary variables, and then use UDF_ARGS as the\nfirst value in the group\'s internal summary value. The\nfunction is not required if the UDF interface uses\nx_clear().\n \nx_add()\n \nx_add() is declared as follows:\n \nvoid x_add(UDF_INIT *initid, UDF_ARGS *args,\n char *is_null, char *error);\n \nIt is called for all rows belonging to the same group, and\nshould be used to add the value in UDF_ARGS to the internal\nsummary variable.\n \nx_remove()\n \nx_remove() was added in MariaDB 10.4 and is declared as\nfollows (same as x_add()):\n \nvoid x_remove(UDF_INIT* initid, UDF_ARGS* args,\n char* is_null, char *error );\n \nIt adds more efficient support of aggregate UDFs as window\nfunctions. x_remove() should \"subtract\" the row (reverse\nx_add()). In MariaDB 10.4 aggregate UDFs will work as WINDOW\nfunctions without x_remove() but it will not be so\nefficient.\n \nIf x_remove() supported (defined) detected automatically.\n \n\n \n \n \n \n \n \n \n\nURL:\nhttps://mariadb.com/kb/en/user-defined-functions-calling-sequences/', '', 'https://mariadb.com/kb/en/user-defined-functions-calling-sequences/'),
(262, 'User-Defined Functions Security', 21, 'The MariaDB server imposes a number of limitations on\nuser-defined functions for security purposes.\nThe INSERT privilege for the mysql database is required to\nrun CREATE FUNCTION, as a record will be added to the\nmysql.func-table.\nThe DELETE privilege for the mysql database is required to\nrun DROP FUNCTION as the corresponding record will be\nremoved from the mysql.func-table.\nUDF object files can only be placed in the plugin directory,\nas specified by the value of the plugin_dir system variable.\nAt least one symbol, beyond the required x() - corresponding\nto an SQL function X()) - is required. These can be\nx_init(), x_deinit(), xxx_reset(), x_clear() and x_add()\nfunctions (see Creating User-defined Functions). The\nallow-suspicious-udfs mysqld option (by default unset)\nprovides a workaround, permitting only one symbol to be\nused. This is not recommended, as it opens the possibility\nof loading shared objects that are not legitimate\nuser-defined functions.\n \n\n \n \n \n \n \n \n \n\nURL:\nhttps://mariadb.com/kb/en/user-defined-functions-security/', '', 'https://mariadb.com/kb/en/user-defined-functions-security/'),
(504, 'QUARTER', 31, 'Syntax\n------ \nQUARTER(date)\n \nDescription\n----------- \nReturns the quarter of the year for date, in the range 1 to\n4. Returns 0 if month contains a zero value, or NULL if the\ngiven value is not otherwise a valid date (zero values are\naccepted).\n \nExamples\n-------- \nSELECT QUARTER(\'2008-04-01\');\n+-----------------------+\n| QUARTER(\'2008-04-01\') |\n+-----------------------+\n| 2 |\n+-----------------------+\n \nSELECT QUARTER(\'2019-00-01\');\n+-----------------------+\n| QUARTER(\'2019-00-01\') |\n+-----------------------+\n| 0 |\n+-----------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/quarter/', '', 'https://mariadb.com/kb/en/quarter/'),
(505, 'SECOND', 31, 'Syntax\n------ \nSECOND(time)\n \nDescription\n----------- \nReturns the second for a given time (which can include\nmicroseconds), in the range 0 to 59, or NULL if not given a\nvalid time value.\n \nExamples\n-------- \nSELECT SECOND(\'10:05:03\');\n+--------------------+\n| SECOND(\'10:05:03\') |\n+--------------------+\n| 3 |\n+--------------------+\n \nSELECT SECOND(\'10:05:01.999999\');\n+---------------------------+\n| SECOND(\'10:05:01.999999\') |\n+---------------------------+\n| 1 |\n+---------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/second/', '', 'https://mariadb.com/kb/en/second/'),
(511, 'TIME Function', 31, 'Syntax\n------ \nTIME(expr)\n \nDescription\n----------- \nExtracts the time part of the time or datetime expression\nexpr and\nreturns it as a string.\n \nExamples\n-------- \nSELECT TIME(\'2003-12-31 01:02:03\');\n+-----------------------------+\n| TIME(\'2003-12-31 01:02:03\') |\n+-----------------------------+\n| 01:02:03 |\n+-----------------------------+\n \nSELECT TIME(\'2003-12-31 01:02:03.000123\');\n+------------------------------------+\n| TIME(\'2003-12-31 01:02:03.000123\') |\n+------------------------------------+\n| 01:02:03.000123 |\n+------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/time-function/', '', 'https://mariadb.com/kb/en/time-function/'),
(263, 'mysql.func Table', 21, 'The mysql.func table stores information about user-defined\nfunctions (UDFs) created with the CREATE FUNCTION UDF\nstatement.\n \nIn MariaDB 10.4 and later, this table uses the Aria storage\nengine.\n \nMariaDB until 10.3\n \nIn MariaDB 10.3 and before, this table uses the MyISAM\nstorage engine.\n \nThe mysql.func table contains the following fields:\n \nField | Type | Null | Key | Default | Description | \n \nname | char(64) | NO | PRI |  | UDF name | \n \nret | tinyint(1) | NO |  | 0 |  | \n \ndl | char(128) | NO |  |  | Shared library name | \n \ntype | enum(\'function\',\'aggregate\') | NO |  | NULL |\nType, either function or aggregate. Aggregate functions are\nsummary functions such as SUM() and AVG(). | \n \nExample\n \nSELECT * FROM mysql.func;\n+------------------------------+-----+--------------+-----------+\n| name | ret | dl | type |\n+------------------------------+-----+--------------+-----------+\n| spider_direct_sql | 2 | ha_spider.so | function |\n| spider_bg_direct_sql | 2 | ha_spider.so | aggregate |\n| spider_ping_table | 2 | ha_spider.so | function |\n| spider_copy_tables | 2 | ha_spider.so | function |\n| spider_flush_table_mon_cache | 2 | ha_spider.so | function\n|\n+------------------------------+-----+--------------+-----------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/mysqlfunc-table/', '', 'https://mariadb.com/kb/en/mysqlfunc-table/'),
(264, 'AUTO_INCREMENT', 22, 'Description\n----------- \nThe AUTO_INCREMENT attribute can be used to generate a\nunique identity for new rows. When you insert a new record\nto the table, and the auto_increment field is NULL or\nDEFAULT, the value will automatically be incremented. This\nalso applies to 0, unless the NO_AUTO_VALUE_ON_ZERO SQL_MODE\nis enabled.\n \nAUTO_INCREMENT columns start from 1 by default. The\nautomatically generated value can never be lower than 0.\n \nEach table can have only one AUTO_INCREMENT column. It must\ndefined as a key (not necessarily the PRIMARY KEY or UNIQUE\nkey). In some storage engines (including the default\nInnoDB), if the key consists of multiple columns, the\nAUTO_INCREMENT column must be the first column. Storage\nengines that permit the column to be placed elsewhere are\nAria, MyISAM, MERGE, Spider, TokuDB, BLACKHOLE, FederatedX\nand Federated.\n \nCREATE TABLE animals (\n id MEDIUMINT NOT NULL AUTO_INCREMENT,\n name CHAR(30) NOT NULL,\n PRIMARY KEY (id)\n );\n \nINSERT INTO animals (name) VALUES\n (\'dog\'),(\'cat\'),(\'penguin\'),\n (\'fox\'),(\'whale\'),(\'ostrich\');\n \nSELECT * FROM animals;\n \n+----+---------+\n| id | name |\n+----+---------+\n| 1 | dog |\n| 2 | cat |\n| 3 | penguin |\n| 4 | fox |\n| 5 | whale |\n| 6 | ostrich |\n+----+---------+\n \nSERIAL is an alias for BIGINT UNSIGNED NOT NULL\nAUTO_INCREMENT UNIQUE.\n \nCREATE TABLE t (id SERIAL, c CHAR(1)) ENGINE=InnoDB;\n \nSHOW CREATE TABLE t \\G\n*************************** 1. row\n***************************\n Table: t\nCreate Table: CREATE TABLE `t` (\n `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,\n `c` char(1) DEFAULT NULL,\n UNIQUE KEY `id` (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n \nSetting or Changing the Auto_Increment Value\n \nYou can use an ALTER TABLE statement to assign a new value\nto the auto_increment table option, or set the insert_id\nserver system variable to change the next AUTO_INCREMENT\nvalue inserted by the current session.\n \nLAST_INSERT_ID() can be used to see the last AUTO_INCREMENT\nvalue inserted by the current session.\n \nALTER TABLE animals AUTO_INCREMENT=8;\n \nINSERT INTO animals (name) VALUES (\'aardvark\');\n \nSELECT * FROM animals;\n \n+----+-----------+\n| id | name |\n+----+-----------+\n| 1 | dog |\n| 2 | cat |\n| 3 | penguin |\n| 4 | fox |\n| 5 | whale |\n| 6 | ostrich |\n| 8 | aardvark |\n+----+-----------+\n \nSET insert_id=12;\n \nINSERT INTO animals (name) VALUES (\'gorilla\');\n \nSELECT * FROM animals;\n \n+----+-----------+\n| id | name |\n+----+-----------+\n| 1 | dog |\n| 2 | cat |\n| 3 | penguin |\n| 4 | fox |\n| 5 | whale |\n| 6 | ostrich |\n| 8 | aardvark |\n| 12 | gorilla |\n+----+-----------+\n \nInnoDB/XtraDB\n \nUntil MariaDB 10.2.3, InnoDB and XtraDB used an\nauto-increment counter that is stored in memory. When the\nserver restarts, the counter is re-initialized to the\nhighest value used in the table, which cancels the effects\nof any AUTO_INCREMENT = N option in the table statements.\n \nFrom MariaDB 10.2.4, this restriction has been lifted and\nAUTO_INCREMENT is persistent.\n \nSee also AUTO_INCREMENT Handling in XtraDB/InnoDB.\n \nSetting Explicit Values\n \nIt is possible to specify a value for an AUTO_INCREMENT\ncolumn. The value must not exist in the key.\n \nIf the new value is higher than the current maximum value,\nthe AUTO_INCREMENT value is updated, so the next value will\nbe higher. If the new value is lower than the current\nmaximum value, the AUTO_INCREMENT value remains unchanged.\n \nThe following example demonstrates these behaviours:\n \nCREATE TABLE t (id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY\nKEY) ENGINE = InnoDB;\n \nINSERT INTO t VALUES (NULL);\nSELECT id FROM t;\n \n+----+\n| id |\n+----+\n| 1 |\n+----+\n \nINSERT INTO t VALUES (10); -- higher value\nSELECT id FROM t;\n \n+----+\n| id |\n+----+\n| 1 |\n| 10 |\n+----+\n \nINSERT INTO t VALUES (2); -- lower value\nINSERT INTO t VALUES (NULL); -- auto value\nSELECT id FROM t;\n \n+----+\n| id |\n+----+\n| 1 |\n| 2 |\n| 10 |\n| 11 |\n+----+\n \nThe ARCHIVE storage engine does not allow to insert a value\nthat is lower than the current maximum.\n \nMissing Values\n \nAn AUTO_INCREMENT column normally has missing values. This\nhappens because if a row is deleted, or an AUTO_INCREMENT\nvalue is explicitly updated, old values are never re-used.\nThe REPLACE statement also deletes a row, and its value is\nwasted. With InnoDB, values can be reserved by a\ntransaction; but if the transaction fails (for example,\nbecause of a ROLLBACK) the reserved value will be lost.\n \nThus AUTO_INCREMENT values can be used to sort results in a\nchronological order, but not to create a numeric sequence.\n \nReplication\n \nTo make master-master or Galera safe to use AUTO_INCREMENT\none should use the system variables \n auto_increment_increment and auto_increment_offset to\ngenerate unique values for each server.\n \nCHECK Constraints, DEFAULT Values and Virtual Columns\n \nFrom MariaDB 10.2.6 auto_increment columns are no longer\npermitted in CHECK constraints, DEFAULT value expressions\nand virtual columns. They were permitted in earlier\nversions, but did not work correctly. See MDEV-11117.\n \n\n\nURL: https://mariadb.com/kb/en/auto_increment/', '', 'https://mariadb.com/kb/en/auto_increment/'),
(516, 'TIME_FORMAT', 31, 'Syntax\n------ \nTIME_FORMAT(time,format)\n \nDescription\n----------- \nThis is used like the DATE_FORMAT() function, but the format\nstring\nmay contain format specifiers only for hours, minutes, and\nseconds.\nOther specifiers produce a NULL value or 0.\n \nExamples\n-------- \nSELECT TIME_FORMAT(\'100:00:00\', \'%H %k %h %I %l\');\n+--------------------------------------------+\n| TIME_FORMAT(\'100:00:00\', \'%H %k %h %I %l\') |\n+--------------------------------------------+\n| 100 100 04 04 4 |\n+--------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/time_format/', '', 'https://mariadb.com/kb/en/time_format/'),
(517, 'TIME_TO_SEC', 31, 'Syntax\n------ \nTIME_TO_SEC(time)\n \nDescription\n----------- \nReturns the time argument, converted to seconds.\n \nThe value returned by TIME_TO_SEC is of type DOUBLE. Before\nMariaDB 5.3 (and MySQL 5.6), the type was INT. See\nMicroseconds in MariaDB.\n \nExamples\n-------- \nSELECT TIME_TO_SEC(\'22:23:00\');\n+-------------------------+\n| TIME_TO_SEC(\'22:23:00\') |\n+-------------------------+\n| 80580 |\n+-------------------------+\n \nSELECT TIME_TO_SEC(\'00:39:38\');\n+-------------------------+\n| TIME_TO_SEC(\'00:39:38\') |\n+-------------------------+\n| 2378 |\n+-------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/time_to_sec/', '', 'https://mariadb.com/kb/en/time_to_sec/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(265, 'BIGINT', 22, 'Syntax\n------ \nBIGINT[(M)] [SIGNED | UNSIGNED | ZEROFILL]\n \nDescription\n----------- \nA large integer. The signed range is -9223372036854775808 to\n9223372036854775807. The unsigned range is 0 to\n18446744073709551615.\n \nIf a column has been set to ZEROFILL, all values will be\nprepended by zeros so that the BIGINT value contains a\nnumber of M digits.\n \nNote: If the ZEROFILL attribute has been specified, the\ncolumn will automatically become UNSIGNED.\n \nFor more details on the attributes, see Numeric Data Type\nOverview.\n \nSERIAL is an alias for:\n \nBIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE\n \nExamples\n-------- \nCREATE TABLE bigints (a BIGINT,b BIGINT UNSIGNED,c BIGINT\nZEROFILL);\n \nINSERT INTO bigints VALUES (-10,-10,-10);\nQuery OK, 1 row affected, 2 warnings (0.08 sec)\nWarning (Code 1264): Out of range value for column \'b\' at\nrow 1\nWarning (Code 1264): Out of range value for column \'c\' at\nrow 1\n \nINSERT INTO bigints VALUES (-10,10,-10);Query OK, 1 row\naffected, 1 warning (0.08 sec)\nWarning (Code 1264): Out of range value for column \'c\' at\nrow 1\n \nINSERT INTO bigints VALUES (-10,10,10);\n \nINSERT INTO bigints VALUES\n(9223372036854775808,9223372036854775808,9223372036854775808);\nQuery OK, 1 row affected, 1 warning (0.07 sec)\nWarning (Code 1264): Out of range value for column \'a\' at\nrow 1\n \nINSERT INTO bigints VALUES\n(9223372036854775807,9223372036854775808,9223372036854775808);\n \nSELECT * FROM bigints;\n+---------------------+---------------------+----------------------+\n| a | b | c |\n+---------------------+---------------------+----------------------+\n| -10 | 0 | 00000000000000000000 |\n| -10 | 10 | 00000000000000000000 |\n| -10 | 10 | 00000000000000000010 |\n| 9223372036854775807 | 9223372036854775808 |\n09223372036854775808 |\n| 9223372036854775807 | 9223372036854775808 |\n09223372036854775808 |\n+---------------------+---------------------+----------------------+\n \n\n\nURL: https://mariadb.com/kb/en/bigint/', '', 'https://mariadb.com/kb/en/bigint/'),
(266, 'BINARY', 22, 'Syntax\n------ \nBINARY(M)\n \nDescription\n----------- \nThe BINARY type is similar to the CHAR type, but stores\nbinary\nbyte strings rather than non-binary character strings. M\nrepresents the\ncolumn length in bytes.\n \nIt contains no character set, and comparison and sorting are\nbased on the numeric value of the bytes.\n \nIf the maximum length is exceeded, and SQL strict mode is\nnot enabled , the extra characters will be dropped with a\nwarning. If strict mode is enabled, an error will occur.\n \nBINARY values are right-padded with 0x00 (the zero byte) to\nthe specified length when inserted. The padding is not\nremoved on select, so this needs to be taken into account\nwhen sorting and comparing, where all bytes are significant.\nThe zero byte, 0x00 is less than a space for comparison\npurposes.\n \nExamples\n-------- \nInserting too many characters, first with strict mode off,\nthen with it on:\n \nCREATE TABLE bins (a BINARY(10));\n \nINSERT INTO bins VALUES(\'12345678901\');\nQuery OK, 1 row affected, 1 warning (0.04 sec)\n \nSELECT * FROM bins;\n \n+------------+\n| a |\n+------------+\n| 1234567890 |\n+------------+\n \nSET sql_mode=\'STRICT_ALL_TABLES\';\n \nINSERT INTO bins VALUES(\'12345678901\');\nERROR 1406 (22001): Data too long for column \'a\' at row 1\n \nSorting is performed with the byte value:\n \nTRUNCATE bins;\n \nINSERT INTO bins VALUES(\'A\'),(\'B\'),(\'a\'),(\'b\');\n \nSELECT * FROM bins ORDER BY a;\n \n+------+\n| a |\n+------+\n| A |\n| B |\n| a |\n| b |\n+------+\n \nUsing CAST to sort as a CHAR instead:\n \nSELECT * FROM bins ORDER BY CAST(a AS CHAR);\n+------+\n| a |\n+------+\n| a |\n| A |\n| b |\n| B |\n+------+\n \nThe field is a BINARY(10), so padding of two \'\\0\'s are\ninserted, causing comparisons that don\'t take this into\naccount to fail:\n \nTRUNCATE bins;\n \nINSERT INTO bins VALUES(\'12345678\');\n \nSELECT a = \'12345678\', a = \'12345678\\0\\0\' from bins;\n \n+----------------+--------------------+\n| a = \'12345678\' | a = \'12345678\\0\\0\' |\n+----------------+--------------------+\n| 0 | 1 |\n+----------------+--------------------+\n \n\n\nURL: https://mariadb.com/kb/en/binary/', '', 'https://mariadb.com/kb/en/binary/'),
(267, 'BIT', 22, 'Syntax\n------ \nBIT[(M)]\n \nDescription\n----------- \nA bit-field type. M indicates the number of bits per value,\nfrom 1 to\n64. The default is 1 if M is omitted.\n \nBit values can be inserted with b\'value\' notation, where\nvalue is the bit value in 0\'s and 1\'s.\n \nBit fields are automatically zero-padded from the left to\nthe full length of the bit, so for example in a BIT(4)\nfield, \'10\' is equivalent to \'0010\'.\n \nBits are returned as binary, so to display them, either add\n0, or use a function such as HEX, OCT or BIN to convert\nthem.\n \nExamples\n-------- \nCREATE TEMPORARY TABLE b ( b1 BIT(8) );\nINSERT INTO b VALUES\n(b\'11111111\'),(b\'01010101\'),(b\'1111111111111\');\nQuery OK, 3 rows affected, 1 warning (0.10 sec)\nRecords: 3 Duplicates: 0 Warnings: 1\n \nSHOW WARNINGS;\n+---------+------+---------------------------------------------+\n| Level | Code | Message |\n+---------+------+---------------------------------------------+\n| Warning | 1264 | Out of range value for column \'b1\' at\nrow 3 |\n+---------+------+---------------------------------------------+\n \nSELECT b1+0, HEX(b1), OCT(b1), BIN(b1) FROM b;\n+------+---------+---------+----------+\n| b1+0 | HEX(b1) | OCT(b1) | BIN(b1) |\n+------+---------+---------+----------+\n| 255 | FF | 377 | 11111111 |\n| 85 | 55 | 125 | 1010101 |\n| 255 | FF | 377 | 11111111 |\n+------+---------+---------+----------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/bit/', '', 'https://mariadb.com/kb/en/bit/'),
(521, 'UTC_DATE', 31, 'Syntax\n------ \nUTC_DATE, UTC_DATE()\n \nDescription\n----------- \nReturns the current UTC date as a value in \'YYYY-MM-DD\' or\nYYYYMMDD\nformat, depending on whether the function is used in a\nstring or numeric context. \n \nExamples\n-------- \nSELECT UTC_DATE(), UTC_DATE() + 0;\n \n+------------+----------------+\n| UTC_DATE() | UTC_DATE() + 0 |\n+------------+----------------+\n| 2010-03-27 | 20100327 |\n+------------+----------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/utc_date/', '', 'https://mariadb.com/kb/en/utc_date/'),
(522, 'UTC_TIME', 31, 'Syntax\n------ \nUTC_TIME\nUTC_TIME([precision])\n \nDescription\n----------- \nReturns the current UTC time as a value in \'HH:MM:SS\' or\nHHMMSS.uuuuuu format, depending on whether the function is\nused in a string or numeric context. \n \nThe optional precision determines the microsecond precision.\nSee Microseconds in MariaDB.\n \nExamples\n-------- \nSELECT UTC_TIME(), UTC_TIME() + 0;\n \n+------------+----------------+\n| UTC_TIME() | UTC_TIME() + 0 |\n+------------+----------------+\n| 17:32:34 | 173234.000000 |\n+------------+----------------+\n \nWith precision:\n \nSELECT UTC_TIME(5);\n+----------------+\n| UTC_TIME(5) |\n+----------------+\n| 07:52:50.78369 |\n+----------------+\n \n\n\nURL: https://mariadb.com/kb/en/utc_time/', '', 'https://mariadb.com/kb/en/utc_time/'),
(530, 'AsBinary', 32, 'A synonym for ST_AsBinary().\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/wkb-asbinary/', '', 'https://mariadb.com/kb/en/wkb-asbinary/'),
(531, 'AsWKB', 32, 'A synonym for ST_AsBinary().\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/aswkb/', '', 'https://mariadb.com/kb/en/aswkb/'),
(532, 'MLineFromWKB', 32, 'Syntax\n------ \nMLineFromWKB(wkb[,srid])\nMultiLineStringFromWKB(wkb[,srid])\n \nDescription\n----------- \nConstructs a MULTILINESTRING value using its WKB\nrepresentation and SRID.\n \nMLineFromWKB() and MultiLineStringFromWKB() are synonyms.\n \nExamples\n-------- \nSET @g = ST_AsBinary(MLineFromText(\'MULTILINESTRING((10\n48,10 21,10 0),(16 0,16 23,16 48))\'));\n \nSELECT ST_AsText(MLineFromWKB(@g));\n+--------------------------------------------------------+\n| ST_AsText(MLineFromWKB(@g)) |\n+--------------------------------------------------------+\n| MULTILINESTRING((10 48,10 21,10 0),(16 0,16 23,16 48)) |\n+--------------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/mlinefromwkb/', '', 'https://mariadb.com/kb/en/mlinefromwkb/'),
(268, 'BLOB', 22, 'Syntax\n------ \nBLOB[(M)]\n \nDescription\n----------- \nA BLOB column with a maximum length of 65,535 (216 - 1)\nbytes. Each\nBLOB value is stored using a two-byte length prefix that\nindicates the\nnumber of bytes in the value.\n \nAn optional length M can be given for this type. If this is\ndone,\nMariaDB creates the column as the smallest BLOB type large\nenough to\nhold values M bytes long.\n \nBLOBS can also be used to store dynamic columns.\n \nBefore MariaDB 10.2.1, BLOB and TEXT columns could not be\nassigned a DEFAULT value. This restriction was lifted in\nMariaDB 10.2.1.\n \nIndexing\n \nIn MariaDB 10.4, it is possible to set a Unique index on a\ncolumn that uses the BLOB data type. In previous releases\nthis was not possible, as the index would only guarantee the\nuniqueness of a fixed number of characters.\n \nOracle Mode\n \nIn Oracle mode from MariaDB 10.3, BLOB is a synonym for\nLONGBLOB.\n \n\n\nURL: https://mariadb.com/kb/en/blob/', '', 'https://mariadb.com/kb/en/blob/'),
(270, 'BOOLEAN', 22, 'Syntax\n------ \nBOOL, BOOLEAN\n \nDescription\n----------- \nThese types are synonyms for TINYINT(1). \nA value of zero is considered false. Non-zero values are\nconsidered true:\n \nmysql> SELECT IF(0, \'true\', \'false\');\n+------------------------+\n| IF(0, \'true\', \'false\') |\n+------------------------+\n| false |\n+------------------------+\n \nmysql> SELECT IF(1, \'true\', \'false\');\n+------------------------+\n| IF(1, \'true\', \'false\') |\n+------------------------+\n| true |\n+------------------------+\n \nmysql> SELECT IF(2, \'true\', \'false\');\n+------------------------+\n| IF(2, \'true\', \'false\') |\n+------------------------+\n| true |\n+------------------------+\n \nHowever, the values TRUE and FALSE are merely aliases for 1\nand 0,\nrespectively, as shown here:\n \nmysql> SELECT IF(0 = FALSE, \'true\', \'false\');\n \n+--------------------------------+\n| IF(0 = FALSE, \'true\', \'false\') |\n+--------------------------------+\n| true |\n+--------------------------------+\n \nmysql> SELECT IF(1 = TRUE, \'true\', \'false\');\n+-------------------------------+\n| IF(1 = TRUE, \'true\', \'false\') |\n+-------------------------------+\n| true |\n+-------------------------------+\n \nmysql> SELECT IF(2 = TRUE, \'true\', \'false\');\n+-------------------------------+\n| IF(2 = TRUE, \'true\', \'false\') |\n+-------------------------------+\n| false |\n+-------------------------------+\n \nmysql> SELECT IF(2 = FALSE, \'true\', \'false\');\n+--------------------------------+\n| IF(2 = FALSE, \'true\', \'false\') |\n+--------------------------------+\n| false |\n+--------------------------------+\n \nUNKNOWN is an alias for NULL.\n \nThe last two statements display the results shown because 2\nis equal\nto neither 1 nor 0.\n \n\n\nURL: https://mariadb.com/kb/en/boolean/', '', 'https://mariadb.com/kb/en/boolean/'),
(271, 'CHAR', 22, 'This article covers the CHAR data type. See CHAR Function\nfor the function.\n \nSyntax\n------ \n[NATIONAL] CHAR[(M)] [CHARACTER SET charset_name] [COLLATE\ncollation_name]\n \nDescription\n----------- \nA fixed-length string that is always right-padded with\nspaces to the specified\nlength when stored. M represents the column length in\ncharacters. The range\nof M is 0 to 255. If M is omitted, the length is 1.\n \nCHAR(0) columns can contain 2 values: an empty string or\nNULL. Such columns cannot be part of an index. The CONNECT\nstorage engine does not support CHAR(0).\n \nNote: Trailing spaces are removed when CHAR values are\nretrieved\nunless the PAD_CHAR_TO_FULL_LENGTH SQL mode is enabled.\n \nBefore MariaDB 10.2, all collations were of type PADSPACE,\nmeaning that CHAR (as well as VARCHAR and TEXT) values are\ncompared without regard for trailing spaces. This does not\napply to the LIKE pattern-matching operator, which takes\ninto account trailing spaces.\n \nIf a unique index consists of a column where trailing pad\ncharacters are stripped or ignored, inserts into that column\nwhere values differ only by the number of trailing pad\ncharacters will result in a duplicate-key error.\n \nExamples\n-------- \nTrailing spaces:\n \nCREATE TABLE strtest (c CHAR(10));\nINSERT INTO strtest VALUES(\'Maria \');\n \nSELECT c=\'Maria\',c=\'Maria \' FROM strtest;\n \n+-----------+--------------+\n| c=\'Maria\' | c=\'Maria \' |\n+-----------+--------------+\n| 1 | 1 |\n+-----------+--------------+\n \nSELECT c LIKE \'Maria\',c LIKE \'Maria \' FROM strtest;\n \n+----------------+-------------------+\n| c LIKE \'Maria\' | c LIKE \'Maria \' |\n+----------------+-------------------+\n| 1 | 0 |\n+----------------+-------------------+\n \nNO PAD Collations\n \nNO PAD collations regard trailing spaces as normal\ncharacters. You can get a list of all NO PAD collations by\nquerying the Information Schema Collations table, for\nexample:\n \nSELECT collation_name FROM information_schema.collations \n WHERE collation_name LIKE \"%nopad%\";\n \n+------------------------------+\n| collation_name |\n+------------------------------+\n| big5_chinese_nopad_ci |\n| big5_nopad_bin |\n...\n \n\n\nURL: https://mariadb.com/kb/en/char/', '', 'https://mariadb.com/kb/en/char/'),
(533, 'MPointFromWKB', 32, 'Syntax\n------ \nMPointFromWKB(wkb[,srid])\nMultiPointFromWKB(wkb[,srid])\n \nDescription\n----------- \nConstructs a MULTIPOINT value using its WKB representation\nand SRID.\n \nMPointFromWKB() and MultiPointFromWKB() are synonyms.\n \nExamples\n-------- \nSET @g = ST_AsBinary(MPointFromText(\'MultiPoint( 1 1, 2 2,\n5 3, 7 2, 9 3, 8 4, 6 6, 6 9, 4 9, 1 5 )\'));\n \nSELECT ST_AsText(MPointFromWKB(@g));\n+-----------------------------------------------------+\n| ST_AsText(MPointFromWKB(@g)) |\n+-----------------------------------------------------+\n| MULTIPOINT(1 1,2 2,5 3,7 2,9 3,8 4,6 6,6 9,4 9,1 5) |\n+-----------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/mpointfromwkb/', '', 'https://mariadb.com/kb/en/mpointfromwkb/'),
(535, 'GeomCollFromWKB', 32, 'A synonym for ST_GeomCollFromWKB.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/wkb-geomcollfromwkb/', '', 'https://mariadb.com/kb/en/wkb-geomcollfromwkb/'),
(536, 'GeometryCollectionFromWKB', 32, 'A synonym for ST_GeomCollFromWKB.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/geometrycollectionfromwkb/', '', 'https://mariadb.com/kb/en/geometrycollectionfromwkb/'),
(537, 'GeometryFromWKB', 32, 'A synonym for ST_GeomFromWKB.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/geometryfromwkb/', '', 'https://mariadb.com/kb/en/geometryfromwkb/'),
(538, 'GeomFromWKB', 32, 'A synonym for ST_GeomFromWKB.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/wkb-geomfromwkb/', '', 'https://mariadb.com/kb/en/wkb-geomfromwkb/'),
(539, 'LineFromWKB', 32, 'A synonym for ST_LineFromWKB.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/wkb-linefromwkb/', '', 'https://mariadb.com/kb/en/wkb-linefromwkb/'),
(540, 'LineStringFromWKB', 32, 'A synonym for ST_LineFromWKB.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/linestringfromwkb/', '', 'https://mariadb.com/kb/en/linestringfromwkb/'),
(541, 'MultiLineStringFromWKB', 32, 'A synonym for MLineFromWKB().\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/multilinestringfromwkb/', '', 'https://mariadb.com/kb/en/multilinestringfromwkb/'),
(542, 'MultiPointFromWKB', 32, 'A synonym for MPointFromWKB.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/multipointfromwkb/', '', 'https://mariadb.com/kb/en/multipointfromwkb/'),
(543, 'MultiPolygonFromWKB', 32, 'Synonym for MPolyFromWKB.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/multipolygonfromwkb/', '', 'https://mariadb.com/kb/en/multipolygonfromwkb/'),
(544, 'PointFromWKB', 32, 'A synonym for ST_PointFromWKB.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/wkb-pointfromwkb/', '', 'https://mariadb.com/kb/en/wkb-pointfromwkb/'),
(273, 'DATE', 22, 'Syntax\n------ \nDATE\n \nDescription\n----------- \nA date. The supported range is \'1000-01-01\' to\n\'9999-12-31\'. MariaDB\ndisplays DATE values in \'YYYY-MM-DD\' format, but can be\nassigned dates in looser formats, including strings or\nnumbers, as long as they make sense. These include a short\nyear, YY-MM-DD, no delimiters, YYMMDD, or any other\nacceptable delimiter, for example YYYY/MM/DD. For details,\nsee date and time literals.\n \n\'0000-00-00\' is a permitted special value (zero-date),\nunless the NO_ZERO_DATE SQL_MODE is used. Also, individual\ncomponents of a date can be set to 0 (for example:\n\'2015-00-12\'), unless the NO_ZERO_IN_DATE SQL_MODE is\nused. In many cases, the result of en expression involving a\nzero-date, or a date with zero-parts, is NULL. If the\nALLOW_INVALID_DATES SQL_MODE is enabled, if the day part is\nin the range between 1 and 31, the date does not produce any\nerror, even for months that have less than 31 days.\n \nExamples\n-------- \nCREATE TABLE t1 (d DATE);\n \nINSERT INTO t1 VALUES (\"2010-01-12\"), (\"2011-2-28\"),\n(\'120314\'),(\'13*04*21\');\n \nSELECT * FROM t1;\n \n+------------+\n| d |\n+------------+\n| 2010-01-12 |\n| 2011-02-28 |\n| 2012-03-14 |\n| 2013-04-21 |\n+------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/date/', '', 'https://mariadb.com/kb/en/date/'),
(274, 'DATETIME', 22, 'Syntax\n------ \nDATETIME [(microsecond precision)]\n \nDescription\n----------- \nA date and time combination. The supported range is\n\'1000-01-01 00:00:00.000000\' to \'9999-12-31\n23:59:59.999999\'.\nMariaDB displays DATETIME values in \'YYYY-MM-DD HH:MM:SS\'\nformat, but\nallows assignment of values to DATETIME columns using either\nstrings or\nnumbers. For details, see date and time literals.\n \nThe microsecond precision can be from 0-6. If not specified\n0 is used.\n \n\'0000-00-00\' is a permitted special value (zero-date),\nunless the NO_ZERO_DATE SQL_MODE is used. Also, individual\ncomponents of a date can be set to 0 (for example:\n\'2015-00-12\'), unless the NO_ZERO_IN_DATE SQL_MODE is\nused. In many cases, the result of en expression involving a\nzero-date, or a date with zero-parts, is NULL. If the\nALLOW_INVALID_DATES SQL_MODE is enabled, if the day part is\nin the range between 1 and 31, the date does not produce any\nerror, even for months that have less than 31 days.\n \nSince MariaDB 10.0.1, DATETIME columns also accept\nCURRENT_TIMESTAMP as the default value.\n \nMariaDB 10.1.2 introduced the --mysql56-temporal-format\noption, on by default, which allows MariaDB to store\nDATETMEs using the same low-level format MySQL 5.6 uses. For\nmore information, see Internal Format, below.\n \nFor storage requirements, see Data Type Storage\nRequirements.\n \nOracle Mode\n \nIn Oracle mode from MariaDB 10.3, DATE with a time portion\nis a synonym for DATETIME.\n \nInternal Format\n \nIn MariaDB 10.1.2 a new temporal format was introduced from\nMySQL 5.6 that alters how the TIME, DATETIME and TIMESTAMP\ncolumns operate at lower levels. These changes allow these\ntemporal data types to have fractional parts and negative\nvalues. You can disable this feature using the\nmysql56_temporal_format system variable.\n \nTables that include TIMESTAMP values that were created on an\nolder version of MariaDB or that were created while the\nmysql56_temporal_format system variable was disabled\ncontinue to store data using the older data type format.\n \nIn order to update table columns from the older format to\nthe newer format, execute an ALTER TABLE... MODIFY COLUMN\nstatement that changes the column to the *same* data type.\nThis change may be needed if you want to export the table\'s\ntablespace and import it onto a server that has\nmysql56_temporal_format=ON set (see MDEV-15225).\n \nFor instance, if you have a DATETIME column in your table: \n \nSHOW VARIABLES LIKE \'mysql56_temporal_format\';\n \n+-------------------------+-------+\n| Variable_name | Value |\n+-------------------------+-------+\n| mysql56_temporal_format | ON |\n+-------------------------+-------+\n \nALTER TABLE example_table MODIFY ts_col DATETIME;\n \nWhen MariaDB executes the ALTER TABLE statement, it converts\nthe data from the older temporal format to the newer one. \n \nIn the event that you have several tables and columns using\ntemporal data types that you want to switch over to the new\nformat, make sure the system variable is enabled, then\nperform a dump and restore using mysqldump. The columns\nusing relevant temporal data types are restored using the\nnew temporal format.\n \nExamples\n-------- \nCREATE TABLE t1 (d DATETIME);\n \nINSERT INTO t1 VALUES (\"2011-03-11\"), (\"2012-04-19\n13:08:22\"),\n (\"2013-07-18 13:44:22.123456\");\n \nSELECT * FROM t1;\n \n+---------------------+\n| d |\n+---------------------+\n| 2011-03-11 00:00:00 |\n| 2012-04-19 13:08:22 |\n| 2013-07-18 13:44:22 |\n+---------------------+\n \nCREATE TABLE t2 (d DATETIME(6));\n \nINSERT INTO t2 VALUES (\"2011-03-11\"), (\"2012-04-19\n13:08:22\"),\n (\"2013-07-18 13:44:22.123456\");\n \nSELECT * FROM t2;\n \n+----------------------------+\n| d |\n+----------------------------+\n| 2011-03-11 00:00:00.000000 |\n| 2012-04-19 13:08:22.000000 |\n| 2013-07-18 13:44:22.123456 |\n+----------------------------++\n \nStrings used in datetime context are automatically converted\nto datetime(6). If you want to have a datetime without\nseconds, you should use CONVERT(..,datetime).\n \nSELECT CONVERT(\'2007-11-30 10:30:19\',datetime);\n+-----------------------------------------+\n| CONVERT(\'2007-11-30 10:30:19\',datetime) |\n+-----------------------------------------+\n| 2007-11-30 10:30:19 |\n+-----------------------------------------+\n \nSELECT CONVERT(\'2007-11-30 10:30:19\',datetime(6));\n+--------------------------------------------+\n| CONVERT(\'2007-11-30 10:30:19\',datetime(6)) |\n+--------------------------------------------+\n| 2007-11-30 10:30:19.000000 |\n+--------------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/datetime/', '', 'https://mariadb.com/kb/en/datetime/'),
(545, 'PolyFromWKB', 32, 'A synonym for ST_PolyFromWKB.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/wkb-polyfromwkb/', '', 'https://mariadb.com/kb/en/wkb-polyfromwkb/'),
(546, 'PolygonFromWKB', 32, 'A synonym for ST_PolyFromWKB.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/polygonfromwkb/', '', 'https://mariadb.com/kb/en/polygonfromwkb/'),
(547, 'ST_AsBinary', 32, 'Syntax\n------ \nST_AsBinary(g)\nAsBinary(g)\nST_AsWKB(g)\nAsWKB(g)\n \nDescription\n----------- \nConverts a value in internal geometry format to its WKB\nrepresentation and returns the binary result.\n \nST_AsBinary(), AsBinary(), ST_AsWKB() and AsWKB() are\nsynonyms,\n \nExamples\n-------- \nSET @poly = ST_GeomFromText(\'POLYGON((0 0,0 1,1 1,1 0,0\n0))\');\nSELECT ST_AsBinary(@poly);\n \nSELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@poly)));\n+--------------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@poly))) |\n+--------------------------------------------+\n| POLYGON((0 0,0 1,1 1,1 0,0 0)) |\n+--------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_asbinary/', '', 'https://mariadb.com/kb/en/st_asbinary/'),
(548, 'ST_AsWKB', 32, 'A synonym for ST_AsBinary().\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_aswkb/', '', 'https://mariadb.com/kb/en/st_aswkb/'),
(550, 'ST_GeometryCollectionFromWKB', 32, 'A synonym for ST_GeomCollFromWKB.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_geometrycollectionfromwkb/', '', 'https://mariadb.com/kb/en/st_geometrycollectionfromwkb/'),
(551, 'ST_GeometryFromWKB', 32, 'A synonym for ST_GeomFromWKB.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_geometryfromwkb/', '', 'https://mariadb.com/kb/en/st_geometryfromwkb/'),
(275, 'DECIMAL', 22, 'Syntax\n------ \nDECIMAL[(M[,D])] [SIGNED | UNSIGNED | ZEROFILL]\n \nDescription\n----------- \nA packed \"exact\" fixed-point number. M is the total number\nof digits (the\nprecision) and D is the number of digits after the decimal\npoint (the\nscale). The decimal point and (for negative numbers) the\n\"-\" sign are not\ncounted in M. If D is 0, values have no decimal point or\nfractional\npart and on INSERT the value will be rounded to the nearest\nDECIMAL. The maximum number of digits (M) for DECIMAL is 65.\nThe maximum number of supported decimals (D) is 30 before\nMariadB 10.2.1 and 38 afterwards. If D is omitted, the\ndefault is 0. If M is omitted, the default is 10.\n \nUNSIGNED, if specified, disallows negative values.\n \nZEROFILL, if specified, pads the number with zeros, up to\nthe total number\nof digits specified by M.\n \nAll basic calculations (+, -, *, /) with DECIMAL columns are\ndone with\na precision of 65 digits.\n \nFor more details on the attributes, see Numeric Data Type\nOverview.\n \nOracle Mode\n \nIn Oracle mode from MariaDB 10.3, NUMBER is a synonym.\n \nExamples\n-------- \nCREATE TABLE t1 (d DECIMAL UNSIGNED ZEROFILL);\n \nINSERT INTO t1 VALUES (1),(2),(3),(4.0),(5.2),(5.7);\nQuery OK, 6 rows affected, 2 warnings (0.16 sec)\nRecords: 6 Duplicates: 0 Warnings: 2\n \nNote (Code 1265): Data truncated for column \'d\' at row 5\nNote (Code 1265): Data truncated for column \'d\' at row 6\n \nSELECT * FROM t1;\n \n+------------+\n| d |\n+------------+\n| 0000000001 |\n| 0000000002 |\n| 0000000003 |\n| 0000000004 |\n| 0000000005 |\n| 0000000006 |\n+------------+\n \nINSERT INTO t1 VALUES (-7);\nERROR 1264 (22003): Out of range value for column \'d\' at\nrow 1\n \n\n\nURL: https://mariadb.com/kb/en/decimal/', '', 'https://mariadb.com/kb/en/decimal/'),
(276, 'ENUM', 22, 'Syntax\n------ \nENUM(\'value1\',\'value2\',...) [CHARACTER SET charset_name]\n[COLLATE collation_name]\n \nDescription\n----------- \nAn enumeration. A string object that can have only one\nvalue, chosen\nfrom the list of values \'value1\', \'value2\', ..., NULL or\nthe special \n\'\' error value. In theory, an ENUM column can have a\nmaximum of 65,535 distinct\nvalues; in practice, the real maximum depends on many\nfactors. ENUM values are represented internally as integers.\n \nTrailing spaces are automatically stripped from ENUM values\non table creation.\n \nENUMs require relatively little storage space compared to\nstrings, either one or two bytes depending on the number of\nenumeration values.\n \nNULL and empty values\n \nAn ENUM can also contain NULL and empty values. If the ENUM\ncolumn is declared to permit NULL values, NULL becomes a\nvalid value, as well as the default value (see below). If\nstrict SQL Mode is not enabled, and an invalid value is\ninserted into an ENUM, a special empty string, with an index\nvalue of zero (see Numeric index, below), is inserted, with\na warning. This may be confusing, because the empty string\nis also a possible value, and the only difference if that in\nthis case its index is not 0. Inserting will fail with an\nerror if strict mode is active.\n \nIf a DEFAULT clause is missing, the default value will be:\nNULL is the column is nullable;\notherwise, the first value in the enumaration.\n \nNumeric index\n \nENUM values are indexed numerically in the order they are\ndefined, and sorting will be performed in this numeric\norder. We suggest not using ENUM to store numerals, as there\nis little to no storage space benefit, and it is easy to\nconfuse the enum integer with the enum numeral value by\nleaving out the quotes.\n \nAn ENUM defined as ENUM(\'apple\',\'orange\',\'pear\') would\nhave the following index values:\n \nIndex | Value | \n \nNULL | NULL | \n \n0 | \'\' | \n \n1 | \'apple\' | \n \n2 | \'orange\' | \n \n3 | \'pear\' | \n \nExamples\n-------- \nCREATE TABLE fruits (\n id INT NOT NULL auto_increment PRIMARY KEY,\n fruit ENUM(\'apple\',\'orange\',\'pear\'),\n bushels INT);\n \nDESCRIBE fruits;\n \n+---------+-------------------------------+------+-----+---------+----------------+\n| Field | Type | Null | Key | Default | Extra |\n+---------+-------------------------------+------+-----+---------+----------------+\n| id | int(11) | NO | PRI | NULL | auto_increment |\n| fruit | enum(\'apple\',\'orange\',\'pear\') | YES | | NULL\n| |\n| bushels | int(11) | YES | | NULL | |\n+---------+-------------------------------+------+-----+---------+----------------+\n \nINSERT INTO fruits\n (fruit,bushels) VALUES\n (\'pear\',20),\n (\'apple\',100),\n (\'orange\',25);\n \nINSERT INTO fruits\n (fruit,bushels) VALUES\n (\'avocado\',10);\nERROR 1265 (01000): Data truncated for column \'fruit\' at\nrow 1\n \nSELECT * FROM fruits;\n \n+----+--------+---------+\n| id | fruit | bushels |\n+----+--------+---------+\n| 1 | pear | 20 |\n| 2 | apple | 100 |\n| 3 | orange | 25 |\n+----+--------+---------+\n \nSelecting by numeric index:\n \nSELECT * FROM fruits WHERE fruit=2;\n \n+----+--------+---------+\n| id | fruit | bushels |\n+----+--------+---------+\n| 3 | orange | 25 |\n+----+--------+---------+\n \nSorting is according to the index value:\n \nCREATE TABLE enums (a ENUM(\'2\',\'1\'));\n \nINSERT INTO enums VALUES (\'1\'),(\'2\');\n \nSELECT * FROM enums ORDER BY a ASC;\n \n+------+\n| a |\n+------+\n| 2 |\n| 1 |\n+------+\n \nIt\'s easy to get confused between returning the enum\ninteger with the stored value, so we don\'t suggest using\nENUM to store numerals. The first example returns the 1st\nindexed field (\'2\' has an index value of 1, as it\'s\ndefined first), while the second example returns the string\nvalue \'1\'.\n \nSELECT * FROM enums WHERE a=1;\n \n+------+\n| a |\n+------+\n| 2 |\n+------+\n \nSELECT * FROM enums WHERE a=\'1\';\n \n+------+\n| a |\n+------+\n| 1 |\n+------+\n \n\n\nURL: https://mariadb.com/kb/en/enum/', '', 'https://mariadb.com/kb/en/enum/'),
(552, 'ST_GeomFromWKB', 32, 'Syntax\n------ \nST_GeomFromWKB(wkb[,srid])\nST_GeometryFromWKB(wkb[,srid])\nGeomFromWKB(wkb[,srid])\nGeometryFromWKB(wkb[,srid])\n \nDescription\n----------- \nConstructs a geometry value of any type using its WKB\nrepresentation and SRID.\n \nST_GeomFromWKB(), ST_GeometryFromWKB(), GeomFromWKB() and\nGeometryFromWKB() are synonyms.\n \nExamples\n-------- \nSET @g = ST_AsBinary(ST_LineFromText(\'LINESTRING(0 4, 4\n6)\'));\n \nSELECT ST_AsText(ST_GeomFromWKB(@g));\n+-------------------------------+\n| ST_AsText(ST_GeomFromWKB(@g)) |\n+-------------------------------+\n| LINESTRING(0 4,4 6) |\n+-------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_geomfromwkb/', '', 'https://mariadb.com/kb/en/st_geomfromwkb/'),
(553, 'ST_LineFromWKB', 32, 'Syntax\n------ \nST_LineFromWKB(wkb[,srid])\nLineFromWKB(wkb[,srid])\nST_LineStringFromWKB(wkb[,srid])\nLineStringFromWKB(wkb[,srid])\n \nDescription\n----------- \nConstructs a LINESTRING value using its WKB representation\nand SRID.\n \nST_LineFromWKB(), LineFromWKB(), ST_LineStringFromWKB(), and\nLineStringFromWKB() are synonyms.\n \nExamples\n-------- \nSET @g = ST_AsBinary(ST_LineFromText(\'LineString(0 4,4\n6)\'));\n \nSELECT ST_AsText(ST_LineFromWKB(@g)) AS l;\n \n+---------------------+\n| l |\n+---------------------+\n| LINESTRING(0 4,4 6) |\n+---------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_linefromwkb/', '', 'https://mariadb.com/kb/en/st_linefromwkb/'),
(554, 'ST_LineStringFromWKB', 32, 'A synonym for ST_LineFromWKB.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_linestringfromwkb/', '', 'https://mariadb.com/kb/en/st_linestringfromwkb/'),
(555, 'ST_PointFromWKB', 32, 'Syntax\n------ \nST_PointFromWKB(wkb[,srid])\nPointFromWKB(wkb[,srid])\n \nDescription\n----------- \nConstructs a POINT value using its WKB representation and\nSRID.\n \nST_PointFromWKB() and PointFromWKB() are synonyms.\n \nExamples\n-------- \nSET @g = ST_AsBinary(ST_PointFromText(\'POINT(0 4)\'));\n \nSELECT ST_AsText(ST_PointFromWKB(@g)) AS p;\n \n+------------+\n| p |\n+------------+\n| POINT(0 4) |\n+------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_pointfromwkb/', '', 'https://mariadb.com/kb/en/st_pointfromwkb/'),
(277, 'DOUBLE', 22, 'Syntax\n------ \nDOUBLE[(M,D)] [SIGNED | UNSIGNED | ZEROFILL]\nDOUBLE PRECISION[(M,D)] [SIGNED | UNSIGNED | ZEROFILL]\nREAL[(M,D)] [SIGNED | UNSIGNED | ZEROFILL]\n \nDescription\n----------- \nA normal-size (double-precision) floating-point number (see\nFLOAT for a single-precision floating-point number).\n \nAllowable values are:\n-1.7976931348623157E+308 to -2.2250738585072014E-308\n0\n2.2250738585072014E-308 to 1.7976931348623157E+308\n \nThese are the theoretical limits, based on the IEEE\nstandard. The actual range\nmight be slightly smaller depending on your hardware or\noperating system.\n \nM is the total number of digits and D is the number of\ndigits\nfollowing the decimal point. If M and D are omitted, values\nare stored\nto the limits allowed by the hardware. A double-precision\nfloating-point number is accurate to approximately 15\ndecimal places.\n \nUNSIGNED, if specified, disallows negative values.\n \nZEROFILL, if specified, pads the number with zeros, up to\nthe total number\nof digits specified by M.\n \nREAL and DOUBLE PRECISION are synonyms, unless the\nREAL_AS_FLOAT SQL mode is enabled, in which case REAL is a\nsynonym for FLOAT rather than DOUBLE.\n \nSee Floating Point Accuracy for issues when using\nfloating-point numbers.\n \nFor more details on the attributes, see Numeric Data Type\nOverview.\n \nExamples\n-------- \nCREATE TABLE t1 (d DOUBLE(5,0) zerofill);\n \nINSERT INTO t1 VALUES (1),(2),(3),(4);\n \nSELECT * FROM t1;\n \n+-------+\n| d |\n+-------+\n| 00001 |\n| 00002 |\n| 00003 |\n| 00004 |\n+-------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/double/', '', 'https://mariadb.com/kb/en/double/'),
(278, 'FLOAT', 22, 'Syntax\n------ \nFLOAT[(M,D)] [SIGNED | UNSIGNED | ZEROFILL]\n \nDescription\n----------- \nA small (single-precision) floating-point number (see DOUBLE\nfor a regular-size floating point number). Allowable values\nare:\n-3.402823466E+38 to -1.175494351E-38\n0\n1.175494351E-38 to 3.402823466E+38. \n \nThese are the theoretical limits, based on the IEEE \nstandard. The actual range might be slightly smaller\ndepending on your\nhardware or operating system.\n \nM is the total number of digits and D is the number of\ndigits\nfollowing the decimal point. If M and D are omitted, values\nare stored\nto the limits allowed by the hardware. A single-precision\nfloating-point number is accurate to approximately 7 decimal\nplaces.\n \nUNSIGNED, if specified, disallows negative values.\n \nUsing FLOAT might give you some unexpected problems because\nall\ncalculations in MariaDB are done with double precision. See\nFloating Point Accuracy.\n \nFor more details on the attributes, see Numeric Data Type\nOverview.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/float/', '', 'https://mariadb.com/kb/en/float/'),
(280, 'JSON Data Type', 22, 'The JSON alias was added in MariaDB 10.2.7. This was done to\nmake it possible to use JSON columns in statement based\nreplication from MySQL to MariaDB and to make it possible\nfor MariaDB to read mysqldumps from MySQL.\n \nJSON is an alias for LONGTEXT introduced for compatibility\nreasons with MySQL\'s JSON data type. MariaDB implements\nthis as a LONGTEXT rather, as the JSON data type contradicts\nthe SQL standard, and MariaDB\'s benchmarks indicate that\nperformance is at least equivalent.\n \nIn order to ensure that a a valid json document is inserted,\nthe JSON_VALID function can be used as a CHECK constraint.\nThis constraint is automatically included for types using\nthe JSON alias from MariaDB 10.4.3.\n \nExamples\n-------- \nCREATE TABLE t (j JSON);\n \nDESC t;\n+-------+----------+------+-----+---------+-------+\n| Field | Type | Null | Key | Default | Extra |\n+-------+----------+------+-----+---------+-------+\n| j | longtext | YES | | NULL | |\n+-------+----------+------+-----+---------+-------+\n \nWith validation:\n \nCREATE TABLE t2 (\n j JSON \n CHECK (JSON_VALID(j))\n);\n \nINSERT INTO t2 VALUES (\'invalid\');\nERROR 4025 (23000): CONSTRAINT `j` failed for `test`.`t2`\n \nINSERT INTO t2 VALUES (\'{\"id\": 1, \"name\":\n\"Monty\"}\');\nQuery OK, 1 row affected (0.13 sec)\n \nReplicating JSON Data Between MySQL and MariaDB\n \nThe JSON type in MySQL stores the JSON object in a compact\nform, not as LONGTEXT as in MariaDB.\nThis means that row based replication will not work for JSON\ntypes from MySQL to MariaDB.\n \nThere are a a few different ways to solve this:\nUse statement based replication.\nChange the JSON column to type TEXT in MySQL\n \nConverting a MySQL TABLE with JSON Fields to MariaDB\n \nMariaDB can\'t directly access MySQL\'s JSON format.\n \nThere are a a few different ways to move the table to\nMariaDB:\nChange the JSON column to type TEXT in MySQL. After this,\nMariaDB can directly use the table without any need for a\ndump and restore.\nUse mysqldump to copy the table.\n \nDifferences Between MySQL JSON Strings and MariaDB JSON\nStrings\n \nIn MySQL, JSON is an object and is compared according to\njson values. In MariaDB JSON strings are normal strings and\ncompared as strings. One exception is when using\nJSON_EXTRACT() in which case strings are unescaped before\ncomparison.\n \n\n\nURL: https://mariadb.com/kb/en/json-data-type/', '', 'https://mariadb.com/kb/en/json-data-type/'),
(556, 'ST_PolyFromWKB', 32, 'Syntax\n------ \nST_PolyFromWKB(wkb[,srid])\nST_PolygonFromWKB(wkb[,srid])\nPolyFromWKB(wkb[,srid])\nPolygonFromWKB(wkb[,srid])\n \nDescription\n----------- \nConstructs a POLYGON value using its WKB representation and\nSRID.\n \nST_PolyFromWKB(), ST_PolygonFromWKB(), PolyFromWKB() and\nPolygonFromWKB() are synonyms.\n \nExamples\n-------- \nSET @g = ST_AsBinary(ST_PolyFromText(\'POLYGON((1 1,1 5,4\n9,6 9,9 3,7 2,1 1))\'));\n \nSELECT ST_AsText(ST_PolyFromWKB(@g)) AS p;\n \n+----------------------------------------+\n| p |\n+----------------------------------------+\n| POLYGON((1 1,1 5,4 9,6 9,9 3,7 2,1 1)) |\n+----------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_polyfromwkb/', '', 'https://mariadb.com/kb/en/st_polyfromwkb/'),
(557, 'ST_PolygonFromWKB', 32, 'A synonym for ST_PolyFromWKB.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_polygonfromwkb/', '', 'https://mariadb.com/kb/en/st_polygonfromwkb/'),
(558, 'BOUNDARY', 36, 'A synonym for ST_BOUNDARY.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/geometry-properties-boundary/', '', 'https://mariadb.com/kb/en/geometry-properties-boundary/'),
(559, 'DIMENSION', 36, 'A synonym for ST_DIMENSION.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/dimension/', '', 'https://mariadb.com/kb/en/dimension/'),
(560, 'ENVELOPE', 36, 'A synonym for ST_ENVELOPE.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/geometry-properties-envelope/', '', 'https://mariadb.com/kb/en/geometry-properties-envelope/'),
(561, 'GeometryN', 36, 'A synonym for ST_GeometryN.\n \n\n \n \n \n \n \n \n \n\nURL:\nhttps://mariadb.com/kb/en/geometry-properties-geometryn/', '', 'https://mariadb.com/kb/en/geometry-properties-geometryn/'),
(562, 'GeometryType', 36, 'A synonym for ST_GeometryType.\n \n\n \n \n \n \n \n \n \n\nURL:\nhttps://mariadb.com/kb/en/geometry-properties-geometrytype/', '', 'https://mariadb.com/kb/en/geometry-properties-geometrytype/'),
(563, 'IsClosed', 36, 'A synonym for ST_IsClosed.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/isclosed/', '', 'https://mariadb.com/kb/en/isclosed/'),
(564, 'IsEmpty', 36, 'A synonym for ST_IsEmpty.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/geometry-properties-isempty/', '', 'https://mariadb.com/kb/en/geometry-properties-isempty/'),
(565, 'IsRing', 36, 'A synonym for ST_IsRing.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/isring/', '', 'https://mariadb.com/kb/en/isring/'),
(279, 'Geometry Types', 22, 'Description\n----------- \nMariaDB provides a standard way of creating spatial columns\nfor geometry types,\nfor example, with CREATE TABLE or ALTER TABLE.\nCurrently, spatial columns are supported for MyISAM, InnoDB,\nNDB, and ARCHIVE\ntables. See also SPATIAL INDEX.\n \nThe basic geometry type is GEOMETRY. But the type can be\nmore specific. The following types are supported:\n \nGeometry Types | \n \nPOINT | \n \nLINESTRING | \n \nPOLYGON | \n \nMULTIPOINT | \n \nMULTILINESTRING | \n \nMULTIPOLYGON | \n \nGEOMETRYCOLLECTION | \n \nGEOMETRY | \n \nExamples\n-------- \nNote: For clarity, only one type is listed per table in the\nexamples below, but a table\nrow can contain multiple types. For example:\n \nCREATE TABLE object (shapeA POLYGON, shapeB LINESTRING);\n \nPOINT\n \nCREATE TABLE gis_point (g POINT);\nSHOW FIELDS FROM gis_point;\n \nINSERT INTO gis_point VALUES\n (PointFromText(\'POINT(10 10)\')),\n (PointFromText(\'POINT(20 10)\')),\n (PointFromText(\'POINT(20 20)\')),\n (PointFromWKB(AsWKB(PointFromText(\'POINT(10 20)\'))));\n \nLINESTRING\n \nCREATE TABLE gis_line (g LINESTRING);\nSHOW FIELDS FROM gis_line;\n \nINSERT INTO gis_line VALUES\n (LineFromText(\'LINESTRING(0 0,0 10,10 0)\')),\n (LineStringFromText(\'LINESTRING(10 10,20 10,20 20,10 20,10\n10)\')),\n (LineStringFromWKB(AsWKB(LineString(Point(10, 10),\nPoint(40, 10)))));\n \nPOLYGON\n \nCREATE TABLE gis_polygon (g POLYGON);\nSHOW FIELDS FROM gis_polygon;\n \nINSERT INTO gis_polygon VALUES\n (PolygonFromText(\'POLYGON((10 10,20 10,20 20,10 20,10\n10))\')),\n (PolyFromText(\'POLYGON((0 0,50 0,50 50,0 50,0 0), (10\n10,20 10,20 20,10 20,10 10))\')),\n (PolyFromWKB(AsWKB(Polygon(LineString(Point(0, 0),\nPoint(30, 0), Point(30, 30), Point(0, 0))))));\n \nMULTIPOINT\n \nCREATE TABLE gis_multi_point (g MULTIPOINT);\nSHOW FIELDS FROM gis_multi_point;\n \nINSERT INTO gis_multi_point VALUES\n (MultiPointFromText(\'MULTIPOINT(0 0,10 10,10 20,20\n20)\')),\n (MPointFromText(\'MULTIPOINT(1 1,11 11,11 21,21 21)\')),\n (MPointFromWKB(AsWKB(MultiPoint(Point(3, 6), Point(4,\n10)))));\n \nMULTILINESTRING\n \nCREATE TABLE gis_multi_line (g MULTILINESTRING);\nSHOW FIELDS FROM gis_multi_line;\n \nINSERT INTO gis_multi_line VALUES\n (MultiLineStringFromText(\'MULTILINESTRING((10 48,10 21,10\n0),(16 0,16 23,16 48))\')),\n (MLineFromText(\'MULTILINESTRING((10 48,10 21,10 0))\')),\n (MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 2),\nPoint(3, 5)), LineString(Point(2, 5), Point(5, 8), Point(21,\n7))))));\n \nMULTIPOLYGON\n \nCREATE TABLE gis_multi_polygon (g MULTIPOLYGON);\nSHOW FIELDS FROM gis_multi_polygon;\n \nINSERT INTO gis_multi_polygon VALUES\n (MultiPolygonFromText(\'MULTIPOLYGON(((28 26,28 0,84 0,84\n42,28 26),(52 18,66 23,73 9,48 6,52 18)),((59 18,67 18,67\n13,59 13,59 18)))\')),\n (MPolyFromText(\'MULTIPOLYGON(((28 26,28 0,84 0,84 42,28\n26),(52 18,66 23,73 9,48 6,52 18)),((59 18,67 18,67 13,59\n13,59 18)))\')),\n (MPolyFromWKB(AsWKB(MultiPolygon(Polygon(LineString(Point(0,\n3), Point(3, 3), Point(3, 0), Point(0, 3)))))));\n \nGEOMETRYCOLLECTION\n \nCREATE TABLE gis_geometrycollection (g GEOMETRYCOLLECTION);\nSHOW FIELDS FROM gis_geometrycollection;\n \nINSERT INTO gis_geometrycollection VALUES\n (GeomCollFromText(\'GEOMETRYCOLLECTION(POINT(0 0),\nLINESTRING(0 0,10 10))\')),\n (GeometryFromWKB(AsWKB(GeometryCollection(Point(44, 6),\nLineString(Point(3, 6), Point(7, 9)))))),\n (GeomFromText(\'GeometryCollection()\')),\n (GeomFromText(\'GeometryCollection EMPTY\'));\n \nGEOMETRY\n \nCREATE TABLE gis_geometry (g GEOMETRY);\nSHOW FIELDS FROM gis_geometry;\n \nINSERT into gis_geometry SELECT * FROM gis_point;\n \nINSERT into gis_geometry SELECT * FROM gis_line;\n \nINSERT into gis_geometry SELECT * FROM gis_polygon;\n \nINSERT into gis_geometry SELECT * FROM gis_multi_point;\n \nINSERT into gis_geometry SELECT * FROM gis_multi_line;\n \nINSERT into gis_geometry SELECT * FROM gis_multi_polygon;\n \nINSERT into gis_geometry SELECT * FROM\ngis_geometrycollection;\n \n\n \n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/geometry-types/', '', 'https://mariadb.com/kb/en/geometry-types/'),
(284, 'MEDIUMINT', 22, 'Syntax\n------ \nMEDIUMINT[(M)] [SIGNED | UNSIGNED | ZEROFILL]\n \nDescription\n----------- \nA medium-sized integer. The signed range is -8388608 to\n8388607. The\nunsigned range is 0 to 16777215.\n \nZEROFILL pads the integer with zeroes and assumes UNSIGNED\n(even if UNSIGNED is not specified).\n \nFor details on the attributes, see Numeric Data Type\nOverview.\n \nExamples\n-------- \nCREATE TABLE mediumints (a MEDIUMINT,b MEDIUMINT UNSIGNED,c\nMEDIUMINT ZEROFILL);\n \nDESCRIBE mediumints;\n+-------+--------------------------------+------+-----+---------+-------+\n| Field | Type | Null | Key | Default | Extra |\n+-------+--------------------------------+------+-----+---------+-------+\n| a | mediumint(9) | YES | | NULL | |\n| b | mediumint(8) unsigned | YES | | NULL | |\n| c | mediumint(8) unsigned zerofill | YES | | NULL | |\n+-------+--------------------------------+------+-----+---------+-------+\n \nINSERT INTO mediumints VALUES (-10,-10,-10);\nQuery OK, 1 row affected, 2 warnings (0.05 sec)\nWarning (Code 1264): Out of range value for column \'b\' at\nrow 1\nWarning (Code 1264): Out of range value for column \'c\' at\nrow 1\n \nINSERT INTO mediumints VALUES (-10,10,-10);\nQuery OK, 1 row affected, 1 warning (0.08 sec)\nWarning (Code 1264): Out of range value for column \'c\' at\nrow 1\n \nINSERT INTO mediumints VALUES (-10,10,10);\n \nINSERT INTO mediumints VALUES (8388608,8388608,8388608);\nQuery OK, 1 row affected, 1 warning (0.05 sec)\nWarning (Code 1264): Out of range value for column \'a\' at\nrow 1\n \nINSERT INTO mediumints VALUES (8388607,8388608,8388608);\n \nSELECT * FROM mediumints;\n+---------+---------+----------+\n| a | b | c |\n+---------+---------+----------+\n| -10 | 0 | 00000000 |\n| -10 | 0 | 00000000 |\n| -10 | 10 | 00000000 |\n| -10 | 10 | 00000010 |\n| 8388607 | 8388608 | 08388608 |\n| 8388607 | 8388608 | 08388608 |\n+---------+---------+----------+\n \n\n\nURL: https://mariadb.com/kb/en/mediumint/', '', 'https://mariadb.com/kb/en/mediumint/'),
(566, 'IsSimple', 36, 'A synonym for ST_IsSImple.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/geometry-properties-issimple/', '', 'https://mariadb.com/kb/en/geometry-properties-issimple/'),
(567, 'NumGeometries', 36, 'A synonym for ST_NumGeometries.\n \n\n \n \n \n \n \n \n \n\nURL:\nhttps://mariadb.com/kb/en/geometry-properties-numgeometries/', '', 'https://mariadb.com/kb/en/geometry-properties-numgeometries/'),
(568, 'SRID', 36, 'A synonym for ST_SRID.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/geometry-properties-srid/', '', 'https://mariadb.com/kb/en/geometry-properties-srid/'),
(570, 'ST_DIMENSION', 36, 'Syntax\n------ \nST_Dimension(g)\nDimension(g)\n \nDescription\n----------- \nReturns the inherent dimension of the geometry value g. The\nresult can\nbe\n \nDimension | Definition | \n \n -1 | empty geometry | \n \n 0 | geometry with no length or area | \n \n 1 | geometry with no area but nonzero length | \n \n 2 | geometry with nonzero area | \n \nST_Dimension() and Dimension() are synonyms.\n \nExamples\n-------- \nSELECT Dimension(GeomFromText(\'LineString(1 1,2 2)\'));\n+------------------------------------------------+\n| Dimension(GeomFromText(\'LineString(1 1,2 2)\')) |\n+------------------------------------------------+\n| 1 |\n+------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_dimension/', '', 'https://mariadb.com/kb/en/st_dimension/'),
(572, 'ST_GEOMETRYN', 36, 'Syntax\n------ \nST_GeometryN(gc,N)\nGeometryN(gc,N)\n \nDescription\n----------- \nReturns the N-th geometry in the GeometryCollection gc.\nGeometries are numbered beginning with 1.\n \nST_GeometryN() and GeometryN() are synonyms.\n \nExample\n \nSET @gc = \'GeometryCollection(Point(1 1),LineString(12 14,\n9 11))\';\n \nSELECT AsText(GeometryN(GeomFromText(@gc),1));\n+----------------------------------------+\n| AsText(GeometryN(GeomFromText(@gc),1)) |\n+----------------------------------------+\n| POINT(1 1) |\n+----------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_geometryn/', '', 'https://mariadb.com/kb/en/st_geometryn/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(286, 'Numeric Data Type Overview', 22, 'There are a number of numeric data types:\nTINYINT\nBOOLEAN - Synonym for TINYINT(1)\nSMALLINT\nMEDIUMINT\nINT, INTEGER\nBIGINT\nDECIMAL, DEC, NUMERIC, FIXED\nFLOAT\nDOUBLE, DOUBLE PRECISION, REAL\nBIT\n \nSee the specific articles for detailed information on each.\n \nSIGNED, UNSIGNED and ZEROFILL\n \nMost numeric types can be defined as SIGNED, UNSIGNED or\nZEROFILL, for example:\n \nTINYINT[(M)] [SIGNED | UNSIGNED | ZEROFILL]\n \nIf SIGNED, or no attribute, is specified, a portion of the\nnumeric type will be reserved for the sign (plus or minus).\nFor example, a TINYINT SIGNED can range from -128 to 127. \n \nIf UNSIGNED is specified, no portion of the numeric type is\nreserved for the sign, so for integer types range can be\nlarger. For example, a TINYINT UNSIGNED can range from 0 to\n255. Floating point and fixed-point types also can be\nUNSIGNED, but this only prevents negative values from being\nstored and doesn\'t alter the range. \n \nIf ZEROFILL is specified, the column will be set to UNSIGNED\nand the spaces used by default to pad the field are replaced\nwith zeros. ZEROFILL is ignored in expressions or as part of\na UNION. ZEROFILL is a non-standard MySQL and MariaDB\nenhancement.\n \nNote that although the preferred syntax indicates that the\nattributes are exclusive, more than one attribute can be\nspecified.\n \nUntil MariaDB 10.2.7 (MDEV-8659), any combination of the\nattributes could be used in any order, with duplicates. In\nthis case:\nthe presence of ZEROFILL makes the column UNSIGNED ZEROFILL.\nthe presence of UNSIGNED makes the column UNSIGNED.\n \nFrom MariaDB 10.2.8, only the following combinations are\nsupported:\nSIGNED\nUNSIGNED\nZEROFILL\nUNSIGNED ZEROFILL\nZEROFILL UNSIGNED\n \nThe latter two should be replaced with simply ZEROFILL, but\nare still accepted by the parser.\n \nExamples\n-------- \nCREATE TABLE zf (\n i1 TINYINT SIGNED,\n i2 TINYINT UNSIGNED,\n i3 TINYINT ZEROFILL\n);\n \nINSERT INTO zf VALUES (2,2,2);\n \nSELECT * FROM zf;\n \n+------+------+------+\n| i1 | i2 | i3 |\n+------+------+------+\n| 2 | 2 | 002 |\n+------+------+------+\n \nRange\n \nWhen attempting to add a value that is out of the valid\nrange for the numeric type, MariaDB will react depending on\nthe strict SQL_MODE setting.\n \nIf strict_mode has been set (the default from MariaDB\n10.2.4), MariaDB will return an error.\n \nIf strict_mode has not been set (the default until MariaDB\n10.2.3), MariaDB will adjust the number to fit in the field,\nreturning a warning.\n \nExamples\n-------- \nWith strict_mode set:\n \nSHOW VARIABLES LIKE \'sql_mode\';\n \n+---------------+-------------------------------------------------------------------------------------------+\n| Variable_name | Value |\n+---------------+-------------------------------------------------------------------------------------------+\n| sql_mode |\nSTRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n|\n+---------------+-------------------------------------------------------------------------------------------+\n \nCREATE TABLE ranges (i1 TINYINT, i2 SMALLINT, i3 TINYINT\nUNSIGNED);\n \nINSERT INTO ranges VALUES (257,257,257);\nERROR 1264 (22003): Out of range value for column \'i1\' at\nrow 1\n \nSELECT * FROM ranges;\n \nEmpty set (0.10 sec)\n \nWith strict_mode unset:\n \nSHOW VARIABLES LIKE \'sql_mode%\';\n \n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| sql_mode | |\n+---------------+-------+\n \nCREATE TABLE ranges (i1 TINYINT, i2 SMALLINT, i3 TINYINT\nUNSIGNED);\n \nINSERT INTO ranges VALUES (257,257,257);\nQuery OK, 1 row affected, 2 warnings (0.00 sec)\n \nSHOW WARNINGS;\n \n+---------+------+---------------------------------------------+\n| Level | Code | Message |\n+---------+------+---------------------------------------------+\n| Warning | 1264 | Out of range value for column \'i1\' at\nrow 1 |\n| Warning | 1264 | Out of range value for column \'i3\' at\nrow 1 |\n+---------+------+---------------------------------------------+\n2 rows in set (0.00 sec)\n \nSELECT * FROM ranges;\n \n+------+------+------+\n| i1 | i2 | i3 |\n+------+------+------+\n| 127 | 257 | 255 |\n+------+------+------+\n \nAuto_increment\n \nThe AUTO_INCREMENT attribute can be used to generate a\nunique identity for new rows. For more details, see\nauto_increment.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/numeric-data-type-overview/', '', 'https://mariadb.com/kb/en/numeric-data-type-overview/'),
(289, 'SMALLINT', 22, 'Syntax\n------ \nSMALLINT[(M)] [SIGNED | UNSIGNED | ZEROFILL]\n \nDescription\n----------- \nA small integer. The signed range is -32768 to 32767. The\nunsigned range is 0 to 65535.\n \nIf a column has been set to ZEROFILL, all values will be\nprepended by zeros so that the SMALLINT value contains a\nnumber of M digits.\n \nNote: If the ZEROFILL attribute has been specified, the\ncolumn will automatically become UNSIGNED.\n \nFor more details on the attributes, see Numeric Data Type\nOverview.\n \nExamples\n-------- \nCREATE TABLE smallints (a SMALLINT,b SMALLINT UNSIGNED,c\nSMALLINT ZEROFILL);\n \nINSERT INTO smallints VALUES (-10,-10,-10);\nQuery OK, 1 row affected, 2 warnings (0.09 sec)\nWarning (Code 1264): Out of range value for column \'b\' at\nrow 1\nWarning (Code 1264): Out of range value for column \'c\' at\nrow 1\n \nINSERT INTO smallints VALUES (-10,10,-10);\nQuery OK, 1 row affected, 1 warning (0.08 sec)\nWarning (Code 1264): Out of range value for column \'c\' at\nrow 1\n \nINSERT INTO smallints VALUES (-10,10,10);\n \nINSERT INTO smallints VALUES (32768,32768,32768);\nQuery OK, 1 row affected, 1 warning (0.04 sec)\nWarning (Code 1264): Out of range value for column \'a\' at\nrow 1\n \nINSERT INTO smallints VALUES (32767,32768,32768);\n \nSELECT * FROM smallints;\n+-------+-------+-------+\n| a | b | c |\n+-------+-------+-------+\n| -10 | 0 | 00000 |\n| -10 | 10 | 00000 |\n| -10 | 10 | 00010 |\n| 32767 | 32768 | 32768 |\n| 32767 | 32768 | 32768 |\n+-------+-------+-------+\n \n\n\nURL: https://mariadb.com/kb/en/smallint/', '', 'https://mariadb.com/kb/en/smallint/'),
(573, 'ST_GEOMETRYTYPE', 36, 'Syntax\n------ \nST_GeometryType(g)\nGeometryType(g)\n \nDescription\n----------- \nReturns as a string the name of the geometry type of which\nthe\ngeometry instance g is a member. The name corresponds to one\nof the\ninstantiable Geometry subclasses.\n \nST_GeometryType() and GeometryType() are synonyms.\n \nExamples\n-------- \nSELECT GeometryType(GeomFromText(\'POINT(1 1)\'));\n+------------------------------------------+\n| GeometryType(GeomFromText(\'POINT(1 1)\')) |\n+------------------------------------------+\n| POINT |\n+------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_geometrytype/', '', 'https://mariadb.com/kb/en/st_geometrytype/'),
(575, 'ST_ISEMPTY', 36, 'Syntax\n------ \nST_IsEmpty(g)\nIsEmpty(g)\n \nDescription\n----------- \nIsEmpty is a function defined by the OpenGIS specification,\nbut is not fully implemented by MariaDB or MySQL. \n \nSince MariaDB and MySQL do not support GIS EMPTY values such\nas POINT EMPTY, as implemented it simply returns 1 if the\ngeometry value g is invalid, 0 if it is valid, and NULL if\nthe argument is NULL.\n \nST_IsEmpty() and IsEmpty() are synonyms.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_isempty/', '', 'https://mariadb.com/kb/en/st_isempty/'),
(576, 'ST_IsRing', 36, 'The ST_IsRing function was introduced in MariaDB 10.1.2\n \nSyntax\n------ \nST_IsRing(g)\nIsRing(g)\n \nDescription\n----------- \nReturns true if a given LINESTRING is a ring, that is, both\nST_IsClosed and ST_IsSimple. A simple curve does not pass\nthrough the same point more than once. However, see\nMDEV-7510.\n \nSt_IsRing() and IsRing() are synonyms.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_isring/', '', 'https://mariadb.com/kb/en/st_isring/'),
(290, 'String Literals', 22, 'Strings are sequences of characters and are enclosed with\nquotes.\n \nThe syntax is:\n \n[_charset_name]\'string\' [COLLATE collation_name]\n \nFor example:\n \n\'The MariaDB Foundation\'\n_utf8 \'Foundation\' COLLATE utf8_unicode_ci;\n \nStrings can either be enclosed in single quotes or in double\nquotes (the same character must be used to both open and\nclose the string).\n \nThe ANSI SQL-standard does not permit double quotes for\nenclosing strings, and although MariaDB does by default, if\nthe MariaDB server has enabled the ANSI_QUOTES_SQL SQL_MODE,\ndouble quotes will be treated as being used for identifiers\ninstead of strings.\n \nStrings that are next to each other are automatically\nconcatenated. For example:\n \n\'The \' \'MariaDB \' \'Foundation\'\n \nand\n \n\'The MariaDB Foundation\'\n \nare equivalent.\n \nThe \\ (backslash character) is used to escape characters.\nFor example:\n \n\'MariaDB\'s new features\'\n \nis not a valid string because of the single quote in the\nmiddle of the string, which is treated as if it closes the\nstring, but is actually meant as part of the string, an\napostrophe. The backslash character helps in situations like\nthis:\n \n\'MariaDB\\\'s new features\'\n \nis now a valid string, and if displayed, will appear without\nthe backslash.\n \nSELECT \'MariaDB\\\'s new features\';\n+------------------------+\n| MariaDB\'s new features |\n+------------------------+\n| MariaDB\'s new features |\n+------------------------+\n \nAnother way to escape the quoting character is repeating it\ntwice:\n \nSELECT \'I\'\'m here\', \"\"\"Double\"\"\";\n+----------+----------+\n| I\'m here | \"Double\" |\n+----------+----------+\n| I\'m here | \"Double\" |\n+----------+----------+\n \nEscape sequences\n \nThere are other escape sequences also. Here is a full list:\n \nEscape sequence | Character | \n \n\\0 | ASCII NUL (0x00). | \n \n\\\' | Single quote (“\'”). | \n \n\\\" | Double quote (“\"”). | \n \n\\b | Backspace. | \n \n\\n | Newline, or linefeed,. | \n \n\\r | Carriage return. | \n \n\\t | Tab. | \n \n\\Z | ASCII 26 (Control+Z). See note following the table. | \n \n\\\\ | Backslash (“\\”). | \n \n\\% | “%” character. See note following the table. | \n \n\\_ | A “_” character. See note following the table. | \n \nEscaping the % and _ characters can be necessary when using\nthe LIKE operator, which treats them as special characters.\n \nThe ASCII 26 character (\\Z) needs to be escaped when\nincluded in a batch file which needs to be executed in\nWindows. The reason is that ASCII 26, in Windows, is the end\nof file (EOF).\n \nBackslash (\\), if not used as an escape character, must\nalways be escaped. When followed by a character that is not\nin the above table, backslashes will simply be ignored.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/string-literals/', '', 'https://mariadb.com/kb/en/string-literals/'),
(291, 'TEXT', 22, 'Syntax\n------ \nTEXT[(M)] [CHARACTER SET charset_name] [COLLATE\ncollation_name]\n \nDescription\n----------- \nA TEXT column with a maximum length of 65,535 (216 - 1)\ncharacters. The effective maximum length is less if the\nvalue contains\nmulti-byte characters. Each TEXT value is stored using a\ntwo-byte length\nprefix that indicates the number of bytes in the value. If\nyou need a bigger storage, consider using MEDIUMTEXT\ninstead.\n \nAn optional length M can be given for this type. If this is\ndone, MariaDB\ncreates the column as the smallest TEXT type large enough to\nhold values\nM characters long.\n \nBefore MariaDB 10.2, all MariaDB collations were of type\nPADSPACE, meaning that TEXT (as well as VARCHAR and CHAR\nvalues) are compared without regard for trailing spaces.\nThis does not apply to the LIKE pattern-matching operator,\nwhich takes into account trailing spaces.\n \nBefore MariaDB 10.2.1, BLOB and TEXT columns could not be\nassigned a DEFAULT value. This restriction was lifted in\nMariaDB 10.2.1.\n \nExamples\n-------- \nTrailing spaces:\n \nCREATE TABLE strtest (d TEXT(10));\nINSERT INTO strtest VALUES(\'Maria \');\n \nSELECT d=\'Maria\',d=\'Maria \' FROM strtest;\n+-----------+--------------+\n| d=\'Maria\' | d=\'Maria \' |\n+-----------+--------------+\n| 1 | 1 |\n+-----------+--------------+\n \nSELECT d LIKE \'Maria\',d LIKE \'Maria \' FROM strtest;\n+----------------+-------------------+\n| d LIKE \'Maria\' | d LIKE \'Maria \' |\n+----------------+-------------------+\n| 0 | 1 |\n+----------------+-------------------+\n \nDifference between VARCHAR and TEXT\n \nVARCHAR columns can be fully indexed. TEXT columns can only\nbe indexed over a specified length.\nUsing TEXT or BLOB in a SELECT query that uses temporary\ntables for storing intermediate results will force the\ntemporary table to be disk based (using the Aria storage\nengine instead of the memory storage engine, which is a bit\nslower. This is not that bad as the Aria storage engine\ncaches the rows in memory. To get the benefit of this, one\nshould ensure that the aria_pagecache_buffer_size variable\nis big enough to hold most of the row and index data for\ntemporary tables.\n \nFor Storage Engine Developers\n \nInternally the full length of the VARCHAR column is\nallocated inside each TABLE objects record[] structure. As\nthere are three such buffers, each open table will allocate\n3 times max-length-to-store-varchar bytes of memory.\nTEXT and BLOB columns are stored with a pointer (4 or 8\nbytes) + a 1-4 bytes length. The TEXT data is only stored\nonce. This means that internally TEXT uses less memory for\neach open table but instead has the additional overhead that\neach TEXT object needs to be allocated and freed for each\nrow access (with some caching in between).\n \n\n\nURL: https://mariadb.com/kb/en/text/', '', 'https://mariadb.com/kb/en/text/'),
(577, 'ST_IsSimple', 36, 'Syntax\n------ \nST_IsSimple(g)\nIsSimple(g)\n \nDescription\n----------- \nReturns true if the given Geometry has no anomalous\ngeometric points, false if it does, or NULL if given a NULL\nvalue.\n \nST_IsSimple() and IsSimple() are synonyms.\n \nExamples\n-------- \nA POINT is always simple.\n \nSET @g = \'Point(1 2)\';\n \nSELECT ST_ISSIMPLE(GEOMFROMTEXT(@g));\n+-------------------------------+\n| ST_ISSIMPLE(GEOMFROMTEXT(@g)) |\n+-------------------------------+\n| 1 |\n+-------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_issimple/', '', 'https://mariadb.com/kb/en/st_issimple/'),
(578, 'ST_NUMGEOMETRIES', 36, 'Syntax\n------ \nST_NumGeometries(gc)\nNumGeometries(gc)\n \nDescription\n----------- \nReturns the number of geometries in the GeometryCollection\ngc.\n \nST_NumGeometries() and NumGeometries() are synonyms.\n \nExample\n \nSET @gc = \'GeometryCollection(Point(1 1),LineString(2 2, 3\n3))\';\n \nSELECT NUMGEOMETRIES(GeomFromText(@gc));\n+----------------------------------+\n| NUMGEOMETRIES(GeomFromText(@gc)) |\n+----------------------------------+\n| 2 |\n+----------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_numgeometries/', '', 'https://mariadb.com/kb/en/st_numgeometries/'),
(579, 'ST_RELATE', 36, 'The ST_RELATE() function was introduced in MariaDB 10.1.2\n \nSyntax\n------ \nST_Relate(g1, g2, i)\n \nDescription\n----------- \nReturns true if Geometry g1 is spatially related to\nGeometryg2 by testing for intersections between the\ninterior, boundary and exterior of the two geometries as\nspecified by the values in intersection matrix pattern i.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_relate/', '', 'https://mariadb.com/kb/en/st_relate/'),
(580, 'ST_SRID', 36, 'Syntax\n------ \nST_SRID(g)\nSRID(g)\n \nDescription\n----------- \nReturns an integer indicating the Spatial Reference System\nID for the\ngeometry value g.\n \nIn MariaDB, the SRID value is just an integer associated\nwith the\ngeometry value. All calculations are done assuming Euclidean\n(planar)\ngeometry.\n \nST_SRID() and SRID() are synonyms.\n \nExamples\n-------- \nSELECT SRID(GeomFromText(\'LineString(1 1,2 2)\',101));\n+-----------------------------------------------+\n| SRID(GeomFromText(\'LineString(1 1,2 2)\',101)) |\n+-----------------------------------------------+\n| 101 |\n+-----------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_srid/', '', 'https://mariadb.com/kb/en/st_srid/'),
(292, 'TIME', 22, 'Syntax\n------ \nTIME [()]\n \nDescription\n----------- \nA time. The range is \'-838:59:59.999999\' to\n\'838:59:59.999999\'. Microsecond precision can be from 0-6;\nif not specified 0 is used. Microseconds have been available\nsince MariaDB 5.3. \n \nMariaDB displays TIME values in \'HH:MM:SS.ssssss\' format,\nbut allows assignment of times in looser formats, including\n\'D HH:MM:SS\', \'HH:MM:SS\', \'HH:MM\', \'D HH:MM\', \'D\nHH\', \'SS\', or \'HHMMSS\', as well as permitting dropping\nof any leading zeros when a delimiter is provided, for\nexample \'3:9:10\'. For details, see date and time literals.\n \nMariaDB 10.1.2 introduced the --mysql56-temporal-format\noption, on by default, which allows MariaDB to store TIMEs\nusing the same low-level format MySQL 5.6 uses.\n \nInternal Format\n \nIn MariaDB 10.1.2 a new temporal format was introduced from\nMySQL 5.6 that alters how the TIME, DATETIME and TIMESTAMP\ncolumns operate at lower levels. These changes allow these\ntemporal data types to have fractional parts and negative\nvalues. You can disable this feature using the\nmysql56_temporal_format system variable.\n \nTables that include TIMESTAMP values that were created on an\nolder version of MariaDB or that were created while the\nmysql56_temporal_format system variable was disabled\ncontinue to store data using the older data type format.\n \nIn order to update table columns from the older format to\nthe newer format, execute an ALTER TABLE... MODIFY COLUMN\nstatement that changes the column to the *same* data type.\nThis change may be needed if you want to export the table\'s\ntablespace and import it onto a server that has\nmysql56_temporal_format=ON set (see MDEV-15225).\n \nFor instance, if you have a TIME column in your table: \n \nSHOW VARIABLES LIKE \'mysql56_temporal_format\';\n \n+-------------------------+-------+\n| Variable_name | Value |\n+-------------------------+-------+\n| mysql56_temporal_format | ON |\n+-------------------------+-------+\n \nALTER TABLE example_table MODIFY ts_col TIME;\n \nWhen MariaDB executes the ALTER TABLE statement, it converts\nthe data from the older temporal format to the newer one. \n \nIn the event that you have several tables and columns using\ntemporal data types that you want to switch over to the new\nformat, make sure the system variable is enabled, then\nperform a dump and restore using mysqldump. The columns\nusing relevant temporal data types are restored using the\nnew temporal format.\n \nExamples\n-------- \nINSERT INTO time VALUES (\'90:00:00\'), (\'800:00:00\'),\n(800), (22), (151413), (\'9:6:3\'), (\'12 09\');\n \nSELECT * FROM time;\n+-----------+\n| t |\n+-----------+\n| 90:00:00 |\n| 800:00:00 |\n| 00:08:00 |\n| 00:00:22 |\n| 15:14:13 |\n| 09:06:03 |\n| 297:00:00 |\n+-----------+\n \n\n\nURL: https://mariadb.com/kb/en/time/', '', 'https://mariadb.com/kb/en/time/'),
(295, 'TINYINT', 22, 'Syntax\n------ \nTINYINT[(M)] [SIGNED | UNSIGNED | ZEROFILL]\n \nDescription\n----------- \nA very small integer. The signed range is -128 to 127. The\nunsigned range is 0 to 255. For details on the attributes,\nsee Numeric Data Type Overview.\n \nExamples\n-------- \nCREATE TABLE tinyints (a TINYINT,b TINYINT UNSIGNED,c\nTINYINT ZEROFILL);\nQuery OK, 0 rows affected (0.43 sec)\n \nINSERT INTO tinyints VALUES (-10,-10,-10);\nQuery OK, 1 row affected, 2 warnings (0.08 sec)\nWarning (Code 1264): Out of range value for column \'b\' at\nrow 1\nWarning (Code 1264): Out of range value for column \'c\' at\nrow 1\n \nINSERT INTO tinyints VALUES (-10,10,-10);\nQuery OK, 1 row affected, 1 warning (0.11 sec)\nWarning (Code 1264): Out of range value for column \'c\' at\nrow 1\n \nINSERT INTO tinyints VALUES (-10,10,10);\n \nSELECT * FROM tinyints;\n+------+------+------+\n| a | b | c |\n+------+------+------+\n| -10 | 0 | 000 |\n| -10 | 10 | 000 |\n| -10 | 10 | 010 |\n+------+------+------+\n \nINSERT INTO tinyints VALUES (128,128,128);\nQuery OK, 1 row affected, 1 warning (0.19 sec)\nWarning (Code 1264): Out of range value for column \'a\' at\nrow 1\n \nINSERT INTO tinyints VALUES (127,128,128);\n \nSELECT * FROM tinyints;\n+------+------+------+\n| a | b | c |\n+------+------+------+\n| -10 | 0 | 000 |\n| -10 | 10 | 000 |\n| -10 | 10 | 010 |\n| 127 | 128 | 128 |\n| 127 | 128 | 128 |\n+------+------+------+\n \n\n\nURL: https://mariadb.com/kb/en/tinyint/', '', 'https://mariadb.com/kb/en/tinyint/'),
(297, 'VARBINARY', 22, 'Syntax\n------ \nVARBINARY(M)\n \nDescription\n----------- \nThe VARBINARY type is similar to the VARCHAR type, but\nstores binary byte strings rather than non-binary character\nstrings. M represents the maximum column length in bytes. \n \nIt contains no character set, and comparison and sorting are\nbased on the numeric value of the bytes.\n \nIf the maximum length is exceeded, and SQL strict mode is\nnot enabled , the extra characters will be dropped with a\nwarning. If strict mode is enabled, an error will occur.\n \nUnlike BINARY values, VARBINARYs are not right-padded when\ninserting.\n \nOracle Mode\n \nIn Oracle mode from MariaDB 10.3, RAW is a synonym for\nVARBINARY.\n \nExamples\n-------- \nInserting too many characters, first with strict mode off,\nthen with it on:\n \nCREATE TABLE varbins (a VARBINARY(10));\n \nINSERT INTO varbins VALUES(\'12345678901\');\nQuery OK, 1 row affected, 1 warning (0.04 sec)\n \nSELECT * FROM varbins;\n \n+------------+\n| a |\n+------------+\n| 1234567890 |\n+------------+\n \nSET sql_mode=\'STRICT_ALL_TABLES\';\n \nINSERT INTO varbins VALUES(\'12345678901\');\nERROR 1406 (22001): Data too long for column \'a\' at row 1\n \nSorting is performed with the byte value:\n \nTRUNCATE varbins;\n \nINSERT INTO varbins VALUES(\'A\'),(\'B\'),(\'a\'),(\'b\');\n \nSELECT * FROM varbins ORDER BY a;\n \n+------+\n| a |\n+------+\n| A |\n| B |\n| a |\n| b |\n+------+\n \nUsing CAST to sort as a CHAR instead:\n \nSELECT * FROM varbins ORDER BY CAST(a AS CHAR);\n+------+\n| a |\n+------+\n| a |\n| A |\n| b |\n| B |\n+------+\n \n\n\nURL: https://mariadb.com/kb/en/varbinary/', '', 'https://mariadb.com/kb/en/varbinary/'),
(581, 'ASCII', 37, 'Syntax\n------ \nASCII(str)\n \nDescription\n----------- \nReturns the numeric ASCII value of the leftmost character of\nthe string argument. Returns 0 if the given string is empty\nand NULL if it is NULL.\n \nASCII() works for 8-bit characters.\n \nExamples\n-------- \nSELECT ASCII(9);\n+----------+\n| ASCII(9) |\n+----------+\n| 57 |\n+----------+\n \nSELECT ASCII(\'9\');\n+------------+\n| ASCII(\'9\') |\n+------------+\n| 57 |\n+------------+\n \nSELECT ASCII(\'abc\');\n+--------------+\n| ASCII(\'abc\') |\n+--------------+\n| 97 |\n+--------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/ascii/', '', 'https://mariadb.com/kb/en/ascii/'),
(582, 'BIN', 37, 'Syntax\n------ \nBIN(N)\n \nDescription\n----------- \nReturns a string representation of the binary value of the\ngiven longlong (that is, BIGINT) number. This is equivalent\nto CONV(N,10,2). The argument should be positive. If it is a\nFLOAT, it will be truncated. Returns NULL if the argument is\nNULL.\n \nExamples\n-------- \nSELECT BIN(12);\n+---------+\n| BIN(12) |\n+---------+\n| 1100 |\n+---------+\n \n\n\nURL: https://mariadb.com/kb/en/bin/', '', 'https://mariadb.com/kb/en/bin/'),
(584, 'BIT_LENGTH', 37, 'Syntax\n------ \nBIT_LENGTH(str)\n \nDescription\n----------- \nReturns the length of the given string argument in bits. If\nthe argument is not a string, it will be converted to\nstring. If the argument is NULL, it returns NULL.\n \nExamples\n-------- \nSELECT BIT_LENGTH(\'text\');\n+--------------------+\n| BIT_LENGTH(\'text\') |\n+--------------------+\n| 32 |\n+--------------------+\n \nSELECT BIT_LENGTH(\'\');\n+----------------+\n| BIT_LENGTH(\'\') |\n+----------------+\n| 0 |\n+----------------+\n \nCompatibility\n \nPostgreSQL and Sybase support BIT_LENGTH().\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/bit_length/', '', 'https://mariadb.com/kb/en/bit_length/'),
(298, 'VARCHAR', 22, 'Syntax\n------ \n[NATIONAL] VARCHAR(M) [CHARACTER SET charset_name] [COLLATE\ncollation_name]\n \nDescription\n----------- \nA variable-length string. M represents the maximum column\nlength in\ncharacters. The range of M is 0 to 65,532. The effective\nmaximum\nlength of a VARCHAR is subject to the maximum row size and\nthe character set used. For\nexample, utf8 characters can require up to three bytes per\ncharacter,\nso a VARCHAR column that uses the utf8 character set can be\ndeclared\nto be a maximum of 21,844 characters.\n \nMariaDB stores VARCHAR values as a one-byte or two-byte\nlength prefix\nplus data. The length prefix indicates the number of bytes\nin the\nvalue. A VARCHAR column uses one length byte if values\nrequire no more\nthan 255 bytes, two length bytes if values may require more\nthan 255\nbytes.\n \nNote: MariaDB 5.1 and later follow the standard SQL\nspecification, \nand do not remove trailing spaces from VARCHAR values.\n \nVARCHAR(0) columns can contain 2 values: an empty string or\nNULL. Such columns cannot be part of an index. The CONNECT\nstorage engine does not support VARCHAR(0).\n \nVARCHAR is shorthand for CHARACTER VARYING. NATIONAL VARCHAR\nis the\nstandard SQL way to define that a VARCHAR column should use\nsome\npredefined character set. MariaDB uses utf8 as this\npredefined character set, as does MySQL 4.1 and up.\nNVARCHAR is shorthand for NATIONAL VARCHAR.\n \nBefore MariaDB 10.2, all MariaDB collations were of type\nPADSPACE, meaning that VARCHAR (as well as CHAR and TEXT\nvalues) are compared without regard for trailing spaces.\nThis does not apply to the LIKE pattern-matching operator,\nwhich takes into account trailing spaces. From MariaDB 10.2,\na number of NO PAD collations are available.\n \nIf a unique index consists of a column where trailing pad\ncharacters are stripped or ignored, inserts into that column\nwhere values differ only by the number of trailing pad\ncharacters will result in a duplicate-key error.\n \nExamples\n-------- \nThe following are equivalent:\n \nVARCHAR(30) CHARACTER SET utf8\nNATIONAL VARCHAR(30)\nNVARCHAR(30)\nNCHAR VARCHAR(30)\nNATIONAL CHARACTER VARYING(30)\nNATIONAL CHAR VARYING(30)\n \nTrailing spaces:\n \nCREATE TABLE strtest (v VARCHAR(10));\nINSERT INTO strtest VALUES(\'Maria \');\n \nSELECT v=\'Maria\',v=\'Maria \' FROM strtest;\n+-----------+--------------+\n| v=\'Maria\' | v=\'Maria \' |\n+-----------+--------------+\n| 1 | 1 |\n+-----------+--------------+\n \nSELECT v LIKE \'Maria\',v LIKE \'Maria \' FROM strtest;\n+----------------+-------------------+\n| v LIKE \'Maria\' | v LIKE \'Maria \' |\n+----------------+-------------------+\n| 0 | 1 |\n+----------------+-------------------+\n \nTruncation\n \nDepending on whether or not strict sql mode is set, you will\neither get a warning or an error if you try to insert a\nstring that is too long into a VARCHAR column. If the extra\ncharacters are spaces, the spaces that can\'t fit will be\nremoved and you will always get a warning, regardless of the\nsql mode setting.\n \nDifference Between VARCHAR and TEXT\n \nVARCHAR columns can be fully indexed. TEXT columns can only\nbe indexed over a specified length.\nUsing TEXT or BLOB in a SELECT query that uses temporary\ntables for storing intermediate results will force the\ntemporary table to be disk based (using the Aria storage\nengine instead of the memory storage engine, which is a bit\nslower. This is not that bad as the Aria storage engine\ncaches the rows in memory. To get the benefit of this, one\nshould ensure that the aria_pagecache_buffer_size variable\nis big enough to hold most of the row and index data for\ntemporary tables.\n \nOracle Mode\n \nIn Oracle mode from MariaDB 10.3, VARCHAR2 is a synonym.\n \nFor Storage Engine Developers\n \nInternally the full length of the VARCHAR column is\nallocated inside each TABLE objects record[] structure. As\nthere are three such buffers, each open table will allocate\n3 times max-length-to-store-varchar bytes of memory.\nTEXT and BLOB columns are stored with a pointer (4 or 8\nbytes) + a 1-4 bytes length. The TEXT data is only stored\nonce. This means that internally TEXT uses less memory for\neach open table but instead has the additional overhead that\neach TEXT object needs to be allocated and freed for each\nrow access (with some caching in between).\n \n\n\nURL: https://mariadb.com/kb/en/varchar/', '', 'https://mariadb.com/kb/en/varchar/'),
(299, 'YEAR Data Type', 22, 'Syntax\n------ \nYEAR[(4)]\n \nDescription\n----------- \nA year in two-digit or four-digit format. The default is\nfour-digit format. Note that the two-digit format has been\ndeprecated since 5.5.27. \n \nIn four-digit format, the allowable values are 1901 to 2155,\nand 0000. In two-digit format, the allowable values are 70\nto 69,\nrepresenting years from 1970 to 2069. MariaDB displays YEAR\nvalues in\nYYYY format, but allows you to assign values to YEAR columns\nusing\neither strings or numbers.\n \nInserting numeric zero has a different result for YEAR(4)\nand YEAR(2). For YEAR(2), the value 00 reflects the year\n2000. For YEAR(4), the value 0000 reflects the year zero.\nThis only applies to numeric zero. String zero always\nreflects the year 2000.\n \nExamples\n-------- \nAccepting a string or a number:\n \nCREATE TABLE y(y YEAR);\n \nINSERT INTO y VALUES (1990),(\'2012\');\n \nSELECT * FROM y;\n+------+\n| y |\n+------+\n| 1990 |\n| 2012 |\n+------+\n \nOut of range:\n \nINSERT INTO y VALUES (1005),(\'3080\');\nQuery OK, 2 rows affected, 2 warnings (0.05 sec)\nRecords: 2 Duplicates: 0 Warnings: 2\n \nSHOW WARNINGS;\n+---------+------+--------------------------------------------+\n| Level | Code | Message |\n+---------+------+--------------------------------------------+\n| Warning | 1264 | Out of range value for column \'y\' at\nrow 1 |\n| Warning | 1264 | Out of range value for column \'y\' at\nrow 2 |\n+---------+------+--------------------------------------------+\n \nSELECT * FROM y;\n+------+\n| y |\n+------+\n| 1990 |\n| 2012 |\n| 0000 |\n| 0000 |\n+------+\n \nTruncating:\n \nINSERT INTO y VALUES (\'2013-12-12\');\nQuery OK, 1 row affected, 1 warning (0.05 sec)\n \nSHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level | Code | Message |\n+---------+------+----------------------------------------+\n| Warning | 1265 | Data truncated for column \'y\' at row 1\n|\n+---------+------+----------------------------------------+\n \nSELECT * FROM y;\n+------+\n| y |\n+------+\n| 1990 |\n| 2012 |\n| 0000 |\n| 0000 |\n| 2013 |\n+------+\n \nDifference between YEAR(2) and YEAR(4), and string and\nnumeric zero:\n \nCREATE TABLE y2(y YEAR(4), y2 YEAR(2));\nQuery OK, 0 rows affected, 1 warning (0.40 sec)\n \nNote (Code 1287): \'YEAR(2)\' is deprecated and will be\nremoved in a future release. Please use YEAR(4) instead\n \nINSERT INTO y2 VALUES(0,0),(\'0\',\'0\');\n \nSELECT YEAR(y),YEAR(y2) FROM y;\n+---------+----------+\n| YEAR(y) | YEAR(y2) |\n+---------+----------+\n| 0 | 2000 |\n| 2000 | 2000 |\n+---------+----------+\n \n\n\nURL: https://mariadb.com/kb/en/year-data-type/', '', 'https://mariadb.com/kb/en/year-data-type/'),
(587, 'CHARACTER_LENGTH', 37, 'Syntax\n------ \nCHARACTER_LENGTH(str)\n \nDescription\n----------- \nCHARACTER_LENGTH() is a synonym for CHAR_LENGTH().\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/character_length/', '', 'https://mariadb.com/kb/en/character_length/'),
(602, 'INSTR', 37, 'Syntax\n------ \nINSTR(str,substr)\n \nDescription\n----------- \nReturns the position of the first occurrence of substring\nsubstr in\nstring str. This is the same as the two-argument form of\nLOCATE(),\nexcept that the order of the arguments is reversed.\n \nINSTR() performs a case-insensitive search.\n \nIf any argument is NULL, returns NULL.\n \nExamples\n-------- \nSELECT INSTR(\'foobarbar\', \'bar\');\n+---------------------------+\n| INSTR(\'foobarbar\', \'bar\') |\n+---------------------------+\n| 4 |\n+---------------------------+\n \nSELECT INSTR(\'My\', \'Maria\');\n+----------------------+\n| INSTR(\'My\', \'Maria\') |\n+----------------------+\n| 0 |\n+----------------------+\n \n\n\nURL: https://mariadb.com/kb/en/instr/', '', 'https://mariadb.com/kb/en/instr/'),
(300, 'BEGIN END', 23, 'Syntax\n------ \n[begin_label:] BEGIN [NOT ATOMIC]\n [statement_list]\nEND [end_label]\n \nNOT ATOMIC is required when used outside of a stored\nprocedure. Inside stored procedures or within an anonymous\nblock, BEGIN alone starts a new anonymous block.\n \nDescription\n----------- \nBEGIN ... END syntax is used for writing compound\nstatements. A compound statement can contain multiple\nstatements, enclosed by the BEGIN and END keywords.\nstatement_list represents a list of one or more statements,\neach\nterminated by a semicolon (i.e., ;) statement delimiter.\nstatement_list is\noptional, which means that the empty compound statement\n(BEGIN END) is\nlegal.\n \nNote that END will perform a commit. If you are running in\nautocommit mode, every statement will be committed\nseparately. If you are not running in autocommit mode, you\nmust execute a COMMIT or ROLLBACK after END to get the\ndatabase up to date.\n \nUse of multiple statements requires that a client is able to\nsend statement strings containing the ; statement delimiter.\nThis is handled in the mysql command-line client with the\nDELIMITER command.\nChanging the ; end-of-statement delimiter (for example, to\n//) allows ; to be used in a program body.\n \nA compound statement within a stored program can be\nlabeled. end_label cannot be given unless begin_label also\nis present. If both are present, they must be the same.\n \nBEGIN ... END constructs can be nested. Each block can\ndefine its own variables, a CONDITION, a HANDLER and a\nCURSOR, which don\'t exist in the outer blocks. The most\nlocal declarations override the outer objects which use the\nsame name (see example below).\n \nThe declarations order is the following:\nDECLARE local variables;\nDECLARE CONDITIONs;\nDECLARE CURSORs;\nDECLARE HANDLERs;\n \nNote that DECLARE HANDLER contains another BEGIN ... END\nconstruct.\n \nHere is an example of a very simple, anonymous block:\n \nBEGIN NOT ATOMIC\nSET @a=1;\n \nCREATE TABLE test.t1(a INT);\nEND|\n \nBelow is an example of nested blocks in a stored procedure:\n \nCREATE PROCEDURE t( )\nBEGIN\n DECLARE x TINYINT UNSIGNED DEFAULT 1;\n \n BEGIN\n DECLARE x CHAR(2) DEFAULT \'02\';\n \n DECLARE y TINYINT UNSIGNED DEFAULT 10;\n \n SELECT x, y;\n \n END;\n \n SELECT x;\n \nEND;\n \nIn this example, a TINYINT variable, x is declared in the\noutter block. But in the inner block x is re-declared as a\nCHAR and an y variable is declared. The inner SELECT shows\nthe \"new\" value of x, and the value of y. But when x is\nselected in the outer block, the \"old\" value is returned.\nThe final SELECT doesn\'t try to read y, because it doesn\'t\nexist in that context.\n \n\n\nURL: https://mariadb.com/kb/en/begin-end/', '', 'https://mariadb.com/kb/en/begin-end/'),
(301, 'CASE Statement', 23, 'Syntax\n------ \nCASE case_value\n WHEN when_value THEN statement_list\n [WHEN when_value THEN statement_list] ...\n [ELSE statement_list]\nEND CASE\n \nOr:\n \nCASE\n WHEN search_condition THEN statement_list\n [WHEN search_condition THEN statement_list] ...\n [ELSE statement_list] \nEND CASE\n \nDescription\n----------- \nThe CASE statement for stored programs implements a complex\nconditional\nconstruct. If a search_condition evaluates to true, the\ncorresponding SQL\nstatement list is executed. If no search condition matches,\nthe statement list\nin the ELSE clause is executed. Each statement_list consists\nof one or\nmore statements.\n \nIf no when_value or search_condition matches the value\ntested and the CASE\nstatement contains no ELSE clause, a Case not found for CASE\nstatement\nerror results.\n \nEach statement_list consists of one or more statements; an\nempty\nstatement_list is not allowed. To handle situations where no\nvalue is\nmatched by any WHEN clause, use an ELSE containing an\nempty BEGIN ... END block, as shown in this example:\n \nDELIMITER |\nCREATE PROCEDURE p()\nBEGIN\n DECLARE v INT DEFAULT 1;\n \n CASE v\n WHEN 2 THEN SELECT v;\n \n WHEN 3 THEN SELECT 0;\n \n ELSE BEGIN END;\n \n END CASE;\n \nEND;\n \n|\n \nThe indentation used here in the ELSE clause is for purposes\nof clarity only,\nand is not otherwise significant. See Delimiters in the\nmysql client for more on the use of the delimiter command.\n \nNote: The syntax of the CASE statement used inside stored\nprograms\ndiffers slightly from that of the SQL CASE expression\ndescribed in\nCASE OPERATOR.\nThe CASE statement cannot have an ELSE NULL clause, and it\nis\nterminated with END CASE instead of END.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/case-statement/', '', 'https://mariadb.com/kb/en/case-statement/'),
(303, 'DECLARE CONDITION', 23, 'Syntax\n------ \nDECLARE condition_name CONDITION FOR condition_value\n \ncondition_value:\n SQLSTATE [VALUE] sqlstate_value\n | mysql_error_code\n \nDescription\n----------- \nThe DECLARE ... CONDITION statement defines a named error\ncondition.\nIt specifies a condition that needs specific handling and\nassociates a\nname with that condition. Later, the name can be used in a\nDECLARE ... HANDLER, SIGNAL or RESIGNAL statement (as long\nas the statement is located in the same BEGIN ... END\nblock).\n \nConditions must be declared after local variables, but\nbefore CURSORs and HANDLERs.\n \nA condition_value for DECLARE ... CONDITION can be an\nSQLSTATE value (a\n5-character string literal) or a MySQL error code (a\nnumber). You should not\nuse SQLSTATE value \'00000\' or MySQL error code 0, because\nthose indicate sucess\nrather than an error condition. If you try, or if you\nspecify an invalid SQLSTATE value, an error like this is\nproduced:\n \nERROR 1407 (42000): Bad SQLSTATE: \'00000\'\n \nFor a list of SQLSTATE values and MariaDB error\ncodes, see MariaDB Error Codes.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/declare-condition/', '', 'https://mariadb.com/kb/en/declare-condition/'),
(603, 'LCASE', 37, 'Syntax\n------ \nLCASE(str)\n \nDescription\n----------- \nLCASE() is a synonym for LOWER().\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/lcase/', '', 'https://mariadb.com/kb/en/lcase/'),
(604, 'LEFT', 37, 'Syntax\n------ \nLEFT(str,len)\n \nDescription\n----------- \nReturns the leftmost len characters from the string str, or\nNULL if\nany argument is NULL.\n \nExamples\n-------- \nSELECT LEFT(\'MariaDB\', 5);\n+--------------------+\n| LEFT(\'MariaDB\', 5) |\n+--------------------+\n| Maria |\n+--------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/left/', '', 'https://mariadb.com/kb/en/left/'),
(606, 'LENGTHB', 37, 'Introduced in MariaDB 10.3.1 as part of the Oracle\ncompatibility enhancements.\n \nSyntax\n------ \nLENGTHB(str)\n \nDescription\n----------- \nLENGTHB() is a synonym for LENGTH().\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/lengthb/', '', 'https://mariadb.com/kb/en/lengthb/'),
(615, 'MID', 37, 'Syntax\n------ \nMID(str,pos,len)\n \nDescription\n----------- \nMID(str,pos,len) is a synonym for SUBSTRING(str,pos,len).\n \nExamples\n-------- \nSELECT MID(\'abcd\',4,1);\n+-----------------+\n| MID(\'abcd\',4,1) |\n+-----------------+\n| d |\n+-----------------+\n \nSELECT MID(\'abcd\',2,2);\n+-----------------+\n| MID(\'abcd\',2,2) |\n+-----------------+\n| bc |\n+-----------------+\n \nA negative starting position:\n \nSELECT MID(\'abcd\',-2,4);\n+------------------+\n| MID(\'abcd\',-2,4) |\n+------------------+\n| cd |\n+------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/mid/', '', 'https://mariadb.com/kb/en/mid/'),
(616, 'NOT LIKE', 37, 'Syntax\n------ \nexpr NOT LIKE pat [ESCAPE \'escape_char\']\n \nDescription\n----------- \nThis is the same as NOT (expr LIKE pat [ESCAPE\n\'escape_char\']).\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/not-like/', '', 'https://mariadb.com/kb/en/not-like/'),
(305, 'DECLARE HANDLER', 23, 'Syntax\n------ \nDECLARE handler_type HANDLER\n FOR condition_value [, condition_value] ...\n statement\n \nhandler_type:\n CONTINUE\n | EXIT \n | UNDO\n \ncondition_value:\n SQLSTATE [VALUE] sqlstate_value\n | condition_name\n | SQLWARNING\n | NOT FOUND\n | SQLEXCEPTION\n | mariadb_error_code\n \nDescription\n----------- \nThe DECLARE ... HANDLER statement specifies handlers that\neach may\ndeal with one or more conditions. If one of these conditions\noccurs,\nthe specified statement is executed. statement can be a\nsimple\nstatement (for example, SET var_name = value), or it can be\na compound\nstatement written using BEGIN and END.\n \nHandlers must be declared after local variables, a CONDITION\nand a CURSOR.\n \nFor a CONTINUE handler, execution of the current program\ncontinues\nafter execution of the handler statement. For an EXIT\nhandler,\nexecution terminates for the BEGIN ... END compound\nstatement in which\nthe handler is declared. (This is true even if the condition\noccurs in\nan inner block.) The UNDO handler type statement is not\nsupported.\n \nIf a condition occurs for which no handler has been\ndeclared, the\ndefault action is EXIT.\n \nA condition_value for DECLARE ... HANDLER can be any of the\nfollowing\nvalues:\nAn SQLSTATE value (a 5-character string literal) or a\nMariaDB error\ncode (a number). You should not use SQLSTATE value \'00000\'\nor MariaDB\nerror code 0, because those indicate sucess rather than an\nerror\ncondition. For a list of SQLSTATE values and MariaDB error\ncodes, see\nMariaDB Error Codes.\nA condition name previously specified with DECLARE ...\nCONDITION. It must be in the same stored program. See\nDECLARE CONDITION.\nSQLWARNING is shorthand for the class of SQLSTATE values\nthat begin\nwith \'01\'.\nNOT FOUND is shorthand for the class of SQLSTATE values that\nbegin\nwith \'02\'. This is relevant only the context of cursors\nand is used to\ncontrol what happens when a cursor reaches the end of a data\nset. If\nno more rows are available, a No Data condition occurs with\nSQLSTATE\nvalue 02000. To detect this condition, you can set up a\nhandler for it\n(or for a NOT FOUND condition). An example is shown in\nCursor Overview. This condition also occurs for SELECT ...\nINTO var_list statements that retrieve no\nrows.\nSQLEXCEPTION is shorthand for the class of SQLSTATE values\nthat do\nnot begin with \'00\', \'01\', or \'02\'.\n \nWhen an error raises, in some cases it could be handled by\nmultiple HANDLERs. For example, there may be an handler for\n1050 error, a separate handler for the 42S01 SQLSTATE, and\nanother separate handler for the SQLEXCEPTION class: in\ntheory all occurrences of HANDLER may catch the 1050 error,\nbut MariaDB chooses the HANDLER with the highest precedence.\nHere are the precedence rules:\nHandlers which refer to an error code have the highest\nprecedence.\nHandlers which refer to a SQLSTATE come next.\nHandlers which refer to an error class have the lowest\nprecedence.\n \nIn some cases, a statement could produce multiple errors. If\nthis happens, in some cases multiple handlers could have the\nhighest precedence. In such cases, the choice of the handler\nis indeterminate.\n \nNote that if an error occurs within a CONTINUE HANDLER\nblock, it can be handled by another HANDLER. However, a\nHANDLER which is already in the stack (that is, it has been\ncalled to handle an error and its execution didn\'t finish\nyet) cannot handle new errors—this prevents endless loops.\nFor example, suppose that a stored procedure contains a\nCONTINUE HANDLER for SQLWARNING and another CONTINUE HANDLER\nfor NOT FOUND. At some point, a NOT FOUND error occurs, and\nthe execution enters the NOT FOUND HANDLER. But within that\nhandler, a warning occurs, and the execution enters the\nSQLWARNING HANDLER. If another NOT FOUND error occurs, it\ncannot be handled again by the NOT FOUND HANDLER, because\nits execution is not finished.\n \nWhen a DECLARE HANDLER block can handle more than one error\ncondition, it may be useful to know which errors occurred.\nTo do so, you can use the GET DIAGNOSTICS statement.\n \nAn error that is handled by a DECLARE HANDLER construct can\nbe issued again using the RESIGNAL statement.\n \nBelow is an example using DECLARE HANDLER:\n \nCREATE TABLE test.t (s1 INT, PRIMARY KEY (s1));\n \nDELIMITER //\n \nCREATE PROCEDURE handlerdemo ( )\n BEGIN\n DECLARE CONTINUE HANDLER FOR SQLSTATE \'23000\' SET @x2 =\n1;\n \n SET @x = 1;\n \n INSERT INTO test.t VALUES (1);\n SET @x = 2;\n \n INSERT INTO test.t VALUES (1);\n SET @x = 3;\n \n END;\n \n //\n \nDELIMITER ;\n \nCALL handlerdemo( );\n \nSELECT @x;\n \n+------+\n| @x |\n+------+\n| 3 |\n+------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/declare-handler/', '', 'https://mariadb.com/kb/en/declare-handler/'),
(306, 'DECLARE Variable', 23, 'Syntax\n------ \nDECLARE var_name [, var_name] ... [[ROW] TYPE OF]] type\n[DEFAULT value]\n \nDescription\n----------- \nThis statement is used to declare local variables within\nstored programs. To\nprovide a default value for the variable, include a DEFAULT\nclause. The\nvalue can be specified as an expression (even subqueries are\npermitted); it need not be a constant. If the\nDEFAULT clause is missing, the initial value is NULL.\n \nLocal variables are treated like stored routine parameters\nwith respect to data\ntype and overflow checking. See CREATE PROCEDURE.\n \nLocal variables must be declared before CONDITIONs, CURSORs\nand HANDLERs.\n \nLocal variable names are not case sensitive.\n \nThe scope of a local variable is within the BEGIN ... END\nblock where it is\ndeclared. The variable can be referred to in blocks nested\nwithin the declaring\nblock, except those blocks that declare a variable with the\nsame name.\n \nTYPE OF / ROW TYPE OF\n \nTYPE OF and ROW TYPE OF anchored data types for stored\nroutines were introduced in MariaDB 10.3.\n \nAnchored data types allow a data type to be defined based on\nanother object, such as a table row, rather than\nspecifically set in the declaration. If the anchor object\nchanges, so will the anchored data type. This can lead to\nroutines being easier to maintain, so that if the data type\nin the table is changed, it will automatically be changed in\nthe routine as well.\n \nVariables declared with ROW TYPE OF will have the same\nfeatures as implicit ROW variables. It is not possible to\nuse ROW TYPE OF variables in a LIMIT clause.\n \nThe real data type of TYPE OF and ROW TYPE OF table_name\nwill become known at the very beginning of the stored\nroutine call. ALTER TABLE or DROP TABLE statements performed\ninside the current routine on the tables that appear in\nanchors won\'t affect the data type of the anchored\nvariables, even if the variable is declared after an ALTER\nTABLE or DROP TABLE statement.\n \nThe real data type of a ROW TYPE OF cursor_name variable\nwill become known when execution enters into the block where\nthe variable is declared. Data type instantiation will\nhappen only once. In a cursor ROW TYPE OF variable that is\ndeclared inside a loop, its data type will become known on\nthe very first iteration and won\'t change on further loop\niterations.\n \nThe tables referenced in TYPE OF and ROW TYPE OF\ndeclarations will be checked for existence at the beginning\nof the stored routine call. CREATE PROCEDURE or CREATE\nFUNCTION will not check the referenced tables for existence.\n \nExamples\n-------- \nTYPE OF and ROW TYPE OF from MariaDB 10.3:\n \nDECLARE tmp TYPE OF t1.a;\n -- Get the data type from the column {{a}} in the table\n{{t1}}\n \nDECLARE rec1 ROW TYPE OF t1;\n -- Get the row data type from the table {{t1}}\n \nDECLARE rec2 ROW TYPE OF cur1;\n -- Get the row data type from the cursor {{cur1}}\n \n\n\nURL: https://mariadb.com/kb/en/declare-variable/', '', 'https://mariadb.com/kb/en/declare-variable/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(308, 'FOR', 23, 'FOR loops were introduced in MariaDB 10.3.\n \nSyntax\n------ \nInteger range FOR loop:\n \n[begin_label:]\nFOR var_name IN [ REVERSE ] lower_bound .. upper_bound\nDO statement_list\nEND FOR [ end_label ]\n \nExplicit cursor FOR loop\n \n[begin_label:]\nFOR record_name IN cursor_name [ (\ncursor_actual_parameter_list)]\nDO statement_list\nEND FOR [ end_label ]\n \nExplicit cursor FOR loop (Oracle mode)\n \n[begin_label:]\nFOR record_name IN cursor_name [ (\ncursor_actual_parameter_list)]\nLOOP\n statement_list\nEND LOOP [ end_label ]\n \nImplicit cursor FOR loop\n \n[begin_label:]\nFOR record_name IN ( select_statement )\nDO statement_list\nEND FOR [ end_label ]\n \nDescription\n----------- \nFOR loops allow code to be executed a fixed number of times.\n \nIn an integer range FOR loop, MariaDB will compare the lower\nbound and upper bound values, and assign the lower bound\nvalue to a counter. If REVERSE is not specified, and the\nupper bound value is greater than or equal to the counter,\nthe counter will be incremented and the statement will\ncontinue, after which the loop is entered again. If the\nupper bound value is greater than the counter, the loop will\nbe exited.\n \nIf REVERSE is specified, the counter is decremented, and the\nupper bound value needs to be less than or equal for the\nloop to continue.\n \nExamples\n-------- \nIntger range FOR loop:\n \nCREATE TABLE t1 (a INT);\n \nDELIMITER //\n \nFOR i IN 1..3\nDO\n INSERT INTO t1 VALUES (i);\nEND FOR;\n \n//\n \nDELIMITER ;\n \nSELECT * FROM t1;\n \n+------+\n| a |\n+------+\n| 1 |\n| 2 |\n| 3 |\n+------+\n \nREVERSE integer range FOR loop:\n \nCREATE OR REPLACE TABLE t1 (a INT);\n \nDELIMITER //\nFOR i IN REVERSE 12..4\n DO\n INSERT INTO t1 VALUES (i);\nEND FOR;\n \n//\nQuery OK, 9 rows affected (0.422 sec)\n \nDELIMITER ;\n \nSELECT * FROM t1;\n \n+------+\n| a |\n+------+\n| 12 |\n| 11 |\n| 10 |\n| 9 |\n| 8 |\n| 7 |\n| 6 |\n| 5 |\n| 4 |\n+------+\n \nExplicit cursor in Oracle mode:\n \nSET sql_mode=ORACLE;\n \nCREATE OR REPLACE TABLE t1 (a INT, b VARCHAR(32));\n \nINSERT INTO t1 VALUES (10,\'b0\');\nINSERT INTO t1 VALUES (11,\'b1\');\nINSERT INTO t1 VALUES (12,\'b2\');\n \nDELIMITER //\n \nCREATE OR REPLACE PROCEDURE p1(pa INT) AS \n CURSOR cur(va INT) IS\n SELECT a, b FROM t1 WHERE a=va;\n \nBEGIN\n FOR rec IN cur(pa)\n LOOP\n SELECT rec.a, rec.b;\n \n END LOOP;\n \nEND;\n \n//\n \nDELIMITER ;\n \nCALL p1(10);\n+-------+-------+\n| rec.a | rec.b |\n+-------+-------+\n| 10 | b0 |\n+-------+-------+\n \nCALL p1(11);\n+-------+-------+\n| rec.a | rec.b |\n+-------+-------+\n| 11 | b1 |\n+-------+-------+\n \nCALL p1(12);\n+-------+-------+\n| rec.a | rec.b |\n+-------+-------+\n| 12 | b2 |\n+-------+-------+\n \nCALL p1(13);\nQuery OK, 0 rows affected (0.000 sec)\n \n\n\nURL: https://mariadb.com/kb/en/for/', '', 'https://mariadb.com/kb/en/for/'),
(312, 'Labels', 23, 'Syntax\n------ \nlabel: \n[label]\n \nLabels are MariaDB identifiers which can be used to identify\na BEGIN ... END construct or a loop. They have a maximum\nlength of 16 characters and can be quoted with backticks\n(i.e.., `).\n \nLabels have a start part and an end part. The start part\nmust precede the portion of code it refers to, must be\nfollowed by a colon (:) and can be on the same or different\nline. The end part is optional and adds nothing, but can\nmake the code more readable. If used, the end part must\nprecede the construct\'s delimiter (;). Constructs\nidentified by a label can be nested. Each construct can be\nidentified by only one label.\n \nLabels need not be unique in the stored program they belong\nto. However, a label for an inner loop cannot be identical\nto a label for an outer loop. In this case, the following\nerror would be produced:\n \nERROR 1309 (42000): Redefining label \n \nLEAVE and ITERATE statements can be used to exit or repeat a\nportion of code identified by a label. They must be in the\nsame Stored Routine, Trigger or Event which contains the\ntarget label.\n \nBelow is an example using a simple label that is used to\nexit a LOOP:\n \nCREATE PROCEDURE `test_sp`()\nBEGIN\n `my_label`:\n LOOP\n SELECT \'looping\';\n \n LEAVE `my_label`;\n \n END LOOP;\n \n SELECT \'out of loop\';\n \nEND;\n \nThe following label is used to exit a procedure, and has an\nend part:\n \nCREATE PROCEDURE `test_sp`()\n`my_label`:\nBEGIN\n IF @var = 1 THEN\n LEAVE `my_label`;\n \n END IF;\n \n DO something();\nEND `my_label`;\n \n\n \n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/labels/', '', 'https://mariadb.com/kb/en/labels/'),
(313, 'LEAVE', 23, 'Syntax\n------ \nLEAVE label\n \nThis statement is used to exit the flow control construct\nthat has the\ngiven label. The label must be in the same stored program,\nnot in a caller procedure. LEAVE can be used within BEGIN\n... END or loop constructs\n(LOOP, REPEAT, WHILE). In Stored Procedures, Triggers and\nEvents, LEAVE can refer to the outmost BEGIN ... END\nconstruct; in that case, the program exits the procedure. In\nStored Functions, RETURN can be used instead.\n \nNote that LEAVE cannot be used to exit a DECLARE HANDLER\nblock.\n \nIf you try to LEAVE a non-existing label, or if you try to\nLEAVE a HANDLER block, the following error will be produced:\n \nERROR 1308 (42000): LEAVE with no matching label: \n \nThe following example uses LEAVE to exit the procedure if a\ncondition is true:\n \nCREATE PROCEDURE proc(IN p TINYINT)\nCONTAINS SQL\n`whole_proc`:\nBEGIN\n SELECT 1;\n \n IF p \n\nURL: https://mariadb.com/kb/en/leave/', '', 'https://mariadb.com/kb/en/leave/'),
(617, 'NOT REGEXP', 37, 'Syntax\n------ \nexpr NOT REGEXP pat, expr NOT RLIKE pat\n \nDescription\n----------- \nThis is the same as NOT (expr REGEXP pat).\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/not-regexp/', '', 'https://mariadb.com/kb/en/not-regexp/'),
(618, 'OCTET_LENGTH', 37, 'Syntax\n------ \nOCTET_LENGTH(str)\n \nDescription\n----------- \nOCTET_LENGTH() is normally a synonym for LENGTH(). When\nrunning Oracle mode from MariaDB 10.3, they are not\nsynonyms, but OCTET_LENGTH() behaves as LENGTH() would when\nnot in Oracle mode.\n \n\n\nURL: https://mariadb.com/kb/en/octet_length/', '', 'https://mariadb.com/kb/en/octet_length/'),
(619, 'ORD', 37, 'Syntax\n------ \nORD(str)\n \nDescription\n----------- \nIf the leftmost character of the string str is a multi-byte\ncharacter,\nreturns the code for that character, calculated from the\nnumeric\nvalues of its constituent bytes using this formula:\n \n (1st byte code)\n+ (2nd byte code x 256)\n+ (3rd byte code x 256 x 256) ...\n \nIf the leftmost character is not a multi-byte character,\nORD() returns\nthe same value as the ASCII() function.\n \nExamples\n-------- \nSELECT ORD(\'2\');\n+----------+\n| ORD(\'2\') |\n+----------+\n| 50 |\n+----------+\n \n\n\nURL: https://mariadb.com/kb/en/ord/', '', 'https://mariadb.com/kb/en/ord/'),
(620, 'POSITION', 37, 'Syntax\n------ \nPOSITION(substr IN str)\n \nDescription\n----------- \nPOSITION(substr IN str) is a synonym for LOCATE(substr,str).\n \nIt\'s part of ODBC 3.0.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/position/', '', 'https://mariadb.com/kb/en/position/'),
(621, 'QUOTE', 37, 'Syntax\n------ \nQUOTE(str)\n \nDescription\n----------- \nQuotes a string to produce a result that can be used as a\nproperly escaped data\nvalue in an SQL statement. The string is returned enclosed\nby single quotes and\nwith each instance of single quote (\"\'\"), backslash\n(\"\\\"),\nASCII NUL, and Control-Z preceded by a backslash. If the\nargument\nis NULL, the return value is the word \"NULL\" without\nenclosing single\nquotes.\n \nExamples\n-------- \nSELECT QUOTE(\"Don\'t!\");\n+-----------------+\n| QUOTE(\"Don\'t!\") |\n+-----------------+\n| \'Don\\\'t!\' |\n+-----------------+\n \nSELECT QUOTE(NULL); \n+-------------+\n| QUOTE(NULL) |\n+-------------+\n| NULL |\n+-------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/quote/', '', 'https://mariadb.com/kb/en/quote/'),
(316, 'REPEAT LOOP', 23, 'Syntax\n------ \n[begin_label:] REPEAT\n statement_list\nUNTIL search_condition\nEND REPEAT [end_label]\n \nThe statement list within a REPEAT statement is repeated\nuntil the\nsearch_condition is true. Thus, a REPEAT always enters the\nloop at\nleast once. statement_list consists of one or more\nstatements, each\nterminated by a semicolon (i.e., ;) statement delimiter.\n \nA REPEAT statement can be labeled. end_label cannot be given\nunless\nbegin_label also is present. If both are present, they must\nbe the\nsame.\n \nSee Delimiters in the mysql client for more on client\ndelimiter usage.\n \nDELIMITER //\n \nCREATE PROCEDURE dorepeat(p1 INT)\n BEGIN\n SET @x = 0;\n \n REPEAT SET @x = @x + 1;\n UNTIL @x > p1 END REPEAT;\n \n END\n//\n \nCALL dorepeat(1000)//\n \nSELECT @x//\n+------+\n| @x |\n+------+\n| 1001 |\n+------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/repeat-loop/', '', 'https://mariadb.com/kb/en/repeat-loop/'),
(317, 'RESIGNAL', 23, 'Syntax\n------ \nRESIGNAL [error_condition]\n [SET error_property\n [, error_property] ...]\n \nerror_condition:\n SQLSTATE [VALUE] \'sqlstate_value\'\n | condition_name\n \nerror_property:\n error_property_name = \n \nerror_property_name:\n CLASS_ORIGIN\n | SUBCLASS_ORIGIN\n | MESSAGE_TEXT\n | MYSQL_ERRNO\n | CONSTRAINT_CATALOG\n | CONSTRAINT_SCHEMA\n | CONSTRAINT_NAME\n | CATALOG_NAME\n | SCHEMA_NAME\n | TABLE_NAME\n | COLUMN_NAME\n | CURSOR_NAME\n \nDescription\n----------- \nThe syntax of RESIGNAL and its semantics are very similar to\nSIGNAL. This statement can only be used within an error\nHANDLER. It produces an error, like SIGNAL. RESIGNAL clauses\nare the same as SIGNAL, except that they all are optional,\neven SQLSTATE. All the properties which are not specified in\nRESIGNAL, will be identical to the properties of the error\nthat was received by the error HANDLER. For a description of\nthe clauses, see diagnostics area.\n \nNote that RESIGNAL does not empty the diagnostics area: it\njust appends another error condition.\n \nRESIGNAL, without any clauses, produces an error which is\nidentical to the error that was received by HANDLER.\n \nIf used out of a HANDLER construct, RESIGNAL produces the\nfollowing error:\n \nERROR 1645 (0K000): RESIGNAL when handler not active\n \nIn MariaDB 5.5, if a HANDLER contained a CALL to another\nprocedure, that procedure could use RESIGNAL. Since MariaDB\n10.0, trying to do this raises the above error.\n \nFor a list of SQLSTATE values and MariaDB error codes, see\nMariaDB Error Codes.\n \nThe following procedure tries to query two tables which\ndon\'t exist, producing a 1146 error in both cases. Those\nerrors will trigger the HANDLER. The first time the error\nwill be ignored and the client will not receive it, but the\nsecond time, the error is re-signaled, so the client will\nreceive it.\n \nCREATE PROCEDURE test_error( )\nBEGIN\n DECLARE CONTINUE HANDLER\n FOR 1146\n BEGIN\n IF @hide_errors IS FALSE THEN\n RESIGNAL;\n \n END IF;\n \n END;\n \n SET @hide_errors = TRUE;\n \n SELECT \'Next error will be ignored\' AS msg;\n \n SELECT `c` FROM `temptab_one`;\n \n SELECT \'Next error won\'\'t be ignored\' AS msg;\n \n SET @hide_errors = FALSE;\n \n SELECT `c` FROM `temptab_two`;\n \nEND;\n \nCALL test_error( );\n \n+----------------------------+\n| msg |\n+----------------------------+\n| Next error will be ignored |\n+----------------------------+\n \n+-----------------------------+\n| msg |\n+-----------------------------+\n| Next error won\'t be ignored |\n+-----------------------------+\n \nERROR 1146 (42S02): Table \'test.temptab_two\' doesn\'t\nexist\n \nThe following procedure re-signals an error, modifying only\nthe error message to clarify the cause of the problem.\n \nCREATE PROCEDURE test_error()\nBEGIN\n DECLARE CONTINUE HANDLER\n FOR 1146\n BEGIN\n RESIGNAL SET\n MESSAGE_TEXT = \'`temptab` does not exist\';\n \n END;\n \n SELECT `c` FROM `temptab`;\n \nEND;\n \nCALL test_error( );\nERROR 1146 (42S02): `temptab` does not exist\n \nAs explained above, this works on MariaDB 5.5, but produces\na 1645 error since 10.0.\n \nCREATE PROCEDURE handle_error()\nBEGIN\n RESIGNAL;\n \nEND;\n \nCREATE PROCEDURE p()\nBEGIN\n DECLARE EXIT HANDLER FOR SQLEXCEPTION CALL p();\n SIGNAL SQLSTATE \'45000\';\n \nEND;\n \n\n\nURL: https://mariadb.com/kb/en/resignal/', '', 'https://mariadb.com/kb/en/resignal/'),
(319, 'SELECT INTO', 23, 'Syntax\n------ \nSELECT col_name [, col_name] ...\n INTO var_name [, var_name] ...\n table_expr\n \nDescription\n----------- \nSELECT ... INTO enables selected columns to be stored\ndirectly\ninto variables. No resultset is produced. The query should\nreturn a single row. If the query\nreturns no rows, a warning with error code 1329 occurs (No\ndata), and\nthe variable values remain unchanged. If the query returns\nmultiple\nrows, error 1172 occurs (Result consisted of more than one\nrow). If it\nis possible that the statement may retrieve multiple rows,\nyou can use\nLIMIT 1 to limit the result set to a single row.\n \nThe INTO clause can also be specified at the end of the\nstatement.\n \nIn the context of such statements that occur as part of\nevents\nexecuted by the Event Scheduler, diagnostics messages (not\nonly\nerrors, but also warnings) are written to the error log,\nand, on\nWindows, to the application event log.\n \nThis statement can be used with both local variables and\nuser-defined variables.\n \nFor the complete syntax, see SELECT.\n \nAnother way to set a variable\'s value is the SET statement.\n \nSELECT ... INTO results are not stored in the query cache\neven if SQL_CACHE is specified.\n \nExamples\n-------- \nSELECT id, data INTO @x,@y \nFROM test.t1 LIMIT 1;\n \n\n\nURL: https://mariadb.com/kb/en/selectinto/', '', 'https://mariadb.com/kb/en/selectinto/'),
(625, 'REPEAT Function', 37, 'Syntax\n------ \nREPEAT(str,count)\n \nDescription\n----------- \nReturns a string consisting of the string str repeated count\ntimes. If\ncount is less than 1, returns an empty string. Returns NULL\nif str or\ncount are NULL.\n \nExamples\n-------- \nSELECT QUOTE(REPEAT(\'MariaDB \',4));\n+------------------------------------+\n| QUOTE(REPEAT(\'MariaDB \',4)) |\n+------------------------------------+\n| \'MariaDB MariaDB MariaDB MariaDB \' |\n+------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/repeat-function/', '', 'https://mariadb.com/kb/en/repeat-function/'),
(626, 'REPLACE Function', 37, 'Syntax\n------ \nREPLACE(str,from_str,to_str)\n \nDescription\n----------- \nReturns the string str with all occurrences of the string\nfrom_str\nreplaced by the string to_str. REPLACE() performs a\ncase-sensitive\nmatch when searching for from_str.\n \nExamples\n-------- \nSELECT REPLACE(\'www.mariadb.org\', \'w\', \'Ww\');\n+---------------------------------------+\n| REPLACE(\'www.mariadb.org\', \'w\', \'Ww\') |\n+---------------------------------------+\n| WwWwWw.mariadb.org |\n+---------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/replace-function/', '', 'https://mariadb.com/kb/en/replace-function/'),
(627, 'REVERSE', 37, 'Syntax\n------ \nREVERSE(str)\n \nDescription\n----------- \nReturns the string str with the order of the characters\nreversed.\n \nExamples\n-------- \nSELECT REVERSE(\'desserts\');\n+---------------------+\n| REVERSE(\'desserts\') |\n+---------------------+\n| stressed |\n+---------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/reverse/', '', 'https://mariadb.com/kb/en/reverse/'),
(628, 'RIGHT', 37, 'Syntax\n------ \nRIGHT(str,len)\n \nDescription\n----------- \nReturns the rightmost len characters from the string str, or\nNULL if\nany argument is NULL.\n \nExamples\n-------- \nSELECT RIGHT(\'MariaDB\', 2);\n+---------------------+\n| RIGHT(\'MariaDB\', 2) |\n+---------------------+\n| DB |\n+---------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/right/', '', 'https://mariadb.com/kb/en/right/'),
(320, 'SIGNAL', 23, 'Syntax\n------ \nSIGNAL error_condition\n [SET error_property\n [, error_property] ...]\n \nerror_condition:\n SQLSTATE [VALUE] \'sqlstate_value\'\n | condition_name\n \nerror_property:\n error_property_name = \n \nerror_property_name:\n CLASS_ORIGIN\n | SUBCLASS_ORIGIN\n | MESSAGE_TEXT\n | MYSQL_ERRNO\n | CONSTRAINT_CATALOG\n | CONSTRAINT_SCHEMA\n | CONSTRAINT_NAME\n | CATALOG_NAME\n | SCHEMA_NAME\n | TABLE_NAME\n | COLUMN_NAME\n | CURSOR_NAME\n \nSIGNAL empties the diagnostics area and produces a custom\nerror. This statement can be used anywhere, but is generally\nuseful when used inside a stored program. When the error is\nproduced, it can be caught by a HANDLER. If not, the current\nstored program, or the current statement, will terminate\nwith the specified error.\n \nSometimes an error HANDLER just needs to SIGNAL the same\nerror it received, optionally with some changes. Usually the\nRESIGNAL statement is the most convenient way to do this.\n \nerror_condition can be an SQLSTATE value or a named error\ncondition defined via DECLARE CONDITION. SQLSTATE must be a\nconstant string consisting of five characters. These codes\nare standard to ODBC and ANSI SQL. For customized errors,\nthe recommended SQLSTATE is \'45000\'. For a list of\nSQLSTATE values used by MariaDB, see the MariaDB Error Codes\npage. The SQLSTATE can be read via the API method\nmysql_sqlstate( ). \n \nTo specify error properties user-defined variables and local\nvariables can be used, as well as character set conversions\n(but you can\'t set a collation).\n \nThe error properties, their type and their default values\nare explained in the diagnostics area page.\n \nErrors\n \nIf the SQLSTATE is not valid, the following error like this\nwill be produced:\n \nERROR 1407 (42000): Bad SQLSTATE: \'123456\'\n \nIf a property is specified more than once, an error like\nthis will be produced:\n \nERROR 1641 (42000): Duplicate condition information item\n\'MESSAGE_TEXT\'\n \nIf you specify a condition name which is not declared, an\nerror like this will be produced:\n \nERROR 1319 (42000): Undefined CONDITION: cond_name\n \nIf MYSQL_ERRNO is out of range, you will get an error like\nthis:\n \nERROR 1231 (42000): Variable \'MYSQL_ERRNO\' can\'t be set\nto the value of \'0\'\n \nExamples\n-------- \nHere\'s what happens if SIGNAL is used in the client to\ngenerate errors:\n \nSIGNAL SQLSTATE \'01000\';\n \nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n \nSHOW WARNINGS;\n \n+---------+------+------------------------------------------+\n| Level | Code | Message |\n+---------+------+------------------------------------------+\n| Warning | 1642 | Unhandled user-defined warning condition\n|\n+---------+------+------------------------------------------+\n1 row in set (0.06 sec)\n \nSIGNAL SQLSTATE \'02000\';\n \nERROR 1643 (02000): Unhandled user-defined not found\ncondition\n \nHow to specify MYSQL_ERRNO and MESSAGE_TEXT properties:\n \nSIGNAL SQLSTATE \'45000\' SET MYSQL_ERRNO=30001,\nMESSAGE_TEXT=\'H\nello, world!\';\n \nERROR 30001 (45000): Hello, world!\n \nThe following code shows how to use user variables, local\nvariables and character set conversion with SIGNAL:\n \nCREATE PROCEDURE test_error(x INT)\nBEGIN\n DECLARE errno SMALLINT UNSIGNED DEFAULT 31001;\n \n SET @errmsg = \'Hello, world!\';\n \n IF x = 1 THEN\n SIGNAL SQLSTATE \'45000\' SET\n MYSQL_ERRNO = errno,\n MESSAGE_TEXT = @errmsg;\n \n ELSE\n SIGNAL SQLSTATE \'45000\' SET\n MYSQL_ERRNO = errno,\n MESSAGE_TEXT = _utf8\'Hello, world!\';\n \n END IF;\n \nEND;\n \nHow to use named error conditions:\n \nCREATE PROCEDURE test_error(n INT)\nBEGIN\n DECLARE `too_big` CONDITION FOR SQLSTATE \'45000\';\n \n IF n > 10 THEN\n SIGNAL `too_big`;\n \n END IF;\n \nEND;\n \nIn this example, we\'ll define a HANDLER for an error code.\nWhen the error occurs, we SIGNAL a more informative error\nwhich makes sense for our procedure:\n \nCREATE PROCEDURE test_error()\nBEGIN\n DECLARE EXIT HANDLER\n FOR 1146\n BEGIN\n SIGNAL SQLSTATE \'45000\' SET\n MESSAGE_TEXT = \'Temporary tables not found; did you call\ninit() procedure?\';\n \n END;\n \n -- this will produce a 1146 error\n SELECT `c` FROM `temptab`;\n \nEND;\n \n\n\nURL: https://mariadb.com/kb/en/signal/', '', 'https://mariadb.com/kb/en/signal/'),
(325, 'LINESTRING', 24, 'Syntax\n------ \nLineString(pt1,pt2,...)\n \nDescription\n----------- \nConstructs a WKB LineString value from a number of WKB Point\narguments. If any argument is not a WKB Point, the return\nvalue is\nNULL. If the number of Point arguments is less than two, the\nreturn value is NULL.\n \nExamples\n-------- \nSET @ls = \'LineString(1 1,2 2,3 3)\';\n \nSELECT AsText(EndPoint(GeomFromText(@ls)));\n+-------------------------------------+\n| AsText(EndPoint(GeomFromText(@ls))) |\n+-------------------------------------+\n| POINT(3 3) |\n+-------------------------------------+\n \nCREATE TABLE gis_line (g LINESTRING);\nINSERT INTO gis_line VALUES\n (LineFromText(\'LINESTRING(0 0,0 10,10 0)\')),\n (LineStringFromText(\'LINESTRING(10 10,20 10,20 20,10 20,10\n10)\')),\n (LineStringFromWKB(AsWKB(LineString(Point(10, 10),\nPoint(40, 10)))));\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/linestring/', '', 'https://mariadb.com/kb/en/linestring/'),
(632, 'SOUNDS LIKE', 37, 'Syntax\n------ \nexpr1 SOUNDS LIKE expr2\n \nDescription\n----------- \nThis is the same as SOUNDEX(expr1) = SOUNDEX(expr2).\n \nExample\n \nSELECT givenname, surname FROM users WHERE givenname SOUNDS\nLIKE \"robert\";\n \n+-----------+---------+\n| givenname | surname |\n+-----------+---------+\n| Roberto | Castro |\n+-----------+---------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/sounds-like/', '', 'https://mariadb.com/kb/en/sounds-like/'),
(633, 'SPACE', 37, 'Syntax\n------ \nSPACE(N)\n \nDescription\n----------- \nReturns a string consisting of N space characters. If N is\nNULL, returns NULL.\n \nExamples\n-------- \nSELECT QUOTE(SPACE(6));\n+-----------------+\n| QUOTE(SPACE(6)) |\n+-----------------+\n| \' \' |\n+-----------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/space/', '', 'https://mariadb.com/kb/en/space/'),
(634, 'STRCMP', 37, 'Syntax\n------ \nSTRCMP(expr1,expr2)\n \nDescription\n----------- \nSTRCMP() returns 0 if the strings are the same, -1 if the\nfirst\nargument is smaller than the second according to the current\nsort order,\nand 1 otherwise.\n \nExamples\n-------- \nSELECT STRCMP(\'text\', \'text2\');\n+-------------------------+\n| STRCMP(\'text\', \'text2\') |\n+-------------------------+\n| -1 |\n+-------------------------+\n \nSELECT STRCMP(\'text2\', \'text\');\n+-------------------------+\n| STRCMP(\'text2\', \'text\') |\n+-------------------------+\n| 1 |\n+-------------------------+\n \nSELECT STRCMP(\'text\', \'text\');\n+------------------------+\n| STRCMP(\'text\', \'text\') |\n+------------------------+\n| 0 |\n+------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/strcmp/', '', 'https://mariadb.com/kb/en/strcmp/'),
(635, 'SUBSTR', 37, 'Description\n----------- \nSUBSTR() is a synonym for SUBSTRING().\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/substr/', '', 'https://mariadb.com/kb/en/substr/'),
(640, 'UCASE', 37, 'Syntax\n------ \nUCASE(str)\n \nDescription\n----------- \nUCASE() is a synonym for UPPER().\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/ucase/', '', 'https://mariadb.com/kb/en/ucase/'),
(643, 'UPPER', 37, 'Syntax\n------ \nUPPER(str)\n \nDescription\n----------- \nReturns the string str with all characters changed to\nuppercase\naccording to the current character set mapping. The default\nis latin1\n(cp1252 West European).\n \nSELECT UPPER(surname), givenname FROM users ORDER BY\nsurname;\n \n+----------------+------------+\n| UPPER(surname) | givenname |\n+----------------+------------+\n| ABEL | Jacinto |\n| CASTRO | Robert |\n| COSTA | Phestos |\n| MOSCHELLA | Hippolytos |\n+----------------+------------+\n \nUPPER() is ineffective when applied to binary strings\n(BINARY,\nVARBINARY, BLOB). The description of \nLOWER() shows how to\nperform lettercase conversion of binary strings.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/upper/', '', 'https://mariadb.com/kb/en/upper/'),
(331, 'POLYGON', 24, 'Syntax\n------ \nPolygon(ls1,ls2,...)\n \nDescription\n----------- \nConstructs a WKB Polygon value from a number of WKB\nLineString\narguments. If any argument does not represent the WKB of a\nLinearRing (that is,\nnot a closed and simple LineString) the return value is\nNULL.\n \nNote that according to the OpenGIS standard, a POLYGON\nshould have exactly one ExteriorRing and all other rings\nshould lie within that ExteriorRing and thus be the\nInteriorRings. Practically, however, some systems, including\nMariaDB\'s, permit polygons to have several\n\'ExteriorRings\'. In the case of there being multiple,\nnon-overlapping exterior rings ST_NUMINTERIORRINGS() will\nreturn 1.\n \nExamples\n-------- \nSET @g = ST_GEOMFROMTEXT(\'POLYGON((1 1,1 5,4 9,6 9,9 3,7\n2,1 1))\');\n \nCREATE TABLE gis_polygon (g POLYGON);\nINSERT INTO gis_polygon VALUES\n (PolygonFromText(\'POLYGON((10 10,20 10,20 20,10 20,10\n10))\')),\n (PolyFromText(\'POLYGON((0 0,50 0,50 50,0 50,0 0), (10\n10,20 10,20 20,10 20,10 10))\')),\n (PolyFromWKB(AsWKB(Polygon(LineString(Point(0, 0),\nPoint(30, 0), Point(30, 30), Point(0, 0))))));\n \nNon-overlapping \'polygon\':\n \nSELECT ST_NumInteriorRings(ST_PolyFromText(\'POLYGON((0 0,10\n0,10 10,0 10,0 0),\n (-1 -1,-5 -1,-5 -5,-1 -5,-1 -1))\')) AS NumInteriorRings;\n \n+------------------+\n| NumInteriorRings |\n+------------------+\n| 1 |\n+------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/polygon/', '', 'https://mariadb.com/kb/en/polygon/'),
(332, 'ST_BUFFER', 24, 'Syntax\n------ \nST_BUFFER(g1,r)\nBUFFER(g1,r)\n \nDescription\n----------- \nReturns a geometry that represents all points whose distance\nfrom geometry g1 is less than or equal to distance, or\nradius, r.\n \nUses for this function could include creating for example a\nnew geometry representing a buffer zone around an island.\n \nBUFFER() is a synonym.\n \nExamples\n-------- \nDetermining whether a point is within a buffer zone:\n \nSET @g1 = ST_GEOMFROMTEXT(\'POLYGON((10 10, 10 20, 20 20, 20\n10, 10 10))\');\n \nSET @g2 = ST_GEOMFROMTEXT(\'POINT(8 8)\');\n \nSELECT ST_WITHIN(@g2,ST_BUFFER(@g1,5));\n+---------------------------------+\n| ST_WITHIN(@g2,ST_BUFFER(@g1,5)) |\n+---------------------------------+\n| 1 |\n+---------------------------------+\n \nSELECT ST_WITHIN(@g2,ST_BUFFER(@g1,1));\n+---------------------------------+\n| ST_WITHIN(@g2,ST_BUFFER(@g1,1)) |\n+---------------------------------+\n| 0 |\n+---------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_buffer/', '', 'https://mariadb.com/kb/en/st_buffer/'),
(333, 'ST_CONVEXHULL', 24, 'ST_ConvexHull() was introduced in MariaDB 10.1.2\n \nSyntax\n------ \nST_ConvexHull(g)\nConvexHull(g)\n \nDescription\n----------- \nGiven a geometry, returns a geometry that is the minimum\nconvex geometry enclosing all geometries within the set.\nReturns NULL if the geometry value is NULL or an empty\nvalue.\n \nST_ConvexHull() and ConvexHull() are synonyms.\n \nExamples\n-------- \nThe ConvexHull of a single point is simply the single point:\n \nSET @g = ST_GEOMFROMTEXT(\'Point(0 0)\');\n \nSELECT ST_ASTEXT(ST_CONVEXHULL(@g));\n+------------------------------+\n| ST_ASTEXT(ST_CONVEXHULL(@g)) |\n+------------------------------+\n| POINT(0 0) |\n+------------------------------+\n \nSET @g = ST_GEOMFROMTEXT(\'MultiPoint(0 0, 1 2, 2 3)\');\n \nSELECT ST_ASTEXT(ST_CONVEXHULL(@g));\n+------------------------------+\n| ST_ASTEXT(ST_CONVEXHULL(@g)) |\n+------------------------------+\n| POLYGON((0 0,1 2,2 3,0 0)) |\n+------------------------------+\n \nSET @g = ST_GEOMFROMTEXT(\'MultiPoint( 1 1, 2 2, 5 3, 7 2, 9\n3, 8 4, 6 6, 6 9, 4 9, 1 5 )\');\n \nSELECT ST_ASTEXT(ST_CONVEXHULL(@g));\n+----------------------------------------+\n| ST_ASTEXT(ST_CONVEXHULL(@g)) |\n+----------------------------------------+\n| POLYGON((1 1,1 5,4 9,6 9,9 3,7 2,1 1)) |\n+----------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_convexhull/', '', 'https://mariadb.com/kb/en/st_convexhull/'),
(336, 'ST_SYMDIFFERENCE', 24, 'Syntax\n------ \nST_SYMDIFFERENCE(g1,g2)\n \nDescription\n----------- \nReturns a geometry that represents the portions of geometry\ng1 and geometry g2 that don\'t intersect.\n \nExamples\n-------- \nSET @g1 = ST_GEOMFROMTEXT(\'LINESTRING(10 20, 10 40)\');\n \nSET @g2 = ST_GEOMFROMTEXT(\'LINESTRING(10 15, 10 25)\');\n \nSELECT ASTEXT(ST_SYMDIFFERENCE(@g1,@g2));\n+----------------------------------------------+\n| ASTEXT(ST_SYMDIFFERENCE(@g1,@g2)) |\n+----------------------------------------------+\n| MULTILINESTRING((10 15,10 20),(10 25,10 40)) |\n+----------------------------------------------+\n \nSET @g2 = ST_GeomFromText(\'LINESTRING(10 20, 10 41)\');\n \nSELECT ASTEXT(ST_SYMDIFFERENCE(@g1,@g2));\n+-----------------------------------+\n| ASTEXT(ST_SYMDIFFERENCE(@g1,@g2)) |\n+-----------------------------------+\n| LINESTRING(10 40,10 41) |\n+-----------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_symdifference/', '', 'https://mariadb.com/kb/en/st_symdifference/'),
(337, 'ST_UNION', 24, 'Syntax\n------ \nST_UNION(g1,g2)\n \nDescription\n----------- \nReturns a geometry that is the union of the geometry g1 and\ngeometry g2.\n \nExamples\n-------- \nSET @g1 = GEOMFROMTEXT(\'POINT (0 2)\');\n \nSET @g2 = GEOMFROMTEXT(\'POINT (2 0)\');\n \nSELECT ASTEXT(ST_UNION(@g1,@g2));\n+---------------------------+\n| ASTEXT(ST_UNION(@g1,@g2)) |\n+---------------------------+\n| MULTIPOINT(2 0,0 2) |\n+---------------------------+\n \nSET @g1 = GEOMFROMTEXT(\'POLYGON((0 0,0 3,3 3,3 0,0 0))\');\n \nSET @g2 = GEOMFROMTEXT(\'POLYGON((2 2,4 2,4 4,2 4,2 2))\');\n \nSELECT ASTEXT(ST_UNION(@g1,@g2));\n+------------------------------------------------+\n| ASTEXT(ST_UNION(@g1,@g2)) |\n+------------------------------------------------+\n| POLYGON((0 0,0 3,2 3,2 4,4 4,4 2,3 2,3 0,0 0)) |\n+------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_union/', '', 'https://mariadb.com/kb/en/st_union/'),
(648, 'ALTER LOGFILE GROUP', 39, 'Syntax\n------ \nALTER LOGFILE GROUP logfile_group\n ADD UNDOFILE \'file_name\'\n [INITIAL_SIZE [=] size]\n [WAIT]\n ENGINE [=] engine_name\n \nThe ALTER LOGFILE GROUP statement is not supported by\nMariaDB. It was originally inherited from MySQL NDB Cluster.\nSee MDEV-19295 for more information.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/alter-logfile-group/', '', 'https://mariadb.com/kb/en/alter-logfile-group/'),
(651, 'ALTER SERVER', 39, 'Syntax\n------ \nALTER SERVER server_name\n OPTIONS (option [, option] ...)\n \nDescription\n----------- \nAlters the server information for server_name, adjusting the\nspecified\noptions as per the CREATE SERVER command. The corresponding\nfields in the mysql.servers table are updated accordingly.\nThis statement requires the SUPER privilege.\n \nExamples\n-------- \nALTER SERVER s OPTIONS (USER \'sally\');\n \n\n\nURL: https://mariadb.com/kb/en/alter-server/', '', 'https://mariadb.com/kb/en/alter-server/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(652, 'ALTER TABLE', 39, 'Syntax\n------ \nALTER [ONLINE] [IGNORE] TABLE tbl_name\n [WAIT n | NOWAIT]\n alter_specification [, alter_specification] ...\n \nalter_specification:\n table_option ...\n | ADD [COLUMN] [IF NOT EXISTS] col_name column_definition\n [FIRST | AFTER col_name ]\n | ADD [COLUMN] [IF NOT EXISTS] (col_name\ncolumn_definition,...)\n | ADD {INDEX|KEY} [IF NOT EXISTS] [index_name]\n [index_type] (index_col_name,...) [index_option] ...\n | ADD [CONSTRAINT [symbol]] PRIMARY KEY\n [index_type] (index_col_name,...) [index_option] ...\n | ADD [CONSTRAINT [symbol]]\n UNIQUE [INDEX|KEY] [index_name]\n [index_type] (index_col_name,...) [index_option] ...\n | ADD FULLTEXT [INDEX|KEY] [index_name]\n (index_col_name,...) [index_option] ...\n | ADD SPATIAL [INDEX|KEY] [index_name]\n (index_col_name,...) [index_option] ...\n | ADD [CONSTRAINT [symbol]]\n FOREIGN KEY [IF NOT EXISTS] [index_name]\n(index_col_name,...)\n reference_definition\n | ADD PERIOD FOR SYSTEM_TIME (start_column_name,\nend_column_name)\n | ALTER [COLUMN] col_name SET DEFAULT literal\n| (expression)\n | ALTER [COLUMN] col_name DROP DEFAULT\n | CHANGE [COLUMN] [IF EXISTS] old_col_name new_col_name\ncolumn_definition\n [FIRST|AFTER col_name]\n | MODIFY [COLUMN] [IF EXISTS] col_name column_definition\n [FIRST | AFTER col_name]\n | DROP [COLUMN] [IF EXISTS] col_name [RESTRICT|CASCADE]\n | DROP PRIMARY KEY\n | DROP {INDEX|KEY} [IF EXISTS] index_name\n | DROP FOREIGN KEY [IF EXISTS] fk_symbol\n | DROP CONSTRAINT [IF EXISTS] constraint_name\n | DISABLE KEYS\n | ENABLE KEYS\n | RENAME [TO] new_tbl_name\n | ORDER BY col_name [, col_name] ...\n | CONVERT TO CHARACTER SET charset_name [COLLATE\ncollation_name]\n | [DEFAULT] CHARACTER SET [=] charset_name\n | [DEFAULT] COLLATE [=] collation_name\n | DISCARD TABLESPACE\n | IMPORT TABLESPACE\n | ALGORITHM [=] {DEFAULT|INPLACE|COPY|NOCOPY|INSTANT}\n | LOCK [=] {DEFAULT|NONE|SHARED|EXCLUSIVE}\n | FORCE\n | partition_options\n | ADD PARTITION (partition_definition)\n | DROP PARTITION partition_names\n | COALESCE PARTITION number\n | REORGANIZE PARTITION [partition_names INTO\n(partition_definitions)]\n | ANALYZE PARTITION partition_names\n | CHECK PARTITION partition_names\n | OPTIMIZE PARTITION partition_names\n | REBUILD PARTITION partition_names\n | REPAIR PARTITION partition_names\n | EXCHANGE PARTITION partition_name WITH TABLE tbl_name\n | REMOVE PARTITIONING\n | ADD SYSTEM VERSIONING\n | DROP SYSTEM VERSIONING\n \nindex_col_name:\n col_name [(length)] [ASC | DESC]\n \nindex_type:\n USING {BTREE | HASH | RTREE}\n \nindex_option:\n KEY_BLOCK_SIZE [=] value\n | index_type\n | WITH PARSER parser_name\n | COMMENT \'string\'\n | CLUSTERING={YES| NO}\n \ntable_options:\n table_option [[,] table_option] ...\nIn MariaDB 10.0.2 and later, IF EXISTS and IF NOT EXISTS\nclauses have been added for the following:\n \nADD COLUMN [IF NOT EXISTS]\nADD INDEX [IF NOT EXISTS]\nADD FOREIGN KEY [IF NOT EXISTS]\nADD PARTITION [IF NOT EXISTS]\nCREATE INDEX [IF NOT EXISTS]\n \nDROP COLUMN [IF EXISTS]\nDROP INDEX [IF EXISTS]\nDROP FOREIGN KEY [IF EXISTS]\nDROP PARTITION [IF EXISTS]\nCHANGE COLUMN [IF EXISTS]\nMODIFY COLUMN [IF EXISTS]\nDROP INDEX [IF EXISTS]\nWhen IF EXISTS and IF NOT EXISTS are used in clauses,\nqueries will not\nreport errors when the condition is triggered for that\nclause. A warning with\nthe same message text will be issued and the ALTER will move\non to the next\nclause in the statement (or end if finished).\n \nThis was done in MDEV-318.\n \nDescription\n----------- \nALTER TABLE enables you to change the structure of an\nexisting table.\nFor example, you can add or delete columns, create or\ndestroy indexes,\nchange the type of existing columns, or rename columns or\nthe table\nitself. You can also change the comment for the table and\nthe storage engine of the\ntable.\n \nIf another connection is using the table, a metadata lock is\nactive, and this statement will wait until the lock is\nreleased. This is also true for non-transactional tables.\n \nWhen adding a UNIQUE index on a column (or a set of columns)\nwhich have duplicated values, an error will be produced and\nthe statement will be stopped. To suppress the error and\nforce the creation of UNIQUE indexes, discarding duplicates,\nthe IGNORE option can be specified. This can be useful if a\ncolumn (or a set of columns) should be UNIQUE but it\ncontains duplicate values; however, this technique provides\nno control on which rows are preserved and which are\ndeleted. Also, note that IGNORE is accepted but ignored in\nALTER TABLE ... EXCHANGE PARTITION statements.\n \nThis statement can also be used to rename a table. For\ndetails see RENAME TABLE.\n \nWhen an index is created, the storage engine may use a\nconfigurable buffer in the process. Incrementing the buffer\nspeeds up the index creation. Aria and MyISAM allocate a\nbuffer whose size is defined by aria_sort_buffer_size or\nmyisam_sort_buffer_size, also used for REPAIR TABLE.\nInnoDB/XtraDB allocates three buffers whose size is defined\nby innodb_sort_buffer_size.\n \nPrivileges\n \nExecuting the ALTER TABLE statement generally requires at\nleast the ALTER privilege for the table or the database..\n \nIf you are renaming a table, then it also requires the DROP,\nCREATE and INSERT privileges for the table or the database\nas well.\n \nOnline DDL\n \nIn MariaDB 10.0 and later, online DDL is supported with the\nALGORITHM and LOCK clauses.\n \nSee InnoDB Online DDL Overview for more information on\nonline DDL with InnoDB.\n \nALTER ONLINE TABLE\n \nALTER ONLINE TABLE has also worked for partitioned tables\nsince MariaDB 10.0.11.\n \nOnline ALTER TABLE is available by executing the following:\n \nALTER ONLINE TABLE ...;\n \nThis statement has the following semantics:\n \nIn MariaDB 10.0.12 and later, this statement is equivalent\nto the following:\n \nALTER TABLE ... LOCK=NONE;\n \nSee the LOCK alter specification for more information.\n \nIn MariaDB 10.0.11, this statement is equivalent to the\nfollowing:\n \nALTER TABLE ... ALGORITHM=INPLACE;\n \nSee the ALGORITHM alter specification for more information.\n \nMariaDB until 10.0.10\n \nIn MariaDB 10.0.10 and before, this statement ensures that\nthe ALTER TABLE statement does not make a copy of the table.\n \nWAIT/NOWAIT\n \nSet the lock wait timeout. See WAIT and NOWAIT.\n \nColumn Definitions\n \nSee CREATE TABLE: Column Definitions for information about\ncolumn definitions.\n \nIndex Definitions\n \nSee CREATE TABLE: Index Definitions for information about\nindex definitions.\n \nThe CREATE INDEX and DROP INDEX statements can also be used\nto add or remove an index.\n \nCharacter Sets and Collations\n \nCONVERT TO CHARACTER SET charset_name [COLLATE\ncollation_name]\n[DEFAULT] CHARACTER SET [=] charset_name\n[DEFAULT] COLLATE [=] collation_name\nSee Setting Character Sets and Collations for details on\nsetting the character sets and collations.\n \nAlter Specifications\n \nTable Options\n \nSee CREATE TABLE: Table Options for information about table\noptions.\n \nADD COLUMN\n \n... ADD COLUMN [IF NOT EXISTS] (col_name\ncolumn_definition,...)\nAdds a column to the table. The syntax is the same as in\nCREATE TABLE.\nIf you are using IF NOT_EXISTS the column will not be added\nif it was not there already. This is very useful when doing\nscripts to modify tables.\n \nThe FIRST and AFTER clauses affect the physical order of\ncolumns in the datafile. Use FIRST to add a column in the\nfirst (leftmost) position, or AFTER followed by a column\nname to add the new column in any other position. Note that,\nnowadays, the physical position of a column is usually\nirrelevant.\n \nSee also Instant ADD COLUMN for InnoDB.\n \nDROP COLUMN\n \n... DROP COLUMN [IF EXISTS] col_name [CASCADE|RESTRICT]\nDrops the column from the table.\nIf you are using IF EXISTS you will not get an error if the\ncolumn didn\'t exist.\nIf the column is part of any index, the column will be\ndropped from them, except if you add a new column with\nidentical name at the same time. The index will be dropped\nif all columns from the index were dropped.\nIf the column was used in a view or trigger, you will get an\nerror next time the view or trigger is accessed.\n \nDropping a column that is part of a multi-column UNIQUE\nconstraint is not permitted. For example:\n \nCREATE TABLE a (\n a int,\n b int,\n primary key (a,b)\n);\n \nALTER TABLE x DROP COLUMN a;\n[42000][1072] Key column \'A\' doesn\'t exist in table\n \nThe reason is that dropping column a would result in the new\nconstraint that all values in column b be unique. In order\nto drop the column, an explicit DROP PRIMARY KEY and ADD\nPRIMARY KEY would be required. Up until MariaDB 10.2.7, the\ncolumn was dropped and the additional constraint applied,\nresulting in the following structure:\n \nALTER TABLE x DROP COLUMN a;\nQuery OK, 0 rows affected (0.46 sec)\n \nDESC x;\n+-------+---------+------+-----+---------+-------+\n| Field | Type | Null | Key | Default | Extra |\n+-------+---------+------+-----+---------+-------+\n| b | int(11) | NO | PRI | NULL | |\n+-------+---------+------+-----+---------+-------+\n \nMariaDB 10.4.0 supports instant DROP COLUMN. DROP COLUMN of\nan indexed column would imply DROP INDEX (and in the case of\na non-UNIQUE multi-column index, possibly ADD INDEX). These\nwill not be allowed with ALGORITHM=INSTANT, but unlike\nbefore, they can be allowed with ALGORITHM=NOCOPY\n \nRESTRICT and CASCADE are allowed to make porting from other\ndatabase systems easier. In MariaDB, they do nothing.\n \nMODIFY COLUMN\n \nAllows you to modify the type of a column. The column will\nbe at the same place as the original column and all indexes\non the column will be kept. Note that when modifying column,\nyou should specify all attributes for the new column.\n \nCREATE TABLE t1 (a INT UNSIGNED AUTO_INCREMENT, PRIMARY\nKEY((a));\nALTER TABLE t1 MODIFY a BIGINT UNSIGNED AUTO_INCREMENT;\n \nCHANGE COLUMN\n \nWorks like MODIFY COLUMN except that you can also change the\nname of the column. The column will be at the same place as\nthe original column and all index on the column will be\nkept.\n \nCREATE TABLE t1 (a INT UNSIGNED AUTO_INCREMENT, PRIMARY\nKEY(a));\nALTER TABLE t1 CHANGE a b BIGINT UNSIGNED AUTO_INCREMENT;\n \nALTER COLUMN\n \nThis lets you change column options.\n \nCREATE TABLE t1 (a INT UNSIGNED AUTO_INCREMENT, b\nvarchar(50), PRIMARY KEY(a));\nALTER TABLE t1 ALTER b SET DEFAULT \'hello\';\n \nADD PRIMARY KEY\n \nAdd a primary key.\n \nFor PRIMARY KEY indexes, you can specify a name for the\nindex, but it is silently ignored, and the name of the index\nis always PRIMARY.\n \nSee Getting Started with Indexes: Primary Key for more\ninformation.\n \nDROP PRIMARY KEY\n \nDrop a primary key.\n \nFor PRIMARY KEY indexes, you can specify a name for the\nindex, but it is silently ignored, and the name of the index\nis always PRIMARY.\n \nSee Getting Started with Indexes: Primary Key for more\ninformation.\n \nADD FOREIGN KEY\n \nAdd a foreign key.\n \nFor FOREIGN KEY indexes, a reference definition must be\nprovided.\n \nFor FOREIGN KEY indexes, you can specify a name for the\nconstraint, using the CONSTRAINT keyword. That name will be\nused in error messages.\n \nFirst, you have to specify the name of the target (parent)\ntable and a column or a column list which must be indexed\nand whose values must match to the foreign key\'s values.\nThe MATCH clause is accepted to improve the compatibility\nwith other DBMS\'s, but has no meaning in MariaDB. The ON\nDELETE and ON UPDATE clauses specify what must be done when\na DELETE (or a REPLACE) statements attempts to delete a\nreferenced row from the parent table, and when an UPDATE\nstatement attempts to modify the referenced foreign key\ncolumns in a parent table row, respectively. The following\noptions are allowed:\nRESTRICT: The delete/update operation is not performed. The\nstatement terminates with a 1451 error (SQLSTATE \'2300\').\nNO ACTION: Synonym for RESTRICT.\nCASCADE: The delete/update operation is performed in both\ntables.\nSET NULL: The update or delete goes ahead in the parent\ntable, and the corresponding foreign key fields in the child\ntable are set to NULL. (They must not be defined as NOT NULL\nfor this to succeed).\n \nMariaDB until 5.3\nSET DEFAULT: This option is currently implemented only for\nthe PBXT storage engine, which is disabled by default and no\nlonger maintained. It sets the child table\'s foreign key\nfields to their DEFAULT values when the referenced parent\ntable key entries are updated or deleted.\n \nIf either clause is omitted, the default behavior for the\nomitted clause is RESTRICT.\n \nSee Foreign Keys for more information.\n \nDROP FOREIGN KEY\n \nDrop a foreign key.\n \nSee Foreign Keys for more information.\n \nADD INDEX\n \nAdd a plain index.\n \nPlain indexes are regular indexes that are not unique, and\nare not acting as a primary key or a foreign key. They are\nalso not the \"specialized\" FULLTEXT or SPATIAL indexes.\n \nSee Getting Started with Indexes: Plain Indexes for more\ninformation.\n \nDROP INDEX\n \nDrop a plain index.\n \nPlain indexes are regular indexes that are not unique, and\nare not acting as a primary key or a foreign key. They are\nalso not the \"specialized\" FULLTEXT or SPATIAL indexes.\n \nSee Getting Started with Indexes: Plain Indexes for more\ninformation.\n \nADD UNIQUE INDEX\n \nAdd a unique index.\n \nThe UNIQUE keyword means that the index will not accept\nduplicated values, except for NULLs. An error will raise if\nyou try to insert duplicate values in a UNIQUE index.\n \nFor UNIQUE indexes, you can specify a name for the\nconstraint, using the CONSTRAINT keyword. That name will be\nused in error messages.\n \nSee Getting Started with Indexes: Unique Index for more\ninformation.\n \nDROP UNIQUE INDEX\n \nDrop a unique index.\n \nThe UNIQUE keyword means that the index will not accept\nduplicated values, except for NULLs. An error will raise if\nyou try to insert duplicate values in a UNIQUE index.\n \nFor UNIQUE indexes, you can specify a name for the\nconstraint, using the CONSTRAINT keyword. That name will be\nused in error messages.\n \nSee Getting Started with Indexes: Unique Index for more\ninformation.\n \nADD FULLTEXT INDEX\n \nAdd a FULLTEXT index.\n \nSee Full-Text Indexes for more information.\n \nDROP FULLTEXT INDEX\n \nDrop a FULLTEXT index.\n \nSee Full-Text Indexes for more information.\n \nADD SPATIAL INDEX\n \nAdd a SPATIAL index.\n \nSee SPATIAL INDEX for more information.\n \nDROP SPATIAL INDEX\n \nDrop a SPATIAL index.\n \nSee SPATIAL INDEX for more information.\n \nENABLE/ DISABLE KEYS\n \nDISABLE KEYS will disable all non unique keys for the table\nfor storage engines that support this (at least MyISAM and\nAria). This can be used to speed up inserts into empty\ntables.\n \nENABLE KEYS will enable all disabled keys.\n \nRENAME TO\n \nRenames the table. See also RENAME TABLE.\n \nADD CONSTRAINT\n \nModifies the table adding a constraint on a particular\ncolumn or columns.\n \nMariaDB 10.2.1 introduced new ways to define a constraint.\n \nNote: Before MariaDB 10.2.1, constraint expressions were\naccepted in syntax, but ignored.\n \nALTER TABLE table_name \nADD CONSTRAINT [constraint_name] CHECK(expression);\nBefore a row is inserted or updated, all constraints are\nevaluated in the order they are defined. If any constraint\nfails, then the row will not be updated. One can use most\ndeterministic functions in a constraint, including UDF\'s.\n \nCREATE TABLE account_ledger (\n id INT PRIMARY KEY AUTO_INCREMENT,\n transaction_name VARCHAR(100),\n credit_account VARCHAR(100),\n credit_amount INT,\n debit_account VARCHAR(100),\n debit_amount INT);\n \nALTER TABLE account_ledger \nADD CONSTRAINT is_balanced \n CHECK((debit_amount + credit_amount) = 0);\n \nThe constraint_name is optional. If you don\'t provide one\nin the ALTER TABLE statement, MariaDB auto-generates a name\nfor you. This is done so that you can remove it later using\nDROP CONSTRAINT clause.\n \nYou can disable all constraint expression checks by setting\nthe variable check_constraint_checks to OFF. You may find\nthis useful when loading a table that violates some\nconstraints that you want to later find and fix in SQL.\n \nTo view constraints on a table, query\ninformation_schema.TABLE_CONSTRAINTS:\n \nSELECT CONSTRAINT_NAME, TABLE_NAME, CONSTRAINT_TYPE \nFROM information_schema.TABLE_CONSTRAINTS\nWHERE TABLE_NAME = \'account_ledger\';\n \n+-----------------+----------------+-----------------+\n| CONSTRAINT_NAME | TABLE_NAME | CONSTRAINT_TYPE |\n+-----------------+----------------+-----------------+\n| is_balanced | account_ledger | CHECK |\n+-----------------+----------------+-----------------+\n \nDROP CONSTRAINT\n \nDROP CONSTRAINT for UNIQUE and FOREIGN KEY constraints was\nintroduced in MariaDB 10.2.22 and MariaDB 10.3.13.\n \nDROP CONSTRAINT for CHECK constraints was introduced in\nMariaDB 10.2.1\n \nModifies the table, removing the given constraint.\n \nALTER TABLE table_name\nDROP CONSTRAINT constraint_name;\n \nWhen you add a constraint to a table, whether through a\nCREATE TABLE or ALTER TABLE...ADD CONSTRAINT statement, you\ncan either set a constraint_name yourself, or allow MariaDB\nto auto-generate one for you. To view constraints on a\ntable, query information_schema.TABLE_CONSTRAINTS. For\ninstance,\n \nCREATE TABLE t (\n a INT,\n b INT,\n c INT,\n CONSTRAINT CHECK(a > b),\n CONSTRAINT check_equals CHECK(a = c)); \n \nSELECT CONSTRAINT_NAME, TABLE_NAME, CONSTRAINT_TYPE \nFROM information_schema.TABLE_CONSTRAINTS\nWHERE TABLE_NAME = \'t\';\n \n+-----------------+----------------+-----------------+\n| CONSTRAINT_NAME | TABLE_NAME | CONSTRAINT_TYPE |\n+-----------------+----------------+-----------------+\n| check_equals | t | CHECK |\n| CONSTRAINT_1 | t | CHECK |\n+-----------------+----------------+-----------------+\n \nTo remove a constraint from the table, issue an ALTER\nTABLE...DROP CONSTRAINT statement. For example,\n \nALTER TABLE t DROP CONSTRAINT is_unique;\n \nADD SYSTEM VERSIONING\n \nSystem-versioned tables was added in MariaDB 10.3.4.\n \nAdd system versioning.\n \nDROP SYSTEM VERSIONING\n \nSystem-versioned tables was added in MariaDB 10.3.4.\n \nDrop system versioning.\n \nADD PERIOD FOR SYSTEM_TIME\n \nSystem-versioned tables was added in MariaDB 10.3.4.\n \nFORCE\n \nALTER TABLE ... FORCE can force MariaDB to re-build the\ntable.\n \nIn MariaDB 5.5 and before, this could only be done by\nsetting the ENGINE table option to its old value. For\nexample, for an InnoDB table, one could execute the\nfollowing:\n \nALTER TABLE tab_name ENGINE = InnoDB;\n \nIn MariaDB 10.0 and later, the FORCE option can be used\ninstead. For example, :\n \nALTER TABLE tab_name FORCE;\n \nWith InnoDB, the table rebuild will only reclaim unused\nspace (i.e. the space previously used for deleted rows) if\nthe innodb_file_per_table system variable is set to ON. If\nthe system variable is OFF, then the space will not be\nreclaimed, but it will be-re-used for new data that\'s later\nadded.\n \nEXCHANGE PARTITION\n \nALTER TABLE ... EXCHANGE PARTITION was introduced in MariaDB\n10.0.4\n \nThis is used to exchange the tablespace files between a\npartition and another table.\n \nSee copying InnoDB\'s transportable tablespaces for more\ninformation.\n \nDISCARD TABLESPACE\n \nThis is used to discard an InnoDB table\'s tablespace.\n \nSee copying InnoDB\'s transportable tablespaces for more\ninformation.\n \nIMPORT TABLESPACE\n \nThis is used to import an InnoDB table\'s tablespace. The\ntablespace should have been copied from its original server\nafter executing FLUSH TABLES FOR EXPORT.\n \nSee copying InnoDB\'s transportable tablespaces for more\ninformation.\n \nALTER TABLE ... IMPORT only applies to InnoDB tables. Most\nother popular storage engines, such as Aria and MyISAM, will\nrecognize their data files as soon as they\'ve been placed\nin the proper directory under the datadir, and no special\nDDL is required to import them.\n \nALGORITHM\n \nIn MariaDB 5.5 and before, ALTER TABLE operations required\nmaking a temporary copy of the table, which can be slow for\nlarge tables.\n \nIn MariaDB 10.0 and later, the ALTER TABLE statement\nsupports the ALGORITHM clause. This clause is one of the\nclauses that is used to implement online DDL. ALTER TABLE\nsupports several different algorithms. An algorithm can be\nexplicitly chosen for an ALTER TABLE operation by setting\nthe ALGORITHM clause. The supported values are:\nALGORITHM=DEFAULT - This implies the default behavior for\nthe specific statement, such as if no ALGORITHM clause is\nspecified.\nALGORITHM=COPY\nALGORITHM=INPLACE\nALGORITHM=NOCOPY - This was added in MariaDB 10.3.7.\nALGORITHM=INSTANT - This was added in MariaDB 10.3.7.\n \nSee InnoDB Online DDL Overview: ALGORITHM for information on\nhow the ALGORITHM clause affects InnoDB.\n \nALGORITHM=DEFAULT\n \nThe default behavior, which occurs if ALGORITHM=DEFAULT is\nspecified, or if ALGORITHM is not specified at all, usually\nonly makes a copy if the operation doesn\'t support being\ndone in-place at all. In this case, the most efficient\navailable algorithm will usually be used.\n \nHowever, in MariaDB 10.3.6 and before, if the value of the\nold_alter_table system variable is set to ON, then the\ndefault behavior is to perform ALTER TABLE operations by\nmaking a copy of the table using the old algorithm.\n \nIn MariaDB 10.3.7 and later, the old_alter_table system\nvariable is deprecated. Instead, the alter_algorithm system\nvariable defines the default algorithm for ALTER TABLE\noperations.\n \nALGORITHM=COPY\n \nALGORITHM=COPY was introduced in MariaDB 10.0 as the name\nfor the original ALTER TABLE algorithm.\n \nWhen ALGORITHM=COPY is set, MariaDB essentially does the\nfollowing operations:\n \n-- Create a temporary table with the new definition\nCREATE TEMPORARY TABLE tmp_tab (\n...\n);\n \n-- Copy the data from the original table\nINSERT INTO tmp_tab\n SELECT * FROM original_tab;\n \n-- Drop the original table\nDROP TABLE original_tab;\n \n-- Rename the temporary table, so that it replaces the\noriginal one\nRENAME TABLE tmp_tab TO original_tab;\n \nThis algorithm is very inefficient, but it is generic, so it\nworks for all storage engines.\n \nIf ALGORITHM=COPY is specified, then the copy algorithm will\nbe used even if it is not necessary. This can result in a\nlengthy table copy. If multiple ALTER TABLE operations are\nrequired that each require the table to be rebuilt, then it\nis best to specify all operations in a single ALTER TABLE\nstatement, so that the table is only rebuilt once.\n \nALGORITHM=INPLACE\n \nALGORITHM=INPLACE was introduced in MariaDB 10.0.\n \nALGORITHM=COPY can be incredibly slow, because the whole\ntable has to be copied and rebuilt. ALGORITHM=INPLACE was\nintroduced as a way to avoid this by performing operations\nin-place and avoiding the table copy and rebuild, when\npossible.\n \nWhen ALGORITHM=INPLACE is set, the underlying storage engine\nuses optimizations to perform the operation while avoiding\nthe table copy and rebuild. However, INPLACE is a bit of a\nmisnomer, since some operations may still require the table\nto be rebuilt for some storage engines. Regardless, several\noperations can be performed without a full copy of the table\nfor some storage engines.\n \nA more accurate name would have been ALGORITHM=ENGINE, where\nENGINE refers to an \"engine-specific\" algorithm.\n \nIf an ALTER TABLE operation supports ALGORITHM=INPLACE, then\nit can be performed using optimizations by the underlying\nstorage engine, but it may rebuilt.\n \nSee InnoDB Online DDL Operations with ALGORITHM=INPLACE for\nmore.\n \nALGORITHM=NOCOPY\n \nALGORITHM=NOCOPY was introduced in MariaDB 10.3.7.\n \nALGORITHM=INPLACE can sometimes be surprisingly slow in\ninstances where it has to rebuild the clustered index,\nbecause when the clustered index has to be rebuilt, the\nwhole table has to be rebuilt. ALGORITHM=NOCOPY was\nintroduced as a way to avoid this. \n \nIf an ALTER TABLE operation supports ALGORITHM=NOCOPY, then\nit can be performed without rebuilding the clustered index.\n \nIf ALGORITHM=NOCOPY is specified for an ALTER TABLE\noperation that does not support ALGORITHM=NOCOPY, then an\nerror will be raised. In this case, raising an error is\npreferable, if the alternative is for the operation to\nrebuild the clustered index, and perform unexpectedly\nslowly.\n \nSee InnoDB Online DDL Operations with ALGORITHM=NOCOPY for\nmore.\n \nALGORITHM=INSTANT\n \nALGORITHM=INSTANT was introduced in MariaDB 10.3.7.\n \nALGORITHM=INPLACE can sometimes be surprisingly slow in\ninstances where it has to modify data files.\nALGORITHM=INSTANT was introduced as a way to avoid this.\n \nIf an ALTER TABLE operation supports ALGORITHM=INSTANT, then\nit can be performed without modifying any data files.\n \nIf ALGORITHM=INSTANT is specified for an ALTER TABLE\noperation that does not support ALGORITHM=INSTANT, then an\nerror will be raised. In this case, raising an error is\npreferable, if the alternative is for the operation to\nmodify data files, and perform unexpectedly slowly.\n \nSee InnoDB Online DDL Operations with ALGORITHM=INSTANT for\nmore.\n \nLOCK\n \nIn MariaDB 10.0 and later, the ALTER TABLE statement\nsupports the LOCK clause. This clause is one of the clauses\nthat is used to implement online DDL. ALTER TABLE supports\nseveral different locking strategies. A locking strategy can\nbe explicitly chosen for an ALTER TABLE operation by setting\nthe LOCK clause. The supported values are:\nDEFAULT: Acquire the least restrictive lock on the table\nthat is supported for the specific operation. Permit the\nmaximum amount of concurrency that is supported for the\nspecific operation.\nNONE: Acquire no lock on the table. Permit all concurrent\nDML. If this locking strategy is not permitted for an\noperation, then an error is raised.\nSHARED: Acquire a read lock on the table. Permit read-only\nconcurrent DML. If this locking strategy is not permitted\nfor an operation, then an error is raised.\nEXCLUSIVE: Acquire a write lock on the table. Do not permit\nconcurrent DML.\n \nDifferent storage engines support different locking\nstrategies for different operations. If a specific locking\nstrategy is chosen for an ALTER TABLE operation, and that\ntable\'s storage engine does not support that locking\nstrategy for that specific operation, then an error will be\nraised.\n \nIf the LOCK clause is not explicitly set, then the operation\nuses LOCK=DEFAULT.\n \nALTER ONLINE TABLE is equivalent to LOCK=NONE. Therefore,\nthe ALTER ONLINE TABLE statement can be used to ensure that\nyour ALTER TABLE operation allows all concurrent DML.\n \nSee InnoDB Online DDL Overview: LOCK for information on how\nthe LOCK clause affects InnoDB.\n \nProgress Reporting\n \nMariaDB provides progress reporting for ALTER TABLE\nstatement for clients\nthat support the new progress reporting protocol. For\nexample, if you were using the mysql client, then the\nprogress report might look like this::\n \nALTER TABLE test ENGINE=Aria;\nStage: 1 of 2 \'copy to tmp table\' 46% of stage\n \nThe progress report is also shown in the output of the SHOW\nPROCESSLIST statement and in the contents of the\ninformation_schema.PROCESSLIST table.\n \nSee Progress Reporting for more information.\n \nAborting ALTER TABLE Operations\n \nIf an ALTER TABLE operation is being performed and the\nconnection is killed, the changes will be rolled back in a\ncontrolled manner. The rollback can be a slow operation as\nthe time it takes is relative to how far the operation has\nprogressed.\n \nAborting ALTER TABLE ... ALGORITHM=COPY was made faster by\nremoving excessive undo logging (MDEV-11415). This\nsignificantly shortens the time it takes to abort a running\nALTER TABLE operation.\n \nExamples\n-------- \nAdding a new column:\n \nALTER TABLE t1 ADD x INT;\n \nDropping a column:\n \nALTER TABLE t1 DROP x;\n \nModifying the type of a column:\n \nALTER TABLE t1 MODIFY x bigint unsigned;\n \nChanging the name and type of a column:\n \nALTER TABLE t1 CHANGE a b bigint unsigned auto_increment;\n \nCombining multiple clauses in a single ALTER TABLE\nstatement, separated by commas:\n \nALTER TABLE t1 DROP x, ADD x2 INT, CHANGE y y2 INT;\n \nChanging the storage engine:\n \nALTER TABLE t1 ENGINE = InnoDB;\n \nRebuilding the table (the previous example will also rebuild\nthe table if it was already InnoDB):\n \nALTER TABLE t1 FORCE;\n \n\n\nURL: https://mariadb.com/kb/en/alter-table/', '', 'https://mariadb.com/kb/en/alter-table/'),
(653, 'ALTER TABLESPACE', 39, 'The ALTER TABLESPACE statement is not supported by MariaDB.\nIt was originally inherited from MySQL NDB Cluster. In MySQL\n5.7 and later, the statement is also supported for InnoDB.\nHowever, MariaDB has chosen not to include that specific\nfeature. See MDEV-19294 for more information.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/alter-tablespace/', '', 'https://mariadb.com/kb/en/alter-tablespace/'),
(658, 'CREATE FUNCTION', 39, 'Syntax\n------ \nCREATE [OR REPLACE]\n [DEFINER = {user | CURRENT_USER | role | CURRENT_ROLE }]\n [AGGREGATE] FUNCTION [IF NOT EXISTS] func_name\n([func_parameter[,...]])\n RETURNS type\n [characteristic ...]\n RETURN func_body\n \nfunc_parameter:\n param_name type\n \ntype:\n Any valid MariaDB data type\n \ncharacteristic:\n LANGUAGE SQL\n | [NOT] DETERMINISTIC\n | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL\nDATA }\n | SQL SECURITY { DEFINER | INVOKER }\n | COMMENT \'string\'\n \nfunc_body:\n Valid SQL procedure statement\n \nDescription\n----------- \nUse the CREATE FUNCTION statement to create a new stored\nfunction. You must have\nthe CREATE ROUTINE database privilege to use CREATE\nFUNCTION.\nA function takes any number of arguments and returns a value\nfrom the function body. The\nfunction body can be any valid SQL expression as you would\nuse, for example, in any select\nexpression. If you have the appropriate privileges, you can\ncall the function exactly as you\nwould any built-in function. See Security below for details\non privileges.\n \nYou can also use a variant of the CREATE FUNCTION statement\nto install a user-defined\nfunction (UDF) defined by a plugin. See CREATE FUNCTION\n(UDF)\nfor details.\n \nYou can use a SELECT statement for the function body by\nenclosing it in\nparentheses, exactly as you would to use a subselect for any\nother expression. The SELECT\nstatement must return a single value. If more than one\ncolumn is returned when the function is called,\nerror 1241 results. If more than one row is returned when\nthe function is called, error 1242\nresults. Use a LIMIT clause to ensure only one row is\nreturned.\n \nYou can also replace the RETURN clause with a BEGIN...END\ncompound\nstatement. The compound statement must contain a RETURN\nstatement. When the function is\ncalled, the RETURN statement immediately returns its result,\nand any statements after RETURN\nare effectively ignored.\n \nBy default, a function is associated with the default\ndatabase. To associate the function explicitly\nwith a given database, specify the fully-qualified name as\ndb_name.func_name\nwhen you create it. If the function name is the same as the\nname of a built-in function, you must\nuse the fully qualified name when you call it.\n \nThe parameter list enclosed within parentheses must always\nbe present.\nIf there are no parameters, an empty parameter list of ()\nshould be\nused. Parameter names are not case sensitive.\n \nEach parameter can be declared to use any valid data type,\nexcept that\nthe COLLATE attribute cannot be used.\n \nFor valid identifiers to use as function names, see\nIdentifier Names.\n \nAGGREGATE\n \nFrom MariaDB 10.3.3, it is possible to create stored\naggregate functions as well. See Stored Aggregate Functions\nfor details.\n \nRETURNS\n \nThe RETURNS clause specifies the return type of the\nfunction. NULL values are permitted with all return types.\n \nWhat happens if the RETURN clause returns a value of a\ndifferent type? It depends on the SQL_MODE in effect at the\nmoment of the function creation.\n \nIf the SQL_MODE is strict (STRICT_ALL_TABLES or\nSTRICT_TRANS_TABLES flags are specified), a 1366 error will\nbe produced.\n \nOtherwise, the value is coerced to the proper type. For\nexample, if a function\nspecifies an ENUM or SET value in the RETURNS clause, but\nthe RETURN\nclause returns an integer, the value returned from the\nfunction is the string for the corresponding ENUM\nmember of set of SET members.\n \nMariaDB stores the SQL_MODE system variable setting that is\nin effect at the\ntime a routine is created, and always executes the routine\nwith this setting in\nforce, regardless of the server SQL mode in effect when the\nroutine is invoked.\n \nLANGUAGE SQL\n \nLANGUAGE SQL is a standard SQL clause, and it can be used in\nMariaDB for portability. However that clause has no meaning,\nbecause SQL is the only supported language for stored\nfunctions.\n \nA function is deterministic if it can produce only one\nresult for a given list of parameters. If the result may be\naffected by stored data, server variables, random numbers or\nany value that is not explicitly passed, then the function\nis not deterministic. Also, a function is non-deterministic\nif it uses non-deterministic functions like NOW() or\nCURRENT_TIMESTAMP(). The optimizer may choose a faster\nexecution plan if it known that the function is\ndeterministic. In such cases, you should declare the routine\nusing the DETERMINISTIC keyword. If you want to explicitly\nstate that the function is not deterministic (which is the\ndefault) you can use the NOT DETERMINISTIC keywords.\n \nIf you declare a non-deterministic function as\nDETERMINISTIC, you may get incorrect results. If you declare\na deterministic function as NOT DETERMINISTIC, in some cases\nthe queries will be slower.\n \nOR REPLACE\n \nIf the optional OR REPLACE clause is used, it acts as a\nshortcut for:\n \nDROP FUNCTION IF EXISTS function_name;\n \nCREATE FUNCTION function_name ...;\n \nwith the exception that any existing privileges for the\nfunction are not dropped.\n \nIF NOT EXISTS\n \nIf the IF NOT EXISTS clause is used, MariaDB will return a\nwarning instead of an error if the function already exists.\nCannot be used together with OR REPLACE.\n \n[NOT] DETERMINISTIC\n \nThe [NOT] DETERMINISTIC clause also affects binary logging,\nbecause the STATEMENT format can not be used to store or\nreplicate non-deterministic statements.\n \nCONTAINS SQL, NO SQL, READS SQL DATA, and MODIFIES SQL DATA\nare informative clauses that tell the server what the\nfunction does. MariaDB does not check in any way whether the\nspecified clause is correct. If none of these clauses are\nspecified, CONTAINS SQL is used by default.\n \nMODIFIES SQL DATA\n \nMODIFIES SQL DATA means that the function contains\nstatements that may modify data stored in databases. This\nhappens if the function contains statements like DELETE,\nUPDATE, INSERT, REPLACE or DDL.\n \nREADS SQL DATA\n \nREADS SQL DATA means that the function reads data stored in\ndatabases, but does not modify any data. This happens if\nSELECT statements are used, but there no write operations\nare executed.\n \nCONTAINS SQL\n \nCONTAINS SQL means that the function contains at least one\nSQL statement, but it does not read or write any data stored\nin a database. Examples include SET or DO.\n \nNO SQL\n \nNO SQL means nothing, because MariaDB does not currently\nsupport any language other than SQL.\n \nOracle Mode\n \nFrom MariaDB 10.3, a subset of Oracle\'s PL/SQL language has\nbeen supported in addition to the traditional SQL/PSM-based\nMariaDB syntax. See Oracle mode from MariaDB 10.3 for\ndetails on changes when running Oracle mode.\n \nSecurity\n \nYou must have the EXECUTE privilege on a function to call\nit.\nMariaDB automatically grants the EXECUTE and ALTER ROUTINE\nprivileges to the\naccount that called CREATE FUNCTION, even if the DEFINER\nclause was used.\n \nEach function has an account associated as the definer. By\ndefault, the definer is the account\nthat created the function. Use the DEFINER clause to specify\na different account as the\ndefiner. You must have the SUPER privilege to use the\nDEFINER\nclause. See Account Names for details on specifying\naccounts.\n \nThe SQL SECURITY clause specifies what privileges are used\nwhen a function is called.\nIf SQL SECURITY is INVOKER, the function body will be\nevaluated using the privileges\nof the user calling the function. If SQL SECURITY is\nDEFINER, the function body is\nalways evaluated using the privileges of the definer\naccount. DEFINER is the default.\n \nThis allows you to create functions that grant limited\naccess to certain data. For example, say\nyou have a table that stores some employee information, and\nthat you\'ve granted SELECT\nprivileges only on certain columns to the user account\nroger.\n \nCREATE TABLE employees (name TINYTEXT, dept TINYTEXT, salary\nINT);\nGRANT SELECT (name, dept) ON employees TO roger;\n \nTo allow the user the get the maximum salary for a\ndepartment, define a function and grant\nthe EXECUTE privilege:\n \nCREATE FUNCTION max_salary (dept TINYTEXT) RETURNS INT\nRETURN\n (SELECT MAX(salary) FROM employees WHERE employees.dept =\ndept);\nGRANT EXECUTE ON FUNCTION max_salary TO roger;\n \nSince SQL SECURITY defaults to DEFINER, whenever the user\nroger calls\nthis function, the subselect will execute with your\nprivileges. As long as you have privileges to\nselect the salary of each employee, the caller of the\nfunction will be able to get the maximum\nsalary for each department without being able to see\nindividual salaries.\n \nCharacter sets and collations\n \nFunction return types can be declared to use any valid\ncharacter set and collation. If used, the COLLATE attribute\nneeds to be preceded by a CHARACTER SET attribute.\n \nIf the character set and collation are not specifically set\nin the statement, the database defaults at the time of\ncreation will be used. If the database defaults change at a\nlater stage, the stored function character set/collation\nwill not be changed at the same time; the stored function\nneeds to be dropped and recreated to ensure the same\ncharacter set/collation as the database is used.\n \nExamples\n-------- \nThe following example function takes a parameter, performs\nan operation using\nan SQL function, and returns the result.\n \nCREATE FUNCTION hello (s CHAR(20))\n RETURNS CHAR(50) DETERMINISTIC\n RETURN CONCAT(\'Hello, \',s,\'!\');\n \nSELECT hello(\'world\');\n+----------------+\n| hello(\'world\') |\n+----------------+\n| Hello, world! |\n+----------------+\n \nYou can use a compound statement in a function to manipulate\ndata with statements\nlike INSERT and UPDATE. The following example creates a\ncounter function\nthat uses a temporary table to store the current value.\nBecause the compound statement\ncontains statements terminated with semicolons, you have to\nfirst change the statement\ndelimiter with the DELIMITER statement to allow the\nsemicolon to be used in the\nfunction body. See Delimiters in the mysql client for more.\n \nCREATE TEMPORARY TABLE counter (c INT);\nINSERT INTO counter VALUES (0);\nDELIMITER //\nCREATE FUNCTION counter () RETURNS INT\n BEGIN\n UPDATE counter SET c = c + 1;\n \n RETURN (SELECT c FROM counter LIMIT 1);\n END //\nDELIMITER ;\n \nCharacter set and collation:\n \nCREATE FUNCTION hello2 (s CHAR(20))\n RETURNS CHAR(50) CHARACTER SET \'utf8\' COLLATE\n\'utf8_bin\' DETERMINISTIC\n RETURN CONCAT(\'Hello, \',s,\'!\');\n \n\n\nURL: https://mariadb.com/kb/en/create-function/', '', 'https://mariadb.com/kb/en/create-function/'),
(662, 'CREATE PROCEDURE', 39, 'Syntax\n------ \nCREATE\n [OR REPLACE]\n [DEFINER = { user | CURRENT_USER | role | CURRENT_ROLE }]\n PROCEDURE sp_name ([proc_parameter[,...]])\n [characteristic ...] routine_body\n \nproc_parameter:\n [ IN | OUT | INOUT ] param_name type\n \ntype:\n Any valid MariaDB data type\n \ncharacteristic:\n LANGUAGE SQL\n | [NOT] DETERMINISTIC\n | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL\nDATA }\n | SQL SECURITY { DEFINER | INVOKER }\n | COMMENT \'string\'\n \nroutine_body:\n Valid SQL procedure statement\n \nDescription\n----------- \nCreates a stored procedure. By default, a routine is\nassociated with the default database. To associate the\nroutine\nexplicitly with a given database, specify the name as\ndb_name.sp_name\nwhen you create it.\n \nWhen the routine is invoked, an implicit USE db_name is\nperformed (and\nundone when the routine terminates). The causes the routine\nto have\nthe given default database while it executes. USE statements\nwithin\nstored routines are disallowed.\n \nWhen a stored procedure has been created, you invoke it by\nusing the CALL statement (see CALL).\n \nTo execute the CREATE PROCEDURE statement, it is\nnecessary to have the CREATE ROUTINE privilege. By default,\nMariaDB\nautomatically grants the ALTER ROUTINE and EXECUTE\nprivileges to the\nroutine creator. See also Stored Routine Privileges.\n \nThe DEFINER and SQL SECURITY clauses specify the security\ncontext to\nbe used when checking access privileges at routine execution\ntime, as\ndescribed later.\n \nIf the routine name is the same as the name of a built-in\nSQL\nfunction, you must use a space between the name and the\nfollowing\nparenthesis when defining the routine, or a syntax error\noccurs. This\nis also true when you invoke the routine later. For this\nreason, we\nsuggest that it is better to avoid re-using the names of\nexisting SQL\nfunctions for your own stored routines.\n \nThe IGNORE_SPACE SQL mode applies to built-in functions, not\nto stored\nroutines. It is always allowable to have spaces after a\nroutine name,\nregardless of whether IGNORE_SPACE is enabled.\n \nThe parameter list enclosed within parentheses must always\nbe present.\nIf there are no parameters, an empty parameter list of ()\nshould be\nused. Parameter names are not case sensitive.\n \nEach parameter can be declared to use any valid data type,\nexcept that\nthe COLLATE attribute cannot be used.\n \nFor valid identifiers to use as procedure names, see\nIdentifier Names.\n \nIN/OUT/INOUT\n \nEach parameter is an IN parameter by default. To specify\notherwise for\na parameter, use the keyword OUT or INOUT before the\nparameter name.\n \nAn IN parameter passes a value into a procedure. The\nprocedure might\nmodify the value, but the modification is not visible to the\ncaller\nwhen the procedure returns. An OUT parameter passes a value\nfrom the\nprocedure back to the caller. Its initial value is NULL\nwithin the\nprocedure, and its value is visible to the caller when the\nprocedure\nreturns. An INOUT parameter is initialized by the caller,\ncan be\nmodified by the procedure, and any change made by the\nprocedure is\nvisible to the caller when the procedure returns.\n \nFor each OUT or INOUT parameter, pass a user-defined\nvariable in the\nCALL statement that invokes the procedure so that you can\nobtain its\nvalue when the procedure returns. If you are calling the\nprocedure\nfrom within another stored procedure or function, you can\nalso pass a\nroutine parameter or local routine variable as an IN or\nINOUT\nparameter.\n \nDETERMINISTIC/NOT DETERMINISTIC\n \nDETERMINISTIC and NOT DETERMINISTIC apply only to functions.\nSpecifying DETERMINISTC or NON-DETERMINISTIC in procedures\nhas no effect. The default value is NOT DETERMINISTIC.\nFunctions are DETERMINISTIC when they always return the same\nvalue for the same input. For example, a truncate or\nsubstring function. Any function involving data, therefore,\nis always NOT DETERMINISTIC.\n \nCONTAINS SQL/NO SQL/READS SQL DATA/MODIFIES SQL DATA\n \nCONTAINS SQL, NO SQL, READS SQL DATA, and MODIFIES SQL DATA\nare informative clauses that tell the server what the\nfunction does. MariaDB does not check in any way whether the\nspecified clause is correct. If none of these clauses are\nspecified, CONTAINS SQL is used by default.\n \nMODIFIES SQL DATA means that the function contains\nstatements that may modify data stored in databases. This\nhappens if the function contains statements like DELETE,\nUPDATE, INSERT, REPLACE or DDL.\n \nREADS SQL DATA means that the function reads data stored in\ndatabases, but does not modify any data. This happens if\nSELECT statements are used, but there no write operations\nare executed.\n \nCONTAINS SQL means that the function contains at least one\nSQL statement, but it does not read or write any data stored\nin a database. Examples include SET or DO.\n \nNO SQL means nothing, because MariaDB does not currently\nsupport any language other than SQL.\n \nThe routine_body consists of a valid SQL procedure\nstatement. This can\nbe a simple statement such as SELECT or INSERT, or it can be\na\ncompound statement written using BEGIN and END. Compound\nstatements\ncan contain declarations, loops, and other control structure\nstatements. See Programmatic and Compound Statements for\nsyntax details.\n \nMariaDB allows routines to contain DDL statements, such as\nCREATE and\nDROP. MariaDB also allows stored procedures (but not stored\nfunctions)\nto contain SQL transaction statements such as COMMIT.\n \nFor additional information about statements that are not\nallowed in\nstored routines, see Stored Routine Limitations.\n \nInvoking stored procedure from within programs\n \nFor information about invoking stored procedures from within\nprograms written in a language that has a MariaDB/MySQL\ninterface, see CALL.\n \nOR REPLACE\n \nIf the optional OR REPLACE clause is used, it acts as a\nshortcut for:\n \nDROP PROCEDURE IF EXISTS name;\n \nCREATE PROCEDURE name ...;\n \nwith the exception that any existing privileges for the\nprocedure are not dropped.\n \nsql_mode\n \nMariaDB stores the sql_mode system variable setting that is\nin effect at the time a routine is created, and always\nexecutes the routine with this setting in force, regardless\nof the server SQL mode in effect when the routine is\ninvoked.\n \nCharacter Sets and Collations\n \nProcedure parameters can be declared with any character\nset/collation. If the character set and collation are not\nspecifically set, the database defaults at the time of\ncreation will be used. If the database defaults change at a\nlater stage, the stored procedure character set/collation\nwill not be changed at the same time; the stored procedure\nneeds to be dropped and recreated to ensure the same\ncharacter set/collation as the database is used.\n \nOracle Mode\n \nFrom MariaDB 10.3, a subset of Oracle\'s PL/SQL language has\nbeen supported in addition to the traditional SQL/PSM-based\nMariaDB syntax. See Oracle mode from MariaDB 10.3 for\ndetails on changes when running Oracle mode.\n \nExamples\n-------- \nThe following example shows a simple stored procedure that\nuses an OUT\nparameter. It uses the DELIMITER command to set a new\ndelimiter for the duration of the process — see Delimiters\nin the mysql client.\n \nDELIMITER //\n \nCREATE PROCEDURE simpleproc (OUT param1 INT)\n BEGIN\n SELECT COUNT(*) INTO param1 FROM t;\n END;\n//\n \nDELIMITER ;\n \nCALL simpleproc(@a);\n \nSELECT @a;\n+------+\n| @a |\n+------+\n| 1 |\n+------+\n \nCharacter set and collation:\n \nDELIMITER //\n \nCREATE PROCEDURE simpleproc2 (\n OUT param1 CHAR(10) CHARACTER SET \'utf8\' COLLATE\n\'utf8_bin\'\n)\n BEGIN\n SELECT CONCAT(\'a\'),f1 INTO param1 FROM t;\n END;\n//\n \nDELIMITER ;\n \nCREATE OR REPLACE:\n \nDELIMITER //\n \nCREATE PROCEDURE simpleproc2 (\n OUT param1 CHAR(10) CHARACTER SET \'utf8\' COLLATE\n\'utf8_bin\'\n)\n BEGIN\n SELECT CONCAT(\'a\'),f1 INTO param1 FROM t;\n \n END;\n \n//\nERROR 1304 (42000): PROCEDURE simpleproc2 already exists\n \nDELIMITER ;\n \nDELIMITER //\n \nCREATE OR REPLACE PROCEDURE simpleproc2 (\n OUT param1 CHAR(10) CHARACTER SET \'utf8\' COLLATE\n\'utf8_bin\'\n)\n BEGIN\n SELECT CONCAT(\'a\'),f1 INTO param1 FROM t;\n \n END;\n \n//\nERROR 1304 (42000): PROCEDURE simpleproc2 already exists\n \nDELIMITER ;\n \nQuery OK, 0 rows affected (0.03 sec)\n \n\n\nURL: https://mariadb.com/kb/en/create-procedure/', '', 'https://mariadb.com/kb/en/create-procedure/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(665, 'CREATE TABLE', 39, 'Syntax\n------ \nCREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS]\ntbl_name\n (create_definition,...) [table_options ]...\n[partition_options]\nCREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS]\ntbl_name\n [(create_definition,...)] [table_options ]...\n[partition_options]\n select_statement\nCREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS]\ntbl_name\n { LIKE old_table_name | (LIKE old_table_name) }\n \nselect_statement:\n [IGNORE | REPLACE] [AS] SELECT ... (Some legal select\nstatement)\n \nDescription\n----------- \nUse the CREATE TABLE statement to create a table with the\ngiven name.\n \nIn its most basic form, the CREATE TABLE statement provides\na table name\nfollowed by a list of columns, indexes, and constraints. By\ndefault, the table\nis created in the default database. Specify a database with\ndb_name.tbl_name.\nIf you quote the table name, you must quote the database\nname and table name\nseparately as `db_name`.`tbl_name`. This is particularly\nuseful for CREATE TABLE ... SELECT, because it allows to\ncreate a table into a database, which contains data from\nother databases. See Identifier Qualifiers.\n \nIf a table with the same name exists, error 1050 results.\nUse IF NOT EXISTS\nto suppress this error and issue a note instead. Use SHOW\nWARNINGS\nto see notes.\n \nThe CREATE TABLE statement automatically commits the current\ntransaction,\nexcept when using the TEMPORARY keyword.\n \nFor valid identifiers to use as table names, see Identifier\nNames.\n \nNote: if the default_storage_engine is set to ColumnStore\nthen it needs setting on all UMs. Otherwise when the tables\nusing the default engine are replicated across UMs they will\nuse the wrong engine. You should therefore not use this\noption as a session variable with ColumnStore.\n \nMicrosecond precision can be between 0-6. If no precision is\nspecified it is assumed to be 0, for backward compatibility\nreasons.\n \nPrivileges\n \nExecuting the CREATE TABLE statement requires the CREATE\nprivilege for the table or the database.\n \nCREATE OR REPLACE TABLE ...\n \nThe OR REPLACE clause was added in MariaDB 10.0.8.\n \nIf the OR REPLACE clause is used and if the table already\nexists, then instead of returning an error, the server will\ndrop the existing table and replace it with the newly\ndefined table.\n \nThis syntax was originally added to make replication more\nrobust if it has to rollback and repeat statements such as\nCREATE ... SELECT on slaves.\n \nCREATE OR REPLACE TABLE table_name (a int);\n \nis basically the same as:\n \nDROP TABLE IF EXISTS table_name;\nCREATE TABLE table_name (a int);\n \nwith the following exceptions:\nIf table_name was locked with LOCK TABLES it will continue\nto be locked after the statement.\nTemporary tables are only dropped if the TEMPORARY keyword\nwas used. (With DROP TABLE, temporary tables are preferred\nto be dropped before normal tables).\n \nThings to be Aware of With CREATE OR REPLACE\n \nThe table is dropped first (if it existed), after that the\nCREATE is done. Because of this, if the CREATE fails, then\nthe table will not exist anymore after the statement. If the\ntable was used with LOCK TABLES it will be unlocked.\nOne can\'t use OR REPLACE together with IF EXISTS.\nSlaves in replication will by default use CREATE OR REPLACE\nwhen replicating CREATE statements that don\'\'t use IF\nEXISTS. This can be changed by setting the variable\nslave-ddl-exec-mode to STRICT.\n \nCREATE TABLE IF NOT EXISTS ...\n \nIf the IF NOT EXISTS clause is used, then the index will\nonly be created if an index with the same name does not\nalready exist. If the index already exists, then a warning\nwill be triggered by default.\n \nCREATE TEMPORARY TABLE ...\n \nUse the TEMPORARY keyword to create a temporary table that\nis only available to your current session. Temporary tables\nare dropped when the your session ends. Temporary table\nnames are specific to your session. They will not conflict\nwith other temporary tables from other session even if they\nshare the same name. They will shadow names of non-temporary\ntables or views, if they are identical. A temporary table\ncan have the same name as a non-temporary table which is\nlocated in the same database. In that case, their name will\nreference the temporary table when used in SQL statements.\nYou must have the CREATE TEMPORARY TABLES privilege on the\ndatabase to create temporary tables. If no storage engine is\nspecified, the default_tmp_storage_engine setting will\ndetermine the engine.\n \nCREATE TABLE ... LIKE\n \nUse the LIKE clause instead of a full table definition to\ncreate a table with the same definition as another table,\nincluding columns, indexes, and table options. Foreign key\ndefinitions, as well as any DATA DIRECTORY or INDEX\nDIRECTORY table options specified on the original table,\nwill not be created.\n \nCREATE TABLE ... SELECT\n \nYou can create a table containing data from other tables\nusing the CREATE ... SELECT statement. Columns will be\ncreated in the table for each field returned by the SELECT\nquery.\n \nYou can also define some columns normally and add other\ncolumns from a SELECT. You can also create columns in the\nnormal way and assign them some values using the query, this\nis done to force a certain type or other field\ncharacteristics. The columns that are not named in the query\nwill be placed before the others. For example:\n \nCREATE TABLE test (a INT NOT NULL, b CHAR(10)) ENGINE=MyISAM\n SELECT 5 AS b, c, d FROM another_table;\n \nRemember that the query just returns data. If you want to\nuse the same indexes, or the same columns attributes ([NOT]\nNULL, DEFAULT, AUTO_INCREMENT) in the new table, you need to\nspecify them manually. Types and sizes are not automatically\npreserved if no data returned by the SELECT requires the\nfull size, and VARCHAR could be converted into CHAR. The\nCAST() function can be used to forcee the new table to use\ncertain types.\n \nAliases (AS) are taken into account, and they should always\nbe used when you SELECT an expression (function,\narithmetical operation, etc).\n \nIf an error occurs during the query, the table will not be\ncreated at all.\n \nIf the new table has a primary key or UNIQUE indexes, you\ncan use the IGNORE or REPLACE keywords to handle duplicate\nkey errors during the query. IGNORE means that the newer\nvalues must not be inserted an identical value exists in the\nindex. REPLACE means that older values must be overwritten.\n \nIf the columns in the new table are more than the rows\nreturned by the query, the columns populated by the query\nwill be placed after other columns. Note that if the strict\nSQL_MODE is on, and the columns that are not names in the\nquery do not have a DEFAULT value, an error will raise and\nno rows will be copied.\n \nConcurrent inserts are not used during the execution of a\nCREATE ... SELECT.\n \nIf the table already exists, an error similar to the\nfollowing will be returned:\n \nERROR 1050 (42S01): Table \'t\' already exists\n \nIf the IF NOT EXISTS clause is used and the table exists, a\nnote will be produced instead of an error.\n \nTo insert rows from a query into an existing table, INSERT\n... SELECT can be used.\n \nColumn Definitions\n \ncreate_definition:\n { col_name column_definition | index_definition |\nperiod_definition | CHECK (expr) }\n \ncolumn_definition:\n data_type\n [NOT NULL | NULL] [DEFAULT default_value | (expression)]\n [AUTO_INCREMENT] [ZEROFILL] [UNIQUE [KEY] | [PRIMARY] KEY]\n [INVISIBLE] [{WITH|WITHOUT} SYSTEM VERSIONING]\n [COMMENT \'string\']\n [COLUMN_FORMAT {FIXED|DYNAMIC|DEFAULT}]\n [reference_definition]\n | data_type [GENERATED ALWAYS] \n AS { { ROW {START|END} } | { (expression) [VIRTUAL |\nPERSISTENT | STORED] } }\n [UNIQUE [KEY]] [COMMENT \'string\']\n \nconstraint_definition:\n CONSTRAINT [constraint_name] CHECK (expression)\nNote: MariaDB accepts the REFERENCES clause in ALTER TABLE\nand CREATE TABLE column definitions, but that syntax does\nnothing. MariaDB simply parses it without returning any\nerror or warning, for compatibility with other DBMS\'s.\nBefore MariaDB 10.2.1 this was also true for CHECK\nconstraints. Only the syntax for indexes described below\ncreates foreign keys.\n \nEach definition either creates a column in the table or\nspecifies and index or\nconstraint on one or more columns. See Indexes below for\ndetails\non creating indexes.\n \nCreate a column by specifying a column name and a data type,\noptionally\nfollowed by column options. See Data Types for a full list\nof data types allowed in MariaDB.\n \nNULL and NOT NULL\n \nUse the NULL or NOT NULL options to specify that values in\nthe column\nmay or may not be NULL, respectively. By default, values may\nbe NULL. See also NULL Values in MariaDB.\n \nDEFAULT Column Option\n \nThe DEFAULT clause was enhanced in MariaDB 10.2.1. Some\nenhancements include\nBLOB and TEXT columns now support DEFAULT.\nThe DEFAULT clause can now be used with an expression or\nfunction.\n \nSpecify a default value using the DEFAULT clause. If you\ndon\'t specify DEFAULT then the following rules apply:\nIf the column is not defined with NOT NULL, AUTO_INCREMENT\nor TIMESTAMP, an explicit DEFAULT NULL will be added.\nNote that in MySQL and in MariaDB before 10.1.6, you may get\nan explicit DEFAULT for primary key parts, if not specified\nwith NOT NULL.\n \nThe default value will be used if you INSERT a row without\nspecifying a value for that column, or if you specify\nDEFAULT for that column.\nBefore MariaDB 10.2.1 you couldn\'t usually provide an\nexpression or function to evaluate at\ninsertion time. You had to provide a constant default value\ninstead. The one\nexception is that you may use CURRENT_TIMESTAMP as\nthe default value for a TIMESTAMP column to use the current\ntimestamp at insertion time.\n \nCURRENT_TIMESTAMP may also be used as\nthe default value for a DATETIME\n \nFrom MariaDB 10.2.1 you can use most functions in DEFAULT.\nExpressions should have parentheses around them. If you use\na non deterministic function in DEFAULT then all inserts to\nthe table will be replicated in row mode. You can even refer\nto earlier columns in the DEFAULT expression:\n \nCREATE TABLE t1 (a int DEFAULT (1+1), b int DEFAULT (a+1));\nCREATE TABLE t2 (a bigint primary key DEFAULT UUID_SHORT());\n \nThe DEFAULT clause cannot contain any stored functions or\nsubqueries, and a column used in the clause must already\nhave been defined earlier in the statement.\n \nSince MariaDB 10.2.1, it is possible to assign BLOB or TEXT\ncolumns a DEFAULT value. In earlier versions, assigning a\ndefault to these columns was not possible.\n \nStarting from 10.3.3 you can also use DEFAULT (NEXT VALUE\nFOR sequence)\n \nAUTO_INCREMENT Column Option\n \nUse AUTO_INCREMENT to create a column whose value can\ncan be set automatically from a simple counter. You can only\nuse AUTO_INCREMENT\non a column with an integer type. The column must be a key,\nand there can only be\none AUTO_INCREMENT column in a table. If you insert a row\nwithout specifying\na value for that column (or if you specify 0, NULL, or\nDEFAULT\nas the value), the actual value will be taken from the\ncounter, with each insertion\nincrementing the counter by one. You can still insert a\nvalue explicitly. If you\ninsert a value that is greater than the current counter\nvalue, the counter is\nset based on the new value. An AUTO_INCREMENT column is\nimplicitly NOT NULL.\nUse LAST_INSERT_ID to get the AUTO_INCREMENT value\nmost recently used by an INSERT statement.\n \nZEROFILL Column Option\n \nIf the ZEROFILL column option is specified for a column\nusing a numeric data type, then the column will be set to\nUNSIGNED and the spaces used by default to pad the field are\nreplaced with zeros. ZEROFILL is ignored in expressions or\nas part of a UNION. ZEROFILL is a non-standard MySQL and\nMariaDB enhancement.\n \nPRIMARY KEY Column Option\n \nUse PRIMARY KEY (or just KEY) to make a column a primary\nkey. A primary key is a special type of a unique key. There\ncan be at most one primary key per table, and it is\nimplicitly NOT NULL.\n \nSpecifying a column as a unique key creates a unique index\non that column. See the Index Definitions section below for\nmore information.\n \nUNIQUE KEY Column Option\n \nUse UNIQUE KEY (or just UNIQUE) to specify that all values\nin the column\nmust be distinct from each other. Unless the column is NOT\nNULL, there may be\nmultiple rows with NULL in the column. \n \nSpecifying a column as a unique key creates a unique index\non that column. See the Index Definitions section below for\nmore information.\n \nCOMMENT Column Option\n \nYou can provide a comment for each column using the COMMENT\nclause. The maximum length is 1024 characters (it was 255\ncharacters before MariaDB 5.5). Use\nthe SHOW FULL COLUMNS statement to see column comments.\n \nGenerated Columns\n \nA generated column is a column in a table that cannot\nexplicitly be set to a specific value in a DML query.\nInstead, its value is automatically generated based on an\nexpression. This expression might generate the value based\non the values of other columns in the table, or it might\ngenerate the value by calling built-in functions or\nuser-defined functions (UDFs).\n \nThere are two types of generated columns:\nPERSISTENT or STORED: This type\'s value is actually stored\nin the table.\nVIRTUAL: This type\'s value is not stored at all. Instead,\nthe value is generated dynamically when the table is\nqueried. This type is the default.\n \nGenerated columns are also sometimes called computed columns\nor virtual columns.\n \nFor a complete description about generated columns and their\nlimitations, see Generated (Virtual and Persistent/Stored)\nColumns.\n \nCOLUMN_FORMAT\n \nCOLUMN_FORMAT is only used by MySQL Cluster, and is silently\nignored in MariaDB.\n \nCOMPRESSED\n \nCertain columns may be compressed. See Storage-Engine\nIndependent Column Compression.\n \nINVISIBLE\n \nColumns may be made invisible, and hidden in certain\ncontexts. See Invisible Columns.\n \nWITH SYSTEM VERSIONING Column Option\n \nColumns may be explicitly marked as included from system\nversioning. See System-versioned tables for details.\n \nWITHOUT SYSTEM VERSIONING Column Option\n \nColumns may be explicitly marked as excluded from system\nversioning. See System-versioned tables for details.\n \nIndex Definitions\n \nindex_definition:\n {INDEX|KEY} [index_name] [index_type] (index_col_name,...)\n[index_option] ...\n | {FULLTEXT|SPATIAL} [INDEX|KEY] [index_name]\n(index_col_name,...) [index_option] ...\n | [CONSTRAINT [symbol]] PRIMARY KEY [index_type]\n(index_col_name,...) [index_option] ...\n | [CONSTRAINT [symbol]] UNIQUE [INDEX|KEY] [index_name]\n[index_type] (index_col_name,...) [index_option] ...\n | [CONSTRAINT [symbol]] FOREIGN KEY [index_name]\n(index_col_name,...) reference_definition\n \nindex_col_name:\n col_name [(length)] [ASC | DESC]\n \nindex_type:\n USING {BTREE | HASH | RTREE}\n \nindex_option:\n KEY_BLOCK_SIZE [=] value\n | index_type\n | WITH PARSER parser_name\n | COMMENT \'string\'\n | CLUSTERING={YES| NO}\n \nreference_definition:\n REFERENCES tbl_name (index_col_name,...)\n [MATCH FULL | MATCH PARTIAL | MATCH SIMPLE]\n [ON DELETE reference_option]\n [ON UPDATE reference_option]\n \nreference_option:\n RESTRICT | CASCADE | SET NULL | NO ACTION\nINDEX and KEY are synonyms. \n \nIndex names are optional, if not specified an automatic name\nwill be assigned. Index name are needed to drop indexes and\nappear in error messages when a constraint is violated.\n \nIndex Categories\n \nPlain Indexes\n \nPlain indexes are regular indexes that are not unique, and\nare not acting as a primary key or a foreign key. They are\nalso not the \"specialized\" FULLTEXT or SPATIAL indexes.\n \nSee Getting Started with Indexes: Plain Indexes for more\ninformation.\n \nPRIMARY KEY\n \nFor PRIMARY KEY indexes, you can specify a name for the\nindex, but it is silently ignored, and the name of the index\nis always PRIMARY.\n \nSee Getting Started with Indexes: Primary Key for more\ninformation.\n \nUNIQUE\n \nThe UNIQUE keyword means that the index will not accept\nduplicated values, except for NULLs. An error will raise if\nyou try to insert duplicate values in a UNIQUE index.\n \nFor UNIQUE indexes, you can specify a name for the\nconstraint, using the CONSTRAINT keyword. That name will be\nused in error messages.\n \nSee Getting Started with Indexes: Unique Index for more\ninformation.\n \nFOREIGN KEY\n \nFor FOREIGN KEY indexes, a reference definition must be\nprovided.\n \nFor FOREIGN KEY indexes, you can specify a name for the\nconstraint, using the CONSTRAINT keyword. That name will be\nused in error messages.\n \nFirst, you have to specify the name of the target (parent)\ntable and a column or a column list which must be indexed\nand whose values must match to the foreign key\'s values.\nThe MATCH clause is accepted to improve the compatibility\nwith other DBMS\'s, but has no meaning in MariaDB. The ON\nDELETE and ON UPDATE clauses specify what must be done when\na DELETE (or a REPLACE) statements attempts to delete a\nreferenced row from the parent table, and when an UPDATE\nstatement attempts to modify the referenced foreign key\ncolumns in a parent table row, respectively. The following\noptions are allowed:\nRESTRICT: The delete/update operation is not performed. The\nstatement terminates with a 1451 error (SQLSTATE \'2300\').\nNO ACTION: Synonym for RESTRICT.\nCASCADE: The delete/update operation is performed in both\ntables.\nSET NULL: The update or delete goes ahead in the parent\ntable, and the corresponding foreign key fields in the child\ntable are set to NULL. (They must not be defined as NOT NULL\nfor this to succeed).\nSET DEFAULT: This option is currently implemented only for\nthe PBXT storage engine, which is disabled by default and no\nlonger maintained. It sets the child table\'s foreign key\nfields to their DEFAULT values when the referenced parent\ntable key entries are updated or deleted.\n \nIf either clause is omitted, the default behavior for the\nomitted clause is RESTRICT.\n \nSee Foreign Keys for more information.\n \nFULLTEXT\n \nUse the FULLTEXT keyword to create full-text indexes.\n \nSee Full-Text Indexes for more information.\n \nSPATIAL\n \nUse the SPATIAL keyword to create geometric indexes.\n \nSee SPATIAL INDEX for more information.\n \nIndex Options\n \nKEY_BLOCK_SIZE Index Option\n \nThe KEY_BLOCK_SIZE index option is similar to the\nKEY_BLOCK_SIZE table option.\n \nWith the InnoDB storage engine, if you specify a non-zero\nvalue for the KEY_BLOCK_SIZE table option for the whole\ntable, then the table will implicitly be created with the\nROW_FORMAT table option set to COMPRESSED. However, this\ndoes not happen if you just set the KEY_BLOCK_SIZE index\noption for one or more indexes in the table. The InnoDB\nstorage engine ignores the KEY_BLOCK_SIZE index option.\nHowever, the SHOW CREATE TABLE statement may still report it\nfor the index.\n \nFor information about the KEY_BLOCK_SIZE index option, see\nthe KEY_BLOCK_SIZE table option below.\n \nIndex Types\n \nEach storage engine supports some or all index types. See\nStorage Engine Index Types for details on permitted index\ntypes for each storage engine.\n \nDifferent index types are optimized for different kind of\noperations:\nBTREE is the default type, and normally is the best choice.\nIt is supported by all storage engines. It can be used to\ncompare a column\'s value with a value using the =, >, >=,\n0) ,b int check (b> 0), constraint abc check (a>b));\n \nIf you use the second format and you don\'t give a name to\nthe constraint, then the constraint will get a auto\ngenerated name. This is done so that you can later delete\nthe constraint with ALTER TABLE DROP constraint_name.\n \nOne can disable all constraint expression checks by setting\nthe variable check_constraint_checks to OFF. This is useful\nfor example when loading a table that violates some\nconstraints that you want to later find and fix in SQL.\n \nSee CONSTRAINT for more information.\n \nTable Options\n \nFor each individual table you create (or alter), you can set\nsome table options. The general syntax for setting options\nis:\n \n  = , [ =  ...]\n \nThe equal sign is optional.\n \nSome options are supported by the server and can be used for\nall tables, no matter what storage engine they use; other\noptions can be specified for all storage engines, but have a\nmeaning only for some engines. Also, engines can extend\nCREATE TABLE with new options.\n \nIf the IGNORE_BAD_TABLE_OPTIONS SQL_MODE is enabled, wrong\ntable options generate a warning; otherwise, they generate\nan error.\n \ntable_option: \n [STORAGE] ENGINE [=] engine_name\n | AUTO_INCREMENT [=] value\n | AVG_ROW_LENGTH [=] value\n | [DEFAULT] CHARACTER SET [=] charset_name\n | CHECKSUM [=] {0 | 1}\n | [DEFAULT] COLLATE [=] collation_name\n | COMMENT [=] \'string\'\n | CONNECTION [=] \'connect_string\'\n | DATA DIRECTORY [=] \'absolute path to directory\'\n | DELAY_KEY_WRITE [=] {0 | 1}\n | ENCRYPTED [=] {YES | NO}\n | ENCRYPTION_KEY_ID [=] value\n | IETF_QUOTES [=] {YES | NO}\n | INDEX DIRECTORY [=] \'absolute path to directory\'\n | INSERT_METHOD [=] { NO | FIRST | LAST }\n | KEY_BLOCK_SIZE [=] value\n | MAX_ROWS [=] value\n | MIN_ROWS [=] value\n | PACK_KEYS [=] {0 | 1 | DEFAULT}\n | PAGE_CHECKSUM [=] {0 | 1}\n | PAGE_COMPRESSED [=] {0 | 1}\n | PAGE_COMPRESSION_LEVEL [=] {0 .. 9}\n | PASSWORD [=] \'string\'\n | ROW_FORMAT [=]\n{DEFAULT|DYNAMIC|FIXED|COMPRESSED|REDUNDANT|COMPACT|PAGE}\n | SEQUENCE [=] {0|1}\n | STATS_AUTO_RECALC [=] {DEFAULT|0|1}\n | STATS_PERSISTENT [=] {DEFAULT|0|1}\n | STATS_SAMPLE_PAGES [=] {DEFAULT|value}\n | TABLESPACE tablespace_name\n | TRANSACTIONAL [=] {0 | 1}\n | UNION [=] (tbl_name[,tbl_name]...)\n | WITH SYSTEM VERSIONING\n \n[STORAGE] ENGINE\n \n[STORAGE] ENGINE specifies a storage engine for the table.\nIf this option is not used, the default storage engine is\nused instead. That is, the storage_engine session option\nvalue if it is set, or the value specified for the\n--default-storage-engine mysqld startup options, or InnoDB.\nIf the specified storage engine is not installed and active,\nthe default value will be used, unless the\nNO_ENGINE_SUBSTITUTION SQL MODE is set (default since\nMariaDB 10.0). This is only true for CREATE TABLE, not for\nALTER TABLE. For a list of storage engines that are present\nin your server, issue a SHOW ENGINES.\n \nAUTO_INCREMENT\n \nAUTO_INCREMENT specifies the initial value for the\nAUTO_INCREMENT primary key. This works for MyISAM, Aria,\nInnoDB/XtraDB, MEMORY, and ARCHIVE tables. You can change\nthis option with ALTER TABLE, but in that case the new value\nmust be higher than the highest value which is present in\nthe AUTO_INCREMENT column. If the storage engine does not\nsupport this option, you can insert (and then delete) a row\nhaving the wanted value - 1 in the AUTO_INCREMENT column.\n \nAVG_ROW_LENGTH\n \nAVG_ROW_LENGTH is the average rows size. It only applies to\ntables using MyISAM and Aria storage engines that have the\nROW_FORMAT table option set to FIXED format.\n \nMyISAM uses MAX_ROWS and AVG_ROW_LENGTH to decide the\nmaximum size of a table (default: 256TB, or the maximum file\nsize allowed by the system).\n \n[DEFAULT] CHARACTER SET/CHARSET\n \n[DEFAULT] CHARACTER SET (or [DEFAULT] CHARSET) is used to\nset a default character set for the table. This is the\ncharacter set used for all columns where an explicit\ncharacter set is not specified. If this option is omitted or\nDEFAULT is specified, database\'s default character set will\nbe used. See Setting Character Sets and Collations for\ndetails on setting the character sets.\n \nCHECKSUM/TABLE_CHECKSUM\n \nCHECKSUM (or TABLE_CHECKSUM) can be set to 1 to maintain a\nlive checksum for all table\'s rows. This makes write\noperations slower, but CHECKSUM TABLE will be very fast.\nThis option is only supported for MyISAM and Aria tables.\n \n[DEFAULT] COLLATE\n \n[DEFAULT] COLLATE is used to set a default collation for the\ntable. This is the collation used for all columns where an\nexplicit character set is not specified. If this option is\nomitted or DEFAULT is specified, database\'s default option\nwill be used. See Setting Character Sets and Collations for\ndetails on setting the collations\n \nCOMMENT\n \nCOMMENT is a comment for the table. Maximum length is 2048\ncharacters (before mariaDB 5.5 it was 60 characters). Also\nused to define table parameters when creating a Spider\ntable.\n \nCONNECTION\n \nCONNECTION is used to specify a server name or a connection\nstring for a Spider, CONNECT, Federated or FederatedX table.\n \nDATA DIRECTORY/INDEX DIRECTORY\n \nDATA DIRECTORY and INDEX DIRECTORY were only supported for\nMyISAM and Aria, before MariaDB 5.5. Since 5.5, DATA\nDIRECTORY has also been supported by InnoDB if the\ninnodb_file_per_table server system variable is enabled, but\nonly in CREATE TABLE, not in ALTER TABLE. So, carefully\nchoose a path for InnoDB tables at creation time, because it\ncannot be changed without dropping and re-creating the\ntable. These options specify the paths for data files and\nindex files, respectively. If these options are omitted, the\ndatabase\'s directory will be used to store data files and\nindex files. Note that these table options do not work for\npartitioned tables (use the partition options instead), or\nif the server has been invoked with the\n--skip-symbolic-links startup option. To avoid the\noverwriting of old files with the same name that could be\npresent in the directories, you can use the\n--keep_files_on_create option (an error will be issued if\nfiles already exist). These options are ignored if the\nNO_DIR_IN_CREATE SQL_MODE is enabled (useful for replication\nslaves). Also note that symbolic links cannot be used for\nInnoDB tables.\n \nDATA DIRECTORY works by creating symlinks from where the\ntable would normally have been (inside the datadir) to where\nthe option specifies. For security reasons, to avoid\nbypassing the privilege system, the server does not permit\nsymlinks inside the datadir. Therefore, DATA DIRECTORY\ncannot be used to specify a location inside the datadir. An\nattempt to do so will result in an error 1210 (HY000)\nIncorrect arguments to DATA DIRECTORY.\n \nDELAY_KEY_WRITE\n \nDELAY_KEY_WRITE is supported by MyISAM and Aria, and can be\nset to 1 to speed up write operations. In that case, when\ndata are modified, the indexes are not updated until the\ntable is closed. Writing the changes to the index file\naltogether can be much faster. However, note that this\noption is applied only if the delay_key_write server\nvariable is set to \'ON\'. If it is \'OFF\' the delayed\nindex writes are always disabled, and if it is \'ALL\' the\ndelayed index writes are always used, disregarding the value\nof DELAY_KEY_WRITE.\n \nENCRYPTED\n \nThe ENCRYPTED table option was added in MariaDB 10.1.4\n \nThe ENCRYPTED table option can be used to manually set the\nencryption status of an InnoDB table. See InnoDB / XtraDB\nEncryption for more information.\n \nAria does not currently support the ENCRYPTED table option.\nSee MDEV-18049 about that.\n \nSee Data-at-Rest Encryption for more information.\n \nENCRYPTION_KEY_ID\n \nThe ENCRYPTION_KEY_ID table option was added in MariaDB\n10.1.4\n \nThe ENCRYPTION_KEY_ID table option can be used to manually\nset the encryption key of an InnoDB table. See InnoDB /\nXtraDB Encryption for more information.\n \nAria does not currently support the ENCRYPTION_KEY_ID table\noption. See MDEV-18049 about that.\n \nSee Data-at-Rest Encryption for more information.\n \nIETF_QUOTES\n \nThe IETF_QUOTES option was added in MariaDB 10.1.8\n \nFor the CSV storage engine, the IETF_QUOTES option, when set\nto YES, enables IETF-compatible parsing of embedded quote\nand comma characters. Enabling this option for a table\nimproves compatibility with other tools that use CSV, but is\nnot compatible with MySQL CSV tables, or MariaDB CSV tables\ncreated without this option. Disabled by default.\n \nINSERT_METHOD\n \nINSERT_METHOD is only used with MERGE tables. This option\ndetermines in which underlying table the new rows should be\ninserted. If you set it to \'NO\' (which is the default) no\nnew rows can be added to the table (but you will still be\nable to perform INSERTs directly against the underlying\ntables). FIRST means that the rows are inserted into the\nfirst table, and LAST means that thet are inserted into the\nlast table.\n \nKEY_BLOCK_SIZE\n \nKEY_BLOCK_SIZE is used to determine the size of key blocks,\nin bytes or kilobytes. However, this value is just a hint,\nand the storage engine could modify or ignore it. If\nKEY_BLOCK_SIZE is set to 0, the storage engine\'s default\nvalue will be used.\n \nWith the InnoDB storage engine, if you specify a non-zero\nvalue for the KEY_BLOCK_SIZE table option for the whole\ntable, then the table will implicitly be created with the\nROW_FORMAT table option set to COMPRESSED.\n \nMIN_ROWS/MAX_ROWS\n \nMIN_ROWS and MAX_ROWS let the storage engine know how many\nrows you are planning to store as a minimum and as a\nmaximum. These values will not be used as real limits, but\nthey help the storage engine to optimize the table. MIN_ROWS\nis only used by MEMORY storage engine to decide the minimum\nmemory that is always allocated. MAX_ROWS is used to decide\nthe minimum size for indexes.\n \nPACK_KEYS\n \nPACK_KEYS can be used to determine whether the indexes will\nbe compressed. Set it to 1 to compress all keys. With a\nvalue of 0, compression will not be used. With the DEFAULT\nvalue, only long strings will be compressed. Uncompressed\nkeys are faster.\n \nPAGE_CHECKSUM\n \nPAGE_CHECKSUM is only applicable to Aria tables, and\ndetermines whether indexes and data should use page\nchecksums for extra safety. \n \nPAGE_COMPRESSED\n \nPAGE_COMPRESSED is used to enable InnoDB page compression\nfor InnoDB tables.\n \nPAGE_COMPRESSION_LEVEL\n \nPAGE_COMPRESSION_LEVEL is used to set the compression level\nfor InnoDB page compression for InnoDB tables. The table\nmust also have the PAGE_COMPRESSED table option set to 1.\n \nValid values for PAGE_COMPRESSION_LEVEL are 1 (the best\nspeed) through 9 (the best compression), .\n \nPASSWORD\n \nPASSWORD is unused.\n \nRAID_TYPE\n \nRAID_TYPE is an obsolete option, as the raid support has\nbeen disabled since MySQL 5.0.\n \nROW_FORMAT\n \nThe ROW_FORMAT table option specifies the row format for the\ndata file. Possible values are engine-dependent.\n \nSupported MyISAM Row Formats\n \nFor MyISAM, the supported row formats are: \nFIXED\nDYNAMIC\nCOMPRESSED\n \nThe COMPRESSED row format can only be set by the myisampack\ncommand line tool.\n \nSee MyISAM Storage Formats for more information.\n \nSupported Aria Row Formats\n \nFor Aria, the supported row formats are:\nPAGE\nFIXED\nDYNAMIC.\n \nSee Aria Storage Formats for more information.\n \nSupported InnoDB Row Formats\n \nFor InnoDB/XtraDB, the supported row formats are:\nCOMPACT\nREDUNDANT\nCOMPRESSED\nDYNAMIC.\n \nIf the ROW_FORMAT table option is set to FIXED for an InnoDB\ntable, then the server will either return an error or a\nwarning depending on the value of the innodb_strict_mode\nsystem variable. If the innodb_strict_mode system variable\nis set to OFF, then a warning is issued, and MariaDB will\ncreate the table using the default row format for the\nspecific MariaDB server version. If the innodb_strict_mode\nsystem variable is set to ON, then an error will be raised.\n \nSee XtraDB/InnoDB Storage Formats for more information.\n \nOther Storage Engines and ROW_FORMAT\n \nOther storage engines do not support the ROW_FORMAT table\noption.\n \nSEQUENCE\n \nIf the table is a sequence, then it will have the SEQUENCE\nset to 1.\n \nSTATS_AUTO_RECALC\n \nSTATS_AUTO_RECALC is available only in MariaDB 10.0+. It\nindicates whether to automatically recalculate persistent\nstatistics (see STATS_PERSISTENT, below) for an InnoDB\ntable.\nIf set to 1, statistics will be recalculated when more than\n10% of the data has changed. When set to 0, stats will be\nrecalculated only when an ANALYZE TABLE is run. If set to\nDEFAULT, or left out, the value set by the\ninnodb_stats_auto_recalc system variable applies. See InnoDB\nPersistent Statistics.\n \nSTATS_PERSISTENT\n \nSTATS_PERSISTENT is available only in MariaDB 10.0+. It\nindicates whether the InnoDB statistics created by ANALYZE\nTABLE will remain on disk or not. It can be set to 1 (on\ndisk), 0 (not on disk, the pre-MariaDB 10 behavior), or\nDEFAULT (the same as leaving out the option), in which case\nthe value set by the innodb_stats_persistent system variable\nwill apply. Persistent statistics stored on disk allow the\nstatistics to survive server restarts, and provide better\nquery plan stability. See InnoDB Persistent Statistics.\n \nSTATS_SAMPLE_PAGES\n \nSTATS_SAMPLE_PAGES is available only in MariaDB 10.0+. It\nindicates how many pages are used to sample index\nstatistics. If 0 or DEFAULT, the default value, the\ninnodb_stats_sample_pages value is used. See InnoDB\nPersistent Statistics.\n \nTRANSACTIONAL\n \nTRANSACTIONAL is only applicable for Aria tables. In future\nAria tables created with this option will be fully\ntransactional, but currently this provides a form of crash\nprotection. See Aria Storage Engine for more details.\n \nUNION\n \nUNION must be specified when you create a MERGE table. This\noption contains a comma-separated list of MyISAM tables\nwhich are accessed by the new table. The list is enclosed\nbetween parenthesis. Example: UNION = (t1,t2)\n \nWITH SYSTEM VERSIONING\n \nWITH SYSTEM VERSIONING is used for creating System-versioned\ntables.\n \nPartitions\n \npartition_options:\n PARTITION BY\n { [LINEAR] HASH(expr)\n | [LINEAR] KEY(column_list)\n | RANGE(expr)\n | LIST(expr)\n | SYSTEM_TIME [INTERVAL time_quantity time_unit] [LIMIT\nnum] }\n [PARTITIONS num]\n [SUBPARTITION BY\n { [LINEAR] HASH(expr)\n | [LINEAR] KEY(column_list) }\n [SUBPARTITIONS num]\n ]\n [(partition_definition [, partition_definition] ...)]\n \npartition_definition:\n PARTITION partition_name\n [VALUES {LESS THAN {(expr) | MAXVALUE} | IN (value_list)}]\n [[STORAGE] ENGINE [=] engine_name]\n [COMMENT [=] \'comment_text\' ]\n [DATA DIRECTORY [=] \'data_dir\']\n [INDEX DIRECTORY [=] \'index_dir\']\n [MAX_ROWS [=] max_number_of_rows]\n [MIN_ROWS [=] min_number_of_rows]\n [TABLESPACE [=] tablespace_name]\n [NODEGROUP [=] node_group_id]\n [(subpartition_definition [, subpartition_definition] ...)]\n \nsubpartition_definition:\n SUBPARTITION logical_name\n [[STORAGE] ENGINE [=] engine_name]\n [COMMENT [=] \'comment_text\' ]\n [DATA DIRECTORY [=] \'data_dir\']\n [INDEX DIRECTORY [=] \'index_dir\']\n [MAX_ROWS [=] max_number_of_rows]\n [MIN_ROWS [=] min_number_of_rows]\n [TABLESPACE [=] tablespace_name]\n [NODEGROUP [=] node_group_id]\nIf the PARTITION BY clause is used, the table will be\npartitioned. A partition method must be explicitly indicated\nfor partitions and subpartitions. Partition methods are:\n[LINEAR] HASH creates a hash key which will be used to read\nand write rows. The partition function can be any valid SQL\nexpression which returns an INTEGER number. Thus, it is\npossible to use the HASH method on an integer column, or on\nfunctions which accept integer columns as an argument.\nHowever, VALUES LESS THAN and VALUES IN clauses can not be\nused with HASH. An example:\n \nCREATE TABLE t1 (a INT, b CHAR(5), c DATETIME)\n PARTITION BY HASH ( YEAR(c) );\n \n [LINEAR] HASH can be used for subpartitions, too.\n[LINEAR] KEY is similar to HASH, but the index has an even\ndistribution of data. Also, the expression can only be a\ncolumn or a list of columns. VALUES LESS THAN and VALUES IN\nclauses can not be used with KEY.\nRANGE partitions the rows using on a range of values, using\nthe VALUES LESS THAN operator. VALUES IN is not allowed with\nRANGE. The partition function can be any valid SQL\nexpression which returns a single value.\nLIST assignes partitions based on a table\'s column with a\nrestricted set of possible values. It is similar to RANGE,\nbut VALUES IN must be used for at least 1 columns, and\nVALUES LESS THAN is disallowed.\nSYSTEM_TIME partitioning is used for System-versioned tables\nto store historical data separately from current data.\n \nOnly HASH and KEY can be used for subpartitions, and they\ncan be [LINEAR].\n \nIt is possible to define up to 1024 partitions and\nsubpartitions.\n \nThe number of defined partitions can be optionally specified\nas PARTITION count. This can be done to avoid specifying all\npartitions individually. But you can also declare each\nindividual partition and, additionally, specify a PARTITIONS\ncount clause; in the case, the number of PARTITIONs must\nequal count.\n \nAlso see Partitioning Types Overview.\n \nSequences\n \nCREATE TABLE can also be used to create a SEQUENCE. See\nCREATE SEQUENCE and Sequence Overview.\n \nExamples\n-------- \ncreate table if not exists test (\na bigint auto_increment primary key,\nname varchar(128) charset utf8,\nkey name (name(32))\n) engine=InnoDB default charset latin1;\n \nThis example shows a couple of things:\nUsage of IF NOT EXISTS; If the table already existed, it\nwill not be created. There will not be any error for the\nclient, just a warning.\nHow to create a PRIMARY KEY that is automatically generated.\nHow to specify a table-specific character set and another\nfor a column.\nHow to create an index (name) that is only partly indexed\n(to save space).\n \nThe following clauses will work from MariaDB 10.2.1 only.\n \nCREATE TABLE t1(\n a int DEFAULT (1+1),\n b int DEFAULT (a+1),\n expires DATETIME DEFAULT(NOW() + INTERVAL 1 YEAR),\n x BLOB DEFAULT USER()\n);\n \n\n\nURL: https://mariadb.com/kb/en/create-table/', '', 'https://mariadb.com/kb/en/create-table/'),
(338, 'BACKUP STAGE', 26, 'BACKUP STAGE commands are a set of commands to make it\npossible to make an efficient external backup tool. \n \nThe BACKUP STAGE command was introduced in MariaDB 10.4.1.\n \nSyntax\n------ \nBACKUP STAGE [START | FLUSH | BLOCK_DDL | BLOCK_COMMIT | END\n]\n \nIn the following text, a transactional table means InnoDB or\n\"InnoDB-like engine with redo log that can lock redo purges\nand can be copied without locks by an outside process\".\n \nIn the text we refer to mariabackup as the backup tool to\nuse. However the description should work for any tools that\nsupport BACKUP STAGEs.\n \nGoals with BACKUP STAGE Commands\n \nTo be able to do a majority of the backup with the minimum\npossible server locks. Especially for transactional tables\n(InnoDB, MyRocks etc) there is only need for a very short\nblock of new commits while copying statistics and log\ntables.\nDDL are only needed to be blocked for a very short duration\nof the backup while mariabackup is copying the tables\naffected by DDL during the initial part of the backup.\nMost non transactional tables (those that are not in use)\nwill be copied during BACKUP STAGE START. The exceptions are\nsystem statistic and log tables that are not blocked during\nthe backup until BLOCK_COMMIT.\nShould work efficiently with backup tools that use disk\nsnapshots.\nShould work as efficiently as possible for all table types\nthat store data on the local disks.\nAs little copying as possible under higher level\nstages/locks. For example, .frm (dictionary) and .trn\n(trigger) files should be copying while copying the table\ndata.\n \nBACKUP STAGE Commands\n \nBACKUP STAGE START\n \nThings Done by STAGE START\n \nBlocks purge of redo files for storage engines that needs\nthis (Aria)\nStart logging of DDL commands into \'datadir\'/ddl.log. This\nmay take a short time as the command has to wait until there\nall now active DDL commands.\n \nmariabackup Under START\n \nmariabackup can, under START:\nCopy all transactional tables, aria_log_control, aria_log.#\nand\nother engines redo logs.\nCall BACKUP STAGE FLUSH while copying the last set of files.\n \nTo copy InnoDB tables, mariabackup has to start to watch the\nInnoDB backup redo log and copy all changes to the backup to\nbe able to run the redos later on in the final backup.\n \nBACKUP STAGE FLUSH\n \nThings Done by STAGE FLUSH\n \nFLUSH all changes for inactive non-transactional tables,\nexcept for statistics and log tables.\nClose all tables that are not in use, to ensure they are\nmarked as closed for the backup.\nBLOCK all new write locks for all non transactional tables\n(except statistics and log tables). The command will not\nwait for tables that are in use by read-only transactions.\n \nDDLs don\'t have to be blocked at this stage as they can\'t\ncause the table to be in an inconsistent state. This is true\nalso for non-transactional tables.\n \nmariabackup under STAGE_FLUSH\n \nmariabackup can, under STAGE FLUSH:\nCopy all non-transactional tables that are not in use. This\nlist of used tables can be found with SHOW OPEN TABLES\nCopy all new changes to the aria_log.# tables\n \nAt this point data for all old tables should have been\ncopied (except for some system tables).\n \nBACKUP STAGE BLOCK_DDL\n \nThings Done by BLOCK_DDL\n \nWait for all statements using write locked non-transactional\ntables to end.\nBlocks CREATE TABLE, DROP TABLE, TRUNCATE TABLE, and RENAME\nTABLE.\nBlocks also start off a new ALTER TABLE and the final rename\nphase of ALTER TABLE. Running ALTER TABLES are not blocked.\n \nmariabackup under BLOCK_DDL\n \nmariabackup can, under BLOCK_DDL:\nCopy the non-transactional tables that were in use during\nSTAGE FLUSH\nCopy new tables created before BLOCK DDL. The file names can\nbe read from ddl.log. The log also allows the backup to\nexecute renames of files for which RENAME TABLE was done\ninstead of copying them.\nAdd markers to backup stream of tables that were dropped\nduring the earlier BACKUP STAGEs.\nCopy changes to system log tables (this is easy as these are\nappend only)\nCopy changes to aria_log.# tables (this is easy as these are\nappend only)\n \nBACKUP STAGE BLOCK_COMMIT\n \nThings Done by BLOCK_COMMIT\n \nLock the binary log and commit/rollback to ensure that no\nchanges are committed to any tables. If there are active\ncommits or data to be copied to the binary log this will be\nallowed to finish.\nThis doesn\'t lock temporary tables that are not used by\nreplication. However these will be blocked when it\'s time\nto write to the binary log.\nLock system log tables and statistics tables, flush them and\nmark them closed.\n \nWhen the BLOCK_COMMIT\'s stages return, this is the \'backup\ntime\'. Everything committed will be in the backup and\neverything not committed will roll back.\n \nTransactional engines will continue to do changes to the\nredo log during the BLOCK COMMIT stage, but this is not\nimportant as all of these will roll back later as the\nchanges will not be committed.\n \nmariabackup Under BLOCK_COMMIT\n \nmariabackup can, under BLOCK_COMMIT:\nCopy the last changes to the redo files for InnoDB and Aria\n(aria_log.#), and the part of the binary log that was not\ncopied before.\nMyRocks files can also be hard linked to the backup\ndirectory\nEnd of system log tables (slow_log and general_log) and all\nstatistics tables (table_stats, column_stats and\nindex_stats) should also be copied.\n \nBACKUP STAGE END\n \nThings Done by END\n \nEnd DDL logging\nFree resources\n \nmariabackup After END\n \nmariabackup can, after END:\nCopy MyRocks tables\n \nUsing BACKUP STAGE With Disk Snapshots\n \nA tool that is using disk snapshots for copying MariaDB\nfiles should do\n \nBACKUP STAGE START\nBACKUP STAGE BLOCK_COMMIT\n \ndisk snapshot\n \nBACKUP STAGE END\n \nThe above ensures that all non-transactional tables are\nproperly flushed to disk before the snapshot is done.\nUsing BACKUP STAGEs is also more efficient than using FLUSH\nTABLES WITH READ LOCK as the above set of commands will not\nblock or be blocked by write operations to transactional\ntables.\n \nNote that when the backup is completed, one should delete\nall files with the \"#sql\" prefix, as these are files used\nby concurrent running ALTER TABLE. Note that InnoDB will on\nserver restart automatically delete any tables with the\n\"#sql\" prefix.\n \nPrivileges\n \nBACKUP STAGE requires the RELOAD privilege.\n \nOther Things\n \nOnly one connection can run BACKUP STAGE START. If a second\nconnection tries, it will wait until the first one has\nexecuted BACKUP STAGE END.\nIf the user skips a BACKUP STAGE, all intermediate backup\nstages will automatically be run. This will allow us to add\nnew BACKUP STAGEs in the future with even more precise locks\nwithout causing problems for tools using an earlier version\nof BACKUP STAGEs\nWhile opening files for a table, mariabackup should use\nBACKUP LOCK to ensure that all files for a table are from\nthe same generation, that is, created at the same time.\nOne can use the max_statement_time or lock_wait_timeout\nvariables to ensure that a BACKUP STAGE command doesn\'t\nblock the server too long.\nDDL logging will only be available in MariaDB Enterprise\nserver 10.2, 10.3 and 10.4.\n \n\n\nURL: https://mariadb.com/kb/en/backup-stage/', '', 'https://mariadb.com/kb/en/backup-stage/'),
(666, 'CREATE TABLESPACE', 39, 'The CREATE TABLESPACE statement is not supported by MariaDB.\nIt was originally inherited from MySQL NDB Cluster. In MySQL\n5.7 and later, the statement is also supported for InnoDB.\nHowever, MariaDB has chosen not to include that specific\nfeature. See MDEV-19294 for more information.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/create-tablespace/', '', 'https://mariadb.com/kb/en/create-tablespace/'),
(339, 'BACKUP LOCK', 26, 'The BACKUP LOCK command was introduced in MariaDB 10.4.2.\n \nBACKUP LOCK blocks a table from DDL statements. This is\nmainly intended to be used by tools like mariabackup that\nneed to ensure there are no DDLs on a table while the table\nfiles are opened. For example, for an Aria table that stores\ndata in 3 files with extensions .frm, .MAI and .MAD.\nNormal read/write operations can continue as normal.\n \nSyntax\n------ \nTo lock a table:\n \nBACKUP LOCK table_name\n \nTo unlock a table:\n \nBACKUP UNLOCK\n \nUsage in a Backup Tool\n \nBACKUP LOCK [database.]table_name;\n - Open all files related to a table (for example, t.frm,\nt.MAI and t.MYD)\nBACKUP UNLOCK;\n- Copy data\n- Close files\n \nThis ensures that all files are from the same generation,\nthat is created at the same time by the MariaDB server.\n \nPrivileges\n \nBACKUP LOCK requires the RELOAD privilege.\n \nNotes\n \nThe idea is that the BACKUP LOCK should be held for as short\na time as possible by the backup tool. The time to take an\nuncontested lock is very short! One can easily do 50,000\nlocks/unlocks per second on low end hardware.\nOne should use different connections for BACKUP STAGE\ncommands and BACKUP LOCK. \n \nImplementation\n \nInternally, BACKUP LOCK is implemented by taking an\nMDLSHARED_HIGH_PRIO MDL lock on the table object, which\nprotects the table from any DDL operations.\n \n\n\nURL: https://mariadb.com/kb/en/backup-lock/', '', 'https://mariadb.com/kb/en/backup-lock/'),
(341, 'CACHE INDEX', 26, 'Syntax\n------ \nCACHE INDEX \n tbl_index_list [, tbl_index_list] ...\n IN key_cache_name \n \ntbl_index_list:\n tbl_name [[INDEX|KEY] (index_name[, index_name] ...)]\n \nDescription\n----------- \nThe CACHE INDEX statement assigns table indexes to a\nspecific key\ncache. It is used only for MyISAM tables.\n \nA default key cache exists and cannot be destroyed. To\ncreate more key caches, the key_buffer_size server system\nvariable.\n \nThe associations between tables indexes and key caches are\nlost on server restart. To recreate them automatically, it\nis necessary to configure caches in a configuration file and\ninclude some CACHE INDEX (and optionally LOAD INDEX)\nstatements in the init file.\n \nExamples\n-------- \nThe following statement assigns indexes from the tables t1,\nt2, and t3\nto the key cache named hot_cache:\n \nCACHE INDEX t1, t2, t3 IN hot_cache;\n+---------+--------------------+----------+----------+\n| Table | Op | Msg_type | Msg_text |\n+---------+--------------------+----------+----------+\n| test.t1 | assign_to_keycache | status | OK |\n| test.t2 | assign_to_keycache | status | OK |\n| test.t3 | assign_to_keycache | status | OK |\n+---------+--------------------+----------+----------+\n \nImplementation (for MyISAM)\n \nNormally CACHE INDEX should not take a long time to execute.\nInternally it\'s implemented the following way:\nFind the right key cache (under\nLOCK_global_system_variables)\nOpen the table with a TL_READ_NO_INSERT lock.\nFlush the original key cache for the given file (under key\ncache lock)\nFlush the new key cache for the given file (safety)\nMove the file to the new key cache (under file share lock)\n \nThe only possible long operations are getting the locks for\nthe table and flushing the original key cache, if there were\nmany key blocks for the file in it.\n \nWe plan to also add CACHE INDEX for Aria tables if there is\na need for this.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/cache-index/', '', 'https://mariadb.com/kb/en/cache-index/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(344, 'FLUSH TABLES FOR EXPORT', 26, 'FLUSH TABLES ... FOR EXPORT was introduced in MariaDB\n10.0.8.\n \nSyntax\n------ \nFLUSH TABLES table_name [, table_name] FOR EXPORT\n \nDescription\n----------- \nFLUSH TABLES ... FOR EXPORT flushes changes to the specified\ntables to disk so that binary copies can be made while the\nserver is still running. This works for Archive, Aria, CSV,\nInnoDB, MyISAM, MERGE, and XtraDB tables.\n \nThe table is read locked until one has issued UNLOCK TABLES.\n \nIf a storage engine does not support FLUSH TABLES FOR\nEXPORT, a 1031 error (SQLSTATE \'HY000\') is produced.\n \nIf FLUSH TABLES ... FOR EXPORT is in effect in the session,\nthe following statements will produce an error if attempted:\nFLUSH TABLES WITH READ LOCK\nFLUSH TABLES ... WITH READ LOCK\nFLUSH TABLES ... FOR EXPORT\nAny statement trying to update any table\n \nIf any of the following statements is in effect in the\nsession, attempting  FLUSH TABLES ... FOR EXPORT will\nproduce an error.\nFLUSH TABLES ... WITH READ LOCK\nFLUSH TABLES ... FOR EXPORT\nLOCK TABLES ... READ\nLOCK TABLES ... WRITE\n \nFLUSH FOR EXPORT is not written to the binary log.\n \nThis statement requires the RELOAD and the LOCK TABLES\nprivileges.\n \nIf one of the specified tables cannot be locked, none of the\ntables will be locked.\n \nIf a table does not exist, an error like the following will\nbe produced:\n \nERROR 1146 (42S02): Table \'test.xxx\' doesn\'t exist\n \nIf a table is a view, an error like the following will be\nproduced:\n \nERROR 1347 (HY000): \'test.v\' is not BASE TABLE\n \nExample\n \nFLUSH TABLES test.t1 FOR EXPORT;\n# Copy files related to the table (see below)\nUNLOCK TABLES;\n \nFor a full description, please see copying MariaDB tables.\n \n\n\nURL: https://mariadb.com/kb/en/flush-tables-for-export/', '', 'https://mariadb.com/kb/en/flush-tables-for-export/'),
(668, 'CREATE VIEW', 39, 'Syntax\n------ \nCREATE\n [OR REPLACE]\n [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}]\n [DEFINER = { user | CURRENT_USER | role | CURRENT_ROLE }]\n [SQL SECURITY { DEFINER | INVOKER }]\n VIEW [IF NOT EXISTS] view_name [(column_list)]\n AS select_statement\n [WITH [CASCADED | LOCAL] CHECK OPTION]\n \nDescription\n----------- \nThe CREATE VIEW statement creates a new view, or replaces an\nexisting\none if the OR REPLACE clause is given. If the view does not\nexist, CREATE OR\nREPLACE VIEW is the same as CREATE VIEW. If the view does\nexist, CREATE OR\nREPLACE VIEW is the same as ALTER VIEW.\n \nThe select_statement is a SELECT statement that provides the\ndefinition of\nthe view. (When you select from the view, you select in\neffect using the SELECT\nstatement.) select_statement can select from base tables or\nother views.\n \nThe view definition is \"frozen\" at creation time, so\nchanges to the underlying\ntables afterwards do not affect the view definition. For\nexample, if a view is\ndefined as SELECT * on a table, new columns added to the\ntable later do not\nbecome part of the view. A SHOW CREATE VIEW shows that\nsuch queries are rewritten and column names are included in\nthe view\ndefinition.\n \nThe view definition must be a query that does not return\nerrors at view\ncreation times. However, the base tables used by the views\nmight be altered\nlater and the query may not be valid anymore. In this case,\nquerying the view\nwill result in an error. CHECK TABLE helps in finding this\nkind\nof problems.\n \nThe ALGORITHM clause affects how MariaDB processes the\nview. The DEFINER and SQL SECURITY clauses specify the\nsecurity context to be\nused when checking access privileges at view invocation\ntime. The WITH CHECK\nOPTION clause can be given to constrain inserts or updates\nto rows in tables\nreferenced by the view. These clauses are described later in\nthis section.\n \nThe CREATE VIEW statement requires the CREATE VIEW privilege\nfor the\nview, and some privilege for each column selected by the\nSELECT\nstatement. For columns used elsewhere in the SELECT\nstatement you must\nhave the SELECT privilege. If the OR REPLACE clause is\npresent, you\nmust also have the DROP privilege for the view.\n \nA view belongs to a database. By default, a new view is\ncreated in the\ndefault database. To create the view explicitly in a given\ndatabase,\nspecify the name as db_name.view_name when you create it.\n \nCREATE VIEW test.v AS SELECT * FROM t;\n \nBase tables and views share the same namespace within a\ndatabase, so a\ndatabase cannot contain a base table and a view that have\nthe same\nname.\n \nViews must have unique column names with no duplicates, just\nlike base\ntables. By default, the names of the columns retrieved by\nthe SELECT\nstatement are used for the view column names. To define\nexplicit names\nfor the view columns, the optional column_list clause can be\ngiven as\na list of comma-separated identifiers. The number of names\nin\ncolumn_list must be the same as the number of columns\nretrieved by the\nSELECT statement.\n \nMySQL until 5.1.28\n \nPrior to MySQL 5.1.29, When you modify an existing view, the\ncurrent view definition is backed up and saved. It is stored\nin that\ntable\'s database directory, in a subdirectory named arc.\nThe backup\nfile for a view v is named v.frm-00001. If you alter the\nview again,\nthe next backup is named v.frm-00002. The three latest view\nbackup\ndefinitions are stored. Backed up view definitions are not\npreserved\nby mysqldump, or any other such programs, but you can retain\nthem\nusing a file copy operation. However, they are not needed\nfor anything\nbut to provide you with a backup of your previous view\ndefinition. It\nis safe to remove these backup definitions, but only while\nmysqld is\nnot running. If you delete the arc subdirectory or its files\nwhile\nmysqld is running, you will receive an error the next time\nyou try to\nalter the view: \n \nMariaDB [test]> ALTER VIEW v AS SELECT * FROM t; \nERROR 6 (HY000): Error on delete of\n\'.\\test\\arc/v.frm-0004\' (Errcode: 2)\n \nColumns retrieved by the SELECT statement can be simple\nreferences to\ntable columns. They can also be expressions that use\nfunctions,\nconstant values, operators, and so forth.\n \nUnqualified table or view names in the SELECT statement are\ninterpreted with respect to the default database. A view can\nrefer to\ntables or views in other databases by qualifying the table\nor view\nname with the proper database name.\n \nA view can be created from many kinds of SELECT statements.\nIt can\nrefer to base tables or other views. It can use joins,\nUNION, and\nsubqueries. The SELECT need not even refer to any tables.\nThe\nfollowing example defines a view that selects two columns\nfrom another\ntable, as well as an expression calculated from those\ncolumns:\n \nCREATE TABLE t (qty INT, price INT);\n \nINSERT INTO t VALUES(3, 50);\n \nCREATE VIEW v AS SELECT qty, price, qty*price AS value FROM\nt;\n \nSELECT * FROM v;\n+------+-------+-------+\n| qty | price | value |\n+------+-------+-------+\n| 3 | 50 | 150 |\n+------+-------+-------+\n \nA view definition is subject to the following restrictions:\nThe SELECT statement cannot contain a subquery in the FROM\nclause.\nThe SELECT statement cannot refer to system or user\nvariables.\nWithin a stored program, the definition cannot refer to\nprogram parameters or local variables.\nThe SELECT statement cannot refer to prepared statement\nparameters.\nAny table or view referred to in the definition must exist.\nHowever, after a view has been created, it is possible to\ndrop a table or view that the definition refers to. In this\ncase, use of the view results in an error. To check a view\ndefinition for problems of this kind, use the CHECK TABLE\nstatement.\nThe definition cannot refer to a TEMPORARY table, and you\ncannot create a TEMPORARY view.\nAny tables named in the view definition must exist at\ndefinition time.\nYou cannot associate a trigger with a view.\nFor valid identifiers to use as view names, see Identifier\nNames.\n \nORDER BY is allowed in a view definition, but it is ignored\nif you\nselect from a view using a statement that has its own ORDER\nBY.\n \nFor other options or clauses in the definition, they are\nadded to the\noptions or clauses of the statement that references the\nview, but the\neffect is undefined. For example, if a view definition\nincludes a\nLIMIT clause, and you select from the view using a statement\nthat has\nits own LIMIT clause, it is undefined which limit applies.\nThis same\nprinciple applies to options such as ALL, DISTINCT, or\nSQL_SMALL_RESULT that follow the SELECT keyword, and to\nclauses such\nas INTO, FOR UPDATE, and LOCK IN SHARE MODE.\n \nThe PROCEDURE clause cannot be used in a view definition,\nand it cannot be used if a view is referenced in the FROM\nclause.\n \nIf you create a view and then change the query processing\nenvironment\nby changing system variables, that may affect the results\nthat you get\nfrom the view:\n \nCREATE VIEW v (mycol) AS SELECT \'abc\';\n \nSET sql_mode = \'\';\n \nSELECT \"mycol\" FROM v;\n+-------+\n| mycol |\n+-------+\n| mycol | \n+-------+\n \nSET sql_mode = \'ANSI_QUOTES\';\n \nSELECT \"mycol\" FROM v;\n+-------+\n| mycol |\n+-------+\n| abc | \n+-------+\n \nThe DEFINER and SQL SECURITY clauses determine which MariaDB\naccount to\nuse when checking access privileges for the view when a\nstatement is\nexecuted that references the view. They were added in MySQL\n5.1.2.\nThe legal SQL SECURITY characteristic values are DEFINER and\nINVOKER.\nThese indicate that the required privileges must be held by\nthe user\nwho defined or invoked the view, respectively. The default\nSQL\nSECURITY value is DEFINER.\n \nIf a user value is given for the DEFINER clause, it should\nbe a MariaDB\naccount in \'user_name\'@\'host_name\' format (the same\nformat used in the\nGRANT statement). The user_name and host_name values both\nare\nrequired. The definer can also be given as CURRENT_USER or\nCURRENT_USER(). The default DEFINER value is the user who\nexecutes the\nCREATE VIEW statement. This is the same as specifying\nDEFINER =\nCURRENT_USER explicitly.\n \nIf you specify the DEFINER clause, these rules determine the\nlegal\nDEFINER user values:\nIf you do not have the SUPER privilege, the only legal user\nvalue is your own account, either specified literally or by\nusing CURRENT_USER. You cannot set the definer to some other\naccount.\nIf you have the SUPER privilege, you can specify any\nsyntactically legal account name. If the account does not\nactually exist, a warning is generated.\nIf the SQL SECURITY value is DEFINER but the definer account\ndoes not exist when the view is referenced, an error occurs.\n \nWithin a view definition, CURRENT_USER returns the view\'s\nDEFINER\nvalue by default. Before MySQL 5.1.12, and for views\ndefined with the SQL SECURITY INVOKER characteristic,\nCURRENT_USER\nreturns the account for the view\'s invoker. For information\nabout user\nauditing within views, see\nhttp://dev.mysql.com/doc/refman/5.1/en/account-activity-auditing.html.\n \nWithin a stored routine that is defined with the SQL\nSECURITY DEFINER\ncharacteristic, CURRENT_USER returns the routine\'s DEFINER\nvalue. This\nalso affects a view defined within such a program, if the\nview\ndefinition contains a DEFINER value of CURRENT_USER.\n \nView privileges are checked like this:\nAt view definition time, the view creator must have the\nprivileges needed to use the top-level objects accessed by\nthe view. For example, if the view definition refers to\ntable columns, the creator must have privileges for the\ncolumns, as described previously. If the definition refers\nto a stored function, only the privileges needed to invoke\nthe function can be checked. The privileges required when\nthe function runs can be checked only as it executes: For\ndifferent invocations of the function, different execution\npaths within the function might be taken.\nWhen a view is referenced, privileges for objects accessed\nby the view are checked against the privileges held by the\nview creator or invoker, depending on whether the SQL\nSECURITY characteristic is DEFINER or INVOKER, respectively.\nIf reference to a view causes execution of a stored\nfunction, privilege checking for statements executed within\nthe function depend on whether the function is defined with\na SQL SECURITY characteristic of DEFINER or INVOKER. If the\nsecurity characteristic is DEFINER, the function runs with\nthe privileges of its creator. If the characteristic is\nINVOKER, the function runs with the privileges determined by\nthe view\'s SQL SECURITY characteristic.\n \nMySQL until 5.1.1\n \nPrior to MySQL 5.1.2 (before the DEFINER and SQL SECURITY\nclauses were\nimplemented), privileges required for objects used in a view\nare\nchecked at view creation time.\n \nExample: A view might depend on a stored function, and that\nfunction\nmight invoke other stored routines. For example, the\nfollowing view\ninvokes a stored function f():\n \nCREATE VIEW v AS SELECT * FROM t WHERE t.id = f(t.name);\n \nSuppose that f() contains a statement such as this:\n \nIF name IS NULL then\n CALL p1();\nELSE\n CALL p2();\nEND IF;\n \nThe privileges required for executing statements within f()\nneed to be\nchecked when f() executes. This might mean that privileges\nare needed\nfor p1() or p2(), depending on the execution path within\nf(). Those\nprivileges must be checked at runtime, and the user who must\npossess\nthe privileges is determined by the SQL SECURITY values of\nthe view v\nand the function f().\n \nThe DEFINER and SQL SECURITY clauses for views are\nextensions to\nstandard SQL. In standard SQL, views are handled using the\nrules for\nSQL SECURITY INVOKER.\n \nIf you invoke a view that was created before MySQL 5.1.2, it\nis\ntreated as though it was created with a SQL SECURITY DEFINER\nclause\nand with a DEFINER value that is the same as your account.\nHowever,\nbecause the actual definer is unknown, MySQL issues a\nwarning. To make\nthe warning go away, it is sufficient to re-create the view\nso that\nthe view definition includes a DEFINER clause.\n \nThe optional ALGORITHM clause is an extension to standard\nSQL. It\naffects how MariaDB processes the view. ALGORITHM takes\nthree values:\nMERGE, TEMPTABLE, or UNDEFINED. The default algorithm is\nUNDEFINED if\nno ALGORITHM clause is present. See View Algorithms for more\ninformation.\n \nSome views are updatable. That is, you can use them in\nstatements such\nas UPDATE, DELETE, or INSERT to update the contents of the\nunderlying\ntable. For a view to be updatable, there must be a\none-to-one\nrelationship between the rows in the view and the rows in\nthe\nunderlying table. There are also certain other constructs\nthat make a\nview non-updatable. See Inserting and Updating with Views.\n \nWITH CHECK OPTION\n \nThe WITH CHECK OPTION clause can be given for an updatable\nview to\nprevent inserts or updates to rows except those for which\nthe WHERE\nclause in the select_statement is true.\n \nIn a WITH CHECK OPTION clause for an updatable view, the\nLOCAL and\nCASCADED keywords determine the scope of check testing when\nthe view\nis defined in terms of another view. The LOCAL keyword\nrestricts the\nCHECK OPTION only to the view being defined. CASCADED causes\nthe\nchecks for underlying views to be evaluated as well. When\nneither\nkeyword is given, the default is CASCADED.\n \nFor more information about updatable views and the WITH\nCHECK OPTION\nclause, see\nInserting and Updating with Views.\n \nIF NOT EXISTS\n \nThe IF NOT EXISTS clause was added in MariaDB 10.1.3\n \nWhen the IF NOT EXISTS clause is used, MariaDB will return a\nwarning instead of an error if the specified view already\nexists. Cannot be used together with the OR REPLACE clause.\n \nExamples\n-------- \nCREATE TABLE t (a INT, b INT) ENGINE = InnoDB;\n \nINSERT INTO t VALUES (1,1), (2,2), (3,3);\n \nCREATE VIEW v AS SELECT a, a*2 AS a2 FROM t;\n \nSELECT * FROM v;\n \n+------+------+\n| a | a2 |\n+------+------+\n| 1 | 2 |\n| 2 | 4 |\n| 3 | 6 |\n+------+------+\n \nOR REPLACE and IF NOT EXISTS:\n \nCREATE VIEW v AS SELECT a, a*2 AS a2 FROM t;\n \nERROR 1050 (42S01): Table \'v\' already exists\n \nCREATE OR REPLACE VIEW v AS SELECT a, a*2 AS a2 FROM t;\n \nQuery OK, 0 rows affected (0.04 sec)\n \nCREATE VIEW IF NOT EXISTS v AS SELECT a, a*2 AS a2 FROM t;\n \nQuery OK, 0 rows affected, 1 warning (0.01 sec)\n \nSHOW WARNINGS;\n \n+-------+------+--------------------------+\n| Level | Code | Message |\n+-------+------+--------------------------+\n| Note | 1050 | Table \'v\' already exists |\n+-------+------+--------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/create-view/', '', 'https://mariadb.com/kb/en/create-view/'),
(673, 'DROP PACKAGE', 39, 'Oracle-style packages were introduced in MariaDB 10.3.5.\n \nSyntax\n------ \nDROP PACKAGE [IF EXISTS] [ db_name . ] package_name\n \nDescription\n----------- \nThe DROP PACKAGE statement can be used when Oracle SQL_MODE\nis set.\n \nThe DROP PACKAGE statement drops a stored package entirely:\nDrops the package specification (earlier created using the\nCREATE PACKAGE statement).\nDrops the package implementation, if the implementation was\nalready created using the CREATE PACKAGE BODY statement.\n \n\n\nURL: https://mariadb.com/kb/en/drop-package/', '', 'https://mariadb.com/kb/en/drop-package/'),
(674, 'DROP PACKAGE BODY', 39, 'Oracle-style packages were introduced in MariaDB 10.3.5.\n \nSyntax\n------ \nDROP PACKAGE BODY [IF EXISTS] [ db_name . ] package_name\n \nDescription\n----------- \nThe DROP PACKAGE BODY statement can be used when Oracle\nSQL_MODE is set.\n \nThe DROP PACKAGE BODY statement drops the package body (i.e\nthe implementation), previously created using the CREATE\nPACKAGE BODY statement.\n \nNote, DROP PACKAGE BODY drops only the package\nimplementation, but does not drop the package specification.\nUse DROP PACKAGE to drop the package entirely (i.e. both\nimplementation and specification).\n \n\n\nURL: https://mariadb.com/kb/en/drop-package-body/', '', 'https://mariadb.com/kb/en/drop-package-body/'),
(679, 'DROP TABLESPACE', 39, 'The DROP TABLESPACE statement is not supported by MariaDB.\nIt was originally inherited from MySQL NDB Cluster. In MySQL\n5.7 and later, the statement is also supported for InnoDB.\nHowever, MariaDB has chosen not to include that specific\nfeature. See MDEV-19294 for more information.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/drop-tablespace/', '', 'https://mariadb.com/kb/en/drop-tablespace/'),
(687, 'Generated (Virtual and Persistent/Stored) Columns', 39, 'Syntax\n------ \n [GENERATED ALWAYS] AS (  )\n[VIRTUAL | PERSISTENT | STORED] [UNIQUE] [UNIQUE KEY]\n[COMMENT ]\n \nMariaDB\'s generated columns syntax is designed to be\nsimilar to the syntax for Microsoft SQL Server\'s computed\ncolumns and Oracle Database\'s virtual columns. In MariaDB\n10.2 and later, the syntax is also compatible with the\nsyntax for MySQL\'s generated columns.\n \nDescription\n----------- \nA generated column is a column in a table that cannot\nexplicitly be set to a specific value in a DML query.\nInstead, its value is automatically generated based on an\nexpression. This expression might generate the value based\non the values of other columns in the table, or it might\ngenerate the value by calling built-in functions or\nuser-defined functions (UDFs).\n \nThere are two types of generated columns:\nPERSISTENT or STORED: This type\'s value is actually stored\nin the table.\nVIRTUAL: This type\'s value is not stored at all. Instead,\nthe value is generated dynamically when the table is\nqueried. This type is the default.\n \nGenerated columns are also sometimes called computed columns\nor virtual columns.\n \nSupported Features\n \nStorage Engine Support\n \nGenerated columns can only be used with storage engines\nwhich support them. If you try to use a storage engine that\ndoes not support them, then you will see an error similar to\nthe following:\n \nERROR 1910 (HY000): TokuDB storage engine does not support\ncomputed columns\nInnoDB, Aria, MyISAM and CONNECT support generated columns.\n \nA column in a MERGE table can be built on a PERSISTENT\ngenerated column.\nHowever, a column in a MERGE table can not be defined as a\nVIRTUAL and PERSISTENT generated column.\n \n\nData Type Support\n \nAll data types are supported when defining generated\ncolumns.\n \nUsing the ZEROFILL column option is supported when defining\ngenerated columns.\n \nIn MariaDB 10.2.6 and later, the following statements apply\nto data types for generated columns:\nUsing the AUTO_INCREMENT column option is not supported when\ndefining generated columns. Previously, it was supported,\nbut this support was removed, because it would not work\ncorrectly. See MDEV-11117.\n \nIndex Support\n \nUsing a generated column as a table\'s primary key is not\nsupported. See MDEV-5590 for more information. If you try to\nuse one as a primary key, then you will see an error similar\nto the following:\n \nERROR 1903 (HY000): Primary key cannot be defined upon a\ncomputed column\nUsing PERSISTENT generated columns as part of a foreign key\nis supported.\n \nReferencing PERSISTENT generated columns as part of a\nforeign key is also supported.\nHowever, using the ON UPDATE CASCADE, ON UPDATE SET NULL, or\nON DELETE SET NULL clauses is not supported. If you try to\nuse an unsupported clause, then you will see an error\nsimilar to the following:\n \nERROR 1905 (HY000): Cannot define foreign key with ON UPDATE\nSET NULL clause on a computed column\n \nIn MariaDB 10.2.3 and later, the following statements apply\nto indexes for generated columns:\nDefining indexes on both VIRTUAL and PERSISTENT generated\ncolumns is supported.\nIf an index is defined on a generated column, then the\noptimizer considers using it in the same way as indexes\nbased on \"real\" columns.\n \n\nMariaDB until 10.2.2\n \nIn MariaDB 10.2.2 and before, the following statements apply\nto indexes for generated columns:\nDefining indexes on VIRTUAL generated columns is not\nsupported.\n \nDefining indexes on PERSISTENT generated columns is\nsupported.\nIf an index is defined on a generated column, then the\noptimizer considers using it in the same way as indexes\nbased on \"real\" columns.\n \n\nStatement Support\n \nGenerated columns are used in DML queries just as if they\nwere \"real\" columns.\nHowever, VIRTUAL and PERSISTENT generated columns differ in\nhow their data is stored.\nValues for PERSISTENT generated columns are generated\nwhenever a DML queries inserts or updates the row with the\nspecial DEFAULT value. This generates the columns value, and\nit is stored in the table like the other \"real\" columns.\nThis value can be read by other DML queries just like the\nother \"real\" columns.\nValues for VIRTUAL generated columns are not stored in the\ntable. Instead, the value is generated dynamically whenever\nthe column is queried. If other columns in a row are\nqueried, but the VIRTUAL generated column is not one of the\nqueried columns, then the column\'s value is not generated.\n \nThe SELECT statement supports generated columns.\n \nGenerated columns can be referenced in the INSERT, UPDATE,\nand DELETE statements.\nHowever, VIRTUAL or PERSISTENT generated columns cannot be\nexplicitly set to any other values than NULL or DEFAULT. If\na generated column is explicitly set to any other value,\nthen the outcome depends on whether strict mode is enabled\nin SQL_MODE. If it is not enabled, then a warning will be\nraised and the default generated value will be used instead.\nIf it is enabled, then an error will be raised instead.\n \nThe CREATE TABLE statement has limited support for generated\ncolumns.\nIt supports defining generated columns in a new table.\nIt supports using generated columns to partition tables.\nIt does not support using the versioning clauses with\ngenerated columns.\n \nThe ALTER TABLE statement has limited support for generated\ncolumns.\nIt supports the MODIFY and CHANGE clauses for PERSISTENT\ngenerated columns.\nIt does not support the MODIFY clause for VIRTUAL generated\ncolumns if ALGORITHM is not set to COPY. See MDEV-15476 for\nmore information.\nIt does not support the CHANGE clause for VIRTUAL generated\ncolumns if ALGORITHM is not set to COPY. See MDEV-17035 for\nmore information.\nIt does not support altering a table if ALGORITHM is not set\nto COPY if the table has a VIRTUAL generated column that is\nindexed. See MDEV-14046 for more information.\nIt does not support adding a VIRTUAL generated column with\nthe ADD clause if the same statement is also adding other\ncolumns if ALGORITHM is not set to COPY. See MDEV-17468 for\nmore information.\nIt also does not support altering an existing column into a\nVIRTUAL generated column.\nIt supports using generated columns to partition tables.\nIt does not support using the versioning clauses with\ngenerated columns.\n \nThe SHOW CREATE TABLE statement supports generated columns.\n \nThe DESCRIBE statement can be used to check whether a table\nhas generated columns.\nYou can tell which columns are generated by looking for the\nones where the Extra column is set to either VIRTUAL or\nPERSISTENT. For example:\n \nDESCRIBE table1;\n \n+-------+-------------+------+-----+---------+------------+\n| Field | Type | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+------------+\n| a | int(11) | NO | | NULL | |\n| b | varchar(32) | YES | | NULL | |\n| c | int(11) | YES | | NULL | VIRTUAL |\n| d | varchar(5) | YES | | NULL | PERSISTENT |\n+-------+-------------+------+-----+---------+------------+\nGenerated columns can be properly referenced in the NEW and\nOLD rows in triggers.\n \nStored procedures support generated columns.\n \nThe HANDLER statement supports generated columns.\n \nExpression Support\n \nMost legal, deterministic expressions which can be\ncalculated are supported in expressions for generated\ncolumns.\n \nMost built-in functions are supported in expressions for\ngenerated columns.\nHowever, some built-in functions can\'t be supported for\ntechnical reasons. For example, If you try to use an\nunsupported function in an expression, then you will see an\nerror similar to the following:\n \nERROR 1901 (HY000): Function or expression \'dayname()\'\ncannot be used in the GENERATED ALWAYS AS clause of `v`\nSubqueries are not supported in expressions for generated\ncolumns because the underlying data can change.\n \nUsing anything that depends on data outside the row is not\nsupported in expressions for generated columns.\n \nStored functions are not supported in expressions for\ngenerated columns. See MDEV-17587 for more information.\n \nIn MariaDB 10.2.1 and later, the following statements apply\nto expressions for generated columns:\nNon-deterministic built-in functions are supported in\nexpressions for PERSISTENT generated columns.\nIf a non-deterministic function is used for a PERSISTENT\ngenerated column, then any changes made to this table should\nbe logged to the binary log in the row-based logging format\nwhen the binlog_format system variable is set to MIXED.\nHowever, this does not always happen. Therefore, it is\nrecommended to set the binlog_format system variable to ROW.\nSee MDEV-10436 for more information.\n \nNon-deterministic built-in functions are not supported in\nexpressions for VIRTUAL generated columns.\n \nUser-defined functions (UDFs) are supported in expressions\nfor generated columns.\nHowever, MariaDB can\'t check whether a UDF is\ndeterministic, so it is up to the user to be sure that they\ndo not use non-deterministic UDFs with VIRTUAL generated\ncolumns.\n \nDefining a generated column based on other generated columns\ndefined before it in the table definition is supported. For\nexample:\n \nCREATE TABLE t1 (a int as (1), b int as (a));\nHowever, defining a generated column based on other\ngenerated columns defined after in the table definition is\nnot supported in expressions for generation columns because\ngenerated columns are calculated in the order they are\ndefined.\n \nUsing an expression that exceeds 255 characters in length is\nsupported in expressions for generated columns. The new\nlimit for the entire table definition, including all\nexpressions for generated columns, is 65,535 bytes.\n \nUsing constant expressions is supported in expressions for\ngenerated columns. For example:\n \nCREATE TABLE t1 (a int as (1));\n \nMariaDB until 10.2.0\n \nIn MariaDB 10.2.0 and before, the following statements apply\nto expressions for generated columns:\nNon-deterministic built-in functions are not supported in\nexpressions for generated columns.\n \nUser-defined functions (UDFs) are not supported in\nexpressions for generated columns.\n \nDefining a generated column based on other generated columns\ndefined in the table is not supported. Otherwise, it would\ngenerate errors like this:\n \nERROR 1900 (HY000): A computed column cannot be based on a\ncomputed column\nUsing an expression that exceeds 255 characters in length is\nnot supported in expressions for generated columns.\n \nUsing constant expressions is not supported in expressions\nfor generated columns. Otherwise, it would generate errors\nlike this:\n \nERROR 1908 (HY000): Constant expression in computed column\nfunction is not allowed\n \nMySQL Compatibility Support\n \nIn MariaDB 10.2.1 and later, the following statements apply\nto MySQL compatibility for generated columns:\nThe STORED keyword is supported as an alias for the\nPERSISTENT keyword.\n \nTables created with MySQL 5.7 or later that contain MySQL\'s\ngenerated columns can be imported into MariaDB without a\ndump and restore.\n \nMariaDB until 10.2.0\n \nIn MariaDB 10.2.0 and before, the following statements apply\nto MySQL compatibility for generated columns:\nThe STORED keyword is not supported as an alias for the\nPERSISTENT keyword.\n \nTables created with MySQL 5.7 or later that contain MySQL\'s\ngenerated columns can not be imported into MariaDB without a\ndump and restore.\n \nImplementation Differences\n \nGenerated columns are subject to various constraints in\nother DBMSs that are not present in MariaDB\'s\nimplementation. Generated columns may also be called\ncomputed columns or virtual columns in different\nimplementations. The various details for a specific\nimplementation can be found in the documentation for each\nspecific DBMS.\n \nImplementation Differences Compared to Microsoft SQL Server\n \nMariaDB\'s generated columns implementation does not enforce\nthe following\nrestrictions that are present in Microsoft SQL Server\'s\ncomputed columns implementation:\nMariaDB allows server variables in generated column\nexpressions, including those that change dynamically, such\nas warning_count.\nMariaDB allows the CONVERT_TZ() function to be called with a\nnamed time zone as an argument, even though time zone names\nand time offsets are configurable.\nMariaDB allows the CAST() function to be used with\nnon-unicode character sets, even though character sets are\nconfigurable and differ between binaries/versions.\nMariaDB allows FLOAT expressions to be used in generated\ncolumns. Microsoft SQL Server considers these expressions to\nbe \"imprecise\" due to potential cross-platform differences\nin floating-point implementations and precision.\nMicrosoft SQL Server requires the ARITHABORT mode to be set,\nso that division by zero returns an error, and not a NULL.\nMicrosoft SQL Server requires QUOTED_IDENTIFIER to be set in\nSQL_MODE. In MariaDB, if data is inserted without\nANSI_QUOTES set in SQL_MODE, then it will be processed and\nstored differently in a generated column that contains\nquoted identifiers.\nIn MariaDB 10.2.0 and before, it does not allow user-defined\nfunctions (UDFs) to be used in expressions for generated\ncolumns.\n \nMicrosoft SQL Server enforces the above restrictions by\ndoing one of the following things:\nRefusing to create computed columns.\nRefusing to allow updates to a table containing them.\nRefusing to use an index over such a column if it can not be\nguaranteed that the expression is fully deterministic.\n \nIn MariaDB, as long as the SQL_MODE, language, and other\nsettings that were in effect during the CREATE TABLE remain\nunchanged, the generated column expression will always be\nevaluated the same. If any of these things change, then\nplease be aware that the generated column expression might\nnot be\nevaluated the same way as it previously was.\n \nIn MariaDB 5.2, you will get a warning if you try to update\na virtual column. In MariaDB 5.3 and later, this warning\nwill be converted to an error if strict mode is enabled in\nSQL_MODE.\n \nDevelopment History\n \nGenerated columns was originally developed by Andrey Zhakov.\nIt was then modified by Sanja Byelkin and Igor Babaev at\nMonty Program for inclusion in MariaDB. Monty did the work\non MariaDB 10.2 to lift a some of the old limitations.\n \nExamples\n-------- \nHere is an example table that uses both VIRTUAL and\nPERSISTENT virtual columns:\n \nUSE TEST;\n \nCREATE TABLE table1 (\n a INT NOT NULL,\n b VARCHAR(32),\n c INT AS (a mod 10) VIRTUAL,\n d VARCHAR(5) AS (left(b,5)) PERSISTENT);\n \nIf you describe the table, you can easily see which columns\nare virtual by\nlooking in the \"Extra\" column:\n \nDESCRIBE table1;\n \n+-------+-------------+------+-----+---------+------------+\n| Field | Type | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+------------+\n| a | int(11) | NO | | NULL | |\n| b | varchar(32) | YES | | NULL | |\n| c | int(11) | YES | | NULL | VIRTUAL |\n| d | varchar(5) | YES | | NULL | PERSISTENT |\n+-------+-------------+------+-----+---------+------------+\n \nTo find out what function(s) generate the value of the\nvirtual column you can use SHOW CREATE TABLE:\n \nSHOW CREATE TABLE table1;\n \n| table1 | CREATE TABLE `table1` (\n `a` int(11) NOT NULL,\n `b` varchar(32) DEFAULT NULL,\n `c` int(11) AS (a mod 10) VIRTUAL,\n `d` varchar(5) AS (left(b,5)) PERSISTENT\n) ENGINE=MyISAM DEFAULT CHARSET=latin1 |\n \nIf you try to insert non-default values into a virtual\ncolumn, you will receive\na warning and what you tried to insert will be ignored and\nthe derived value\ninserted instead:\n \nWARNINGS;\nShow warnings enabled.\n \nINSERT INTO table1 VALUES (1, \'some\ntext\',default,default);\nQuery OK, 1 row affected (0.00 sec)\n \nINSERT INTO table1 VALUES (2, \'more text\',5,default);\nQuery OK, 1 row affected, 1 warning (0.00 sec)\n \nWarning (Code 1645): The value specified for computed column\n\'c\' in table \'table1\' has been ignored.\n \nINSERT INTO table1 VALUES (123, \'even more\ntext\',default,\'something\');\nQuery OK, 1 row affected, 2 warnings (0.00 sec)\n \nWarning (Code 1645): The value specified for computed column\n\'d\' in table \'table1\' has been ignored.\nWarning (Code 1265): Data truncated for column \'d\' at row\n1\n \nSELECT * FROM table1;\n+-----+----------------+------+-------+\n| a | b | c | d |\n+-----+----------------+------+-------+\n| 1 | some text | 1 | some |\n| 2 | more text | 2 | more |\n| 123 | even more text | 3 | even |\n+-----+----------------+------+-------+\n3 rows in set (0.00 sec)\n \nIf the ZEROFILL clause is specified, it should be placed\ndirectly after the type definition, before the AS ():\n \nCREATE TABLE table2 (a INT, b INT ZEROFILL AS (a*2)\nVIRTUAL);\nINSERT INTO table2 (a) VALUES (1);\n \nSELECT * FROM table2;\n \n+------+------------+\n| a | b |\n+------+------------+\n| 1 | 0000000002 |\n+------+------------+\n1 row in set (0.00 sec)\n \nYou can also use virtual columns to implement a \"poor\nman\'s partial index\". See example at the end of Unique\nIndex.\n \n\n\nURL: https://mariadb.com/kb/en/generated-columns/', '', 'https://mariadb.com/kb/en/generated-columns/'),
(688, 'LASTVAL', 40, 'LASTVAL is a synonym for PREVIOUS VALUE for sequence_name.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/lastval/', '', 'https://mariadb.com/kb/en/lastval/'),
(690, 'NEXTVAL', 40, 'NEXTVAL is a synonym for NEXT VALUE for sequence_name.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/nextval/', '', 'https://mariadb.com/kb/en/nextval/'),
(345, 'HELP Command', 26, 'Syntax\n------ \nHELP search_string\n \nDescription\n----------- \nThe HELP command can be used in any MariaDB client, such as\nthe mysql command-line client, to get basic syntax help and\na short description for most commands and functions. \n \nIf you provide an argument to the HELP command, the mysql\nclient uses it as a search string to access server-side\nhelp. The proper operation of this command requires that the\nhelp tables in the mysql database be initialized with help\ntopic information.\n \nIf there is no match for the search string, the search\nfails. Use help contents to see a list of the help\ncategories:\n \nHELP contents\nYou asked for help about help category: \"Contents\"\nFor more information, type \'help \', where  is one of the\nfollowing\ncategories:\n Account Management\n Administration\n Compound Statements\n Data Definition\n Data Manipulation\n Data Types\n Functions\n Functions and Modifiers for Use with GROUP BY\n Geographic Features\n Help Metadata\n Language Structure\n Plugins\n Procedures\n Sequences\n Table Maintenance\n Transactions\n User-Defined Functions\n Utility\n \nIf a search string matches multiple items, MariaDB shows a\nlist of matching topics:\n \nHELP drop\nMany help items for your request exist.\nTo make a more specific request, please type \'help \',\nwhere  is one of the following\ntopics:\n ALTER TABLE\n DROP DATABASE\n DROP EVENT\n DROP FUNCTION\n DROP FUNCTION UDF\n DROP INDEX\n DROP PACKAGE\n DROP PACKAGE BODY\n DROP PROCEDURE\n DROP ROLE\n DROP SEQUENCE\n DROP SERVER\n DROP TABLE\n DROP TRIGGER\n DROP USER\n DROP VIEW\n \nThen you can enter a topic as the search string to see the\nhelp entry for that topic.\n \nThe help is provided with the MariaDB server and makes use\nof four help tables found in the mysql database:\nhelp_relation, help_topic, help_category and help_keyword.\nThese tables are populated by the mysql_install_db or\nfill_help_table.sql scripts which, until MariaDB 10.4.7,\ncontain data generated from an old version of MySQL.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/help-command/', '', 'https://mariadb.com/kb/en/help-command/'),
(346, 'KILL [CONNECTION | QUERY]', 26, 'Syntax\n------ \nKILL [HARD | SOFT] [CONNECTION | QUERY [ID] ] [thread_id |\nUSER user_name | query_id]\n \nMariaDB 5.3.2\n \nThe options HARD | SOFT and USER username were introduced in\nMariaDB 5.3.2\n \nMariaDB 10.0.5\n \nKILL QUERY ID query_id, which permits killing a query by\nquery id rather than thread id, was introduced in MariaDB\n10.0.5.\n \nDescription\n----------- \nEach connection to mysqld runs in a separate thread. You can\nsee which threads\nare running with the SHOW PROCESSLIST statement and kill a\nthread with the KILL thread_id statement. \nKILL allows the optional CONNECTION or\nQUERY modifier:\nKILL CONNECTION is the same as KILL with no\n modifier: It terminates the connection associated with the\ngiven thread or query id.\nKILL QUERY terminates the statement that the connection\nthread_id is\n currently executing, but leaves the connection itself\nintact.\nKILL QUERY ID (introduced in MariaDB 10.0.5) terminates the\nquery by query_id, leaving the connection intact.\n \nIf a connection is terminated that has an active\ntransaction, the transaction will be rolled back. If only a\nquery is killed, the current transaction will stay active.\nSee also idle_transaction_timeout.\n \nIf you have the PROCESS privilege, you can see all threads.\nIf\nyou have the SUPER privilege, you can kill all threads and\nstatements. Otherwise, you can see and kill only your own\nthreads and\nstatements.\n \nKilling queries that repair or create indexes on MyISAM and\nAria tables may result in corrupted tables. Use the SOFT\noption to avoid this!\n \nThe HARD option (default) kills a command as soon as\npossible. If you use\nSOFT, then critical operations that may leave a table in an\ninconsistent state will not be interrupted. Such operations\ninclude REPAIR and INDEX creation for MyISAM and Aria tables\n(REPAIR TABLE, OPTIMIZE TABLE).\n \nKILL ... USER username will kill all connections/queries for\na\ngiven user. USER can be specified one of the following ways:\nusername (Kill without regard to hostname)\nusername@hostname\nCURRENT_USER or CURRENT_USER()\n \nIf you specify a thread id and that thread does not exist,\nyou get the following error:\n \nERROR 1094 (HY000): Unknown thread id: \n \nIf you specify a query id that doesn\'t exist, you get the\nfollowing error:\n \nERROR 1957 (HY000): Unknown query id: \n \nHowever, if you specify a user name, no error is issued for\nnon-connected (or even non-existing) users. To check if the\nconnection/query has been killed, you can use the\nROW_COUNT() function.\n \nA client whose connection is killed receives the following\nerror:\n \nERROR 1317 (70100): Query execution was interrupted\n \nTo obtain a list of existing sessions, use the SHOW\nPROCESSLIST statement or query the Information Schema\nPROCESSLIST table.\n \nNote: You cannot use KILL with the Embedded MySQL Server\nlibrary because the embedded server merely runs inside the\nthreads of the host\napplication. It does not create any connection threads of\nits own.\n \nNote: You can also use \nmysqladmin kill thread_id [,thread_id...]\nto kill connections. To get a list of running queries,\nuse mysqladmin processlist. See mysqladmin.\n \nPercona Toolkit contains a program, pt-kill that can be used\nto automatically kill connections that match certain\ncriteria. For example, it can be used to terminate idle\nconnections, or connections that have been busy for more\nthan 60 seconds.\n \n\n\nURL:\nhttps://mariadb.com/kb/en/data-manipulation-kill-connection-query/', '', 'https://mariadb.com/kb/en/data-manipulation-kill-connection-query/'),
(695, 'JSON_ARRAY', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nSyntax\n------ \nJSON_ARRAY([value[, value2] ...])\n \nDescription\n----------- \nReturns a JSON array containing the listed values. The list\ncan be empty.\n \nExample\n \nSELECT Json_Array(56, 3.1416, \'My name is \"Foo\"\', NULL);\n+--------------------------------------------------+\n| Json_Array(56, 3.1416, \'My name is \"Foo\"\', NULL) |\n+--------------------------------------------------+\n| [56, 3.1416, \"My name is \\\"Foo\\\"\", null] |\n+--------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_array/', '', 'https://mariadb.com/kb/en/json_array/'),
(698, 'JSON_COMPACT', 41, 'This function was added in MariaDB 10.2.4.\n \nSyntax\n------ \nJSON_COMPACT(json_doc)\n \nDescription\n----------- \nRemoves all unnecessary spaces so the json document is as\nshort as possible.\n \nExample\n \nSET @j = \'{ \"A\": 1, \"B\": [2, 3]}\';\n \nSELECT JSON_COMPACT(@j), @j;\n+-------------------+------------------------+\n| JSON_COMPACT(@j) | @j |\n+-------------------+------------------------+\n| {\"A\":1,\"B\":[2,3]} | { \"A\": 1, \"B\": [2, 3]} |\n+-------------------+------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_compact/', '', 'https://mariadb.com/kb/en/json_compact/'),
(702, 'JSON_DETAILED', 41, 'This function was added in MariaDB 10.2.4.\n \nSyntax\n------ \nJSON_DETAILED(json_doc[, tab_size])\n \nDescription\n----------- \nRepresents JSON in the most understandable way emphasizing\nnested structures.\n \nExample\n \nSET @j = \'{ \"A\":1,\"B\":[2,3]}\';\n \nSELECT @j;\n+--------------------+\n| @j |\n+--------------------+\n| { \"A\":1,\"B\":[2,3]} |\n+--------------------+\n \nSELECT JSON_DETAILED(@j);\n+------------------------------------------------------------+\n| JSON_DETAILED(@j) |\n+------------------------------------------------------------+\n| {\n \"A\": 1,\n \"B\": \n [\n 2,\n 3\n ]\n} |\n+------------------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_detailed/', '', 'https://mariadb.com/kb/en/json_detailed/'),
(348, 'RESET', 26, 'Syntax\n------ \nRESET reset_option [, reset_option] ...\n \nDescription\n----------- \nThe RESET statement is used to clear the state of various\nserver\noperations. You must have the RELOAD privilege to execute\nRESET.\n \nRESET acts as a stronger version of the FLUSH statement.\n \nThe different RESET options are:\n \nOption | Description | \n \nSLAVE [\"connection_name\"] [ALL] | Deletes all relay logs\nfrom the slave and reset the replication position in the\nmaster binary log. | \n \nMASTER | Deletes all old binary logs, makes the binary index\nfile (--log-bin-index) empty and creates a new binary log\nfile. This is useful when you want to reset the master to an\ninitial state. If you want to just delete old, not used\nbinary logs, you should use the PURGE BINARY LOGS command. |\n\n \nQUERY CACHE | Removes all queries from the query cache. See\nalso FLUSH QUERY CACHE. | \n \n\n \n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/reset/', '', 'https://mariadb.com/kb/en/reset/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(349, 'SET', 26, 'Syntax\n------ \nSET variable_assignment [, variable_assignment] ...\n \nvariable_assignment:\n user_var_name = expr\n | [GLOBAL | SESSION] system_var_name = expr\n | [@@global. | @@session. | @@]system_var_name = expr\n \nOne can also set a user variable in any expression with this\nsyntax:\n \nuser_var_name:= expr\n \nDescription\n----------- \nThe SET statement assigns values to different types of\nvariables that affect the operation of the server or your\nclient. Older\nversions of MySQL employed SET OPTION, but this syntax was\ndeprecated in favor of SET without OPTION, and was removed\nin MariaDB 10.0.\n \nChanging a system variable by using the SET statement does\nnot make the change permanently. To do so, the change must\nbe made in a configuration file.\n \nFor setting variables on a per-query basis (from MariaDB\n10.1.2), see SET STATEMENT.\n \nSee SHOW VARIABLES for documentation on viewing server\nsystem variables.\n \nSee Server System Variables for a list of all the system\nvariables.\n \nGLOBAL / SESSION\n \nWhen setting a system variable, the scope can be specified\nas either GLOBAL or SESSION.\n \nA global variable change affects all new sessions. It does\nnot affect any currently open sessions, including the one\nthat made the change. \n \nA session variable change affects the current session only.\n \nIf the variable has a session value, not specifying either\nGLOBAL or SESSION will be the same as specifying SESSION. If\nthe variable only has a global value, not specifying GLOBAL\nor SESSION will apply to the change to the global value.\n \nDEFAULT\n \nSetting a global variable to DEFAULT will restore it to the\nserver default, and setting a session variable to DEFAULT\nwill restore it to the current global value.\n \nExamples\n-------- \ninnodb_sync_spin_loops is a global variable.\nskip_parallel_replication is a session variable.\nmax_error_count is both global and session.\n \nSELECT VARIABLE_NAME, SESSION_VALUE, GLOBAL_VALUE FROM\n INFORMATION_SCHEMA.SYSTEM_VARIABLES WHERE \n VARIABLE_NAME LIKE \'max_error_count\' OR \n VARIABLE_NAME LIKE \'skip_parallel_replication\' OR \n VARIABLE_NAME LIKE \'innodb_sync_spin_loops\';\n \n+---------------------------+---------------+--------------+\n| VARIABLE_NAME | SESSION_VALUE | GLOBAL_VALUE |\n+---------------------------+---------------+--------------+\n| MAX_ERROR_COUNT | 64 | 64 |\n| SKIP_PARALLEL_REPLICATION | OFF | NULL |\n| INNODB_SYNC_SPIN_LOOPS | NULL | 30 |\n+---------------------------+---------------+--------------+\n \nSetting the session values:\n \nSET max_error_count=128;\nQuery OK, 0 rows affected (0.000 sec)\n \nSET skip_parallel_replication=ON;\nQuery OK, 0 rows affected (0.000 sec)\n \nSET innodb_sync_spin_loops=60;\n \nERROR 1229 (HY000): Variable \'innodb_sync_spin_loops\' is a\nGLOBAL variable \n and should be set with SET GLOBAL\n \nSELECT VARIABLE_NAME, SESSION_VALUE, GLOBAL_VALUE FROM\n INFORMATION_SCHEMA.SYSTEM_VARIABLES WHERE \n VARIABLE_NAME LIKE \'max_error_count\' OR \n VARIABLE_NAME LIKE \'skip_parallel_replication\' OR \n VARIABLE_NAME LIKE \'innodb_sync_spin_loops\';\n \n+---------------------------+---------------+--------------+\n| VARIABLE_NAME | SESSION_VALUE | GLOBAL_VALUE |\n+---------------------------+---------------+--------------+\n| MAX_ERROR_COUNT | 128 | 64 |\n| SKIP_PARALLEL_REPLICATION | ON | NULL |\n| INNODB_SYNC_SPIN_LOOPS | NULL | 30 |\n+---------------------------+---------------+--------------+\n \nSetting the global values:\n \nSET GLOBAL max_error_count=256;\n \nSET GLOBAL skip_parallel_replication=ON;\n \nERROR 1228 (HY000): Variable \'skip_parallel_replication\'\nis a SESSION variable \n and can\'t be used with SET GLOBAL\n \nSET GLOBAL innodb_sync_spin_loops=120;\n \nSELECT VARIABLE_NAME, SESSION_VALUE, GLOBAL_VALUE FROM\n INFORMATION_SCHEMA.SYSTEM_VARIABLES WHERE \n VARIABLE_NAME LIKE \'max_error_count\' OR \n VARIABLE_NAME LIKE \'skip_parallel_replication\' OR \n VARIABLE_NAME LIKE \'innodb_sync_spin_loops\';\n \n+---------------------------+---------------+--------------+\n| VARIABLE_NAME | SESSION_VALUE | GLOBAL_VALUE |\n+---------------------------+---------------+--------------+\n| MAX_ERROR_COUNT | 128 | 256 |\n| SKIP_PARALLEL_REPLICATION | ON | NULL |\n| INNODB_SYNC_SPIN_LOOPS | NULL | 120 |\n+---------------------------+---------------+--------------+\n \nSHOW VARIABLES will by default return the session value\nunless the variable is global only.\n \nSHOW VARIABLES LIKE \'max_error_count\';\n \n+-----------------+-------+\n| Variable_name | Value |\n+-----------------+-------+\n| max_error_count | 128 |\n+-----------------+-------+\n \nSHOW VARIABLES LIKE \'skip_parallel_replication\';\n \n+---------------------------+-------+\n| Variable_name | Value |\n+---------------------------+-------+\n| skip_parallel_replication | ON |\n+---------------------------+-------+\n \nSHOW VARIABLES LIKE \'innodb_sync_spin_loops\';\n \n+------------------------+-------+\n| Variable_name | Value |\n+------------------------+-------+\n| innodb_sync_spin_loops | 120 |\n+------------------------+-------+\n \nUsing the inplace syntax:\n \nSELECT (@a:=1);\n+---------+\n| (@a:=1) |\n+---------+\n| 1 |\n+---------+\n \nSELECT @a;\n \n+------+\n| @a |\n+------+\n| 1 |\n+------+\n \n\n\nURL: https://mariadb.com/kb/en/set/', '', 'https://mariadb.com/kb/en/set/'),
(708, 'JSON_LOOSE', 41, 'This function was added in MariaDB 10.2.4.\n \nSyntax\n------ \nJSON_LOOSE(json_doc)\n \nDescription\n----------- \nAdds spaces to a JSON document to make it look more\nreadable.\n \nExample\n \nSET @j = \'{ \"A\":1,\"B\":[2,3]}\';\n \nSELECT JSON_LOOSE(@j), @j;\n+-----------------------+--------------------+\n| JSON_LOOSE(@j) | @j |\n+-----------------------+--------------------+\n| {\"A\": 1, \"B\": [2, 3]} | { \"A\":1,\"B\":[2,3]} |\n+-----------------------+--------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_loose/', '', 'https://mariadb.com/kb/en/json_loose/'),
(712, 'JSON_OBJECT', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nSyntax\n------ \nJSON_OBJECT([key, value[, key, value] ...])\n \nDescription\n----------- \nReturns a JSON object containing the given key/value pairs.\nThe key/value list can be empty.\n \nAn error will occur if there are an odd number of arguments,\nor any key name is NULL.\n \nExample\n \nSELECT JSON_OBJECT(\"id\", 1, \"name\", \"Monty\");\n+---------------------------------------+\n| JSON_OBJECT(\"id\", 1, \"name\", \"Monty\") |\n+---------------------------------------+\n| {\"id\": 1, \"name\": \"Monty\"} |\n+---------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_object/', '', 'https://mariadb.com/kb/en/json_object/'),
(350, 'About SHOW', 26, 'SHOW has many forms that provide information about\ndatabases, tables, columns, or status information about the\nserver. These include:\nSHOW AUTHORS\nSHOW CHARACTER SET [like_or_where]\nSHOW COLLATION [like_or_where]\nSHOW [FULL] COLUMNS FROM tbl_name [FROM db_name]\n[like_or_where]\nSHOW CONTRIBUTORS\nSHOW CREATE DATABASE db_name\nSHOW CREATE EVENT event_name\nSHOW CREATE PACKAGE package_name\nSHOW CREATE PACKAGE BODY package_name\nSHOW CREATE PROCEDURE proc_name\nSHOW CREATE TABLE tbl_name\nSHOW CREATE TRIGGER trigger_name\nSHOW CREATE VIEW view_name\nSHOW DATABASES [like_or_where]\nSHOW ENGINE engine_name {STATUS | MUTEX}\nSHOW [STORAGE] ENGINES\nSHOW ERRORS [LIMIT [offset,] row_count]\nSHOW [FULL] EVENTS\nSHOW FUNCTION CODE func_name\nSHOW FUNCTION STATUS [like_or_where]\nSHOW GRANTS FOR user\nSHOW INDEX FROM tbl_name [FROM db_name]\nSHOW INNODB STATUS\nSHOW OPEN TABLES [FROM db_name] [like_or_where]\nSHOW PLUGINS\nSHOW PROCEDURE CODE proc_name\nSHOW PROCEDURE STATUS [like_or_where]\nSHOW PRIVILEGES\nSHOW [FULL] PROCESSLIST\nSHOW PROFILE [types] [FOR QUERY n] [OFFSET n] [LIMIT n]\nSHOW PROFILES\nSHOW [GLOBAL | SESSION] STATUS [like_or_where]\nSHOW TABLE STATUS [FROM db_name] [like_or_where]\nSHOW TABLES [FROM db_name] [like_or_where]\nSHOW TRIGGERS [FROM db_name] [like_or_where]\nSHOW [GLOBAL | SESSION] VARIABLES [like_or_where]\nSHOW WARNINGS [LIMIT [offset,] row_count]\n \nlike_or_where:\n LIKE \'pattern\'\n | WHERE expr\n \nIf the syntax for a given SHOW statement includes a\nLIKE \'pattern\' part, \'pattern\' is a\nstring that can contain the SQL \"%\" and\n\"_\" wildcard characters. The pattern is useful for\nrestricting statement output to matching values.\n \nSeveral SHOW statements also accept a\nWHERE clause that provides more flexibility in specifying\nwhich rows to display. See Extended Show.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/about-show/', '', 'https://mariadb.com/kb/en/about-show/'),
(351, 'SHOW AUTHORS', 26, 'Syntax\n------ \nSHOW AUTHORS\n \nDescription\n----------- \nThe SHOW AUTHORS statement displays information about the\npeople who work on MariaDB. For each author, it displays\nName, Location, and\nComment values. All columns are encoded as latin1.\n \nIn MariaDB 5.5 this is in somewhat random order.\n \nIn MariaDB 10.0.5 and later you have:\nFirst the active people in MariaDB are listed.\nThen the active people in MySQL.\nLast the people that has contributed to MariaDB/MySQL in the\npast.\n \nThe order is somewhat related to importance of the\ncontribution given to the MariaDB project, but this is not\n100% accurate. There is still room for improvements and\ndebate...\n \nExample\n \nSHOW AUTHORS;\n+--------------------------------+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+\n| Name | Location | Comment |\n+--------------------------------+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+\n| Michael (Monty) Widenius | Tusby, Finland | Lead developer\nand main author |\n| Sergei Golubchik | Kerpen, Germany | Architect, Full-text\nsearch, precision math, plugin framework, merges etc |\n| Igor Babaev | Bellevue, USA | Optimizer, keycache, core\nwork |\n| Sergey Petrunia | St. Petersburg, Russia | Optimizer |\n| Oleksandr Byelkin | Lugansk, Ukraine | Query Cache (4.0),\nSubqueries (4.1), Views (5.0) |\n| Timour Katchaounov | Sofia , Bulgaria | Optimizer |\n| Kristian Nielsen | Copenhagen, Denmark | Replication,\nAsync client prototocol, General buildbot stuff |\n| Alexander (Bar) Barkov | Izhevsk, Russia | Unicode and\ncharacter sets |\n| Alexey Botchkov (Holyfoot) | Izhevsk, Russia | GIS\nextensions, embedded server, precision math |\n| Daniel Bartholomew | Raleigh, USA | MariaDB documentation\n|\n| Colin Charles | Selangor, Malesia | MariaDB documentation,\ntalks at a LOT of conferences |\n| Sergey Vojtovich | Izhevsk, Russia | initial\nimplementation of plugin architecture, maintained native\nstorage engines (MyISAM, MEMORY, ARCHIVE, etc), rewrite of\ntable cache |\n| Vladislav Vaintroub | Mannheim, Germany | MariaDB Java\nconnector, new thread pool, Windows optimizations |\n| Elena Stepanova | Sankt Petersburg, Russia | QA, test\ncases |\n| Georg Richter | Heidelberg, Germany | New LGPL C\nconnector, PHP connector |\n| Jan Lindström | Ylämylly, Finland | Working on InnoDB |\n| Lixun Peng | Hangzhou, China | Multi Source replication |\n| Percona | CA, USA | XtraDB, microslow patches, extensions\nto slow log \n...\n \nSee Also\n \nSHOW CONTRIBUTORS. This list all members and sponsors of the\nMariaDB Foundation and other sponsors.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-authors/', '', 'https://mariadb.com/kb/en/show-authors/'),
(352, 'SHOW BINARY LOGS', 26, 'Syntax\n------ \nSHOW BINARY LOGS\nSHOW MASTER LOGS\n \nDescription\n----------- \nLists the binary log files on the server. This statement is\nused as part of the\nprocedure described in \nPURGE BINARY LOGS, that shows how to\ndetermine which logs can be purged.\n \nExamples\n-------- \nSHOW BINARY LOGS;\n+--------------------+-----------+\n| Log_name | File_size |\n+--------------------+-----------+\n| mariadb-bin.000001 | 19039 |\n| mariadb-bin.000002 | 717389 |\n| mariadb-bin.000003 | 300 |\n| mariadb-bin.000004 | 333 |\n| mariadb-bin.000005 | 899 |\n| mariadb-bin.000006 | 125 |\n| mariadb-bin.000007 | 18907 |\n| mariadb-bin.000008 | 19530 |\n| mariadb-bin.000009 | 151 |\n| mariadb-bin.000010 | 151 |\n| mariadb-bin.000011 | 125 |\n| mariadb-bin.000012 | 151 |\n| mariadb-bin.000013 | 151 |\n| mariadb-bin.000014 | 125 |\n| mariadb-bin.000015 | 151 |\n| mariadb-bin.000016 | 314 |\n+--------------------+-----------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-binary-logs/', '', 'https://mariadb.com/kb/en/show-binary-logs/'),
(718, 'JSON_SET', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nSyntax\n------ \nJSON_SET(json_doc, path, val[, path, val] ...)\n \nDescription\n----------- \nUpdates or inserts data into a JSON document, returning the\nresult, or NULL if any of the arguments are NULL or the\noptional path fails to find an object.\n \nAn error will occur if the JSON document is invalid, the\npath is invalid or if the path contains a * or  wildcard.\n \nJSON_SET can update or insert data, while JSON_REPLACE can\nonly update, and JSON_INSERT only insert. \n \nExamples\n-------- \n\n \n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_set/', '', 'https://mariadb.com/kb/en/json_set/'),
(724, 'Aggregate Functions as Window Functions', 42, 'Window functions were first introduced in MariaDB 10.2.0.\n \nIt is possible to use aggregate functions as window\nfunctions. An aggregate function used as a window function\nmust have the OVER clause. For example, here\'s COUNT() used\nas a window function:\n \nselect COUNT(*) over (order by column) from table;\n \nMariaDB currently allows these aggregate functions to be\nused as window functions: \nAVG\nBIT_AND\nBIT_OR\nBIT_XOR\nCOUNT\nMAX\nMIN\nSTD\nSTDDEV\nSTDDEV_POP\nSTDDEV_SAMP\nSUM\nVAR_POP\nVAR_SAMP\nVARIANCE\n \n\n \n \n \n \n \n \n \n\nURL:\nhttps://mariadb.com/kb/en/library/aggregate-functions-as-window-functions/', '', 'https://mariadb.com/kb/en/library/aggregate-functions-as-window-functions/'),
(726, 'CUME_DIST', 42, 'The CUME_DIST() function was first introduced with window\nfunctions in MariaDB 10.2.0.\n \nSyntax\n------ \nCUME_DIST() OVER ( \n [ PARTITION BY partition_expression ] \n [ ORDER BY order_list ]\n)\n \nDescription\n----------- \nCUME_DIST() is a window function that returns the cumulative\ndistribution of a given row. The following formula is used\nto calculate the value:\n \n(number of rows \n\nURL: https://mariadb.com/kb/en/cume_dist/', '', 'https://mariadb.com/kb/en/cume_dist/'),
(353, 'SHOW BINLOG EVENTS', 26, 'Syntax\n------ \nSHOW BINLOG EVENTS\n [IN \'log_name\'] [FROM pos] [LIMIT [offset,] row_count]\n \nDescription\n----------- \nShows the events in the binary log. If you do not specify\n\'log_name\',\nthe first binary log is displayed.\n \nExample\n \nSHOW BINLOG EVENTS IN \'mysql_sandbox10019-bin.000002\';\n+-------------------------------+-----+-------------------+-----------+-------------+------------------------------------------------+\n| Log_name | Pos | Event_type | Server_id | End_log_pos |\nInfo |\n+-------------------------------+-----+-------------------+-----------+-------------+------------------------------------------------+\n| mysql_sandbox10019-bin.000002 | 4 | Format_desc | 1 | 248\n| Server ver: 10.0.19-MariaDB-log, Binlog ver: 4 |\n| mysql_sandbox10019-bin.000002 | 248 | Gtid_list | 1 | 273\n| [] |\n| mysql_sandbox10019-bin.000002 | 273 | Binlog_checkpoint |\n1 | 325 | mysql_sandbox10019-bin.000002 |\n| mysql_sandbox10019-bin.000002 | 325 | Gtid | 1 | 363 |\nGTID 0-1-1 |\n| mysql_sandbox10019-bin.000002 | 363 | Query | 1 | 446 |\nCREATE DATABASE blog |\n| mysql_sandbox10019-bin.000002 | 446 | Gtid | 1 | 484 |\nGTID 0-1-2 |\n| mysql_sandbox10019-bin.000002 | 484 | Query | 1 | 571 |\nuse `blog`; CREATE TABLE bb (id INT) |\n+-------------------------------+-----+-------------------+-----------+-------------+------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-binlog-events/', '', 'https://mariadb.com/kb/en/show-binlog-events/'),
(354, 'SHOW CHARACTER SET', 26, 'Syntax\n------ \nSHOW CHARACTER SET\n [LIKE \'pattern\' | WHERE expr]\n \nDescription\n----------- \nThe SHOW CHARACTER SET statement shows all available\ncharacter sets. The LIKE clause, if present on its own,\nindicates which character\nset names to match. The WHERE and LIKE clauses can be given\nto select rows using more general conditions, as discussed\nin Extended SHOW.\n \nThe same information can be queried from the\ninformation_schema.CHARACTER_SETS table.\n \nSee Setting Character Sets and Collations for details on\nspecifying the character set at the server, database, table\nand column levels.\n \nExamples\n-------- \nSHOW CHARACTER SET LIKE \'latin%\';\n+---------+-----------------------------+-------------------+--------+\n| Charset | Description | Default collation | Maxlen |\n+---------+-----------------------------+-------------------+--------+\n| latin1 | cp1252 West European | latin1_swedish_ci | 1 |\n| latin2 | ISO 8859-2 Central European | latin2_general_ci |\n1 |\n| latin5 | ISO 8859-9 Turkish | latin5_turkish_ci | 1 |\n| latin7 | ISO 8859-13 Baltic | latin7_general_ci | 1 |\n+---------+-----------------------------+-------------------+--------+\n \nSHOW CHARACTER SET WHERE Maxlen LIKE \'2\';\n+---------+---------------------------+-------------------+--------+\n| Charset | Description | Default collation | Maxlen |\n+---------+---------------------------+-------------------+--------+\n| big5 | Big5 Traditional Chinese | big5_chinese_ci | 2 |\n| sjis | Shift-JIS Japanese | sjis_japanese_ci | 2 |\n| euckr | EUC-KR Korean | euckr_korean_ci | 2 |\n| gb2312 | GB2312 Simplified Chinese | gb2312_chinese_ci | 2\n|\n| gbk | GBK Simplified Chinese | gbk_chinese_ci | 2 |\n| ucs2 | UCS-2 Unicode | ucs2_general_ci | 2 |\n| cp932 | SJIS for Windows Japanese | cp932_japanese_ci | 2\n|\n+---------+---------------------------+-------------------+--------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-character-set/', '', 'https://mariadb.com/kb/en/show-character-set/'),
(355, 'SHOW CLIENT_STATISTICS', 26, 'MariaDB 5.2 introduced the User Statistics feature.\n \nSyntax\n------ \nSHOW CLIENT_STATISTICS\n \nDescription\n----------- \nThe SHOW CLIENT_STATISTICS statement was introduced in\nMariaDB 5.2 as part of the User Statistics feature. It was\nremoved as a separate statement in MariaDB 10.1.1, but\neffectively replaced by the generic SHOW\ninformation_schema_table statement. The\ninformation_schema.CLIENT_STATISTICS table holds statistics\nabout client connections.\n \nThe userstat system variable must be set to 1 to activate\nthis feature. See the User Statistics and\ninformation_schema.CLIENT_STATISTICS articles for more\ninformation.\n \nExample\n \nFrom MariaDB 10.0:\n \nSHOW CLIENT_STATISTICS\\G\n*************************** 1. row\n***************************\n Client: localhost\n Total_connections: 35\nConcurrent_connections: 0\n Connected_time: 708\n Busy_time: 2.5557979999999985\n Cpu_time: 0.04123740000000002\n Bytes_received: 3883\n Bytes_sent: 21595\n Binlog_bytes_written: 0\n Rows_read: 18\n Rows_sent: 115\n Rows_deleted: 0\n Rows_inserted: 0\n Rows_updated: 0\n Select_commands: 70\n Update_commands: 0\n Other_commands: 0\n Commit_transactions: 1\n Rollback_transactions: 0\n Denied_connections: 0\n Lost_connections: 0\n Access_denied: 0\n Empty_queries: 35\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-client-statistics/', '', 'https://mariadb.com/kb/en/show-client-statistics/'),
(356, 'SHOW COLLATION', 26, 'Syntax\n------ \nSHOW COLLATION\n [LIKE \'pattern\' | WHERE expr]\n \nDescription\n----------- \nThe output from SHOW COLLATION includes all available\ncollations. The LIKE clause, if present on its own,\nindicates which collation names to match. The WHERE and LIKE\nclauses can be given to select rows using more general\nconditions, as discussed in Extended SHOW.\n \nThe same information can be queried from the\ninformation_schema.COLLATIONS table.\n \nSee Setting Character Sets and Collations for details on\nspecifying the collation at the server, database, table and\ncolumn levels.\n \nExamples\n-------- \nSHOW COLLATION LIKE \'latin1%\';\n+-------------------+---------+----+---------+----------+---------+\n| Collation | Charset | Id | Default | Compiled | Sortlen |\n+-------------------+---------+----+---------+----------+---------+\n| latin1_german1_ci | latin1 | 5 | | Yes | 1 |\n| latin1_swedish_ci | latin1 | 8 | Yes | Yes | 1 |\n| latin1_danish_ci | latin1 | 15 | | Yes | 1 |\n| latin1_german2_ci | latin1 | 31 | | Yes | 2 |\n| latin1_bin | latin1 | 47 | | Yes | 1 |\n| latin1_general_ci | latin1 | 48 | | Yes | 1 |\n| latin1_general_cs | latin1 | 49 | | Yes | 1 |\n| latin1_spanish_ci | latin1 | 94 | | Yes | 1 |\n+-------------------+---------+----+---------+----------+---------+\n \nSHOW COLLATION WHERE Sortlen LIKE \'8\' AND Charset LIKE\n\'utf8\';\n+--------------------+---------+-----+---------+----------+---------+\n| Collation | Charset | Id | Default | Compiled | Sortlen |\n+--------------------+---------+-----+---------+----------+---------+\n| utf8_unicode_ci | utf8 | 192 | | Yes | 8 |\n| utf8_icelandic_ci | utf8 | 193 | | Yes | 8 |\n| utf8_latvian_ci | utf8 | 194 | | Yes | 8 |\n| utf8_romanian_ci | utf8 | 195 | | Yes | 8 |\n| utf8_slovenian_ci | utf8 | 196 | | Yes | 8 |\n| utf8_polish_ci | utf8 | 197 | | Yes | 8 |\n| utf8_estonian_ci | utf8 | 198 | | Yes | 8 |\n| utf8_spanish_ci | utf8 | 199 | | Yes | 8 |\n| utf8_swedish_ci | utf8 | 200 | | Yes | 8 |\n| utf8_turkish_ci | utf8 | 201 | | Yes | 8 |\n| utf8_czech_ci | utf8 | 202 | | Yes | 8 |\n| utf8_danish_ci | utf8 | 203 | | Yes | 8 |\n| utf8_lithuanian_ci | utf8 | 204 | | Yes | 8 |\n| utf8_slovak_ci | utf8 | 205 | | Yes | 8 |\n| utf8_spanish2_ci | utf8 | 206 | | Yes | 8 |\n| utf8_roman_ci | utf8 | 207 | | Yes | 8 |\n| utf8_persian_ci | utf8 | 208 | | Yes | 8 |\n| utf8_esperanto_ci | utf8 | 209 | | Yes | 8 |\n| utf8_hungarian_ci | utf8 | 210 | | Yes | 8 |\n| utf8_sinhala_ci | utf8 | 211 | | Yes | 8 |\n| utf8_croatian_ci | utf8 | 213 | | Yes | 8 |\n+--------------------+---------+-----+---------+----------+---------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-collation/', '', 'https://mariadb.com/kb/en/show-collation/'),
(357, 'SHOW COLUMNS', 26, 'Syntax\n------ \nSHOW [FULL] {COLUMNS | FIELDS} FROM tbl_name [FROM db_name]\n [LIKE \'pattern\' | WHERE expr]\n \nDescription\n----------- \nSHOW COLUMNS displays information about the columns in a\ngiven table. It also works for views. The LIKE clause, if\npresent on its own, indicates which column names to match.\nThe WHERE and LIKE clauses can be given to select rows using\nmore general conditions, as discussed in Extended SHOW.\n \nIf the data types differ from what you expect them to be\nbased on a\nCREATE TABLE statement, note that MariaDB sometimes changes\ndata types when you create or alter a table. The conditions\nunder which this\noccurs are described in the Silent Column Changes article.\n \nThe FULL keyword causes the output to include the column\ncollation and comments, as well as the privileges you have\nfor each column.\n \nYou can use db_name.tbl_name as an alternative to the\ntbl_name FROM db_name syntax. In other words, these two\nstatements are equivalent:\n \nSHOW COLUMNS FROM mytable FROM mydb;\nSHOW COLUMNS FROM mydb.mytable;\n \nSHOW COLUMNS displays the following values for each table\ncolumn:\n \nField indicates the column name.\n \nType indicates the column data type.\n \nCollation indicates the collation for non-binary string\ncolumns, or\nNULL for other columns. This value is displayed only if you\nuse the\nFULL keyword.\n \nThe Null field contains YES if NULL values can be stored in\nthe column,\nNO if not.\n \nThe Key field indicates whether the column is indexed:\nIf Key is empty, the column either is not indexed or is\nindexed only as a\n secondary column in a multiple-column, non-unique index.\nIf Key is PRI, the column is a PRIMARY KEY or\n is one of the columns in a multiple-column PRIMARY KEY.\nIf Key is UNI, the column is the first column of a\nunique-valued\n index that cannot contain NULL values.\nIf Key is MUL, multiple occurrences of a given value are\nallowed\n within the column. The column is the first column of a\nnon-unique index or a\n unique-valued index that can contain NULL values.\n \nIf more than one of the Key values applies to a given column\nof a\ntable, Key displays the one with the highest priority, in\nthe order\nPRI, UNI, MUL.\n \nA UNIQUE index may be displayed as PRI if\nit cannot contain NULL values and there is no\nPRIMARY KEY in the table. A UNIQUE index\nmay display as MUL if several columns form a composite\nUNIQUE index; although the combination of the columns is\nunique, each column can still hold multiple occurrences of a\ngiven value.\n \nThe Default field indicates the default value that is\nassigned to the\ncolumn.\n \nThe Extra field contains any additional information that is\navailable about a given column.\n \nValue | Description | \n \nAUTO_INCREMENT | The column was created with the\nAUTO_INCREMENT keyword. | \n \nPERSISTENT | The column was created with the PERSISTENT\nkeyword. (New in 5.3) | \n \nVIRTUAL | The column was created with the VIRTUAL keyword.\n(New in 5.3) | \n \non update CURRENT_TIMESTAMP | The column is a TIMESTAMP\ncolumn that is automatically updated on INSERT and UPDATE. |\n\n \nPrivileges indicates the privileges you have for the column.\nThis\nvalue is displayed only if you use the FULL keyword.\n \nComment indicates any comment the column has. This value is\ndisplayed\nonly if you use the FULL keyword.\n \nSHOW FIELDS is a synonym for\nSHOW COLUMNS. Also DESCRIBE and EXPLAIN can be used as\nshortcuts.\n \nYou can also list a table\'s columns with: \n \nmysqlshow db_name tbl_name\n \nSee the mysqlshow command for more details.\n \nThe DESCRIBE statement provides information similar to SHOW\nCOLUMNS. The information_schema.COLUMNS table provides\nsimilar, but more complete, information.\n \nThe SHOW CREATE TABLE, SHOW TABLE STATUS, and SHOW INDEX\nstatements also provide information about tables.\n \nExamples\n-------- \nSHOW COLUMNS FROM city;\n+------------+----------+------+-----+---------+----------------+\n| Field | Type | Null | Key | Default | Extra |\n+------------+----------+------+-----+---------+----------------+\n| Id | int(11) | NO | PRI | NULL | auto_increment |\n| Name | char(35) | NO | | | |\n| Country | char(3) | NO | UNI | | |\n| District | char(20) | YES | MUL | | |\n| Population | int(11) | NO | | 0 | |\n+------------+----------+------+-----+---------+----------------+\n \nSHOW COLUMNS FROM employees WHERE Type LIKE \'Varchar%\';\n+---------------+-------------+------+-----+---------+-------+\n| Field | Type | Null | Key | Default | Extra |\n+---------------+-------------+------+-----+---------+-------+\n| first_name | varchar(30) | NO | MUL | NULL | |\n| last_name | varchar(40) | NO | | NULL | |\n| position | varchar(25) | NO | | NULL | |\n| home_address | varchar(50) | NO | | NULL | |\n| home_phone | varchar(12) | NO | | NULL | |\n| employee_code | varchar(25) | NO | UNI | NULL | |\n+---------------+-------------+------+-----+---------+-------+\n \n\n\nURL: https://mariadb.com/kb/en/show-columns/', '', 'https://mariadb.com/kb/en/show-columns/'),
(732, 'NTH_VALUE', 42, 'The NTH_VALUE() function was first introduced with other\nwindow functions in MariaDB 10.2.\n \nSyntax\n------ \nNTH_VALUE (expr[, num_row]) OVER ( \n [ PARTITION BY partition_expression ] \n [ ORDER BY order_list ]\n)\n \nDescription\n----------- \nThe NTH_VALUE function returns the value evaluated at row\nnumber num_row of the window frame, starting from 1, or NULL\nif the row does not exist.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/nth_value/', '', 'https://mariadb.com/kb/en/nth_value/'),
(742, 'SPIDER_FLUSH_TABLE_MON_CACHE', 43, 'Syntax\n------ \nSPIDER_FLUSH_TABLE_MON_CACHE()\n \nDescription\n----------- \nA UDF installed with the Spider Storage Engine, this\nfunction is used for refreshing monitoring server\ninformation. It returns a value of 1.\n \nExamples\n-------- \nSELECT SPIDER_FLUSH_TABLE_MON_CACHE();\n+--------------------------------+\n| SPIDER_FLUSH_TABLE_MON_CACHE() |\n+--------------------------------+\n| 1 |\n+--------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/spider_flush_table_mon_cache/', '', 'https://mariadb.com/kb/en/spider_flush_table_mon_cache/'),
(744, 'COLUMN_CHECK', 44, 'The COLUMN_CHECK function was added in MariaDB 10.0.1.\n \nSyntax\n------ \nCOLUMN_CHECK(dyncol_blob);\n \nDescription\n----------- \nCheck if dyncol_blob is a valid packed dynamic columns blob.\nReturn value of 1 means the blob is valid, return value of 0\nmeans it is not.\n \nRationale:\nNormally, one works with valid dynamic column blobs.\nFunctions like COLUMN_CREATE, COLUMN_ADD, COLUMN_DELETE\nalways return valid dynamic column blobs. However, if a\ndynamic column blob is accidentally truncated, or transcoded\nfrom one character set to another, it will be corrupted.\nThis function can be used to check if a value in a blob\nfield is a valid dynamic column blob.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/column_check/', '', 'https://mariadb.com/kb/en/column_check/'),
(746, 'COLUMN_DELETE', 44, 'The Dynamic columns feature was introduced in MariaDB 5.3.\n \nSyntax\n------ \nCOLUMN_DELETE(dyncol_blob, column_nr, column_nr...);\nCOLUMN_DELETE(dyncol_blob, column_name, column_name...);\n \nDescription\n----------- \nDeletes a dynamic column with the specified name. Multiple\nnames can be given. The return value is a dynamic column\nblob after the modification.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/column_delete/', '', 'https://mariadb.com/kb/en/column_delete/'),
(747, 'COLUMN_EXISTS', 44, 'The Dynamic columns feature was introduced in MariaDB 5.3.\n \nSyntax\n------ \nCOLUMN_EXISTS(dyncol_blob, column_nr);\nCOLUMN_EXISTS(dyncol_blob, column_name);\n \nDescription\n----------- \nChecks if a column with name column_name exists in\ndyncol_blob. If yes, return 1, otherwise return 0. See\ndynamic columns for more information.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/column_exists/', '', 'https://mariadb.com/kb/en/column_exists/'),
(358, 'SHOW CONTRIBUTORS', 26, 'Syntax\n------ \nSHOW CONTRIBUTORS\n \nDescription\n----------- \nThe SHOW CONTRIBUTORS statement displays information about\nthe companies and people who financially contribute to\nMariaDB. For each contributor, it displays Name, Location,\nand Comment values. All columns are encoded as latin1.\n \nIn MariaDB 5.5 this is in somewhat random order, and the\nfeature was deprecated.\n \nIn MariaDB 10.0.5 it was un-deprecated, and since then\ndisplays all members and sponsors of the MariaDB Foundation\nas well as other financial contributors.\n \nExample\n \nSHOW CONTRIBUTORS;\n+---------------------+-------------------------------+-------------------------------------------------------------+\n| Name | Location | Comment |\n+---------------------+-------------------------------+-------------------------------------------------------------+\n| Booking.com | https://www.booking.com | Founding member,\nPlatinum Sponsor of the MariaDB Foundation |\n| Alibaba Cloud | https://www.alibabacloud.com/ | Platinum\nSponsor of the MariaDB Foundation |\n| Tencent Cloud | https://cloud.tencent.com | Platinum\nSponsor of the MariaDB Foundation |\n| Microsoft | https://microsoft.com/ | Platinum Sponsor of\nthe MariaDB Foundation |\n| MariaDB Corporation | https://mariadb.com | Founding\nmember, Platinum Sponsor of the MariaDB Foundation |\n| Visma | https://visma.com | Gold Sponsor of the MariaDB\nFoundation |\n| DBS | https://dbs.com | Gold Sponsor of the MariaDB\nFoundation |\n| IBM | https://www.ibm.com | Gold Sponsor of the MariaDB\nFoundation |\n| Tencent Games | http://game.qq.com/ | Gold Sponsor of the\nMariaDB Foundation |\n| Nexedi | https://www.nexedi.com | Silver Sponsor of the\nMariaDB Foundation |\n| Acronis | https://www.acronis.com | Silver Sponsor of the\nMariaDB Foundation |\n| Verkkokauppa.com | https://www.verkkokauppa.com | Bronze\nSponsor of the MariaDB Foundation |\n| Virtuozzo | https://virtuozzo.com | Bronze Sponsor of the\nMariaDB Foundation |\n| Tencent Game DBA | http://tencentdba.com/about | Bronze\nSponsor of the MariaDB Foundation |\n| Tencent TDSQL | http://tdsql.org | Bronze Sponsor of the\nMariaDB Foundation |\n| Percona | https://www.percona.com/ | Bronze Sponsor of the\nMariaDB Foundation |\n| Google | USA | Sponsoring encryption, parallel replication\nand GTID |\n| Facebook | USA | Sponsoring non-blocking API, LIMIT ROWS\nEXAMINED etc |\n| Ronald Bradford | Brisbane, Australia | EFF contribution\nfor UC2006 Auction |\n| Sheeri Kritzer | Boston, Mass. USA | EFF contribution for\nUC2006 Auction |\n| Mark Shuttleworth | London, UK. | EFF contribution for\nUC2006 Auction |\n+---------------------+-------------------------------+-------------------------------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/show-contributors/', '', 'https://mariadb.com/kb/en/show-contributors/'),
(359, 'SHOW CREATE DATABASE', 26, 'Syntax\n------ \nSHOW CREATE {DATABASE | SCHEMA} db_name\n \nDescription\n----------- \nShows the CREATE DATABASE statement that\ncreates the given database. SHOW CREATE SCHEMA is a synonym\nfor SHOW CREATE DATABASE. SHOW CREATE DATABASE quotes\ndatabase names according to the value of the\nsql_quote_show_create server system variable.\n \nExamples\n-------- \nSHOW CREATE DATABASE test;\n+----------+-----------------------------------------------------------------+\n| Database | Create Database |\n+----------+-----------------------------------------------------------------+\n| test | CREATE DATABASE `test` /*!40100 DEFAULT CHARACTER\nSET latin1 */ |\n+----------+-----------------------------------------------------------------+\n \nSHOW CREATE SCHEMA test;\n+----------+-----------------------------------------------------------------+\n| Database | Create Database |\n+----------+-----------------------------------------------------------------+\n| test | CREATE DATABASE `test` /*!40100 DEFAULT CHARACTER\nSET latin1 */ |\n+----------+-----------------------------------------------------------------+\n \nWith sql_quote_show_create off:\n \nSHOW CREATE DATABASE test;\n+----------+---------------------------------------------------------------+\n| Database | Create Database |\n+----------+---------------------------------------------------------------+\n| test | CREATE DATABASE test /*!40100 DEFAULT CHARACTER SET\nlatin1 */ |\n+----------+---------------------------------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/show-create-database/', '', 'https://mariadb.com/kb/en/show-create-database/'),
(360, 'SHOW CREATE EVENT', 26, 'Syntax\n------ \nSHOW CREATE EVENT event_name\n \nDescription\n----------- \nThis statement displays the CREATE EVENT\nstatement needed to re-create a given event, as well as the\nSQL_MODE that was used when the trigger has been created and\nthe character set used by the connection.. To find out which\nevents are present, use SHOW EVENTS.\n \nThe output of this statement is unreliably affected by the\nsql_quote_show_create server system variable - see\nhttp://bugs.mysql.com/bug.php?id=12719\n \nThe information_schema.EVENTS table provides similar, but\nmore complete, information.\n \nExamples\n-------- \nSHOW CREATE EVENT test.e_daily\\G\n*************************** 1. row\n***************************\n Event: e_daily\n sql_mode: \n time_zone: SYSTEM\n Create Event: CREATE EVENT `e_daily`\n ON SCHEDULE EVERY 1 DAY\n STARTS CURRENT_TIMESTAMP + INTERVAL 6 HOUR\n ON COMPLETION NOT PRESERVE\n ENABLE\n COMMENT \'Saves total number of sessions then\n clears the table each day\'\n DO BEGIN\n INSERT INTO site_activity.totals (time, total)\n SELECT CURRENT_TIMESTAMP, COUNT(*) \n FROM site_activity.sessions;\n DELETE FROM site_activity.sessions;\n END\ncharacter_set_client: latin1\ncollation_connection: latin1_swedish_ci\n Database Collation: latin1_swedish_ci\n \n\n\nURL: https://mariadb.com/kb/en/show-create-event/', '', 'https://mariadb.com/kb/en/show-create-event/'),
(750, 'COLUMN_LIST', 44, 'The Dynamic columns feature was introduced in MariaDB 5.3.\n \nSyntax\n------ \nCOLUMN_LIST(dyncol_blob);\n \nDescription\n----------- \nSince MariaDB 10.0.1, this function returns a\ncomma-separated list of column names. The names are quoted\nwith backticks.\n \nBefore MariaDB 10.0.1, it returned a comma-separated list of\ncolumn numbers, not names.\n \nSee dynamic columns for more information.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/column_list/', '', 'https://mariadb.com/kb/en/column_list/'),
(361, 'SHOW CREATE FUNCTION', 26, 'Syntax\n------ \nSHOW CREATE FUNCTION func_name\n \nDescription\n----------- \nThis statement is similar to \nSHOW CREATE PROCEDURE but for\nstored functions.\n \nThe output of this statement is unreliably affected by the\nsql_quote_show_create server system variable - see\nhttp://bugs.mysql.com/bug.php?id=12719\n \nExample\n \nMariaDB [test]> SHOW CREATE FUNCTION VatCents\\G\n*************************** 1. row\n***************************\n Function: VatCents\n sql_mode: \n Create Function: CREATE DEFINER=`root`@`localhost` FUNCTION\n`VatCents`(price DECIMAL(10,2)) RETURNS int(11)\n DETERMINISTIC\nBEGIN\n DECLARE x INT;\n SET x = price * 114;\n RETURN x;\nEND\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n Database Collation: latin1_swedish_ci\n \n\n\nURL: https://mariadb.com/kb/en/show-create-function/', '', 'https://mariadb.com/kb/en/show-create-function/'),
(362, 'SHOW CREATE PACKAGE', 26, 'Oracle-style packages were introduced in MariaDB 10.3.5.\n \nSyntax\n------ \nSHOW CREATE PACKAGE [ db_name . ] package_name\n \nDescription\n----------- \nThe SHOW CREATE PACKAGE statement can be used when Oracle\nSQL_MODE is set.\n \nShows the CREATE statement that creates the given package\nspecification.\n \nExamples\n-------- \nSHOW CREATE PACKAGE employee_tools\\G\n*************************** 1. row\n***************************\n Package: employee_tools\n sql_mode:\nPIPES_AS_CONCAT,ANSI_QUOTES,IGNORE_SPACE,ORACLE,NO_KEY_OPTIONS,NO_TABLE_OPTIONS,NO_FIELD_OPTIONS,NO_AUTO_CREATE_USER\n Create Package: CREATE DEFINER=\"root\"@\"localhost\"\nPACKAGE \"employee_tools\" AS\n FUNCTION getSalary(eid INT) RETURN DECIMAL(10,2);\n PROCEDURE raiseSalary(eid INT, amount DECIMAL(10,2));\n PROCEDURE raiseSalaryStd(eid INT);\n PROCEDURE hire(ename TEXT, esalary DECIMAL(10,2));\nEND\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n Database Collation: latin1_swedish_ci\n \n\n\nURL: https://mariadb.com/kb/en/show-create-package/', '', 'https://mariadb.com/kb/en/show-create-package/'),
(363, 'SHOW CREATE PACKAGE BODY', 26, 'Oracle-style packages were introduced in MariaDB 10.3.5.\n \nSyntax\n------ \nSHOW CREATE PACKAGE BODY [ db_name . ] package_name\n \nDescription\n----------- \nThe SHOW CREATE PACKAGE BODY statement can be used when\nOracle SQL_MODE is set.\n \nShows the CREATE statement that creates the given package\nbody (i.e. the implementation).\n \nExamples\n-------- \nSHOW CREATE PACKAGE BODY employee_tools\\G\n*************************** 1. row\n***************************\n Package body: employee_tools\n sql_mode:\nPIPES_AS_CONCAT,ANSI_QUOTES,IGNORE_SPACE,ORACLE,NO_KEY_OPTIONS,NO_TABLE_OPTIONS,NO_FIELD_OPTIONS,NO_AUTO_CREATE_USER\n Create Package Body: CREATE DEFINER=\"root\"@\"localhost\"\nPACKAGE BODY \"employee_tools\" AS\n \n stdRaiseAmount DECIMAL(10,2):=500;\n \n PROCEDURE log (eid INT, ecmnt TEXT) AS\n BEGIN\n INSERT INTO employee_log (id, cmnt) VALUES (eid, ecmnt);\n END;\n \n PROCEDURE hire(ename TEXT, esalary DECIMAL(10,2)) AS\n eid INT;\n BEGIN\n INSERT INTO employee (name, salary) VALUES (ename,\nesalary);\n eid:= last_insert_id();\n log(eid, \'hire \' || ename);\n END;\n \n FUNCTION getSalary(eid INT) RETURN DECIMAL(10,2) AS\n nSalary DECIMAL(10,2);\n BEGIN\n SELECT salary INTO nSalary FROM employee WHERE id=eid;\n log(eid, \'getSalary id=\' || eid || \' salary=\' ||\nnSalary);\n RETURN nSalary;\n END;\n \n PROCEDURE raiseSalary(eid INT, amount DECIMAL(10,2)) AS\n BEGIN\n UPDATE employee SET salary=salary+amount WHERE id=eid;\n log(eid, \'raiseSalary id=\' || eid || \' amount=\' ||\namount);\n END;\n \n PROCEDURE raiseSalaryStd(eid INT) AS\n BEGIN\n raiseSalary(eid, stdRaiseAmount);\n log(eid, \'raiseSalaryStd id=\' || eid);\n END;\n \nBEGIN \n log(0, \'Session \' || connection_id() || \' \' ||\ncurrent_user || \' started\');\nEND\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n Database Collation: latin1_swedish_ci\n \n\n\nURL: https://mariadb.com/kb/en/show-create-package-body/', '', 'https://mariadb.com/kb/en/show-create-package-body/'),
(364, 'SHOW CREATE PROCEDURE', 26, 'Syntax\n------ \nSHOW CREATE PROCEDURE proc_name\n \nDescription\n----------- \nThis statement is a MariaDB extension. It returns the exact\nstring that\ncan be used to re-create the named stored procedure, as well\nas the SQL_MODE that was used when the trigger has been\ncreated and the character set used by the connection.. A\nsimilar\nstatement, SHOW CREATE FUNCTION,\ndisplays information about stored functions.\n \nBoth statements require that you are the owner of the\nroutine or have the SELECT privilege on the mysql.proc\ntable. When neither is true, the statements display NULL for\nthe Create Procedure or Create Function field.\n \nWarning Users with SELECT privileges on mysql.proc or USAGE\nprivileges on *.* can view the text of routines, even when\nthey do not have privileges for the function or procedure\nitself.\n \nThe output of these statements is unreliably affected by the\nsql_quote_show_create server system variable - see\nhttp://bugs.mysql.com/bug.php?id=12719\n \nExamples\n-------- \nHere\'s a comparison of the SHOW CREATE PROCEDURE and SHOW\nCREATE FUNCTION statements.\n \nSHOW CREATE PROCEDURE test.simpleproc\\G\n*************************** 1. row\n***************************\n Procedure: simpleproc\n sql_mode: \n Create Procedure: CREATE PROCEDURE `simpleproc`(OUT param1\nINT)\n BEGIN\n SELECT COUNT(*) INTO param1 FROM t;\n END\ncharacter_set_client: latin1\ncollation_connection: latin1_swedish_ci\n Database Collation: latin1_swedish_ci\n \nSHOW CREATE FUNCTION test.hello\\G\n*************************** 1. row\n***************************\n Function: hello\n sql_mode:\n Create Function: CREATE FUNCTION `hello`(s CHAR(20))\n RETURNS CHAR(50)\n RETURN CONCAT(\'Hello, \',s,\'!\')\ncharacter_set_client: latin1\ncollation_connection: latin1_swedish_ci\n Database Collation: latin1_swedish_ci\n \nWhen the user issuing the statement does not have privileges\non the routine, attempting to CALL the procedure raises\nError 1370.\n \nCALL test.prc1();\nError 1370 (42000): execute command denieed to user\n\'test_user\'@\'localhost\' for routine \'test\'.\'prc1\'\n \nIf the user neither has privilege to the routine nor the\nSELECT privilege on mysql.proc table, it raises Error 1305,\ninforming them that the procedure does not exist.\n \nSHOW CREATE TABLES test.prc1\\G\nError 1305 (42000): PROCEDURE prc1 does not exist\n \n\n\nURL: https://mariadb.com/kb/en/show-create-procedure/', '', 'https://mariadb.com/kb/en/show-create-procedure/'),
(365, 'SHOW CREATE SEQUENCE', 26, 'Sequences were introduced in MariaDB 10.3.\n \nSyntax\n------ \nSHOW CREATE SEQUENCE sequence_name;\n \nDescription\n----------- \nShows the CREATE SEQUENCE statement that created the given\nsequence. The statement requires the SELECT privilege for\nthe table.\n \nExample\n \nCREATE SEQUENCE s1 START WITH 50;\n \nSHOW CREATE SEQUENCE s1\\G;\n \n*************************** 1. row\n***************************\n Table: t1\nCreate Table: CREATE SEQUENCE `s1` start with 50 minvalue 1\nmaxvalue 9223372036854775806\nincrement by 1 cache 1000 nocycle ENGINE=Aria\n \nNotes\n \nIf you want to see the underlying table structure used for\nthe SEQUENCE\nyou can use SHOW CREATE TABLE on the SEQUENCE. You can also\nuse SELECT to read the current recorded state of the\nSEQUENCE:\n \nCREATE SEQUENCE t1;\n \nSHOW CREATE TABLE s1\\G\n*************************** 1. row\n***************************\n Table: s1\nCreate Table: CREATE TABLE `s1` (\n `next_value` bigint(21) NOT NULL COMMENT \'next not cached\nvalue\',\n `min_value` bigint(21) NOT NULL COMMENT \'min value\',\n `max_value` bigint(21) NOT NULL COMMENT \'max value\',\n `start` bigint(21) NOT NULL COMMENT \'start value\',\n `increment` bigint(21) NOT NULL COMMENT \'increment\nvalue\',\n `cache` bigint(21) NOT NULL COMMENT \'cache size\',\n `cycle` tinyint(1) unsigned NOT NULL COMMENT \'cycle\nstate\',\n `round` bigint(21) NOT NULL COMMENT \'How many cycles has\nbeen done\'\n) ENGINE=Aria SEQUENCE=1\n \nSELECT * FROM s1;\n \n+------------+-----------+---------------------+-------+-----------+-------+-------+-------+\n| next_value | min_value | max_value | start | increment |\ncache | cycle | round |\n+------------+-----------+---------------------+-------+-----------+-------+-------+-------+\n| 1 | 1 | 9223372036854775806 | 1 | 1 | 1000 | 0 | 0 |\n+------------+-----------+---------------------+-------+-----------+-------+-------+-------+\n \n\n\nURL: https://mariadb.com/kb/en/show-create-sequence/', '', 'https://mariadb.com/kb/en/show-create-sequence/'),
(366, 'SHOW CREATE TABLE', 26, 'Syntax\n------ \nSHOW CREATE TABLE tbl_name\n \nDescription\n----------- \nShows the CREATE TABLE statement that created the given\ntable. The statement requires the SELECT privilege for the\ntable. This statement also works with views and SEQUENCE.\n \nSHOW CREATE TABLE quotes table and\ncolumn names according to the value of the\nsql_quote_show_create server system variable.\n \nMariaDB and MySQL-specific table options, column options,\nand index options are not included in the output of this\nstatement if the NO_TABLE_OPTIONS, NO_FIELD_OPTIONS and\nNO_KEY_OPTIONS SQL_MODE flags are used.\n \nInvalid table options, column options and index options are\nnormally commented out (note, that it is possible to create\na table with invalid options, by altering a table of a\ndifferent engine, where these options were valid). To have\nthem uncommented, enable IGNORE_BAD_TABLE_OPTIONS SQL_MODE.\nRemember that replaying a CREATE TABLE statement with\nuncommented invalid options will fail with an error, unless\nIGNORE_BAD_TABLE_OPTIONS SQL_MODE is in effect.\n \nNote that SHOW CREATE TABLE is not meant to provide metadata\nabout a table. It provides information about how the table\nwas declared, but the real table structure could differ a\nbit. For example, if an index has been declared as HASH, the\nCREATE TABLE statement returned by SHOW CREATE TABLE will\ndeclare that index as HASH; however, it is possible that the\nindex is in fact a BTREE, because the storage engine does\nnot support HASH.\n \nMariaDB 10.2.1 permits TEXT and BLOB data types to be\nassigned a DEFAULT value. As a result, from MariaDB 10.2.1,\nSHOW CREATE TABLE will append a DEFAULT NULL to nullable\nTEXT or BLOB fields if no specific default is provided. \n \nFrom MariaDB 10.2.2, numbers are no longer quoted in the\nDEFAULT clause in SHOW CREATE statement. Previously, MariaDB\nquoted numbers. \n \nExamples\n-------- \nSHOW CREATE TABLE t\\G\n*************************** 1. row\n***************************\n Table: t\nCreate Table: CREATE TABLE `t` (\n `id` int(11) NOT NULL AUTO_INCREMENT,\n `s` char(60) DEFAULT NULL,\n PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n \nWith sql_quote_show_create off:\n \nSHOW CREATE TABLE t\\G\n*************************** 1. row\n***************************\n Table: t\nCreate Table: CREATE TABLE t (\n id int(11) NOT NULL AUTO_INCREMENT,\n s char(60) DEFAULT NULL,\n PRIMARY KEY (id)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n \nUnquoted numeric DEFAULTs, from MariaDB 10.2.2:\n \nCREATE TABLE td (link TINYINT DEFAULT 1);\n \nSHOW CREATE TABLE td\\G\n*************************** 1. row\n***************************\n Table: td\nCreate Table: CREATE TABLE `td` (\n `link` tinyint(4) DEFAULT 1\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n \nQuoted numeric DEFAULTs, until MariaDB 10.2.1:\n \nCREATE TABLE td (link TINYINT DEFAULT 1);\n \nSHOW CREATE TABLE td\\G\n*************************** 1. row\n***************************\n Table: td\nCreate Table: CREATE TABLE `td` (\n `link` tinyint(4) DEFAULT \'1\'\n) ENGINE=InnoDB DEFAULT CHARSET=latin1\n \n\n\nURL: https://mariadb.com/kb/en/show-create-table/', '', 'https://mariadb.com/kb/en/show-create-table/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(367, 'SHOW CREATE TRIGGER', 26, 'Syntax\n------ \nSHOW CREATE TRIGGER trigger_name\n \nDescription\n----------- \nThis statement shows a CREATE TRIGGER\nstatement that creates the given trigger, as well as the\nSQL_MODE that was used when the trigger has been created and\nthe character set used by the connection.\n \nThe output of this statement is unreliably affected by the\nsql_quote_show_create server system variable - see\nhttp://bugs.mysql.com/bug.php?id=12719\n \nExamples\n-------- \nSHOW CREATE TRIGGER example\\G\n*************************** 1. row\n***************************\n Trigger: example\n sql_mode:\nONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,STRICT_ALL_TABLES\n,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_\nENGINE_SUBSTITUTION\nSQL Original Statement: CREATE DEFINER=`root`@`localhost`\nTRIGGER example BEFORE\n INSERT ON t FOR EACH ROW\nBEGIN\n SET NEW.c = NEW.c * 2;\nEND\n character_set_client: cp850\n collation_connection: cp850_general_ci\n Database Collation: utf8_general_ci\n Created: 2016-09-29 13:53:34.35\n \nThe Created column was added in MySQL 5.7 and MariaDB 10.2.3\nas part of introducing multiple trigger events per action.\n \n\n\nURL: https://mariadb.com/kb/en/show-create-trigger/', '', 'https://mariadb.com/kb/en/show-create-trigger/'),
(368, 'SHOW CREATE USER', 26, 'SHOW CREATE USER was introduced in MariaDB 10.2.0\n \nSyntax\n------ \nSHOW CREATE USER user_name\n \nDescription\n----------- \nShows the CREATE USER statement that created the given\nuser. The statement requires the SELECT privilege for the\nmysql database, except for the current user.\n \nExamples\n-------- \nCREATE USER foo4@test require cipher \'text\' \n issuer \'foo_issuer\' subject \'foo_subject\';\n \nSHOW CREATE USER foo4@test\\G\n*************************** 1. row\n***************************\nCREATE USER \'foo4\'@\'test\' \n REQUIRE ISSUER \'foo_issuer\' \n SUBJECT \'foo_subject\' \n CIPHER \'text\'\n \nUser Password Expiry:\n \nCREATE USER \'monty\'@\'localhost\' PASSWORD EXPIRE INTERVAL\n120 DAY;\n \nSHOW CREATE USER \'monty\'@\'localhost\';\n \n+------------------------------------------------------------------+\n| CREATE USER for monty@localhost |\n+------------------------------------------------------------------+\n| CREATE USER \'monty\'@\'localhost\' PASSWORD EXPIRE\nINTERVAL 120 DAY |\n+------------------------------------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/show-create-user/', '', 'https://mariadb.com/kb/en/show-create-user/'),
(369, 'SHOW CREATE VIEW', 26, 'Syntax\n------ \nSHOW CREATE VIEW view_name\n \nDescription\n----------- \nThis statement shows a CREATE VIEW statement that creates\nthe given view, as well as the character set used by the\nconnection when the view was created. This statement\nalso works with views.\n \nSHOW CREATE VIEW quotes table, column and stored function\nnames according to the value of the sql_quote_show_create\nserver system variable.\n \nExamples\n-------- \nSHOW CREATE VIEW example\\G\n*************************** 1. row\n***************************\n View: example\n Create View: CREATE ALGORITHM=UNDEFINED\nDEFINER=`root`@`localhost` SQL\nSECURITY DEFINER VIEW `example` AS (select `t`.`id` AS\n`id`,`t`.`s` AS `s` from\n`t`)\ncharacter_set_client: cp850\ncollation_connection: cp850_general_ci\n \nWith sql_quote_show_create off:\n \nSHOW CREATE VIEW example\\G\n*************************** 1. row\n***************************\n View: example\n Create View: CREATE ALGORITHM=UNDEFINED\nDEFINER=root@localhost SQL SECU\nRITY DEFINER VIEW example AS (select t.id AS id,t.s AS s\nfrom t)\ncharacter_set_client: cp850\ncollation_connection: cp850_general_ci\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-create-view/', '', 'https://mariadb.com/kb/en/show-create-view/'),
(370, 'SHOW DATABASES', 26, 'Syntax\n------ \nSHOW {DATABASES | SCHEMAS}\n [LIKE \'pattern\' | WHERE expr]\n \nDescription\n----------- \nSHOW DATABASES lists the databases on the MariaDB server\nhost.\nSHOW SCHEMAS is a synonym for \nSHOW DATABASES. The LIKE clause, if\npresent on its own, indicates which database names to match.\nThe WHERE and LIKE clauses can be given to select rows using\nmore general conditions, as discussed in Extended SHOW.\n \nYou see only those databases for which you have some kind of\nprivilege, unless you have the global \nSHOW DATABASES privilege. You\ncan also get this list using the mysqlshow command.\n \nIf the server was started with the --skip-show-database\noption, you cannot use this statement at all unless you have\nthe\nSHOW DATABASES privilege.\n \nExample\n \nSHOW DATABASES;\n+--------------------+\n| Database |\n+--------------------+\n| information_schema |\n| mysql |\n| performance_schema |\n| test |\n+--------------------+\n \nSHOW DATABASES LIKE \'m%\';\n+---------------+\n| Database (m%) |\n+---------------+\n| mysql |\n+---------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-databases/', '', 'https://mariadb.com/kb/en/show-databases/'),
(373, 'SHOW ENGINES', 26, 'Syntax\n------ \nSHOW [STORAGE] ENGINES\n \nDescription\n----------- \nSHOW ENGINES displays status information about the server\'s\nstorage engines. This is particularly useful for checking\nwhether a storage\nengine is supported, or to see what the default engine is. \nSHOW TABLE TYPES is a deprecated synonym.\n \nThe information_schema.ENGINES table provides the same\ninformation.\n \nSince storage engines are plugins, different information\nabout them is also shown in the information_schema.PLUGINS\ntable and by the SHOW PLUGINS statement.\n \nNote that both MySQL\'s InnoDB and Percona\'s XtraDB\nreplacement are labeled as InnoDB. However, if XtraDB is in\nuse, it will be specified in the COMMENT field. See XtraDB\nand InnoDB. The same applies to FederatedX.\n \nThe output consists of the following columns:\nEngine indicates the engine\'s name.\nSupport indicates whether the engine is installed, and\nwhether it is the default engine for the current session.\nComment is a brief description.\nTransactions, XA and Savepoints indicate whether\ntransactions, XA transactions and transaction savepoints are\nsupported by the engine.\n \nExamples\n-------- \nSHOW ENGINES\\G\n*************************** 1. row\n***************************\n Engine: InnoDB\n Support: DEFAULT\n Comment: Supports transactions, row-level locking, and\nforeign keys\nTransactions: YES\n XA: YES\n Savepoints: YES\n*************************** 2. row\n***************************\n Engine: CSV\n Support: YES\n Comment: CSV storage engine\nTransactions: NO\n XA: NO\n Savepoints: NO\n*************************** 3. row\n***************************\n Engine: MyISAM\n Support: YES\n Comment: MyISAM storage engine\nTransactions: NO\n XA: NO\n Savepoints: NO\n*************************** 4. row\n***************************\n Engine: BLACKHOLE\n Support: YES\n Comment: /dev/null storage engine (anything you write to it\ndisappears)\nTransactions: NO\n XA: NO\n Savepoints: NO\n*************************** 5. row\n***************************\n Engine: FEDERATED\n Support: YES\n Comment: FederatedX pluggable storage engine\nTransactions: YES\n XA: NO\n Savepoints: YES\n*************************** 6. row\n***************************\n Engine: MRG_MyISAM\n Support: YES\n Comment: Collection of identical MyISAM tables\nTransactions: NO\n XA: NO\n Savepoints: NO\n*************************** 7. row\n***************************\n Engine: ARCHIVE\n Support: YES\n Comment: Archive storage engine\nTransactions: NO\n XA: NO\n Savepoints: NO\n*************************** 8. row\n***************************\n Engine: MEMORY\n Support: YES\n Comment: Hash based, stored in memory, useful for temporary\ntables\nTransactions: NO\n XA: NO\n Savepoints: NO\n*************************** 9. row\n***************************\n Engine: PERFORMANCE_SCHEMA\n Support: YES\n Comment: Performance Schema\nTransactions: NO\n XA: NO\n Savepoints: NO\n*************************** 10. row\n***************************\n Engine: Aria\n Support: YES\n Comment: Crash-safe tables with MyISAM heritage\nTransactions: NO\n XA: NO\n Savepoints: NO\n10 rows in set (0.00 sec)\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-engines/', '', 'https://mariadb.com/kb/en/show-engines/'),
(371, 'SHOW ENGINE', 26, 'Syntax\n------ \nSHOW ENGINE engine_name {STATUS | MUTEX}\n \nDescription\n----------- \nSHOW ENGINE displays operational information about a storage\nengine. The following statements currently are supported:\n \nSHOW ENGINE INNODB STATUS\nSHOW ENGINE INNODB MUTEX\nSHOW ENGINE PERFORMANCE_SCHEMA STATUS\n \nIf the Sphinx Storage Engine is installed, the following is\nalso supported:\n \nSHOW ENGINE SPHINX STATUS\n \nSee SHOW ENGINE SPHINX STATUS.\n \nOlder (and now removed) synonyms were SHOW INNODB STATUS\nfor SHOW ENGINE INNODB STATUS and \nSHOW MUTEX STATUS for \nSHOW ENGINE INNODB MUTEX.\n \nSHOW ENGINE BDB LOGS formerly displayed status information\nabout BDB log files. It was deprecated in MySQL 5.1.12 and\nremoved in MariaDB and MySQL 5.5, so now produces an error.\n \nSHOW ENGINE INNODB STATUS\n \nSHOW ENGINE INNODB STATUS displays extensive information\nfrom the standard InnoDB Monitor about the state of the\nInnoDB storage engine.\nSee SHOW ENGINE INNODB STATUS for more.\n \nSHOW ENGINE INNODB MUTEX\n \nSHOW ENGINE INNODB MUTEX displays InnoDB mutex statistics.\n \nThe statement displays the following output fields:\nType: Always InnoDB.\nName: The source file where the mutex is implemented, and\nthe line number\n in the file where the mutex is created. The line number is\ndependent on the MariaDB version.\nStatus: This field displays the following values if\nUNIV_DEBUG was defined at compilation time (for example, in\ninclude/univ.h in the InnoDB part of the source tree). Only\nthe os_waits value is displayed if UNIV_DEBUG was not\ndefined. Without UNIV_DEBUG, the information on which the\noutput is based is insufficient to distinguish regular\nmutexes and mutexes that protect\n rw-locks (which allow multiple readers or a single writer).\nConsequently, the\n output may appear to contain multiple rows for the same\nmutex.\ncount indicates how many times the mutex was requested.\nspin_waits indicates how many times the spinlock had to run.\nspin_rounds indicates the number of spinlock rounds.\n(spin_rounds divided by\n spin_waits provides the average round count.)\nos_waits indicates the number of operating system waits.\nThis occurs when\n the spinlock did not work (the mutex was not locked during\nthe spinlock and\n it was necessary to yield to the operating system and\nwait).\nos_yields indicates the number of times a the thread trying\nto lock a mutex\n gave up its timeslice and yielded to the operating system\n(on the\n presumption that allowing other threads to run will free\nthe mutex so that\n it can be locked).\nos_wait_times indicates the amount of time (in ms) spent in\noperating system\n waits, if the timed_mutexes system variable is 1 (ON). If\ntimed_mutexes is 0\n (OFF), timing is disabled, so os_wait_times is 0.\ntimed_mutexes is off by\n default.\n \nInformation from this statement can be used to diagnose\nsystem problems. For\nexample, large values of spin_waits and spin_rounds may\nindicate scalability\nproblems.\n \nThe information_schema.INNODB_MUTEXES table provides similar\ninformation.\n \nSHOW ENGINE PERFORMANCE_SCHEMA STATUS\n \nThis statement shows how much memory is used for\nperformance_schema tables and internal buffers.\n \nThe output contains the following fields:\nType: Always performance_schema.\nName: The name of a table, the name of an internal buffer,\nor the performance_schema word, followed by a dot and an\nattribute. Internal buffers names are enclosed by\nparenthesis. performance_schema means that the attribute\nrefers to the whole database (it is a total). \nStatus: The value for the attribute.\n \nThe following attributes are shown, in this order, for all\ntables:\nrow_size: The memory used for an individual record. This\nvalue will never change.\nrow_count: The number of rows in the table or buffer. For\nsome tables, this value depends on a server system variable.\nmemory: For tables and performance_schema, this is the\nresult of row_size * row_count.\n \nFor internal buffers, the attributes are:\ncount\nsize\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-engine/', '', 'https://mariadb.com/kb/en/show-engine/'),
(374, 'SHOW ERRORS', 26, 'Syntax\n------ \nSHOW ERRORS [LIMIT [offset,] row_count]\nSHOW ERRORS [LIMIT row_count OFFSET offset]\nSHOW COUNT(*) ERRORS\n \nDescription\n----------- \nThis statement is similar to SHOW WARNINGS, except that\ninstead of\ndisplaying errors, warnings, and notes, it displays only\nerrors.\n \nThe LIMIT clause has the same syntax as for the\nSELECT statement.\n \nThe SHOW COUNT(*) ERRORS statement displays the number of\nerrors. You can also retrieve this number from the\nerror_count variable.\n \nSHOW COUNT(*) ERRORS;\nSELECT @@error_count;\n \nThe value of error_count might be greater than the number of\nmessages displayed by SHOW WARNINGS if the max_error_count\nsystem variable is set so low that not all messages are\nstored.\n \nFor a list of MariaDB error codes, see MariaDB Error Codes.\n \nExamples\n-------- \nSELECT f();\nERROR 1305 (42000): FUNCTION f does not exist\n \nSHOW COUNT(*) ERRORS;\n \n+-----------------------+\n| @@session.error_count |\n+-----------------------+\n| 1 |\n+-----------------------+\n \nSHOW ERRORS;\n \n+-------+------+---------------------------+\n| Level | Code | Message |\n+-------+------+---------------------------+\n| Error | 1305 | FUNCTION f does not exist |\n+-------+------+---------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-errors/', '', 'https://mariadb.com/kb/en/show-errors/'),
(372, 'SHOW ENGINE INNODB STATUS', 26, 'SHOW ENGINE INNODB STATUS is a specific form of the SHOW\nENGINE statement that displays the InnoDB Monitor output,\nwhich is extensive InnoDB information which can be useful in\ndiagnosing problems.\n \nThe following sections are displayed\nStatus: Shows the timestamp, monitor name and the number of\nseconds, or the elapsed time between the current time and\nthe time the InnoDB Monitor output was last displayed. The\nper-second averages are based upon this time.\nBACKGROUND THREAD: srv_master_thread lines show work\nperformed by the main background thread.\nSEMAPHORES: Threads waiting for a semaphore and stats on how\nthe number of times threads have needed a spin or a wait on\na mutex or rw-lock semaphore. If this number of threads is\nlarge, there may be I/O or contention issues. Reducing the\nsize of the innodb_thread_concurrency system variable may\nhelp if contention is related to thread scheduling. Spin\nrounds per wait shows the number of spinlock rounds per OS\nwait for a mutex. \nLATEST FOREIGN KEY ERROR: Only shown if there has been a\nforeign key constraint error, it displays the failed\nstatement and information about the constraint and the\nrelated tables.\nLATEST DETECTED DEADLOCK: Only shown if there has been a\ndeadlock, it displays the transactions involved in the\ndeadlock and the statements being executed, held and\nrequired locked and the transaction rolled back to.\nTRANSACTIONS: The output of this section can help identify\nlock contention, as well as reasons for the deadlocks.\nFILE I/O: InnoDB thread information as well as pending I/O\noperations and I/O performance statistics.\nINSERT BUFFER AND ADAPTIVE HASH INDEX: InnoDB insert buffer\nand adaptive hash index status information, including the\nnumber of each type of operation performed, and adaptive\nhash index performance.\nLOG: InnoDB log information, including current log sequence\nnumber, how far the log has been flushed to disk, the\nposition at which InnoDB last took a checkpoint, pending\nwrites and write performance statistics.\nBUFFER POOL AND MEMORY: Information on buffer pool pages\nread and written, which allows you to see the number of data\nfile I/O operations performed by your queries. See InnoDB\nBuffer Pool for more. Similar information is also available\nfrom the INFORMATION_SCHEMA.INNODB_BUFFER_POOL_STATS table.\nROW OPERATIONS:Information about the main thread, including\nthe number and performance rate for each type of row\noperation. \n \nIf the innodb_status_output_locks system variable is set to\n1, extended lock information will be displayed.\n \nExample output:\n \n=====================================\n2016-09-12 04:42:15 7f226145fb00 INNODB MONITOR OUTPUT\n=====================================\nPer second averages calculated from the last 29 seconds\n-----------------\nBACKGROUND THREAD\n-----------------\nsrv_master_thread loops: 0 srv_active, 0 srv_shutdown, 527\nsrv_idle\nsrv_master_thread log flush and writes: 527\n----------\nSEMAPHORES\n----------\nOS WAIT ARRAY INFO: reservation count 4\nOS WAIT ARRAY INFO: signal count 4\nMutex spin waits 2, rounds 60, OS waits 2\nRW-shared spins 2, rounds 60, OS waits 2\nRW-excl spins 0, rounds 0, OS waits 0\nSpin rounds per wait: 30.00 mutex, 30.00 RW-shared, 0.00\nRW-excl\n------------\nTRANSACTIONS\n------------\nTrx id counter 2308\nPurge done for trx\'s n:o < 0 undo n:o < 0 state: running\nbut idle\nHistory list length 0\nLIST OF TRANSACTIONS FOR EACH SESSION:\n---TRANSACTION 0, not started\nMySQL thread id 3, OS thread handle 0x7f226145fb00, query id\n4 localhost root init\nSHOW ENGINE INNODB STATUS\n--------\nFILE I/O\n--------\nI/O thread 0 state: waiting for completed aio requests\n(insert buffer thread)\nI/O thread 1 state: waiting for completed aio requests (log\nthread)\nI/O thread 2 state: waiting for completed aio requests (read\nthread)\nI/O thread 3 state: waiting for completed aio requests (read\nthread)\nI/O thread 4 state: waiting for completed aio requests (read\nthread)\nI/O thread 5 state: waiting for completed aio requests (read\nthread)\nI/O thread 6 state: waiting for completed aio requests\n(write thread)\nI/O thread 7 state: waiting for completed aio requests\n(write thread)\nI/O thread 8 state: waiting for completed aio requests\n(write thread)\nI/O thread 9 state: waiting for completed aio requests\n(write thread)\nPending normal aio reads: 0 [0, 0, 0, 0] , aio writes: 0 [0,\n0, 0, 0] ,\n ibuf aio reads: 0, log i/o\'s: 0, sync i/o\'s: 0\nPending flushes (fsync) log: 0; buffer pool: 0\n172 OS file reads, 5 OS file writes, 5 OS fsyncs\n0.00 reads/s, 0 avg bytes/read, 0.00 writes/s, 0.00 fsyncs/s\n-------------------------------------\nINSERT BUFFER AND ADAPTIVE HASH INDEX\n-------------------------------------\nIbuf: size 1, free list len 0, seg size 2, 0 merges\nmerged operations:\n insert 0, delete mark 0, delete 0\ndiscarded operations:\n insert 0, delete mark 0, delete 0\n0.00 hash searches/s, 0.00 non-hash searches/s\n---\nLOG\n---\nLog sequence number 1616829\nLog flushed up to 1616829\nPages flushed up to 1616829\nLast checkpoint at 1616829\nMax checkpoint age 80826164\nCheckpoint age target 78300347\nModified age 0\nCheckpoint age 0\n0 pending log writes, 0 pending chkp writes\n8 log i/o\'s done, 0.00 log i/o\'s/second\n----------------------\nBUFFER POOL AND MEMORY\n----------------------\nTotal memory allocated 140771328; in additional pool\nallocated 0\nTotal memory allocated by read views 88\nInternal hash tables (constant factor + variable factor)\n Adaptive hash index 2217568 (2213368 + 4200)\n Page hash 139112 (buffer pool 0 only)\n Dictionary cache 630703 (554768 + 75935)\n File system 817648 (812272 + 5376)\n Lock system 333232 (332872 + 360)\n Recovery system 0 (0 + 0)\nDictionary memory allocated 75935\nBuffer pool size 8191\nBuffer pool size, bytes 134201344\nFree buffers 8037\nDatabase pages 154\nOld database pages 0\nModified db pages 0\nPercent of dirty pages(LRU & free pages): 0.000\nMax dirty pages percent: 75.000\nPending reads 0\nPending writes: LRU 0, flush list 0, single page 0\nPages made young 0, not young 0\n0.00 youngs/s, 0.00 non-youngs/s\nPages read 154, created 0, written 1\n0.00 reads/s, 0.00 creates/s, 0.00 writes/s\nNo buffer pool page gets since the last printout\nPages read ahead 0.00/s, evicted without access 0.00/s,\nRandom read ahead 0.00/s\nLRU len: 154, unzip_LRU len: 0\nI/O sum[0]:cur[0], unzip sum[0]:cur[0]\n--------------\nROW OPERATIONS\n--------------\n0 queries inside InnoDB, 0 queries in queue\n0 read views open inside InnoDB\n0 RW transactions active inside InnoDB\n0 RO transactions active inside InnoDB\n0 out of 1000 descriptors used\nMain thread process no. 3337, id 139784957703936, state:\nsleeping\nNumber of rows inserted 0, updated 0, deleted 0, read 0\n0.00 inserts/s, 0.00 updates/s, 0.00 deletes/s, 0.00 reads/s\nNumber of system rows inserted 0, updated 0, deleted 0, read\n0\n0.00 inserts/s, 0.00 updates/s, 0.00 deletes/s, 0.00 reads/s\n----------------------------\nEND OF INNODB MONITOR OUTPUT\n============================\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-engine-innodb-status/', '', 'https://mariadb.com/kb/en/show-engine-innodb-status/'),
(375, 'SHOW EVENTS', 26, 'Syntax\n------ \nSHOW EVENTS [{FROM | IN} schema_name]\n [LIKE \'pattern\' | WHERE expr]\n \nDescription\n----------- \nShows information about Event Manager events (created with\nCREATE EVENT). Requires the EVENT privilege. Without any\narguments, SHOW EVENTS lists all of the events in the\ncurrent schema:\n \nSELECT CURRENT_USER(), SCHEMA();\n+----------------+----------+\n| CURRENT_USER() | SCHEMA() |\n+----------------+----------+\n| jon@ghidora | myschema |\n+----------------+----------+\n \nSHOW EVENTS\\G\n*************************** 1. row\n***************************\n Db: myschema\n Name: e_daily\n Definer: jon@ghidora\n Time zone: SYSTEM\n Type: RECURRING\n Execute at: NULL\n Interval value: 10\n Interval field: SECOND\n Starts: 2006-02-09 10:41:23\n Ends: NULL\n Status: ENABLED\n Originator: 0\ncharacter_set_client: latin1\ncollation_connection: latin1_swedish_ci\n Database Collation: latin1_swedish_ci\n \nTo see the event action, use SHOW CREATE EVENT instead, or\nlook at the information_schema.EVENTS table.\n \nTo see events for a specific schema, use the FROM clause.\nFor example, to see events for the test schema, use the\nfollowing statement:\n \nSHOW EVENTS FROM test;\n \nThe LIKE clause, if present, indicates which event names to\nmatch. The WHERE clause can be given to select rows using\nmore general conditions, as discussed in Extended Show.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-events/', '', 'https://mariadb.com/kb/en/show-events/'),
(376, 'SHOW EXPLAIN', 26, 'The SHOW EXPLAIN command is a new feature in MariaDB 10.0.0.\n \nCommand description\n \nThe SHOW EXPLAIN command allows one to get an EXPLAIN (that\nis, a\ndescription of a query plan) of a query running in a certain\nthread.\n \nThe syntax is:\n \nSHOW EXPLAIN FOR ;\n \nwhich will produce an EXPLAIN output for the query that\nthread number thread_id is running. The thread id can be\nobtained with SHOW PROCESSLIST.\n \nSHOW EXPLAIN FOR 1;\n \n+------+-------------+-------+-------+---------------+------+---------+------+---------+-------------+\n| id | select_type | table | type | possible_keys | key |\nkey_len | ref | rows | Extra |\n+------+-------------+-------+-------+---------------+------+---------+------+---------+-------------+\n| 1 | SIMPLE | tbl | index | NULL | a | 5 | NULL | 1000107 |\nUsing index |\n+------+-------------+-------+-------+---------------+------+---------+------+---------+-------------+\n1 row in set, 1 warning (0.00 sec)\n \nThe output is always accompanied with a warning which shows\nthe query the\ntarget thread is running (this shows what the EXPLAIN is\nfor):\n \nSHOW WARNINGS;\n \n+-------+------+------------------------+\n| Level | Code | Message |\n+-------+------+------------------------+\n| Note | 1003 | select sum(a) from tbl |\n+-------+------+------------------------+\n1 row in set (0.00 sec)\n \nPossible errors\n \nThe output can be only produced if the target thread is\ncurrently running a\nquery, which has a ready query plan. If this is not the\ncase, the output will\nbe:\n \nSHOW EXPLAIN FOR 2;\n \nERROR 1932 (HY000): Target is not running an EXPLAINable\ncommand\n \nYou will get this error when:\nthe target thread is not running a command for which one can\nrun EXPLAIN\nthe target thread is running a command for which one can run\nEXPLAIN, but\nthere is no query plan yet (for example, tables are open and\nlocks are\n acquired before the query plan is produced)\n \n\nDifferences between SHOW EXPLAIN and EXPLAIN outputs\n \nBackground\n \nIn MySQL, EXPLAIN execution takes a slightly different route\nfrom the way\nthe real query (typically the SELECT) is optimized. This is\nunfortunate,\nand has caused a number of bugs in EXPLAIN. (For example,\nsee\nMDEV-326, MDEV-410, and\nlp:1013343.\nlp:992942 is not directly\nabout EXPLAIN, but it also would not have existed if MySQL\ndidn\'t try to delete\nparts of a query plan in the middle of the query) \n \nSHOW EXPLAIN examines a running SELECT, and hence its output\nmay be\nslightly different from what EXPLAIN SELECT would produce.\nWe did our best\nto make sure that either the difference is negligible, or\nSHOW EXPLAIN\'s\noutput is closer to reality than EXPLAIN\'s output.\n \nList of recorded differences\n \nSHOW EXPLAIN may have Extra=\'no matching row in const\ntable\', where EXPLAIN would produce Extra=\'Impossible\nWHERE ...\'\nFor queries with subqueries, SHOW EXPLAIN may print\nselect_type==PRIMARY where regular EXPLAIN used to print\nselect_type==SIMPLE, or vice versa.\n \nRequired permissions\n \nRunning SHOW EXPLAIN requires the same permissions as\nrunning SHOW PROCESSLIST would.\n \n\n\nURL: https://mariadb.com/kb/en/show-explain/', '', 'https://mariadb.com/kb/en/show-explain/'),
(378, 'SHOW FUNCTION STATUS', 26, 'Syntax\n------ \nSHOW FUNCTION STATUS\n [LIKE \'pattern\' | WHERE expr]\n \nDescription\n----------- \nThis statement is similar to \nSHOW PROCEDURE STATUS but for\nstored functions.\n \nThe LIKE clause, if present on its own, indicates which\nfunction names to match. \n \nThe WHERE and LIKE clauses can be given to select rows using\nmore general conditions, as discussed in Extended SHOW.\n \nThe information_schema.ROUTINES table contains more detailed\ninformation.\n \nExamples\n-------- \nShowing all stored functions:\n \nSHOW FUNCTION STATUS\\G\n*************************** 1. row\n***************************\n Db: test\n Name: VatCents\n Type: FUNCTION\n Definer: root@localhost\n Modified: 2013-06-01 12:40:31\n Created: 2013-06-01 12:40:31\n Security_type: DEFINER\n Comment: \ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n Database Collation: latin1_swedish_ci\n \nStored functions whose name starts with \'V\': \n \nSHOW FUNCTION STATUS LIKE \'V%\' \\G\n*************************** 1. row\n***************************\n Db: test\n Name: VatCents\n Type: FUNCTION\n Definer: root@localhost\n Modified: 2013-06-01 12:40:31\n Created: 2013-06-01 12:40:31\n Security_type: DEFINER\n Comment: \ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n Database Collation: latin1_swedish_ci\n \nStored functions with a security type of \'DEFINER\':\n \nSHOW FUNCTION STATUS WHERE Security_type LIKE \'DEFINER\'\n\\G\n*************************** 1. row\n***************************\n Db: test\n Name: VatCents\n Type: FUNCTION\n Definer: root@localhost\n Modified: 2013-06-01 12:40:31\n Created: 2013-06-01 12:40:31\n Security_type: DEFINER\n Comment: \ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n Database Collation: latin1_swedish_ci\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-function-status/', '', 'https://mariadb.com/kb/en/show-function-status/'),
(379, 'SHOW GRANTS', 26, 'Users\n \nSyntax\n------ \nSHOW GRANTS [FOR user]\n \nDescription\n----------- \nThis statement lists the GRANT statement or\nstatements that must be issued to duplicate the privileges\nthat are granted to\na MariaDB user account. The account is named using the same\nformat as for the\nGRANT statement; for example,\n\'jeffrey\'@\'localhost\'. If you specify only the user name\npart\nof the account name, a host name part of \'%\' is used. For\nadditional information about specifying account names, see\nGRANT.\n \nSHOW GRANTS FOR \'root\'@\'localhost\';\n+---------------------------------------------------------------------+\n| Grants for root@localhost |\n+---------------------------------------------------------------------+\n| GRANT ALL PRIVILEGES ON *.* TO \'root\'@\'localhost\' WITH\nGRANT OPTION |\n+---------------------------------------------------------------------+\n \nTo list the privileges granted to the account that you are\nusing to\nconnect to the server, you can use any of the following\nstatements:\n \nSHOW GRANTS;\n \nSHOW GRANTS FOR CURRENT_USER;\n \nSHOW GRANTS FOR CURRENT_USER();\n \nIf SHOW GRANTS FOR CURRENT_USER (or any\nof the equivalent syntaxes) is used in DEFINER context (such\nas within a stored procedure that is defined with \n SQL SECURITY DEFINER), the grants displayed are those of\nthe\ndefiner and not the invoker.\n \nNote that the DELETE HISTORY privilege, introduced in\nMariaDB 10.3.4, is displayed as DELETE VERSIONING ROWS when\nrunning SHOW GRANTS (MDEV-17655).\n \nRoles\n \nRoles were introduced in MariaDB 10.0.5.\n \nSyntax\n------ \nSHOW GRANTS [FOR role]\n \nDescription\n----------- \nFrom MariaDB 10.0.5, SHOW GRANTS can also be used to view\nthe privileges granted to a role.\n \nExample\n \nSHOW GRANTS FOR journalist;\n+------------------------------------------+\n| Grants for journalist |\n+------------------------------------------+\n| GRANT USAGE ON *.* TO \'journalist\' |\n| GRANT DELETE ON `test`.* TO \'journalist\' |\n+------------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/show-grants/', '', 'https://mariadb.com/kb/en/show-grants/'),
(380, 'SHOW INDEX', 26, 'Syntax\n------ \nSHOW {INDEX | INDEXES | KEYS} \n FROM tbl_name [FROM db_name]\n [WHERE expr]\n \nDescription\n----------- \nSHOW INDEX returns table index information. The format\nresembles that of the SQLStatistics call in ODBC.\n \nYou can use db_name.tbl_name as an alternative to the\n tbl_name FROM db_name syntax. These two statements are\n equivalent:\n \nSHOW INDEX FROM mytable FROM mydb;\nSHOW INDEX FROM mydb.mytable;\n \nSHOW KEYS and SHOW INDEXES are synonyms for SHOW INDEX.\n \nYou can also list a table\'s indexes with the following\ncommand: \n \nmysqlshow -k db_name tbl_name\n \nSee mysqlshow for more details.\n \nThe information_schema.STATISTICS table stores similar\ninformation.\n \nThe following fields are returned by SHOW INDEX.\n \nField | Description | \n \nTable | Table name | \n \nNon_unique | 1 if the index permits duplicate values, 0 if\nvalues must be unique. | \n \nKey_name | Index name. The primary key is always named\nPRIMARY. | \n \nSeq_in_index | The column\'s sequence in the index,\nbeginning with 1. | \n \nColumn_name | Column name. | \n \nCollation | Either A, if the column is sorted in ascending\norder in the index, or NULL if it\'s not sorted. | \n \nCardinality | Estimated number of unique values in the\nindex. The cardinality statistics are calculated at various\ntimes, and can help the optimizer make improved decisions. |\n\n \nSub_part | NULL if the entire column is included in the\nindex, or the number of included characters if not. | \n \nPacked | NULL if the index is not packed, otherwise how the\nindex is packed. | \n \nNull | NULL if NULL values are permitted in the column, an\nempty string if NULL\'s are not permitted. | \n \nIndex_type | The index type, which can be BTREE, FULLTEXT,\nHASH or RTREE. See Storage Engine Index Types. | \n \nComment | Other information, such as whether the index is\ndisabled. | \n \nIndex_comment | Contents of the COMMENT attribute when the\nindex was created. | \n \nThe WHERE and LIKE clauses can be given to select rows using\nmore general conditions, as discussed in Extended SHOW.\n \nExamples\n-------- \nCREATE TABLE IF NOT EXISTS `employees_example` (\n `id` int(11) NOT NULL AUTO_INCREMENT,\n `first_name` varchar(30) NOT NULL,\n `last_name` varchar(40) NOT NULL,\n `position` varchar(25) NOT NULL,\n `home_address` varchar(50) NOT NULL,\n `home_phone` varchar(12) NOT NULL,\n `employee_code` varchar(25) NOT NULL,\n PRIMARY KEY (`id`),\n UNIQUE KEY `employee_code` (`employee_code`),\n KEY `first_name` (`first_name`,`last_name`)\n) ENGINE=Aria;\n \nINSERT INTO `employees_example` (`first_name`, `last_name`,\n`position`, `home_address`, `home_phone`, `employee_code`)\n VALUES\n (\'Mustapha\', \'Mond\', \'Chief Executive Officer\', \'692\nPromiscuous Plaza\', \'326-555-3492\', \'MM1\'),\n (\'Henry\', \'Foster\', \'Store Manager\', \'314 Savage\nCircle\', \'326-555-3847\', \'HF1\'),\n (\'Bernard\', \'Marx\', \'Cashier\', \'1240 Ambient\nAvenue\', \'326-555-8456\', \'BM1\'),\n (\'Lenina\', \'Crowne\', \'Cashier\', \'281 Bumblepuppy\nBoulevard\', \'328-555-2349\', \'LC1\'),\n (\'Fanny\', \'Crowne\', \'Restocker\', \'1023 Bokanovsky\nLane\', \'326-555-6329\', \'FC1\'),\n (\'Helmholtz\', \'Watson\', \'Janitor\', \'944 Soma\nCourt\', \'329-555-2478\', \'HW1\');\n \nSHOW INDEXES FROM employees_example;\n \n+-------------------+------------+---------------+--------------+---------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| Table | Non_unique | Key_name | Seq_in_index | Column_name\n| Collation | Cardinality | Sub_part | Packed | Null |\nIndex_type | Comment | Index_comment |\n+-------------------+------------+---------------+--------------+---------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| employees_example | 0 | PRIMARY | 1 | id | A | 7 | NULL |\nNULL | | BTREE | | |\n| employees_example | 0 | employee_code | 1 | employee_code\n| A | 7 | NULL | NULL | | BTREE | | |\n| employees_example | 1 | first_name | 1 | first_name | A |\nNULL | NULL | NULL | | BTREE | | |\n| employees_example | 1 | first_name | 2 | last_name | A |\nNULL | NULL | NULL | | BTREE | | |\n+-------------------+------------+---------------+--------------+---------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-index/', '', 'https://mariadb.com/kb/en/show-index/'),
(381, 'SHOW LOCALES', 26, 'SHOW LOCALES was introduced as part of the Information\nSchema plugin extension in MariaDB 10.1.1.\n \nSHOW LOCALES is used to return locales information as part\nof the Locales plugin. While the information_schema.LOCALES\ntable has 8 columns, the SHOW LOCALES statement will only\ndisplay 4 of them:\n \nExample\n \nSHOW LOCALES;\n+-----+-------+-------------------------------------+------------------------+\n| Id | Name | Description | Error_Message_Language |\n+-----+-------+-------------------------------------+------------------------+\n| 0 | en_US | English - United States | english |\n| 1 | en_GB | English - United Kingdom | english |\n| 2 | ja_JP | Japanese - Japan | japanese |\n| 3 | sv_SE | Swedish - Sweden | swedish |\n...\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-locales/', '', 'https://mariadb.com/kb/en/show-locales/'),
(382, 'SHOW MASTER STATUS', 26, 'Syntax\n------ \nSHOW MASTER STATUS\n \nDescription\n----------- \nProvides status information about the binary log files of\nthe master.\n \nThis statement requires the SUPER or the REPLICATION_CLIENT\nprivilege.\n \nTo see information about the current GTIDs in the binary\nlog, use the\ngtid_binlog_pos variable.\n \nExample\n \nSHOW MASTER STATUS;\n+--------------------+----------+--------------+------------------+\n| File | Position | Binlog_Do_DB | Binlog_Ignore_DB |\n+--------------------+----------+--------------+------------------+\n| mariadb-bin.000016 | 475 | | |\n+--------------------+----------+--------------+------------------+\nSELECT @@global.gtid_binlog_pos;\n+--------------------------+\n| @@global.gtid_binlog_pos |\n+--------------------------+\n| 0-1-2 |\n+--------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/show-master-status/', '', 'https://mariadb.com/kb/en/show-master-status/'),
(383, 'SHOW OPEN TABLES', 26, 'Syntax\n------ \nSHOW OPEN TABLES [FROM db_name]\n [LIKE \'pattern\' | WHERE expr]\n \nDescription\n----------- \n SHOW OPEN TABLES lists the non-TEMPORARY\ntables that are currently open in the table cache. See\nhttp://dev.mysql.com/doc/refman/5.1/en/table-cache.html.\n \nThe FROM and LIKE clauses may be used.\n \nThe FROM\nclause, if present, restricts the tables shown to those\npresent in the\ndb_name database. \n \nThe LIKE clause, if\npresent on its own, indicates which table names to match.\nThe WHERE and LIKE clauses can be given to select rows using\nmore general conditions, as discussed in Extended SHOW.\n \nThe following information is returned:\n \nColumn | Description | \n \nDatabase | Database name. | \n \nName | Table name. | \n \nIn_use | Number of table instances being used. | \n \nName_locked | 1 if the table is name-locked, e.g. if it is\nbeing dropped or renamed, otherwise 0. | \n \nBefore MariaDB 5.5, each use of, for example, LOCK TABLE ...\nWRITE would increment In_use for that table. With the\nimplementation of the metadata locking improvements in\nMariaDB 5.5, LOCK TABLE... WRITE acquires a strong MDL lock,\nand concurrent connections will wait on this MDL lock, so\nany subsequent LOCK TABLE... WRITE will not increment\nIn_use.\n \nExample\n \nSHOW OPEN TABLES;\n \n+----------+---------------------------+--------+-------------+\n| Database | Table | In_use | Name_locked |\n+----------+---------------------------+--------+-------------+\n...\n| test | xjson | 0 | 0 |\n| test | jauthor | 0 | 0 |\n| test | locks | 1 | 0 |\n...\n+----------+---------------------------+--------+-------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-open-tables/', '', 'https://mariadb.com/kb/en/show-open-tables/'),
(384, 'SHOW PACKAGE BODY STATUS', 26, 'Oracle-style packages were introduced in MariaDB 10.3.5.\n \nSyntax\n------ \nSHOW PACKAGE BODY STATUS\n [LIKE \'pattern\' | WHERE expr]\n \nDescription\n----------- \nThe SHOW PACKAGE BODY STATUS statement returns\ncharacteristics of stored package bodies (implementations),\nsuch as the database, name, type, creator, creation and\nmodification dates, and character set information. A similar\nstatement, SHOW PACKAGE STATUS, displays information about\nstored package specifications.\n \nThe LIKE clause, if present, indicates which package names\nto match. The WHERE and LIKE clauses can be given to select\nrows using more general conditions, as discussed in Extended\nSHOW.\n \nThe ROUTINES table in the INFORMATION_SCHEMA database\ncontains more detailed information.\n \nExamples\n-------- \nSHOW PACKAGE BODY STATUS LIKE \'pkg1\'\\G\n*************************** 1. row\n***************************\n Db: test\n Name: pkg1\n Type: PACKAGE BODY\n Definer: root@localhost\n Modified: 2018-02-27 14:44:14\n Created: 2018-02-27 14:44:14\n Security_type: DEFINER\n Comment: This is my first package body\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n Database Collation: latin1_swedish_ci\n \n\n\nURL: https://mariadb.com/kb/en/show-package-body-status/', '', 'https://mariadb.com/kb/en/show-package-body-status/'),
(385, 'SHOW PACKAGE STATUS', 26, 'Oracle-style packages were introduced in MariaDB 10.3.5.\n \nSyntax\n------ \nSHOW PACKAGE STATUS\n [LIKE \'pattern\' | WHERE expr]\n \nDescription\n----------- \nThe SHOW PACKAGE STATUS statement returns characteristics of\nstored package specifications, such as the database, name,\ntype, creator, creation and modification dates, and\ncharacter set information. A similar statement, SHOW PACKAGE\nBODY STATUS, displays information about stored package\nbodies (i.e. implementations).\n \nThe LIKE clause, if present, indicates which package names\nto match. The WHERE and LIKE clauses can be given to select\nrows using more general conditions, as discussed in Extended\nSHOW.\n \nThe ROUTINES table in the INFORMATION_SCHEMA database\ncontains more detailed information.\n \nExamples\n-------- \nSHOW PACKAGE STATUS LIKE \'pkg1\'\\G\n*************************** 1. row\n***************************\n Db: test\n Name: pkg1\n Type: PACKAGE\n Definer: root@localhost\n Modified: 2018-02-27 14:38:15\n Created: 2018-02-27 14:38:15\n Security_type: DEFINER\n Comment: This is my first package\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n Database Collation: latin1_swedish_ci\n \n\n\nURL: https://mariadb.com/kb/en/show-package-status/', '', 'https://mariadb.com/kb/en/show-package-status/'),
(386, 'SHOW PLUGINS', 26, 'Syntax\n------ \nSHOW PLUGINS;\n \nDescription\n----------- \n SHOW PLUGINS displays information about installed plugins.\nThe Library column indicates the plugin library - if it is\nNULL, the plugin is built-in and cannot be uninstalled.\n \nThe PLUGINS table in the information_schema database\ncontains more detailed information.\n \nFor specific information about storage engines (a particular\ntype of plugin), see the information_schema.ENGINES table\nand the SHOW ENGINES statement.\n \nExamples\n-------- \nSHOW PLUGINS;\n+----------------------------+----------+--------------------+-------------+---------+\n| Name | Status | Type | Library | License |\n+----------------------------+----------+--------------------+-------------+---------+\n| binlog | ACTIVE | STORAGE ENGINE | NULL | GPL |\n| mysql_native_password | ACTIVE | AUTHENTICATION | NULL |\nGPL |\n| mysql_old_password | ACTIVE | AUTHENTICATION | NULL | GPL\n|\n| MRG_MyISAM | ACTIVE | STORAGE ENGINE | NULL | GPL |\n| MyISAM | ACTIVE | STORAGE ENGINE | NULL | GPL |\n| CSV | ACTIVE | STORAGE ENGINE | NULL | GPL |\n| MEMORY | ACTIVE | STORAGE ENGINE | NULL | GPL |\n| FEDERATED | ACTIVE | STORAGE ENGINE | NULL | GPL |\n| PERFORMANCE_SCHEMA | ACTIVE | STORAGE ENGINE | NULL | GPL\n|\n| Aria | ACTIVE | STORAGE ENGINE | NULL | GPL |\n| InnoDB | ACTIVE | STORAGE ENGINE | NULL | GPL |\n| INNODB_TRX | ACTIVE | INFORMATION SCHEMA | NULL | GPL |\n...\n| INNODB_SYS_FOREIGN | ACTIVE | INFORMATION SCHEMA | NULL |\nGPL |\n| INNODB_SYS_FOREIGN_COLS | ACTIVE | INFORMATION SCHEMA |\nNULL | GPL |\n| SPHINX | ACTIVE | STORAGE ENGINE | NULL | GPL |\n| ARCHIVE | ACTIVE | STORAGE ENGINE | NULL | GPL |\n| BLACKHOLE | ACTIVE | STORAGE ENGINE | NULL | GPL |\n| FEEDBACK | DISABLED | INFORMATION SCHEMA | NULL | GPL |\n| partition | ACTIVE | STORAGE ENGINE | NULL | GPL |\n| pam | ACTIVE | AUTHENTICATION | auth_pam.so | GPL |\n+----------------------------+----------+--------------------+-------------+---------+\n \n\n\nURL: https://mariadb.com/kb/en/show-plugins/', '', 'https://mariadb.com/kb/en/show-plugins/'),
(387, 'SHOW PLUGINS SONAME', 26, 'MariaDB 10.0.2\n \nSHOW PLUGINS SONAME was introduced in MariaDB 10.0.2\n \nSyntax\n------ \nSHOW PLUGINS SONAME { library | LIKE \'pattern\' | WHERE\nexpr };\n \nDescription\n----------- \nSHOW PLUGINS SONAME displays information about compiled-in\nand all server plugins in the plugin_dir directory,\nincluding plugins that haven\'t been installed.\n \nExamples\n-------- \nSHOW PLUGINS SONAME \'ha_example.so\';\n+----------+---------------+----------------+---------------+---------+\n| Name | Status | Type | Library | License |\n+----------+---------------+----------------+---------------+---------+\n| EXAMPLE | NOT INSTALLED | STORAGE ENGINE | ha_example.so |\nGPL |\n| UNUSABLE | NOT INSTALLED | DAEMON | ha_example.so | GPL |\n+----------+---------------+----------------+---------------+---------+\n \nThere is also a corresponding information_schema table,\ncalled ALL_PLUGINS, which contains more complete\ninformation.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-plugins-soname/', '', 'https://mariadb.com/kb/en/show-plugins-soname/'),
(388, 'SHOW PRIVILEGES', 26, 'Syntax\n------ \nSHOW PRIVILEGES\n \nDescription\n----------- \n SHOW PRIVILEGES shows the list of system privileges that\nthe MariaDB server supports. The exact list of privileges\ndepends on the version of your server.\n \nNote that the Delete history privilege displays as Delete\nversioning rows (MDEV-20382).\n \nExamples\n-------- \nSHOW PRIVILEGES;\n+-------------------------+---------------------------------------+-------------------------------------------------------+\n| Privilege | Context | Comment |\n+-------------------------+---------------------------------------+-------------------------------------------------------+\n| Alter | Tables | To alter the table |\n| Alter routine | Functions,Procedures | To alter or drop\nstored functions/procedures |\n| Create | Databases,Tables,Indexes | To create new\ndatabases and tables |\n| Create routine | Databases | To use CREATE\nFUNCTION/PROCEDURE |\n| Create temporary tables | Databases | To use CREATE\nTEMPORARY TABLE |\n| Create view | Tables | To create new views |\n| Create user | Server Admin | To create new users |\n| Delete | Tables | To delete existing rows |\n| Delete versioning rows | Tables | To delete versioning\ntable historical rows |\n| Drop | Databases,Tables | To drop databases, tables, and\nviews |\n| Event | Server Admin | To create, alter, drop and execute\nevents |\n| Execute | Functions,Procedures | To execute stored\nroutines |\n| File | File access on server | To read and write files on\nthe server |\n| Grant option | Databases,Tables,Functions,Procedures | To\ngive to other users those privileges you possess |\n| Index | Tables | To create or drop indexes |\n| Insert | Tables | To insert data into tables |\n| Lock tables | Databases | To use LOCK TABLES (together\nwith SELECT privilege) |\n| Process | Server Admin | To view the plain text of\ncurrently executing queries |\n| Proxy | Server Admin | To make proxy user possible |\n| References | Databases,Tables | To have references on\ntables |\n| Reload | Server Admin | To reload or refresh tables, logs\nand privileges |\n| Replication client | Server Admin | To ask where the slave\nor master servers are |\n| Replication slave | Server Admin | To read binary log\nevents from the master |\n| Select | Tables | To retrieve rows from table |\n| Show databases | Server Admin | To see all databases with\nSHOW DATABASES |\n| Show view | Tables | To see views with SHOW CREATE VIEW |\n| Shutdown | Server Admin | To shut down the server |\n| Super | Server Admin | To use KILL thread, SET GLOBAL,\nCHANGE MASTER, etc. |\n| Trigger | Tables | To use triggers |\n| Create tablespace | Server Admin | To create/alter/drop\ntablespaces |\n| Update | Tables | To update existing rows |\n| Usage | Server Admin | No privileges - allow connect only\n|\n+-------------------------+---------------------------------------+-------------------------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/show-privileges/', '', 'https://mariadb.com/kb/en/show-privileges/'),
(389, 'SHOW PROCEDURE CODE', 26, 'Syntax\n------ \nSHOW PROCEDURE CODE proc_name\n \nDescription\n----------- \nThis statement is a MariaDB extension that is available only\nfor servers that\nhave been built with debugging support. It displays a\nrepresentation of the\ninternal implementation of the named stored procedure. A\nsimilar statement,\n SHOW FUNCTION CODE, displays\ninformation about stored functions.\n \nBoth statements require that you be the owner of the routine\nor have\n SELECT access to the mysql.proc table.\n \nIf the named routine is available, each statement produces a\nresult\nset. Each row in the result set corresponds to one\n\"instruction\" in\nthe routine. The first column is Pos, which is an ordinal\nnumber\nbeginning with 0. The second column is Instruction, which\ncontains an\nSQL statement (usually changed from the original source), or\na\ndirective which has meaning only to the stored-routine\nhandler.\n \nExamples\n-------- \nDELIMITER //\n \nCREATE PROCEDURE p1 ()\n BEGIN\n DECLARE fanta INT DEFAULT 55;\n DROP TABLE t2;\n LOOP\n INSERT INTO t3 VALUES (fanta);\n END LOOP;\n END//\nQuery OK, 0 rows affected (0.00 sec)\n \nSHOW PROCEDURE CODE p1//\n+-----+----------------------------------------+\n| Pos | Instruction |\n+-----+----------------------------------------+\n| 0 | set fanta@0 55 |\n| 1 | stmt 9 \"DROP TABLE t2\" |\n| 2 | stmt 5 \"INSERT INTO t3 VALUES (fanta)\" |\n| 3 | jump 2 |\n+-----+----------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/show-procedure-code/', '', 'https://mariadb.com/kb/en/show-procedure-code/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(390, 'SHOW PROCEDURE STATUS', 26, 'Syntax\n------ \nSHOW PROCEDURE STATUS\n [LIKE \'pattern\' | WHERE expr]\n \nDescription\n----------- \nThis statement is a MariaDB extension. It returns\ncharacteristics of a stored\nprocedure, such as the database, name, type, creator,\ncreation and modification\ndates, and character set information. A similar statement, \n SHOW FUNCTION STATUS, displays\ninformation about stored functions.\n \nThe LIKE clause, if present, indicates which procedure or\nfunction names to match. The WHERE and LIKE clauses can be\ngiven to select rows using more general conditions, as\ndiscussed in Extended SHOW.\n \nThe ROUTINES table in the INFORMATION_SCHEMA database\ncontains more detailed information.\n \nExamples\n-------- \nSHOW PROCEDURE STATUS LIKE \'p1\'\\G\n*************************** 1. row\n***************************\n Db: test\n Name: p1\n Type: PROCEDURE\n Definer: root@localhost\n Modified: 2010-08-23 13:23:03\n Created: 2010-08-23 13:23:03\n Security_type: DEFINER\n Comment: \ncharacter_set_client: latin1\ncollation_connection: latin1_swedish_ci\n Database Collation: latin1_swedish_ci\n \n\n\nURL: https://mariadb.com/kb/en/show-procedure-status/', '', 'https://mariadb.com/kb/en/show-procedure-status/'),
(395, 'SHOW RELAYLOG EVENTS', 26, 'Syntax\n------ \nSHOW RELAYLOG [\'connection_name\'] EVENTS\n [IN \'log_name\'] [FROM pos] [LIMIT [offset,] row_count]\n \nDescription\n----------- \nOn replication slaves this command shows the events in the\nrelay log. If \'log_name\' is not specified, the first relay\nlog is shown.\n \nSyntax for the LIMIT clause is the same as for SELECT ...\nLIMIT.\n \nUsing the LIMIT clause is highly recommended because the\nSHOW RELAYLOG EVENTS command returns the complete contents\nof the relay log, which can be quite large.\n \nThis command does not return events related to setting user\nand system variables. If you need those, use mysqlbinlog.\n \nOn the replication master, this command does nothing.\n \nconnection_name\n \nconnection_name was added as part of multi-source\nreplication added in MariaDB 10.0.1\n \nIf there is only one nameless master, or the default master\n(as specified by the default_master_connection system\nvariable) is intended, connection_name can be omitted. If\nprovided, the SHOW RELAYLOG statement will apply to the\nspecified master. connection_name is case-insensitive.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-relaylog-events/', '', 'https://mariadb.com/kb/en/show-relaylog-events/'),
(396, 'SHOW SLAVE HOSTS', 26, 'Syntax\n------ \nSHOW SLAVE HOSTS\n \nDescription\n----------- \nThis command is run on the master and displays a list of\nreplication slaves that are currently registered with it.\nOnly slaves started with the --report-host=host_name option\nare visible in this list.\n \nThe list is displayed on any server (not just the master\nserver). The output\nlooks like this:\n \nSHOW SLAVE HOSTS;\n+------------+-----------+------+-----------+\n| Server_id | Host | Port | Master_id |\n+------------+-----------+------+-----------+\n| 192168010 | iconnect2 | 3306 | 192168011 |\n| 1921680101 | athena | 3306 | 192168011 |\n+------------+-----------+------+-----------+\nServer_id: The unique server ID of the slave server, as\nconfigured in the server\'s option file, or on the command\nline with --server-id=value.\nHost: The host name of the slave server, as configured in\nthe server\'s option file, or on the command line with\n--report-host=host_name. Note that this can differ from the\nmachine name as configured in the operating system.\nPort: The port the slave server is listening on.\nMaster_id: The unique server ID of the master server that\nthe slave server is replicating from.\n \nSome MariaDB and MySQL versions report another variable,\nrpl_recovery_rank. This\nvariable was never used, and was eventually removed in\nMariaDB 10.1.2 and MySQL 5.6.\n \n\n\nURL: https://mariadb.com/kb/en/show-slave-hosts/', '', 'https://mariadb.com/kb/en/show-slave-hosts/'),
(391, 'SHOW PROCESSLIST', 26, 'Syntax\n------ \nSHOW [FULL] PROCESSLIST\n \nDescription\n----------- \n SHOW PROCESSLIST shows you which threads are running. You\ncan also get this information from the\ninformation_schema.PROCESSLIST table or the mysqladmin\nprocesslist command. If you have the \nPROCESS privilege, you can see all threads.\nOtherwise, you can see only your own threads (that is,\nthreads associated with\nthe MariaDB account that you are using). If you do not use\nthe\nFULL keyword, only the first 100 characters of each\nstatement are shown in the Info field.\n \nThe columns shown in SHOW PROCESSLIST\n are:\n \nName | Description | Introduced | \n \nID | The client\'s process ID. |  | \n \nUSER | The username associated with the process. |  | \n \nHOST | The host the client is connected to. |  | \n \nDB | The default database of the process (NULL if no\ndefault). |  | \n \nCOMMAND | The command type. See Thread Command Values. |  | \n \nTIME | The amount of time, in seconds, the process has been\nin its current state. For a slave SQL thread before MariaDB\n10.1, this is the time in seconds between the last\nreplicated event\'s timestamp and the slave machine\'s real\ntime. |  | \n \nSTATE | See Thread States. |  | \n \nINFO | The statement being executed. |  | \n \nPROGRESS | The total progress of the process (0-100%) (see\nProgress Reporting). | MariaDB 5.3 | \n \nSee TIME_MS column in information_schema.PROCESSLIST for\ndifferences in the TIME column between MariaDB and MySQL.\n \nThe information_schema.PROCESSLIST table contains the\nfollowing additional columns:\n \nName | Description | Introduced | \n \nTIME_MS | The amount of time, in milliseconds, the process\nhas been in its current state. | MariaDB 5.1 | \n \nSTAGE | The stage the process is currently in. |\nMariaDB 5.3 | \n \nMAX_STAGE | The maximum number of stages. | MariaDB 5.3 | \n \nPROGRESS | The progress of the process within the current\nstage (0-100%). | MariaDB 5.3 | \n \nMEMORY_USED | The amount of memory used by the process. |\nMariaDB 10.0.1 | \n \nEXAMINED_ROWS | The number of rows the process has examined.\n| MariaDB 10.0.1 | \n \nQUERY_ID | Query ID. | MariaDB 10.0.5 | \n \nNote that the PROGRESS field from the information schema,\nand the PROGRESS field from SHOW PROCESSLIST display\ndifferent results. SHOW PROCESSLIST shows the total\nprogress, while the information schema shows the progress\nfor the current stage only.\n \nThreads can be killed using their thread_id, or, since\nMariaDB 10.0.5, their query_id, with the KILL statement.\n \nSince queries on this table are locking, if the\nperformance_schema is enabled, you may want to query the\nTHREADS table instead.\n \nExamples\n-------- \nFrom MariaDB 5.1.x\n \nSHOW FULL PROCESSLIST;\n+---------+-------+-----------+------+---------+------+-------+-----------------------+\n| Id | User | Host | db | Command | Time | State | Info |\n+---------+-------+-----------+------+---------+------+-------+-----------------------+\n| 1988880 | dbart | localhost | NULL | Query | 0 | NULL |\nSHOW FULL PROCESSLIST |\n+---------+-------+-----------+------+---------+------+-------+-----------------------+\n \nSELECT * FROM information_schema.processlist;\n+---------+-------+-----------+------+---------+------+-----------+----------------------------------------------+---------+\n| ID | USER | HOST | DB | COMMAND | TIME | STATE | INFO |\nTIME_MS |\n+---------+-------+-----------+------+---------+------+-----------+----------------------------------------------+---------+\n| 1988880 | dbart | localhost | NULL | Query | 0 | executing\n| SELECT * FROM information_schema.processlist | 0.444 |\n+---------+-------+-----------+------+---------+------+-----------+----------------------------------------------+---------+\n \nFrom MariaDB 5.5.x\n \nSHOW FULL PROCESSLIST;\n+-----+------+-----------+------+---------+------+-------+-----------------------+----------+\n| Id | User | Host | db | Command | Time | State | Info |\nProgress |\n+-----+------+-----------+------+---------+------+-------+-----------------------+----------+\n| 126 | root | localhost | NULL | Query | 0 | NULL | SHOW\nFULL PROCESSLIST | 0.000 |\n+-----+------+-----------+------+---------+------+-------+-----------------------+----------+\n \nSELECT * FROM information_schema.processlist;\n+-----+--------+-----------+------+---------+------+-----------+----------------------------------------------+---------+-------+-----------+----------+\n| ID | USER | HOST | DB | COMMAND | TIME | STATE | INFO |\nTIME_MS | STAGE | MAX_STAGE | PROGRESS |\n+-----+--------+-----------+------+---------+------+-----------+----------------------------------------------+---------+-------+-----------+----------+\n| 126 | root | localhost | NULL | Query | 0 | executing |\nSELECT * FROM information_schema.processlist | 344.718 | 0 |\n0 | 0.000 |\n+-----+--------+-----------+------+---------+------+-----------+----------------------------------------------+---------+-------+-----------+----------+\n \nFrom MariaDB 10.0.x\n \nSHOW PROCESSLIST;\n+----+-----------------+-----------+------+---------+------+------------------------+------------------+----------+\n| Id | User | Host | db | Command | Time | State | Info |\nProgress |\n+----+-----------------+-----------+------+---------+------+------------------------+------------------+----------+\n| 2 | event_scheduler | localhost | NULL | Daemon | 2693 |\nWaiting on empty queue | NULL | 0.000 |\n| 4 | root | localhost | NULL | Query | 0 | Table lock |\nSHOW PROCESSLIST | 0.000 |\n+----+-----------------+-----------+------+---------+------+------------------------+------------------+----------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-processlist/', '', 'https://mariadb.com/kb/en/show-processlist/'),
(392, 'SHOW PROFILE', 26, 'Syntax\n------ \nSHOW PROFILE [type [, type] ... ]\n [FOR QUERY n]\n [LIMIT row_count [OFFSET offset]]\n \ntype:\n ALL\n | BLOCK IO\n | CONTEXT SWITCHES\n | CPU\n | IPC\n | MEMORY\n | PAGE FAULTS\n | SOURCE\n | SWAPS\n \nDescription\n----------- \nThe SHOW PROFILE and \nSHOW PROFILES statements display profiling\ninformation that indicates resource usage for statements\nexecuted during the\ncourse of the current session.\n \nProfiling is controlled by the profiling session variable,\nwhich has a default value of 0 (OFF). Profiling is enabled\nby setting profiling to 1 or ON:\n \nSET profiling = 1;\n \nSHOW PROFILES displays a list of the most recent statements\nsent to the master. The size of the list is controlled by\nthe\nprofiling_history_size session variable, which has a default\nvalue of 15. The maximum value is 100. Setting the value to\n0 has the practical effect of disabling profiling.\n \nAll statements are profiled except SHOW PROFILES and \nSHOW PROFILE, so you will find neither of those statements\nin the profile list. Malformed statements are profiled. For\nexample, \n SHOW PROFILING is an illegal statement, and a syntax error\noccurs if you try to execute it, but it will show up in the\nprofiling list.\n \n SHOW PROFILE displays detailed information about a single\nstatement. Without the FOR QUERY n clause, the output\npertains to the most recently executed statement. If \n FOR QUERY n is included,\n SHOW PROFILE displays information for statement n. The\nvalues of n correspond to\nthe Query_ID values displayed by SHOW PROFILES.\n \nThe LIMIT row_count clause may be given to limit the\noutput to row_count rows. If LIMIT is given, \n OFFSET offset may be added to begin the output offset\nrows into the full set of rows.\n \nBy default, SHOW PROFILE displays Status and Duration\ncolumns. The Status values are like the State values\ndisplayed by \nSHOW PROCESSLIST,\nalthough there might be some minor differences in\ninterpretation for\nthe two statements for some status values (see\nhttp://dev.mysql.com/doc/refman/5.6/en/thread-information.html).\n \nOptional type values may be specified to display specific\nadditional\ntypes of information:\nALL displays all information\nBLOCK IO displays counts for block input and output\noperations\nCONTEXT SWITCHES displays counts for voluntary and\ninvoluntary context switches\nCPU displays user and system CPU usage times\nIPC displays counts for messages sent and received\nMEMORY is not currently implemented\nPAGE FAULTS displays counts for major and minor page faults\nSOURCE displays the names of functions from the source code,\ntogether with the name and line number of the file in which\nthe function occurs\nSWAPS displays swap counts\n \nProfiling is enabled per session. When a session ends, its\nprofiling information is lost.\n \nThe information_schema.PROFILING table contains similar\ninformation.\n \nExamples\n-------- \nSELECT @@profiling;\n+-------------+\n| @@profiling |\n+-------------+\n| 0 |\n+-------------+\n \nSET profiling = 1;\n \nUSE test;\n \nDROP TABLE IF EXISTS t1;\n \nCREATE TABLE T1 (id INT);\n \nSHOW PROFILES;\n+----------+------------+--------------------------+\n| Query_ID | Duration | Query |\n+----------+------------+--------------------------+\n| 1 | 0.00009200 | SELECT DATABASE() |\n| 2 | 0.00023800 | show databases |\n| 3 | 0.00018900 | show tables |\n| 4 | 0.00014700 | DROP TABLE IF EXISTS t1 |\n| 5 | 0.24476900 | CREATE TABLE T1 (id INT) |\n+----------+------------+--------------------------+\n \nSHOW PROFILE;\n+----------------------+----------+\n| Status | Duration |\n+----------------------+----------+\n| starting | 0.000042 |\n| checking permissions | 0.000044 |\n| creating table | 0.244645 |\n| After create | 0.000013 |\n| query end | 0.000003 |\n| freeing items | 0.000016 |\n| logging slow query | 0.000003 |\n| cleaning up | 0.000003 |\n+----------------------+----------+\n \nSHOW PROFILE FOR QUERY 4;\n+--------------------+----------+\n| Status | Duration |\n+--------------------+----------+\n| starting | 0.000126 |\n| query end | 0.000004 |\n| freeing items | 0.000012 |\n| logging slow query | 0.000003 |\n| cleaning up | 0.000002 |\n+--------------------+----------+\n \nSHOW PROFILE CPU FOR QUERY 5;\n+----------------------+----------+----------+------------+\n| Status | Duration | CPU_user | CPU_system |\n+----------------------+----------+----------+------------+\n| starting | 0.000042 | 0.000000 | 0.000000 |\n| checking permissions | 0.000044 | 0.000000 | 0.000000 |\n| creating table | 0.244645 | 0.000000 | 0.000000 |\n| After create | 0.000013 | 0.000000 | 0.000000 |\n| query end | 0.000003 | 0.000000 | 0.000000 |\n| freeing items | 0.000016 | 0.000000 | 0.000000 |\n| logging slow query | 0.000003 | 0.000000 | 0.000000 |\n| cleaning up | 0.000003 | 0.000000 | 0.000000 |\n+----------------------+----------+----------+------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-profile/', '', 'https://mariadb.com/kb/en/show-profile/'),
(399, 'SHOW TABLE STATUS', 26, 'Syntax\n------ \nSHOW TABLE STATUS [{FROM | IN} db_name]\n [LIKE \'pattern\' | WHERE expr]\n \nDescription\n----------- \n SHOW TABLE STATUS works like \n SHOW TABLES, but provides more extensive information about\neach non-TEMPORARY table.\n \nThe LIKE clause, if present on its own, indicates which\ntable names to\nmatch. The WHERE and LIKE clauses can be given to select\nrows using more general conditions, as discussed in Extended\nSHOW.\n \nThe following information is returned:\n \nColumn | Description | \n \nName | Table name. | \n \nEngine | Table storage engine. | \n \nVersion | Version number from the table\'s .frm file. | \n \nRow_format | Row format (see InnoDB, Aria and MyISAM row\nformats). | \n \nRows | Number of rows in the table. Some engines, such as\nXtraDB and InnoDB may store an estimate. | \n \nAvg_row_length | Average row length in the table. | \n \nData_length | For InnoDB/XtraDB, the index size, in pages,\nmultiplied by the page size. For Aria and MyISAM, length of\nthe data file, in bytes. For MEMORY, the approximate\nallocated memory. | \n \nMax_data_length | Maximum length of the data file, ie the\ntotal number of bytes that could be stored in the table. Not\nused in XtraDB and InnoDB. | \n \nIndex_length | Length of the index file. | \n \nData_free | Bytes allocated but unused. For InnoDB tables in\na shared tablespace, the free space of the shared tablespace\nwith small safety margin. An estimate in the case of\npartitioned tables - see the PARTITIONS table. | \n \nAuto_increment | Next AUTO_INCREMENT value. | \n \nCreate_time | Time the table was created. | \n \nUpdate_time | Time the table was last updated. On Windows,\nthe timestamp is not updated on update, so MyISAM values\nwill be inaccurate. In InnoDB, if shared tablespaces are\nused, will be NULL, while buffering can also delay the\nupdate, so the value will differ from the actual time of the\nlast UPDATE, INSERT or DELETE. | \n \nCheck_time | Time the table was last checked. Not kept by\nall storage engines, in which case will be NULL. | \n \nCollation | Character set and collation. | \n \nChecksum | Live checksum value, if any. | \n \nCreate_options | Extra CREATE TABLE options. | \n \nComment | Table comment provided when MariaDB created the\ntable. | \n \nSimilar information can be found in the\ninformation_schema.TABLES table as well as by using\nmysqlshow:\n \nmysqlshow --status db_name\n \nExample\n \nshow table status\\G\n*************************** 1. row\n***************************\n Name: bus_routes\n Engine: InnoDB\n Version: 10\n Row_format: Dynamic\n Rows: 5\n Avg_row_length: 3276\n Data_length: 16384\nMax_data_length: 0\n Index_length: 0\n Data_free: 0\n Auto_increment: NULL\n Create_time: 2017-05-24 11:17:46\n Update_time: NULL\n Check_time: NULL\n Collation: latin1_swedish_ci\n Checksum: NULL\n Create_options: \n Comment:\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-table-status/', '', 'https://mariadb.com/kb/en/show-table-status/'),
(400, 'SHOW TABLES', 26, 'Syntax\n------ \nSHOW [FULL] TABLES [FROM db_name]\n [LIKE \'pattern\' | WHERE expr]\n \nDescription\n----------- \nSHOW TABLES lists the non-TEMPORARY tables, sequences and\nviews in a given database. \n \nThe LIKE clause, if present on its own, indicates which\ntable names to match. The WHERE and LIKE clauses can be\ngiven to select rows using more general conditions, as\ndiscussed in Extended SHOW. For example, when searching for\ntables in the test database, the column name for use in the\nWHERE and LIKE clauses will be Tables_in_test\n \nThe FULL modifier is supported such that SHOW FULL TABLES\ndisplays a second output column. Values for the second\ncolumn. Table_type, are BASE TABLE for a table, VIEW for a\nview and SEQUENCE for a sequence.\n \nYou can also get this information using:\n \nmysqlshow db_name\n \nSee mysqlshow for more details.\n \nIf you have no privileges for a base table or view, it does\nnot show up in the output from SHOW TABLES or mysqlshow\ndb_name.\n \nThe information_schema.TABLES table, as well as the SHOW\nTABLE STATUS statement, provide extended information about\ntables.\n \nExamples\n-------- \nSHOW TABLES;\n+----------------------+\n| Tables_in_test |\n+----------------------+\n| animal_count |\n| animals |\n| are_the_mooses_loose |\n| aria_test2 |\n| t1 |\n| view1 |\n+----------------------+\n \nShowing the tables beginning with a only.\n \nSHOW TABLES WHERE Tables_in_test LIKE \'a%\';\n+----------------------+\n| Tables_in_test |\n+----------------------+\n| animal_count |\n| animals |\n| are_the_mooses_loose |\n| aria_test2 |\n+----------------------+\n \nShowing tables and table types:\n \nSHOW FULL TABLES;\n+----------------+------------+\n| Tables_in_test | Table_type |\n+----------------+------------+\n| s1 | SEQUENCE |\n| student | BASE TABLE |\n| v1 | VIEW |\n+----------------+------------+\n \n\n\nURL: https://mariadb.com/kb/en/show-tables/', '', 'https://mariadb.com/kb/en/show-tables/'),
(401, 'SHOW TABLE_STATISTICS', 26, 'MariaDB 5.2 introduced the User Statistics feature.\n \nSyntax\n------ \nSHOW TABLE_STATISTICS\n \nDescription\n----------- \nThe SHOW TABLE_STATISTICS statement was introduced in\nMariaDB 5.2 as part of the User Statistics feature. It was\nremoved as a separate statement in MariaDB 10.1.1, but\neffectively replaced by the generic SHOW\ninformation_schema_table statement. The\ninformation_schema.TABLE_STATISTICS table shows statistics\non table usage\n \nThe userstat system variable must be set to 1 to activate\nthis feature. See the User Statistics and\ninformation_schema.TABLE_STATISTICS articles for more\ninformation.\n \nExample\n \nFrom MariaDB 10.0\n \nSHOW TABLE_STATISTICS\\G\n*************************** 1. row\n***************************\n Table_schema: mysql\n Table_name: proxies_priv\n Rows_read: 2\n Rows_changed: 0\nRows_changed_x_#indexes: 0\n*************************** 2. row\n***************************\n Table_schema: test\n Table_name: employees_example\n Rows_read: 7\n Rows_changed: 0\nRows_changed_x_#indexes: 0\n*************************** 3. row\n***************************\n Table_schema: mysql\n Table_name: user\n Rows_read: 16\n Rows_changed: 0\nRows_changed_x_#indexes: 0\n*************************** 4. row\n***************************\n Table_schema: mysql\n Table_name: db\n Rows_read: 2\n Rows_changed: 0\nRows_changed_x_#indexes: 0\n \n\n \n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-table-statistics/', '', 'https://mariadb.com/kb/en/show-table-statistics/'),
(402, 'SHOW TRIGGERS', 26, 'Syntax\n------ \nSHOW TRIGGERS [FROM db_name]\n [LIKE \'pattern\' | WHERE expr]\n \nDescription\n----------- \n SHOW TRIGGERS lists the triggers currently defined for\ntables in a database (the default database unless a FROM\nclause is given). This statement requires the\nTRIGGER privilege (prior to MySQL\n5.1.22, it required the SUPER privilege). \n \nThe LIKE clause, if present on its own, indicates which\ntable names to\nmatch and causes the statement to display triggers for those\ntables. The WHERE and LIKE clauses can be given to select\nrows using more general conditions, as discussed in Extended\nSHOW.\n \nSimilar information is stored in the\ninformation_schema.TRIGGERS table.\n \nIf there are multiple triggers for the same action, then the\ntriggers are shown in action order.\n \nExamples\n-------- \nFor the trigger defined at Trigger Overview:\n \nSHOW triggers Like \'animals\' \\G\n*************************** 1. row\n***************************\n Trigger: the_mooses_are_loose\n Event: INSERT\n Table: animals\n Statement: BEGIN\n IF NEW.name = \'Moose\' THEN\n UPDATE animal_count SET animal_count.animals =\nanimal_count.animals+100;\n ELSE \n UPDATE animal_count SET animal_count.animals =\nanimal_count.animals+1;\n END IF;\nEND\n Timing: AFTER\n Created: 2016-09-29 13:53:34.35\n sql_mode: \n Definer: root@localhost\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n Database Collation: latin1_swedish_ci\n \nListing all triggers associated with a certain table:\n \nSHOW TRIGGERS FROM test WHERE `Table` = \'user\' \\G\n*************************** 1. row\n***************************\n Trigger: user_ai\n Event: INSERT\n Table: user\n Statement: BEGIN END\n Timing: AFTER\n Created: 2016-09-29 13:53:34.35\n sql_mode: \n Definer: root@%\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n Database Collation: latin1_swedish_ci\n \nSHOW triggers WHERE Event Like \'Insert\' \\G\n*************************** 1. row\n***************************\n Trigger: the_mooses_are_loose\n Event: INSERT\n Table: animals\n Statement: BEGIN\n IF NEW.name = \'Moose\' THEN\n UPDATE animal_count SET animal_count.animals =\nanimal_count.animals+100;\n ELSE \n UPDATE animal_count SET animal_count.animals =\nanimal_count.animals+1;\n END IF;\nEND\n Timing: AFTER\n Created: 2016-09-29 13:53:34.35\n sql_mode: \n Definer: root@localhost\ncharacter_set_client: utf8\ncollation_connection: utf8_general_ci\n Database Collation: latin1_swedish_ci\ncharacter_set_client is the session value of the\ncharacter_set_client system variable when the trigger was\ncreated. \ncollation_connection is the session value of the\ncollation_connection system variable when the trigger was\n created. \nDatabase Collation is the collation of the database \n with which the trigger is associated.\n \nThese columns were added in MariaDB/MySQL 5.1.21.\n \nOld triggers created before MySQL 5.7 and MariaDB 10.2.3 has\nNULL in the Created column.\n \n\n\nURL: https://mariadb.com/kb/en/show-triggers/', '', 'https://mariadb.com/kb/en/show-triggers/'),
(403, 'SHOW USER_STATISTICS', 26, 'MariaDB 5.2 introduced the User Statistics feature.\n \nSyntax\n------ \nSHOW USER_STATISTICS\n \nDescription\n----------- \nThe SHOW USER_STATISTICS statement was introduced in MariaDB\n5.2 as part of the User Statistics feature. It was removed\nas a separate statement in MariaDB 10.1.1, but effectively\nreplaced by the generic SHOW information_schema_table\nstatement. The information_schema.USER_STATISTICS table\nholds statistics about user activity. You can use this table\nto find out such things as which user is causing the most\nload and which users are being abusive. You can also use\nthis table to measure how close to capacity the server may\nbe.\n \nThe userstat system variable must be set to 1 to activate\nthis feature. See the User Statistics and\ninformation_schema.USER_STATISTICS table for more\ninformation.\n \nExample\n \nFrom MariaDB 10.0:\n \nSHOW USER_STATISTICS\\G\n*************************** 1. row\n***************************\n User: root\n Total_connections: 1\nConcurrent_connections: 0\n Connected_time: 3297\n Busy_time: 0.14113400000000006\n Cpu_time: 0.017637000000000003\n Bytes_received: 969\n Bytes_sent: 22355\n Binlog_bytes_written: 0\n Rows_read: 10\n Rows_sent: 67\n Rows_deleted: 0\n Rows_inserted: 0\n Rows_updated: 0\n Select_commands: 7\n Update_commands: 0\n Other_commands: 0\n Commit_transactions: 1\n Rollback_transactions: 0\n Denied_connections: 0\n Lost_connections: 0\n Access_denied: 0\n Empty_queries: 7\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-user-statistics/', '', 'https://mariadb.com/kb/en/show-user-statistics/'),
(404, 'SHOW VARIABLES', 26, 'Syntax\n------ \nSHOW [GLOBAL | SESSION] VARIABLES\n [LIKE \'pattern\' | WHERE expr]\n \nDescription\n----------- \nSHOW VARIABLES shows the values of MariaDB system variables.\nThis\ninformation also can be obtained using the mysqladmin\nvariables\ncommand. The LIKE clause, if present, indicates which\nvariable names\nto match. The WHERE clause can be given to select rows using\nmore\ngeneral conditions.\n \nWith the GLOBAL modifier, SHOW VARIABLES displays the values\nthat are\nused for new connections to MariaDB. With SESSION, it\ndisplays the\nvalues that are in effect for the current connection. If no\nmodifier\nis present, the default is SESSION. LOCAL is a synonym for\nSESSION.\nWith a LIKE clause, the statement displays only rows for\nthose\nvariables with names that match the pattern. To obtain the\nrow for a\nspecific variable, use a LIKE clause as shown:\n \nSHOW VARIABLES LIKE \'maria_group_commit\';\n \nSHOW SESSION VARIABLES LIKE \'maria_group_commit\';\n \nTo get a list of variables whose name match a pattern, use\nthe \"%\"\nwildcard character in a LIKE clause:\n \nSHOW VARIABLES LIKE \'%maria%\';\n \nSHOW GLOBAL VARIABLES LIKE \'%maria%\';\n \nWildcard characters can be used in any position within the\npattern to\nbe matched. Strictly speaking, because \"_\" is a wildcard\nthat matches\nany single character, you should escape it as \"\\_\" to\nmatch it\nliterally. In practice, this is rarely necessary.\n \nThe WHERE and LIKE clauses can be given to select rows using\nmore general conditions, as discussed in Extended SHOW.\n \nSee SET for information on setting server system variables.\n \nSee Server System Variables for a list of all the variables\nthat can be set.\n \nYou can also see the server variables by querying the\nInformation Schema GLOBAL_VARIABLES and SESSION_VARIABLES\ntables.\n \nExamples\n-------- \nSHOW VARIABLES LIKE \'aria%\';\n \n+------------------------------------------+---------------------+\n| Variable_name | Value |\n+------------------------------------------+---------------------+\n| aria_block_size | 8192 |\n| aria_checkpoint_interval | 30 |\n| aria_checkpoint_log_activity | 1048576 |\n| aria_force_start_after_recovery_failures | 0 |\n| aria_group_commit | none |\n| aria_group_commit_interval | 0 |\n| aria_log_file_size | 1073741824 |\n| aria_log_purge_type | immediate |\n| aria_max_sort_file_size | 9223372036853727232 |\n| aria_page_checksum | ON |\n| aria_pagecache_age_threshold | 300 |\n| aria_pagecache_buffer_size | 134217728 |\n| aria_pagecache_division_limit | 100 |\n| aria_recover | NORMAL |\n| aria_repair_threads | 1 |\n| aria_sort_buffer_size | 134217728 |\n| aria_stats_method | nulls_unequal |\n| aria_sync_log_dir | NEWFILE |\n| aria_used_for_temp_tables | ON |\n+------------------------------------------+---------------------+\n \nSELECT VARIABLE_NAME, SESSION_VALUE, GLOBAL_VALUE FROM\n INFORMATION_SCHEMA.SYSTEM_VARIABLES WHERE\n VARIABLE_NAME LIKE \'max_error_count\' OR\n VARIABLE_NAME LIKE \'innodb_sync_spin_loops\';\n \n+---------------------------+---------------+--------------+\n| VARIABLE_NAME | SESSION_VALUE | GLOBAL_VALUE |\n+---------------------------+---------------+--------------+\n| MAX_ERROR_COUNT | 64 | 64 |\n| INNODB_SYNC_SPIN_LOOPS | NULL | 30 |\n+---------------------------+---------------+--------------+\n \nSET GLOBAL max_error_count=128;\n \nSELECT VARIABLE_NAME, SESSION_VALUE, GLOBAL_VALUE FROM\n INFORMATION_SCHEMA.SYSTEM_VARIABLES WHERE\n VARIABLE_NAME LIKE \'max_error_count\' OR\n VARIABLE_NAME LIKE \'innodb_sync_spin_loops\';\n \n+---------------------------+---------------+--------------+\n| VARIABLE_NAME | SESSION_VALUE | GLOBAL_VALUE |\n+---------------------------+---------------+--------------+\n| MAX_ERROR_COUNT | 64 | 128 |\n| INNODB_SYNC_SPIN_LOOPS | NULL | 30 |\n+---------------------------+---------------+--------------+\n \nSET GLOBAL max_error_count=128;\n \nSHOW VARIABLES LIKE \'max_error_count\';\n \n+-----------------+-------+\n| Variable_name | Value |\n+-----------------+-------+\n| max_error_count | 64 |\n+-----------------+-------+\n \nSHOW GLOBAL VARIABLES LIKE \'max_error_count\';\n \n+-----------------+-------+\n| Variable_name | Value |\n+-----------------+-------+\n| max_error_count | 128 |\n+-----------------+-------+\n \nBecause the following variable only has a global scope, the\nglobal value is returned even when specifying SESSION (in\nthis case by default):\n \nSHOW VARIABLES LIKE \'innodb_sync_spin_loops\';\n \n+------------------------+-------+\n| Variable_name | Value |\n+------------------------+-------+\n| innodb_sync_spin_loops | 30 |\n+------------------------+-------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-variables/', '', 'https://mariadb.com/kb/en/show-variables/'),
(405, 'SHOW WARNINGS', 26, 'Syntax\n------ \nSHOW WARNINGS [LIMIT [offset,] row_count]\nSHOW ERRORS [LIMIT row_count OFFSET offset]\nSHOW COUNT(*) WARNINGS\n \nDescription\n----------- \n SHOW WARNINGS shows the error, warning, and note messages\nthat resulted from the last statement that generated\nmessages in the\ncurrent session. It shows nothing if the last statement used\na table\nand generated no messages. (That is, a statement that uses a\ntable but\ngenerates no messages clears the message list.) Statements\nthat do not\nuse tables and do not generate messages have no effect on\nthe message\nlist.\n \nA note is different to a warning in that it only appears if\nthe sql_notes variable is set to 1 (the default), and is not\nconverted to an error if strict mode is enabled.\n \nA related statement, SHOW ERRORS, shows only the errors.\n \nThe SHOW COUNT(*) WARNINGS statement displays the total\nnumber of errors, warnings, and notes. You can also retrieve\nthis number from\nthe warning_count variable:\n \nSHOW COUNT(*) WARNINGS;\nSELECT @@warning_count;\n \nThe value of warning_count might be greater than the number\nof messages displayed by SHOW WARNINGS if the\nmax_error_count system variable is set so low that not all\nmessages are stored.\n \nThe LIMIT clause has the same syntax as for the\n SELECT statement.\n \nSHOW WARNINGS can be used after EXPLAIN EXTENDED to see how\na query is internally rewritten by MariaDB.\n \nIf the sql_notes server variable is set to 1, Notes are\nincluded in the output of SHOW WARNINGS; if it is set to 0,\nthis statement will not show (or count) Notes.\n \nThe results of SHOW WARNINGS and SHOW COUNT(*) WARNINGS are\ndirectly sent to the client. If you need to access those\ninformation in a stored program, you can use the GET\nDIAGNOSTICS statement instead.\n \nFor a list of MariaDB error codes, see MariaDB Error Codes.\n \nThe mysql client also has a number of options related to\nwarnings. The \\W command will show warnings after every\nstatement, while \\w will disable this. Starting the client\nwith the --show-warnings option will show warnings after\nevery statement.\n \nMariaDB 10.3.1 implements a stored routine error stack\ntrace. SHOW WARNINGS can also be used to show more\ninformation. See the example below.\n \nExamples\n-------- \nSELECT 1/0;\n+------+\n| 1/0 |\n+------+\n| NULL |\n+------+\n \nSHOW COUNT(*) WARNINGS;\n+-------------------------+\n| @@session.warning_count |\n+-------------------------+\n| 1 |\n+-------------------------+\n \nSHOW WARNINGS;\n+---------+------+---------------+\n| Level | Code | Message |\n+---------+------+---------------+\n| Warning | 1365 | Division by 0 |\n+---------+------+---------------+\n \nStack Trace\n \nFrom MariaDB 10.3.1, displaying a stack trace:\n \nDELIMITER $$\nCREATE OR REPLACE PROCEDURE p1()\n BEGIN\n DECLARE c CURSOR FOR SELECT * FROM not_existing;\n OPEN c;\n CLOSE c;\n END;\n$$\nCREATE OR REPLACE PROCEDURE p2()\n BEGIN\n CALL p1;\n END;\n$$\nDELIMITER ;\nCALL p2;\nERROR 1146 (42S02): Table \'test.not_existing\' doesn\'t\nexist\n \nSHOW WARNINGS;\n+-------+------+-----------------------------------------+\n| Level | Code | Message |\n+-------+------+-----------------------------------------+\n| Error | 1146 | Table \'test.not_existing\' doesn\'t exist\n|\n| Note | 4091 | At line 6 in test.p1 |\n| Note | 4091 | At line 4 in test.p2 |\n+-------+------+-----------------------------------------+\n \nSHOW WARNINGS displays a stack trace, showing where the\nerror actually happened:\nLine 4 in test.p1 is the OPEN command which actually raised\nthe error\nLine 3 in test.p2 is the CALL statement, calling p1 from p2.\n \n\n\nURL: https://mariadb.com/kb/en/show-warnings/', '', 'https://mariadb.com/kb/en/show-warnings/'),
(406, 'SHOW WSREP_MEMBERSHIP', 26, 'MariaDB 10.1.2\n \nSHOW WSREP_MEMBERSHIP was introduced with the WSREP_INFO\nplugin in MariaDB 10.1.2.\n \nSyntax\n------ \nSHOW WSREP_MEMBERSHIP\n \nDescription\n----------- \nThe SHOW WSREP_MEMBERSHIP statement returns Galera node\ncluster membership information. It returns the same\ninformation as found in the\ninformation_schema.WSREP_MEMBERSHIP table. Only users with\nthe SUPER privilege can access this information.\n \nExamples\n-------- \nSHOW WSREP_MEMBERSHIP;\n+-------+--------------------------------------+----------+-----------------+\n| Index | Uuid | Name | Address |\n+-------+--------------------------------------+----------+-----------------+\n| 0 | 19058073-8940-11e4-8570-16af7bf8fced | my_node1 |\n10.0.2.15:16001 |\n| 1 | 19f2b0e0-8942-11e4-9cb8-b39e8ee0b5dd | my_node3 |\n10.0.2.15:16003 |\n| 2 | d85e62db-8941-11e4-b1ef-4bc9980e476d | my_node2 |\n10.0.2.15:16002 |\n+-------+--------------------------------------+----------+-----------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-wsrep_membership/', '', 'https://mariadb.com/kb/en/show-wsrep_membership/'),
(407, 'SHOW WSREP_STATUS', 26, 'MariaDB 10.1.2\n \nSHOW WSREP_STATUS was introduced with the WSREP_INFO plugin\nin MariaDB 10.1.2.\n \nSyntax\n------ \nSHOW WSREP_STATUS\n \nDescription\n----------- \nThe SHOW WSREP_STATUS statement returns Galera node and\ncluster status information. It returns the same information\nas found in the information_schema.WSREP_STATUS table. Only\nusers with the SUPER privilege can access this information.\n \nExamples\n-------- \nSHOW WSREP_STATUS;\n+------------+-------------+----------------+--------------+\n| Node_Index | Node_Status | Cluster_Status | Cluster_Size |\n+------------+-------------+----------------+--------------+\n| 0 | Synced | Primary | 3 |\n+------------+-------------+----------------+--------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/show-wsrep_status/', '', 'https://mariadb.com/kb/en/show-wsrep_status/'),
(408, 'CALL', 27, 'Syntax\n------ \nCALL sp_name([parameter[,...]])\nCALL sp_name[()]\n \nDescription\n----------- \nThe CALL statement invokes a stored procedure that was\ndefined previously with CREATE PROCEDURE. \n \nStored procedure names can be specified as\ndatabase_name.procedure_name. Procedure names and database\nnames can be quoted with backticks (). This is necessary if\nthey are reserved words, or contain special characters. See\nidentifier qualifiers for details.\n \nBefore MySQL 5.1.13, stored procedures that take no\narguments required parentheses. In current releases of\nMariaDB, CALL p() and CALL p are equivalent.\n \nIf parentheses are used, any number of spaces, tab\ncharacters and new line characters is allowed between the\nprocedure\'s name and the open parenthesis.\n \nCALL can pass back values to its caller using parameters\nthat are declared as OUT or INOUT\nparameters. If no value is assigned to an OUT parameter,\nNULL is assigned (and its former value is lost). To pass\nsuch values from another stored program you can use\nuser-defined variables, local variables or routine\'s\nparameters; in other contexts, you can only use user-defined\nvariables. \n \nCALL can also be executed as a prepared statement.\nPlaceholders can be used for IN parameters in all versions\nof MariaDB; for OUT and INOUT parameters, placeholders can\nbe used since MariaDB 5.5.\n \nWhen the procedure returns, a client program can also obtain\nthe\nnumber of rows affected for the final statement executed\nwithin the routine: At\nthe SQL level, call the ROW_COUNT() function; from the C\nAPI, call the mysql_affected_rows() function.\n \nIf the CLIENT_MULTI_RESULTS API flag is set, CALL can return\nany number of resultsets and the called stored procedure can\nexecute prepared statements. If it is not set, at most one\nresultset can be returned and prepared statements cannot be\nused within procedures.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/call/', '', 'https://mariadb.com/kb/en/call/'),
(409, 'Concurrent Inserts', 27, 'The MyISAM storage engine supports concurrent inserts. This\nfeature allows SELECT statements to be executed during\nINSERT operations, reducing contention.\n \nWhether concurrent inserts can be used or not depends on the\nvalue of the concurrent_insert server system variable:\nNEVER (0) disables concurrent inserts.\nAUTO (1) allows concurrent inserts only when the target\ntable has no free blocks (no data in the middle of the table\nhas been deleted after the last OPTIMIZE TABLE). This is the\ndefault.\nALWAYS (2) always enables concurrent inserts.\n \nIf the binary log is used, CREATE TABLE ... SELECT and\nINSERT ... SELECT statements cannot use concurrent inserts.\nThese statements acquire a read lock on the table, so\nconcurrent inserts will need to wait. This way the log can\nbe safely used to restore data.\n \nConcurrent inserts is not used by slaves with the row based\nreplication (see binary log formats).\n \nIf an INSERT statement contain the HIGH_PRIORITY clause,\nconcurrent inserts cannot be used. INSERT ... DELAYED is\nusually unneeded if concurrent inserts are enabled.\n \nLOAD DATA INFILE uses concurrent inserts if the CONCURRENT\nkeyword is specified and concurrent_insert is not NEVER.\nThis makes the statement slower (even if no other sessions\naccess the table) but reduces contention.\n \nLOCK TABLES allows non-conflicting concurrent inserts if a\nREAD LOCAL lock is used. Concurrent inserts are not allowed\nif the LOCAL keyword is omitted.\n \nNotes\n \nThe decision to enable concurrent insert for a table is done\nwhen the table is opened. If you change the value of\nconcurrent_insert it will only affect new opened tables. If\nyou want it to work for also for tables in use or cached,\nyou should do FLUSH TABLES after setting the variable.\n \n\n\nURL: https://mariadb.com/kb/en/concurrent-inserts/', '', 'https://mariadb.com/kb/en/concurrent-inserts/'),
(413, 'EXCEPT', 27, 'EXCEPT was introduced in MariaDB 10.3.0.\n \nThe result of EXCEPT is all records of the left SELECT\nresult set except records which are in right SELECT result\nset, i.e. it is subtraction of two result sets.\n \nSyntax\n------ \nSELECT ...\n(INTERSECT | EXCEPT | UNION [ALL | DISTINCT]) SELECT ...\n[(INTERSECT | EXCEPT | UNION [ALL | DISTINCT]) SELECT ...]\n[ORDER BY [column [, column ...]]]\n[LIMIT {[offset,] row_count | row_count OFFSET offset}]\n \nPlease note:\nALL is not supported by EXCEPT (and it is difficult to make\nsense of ALL with EXCEPT).\nBrackets for explicit operation precedence are not\nsupported; use a subquery in the FROM clause as a\nworkaround).\n \nDescription\n----------- \nMariaDB has supported EXCEPT and INTERSECT in addition to\nUNION since MariaDB 10.3.\n \nAll behavior for naming columns, ORDER BY and LIMIT is the\nsame as for UNION.\n \nEXCEPT implicitly supposes a DISTINCT operation.\n \nThe result of EXCEPT is all records of the left SELECT\nresult except records which are in right SELECT result set,\ni.e. it is subtraction of two result sets.\n \nEXCEPT and UNION have the same operation precedence.\n \n\nParentheses\n \nFrom MariaDB 10.4.0, parentheses can be used to specify\nprecedence. Before this, a syntax error would be returned.\n \nExamples\n-------- \nShow customers which are not employees:\n \n(SELECT e_name AS name, email FROM customers)\nEXCEPT\n(SELECT c_name AS name, email FROM employees);\n \nDifference between UNION, EXCEPT and INTERSECT:\n \nCREATE TABLE seqs (i INT);\nINSERT INTO seqs VALUES (1),(2),(3),(4),(5),(6);\n \nSELECT i FROM seqs WHERE i =3;\n \n+------+\n| i |\n+------+\n| 1 |\n| 2 |\n| 3 |\n| 4 |\n| 5 |\n| 6 |\n+------+\n \nSELECT i FROM seqs WHERE i =3;\n \n+------+\n| i |\n+------+\n| 1 |\n| 2 |\n+------+\n \nSELECT i FROM seqs WHERE i =3;\n \n+------+\n| i |\n+------+\n| 3 |\n+------+\n \nParentheses for specifying precedence, from MariaDB 10.4.0\n \nCREATE OR REPLACE TABLE t1 (a INT);\nCREATE OR REPLACE TABLE t2 (b INT);\nCREATE OR REPLACE TABLE t3 (c INT);\n \nINSERT INTO t1 VALUES (1),(2),(3),(4);\nINSERT INTO t2 VALUES (5),(6);\nINSERT INTO t3 VALUES (1),(6);\n \n((SELECT a FROM t1) UNION (SELECT b FROM t2)) EXCEPT (SELECT\nc FROM t3);\n+------+\n| a |\n+------+\n| 2 |\n| 3 |\n| 4 |\n| 5 |\n+------+\n \n(SELECT a FROM t1) UNION ((SELECT b FROM t2) EXCEPT (SELECT\nc FROM t3));\n+------+\n| a |\n+------+\n| 1 |\n| 2 |\n| 3 |\n| 4 |\n| 5 |\n+------+\n \n\n\nURL: https://mariadb.com/kb/en/except/', '', 'https://mariadb.com/kb/en/except/'),
(410, 'DELETE', 27, 'Syntax\n------ \nSingle-table syntax:\n \nDELETE [LOW_PRIORITY] [QUICK] [IGNORE] \n FROM tbl_name [PARTITION (partition_list)]\n [WHERE where_condition]\n [ORDER BY ...]\n [LIMIT row_count]\n [RETURNING select_expr \n [, select_expr ...]]\n \nMultiple-table syntax:\n \nDELETE [LOW_PRIORITY] [QUICK] [IGNORE]\n tbl_name[.*] [, tbl_name[.*]] ...\n FROM table_references\n [WHERE where_condition]\n \nOr:\n \nDELETE [LOW_PRIORITY] [QUICK] [IGNORE]\n FROM tbl_name[.*] [, tbl_name[.*]] ...\n USING table_references\n [WHERE where_condition]\n \nTrimming history:\n \nDELETE HISTORY\n FROM tbl_name [PARTITION (partition_list)]\n [BEFORE SYSTEM_TIME [TIMESTAMP|TRANSACTION] expression]\n \nDescription\n----------- \nOption | Description | \n \nLOW_PRIORITY | Wait until all SELECT\'s are done before\nstarting the statement. Used with storage engines that uses\ntable locking (MyISAM, Aria etc). See HIGH_PRIORITY and\nLOW_PRIORITY clauses for details. | \n \nQUICK | Signal the storage engine that it should expect that\na lot of rows are deleted. The storage engine engine can do\nthings to speed up the DELETE like ignoring merging of data\nblocks until all rows are deleted from the block (instead of\nwhen a block is half full). This speeds up things at the\nexpanse of lost space in data blocks. At least MyISAM and\nAria support this feature. | \n \nIGNORE | Don\'t stop the query even if a not-critical error\noccurs (like data overflow). See How IGNORE works for a full\ndescription. | \n \nFor the single-table syntax, the DELETE statement deletes\nrows\nfrom tbl_name and returns a count of the number of deleted\nrows. This count can\nbe obtained by calling the ROW_COUNT() function. The\nWHERE clause, if given, specifies the conditions that\nidentify\nwhich rows to delete. With no WHERE clause, all rows are\ndeleted. If the ORDER BY clause is specified, the rows are\ndeleted in the order that is specified. The LIMIT clause\nplaces a limit on the number of rows that can be deleted.\n \nFor the multiple-table syntax, DELETE deletes from each\ntbl_name the rows that satisfy the conditions. In this case,\nORDER BY and LIMIT> cannot be used. A DELETE can also\nreference tables which are located in different databases;\nsee Identifier Qualifiers for the syntax.\n \nwhere_condition is an expression that evaluates to true for\neach row to be deleted. It is specified as described in\nSELECT.\n \nCurrently, you cannot delete from a table and select from\nthe same\ntable in a subquery.\n \nYou need the DELETE privilege on a table to delete rows from\nit. You need only the SELECT privilege for any columns that\nare only read, such as those named in the WHERE clause. See\nGRANT.\n \nThe PARTITION clause was introduced in MariaDB 10.0. See\nPartition Pruning and Selection for details.\n \nAs stated, a DELETE statement with no WHERE\nclause deletes all rows. A faster way to do this, when you\ndo not need to know\nthe number of deleted rows, is to use TRUNCATE TABLE.\nHowever,\nwithin a transaction or if you have a lock on the table, \nTRUNCATE TABLE cannot be used whereas DELETE\ncan. See TRUNCATE TABLE, and\nLOCK.\n \nFrom MariaDB 10.0.5, it is possible to return a resultset of\nthe deleted rows for a single table to the client by using\nthe syntax DELETE ... RETURNING select_expr [, select_expr2\n...]]\n \nAny of SQL expression that can be calculated from a single\nrow fields is allowed. Subqueries are allowed. The AS\nkeyword is allowed, so it is possible to use aliases.\n \nThe use of aggregate functions is not allowed. RETURNING\ncannot be used in multi-table DELETEs.\n \nSame Source and Target Table\n \nUntil MariaDB 10.3.1, deleting from a table with the same\nsource and target was not possible. From MariaDB 10.3.1,\nthis is now possible. For example:\n \nDELETE FROM t1 WHERE c1 IN (SELECT b.c1 FROM t1 b WHERE\nb.c2=0);\n \nOne can use DELETE HISTORY to delete historical information\nfrom System-versioned tables.\n \nExamples\n-------- \nHow to use the ORDER BY and LIMIT clauses:\n \nDELETE FROM page_hit ORDER BY timestamp LIMIT 1000000;\n \nHow to use the RETURNING clause:\n \nDELETE FROM t RETURNING f1;\n \n+------+\n| f1 |\n+------+\n| 5 |\n| 50 |\n| 500 |\n+------+ \n \nThe following statement joins two tables: one is only used\nto satisfy a WHERE condition, but no row is deleted from it;\nrows from the other table are deleted, instead.\n \nDELETE post FROM blog INNER JOIN post WHERE blog.id =\npost.blog_id;\n \nDeleting from the Same Source and Target\n \nCREATE TABLE t1 (c1 INT, c2 INT);\nDELETE FROM t1 WHERE c1 IN (SELECT b.c1 FROM t1 b WHERE\nb.c2=0);\n \nUntil MariaDB 10.3.1, this returned:\n \nERROR 1093 (HY000): Table \'t1\' is specified twice, both as\na target for \'DELETE\' \n and as a separate source for\n \nFrom MariaDB 10.3.1:\n \nQuery OK, 0 rows affected (0.00 sec)\n \n\n\nURL: https://mariadb.com/kb/en/delete/', '', 'https://mariadb.com/kb/en/delete/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(417, 'HIGH_PRIORITY and LOW_PRIORITY', 27, 'The XtraDB/InnoDB storage engine uses row-level locking to\nensure data integrity. However some storage engines (such as\nMEMORY, MyISAM, Aria and MERGE) lock the whole table to\nprevent conflicts. These storage engines use two separate\nqueues to remember pending statements; one is for SELECTs\nand the other one is for write statements (INSERT, DELETE,\nUPDATE). By default, the latter has a higher priority.\n \nTo give write operations a lower priority, the\nlow_priority_updates server system variable can be set to\nON. The option is available on both the global and session\nlevels, and it can be set at startup or via the SET\nstatement.\n \nWhen too many table locks have been set by write statements,\nsome pending SELECTs are executed. The maximum number of\nwrite locks that can be acquired before this happens is\ndetermined by the max_write_lock_count server system\nvariable, which is dynamic.\n \nIf write statements have a higher priority (default), the\npriority of individual write statements (INSERT, REPLACE,\nUPDATE, DELETE) can be changed via the LOW_PRIORITY\nattribute, and the priority of a SELECT statement can be\nraised via the HIGH_PRIORITY attribute. Also, LOCK TABLES\nsupports a LOW_PRIORITY attribute for WRITE locks.\n \nIf read statements have a higher priority, the priority of\nan INSERT can be changed via the HIGH_PRIORITY attribute.\nHowever, the priority of other write statements cannot be\nraised individually.\n \nThe use of LOW_PRIORITY or HIGH_PRIORITY for an INSERT\nprevents Concurrent Inserts from being used.\n \n\n\nURL:\nhttps://mariadb.com/kb/en/high_priority-and-low_priority/', '', 'https://mariadb.com/kb/en/high_priority-and-low_priority/'),
(415, 'GROUP BY', 27, 'Use the GROUP BY clause in a SELECT statement to group rows\ntogether that have the same value in one or more column, or\nthe same computed value using expressions with any\nfunctions and operators except\ngrouping functions. When you\nuse a GROUP BY clause, you will get a single result row for\neach group of rows\nthat have the same value for the expression given in GROUP\nBY.\n \nWhen grouping rows, grouping values are compared as if by\nthe = operator.\nFor string values, the = operator ignores trailing\nwhitespace and may normalize\ncharacters and ignore case, depending on the collation in\nuse.\n \nYou can use any of the grouping functions in your select\nexpression. Their values will\nbe calculated based on all the rows that have been grouped\ntogether for each result\nrow. If you select a non-grouped column or a value computed\nfrom a non-grouped\ncolumn, it is undefined which row the returned value is\ntaken from. This is not permitted if the ONLY_FULL_GROUP_BY\nSQL_MODE is used.\n \nYou can use multiple expressions in the GROUP BY clause,\nseparated by commas.\nRows are grouped together if they match on each of the\nexpressions.\n \nYou can also use a single integer as the grouping\nexpression. If you use an integer n,\nthe results will be grouped by the nth column in the select\nexpression.\n \nThe WHERE clause is applied before the GROUP BY clause. It\nfilters non-aggregated\nrows before the rows are grouped together. To filter grouped\nrows based on aggregate values,\nuse the HAVING clause. The HAVING clause takes any\nexpression and evaluates it as\na boolean, just like the WHERE clause. You can use grouping\nfunctions in the HAVING\nclause. As with the select expression, if you reference\nnon-grouped columns in the HAVING\nclause, the behavior is undefined.\n \nBy default, if a GROUP BY clause is present, the rows in the\noutput will be sorted by the expressions used in the GROUP\nBY. You can also specify ASC or DESC (ascending, descending)\nafter those expressions, like in ORDER BY. The default is\nASC.\n \nIf you want the rows to be sorted by another field, you can\nadd an explicit ORDER BY. If you don\'t want the result to\nbe ordered, you can add ORDER BY NULL.\n \nWITH ROLLUP\n \nThe WITH ROLLUP modifer adds extra rows to the resultset\nthat represent super-aggregate summaries. For a full\ndescription with examples, see SELECT WITH ROLLUP.\n \nGROUP BY Examples\n \nConsider the following table that records how many times\neach user has played and won a game:\n \nCREATE TABLE plays (name VARCHAR(16), plays INT, wins INT);\nINSERT INTO plays VALUES \n (\"John\", 20, 5), \n (\"Robert\", 22, 8), \n (\"Wanda\", 32, 8), \n (\"Susan\", 17, 3);\n \nGet a list of win counts along with a count:\n \nSELECT wins, COUNT(*) FROM plays GROUP BY wins;\n \n+------+----------+\n| wins | COUNT(*) |\n+------+----------+\n| 3 | 1 |\n| 5 | 1 |\n| 8 | 2 |\n+------+----------+\n3 rows in set (0.00 sec)\n \nThe GROUP BY expression can be a computed value, and can\nrefer back to an identifer\nspecified with AS. Get a list of win averages along with a\ncount:\n \nSELECT (wins / plays) AS winavg, COUNT(*) FROM plays GROUP\nBY winavg;\n \n+--------+----------+\n| winavg | COUNT(*) |\n+--------+----------+\n| 0.1765 | 1 |\n| 0.2500 | 2 |\n| 0.3636 | 1 |\n+--------+----------+\n3 rows in set (0.00 sec)\n \nYou can use any grouping function\nin the select expression. For each win average as above, get\na list of the average play\ncount taken to get that average:\n \nSELECT (wins / plays) AS winavg, AVG(plays) FROM plays \n GROUP BY winavg;\n \n+--------+------------+\n| winavg | AVG(plays) |\n+--------+------------+\n| 0.1765 | 17.0000 |\n| 0.2500 | 26.0000 |\n| 0.3636 | 22.0000 |\n+--------+------------+\n3 rows in set (0.00 sec)\n \nYou can filter on aggregate information using the HAVING\nclause. The HAVING\nclause is applied after GROUP BY and allows you to filter on\naggregate data that is\nnot available to the WHERE clause. Restrict the above\nexample to results that involve\nan average number of plays over 20:\n \nSELECT (wins / plays) AS winavg, AVG(plays) FROM plays \n GROUP BY winavg HAVING AVG(plays) > 20;\n \n+--------+------------+\n| winavg | AVG(plays) |\n+--------+------------+\n| 0.2500 | 26.0000 |\n| 0.3636 | 22.0000 |\n+--------+------------+\n2 rows in set (0.00 sec)\n \nSee Also\n \nSELECT\nJoins and Subqueries\nLIMIT\nORDER BY\nCommon Table Expressions\nSELECT WITH ROLLUP\nSELECT INTO OUTFILE\nSELECT INTO DUMPFILE\nFOR UPDATE\nLOCK IN SHARE MODE\nOptimizer Hints\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/group-by/', '', 'https://mariadb.com/kb/en/group-by/'),
(418, 'IGNORE', 27, 'The IGNORE option tells the server to ignore some common\nerrors.\n \nIGNORE can be used with the following statements:\nDELETE\nINSERT (see also INSERT IGNORE)\nLOAD DATA INFILE\nUPDATE\nALTER TABLE\nCREATE TABLE ... SELECT\nINSERT ... SELECT\n \nThe logic used:\nVariables out of ranges are replaced with the\nmaximum/minimum value.\n \nSQL_MODEs STRICT_TRANS_TABLES, STRICT_ALL_TABLES,\nNO_ZERO_IN_DATE, NO_ZERO_DATE are ignored.\n \nInserting NULL in a NOT NULL field will insert 0 ( in a\nnumerical\n field), 0000-00-00 ( in a date field) or an empty string (\nin a character\n field).\n \nRows that cause a duplicate key error or break a foreign key\nconstraint are\n not inserted, updated, or deleted.\n \nThe following errors are ignored:\n \nError number | Symbolic error name | Description | \n \n1022 | ER_DUP_KEY | Can\'t write; duplicate key in table\n\'%s\' | \n \n1048 | ER_BAD_NULL_ERROR | Column \'%s\' cannot be null | \n \n1062 | ER_DUP_ENTRY | Duplicate entry \'%s\' for key %d | \n \n1242 | ER_SUBQUERY_NO_1_ROW | Subquery returns more than 1\nrow | \n \n1264 | ER_WARN_DATA_OUT_OF_RANGE | Out of range value for\ncolumn \'%s\' at row %ld | \n \n1265 | WARN_DATA_TRUNCATED | Data truncated for column\n\'%s\' at row %ld | \n \n1292 | ER_TRUNCATED_WRONG_VALUE | Truncated incorrect %s\nvalue: \'%s\' | \n \n1366 | ER_TRUNCATED_WRONG_VALUE_FOR_FIELD | Incorrect\ninteger value | \n \n1369 | ER_VIEW_CHECK_FAILED | CHECK OPTION failed \'%s.%s\'\n| \n \n1451 | ER_ROW_IS_REFERENCED_2 | Cannot delete or update a\nparent row | \n \n1452 | ER_NO_REFERENCED_ROW_2 | Cannot add or update a child\nrow: a foreign key constraint fails (%s) | \n \n1526 | ER_NO_PARTITION_FOR_GIVEN_VALUE | Table has no\npartition for value %s | \n \n1586 | ER_DUP_ENTRY_WITH_KEY_NAME | Duplicate entry \'%s\'\nfor key \'%s\' | \n \n1591 | ER_NO_PARTITION_FOR_GIVEN_VALUE_SILENT | Table has no\npartition for some existing values | \n \n1748 | ER_ROW_DOES_NOT_MATCH_GIVEN_PARTITION_SET | Found a\nrow not matching the given partition set | \n \nIgnored errors normally generate a warning.\n \nA property of the IGNORE clause consists in causing\ntransactional engines and non-transactional engines (like\nXtraDB and Aria) to behave the same way. For example,\nnormally a multi-row insert which tries to violate a UNIQUE\ncontraint is completely rolled back on XtraDB/InnoDB, but\nmight be partially executed on Aria. With the IGNORE clause,\nthe statement will be partially executed in both engines.\n \nStarting from MariaDB 5.5.28 duplicate key errors also\ngenerate warnings. The OLD_MODE server variable can be used\nto prevent this.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/ignore/', '', 'https://mariadb.com/kb/en/ignore/'),
(419, 'INSERT', 27, 'Syntax\n------ \nINSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]\n [INTO] tbl_name [PARTITION (partition_list)] [(col,...)]\n {VALUES | VALUE} ({expr | DEFAULT},...),(...),...\n [ ON DUPLICATE KEY UPDATE\n col=expr\n [, col=expr] ... ]\n \nOr:\n \nINSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]\n [INTO] tbl_name [PARTITION (partition_list)]\n SET col={expr | DEFAULT}, ...\n [ ON DUPLICATE KEY UPDATE\n col=expr\n [, col=expr] ... ]\n \nOr:\n \nINSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]\n [INTO] tbl_name [PARTITION (partition_list)] [(col,...)]\n SELECT ...\n [ ON DUPLICATE KEY UPDATE\n col=expr\n [, col=expr] ... ]\n \nThe INSERT statement is used to insert new rows into an\nexisting table. The INSERT ... VALUES\nand INSERT ... SET forms of the statement insert rows based\non explicitly specified values. The INSERT ... SELECT form\ninserts rows selected from another table or tables. INSERT\n... SELECT is discussed further in the INSERT ... SELECT\narticle.\n \nThe table name can be specified in the form db_name.tbl_name\nor, if a default database is selected, in the form tbl_name\n(see Identifier Qualifiers). This allows to use INSERT ...\nSELECT to copy rows between different databases.\n \nThe PARTITION clause was introduced in MariaDB 10.0. It can\nbe used in both the INSERT and the SELECT part. See\nPartition Pruning and Selection for details.\n \nThe columns list is optional. It specifies which values are\nexplicitly inserted, and in which order. If this clause is\nnot specified, all values must be explicitly specified, in\nthe same order they are listed in the table definition.\n \nThe list of value follow the VALUES or VALUE keyword (which\nare interchangeable, regardless how much values you want to\ninsert), and is wrapped by parenthesis. The values must be\nlisted in the same order as the columns list. It is possible\nto specify more than one list to insert more than one rows\nwith a single statement. If many rows are inserted, this is\na speed optimization.\n \nFor one-row statements, the SET clause may be more simple,\nbecause you don\'t need to remember the columns order. All\nvalues are specified in the form col = expr.\n \nValues can also be specified in the form of a SQL expression\nor subquery. However, the subquery cannot access the same\ntable that is named in the INTO clause.\n \nIf you use the LOW_PRIORITY keyword, execution of the INSERT\nis delayed until no other clients are reading from the\ntable. If you use the HIGH_PRIORITY keyword, the statement\nhas the same priority as SELECTs. This affects only storage\nengines that use only table-level locking (MyISAM, MEMORY,\nMERGE). However, if one of these keywords is specified,\nconcurrent inserts cannot be used. See HIGH_PRIORITY and\nLOW_PRIORITY clauses for details.\n \nINSERT DELAYED\n \nFor more details on the DELAYED option, see INSERT DELAYED.\n \nHIGH PRIORITY and LOW PRIORITY\n \nSee HIGH_PRIORITY and LOW_PRIORITY.\n \nDefaults and Duplicate Values\n \nSee INSERT - Default & Duplicate Values for details..\n \nINSERT IGNORE\n \nSee INSERT IGNORE.\n \nINSERT ON DUPLICATE KEY UPDATE\n \nSee INSERT ON DUPLICATE KEY UPDATE.\n \nExamples\n-------- \nSpecifying the column names:\n \nINSERT INTO person (first_name, last_name) VALUES (\'John\',\n\'Doe\');\n \nInserting more than 1 row at a time:\n \nINSERT INTO tbl_name VALUES (1, \"row 1\"), (2, \"row 2\");\n \nUsing the SET clause:\n \nINSERT INTO person SET first_name = \'John\', last_name =\n\'Doe\';\n \nSELECTing from another table:\n \nINSERT INTO contractor SELECT * FROM person WHERE status =\n\'c\';\n \nSee INSERT ON DUPLICATE KEY UPDATE and INSERT IGNORE for\nfurther examples.\n \n\n\nURL: https://mariadb.com/kb/en/insert/', '', 'https://mariadb.com/kb/en/insert/'),
(420, 'INSERT - Default &amp; Duplicate Values', 27, 'Default Values\n \nIf the SQL_MODE contains STRICT_TRANS_TABLES and you are\ninserting into a transactional table (like InnoDB), or if\nthe SQL_MODE contains STRICT_ALL_TABLES, all NOT NULL\ncolumns which does not have a DEFAULT value (and is not\nAUTO_INCREMENT) must be explicitly referenced in INSERT\nstatements. If not, an error like this is produced:\n \nERROR 1364 (HY000): Field \'col\' doesn\'t have a default\nvalue\n \nIn all other cases, if a NOT NULL column without a DEFAULT\nvalue is not referenced, an empty value will be inserted\n(for example, 0 for INTEGER columns and \'\' for CHAR\ncolumns). See NULL Values in MariaDB:Inserting for examples.\n \nIf a NOT NULL column having a DEFAULT value is not\nreferenced, NULL will be inserted.\n \nIf a NULL column having a DEFAULT value is not referenced,\nits default value will be inserted. It is also possible to\nexplicitly assign the default value using the DEFAULT\nkeyword or the DEFAULT() function.\n \nIf the DEFAULT keyword is used but the column does not have\na DEFAULT value, an error like this is produced:\n \nERROR 1364 (HY000): Field \'col\' doesn\'t have a default\nvalue\n \nDuplicate Values\n \nBy default, if you try to insert a duplicate row and there\nis a UNIQUE index, INSERT stops and an error like this is\nproduced:\n \nERROR 1062 (23000): Duplicate entry \'dup_value\' for key\n\'col\'\n \nTo handle duplicates you can use the IGNORE clause, INSERT\nON DUPLICATE KEY UPDATE or the REPLACE statement. Note that\nthe IGNORE and DELAYED options are ignored when you use ON\nDUPLICATE KEY UPDATE.\n \n\n\nURL:\nhttps://mariadb.com/kb/en/insert-default-duplicate-values/', '', 'https://mariadb.com/kb/en/insert-default-duplicate-values/'),
(421, 'INSERT DELAYED', 27, 'Syntax\n------ \nINSERT DELAYED ...\n \nDescription\n----------- \nThe DELAYED option for the INSERT\nstatement is a MariaDB/MySQL extension to standard SQL that\nis very useful if you have\nclients that cannot or need not wait for the INSERT to\ncomplete. This is a common situation when you use MariaDB\nfor logging and you\nalso periodically run SELECT and UPDATE\nstatements that take a long time to complete.\n \nWhen a client uses INSERT DELAYED, it gets an okay from the\nserver at once, and the row is queued to be inserted when\nthe table is not in\nuse by any other thread.\n \nAnother major benefit of using INSERT DELAYED is that\ninserts from many clients are bundled together and written\nin one block. This\nis much faster than performing many separate inserts.\n \nNote that INSERT DELAYED is slower than a normal\n INSERT if the table is not otherwise in use. There is also\nthe additional overhead for the server to handle a separate\nthread for each\ntable for which there are delayed rows. This means that you\nshould use\nINSERT DELAYED only when you are really sure that you need\nit.\n \nThe queued rows are held only in memory until they are\ninserted into the table.\nThis means that if you terminate mysqld forcibly (for\nexample, with kill -9) or\nif mysqld dies unexpectedly, any queued rows that have not\nbeen written to disk\nare lost.\n \nThe number of concurrent INSERT DELAYED threads is limited\nby the max_delayed_threads server system variables. If it is\nset to 0, INSERT DELAYED is disabled. The session value can\nbe equal to the global value, or 0 to disable this statement\nfor the current session. If this limit has been reached, the\nDELAYED clause will be silently ignore for subsequent\nstatements (no error will be produced).\n \nThere are some constraints on the use of DELAYED:\nINSERT DELAYED works only with MyISAM, MEMORY, ARCHIVE,\n and BLACKHOLE tables. If you execute INSERT DELAYED with\nanother storage engine, you will get an error like this:\nERROR 1616 (HY000): DELAYED option not supported for table\n\'tab_name\'\nFor MyISAM tables, if there are no free blocks in the middle\nof the data\n file, concurrent SELECT and INSERT statements are\nsupported. Under these\n circumstances, you very seldom need to use INSERT DELAYED\n with MyISAM.\nINSERT DELAYED should be used only for\n INSERT statements that specify value lists. The server\n ignores DELAYED for INSERT ... SELECT\n or INSERT ... ON DUPLICATE KEY UPDATE statements.\nBecause the INSERT DELAYED statement returns immediately,\n before the rows are inserted, you cannot use\n LAST_INSERT_ID() to get the\n AUTO_INCREMENT value that the statement might generate.\nDELAYED rows are not visible to SELECT\n statements until they actually have been inserted.\nAfter INSERT DELAYED, ROW_COUNT() returns the number of the\nrows you tried to insert, not the number of the successful\nwrites.\nDELAYED is ignored on slave replication servers, so that \n INSERT DELAYED is treated as a normal\n INSERT on slaves. This is because\n DELAYED could cause the slave to have different data than\n the master. INSERT DELAYED statements are not safe for\nreplication.\nPending INSERT DELAYED statements are lost if a table is\n write locked and ALTER TABLE is used to modify the table\nstructure.\nINSERT DELAYED is not supported for views. If you try, you\nwill get an error like this: ERROR 1347 (HY000):\n\'view_name\' is not BASE TABLE\nINSERT DELAYED is not supported for partitioned tables.\nINSERT DELAYED is not supported within stored programs.\n \n\n\nURL: https://mariadb.com/kb/en/insert-delayed/', '', 'https://mariadb.com/kb/en/insert-delayed/'),
(422, 'INSERT IGNORE', 27, 'Ignoring Errors\n \nNormally INSERT stops and rolls back when it encounters an\nerror.\n \nBy using the IGNORE keyword all errors are converted to\nwarnings, which will not stop inserts of additional rows.\n \nThe IGNORE and DELAYED options are ignored when you use ON\nDUPLICATE KEY UPDATE.\n \nIncompatibilities\n \nMariaDB until 5.5.28\nMySQL and MariaDB before 5.5.28 didn\'t give warnings for\nduplicate key errors when using IGNORE.\nYou can get the old behaviour if you set OLD_MODE to\nNO_DUP_KEY_WARNINGS_WITH_IGNORE\n \nExamples\n-------- \nCREATE TABLE t1 (x INT UNIQUE);\n \nINSERT INTO t1 VALUES(1),(2);\n \nINSERT INTO t1 VALUES(2),(3);\nERROR 1062 (23000): Duplicate entry \'2\' for key \'x\'\nSELECT * FROM t1;\n \n+------+\n| x |\n+------+\n| 1 |\n| 2 |\n+------+\n2 rows in set (0.00 sec)\n \nINSERT IGNORE INTO t1 VALUES(2),(3);\nQuery OK, 1 row affected, 1 warning (0.04 sec)\n \nSHOW WARNINGS;\n \n+---------+------+---------------------------------+\n| Level | Code | Message |\n+---------+------+---------------------------------+\n| Warning | 1062 | Duplicate entry \'2\' for key \'x\' |\n+---------+------+---------------------------------+\n \nSELECT * FROM t1;\n \n+------+\n| x |\n+------+\n| 1 |\n| 2 |\n| 3 |\n+------+\n \nSee INSERT ON DUPLICATE KEY UPDATE for further examples\nusing that syntax.\n \n\n\nURL: https://mariadb.com/kb/en/insert-ignore/', '', 'https://mariadb.com/kb/en/insert-ignore/'),
(423, 'INSERT ON DUPLICATE KEY UPDATE', 27, 'Syntax\n------ \nINSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]\n [INTO] tbl_name [PARTITION (partition_list)] [(col,...)]\n {VALUES | VALUE} ({expr | DEFAULT},...),(...),...\n [ ON DUPLICATE KEY UPDATE\n col=expr\n [, col=expr] ... ]\n \nOr:\n \nINSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]\n [INTO] tbl_name [PARTITION (partition_list)]\n SET col={expr | DEFAULT}, ...\n [ ON DUPLICATE KEY UPDATE\n col=expr\n [, col=expr] ... ]\n \nOr:\n \nINSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]\n [INTO] tbl_name [PARTITION (partition_list)] [(col,...)]\n SELECT ...\n [ ON DUPLICATE KEY UPDATE\n col=expr\n [, col=expr] ... ]\n \nDescription\n----------- \nINSERT ... ON DUPLICATE KEY UPDATE is a MariaDB/MySQL\nextension to the INSERT statement that, if it finds a\nduplicate unique or primary key, will instead perform an\nUPDATE.\n \nThe row/s affected value is reported as 1 if a row is\ninserted, and 2 if a row is updated, unless the API\'s\nCLIENT_FOUND_ROWS flag is set.\n \nIf more than one unique index is matched, only the first is\nupdated. It is not recommended to use this statement on\ntables with more than one unique index.\n \nIf the table has an AUTO_INCREMENT primary key and the\nstatement inserts or updates a row, the LAST_INSERT_ID()\nfunction returns its AUTO_INCREMENT value.\n \nThe VALUES() function can only be used in a ON DUPLICATE KEY\nUPDATE clause and has no meaning in any other context. It\nreturns the column values from the INSERT portion of the\nstatement. This function is particularly useful for\nmulti-rows inserts.\n \nThe IGNORE and DELAYED options are ignored when you use ON\nDUPLICATE KEY UPDATE.\n \nThe PARTITION clause was introduced in MariaDB 10.0. See\nPartition Pruning and Selection for details.\n \nThis statement activates INSERT and UPDATE triggers. See\nTrigger Overview for details.\n \nSee also a similar statement, REPLACE.\n \nExamples\n-------- \nCREATE TABLE ins_duplicate (id INT PRIMARY KEY, animal\nVARCHAR(30));\nINSERT INTO ins_duplicate VALUES (1,\'Aardvark\'),\n(2,\'Cheetah\'), (3,\'Zebra\');\n \nIf there is no existing key, the statement runs as a regular\nINSERT:\n \nINSERT INTO ins_duplicate VALUES (4,\'Gorilla\') ON\nDUPLICATE KEY UPDATE animal=\'Gorilla\';\nQuery OK, 1 row affected (0.07 sec)\n \nSELECT * FROM ins_duplicate;\n+----+----------+\n| id | animal |\n+----+----------+\n| 1 | Aardvark |\n| 2 | Cheetah |\n| 3 | Zebra |\n| 4 | Gorilla |\n+----+----------+\n \nA regular INSERT with a primary key value of 1 will fail,\ndue to the existing key:\n \nINSERT INTO ins_duplicate VALUES (1,\'Antelope\');\nERROR 1062 (23000): Duplicate entry \'1\' for key\n\'PRIMARY\'\n \nHowever, we can use an INSERT ON DUPLICATE KEY UPDATE\ninstead:\n \nINSERT INTO ins_duplicate VALUES (1,\'Antelope\') ON\nDUPLICATE KEY UPDATE animal=\'Antelope\';\nQuery OK, 2 rows affected (0.09 sec)\n \nNote that there are two rows reported as affected, but this\nrefers only to the UPDATE.\n \nSELECT * FROM ins_duplicate;\n+----+----------+\n| id | animal |\n+----+----------+\n| 1 | Antelope |\n| 2 | Cheetah |\n| 3 | Zebra |\n| 4 | Gorilla |\n+----+----------+\n \nAdding a second unique column:\n \nALTER TABLE ins_duplicate ADD id2 INT;\nUPDATE ins_duplicate SET id2=id+10;\nALTER TABLE ins_duplicate ADD UNIQUE KEY(id2);\n \nWhere two rows match the unique keys match, only the first\nis updated. This can be unsafe and is not recommended unless\nyou are certain what you are doing. Note that the warning\nshown below appears in MariaDB 5.5 and before, but has been\nremoved in MariaDB 10.0, as MariaDB now assumes that the\nkeys are checked in order, as shown in SHOW CREATE TABLE.\n \nINSERT INTO ins_duplicate VALUES (2,\'Lion\',13) ON\nDUPLICATE KEY UPDATE animal=\'Lion\';\nQuery OK, 2 rows affected, 1 warning (0.06 sec)\n \nSHOW WARNINGS;\n+-------+------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Level | Code | Message |\n+-------+------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Note | 1592 | Unsafe statement written to the binary log\nusing statement format since BINLOG_FORMAT = STATEMENT.\nINSERT... ON DUPLICATE KEY UPDATE on a table with more than\none UNIQUE KEY is unsafe |\n+-------+------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n \nSELECT * FROM ins_duplicate;\n+----+----------+------+\n| id | animal | id2 |\n+----+----------+------+\n| 1 | Antelope | 11 |\n| 2 | Lion | 12 |\n| 3 | Zebra | 13 |\n| 4 | Gorilla | 14 |\n+----+----------+------+\n \nAlthough the third row with an id of 3 has an id2 of 13,\nwhich also matched, it was not updated.\n \nChanging id to an auto_increment field. If a new row is\nadded, the auto_increment is moved forward. If the row is\nupdated, it remains the same.\n \nALTER TABLE `ins_duplicate` CHANGE `id` `id` INT( 11 ) NOT\nNULL AUTO_INCREMENT;\nALTER TABLE ins_duplicate DROP id2;\nSELECT Auto_increment FROM INFORMATION_SCHEMA.TABLES WHERE\nTABLE_NAME=\'ins_duplicate\';\n+----------------+\n| Auto_increment |\n+----------------+\n| 5 |\n+----------------+\n \nINSERT INTO ins_duplicate VALUES (2,\'Leopard\') ON\nDUPLICATE KEY UPDATE animal=\'Leopard\';\nQuery OK, 2 rows affected (0.00 sec)\n \nSELECT Auto_increment FROM INFORMATION_SCHEMA.TABLES WHERE\nTABLE_NAME=\'ins_duplicate\';\n+----------------+\n| Auto_increment |\n+----------------+\n| 5 |\n+----------------+\n \nINSERT INTO ins_duplicate VALUES (5,\'Wild Dog\') ON\nDUPLICATE KEY UPDATE animal=\'Wild Dog\';\nQuery OK, 1 row affected (0.09 sec)\n \nSELECT * FROM ins_duplicate;\n+----+----------+\n| id | animal |\n+----+----------+\n| 1 | Antelope |\n| 2 | Leopard |\n| 3 | Zebra |\n| 4 | Gorilla |\n| 5 | Wild Dog |\n+----+----------+\n \nSELECT Auto_increment FROM INFORMATION_SCHEMA.TABLES WHERE\nTABLE_NAME=\'ins_duplicate\';\n+----------------+\n| Auto_increment |\n+----------------+\n| 6 |\n+----------------+\n \nRefering to column values from the INSERT portion of the\nstatement: \n \nINSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6)\n ON DUPLICATE KEY UPDATE c=VALUES(a)+VALUES(b);\n \nSee the VALUES() function for more.\n \n\n\nURL:\nhttps://mariadb.com/kb/en/insert-on-duplicate-key-update/', '', 'https://mariadb.com/kb/en/insert-on-duplicate-key-update/'),
(424, 'INSERT SELECT', 27, 'Syntax\n------ \nINSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]\n [INTO] tbl_name [(col_name,...)]\n SELECT ...\n [ ON DUPLICATE KEY UPDATE col_name=expr, ... ]\n \nDescription\n----------- \nWith INSERT ... SELECT, you can quickly insert many rows\ninto a table from one or more other tables. For example:\n \nINSERT INTO tbl_temp2 (fld_id)\n SELECT tbl_temp1.fld_order_id\n FROM tbl_temp1 WHERE tbl_temp1.fld_order_id > 100;\n \ntbl_name can also be specified in the form db_name.tbl_name\n(see Identifier Qualifiers). This allows to copy rows\nbetween different databases.\n \nIf the new table has a primary key or UNIQUE indexes, you\ncan use IGNORE to handle duplicate key errors during the\nquery. The newer values will not be inserted if an identical\nvalue already exists.\n \nREPLACE can be used instead of INSERT to prevent duplicates\non UNIQUE indexes by deleting old values. In that case, ON\nDUPLICATE KEY UPDATE cannot be used.\n \nINSERT ... SELECT works for tables which already exist. To\ncreate a table for a given resultset, you can use CREATE\nTABLE ... SELECT.\n \n\n\nURL: https://mariadb.com/kb/en/insert-select/', '', 'https://mariadb.com/kb/en/insert-select/'),
(425, 'INTERSECT', 27, 'INTERSECT was introduced in MariaDB 10.3.0.\n \nThe result of an intersect is the intersection of right and\nleft SELECT results, i.e. only records that are present in\nboth result sets will be included in the result of the\noperation.\n \nSyntax\n------ \nSELECT ...\n(INTERSECT | EXCEPT | UNION [ALL | DISTINCT]) SELECT ...\n[(INTERSECT | EXCEPT | UNION [ALL | DISTINCT]) SELECT ...]\n[ORDER BY [column [, column ...]]]\n[LIMIT {[offset,] row_count | row_count OFFSET offset}]\n \nPlease note:\nALL is not supported by INTERSECT (and it is difficult to\nmake sense of ALL with INTERSECT).\nBrackets for explicit operation precedence are not\nsupported; use a subquery in the FROM clause as a\nworkaround).\n \nDescription\n----------- \nMariaDB has supported INTERSECT (as well as EXCEPT) in\naddition to UNION since MariaDB 10.3.\n \nAll behavior for naming columns, ORDER BY and LIMIT is the\nsame as for UNION.\n \nINTERSECT implicitly supposes a DISTINCT operation.\n \nThe result of an intersect is the intersection of right and\nleft SELECT results, i.e. only records that are present in\nboth result sets will be included in the result of the\noperation.\n \nINTERSECT has higher precedence than UNION and EXCEPT. If\npossible it will be executed linearly but if not it will be\ntranslated to a subquery in the FROM clause:\n \n(select a,b from t1)\nunion\n(select c,d from t2)\nintersect\n(select e,f from t3)\nunion\n(select 4,4);\n \nwill be translated to:\n \n(select a,b from t1)\nunion\nselect c,d from\n ((select c,d from t2)\n intersect\n (select e,f from t3)) dummy_subselect\nunion\n(select 4,4)\n \n\n \nParentheses\n \nFrom MariaDB 10.4.0, parentheses can be used to specify\nprecedence. Before this, a syntax error would be returned.\n \nExamples\n-------- \nShow customers which are employees:\n \n(SELECT e_name AS name, email FROM employees)\nINTERSECT\n(SELECT c_name AS name, email FROM customers);\n \nDifference between UNION, EXCEPT and INTERSECT:\n \nCREATE TABLE seqs (i INT);\nINSERT INTO seqs VALUES (1),(2),(3),(4),(5),(6);\n \nSELECT i FROM seqs WHERE i =3;\n \n+------+\n| i |\n+------+\n| 1 |\n| 2 |\n| 3 |\n| 4 |\n| 5 |\n| 6 |\n+------+\n \nSELECT i FROM seqs WHERE i =3;\n \n+------+\n| i |\n+------+\n| 1 |\n| 2 |\n+------+\n \nSELECT i FROM seqs WHERE i =3;\n \n+------+\n| i |\n+------+\n| 3 |\n+------+\n \nParentheses for specifying precedence, from MariaDB 10.4.0\n \nCREATE OR REPLACE TABLE t1 (a INT);\nCREATE OR REPLACE TABLE t2 (b INT);\nCREATE OR REPLACE TABLE t3 (c INT);\n \nINSERT INTO t1 VALUES (1),(2),(3),(4);\nINSERT INTO t2 VALUES (5),(6);\nINSERT INTO t3 VALUES (1),(6);\n \n((SELECT a FROM t1) UNION (SELECT b FROM t2)) INTERSECT\n(SELECT c FROM t3);\n+------+\n| a |\n+------+\n| 1 |\n| 6 |\n+------+\n \n(SELECT a FROM t1) UNION ((SELECT b FROM t2) INTERSECT\n(SELECT c FROM t3));\n+------+\n| a |\n+------+\n| 1 |\n| 2 |\n| 3 |\n| 4 |\n| 6 |\n+------+\n \n\n\nURL: https://mariadb.com/kb/en/intersect/', '', 'https://mariadb.com/kb/en/intersect/'),
(426, 'JOIN Syntax', 27, 'Description\n----------- \nMariaDB supports the following JOIN syntaxes for\nthe table_references part of SELECT statements and\nmultiple-table DELETE and UPDATE statements:\n \ntable_references:\n table_reference [, table_reference] ...\n \ntable_reference:\n table_factor\n | join_table\n \ntable_factor:\n tbl_name [PARTITION (partition_list)]\n [query_system_time_period_specification] [[AS] alias]\n[index_hint_list]\n | table_subquery [query_system_time_period_specification]\n[AS] alias\n | ( table_references )\n | { ON table_reference LEFT OUTER JOIN table_reference\n ON conditional_expr }\n \njoin_table:\n table_reference [INNER | CROSS] JOIN table_factor\n[join_condition]\n | table_reference STRAIGHT_JOIN table_factor\n | table_reference STRAIGHT_JOIN table_factor ON\nconditional_expr\n | table_reference {LEFT|RIGHT} [OUTER] JOIN table_reference\njoin_condition\n | table_reference NATURAL [{LEFT|RIGHT} [OUTER]] JOIN\ntable_factor\n \njoin_condition:\n ON conditional_expr\n | USING (column_list)\n \nquery_system_time_period_specification:\n FOR SYSTEM_TIME AS OF point_in_time\n | FOR SYSTEM_TIME BETWEEN point_in_time AND point_in_time\n | FOR SYSTEM_TIME FROM point_in_time TO point_in_time\n | FOR SYSTEM_TIME ALL\n \npoint_in_time:\n [TIMESTAMP] expression\n | TRANSACTION expression\n \nindex_hint_list:\n index_hint [, index_hint] ...\n \nindex_hint:\n USE {INDEX|KEY}\n [{FOR {JOIN|ORDER BY|GROUP BY}] ([index_list])\n | IGNORE {INDEX|KEY}\n [{FOR {JOIN|ORDER BY|GROUP BY}] (index_list)\n | FORCE {INDEX|KEY}\n [{FOR {JOIN|ORDER BY|GROUP BY}] (index_list)\n \nindex_list:\n index_name [, index_name] ...\n \nA table reference is also known as a join expression.\n \nEach table can also be specified as db_name.tabl_name. This\nallows to write queries which involve multiple databases.\nSee Identifier Qualifiers for syntax details.\n \nThe syntax of table_factor is extended in comparison with\nthe\nSQL Standard. The latter accepts only table_reference, not a\nlist of them inside a pair of parentheses.\n \nThis is a conservative extension if we consider each comma\nin a list of\ntable_reference items as equivalent to an inner join. For\nexample:\n \nSELECT * FROM t1 LEFT JOIN (t2, t3, t4)\n ON (t2.a=t1.a AND t3.b=t1.b AND t4.c=t1.c)\n \nis equivalent to:\n \nSELECT * FROM t1 LEFT JOIN (t2 CROSS JOIN t3 CROSS JOIN t4)\n ON (t2.a=t1.a AND t3.b=t1.b AND t4.c=t1.c)\n \nIn MariaDB, CROSS JOIN is a syntactic equivalent to\nINNER JOIN (they can replace each other). In standard SQL,\nthey are not equivalent. INNER JOIN is used with an\nON clause, CROSS JOIN is used otherwise.\n \nIn general, parentheses can be ignored in join expressions\ncontaining only\ninner join operations. MariaDB also supports nested joins\n(see\nhttp://dev.mysql.com/doc/refman/5.1/en/nested-join-optimization.html).\n \nSee System-versioned tables for more information\nabout FOR SYSTEM_TIME syntax.\n \nIndex hints can be specified to affect how the MariaDB\noptimizer makes\nuse of indexes. For more information, see How to force query\nplans.\n \nExamples\n-------- \nSELECT left_tbl.*\n FROM left_tbl LEFT JOIN right_tbl ON left_tbl.id =\nright_tbl.id\n WHERE right_tbl.id IS NULL;\n \n\n \n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/join-syntax/', '', 'https://mariadb.com/kb/en/join-syntax/'),
(427, 'LIMIT', 27, 'Description\n----------- \nUse the LIMIT clause to restrict the number of returned\nrows. When you use a single\ninteger n with LIMIT, the first n rows will be returned. Use\nthe ORDER BY\nclause to control which rows come first. You can also select\na number of rows after an offset\nusing either of the following:\n \nLIMIT offset, row_count\nLIMIT row_count OFFSET offset\n \nWhen you provide an offset m with a limit n, the first m\nrows will be ignored, and the\nfollowing n rows will be returned.\n \nExecuting an UPDATE with the LIMIT clause is not safe for\nreplication.\n \nSince MariaDB 10.0.11, LIMIT 0 has been an exception to this\nrule (see MDEV-6170).\n \nBeginning in MariaDB 5.5.21, there is a LIMIT ROWS EXAMINED\noptimization which provides the\nmeans to terminate the execution of SELECT statements which\nexamine too\nmany rows, and thus use too many resources. See LIMIT ROWS\nEXAMINED.\n \nMulti-Table Updates\n \nUntil MariaDB 10.3.1, it was not possible to use LIMIT (or\nORDER BY) in a multi-table UPDATE statement. This\nrestriction was lifted in MariaDB 10.3.2.\n \nGROUP_CONCAT\n \nStarting from MariaDB 10.3.3, it is possible to use LIMIT\nwith GROUP_CONCAT().\n \nExamples\n-------- \nCREATE TABLE members (name VARCHAR(20));\nINSERT INTO members\nVALUES(\'Jagdish\'),(\'Kenny\'),(\'Rokurou\'),(\'Immaculada\');\n \nSELECT * FROM members;\n \n+------------+\n| name |\n+------------+\n| Jagdish |\n| Kenny |\n| Rokurou |\n| Immaculada |\n+------------+\n \nSelect the first two names (no ordering specified):\n \nSELECT * FROM members LIMIT 2;\n \n+---------+\n| name |\n+---------+\n| Jagdish |\n| Kenny |\n+---------+\n \nAll the names in alphabetical order:\n \nSELECT * FROM members ORDER BY name;\n \n+------------+\n| name |\n+------------+\n| Immaculada |\n| Jagdish |\n| Kenny |\n| Rokurou |\n+------------+\n \nThe first two names, ordered alphabetically:\n \nSELECT * FROM members ORDER BY name LIMIT 2;\n \n+------------+\n| name |\n+------------+\n| Immaculada |\n| Jagdish |\n+------------+\n \nThe third name, ordered alphabetically (the first name would\nbe offset zero, so the third is offset two):\n \nSELECT * FROM members ORDER BY name LIMIT 2,1;\n \n+-------+\n| name |\n+-------+\n| Kenny |\n+-------+\n \nFrom MariaDB 10.3.2, LIMIT can be used in a multi-table\nupdate:\n \nCREATE TABLE warehouse (product_id INT, qty INT);\nINSERT INTO warehouse VALUES\n(1,100),(2,100),(3,100),(4,100);\n \nCREATE TABLE store (product_id INT, qty INT);\nINSERT INTO store VALUES (1,5),(2,5),(3,5),(4,5);\n \nUPDATE warehouse,store SET warehouse.qty = warehouse.qty-2,\nstore.qty = store.qty+2 \n WHERE (warehouse.product_id = store.product_id AND\nstore.product_id >= 1) \n ORDER BY store.product_id DESC LIMIT 2;\n \nSELECT * FROM warehouse;\n \n+------------+------+\n| product_id | qty |\n+------------+------+\n| 1 | 100 |\n| 2 | 100 |\n| 3 | 98 |\n| 4 | 98 |\n+------------+------+\n \nSELECT * FROM store;\n \n+------------+------+\n| product_id | qty |\n+------------+------+\n| 1 | 5 |\n| 2 | 5 |\n| 3 | 7 |\n| 4 | 7 |\n+------------+------+\n \nFrom MariaDB 10.3.3, LIMIT can be used with GROUP_CONCAT,\nso, for example, given the following table:\n \nCREATE TABLE d (dd DATE, cc INT);\n \nINSERT INTO d VALUES (\'2017-01-01\',1);\nINSERT INTO d VALUES (\'2017-01-02\',2);\nINSERT INTO d VALUES (\'2017-01-04\',3);\n \nthe following query:\n \nSELECT SUBSTRING_INDEX(GROUP_CONCAT(CONCAT_WS(\":\",dd,cc)\nORDER BY cc DESC),\",\",1) FROM d;\n \n+----------------------------------------------------------------------------+\n| SUBSTRING_INDEX(GROUP_CONCAT(CONCAT_WS(\":\",dd,cc) ORDER\nBY cc DESC),\",\",1) |\n+----------------------------------------------------------------------------+\n| 2017-01-04:3 |\n+----------------------------------------------------------------------------+\n \ncan be more simply rewritten as:\n \nSELECT GROUP_CONCAT(CONCAT_WS(\":\",dd,cc) ORDER BY cc DESC\nLIMIT 1) FROM d;\n \n+-------------------------------------------------------------+\n| GROUP_CONCAT(CONCAT_WS(\":\",dd,cc) ORDER BY cc DESC LIMIT\n1) |\n+-------------------------------------------------------------+\n| 2017-01-04:3 |\n+-------------------------------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/limit/', '', 'https://mariadb.com/kb/en/limit/'),
(429, 'LOAD XML', 27, 'Syntax\n------ \nLOAD XML [LOW_PRIORITY | CONCURRENT] [LOCAL] INFILE\n\'file_name\'\n [REPLACE | IGNORE]\n INTO TABLE [db_name.]tbl_name\n [CHARACTER SET charset_name]\n [ROWS IDENTIFIED BY \'\']\n [IGNORE number {LINES | ROWS}]\n [(column_or_user_var,...)]\n [SET col_name = expr,...]\n \nDescription\n----------- \nThe LOAD XML statement reads data from an XML file into a\ntable. The\nfile_name must be given as a literal string. The tagname in\nthe\noptional ROWS IDENTIFIED BY clause must also be given as a\nliteral\nstring, and must be surrounded by angle brackets (< and >).\n \nLOAD XML acts as the complement of running the mysql client\nin XML\noutput mode (that is, starting the client with the --xml\noption). To\nwrite data from a table to an XML file, use a command such\nas the\nfollowing one from the system shell:\n \nshell> mysql --xml -e \'SELECT * FROM mytable\' > file.xml\n \nTo read the file back into a table, use LOAD XML INFILE. By\ndefault,\nthe  element is considered to be the equivalent of a\ndatabase\ntable row; this can be changed using the ROWS IDENTIFIED BY\nclause.\n \nThis statement supports three different XML formats:\nColumn names as attributes and column values as attribute\nvalues:\n \nColumn names as tags and column values as the content of\nthese tags:\n \n value1\n value2\n \nColumn names are the name attributes of  tags, and values\nare\n the contents of these tags:\n \n value1\n value2\n \n This is the format used by other tools, such as mysqldump.\n \nAll 3 formats can be used in the same XML file; the import\nroutine\nautomatically detects the format for each row and interprets\nit\ncorrectly. Tags are matched based on the tag or attribute\nname and the\ncolumn name.\n \nThe following clauses work essentially the same way for LOAD\nXML as\nthey do for LOAD DATA:\nLOW_PRIORITY or CONCURRENT\nLOCAL\nREPLACE or IGNORE\nCHARACTER SET\n(column_or_user_var,...)\nSET\n \nSee LOAD DATA for more information about these clauses.\n \nThe IGNORE number LINES or IGNORE number ROWS clause causes\nthe first\nnumber rows in the XML file to be skipped. It is analogous\nto the LOAD\nDATA statement\'s IGNORE ... LINES clause.\n \nIf the LOW_PRIORITY keyword is used, insertions are delayed\nuntil no other clients are reading from the table. The\nCONCURRENT keyword allowes the use of concurrent inserts.\nThese clauses cannot be specified together.\n \nThis statement activates INSERT triggers.\n \n\n\nURL: https://mariadb.com/kb/en/load-xml/', '', 'https://mariadb.com/kb/en/load-xml/'),
(428, 'LOAD DATA INFILE', 27, 'Syntax\n------ \nLOAD DATA [LOW_PRIORITY | CONCURRENT] [LOCAL] INFILE\n\'file_name\'\n [REPLACE | IGNORE]\n INTO TABLE tbl_name\n [CHARACTER SET charset_name]\n [{FIELDS | COLUMNS}\n [TERMINATED BY \'string\']\n [[OPTIONALLY] ENCLOSED BY \'char\']\n [ESCAPED BY \'char\']\n ]\n [LINES\n [STARTING BY \'string\']\n [TERMINATED BY \'string\']\n ]\n [IGNORE number LINES]\n [(col_name_or_user_var,...)]\n [SET col_name = expr,...]\n \nDescription\n----------- \nReads rows from a text file into the designated table on the\ndatabase at a very high speed. The file name must be given\nas a literal string. \n \nFiles are written to disk using the SELECT INTO OUTFILE\nstatement. You can then read the files back into a table\nusing the LOAD DATA INFILE statement. The FIELDS and LINES\nclauses are the same in both statements. These clauses are\noptional, but if both are specified then the FIELDS clause\nmust precede LINES.\n \nIn releases after MariaDB 5.5, LOAD DATA INFILE is unsafe\nfor statement-based replication.\n \nExecuting this statement activates INSERT triggers.\n \nREPLACE and IGNORE\n \nIn cases where you load data from a file into a table that\nalready contains data and has a Primary Key, you may\nencounter issues where the statement attempts to insert a\nrow with a Primary Key that already exists. When this\nhappens, the statement fails with Error 1064, protecting the\ndata already on the table. In cases where you want MariaDB\nto overwrite duplicates, use the REPLACE keyword.\n \nThe REPLACE keyword works like the REPLACE statement. Here,\nthe statement attempts to load the data from the file. If\nthe row does not exist, it adds it to the table. If the row\ncontains an existing Primary Key, it replaces the table\ndata. That is, in the event of a conflict, it assumes the\nfile contains the desired row. \n \nThis operation can cause a degradation in load speed by a\nfactor of 20 or more if the part that has already been\nloaded is larger than the capacity of the InnoDB Buffer\nPool. This happens because it causes a lot of turnaround in\nthe Buffer Pool.\n \nUse the IGNORE keyword when you want to skip any rows that\ncontain a conflicting Primary Key. Here, the statement\nattempts to load the data from the file. If the row does not\nexist, it adds it to the table. If the row contains an\nexisting Primary Key, it ignores the addition request and\nmoves on to the next. That is, in the event of a conflict,\nit assumes the table contains the desired row.\n \nLOCAL\n \nWhen you issue this statement, the Server attempts to read\nfiles from the host file system. Using the LOCAL keyword,\nthe statement instead attempts to read files from the\nclient. This allows you to insert files from the client\'s\nlocal file system into the database.\n \nIn the event that you don\'t want the server to permit this\noperation, (such as for security reasons), you can disable\nsupport using local_infile. When this system variable is set\nto 0, MariaDB rejects LOAD DATA LOCAL INFILE statements,\nfailing with an error message.\n \nCharacter-sets\n \nWhen the statement opens the file, it attempts to read the\ncontents using the default character-set, as defined by the\ncharacter_set_database system variable. \n \nIn the cases where the file was written using a\ncharacter-set other than the default, you can specify the\ncharacter-set to use with the CHARACTER SET clause in the\nstatement. It ignores character-sets specified by the SET\nNAMES statement and by the character_set_client system\nvariable. Setting the CHARACTER SET clause to a value of\nbinary indicates \"no conversion.\"\n \nThe statement interprets all fields in the file as having\nthe same character-set, regardless of the column data type.\nTo properly interpret file contents, you must ensure that it\nwas written with the correct character-set. If you write a\ndata file with mysqldump -T or with the SELECT INTO OUTFILE\nstatement with the mysql client, be sure to use the\n--default-character-set option, so that the output is\nwritten with the desired character-set.\n \nWhen using mixed character sets, use the CHARACTER SET\nclause in both SELECT INTO OUTFILE and LOAD DATA INFILE to\nensure that MariaDB correctly interprets the escape\nsequences.\n \nThe character_set_filesystem system variable controls the\ninterpretation of the filename.\n \nIt is currently not possible to load data files that use the\nucs2 character set.\n \nPriority and Concurrency\n \nIn loading data from a file, there\'s a risk that the\nstatement will attempt insertions concurrent with reads from\nanother client, which can result in the read serving a\nresult-set that contains only part of the update from the\nLOAD DATA INFILE statement.\n \nUsing the LOW_PRIORITY keyword, MariaDB delays insertions\nuntil no other clients are reading from the table.\nAlternatively, you can use the CONCURRENT keyword to perform\nconcurrent insertion.\n \nThe LOW_PRIORITY and CONCURRENT keywords are mutually\nexclusive. They cannot be used in the same statement.\n \nProgress Reporting\n \nSince MariaDB 5.3, the LOAD DATA INFILE statement supports\nprogress reporting. You may find this useful when dealing\nwith long-running operations. Using another client you can\nissue a SHOW PROCESSLIST query to check the progress of the\ndata load.\n \nUsing mysqlimport\n \nMariaDB ships with a separate utility for loading data from\nfiles: mysqlimport. It operates by sending LOAD DATA INFILE\nstatements to the server.\n \nUsing mysqlimport you can compress the file using the\n--compress option, to get better performance over slow\nnetworks, providing both the client and server support the\ncompressed protocol. Use the --local option to load from the\nlocal file system.\n \nIndexing\n \nIn cases where the storage engine supports ALTER TABLE...\nDISABLE KEYS statements, the LOAD DATA INFILE statement\nautomatically disables indexes during the execution.\n \n\n\nURL: https://mariadb.com/kb/en/load-data-infile/', '', 'https://mariadb.com/kb/en/load-data-infile/'),
(431, 'Non-Recursive Common Table Expressions Overview', 27, 'Common Table Expressions (CTEs) are a standard SQL feature,\nand are essentially temporary named result sets. There are\ntwo kinds of CTEs: Non-Recursive, which this article covers;\nand Recursive.\n \nCommon table expressions were introduced in MariaDB 10.2.1.\n \nNon-Recursive CTEs\n \nThe WITH keyword signifies a CTE. It is given a name,\nfollowed by a body (the main query) as follows:\n \nCTEs are similar to derived tables. For example\n \nWITH engineers AS \n ( SELECT * FROM employees\n WHERE dept = \'Engineering\' )\n \nSELECT * FROM engineers\nWHERE ...\n \nSELECT * FROM\n ( SELECT * FROM employees\n WHERE dept = \'Engineering\' ) AS engineers\nWHERE\n...\n \nA non-recursive CTE is basically a query-local VIEW. There\nare several advantages and caveats to them. The syntax is\nmore readable than nested FROM (SELECT ...).\nA CTE can refer to another and it can be referenced from\nmultiple places.\n \nA CTE referencing Another CTE\n \nUsing this format makes for a more readable SQL than a\nnested FROM(SELECT ...) clause. Below is an example of this:\n \nWITH engineers AS (\nSELECT * FROM employees\nWHERE dept IN(\'Development\',\'Support\') ),\neu_engineers AS ( SELECT * FROM engineers WHERE country\nIN(\'NL\',...) )\nSELECT\n...\nFROM eu_engineers;\n \nMultiple Uses of a CTE\n \nThis can be an \'anti-self join\', for example:\n \nWITH engineers AS (\nSELECT * FROM employees\nWHERE dept IN(\'Development\',\'Support\') )\n \nSELECT * FROM engineers E1\nWHERE NOT EXISTS\n (SELECT 1 FROM engineers E2\n WHERE E2.country=E1.country\n AND E2.name  E1.name );\n \nOr, for year-over-year comparisons, for example:\n \nWITH sales_product_year AS (\nSELECT product, YEAR(ship_date) AS year,\nSUM(price) AS total_amt\nFROM item_sales\nGROUP BY product, year )\n \nSELECT *\nFROM sales_product_year CUR,\nsales_product_year PREV,\nWHERE CUR.product=PREV.product \nAND CUR.year=PREV.year + 1 \nAND CUR.total_amt > PREV.total_amt\n \nAnother use is to compare individuals against their group.\nBelow is an example of how this might be executed:\n \nWITH sales_product_year AS (\nSELECT product,\nYEAR(ship_date) AS year,\nSUM(price) AS total_amt\nFROM item_sales\nGROUP BY product, year\n)\n \nSELECT * \nFROM sales_product_year S1\nWHERE\ntotal_amt > \n (SELECT 0.1 * SUM(total_amt)\n FROM sales_product_year S2\n WHERE S2.year = S1.year)\n \n\n \n \n \n \n \n \n \n\nURL:\nhttps://mariadb.com/kb/en/non-recursive-common-table-expressions-overview/', '', 'https://mariadb.com/kb/en/non-recursive-common-table-expressions-overview/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(432, 'ORDER BY', 27, 'Description\n----------- \nUse the ORDER BY clause to order a resultset, such as that\nare returned from a SELECT\nstatement. You can specify just a column or use any\nexpression with functions. If you are\nusing the GROUP BY clause, you can use grouping functions in\nORDER BY.\nOrdering is done after grouping.\n \nYou can use multiple ordering expressions, separated by\ncommas. Rows will be sorted by\nthe first expression, then by the second expression if they\nhave the same value for the\nfirst, and so on.\n \nYou can use the keywords ASC and DESC after each ordering\nexpression to\nforce that ordering to be ascending or descending,\nrespectively. Ordering is ascending\nby default.\n \nYou can also use a single integer as the ordering\nexpression. If you use an integer n,\nthe results will be ordered by the nth column in the select\nexpression.\n \nWhen string values are compared, they are compared as if by\nthe STRCMP\nfunction. STRCMP ignores trailing whitespace and may\nnormalize\ncharacters and ignore case, depending on the collation in\nuse.\n \nStarting from MariaDB 5.5.35 duplicated entries in the ORDER\nBY clause are removed. MySQL 5.6 also removes duplicated\nfields.\n \nORDER BY can also be used to order the activities of a\nDELETE or UPDATE statement (usually with the LIMIT clause). \n \nUntil MariaDB 10.3.1, it was not possible to use ORDER BY\n(or LIMIT) in a multi-table UPDATE statement. This\nrestriction was lifted in MariaDB 10.3.2.\n \nExamples\n-------- \nCREATE TABLE seq (i INT, x VARCHAR(1));\nINSERT INTO seq VALUES (1,\'a\'), (2,\'b\'), (3,\'b\'),\n(4,\'f\'), (5,\'e\');\n \nSELECT * FROM seq ORDER BY i;\n \n+------+------+\n| i | x |\n+------+------+\n| 1 | a |\n| 2 | b |\n| 3 | b |\n| 4 | f |\n| 5 | e |\n+------+------+\n \nSELECT * FROM seq ORDER BY i DESC;\n \n+------+------+\n| i | x |\n+------+------+\n| 5 | e |\n| 4 | f |\n| 3 | b |\n| 2 | b |\n| 1 | a |\n+------+------+\n \nSELECT * FROM seq ORDER BY x,i;\n \n+------+------+\n| i | x |\n+------+------+\n| 1 | a |\n| 2 | b |\n| 3 | b |\n| 5 | e |\n| 4 | f |\n+------+------+\n \nORDER BY in an UPDATE statement, in conjunction with LIMIT:\n \nUPDATE seq SET x=\'z\' WHERE x=\'b\' ORDER BY i DESC LIMIT\n1;\n \nSELECT * FROM seq;\n \n+------+------+\n| i | x |\n+------+------+\n| 1 | a |\n| 2 | b |\n| 3 | z |\n| 4 | f |\n| 5 | e |\n+------+------+\n \nFrom MariaDB 10.3.2, ORDER BY can be used in a multi-table\nupdate:\n \nCREATE TABLE warehouse (product_id INT, qty INT);\nINSERT INTO warehouse VALUES\n(1,100),(2,100),(3,100),(4,100);\n \nCREATE TABLE store (product_id INT, qty INT);\nINSERT INTO store VALUES (1,5),(2,5),(3,5),(4,5);\n \nUPDATE warehouse,store SET warehouse.qty = warehouse.qty-2,\nstore.qty = store.qty+2 \n WHERE (warehouse.product_id = store.product_id AND\nstore.product_id >= 1) \n ORDER BY store.product_id DESC LIMIT 2;\n \nSELECT * FROM warehouse;\n \n+------------+------+\n| product_id | qty |\n+------------+------+\n| 1 | 100 |\n| 2 | 100 |\n| 3 | 98 |\n| 4 | 98 |\n+------------+------+\n \nSELECT * FROM store;\n \n+------------+------+\n| product_id | qty |\n+------------+------+\n| 1 | 5 |\n| 2 | 5 |\n| 3 | 7 |\n| 4 | 7 |\n+------------+------+\n \n\n\nURL: https://mariadb.com/kb/en/order-by/', '', 'https://mariadb.com/kb/en/order-by/'),
(434, 'Recursive Common Table Expressions Overview', 27, 'Recursive Common Table Expressions have been supported since\nMariaDB 10.2.2.\n \nCommon Table Expressions (CTEs) are a standard SQL feature,\nand are essentially temporary named result sets. CTEs first\nappeared in the SQL standard in 1999, and the first\nimplementations began appearing in 2007.\n \nThere are two kinds of CTEs:\nNon-recursive\nRecursive, which this article covers.\n \nSQL is generally poor at recursive structures.\n \nCTEs permit a query to reference itself. A recursive CTE\nwill repeatedly execute subsets of the data until it obtains\nthe complete result set. This makes it particularly useful\nfor handing hierarchical or tree-structured data.\n \nSyntax example\n \nWITH RECURSIVE signifies a recursive CTE. It is given a\nname, followed by a body (the main query) as follows:\n \n\nComputation\n \nGiven the following structure:\n \nFirst execute the anchor part of the query:\n \nNext, execute the recursive part of the query:\n \n\n \n\nSummary so far\n \nwith recursive R as (\n select anchor_data\n union [all]\n select recursive_part\n from R, ...\n)\nselect ...\nCompute anchor_data\nCompute recursive_part to get the new data\nif (new data is non-empty) goto 2;\n \nCAST to avoid truncating data\n \nAs currently implemented by MariaDB and by the SQL Standard,\ndata may be truncated if not correctly cast. It is necessary\nto CAST the column to the correct width if the CTE\'s\nrecursive part produces wider values for a column than the\nCTE\'s nonrecursive part. Some other DBMS give an error in\nthis situation, and MariaDB\'s behavior may change in future\n- see MDEV-12325. See the examples below.\n \nExamples\n-------- \nTransitive closure - determining bus destinations\n \nSample data:\n \nCREATE TABLE bus_routes (origin varchar(50), dst\nvarchar(50));\nINSERT INTO bus_routes VALUES \n (\'New York\', \'Boston\'), \n (\'Boston\', \'New York\'), \n (\'New York\', \'Washington\'), \n (\'Washington\', \'Boston\'), \n (\'Washington\', \'Raleigh\');\n \nNow, we want to return the bus destinations with New York as\nthe origin:\n \nWITH RECURSIVE bus_dst as ( \n SELECT origin as dst FROM bus_routes WHERE origin=\'New\nYork\' \n UNION\n SELECT bus_routes.dst FROM bus_routes, bus_dst WHERE\nbus_dst.dst= bus_routes.origin \n) \nSELECT * FROM bus_dst;\n \n+------------+\n| dst |\n+------------+\n| New York |\n| Boston |\n| Washington |\n| Raleigh |\n+------------+\n \nThe above example is computed as follows:\n \nFirst, the anchor data is calculated:\nStarting from New York\nBoston and Washington are added\n \nNext, the recursive part:\nStarting from Boston and then Washington\nRaleigh is added\nUNION excludes nodes that are already present.\n \nComputing paths - determining bus routes\n \nThis time, we are trying to get bus routes such as “New\nYork -> Washington -> Raleigh”.\n \nUsing the same sample data as the previous example:\n \nWITH RECURSIVE paths (cur_path, cur_dest) AS (\n SELECT origin, origin FROM bus_routes WHERE origin=\'New\nYork\' \n UNION\n SELECT CONCAT(paths.cur_path, \',\', bus_routes.dst),\nbus_routes.dst \n FROM paths, bus_routes \n WHERE paths.cur_dest = bus_routes.origin AND \n LOCATE(bus_routes.dst, paths.cur_path)=0 \n) \nSELECT * FROM paths;\n \n+-----------------------------+------------+\n| cur_path | cur_dest |\n+-----------------------------+------------+\n| New York | New York |\n| New York,Boston | Boston |\n| New York,Washington | Washington |\n| New York,Washington,Boston | Boston |\n| New York,Washington,Raleigh | Raleigh |\n+-----------------------------+------------+\n \nCAST to avoid data truncation\n \nIn the following example, data is truncated because the\nresults are not specifically cast to a wide enough type:\n \nWITH RECURSIVE tbl AS (\n SELECT NULL AS col\n UNION\n SELECT \"THIS NEVER SHOWS UP\" AS col FROM tbl\n)\n+------+\n| col |\n+------+\n| NULL |\n| |\n+------+\n \nExplicitly use CAST to overcome this:\n \nWITH RECURSIVE tbl AS (\n SELECT CAST(NULL AS CHAR(50)) AS col\n UNION SELECT \"THIS NEVER SHOWS UP\" AS col FROM tbl\n) \nSELECT * FROM tbl;\n \n+---------------------+\n| col |\n+---------------------+\n| NULL |\n| THIS NEVER SHOWS UP |\n+---------------------+\n \n\n \n \n \n \n \n \n \n\nURL:\nhttps://mariadb.com/kb/en/recursive-common-table-expressions-overview/', '', 'https://mariadb.com/kb/en/recursive-common-table-expressions-overview/'),
(435, 'REPLACE', 27, 'Syntax\n------ \nREPLACE [LOW_PRIORITY | DELAYED]\n [INTO] tbl_name [PARTITION (partition_list)] [(col,...)]\n {VALUES | VALUE} ({expr | DEFAULT},...),(...),...\n \nOr:\n \nREPLACE [LOW_PRIORITY | DELAYED]\n [INTO] tbl_name [PARTITION (partition_list)]\n SET col={expr | DEFAULT}, ...\n \nOr:\n \nREPLACE [LOW_PRIORITY | DELAYED]\n [INTO] tbl_name [PARTITION (partition_list)] [(col,...)]\n SELECT ...\n \nDescription\n----------- \n REPLACE works exactly like\n INSERT, except that if an old row in the table\n has the same value as a new row for a PRIMARY KEY or a\n UNIQUE index, the old row is deleted before the new row is\n inserted. If the table has more than one UNIQUE keys, it is\npossible that the new row conflicts with more than one row.\nIn this case, all conflicting rows will be deleted.\n \nThe table name can be specified in the form db_name.tbl_name\nor, if a default database is selected, in the form tbl_name\n(see Identifier Qualifiers). This allows to use REPLACE ...\nSELECT to copy rows between different databases.\n \nBasically it works like this:\n \nBEGIN;\nSELECT 1 FROM t1 WHERE key=# FOR UPDATE;\nIF found-row\n DELETE FROM t1 WHERE key=# ;\n INSERT INTO t1 VALUES (...);\nENDIF\nEND;\n \nThe above can be replaced with:\n \nREPLACE INTO t1 VALUES (...)\n \n REPLACE is a MariaDB/MySQL extension to the SQL standard.\nIt\n either inserts, or deletes and inserts. For other\nMariaDB/MySQL extensions to\n standard SQL --- that also handle duplicate values --- see\nIGNORE and INSERT ON DUPLICATE KEY UPDATE.\n \nNote that unless the table has a PRIMARY KEY or\n UNIQUE index, using a REPLACE statement\nmakes no sense. It becomes equivalent to INSERT, because\nthere is no index to be used to determine whether a new row\nduplicates another.\n \nValues for all columns are taken from the values specified\nin the\n REPLACE statement. Any missing columns are set to their\ndefault values, just as happens for INSERT. You cannot refer\nto values from the current row and use them in the new row.\nIf you use an\nassignment such as \'SET col = col + 1\', the\nreference to the column name on the right hand side is\ntreated as\n DEFAULT(col), so the assignment is equivalent to\n \'SET col = DEFAULT(col) + 1\'.\n \nTo use REPLACE, you must have both the\n INSERT and DELETE privileges\nfor the table.\n \nThere are some gotchas you should be aware of, before using\nREPLACE:\nIf there is an AUTO_INCREMENT field, a new value will be\ngenerated.\nIf there are foreign keys, ON DELETE action will be\nactivated by REPLACE.\nTriggers on DELETE and INSERT will be activated by REPLACE.\n \nTo avoid some of these behaviors, you can use INSERT ... ON\nDUPLICATE KEY UPDATE.\n \nThe PARTITION clause was introduced in MariaDB 10.0. See\nPartition Pruning and Selection for details.\n \nThis statement activates INSERT and DELETE triggers. See\nTrigger Overview for details.\n \n\n\nURL: https://mariadb.com/kb/en/replace/', '', 'https://mariadb.com/kb/en/replace/'),
(436, 'SELECT', 27, 'Syntax\n------ \nSELECT\n [ALL | DISTINCT | DISTINCTROW]\n [HIGH_PRIORITY]\n [STRAIGHT_JOIN]\n [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]\n [SQL_CACHE | SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]\n select_expr [, select_expr ...]\n [ FROM table_references\n [WHERE where_condition]\n [GROUP BY {col_name | expr | position} [ASC | DESC], ...\n[WITH ROLLUP]]\n [HAVING where_condition]\n [ORDER BY {col_name | expr | position} [ASC | DESC], ...]\n [LIMIT {[offset,] row_count | row_count OFFSET offset}]\n procedure|[PROCEDURE procedure_name(argument_list)]\n [INTO OUTFILE \'file_name\' [CHARACTER SET charset_name]\n[export_options]\n \nINTO DUMPFILE \'file_name\' | INTO var_name [, var_name] ] |\n\n \n [[FOR UPDATE | LOCK IN SHARE MODE] [WAIT n | NOWAIT] ] ]\n \nexport_options:\n [{FIELDS | COLUMNS}\n [TERMINATED BY \'string\']\n [[OPTIONALLY] ENCLOSED BY \'char\']\n [ESCAPED BY \'char\']\n ]\n [LINES\n [STARTING BY \'string\']\n [TERMINATED BY \'string\']\n ]\n \nDescription\n----------- \nSELECT is used to retrieve rows selected from one or more\ntables, and can include UNION statements and subqueries.\nEach select_expr expression indicates a column or data that\nyou want to retrieve. You\nmust have at least one select expression. See Select\nExpressions below.\n \nThe FROM clause indicates the table or tables from which to\nretrieve rows.\nUse either a single table name or a JOIN expression. See\nJOIN\nfor details. If no table is involved, FROM DUAL can be\nspecified.\n \nThe PARTITION clause was introduced in MariaDB 10.0. See\nPartition Pruning and Selection for details.\nEach table can also be specified as db_name.tabl_name. Each\ncolumn can also be specified as tbl_name.col_name or even\ndb_name.tbl_name.col_name. This allows to write queries\nwhich involve multiple databases. See Identifier Qualifiers\nfor syntax details.\n \nThe WHERE clause, if given, indicates the condition or\n conditions that rows must satisfy to be selected.\n where_condition is an expression that evaluates to true for\n each row to be selected. The statement selects all rows if\nthere is no WHERE\n clause.\nIn the WHERE clause, you can use any of the functions and\n operators that MariaDB supports, except for aggregate\n(summary) functions. See Functions and Operators and\nFunctions and Modifiers for use with GROUP BY (aggregate).\n \nUse the ORDER BY clause to order the results.\n \nUse the LIMIT clause allows you to restrict the results to\nonly\na certain number of rows, optionally with an offset.\n \nUse the GROUP BY and HAVING clauses to group\nrows together when they have columns or computed values in\ncommon.\n \nSELECT can also be used to retrieve rows computed without\nreference to\nany table.\n \nSelect Expressions\n \nA SELECT statement must contain one or more select\nexpressions, separated\nby commas. Each select expression can be one of the\nfollowing:\nThe name of a column.\nAny expression using functions and operators.\n* to select all columns from all tables in the FROM clause.\ntbl_name.* to select all columns from just the table\ntbl_name.\n \nWhen specifying a column, you can either use just the column\nname or qualify the column\nname with the name of the table using tbl_name.col_name. The\nqualified form is\nuseful if you are joining multiple tables in the FROM\nclause. If you do not qualify the\ncolumn names when selecting from multiple tables, MariaDB\nwill try to find the column in\neach table. It is an error if that column name exists in\nmultiple tables.\n \nYou can quote column names using backticks. If you are\nqualifying column names\nwith table names, quote each part separately as\n`tbl_name`.`col_name`.\n \nIf you use any grouping functions\nin any of the select expressions, all rows in your results\nwill be implicitly grouped, as if\nyou had used GROUP BY NULL.\n \nDISTINCT\n \nA query may produce some identical rows. By default, all\nrows are retrieved, even when their values are the same. To\nexplicitly specify that you want to retrieve identical rows,\nuse the ALL option. If you want duplicates to be removed\nfrom the resultset, use the DISTINCT option. DISTINCTROW is\na synonym for DISTINCT. See also COUNT DISTINCT and SELECT\nUNIQUE in Oracle mode.\n \nINTO\n \nThe INTO clause is used to specify that the query results\nshould be written to a file or variable.\nSELECT INTO OUTFILE - formatting and writing the result to\nan external file.\nSELECT INTO DUMPFILE - binary-safe writing of the\nunformatted results to an external file.\nSELECT INTO Variable - selecting and setting variables.\n \nThe reverse of SELECT INTO OUTFILE is LOAD DATA.\n \nWAIT/NOWAIT\n \nSet the lock wait timeout. See WAIT and NOWAIT.\n \nPROCEDURE\n \nPasses the whole result set to a C Procedure. See PROCEDURE\nand PROCEDURE ANALYSE (the only built-in procedure not\nrequiring the server to be recompiled).\n \n\nmax_statement_time clause\n \nBy using max_statement_time in conjunction with SET\nSTATEMENT, it is possible to limit the execution time of\nindividual queries. For example:\n \nSET STATEMENT max_statement_time=100 FOR \n SELECT field1 FROM table_name ORDER BY field1;\n \n\n\nURL: https://mariadb.com/kb/en/select/', '', 'https://mariadb.com/kb/en/select/'),
(437, 'SELECT INTO DUMPFILE', 27, 'Syntax\n------ \nSELECT ... INTO DUMPFILE \'file_path\'\n \nDescription\n----------- \nSELECT ... INTO DUMPFILE is a SELECT clause which writes the\nresultset into a single unformatted row, without any\nseparators, in a file. The results will not be returned to\nthe client.\n \nfile_path can be an absolute path, or a relative path\nstarting from the data directory. It can only be specified\nas a string literal, not as a variable. However, the\nstatement can be dynamically composed and executed as a\nprepared statement to work around this limitation.\n \nThis statement is binary-safe and so is particularly useful\nfor writing BLOB values to file. It can be used, for\nexample, to copy an image or an audio document from the\ndatabase to a file. SELECT ... INTO FILE can be used to save\na text file.\n \nThe file must not exist. It cannot be overwritten. A user\nneeds the FILE privilege to run this statement. Also,\nMariaDB needs permission to write files in the specified\nlocation. If the secure_file_priv system variable is set to\na non-empty directory name, the file can only be written to\nthat directory.\n \nSince MariaDB 5.1, the character_set_filesystem system\nvariable has controlled interpretation of file names that\nare given as literal strings.\n \nExample\n \nSELECT _utf8\'Hello world!\' INTO DUMPFILE \'/tmp/world\';\n \nSELECT LOAD_FILE(\'/tmp/world\') AS world;\n \n+--------------+\n| world |\n+--------------+\n| Hello world! |\n+--------------+\n \n\n\nURL: https://mariadb.com/kb/en/select-into-dumpfile/', '', 'https://mariadb.com/kb/en/select-into-dumpfile/'),
(438, 'SELECT INTO OUTFILE', 27, 'Syntax\n------ \nSELECT ... INTO OUTFILE \'file_name\'\n [CHARACTER SET charset_name]\n [export_options]\n \nexport_options:\n [{FIELDS | COLUMNS}\n [TERMINATED BY \'string\']\n [[OPTIONALLY] ENCLOSED BY \'char\']\n [ESCAPED BY \'char\']\n ]\n [LINES\n [STARTING BY \'string\']\n [TERMINATED BY \'string\']\n ]\n \nDescription\n----------- \nSELECT INTO OUTFILE writes the resulting rows to a file, and\nallows the use of column and row terminators to specify a\nparticular output format. The default is to terminate fields\nwith tabs (\\t) and lines with newlines (\\n).\n \nThe file must not exist. It cannot be overwritten. A user\nneeds the FILE privilege to run this statement. Also,\nMariaDB needs permission to write files in the specified\nlocation. If the secure_file_priv system variable is set to\na non-empty directory name, the file can only be written to\nthat directory.\n \nThe LOAD DATA INFILE statement complements SELECT INTO\nOUTFILE.\n \nCharacter-sets\n \nThe CHARACTER SET clause specifies the character set in\nwhich the results are to be written. Without the clause, no\nconversion takes place (the binary character set). In this\ncase, if there are multiple character sets, the output will\ncontain these too, and may not easily be able to be\nreloaded.\n \nIn cases where you have two servers using different\ncharacter-sets, using SELECT INTO OUTFILE to transfer data\nfrom one to the other can have unexpected results. To ensure\nthat MariaDB correctly interprets the escape sequences, use\nthe CHARACTER SET clause on both the SELECT INTO OUTFILE\nstatement and the subsequent LOAD DATA INFILE statement.\n \nExample\n \nThe following example produces a file in the CSV format:\n \nSELECT customer_id, firstname, surname INTO OUTFILE\n\'/exportdata/customers.txt\'\n FIELDS TERMINATED BY \',\' OPTIONALLY ENCLOSED BY \'\"\'\n LINES TERMINATED BY \'\\n\'\n FROM customers;\n \n\n\nURL: https://mariadb.com/kb/en/select-into-outfile/', '', 'https://mariadb.com/kb/en/select-into-outfile/'),
(442, 'WITH', 27, 'The WITH keyword signifies a Common Table Expression (CTE).\nIt allows you to refer to a subquery expression many times\nin a query, as if having a temporary table that only exists\nfor the duration of a query.\n \nThere are two kinds of CTEs:\nNon-Recursive\nRecursive\n \nCommon Table Expression WITH was introduced in MariaDB\n10.2.1.\n \nRecursive WITH has been supported since MariaDB 10.2.2.\n \nSyntax\n------ \nWITH [RECURSIVE] table_reference as (SELECT ...)\n SELECT ...\n \nYou can use table_reference as any normal table in the\nexternal SELECT part. You can also use WITH in sub queries.\nWITH can also be used with EXPLAIN and SELECT.\n \nBelow is an example with the WITH at the top level:\n \nWITH t AS (SELECT a FROM t1 WHERE b >= \'c\') \n SELECT * FROM t2, t WHERE t2.c = t.a;\n \nThe example below uses WITH in a subquery:\n \nSELECT t1.a, t1.b FROM t1, t2\n WHERE t1.a > t2.c \n AND t2.c IN(WITH t AS (SELECT * FROM t1 WHERE t1.a \n\nURL: https://mariadb.com/kb/en/with/', '', 'https://mariadb.com/kb/en/with/'),
(443, 'DESCRIBE', 28, 'Syntax\n------ \n{DESCRIBE | DESC} tbl_name [col_name | wild]\n \nDescription\n----------- \nDESCRIBE provides information about the columns in a table.\nIt is a shortcut for SHOW COLUMNS FROM.\nThese statements also display information for views.\n \ncol_name can be a column name, or a string containing the\nSQL \"%\" and \"_\" wildcard characters to\nobtain output only for the columns with names matching the\nstring. There is no\nneed to enclose the string within quotes unless it contains\nspaces or other\nspecial characters.\n \nDESCRIBE city;\n \n+------------+----------+------+-----+---------+----------------+\n| Field | Type | Null | Key | Default | Extra |\n+------------+----------+------+-----+---------+----------------+\n| Id | int(11) | NO | PRI | NULL | auto_increment |\n| Name | char(35) | YES | | NULL | |\n| Country | char(3) | NO | UNI | | |\n| District | char(20) | YES | MUL | | |\n| Population | int(11) | YES | | NULL | |\n+------------+----------+------+-----+---------+----------------+\n \nThe description for SHOW COLUMNS provides\nmore information about the output columns.\n \n\n\nURL: https://mariadb.com/kb/en/describe/', '', 'https://mariadb.com/kb/en/describe/'),
(439, 'SELECT WITH ROLLUP', 27, 'Syntax\n------ \nSee SELECT for the full syntax.\n \nDescription\n----------- \nThe WITH ROLLUP modifier adds extra rows to the resultset\nthat represent super-aggregate summaries. The\nsuper-aggregated column is represented by a NULL value.\nMultiple aggregates over different columns will be added if\nthere are multiple GROUP BY columns.\n \nThe LIMIT clause can be used at the same time, and is\napplied after the WITH ROLLUP rows have been added.\n \nWITH ROLLUP cannot be used with ORDER BY. Some sorting is\nstill possible by using ASC or DESC clauses with the GROUP\nBY column, although the super-aggregate rows will always be\nadded last.\n \nExamples\n-------- \nThese examples use the following sample table\n \nCREATE TABLE booksales ( \n country VARCHAR(35), genre\nENUM(\'fiction\',\'non-fiction\'), year YEAR, sales INT);\n \nINSERT INTO booksales VALUES\n (\'Senegal\',\'fiction\',2014,12234),\n(\'Senegal\',\'fiction\',2015,15647),\n (\'Senegal\',\'non-fiction\',2014,64980),\n(\'Senegal\',\'non-fiction\',2015,78901),\n (\'Paraguay\',\'fiction\',2014,87970),\n(\'Paraguay\',\'fiction\',2015,76940),\n (\'Paraguay\',\'non-fiction\',2014,8760),\n(\'Paraguay\',\'non-fiction\',2015,9030);\n \nThe addition of the WITH ROLLUP modifier in this example\nadds an extra row that aggregates both years:\n \nSELECT year, SUM(sales) FROM booksales GROUP BY year;\n \n+------+------------+\n| year | SUM(sales) |\n+------+------------+\n| 2014 | 173944 |\n| 2015 | 180518 |\n+------+------------+\n2 rows in set (0.08 sec)\n \nSELECT year, SUM(sales) FROM booksales GROUP BY year WITH\nROLLUP;\n \n+------+------------+\n| year | SUM(sales) |\n+------+------------+\n| 2014 | 173944 |\n| 2015 | 180518 |\n| NULL | 354462 |\n+------+------------+\n \nIn the following example, each time the genre, the year or\nthe country change, another super-aggregate row is added:\n \nSELECT country, year, genre, SUM(sales) \n FROM booksales GROUP BY country, year, genre;\n \n+----------+------+-------------+------------+\n| country | year | genre | SUM(sales) |\n+----------+------+-------------+------------+\n| Paraguay | 2014 | fiction | 87970 |\n| Paraguay | 2014 | non-fiction | 8760 |\n| Paraguay | 2015 | fiction | 76940 |\n| Paraguay | 2015 | non-fiction | 9030 |\n| Senegal | 2014 | fiction | 12234 |\n| Senegal | 2014 | non-fiction | 64980 |\n| Senegal | 2015 | fiction | 15647 |\n| Senegal | 2015 | non-fiction | 78901 |\n+----------+------+-------------+------------+\n \nSELECT country, year, genre, SUM(sales) \n FROM booksales GROUP BY country, year, genre WITH ROLLUP;\n \n+----------+------+-------------+------------+\n| country | year | genre | SUM(sales) |\n+----------+------+-------------+------------+\n| Paraguay | 2014 | fiction | 87970 |\n| Paraguay | 2014 | non-fiction | 8760 |\n| Paraguay | 2014 | NULL | 96730 |\n| Paraguay | 2015 | fiction | 76940 |\n| Paraguay | 2015 | non-fiction | 9030 |\n| Paraguay | 2015 | NULL | 85970 |\n| Paraguay | NULL | NULL | 182700 |\n| Senegal | 2014 | fiction | 12234 |\n| Senegal | 2014 | non-fiction | 64980 |\n| Senegal | 2014 | NULL | 77214 |\n| Senegal | 2015 | fiction | 15647 |\n| Senegal | 2015 | non-fiction | 78901 |\n| Senegal | 2015 | NULL | 94548 |\n| Senegal | NULL | NULL | 171762 |\n| NULL | NULL | NULL | 354462 |\n+----------+------+-------------+------------+\n \nThe LIMIT clause, applied after WITH ROLLUP:\n \nSELECT country, year, genre, SUM(sales) \n FROM booksales GROUP BY country, year, genre WITH ROLLUP\nLIMIT 4;\n \n+----------+------+-------------+------------+\n| country | year | genre | SUM(sales) |\n+----------+------+-------------+------------+\n| Paraguay | 2014 | fiction | 87970 |\n| Paraguay | 2014 | non-fiction | 8760 |\n| Paraguay | 2014 | NULL | 96730 |\n| Paraguay | 2015 | fiction | 76940 |\n+----------+------+-------------+------------+\n \nSorting by year descending:\n \nSELECT country, year, genre, SUM(sales) \n FROM booksales GROUP BY country, year DESC, genre WITH\nROLLUP;\n \n+----------+------+-------------+------------+\n| country | year | genre | SUM(sales) |\n+----------+------+-------------+------------+\n| Paraguay | 2015 | fiction | 76940 |\n| Paraguay | 2015 | non-fiction | 9030 |\n| Paraguay | 2015 | NULL | 85970 |\n| Paraguay | 2014 | fiction | 87970 |\n| Paraguay | 2014 | non-fiction | 8760 |\n| Paraguay | 2014 | NULL | 96730 |\n| Paraguay | NULL | NULL | 182700 |\n| Senegal | 2015 | fiction | 15647 |\n| Senegal | 2015 | non-fiction | 78901 |\n| Senegal | 2015 | NULL | 94548 |\n| Senegal | 2014 | fiction | 12234 |\n| Senegal | 2014 | non-fiction | 64980 |\n| Senegal | 2014 | NULL | 77214 |\n| Senegal | NULL | NULL | 171762 |\n| NULL | NULL | NULL | 354462 |\n+----------+------+-------------+------------+\n \n\n\nURL: https://mariadb.com/kb/en/select-with-rollup/', '', 'https://mariadb.com/kb/en/select-with-rollup/'),
(447, 'ANALYZE FORMAT=JSON', 28, 'ANALYZE FORMAT=JSON is a mix of the EXPLAIN FORMAT=JSON and\nANALYZE statement features. ANALYZE FORMAT=JSON $statement\nwill execute $statement, and then print the output of\nEXPLAIN FORMAT=JSON, amended with the data from query\nexecution.\n \nBasic Execution Data\n \nYou can get the following also from tabular ANALYZE\nstatement form:\nr_rows is provided for any node that reads rows. It shows\nhow many rows were read, on average \nr_filtered is provided whenever there is a condition that is\nchecked. It shows the percentage of rows left after checking\nthe condition.\n \nAdvanced Execution Data\n \nThe most important data that is not available in tabula\nANALYZE statement are:\nr_loops field. This shows how many times the node was\nexecuted. Most query plan elements have this field.\nr_total_time_ms field. It shows how much time in total was\nspent executing this node. If the node has subnodes, their\nexecution time is included.\nr_buffer_size field. Query plan nodes that make use of\nbuffers report the size of buffer that was was used.\n \nData About Individual Query Plan Nodes\n \nfilesort node reports whether sorting was done with LIMIT n\nparameter, and how many rows were in the sort result. \nblock-nl-join node has r_loops field, which allows to tell\nwhether Using join buffer was efficient \nrange-checked-for-each-record reports counters that show the\nresult of the check. \nexpression-cache is used for subqueries, and it reports how\nmany times the cache was used, and what cache hit ratio was.\nunion_result node has r_rows so one can see how many rows\nwere produced after UNION operation\nand so forth\n \nUse Cases\n \nSee Examples of ANALYZE FORMAT=JSON.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/analyze-format-json/', '', 'https://mariadb.com/kb/en/analyze-format-json/'),
(440, 'UNION', 27, 'UNION is used to combine the results from multiple SELECT\nstatements into a single result set.\n \nSyntax\n------ \nSELECT ...\nUNION [ALL | DISTINCT] SELECT ...\n[UNION [ALL | DISTINCT] SELECT ...]\n[ORDER BY [column [, column ...]]]\n[LIMIT {[offset,] row_count | row_count OFFSET offset}]\n \nDescription\n----------- \nUNION is used to combine the results from multiple SELECT\nstatements into a single result set.\n \nThe column names from the first SELECT statement are used as\nthe column names for the results returned. Selected columns\nlisted in corresponding positions of each SELECT statement\nshould have the same data type. (For example, the first\ncolumn selected by the first statement should have the same\ntype as the first column selected by the other statements.)\n \nIf they don\'t, the type and length of the columns in the\nresult take into account the values returned by all of the\nSELECTs, so there is no need for explicit casting. Note that\ncurrently this is not the case for recursive CTEs - see\nMDEV-12325.\n \nTable names can be specified as db_name.tbl_name. This\npermits writing UNIONs which involve multiple databases. See\nIdentifier Qualifiers for syntax details.\n \nUNION queries cannot be used with aggregate functions.\n \nALL/DISTINCT\n \nThe ALL keyword causes duplicate rows to be preserved. The\nDISTINCT keyword (the default if the keyword is omitted)\ncauses duplicate rows to be removed by the results.\n \nUNION ALL and UNION DISTINCT can both be present in a query.\nIn this case, UNION DISTINCT will override any UNION ALLs to\nits left.\n \nUntil MariaDB 10.1.1, all UNION ALL statements required the\nserver to create a temporary table. Since MariaDB 10.1.1,\nthe server can in most cases execute UNION ALL without\ncreating a temporary table, improving performance (see\nMDEV-334).\n \nORDER BY and LIMIT\n \nIndividual SELECTs can contain their own ORDER BY and LIMIT\nclauses. In this case, the individual queries need to be\nwrapped between parentheses. However, this does not affect\nthe order of the UNION, so they only are useful to limit the\nrecord read by one SELECT.\n \nThe UNION can have global ORDER BY and LIMIT clauses, which\naffect the whole resultset. If the columns retrieved by\nindividual SELECT statements have an alias (AS), the ORDER\nBY must use that alias, not the real column names.\n \nHIGH_PRIORITY\n \nSpecifying a query as HIGH_PRIORITY will not work inside a\nUNION. If applied to the first SELECT, it will be ignored.\nApplying to a later SELECT results in a syntax error:\n \nERROR 1234 (42000): Incorrect usage/placement of\n\'HIGH_PRIORITY\'\n \nSELECT ... INTO ...\n \nIndividual SELECTs cannot be written INTO DUMPFILE or INTO\nOUTFILE. If the last SELECT statement specifies INTO\nDUMPFILE or INTO OUTFILE, the entire result of the UNION\nwill be written. Placing the clause after any other SELECT\nwill result in a syntax error.\n \nIf the result is a single row, SELECT ... INTO @var_name can\nalso be used.\n \n\nParentheses\n \nFrom MariaDB 10.4.0, parentheses can be used to specify\nprecedence. Before this, a syntax error would be returned.\n \nExamples\n-------- \nUNION between tables having different column names:\n \n(SELECT e_name AS name, email FROM employees)\nUNION\n(SELECT c_name AS name, email FROM customers);\n \nSpecifying the UNION\'s global order and limiting total\nrows:\n \n(SELECT name, email FROM employees)\nUNION\n(SELECT name, email FROM customers)\nORDER BY name LIMIT 10;\n \nAdding a constant row:\n \n(SELECT \'John Doe\' AS name, \'john.doe@example.net\' AS\nemail)\nUNION\n(SELECT name, email FROM customers);\n \nDiffering types:\n \nSELECT CAST(\'x\' AS CHAR(1)) UNION SELECT REPEAT(\'y\',4);\n+----------------------+\n| CAST(\'x\' AS CHAR(1)) |\n+----------------------+\n| x |\n| yyyy |\n+----------------------+\n \nReturning the results in order of each individual SELECT by\nuse of a sort column:\n \n(SELECT 1 AS sort_column, e_name AS name, email FROM\nemployees)\nUNION\n(SELECT 2, c_name AS name, email FROM customers) ORDER BY\nsort_column;\n \nDifference between UNION, EXCEPT and INTERSECT:\n \nCREATE TABLE seqs (i INT);\nINSERT INTO seqs VALUES (1),(2),(3),(4),(5),(6);\n \nSELECT i FROM seqs WHERE i =3;\n \n+------+\n| i |\n+------+\n| 1 |\n| 2 |\n| 3 |\n| 4 |\n| 5 |\n| 6 |\n+------+\n \nSELECT i FROM seqs WHERE i =3;\n \n+------+\n| i |\n+------+\n| 1 |\n| 2 |\n+------+\n \nSELECT i FROM seqs WHERE i =3;\n \n+------+\n| i |\n+------+\n| 3 |\n+------+\n \nParentheses for specifying precedence, from MariaDB 10.4.0\n \nCREATE OR REPLACE TABLE t1 (a INT);\nCREATE OR REPLACE TABLE t2 (b INT);\nCREATE OR REPLACE TABLE t3 (c INT);\n \nINSERT INTO t1 VALUES (1),(2),(3),(4);\nINSERT INTO t2 VALUES (5),(6);\nINSERT INTO t3 VALUES (1),(6);\n \n((SELECT a FROM t1) UNION (SELECT b FROM t2)) INTERSECT\n(SELECT c FROM t3);\n+------+\n| a |\n+------+\n| 1 |\n| 6 |\n+------+\n \n(SELECT a FROM t1) UNION ((SELECT b FROM t2) INTERSECT\n(SELECT c FROM t3));\n+------+\n| a |\n+------+\n| 1 |\n| 2 |\n| 3 |\n| 4 |\n| 6 |\n+------+\n \n\n\nURL: https://mariadb.com/kb/en/union/', '', 'https://mariadb.com/kb/en/union/'),
(441, 'UPDATE', 27, 'Syntax\n------ \nSingle-table syntax:\n \nUPDATE [LOW_PRIORITY] [IGNORE] table_reference \n [PARTITION (partition_list)]\n SET col1={expr1|DEFAULT} [,col2={expr2|DEFAULT}] ...\n [WHERE where_condition]\n [ORDER BY ...]\n [LIMIT row_count]\n \nMultiple-table syntax:\n \nUPDATE [LOW_PRIORITY] [IGNORE] table_references\n SET col1={expr1|DEFAULT} [, col2={expr2|DEFAULT}] ...\n [WHERE where_condition]\n \nDescription\n----------- \nFor the single-table syntax, the UPDATE statement updates\ncolumns of existing rows in the named table with new values.\nThe\nSET clause indicates which columns to modify and the values\nthey should be given. Each value can be given as an\nexpression, or the keyword\nDEFAULT to set a column explicitly to its default value. The\nWHERE clause, if given, specifies the conditions that\nidentify\nwhich rows to update. With no WHERE clause, all rows are\nupdated. If the ORDER BY clause is specified, the rows are\nupdated in the order that is specified. The LIMIT clause\nplaces a limit on the number of rows that can be updated.\n \nThe PARTITION clause was introduced in MariaDB 10.0. See\nPartition Pruning and Selection for details.\n \nUntil MariaDB 10.3.2, for the multiple-table syntax, UPDATE\nupdates rows in each\ntable named in table_references that satisfy the conditions.\nIn this case,\nORDER BY and LIMIT cannot be used. This restriction was\nlifted in MariaDB 10.3.2 and both clauses can be used with\nmultiple-table updates. An UPDATE can also reference tables\nwhich are located in different databases; see Identifier\nQualifiers for the syntax.\n \nwhere_condition is an expression that evaluates to true for\neach row to be updated.\n \ntable_references and where_condition are as\nspecified as described in SELECT.\n \nAssignments are evaluated in left-to-right order, unless the\nSIMULTANEOUS_ASSIGNMENT sql_mode (available from MariaDB\n10.3.5) is set, in which case the UPDATE statement evaluates\nall assignments simultaneously. \n \nYou need the UPDATE privilege only for columns referenced in\nan UPDATE that are actually updated. You need only the\nSELECT privilege for any columns that are read but\nnot modified. See GRANT.\n \nThe UPDATE statement supports the following modifiers:\nIf you use the LOW_PRIORITY keyword, execution of\n the UPDATE is delayed until no other clients are reading\nfrom\n the table. This affects only storage engines that use only\ntable-level\n locking (MyISAM, MEMORY, MERGE). See HIGH_PRIORITY and\nLOW_PRIORITY clauses for details.\nIf you use the IGNORE keyword, the update statement does \n not abort even if errors occur during the update. Rows for\nwhich\n duplicate-key conflicts occur are not updated. Rows for\nwhich columns are\n updated to values that would cause data conversion errors\nare updated to the\n closest valid values instead.\n \nUPDATE Statements With the Same Source and Target\n \nFrom MariaDB 10.3.2, UPDATE statements may have the same\nsource and target.\n \nFor example, given the following table:\n \nDROP TABLE t1;\n \nCREATE TABLE t1 (c1 INT, c2 INT);\nINSERT INTO t1 VALUES (10,10), (20,20);\n \nUntil MariaDB 10.3.1, the following UPDATE statement would\nnot work:\n \nUPDATE t1 SET c1=c1+1 WHERE c2=(SELECT MAX(c2) FROM t1);\nERROR 1093 (HY000): Table \'t1\' is specified twice, \n both as a target for \'UPDATE\' and as a separate source\nfor data\n \nFrom MariaDB 10.3.2, the statement executes successfully:\n \nUPDATE t1 SET c1=c1+1 WHERE c2=(SELECT MAX(c2) FROM t1);\n \nSELECT * FROM t1;\n \n+------+------+\n| c1 | c2 |\n+------+------+\n| 10 | 10 |\n| 21 | 20 |\n+------+------+\n \nExample\n \nSingle-table syntax:\n \nUPDATE table_name SET column1 = value1, column2 = value2\nWHERE id=100;\n \nMultiple-table syntax:\n \nUPDATE tab1, tab2 SET tab1.column1 = value1, tab1.column2 =\nvalue2 WHERE tab1.id = tab2.id;\n \n\n\nURL: https://mariadb.com/kb/en/update/', '', 'https://mariadb.com/kb/en/update/'),
(448, 'ANALYZE FORMAT=JSON Examples', 28, 'Example #1\n \nCustomers who have ordered more than 1M goods.\n \nANALYZE FORMAT=JSON\nSELECT CONT(*)\nFROM customer\nWHERE\n (SELECT SUM(o_totalprice) FROM orders WHERE\no_custkey=c_custkey) > 1000*1000;\n \nThe query takes 40 seconds over cold cache\n \nEXPLAIN: {\n \"query_block\": {\n \"select_id\": 1,\n \"r_loops\": 1,\n \"r_total_time_ms\": 39872,\n \"table\": {\n \"table_name\": \"customer\",\n \"access_type\": \"index\",\n \"key\": \"i_c_nationkey\",\n \"key_length\": \"5\",\n \"used_key_parts\": [\"c_nationkey\"],\n \"r_loops\": 1,\n \"rows\": 150303,\n \"r_rows\": 150000,\n \"r_total_time_ms\": 270.3,\n \"filtered\": 100,\n \"r_filtered\": 60.691,\n \"attached_condition\": \"((subquery#2) > ((1000 *\n1000)))\",\n \"using_index\": true\n },\n \"subqueries\": [\n {\n \"query_block\": {\n \"select_id\": 2,\n \"r_loops\": 150000,\n \"r_total_time_ms\": 39531,\n \"table\": {\n \"table_name\": \"orders\",\n \"access_type\": \"ref\",\n \"possible_keys\": [\"i_o_custkey\"],\n \"key\": \"i_o_custkey\",\n \"key_length\": \"5\",\n \"used_key_parts\": [\"o_custkey\"],\n \"ref\": [\"dbt3sf1.customer.c_custkey\"],\n \"r_loops\": 150000,\n \"rows\": 7,\n \"r_rows\": 10,\n \"r_total_time_ms\": 39208,\n \"filtered\": 100,\n \"r_filtered\": 100\n }\n }\n }\n ]\n }\n}\nANALYZE shows that 39.2 seconds were spent in the subquery,\nwhich was executed 150K times (for every row of outer\ntable).\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/analyze-formatjson-examples/', '', 'https://mariadb.com/kb/en/analyze-formatjson-examples/'),
(444, 'ANALYZE Statement', 28, 'The ANALYZE statement was introduced in MariaDB 10.1.0.\n \nDescription\n----------- \nThe ANALYZE statement is similar to the EXPLAIN statement.\nANALYZE statement will invoke the optimizer, execute the\nstatement, and then produce EXPLAIN output instead of the\nresult set. The EXPLAIN output will be annotated with\nstatistics from statement execution.\n \nThis lets one check how close the optimizer\'s estimates\nabout the query plan are to the reality. ANALYZE produces an\noverview, while the\nANALYZE FORMAT=JSON command provides a more detailed view of\nthe query plan and the query execution.\n \nThe syntax is \n \nANALYZE explainable_statement;\n \nwhere the statement is any statement for which one can run\nEXPLAIN.\n \nCommand Output\n \nConsider an example:\n \nANALYZE SELECT * FROM tbl1 \nWHERE key1 \n BETWEEN 10 AND 200 AND \n col1 LIKE \'foo%\'\\G\n \n*************************** 1. row\n***************************\n id: 1\n select_type: SIMPLE\n table: tbl1\n type: range\npossible_keys: key1\n key: key1\n key_len: 5\n ref: NULL\n rows: 181\n r_rows: 181\n filtered: 100.00\n r_filtered: 10.50\n Extra: Using index condition; Using where\n \nCompared to EXPLAIN, ANALYZE produces two extra columns:\nr_rows is an observation-based counterpart of the rows\ncolumn. It shows how many rows were actually read from the\ntable. \nr_filtered is an observation-based counterpart of the\nfiltered column. It shows which fraction of rows was left\nafter applying the WHERE condition.\n \nInterpreting the Output\n \nJoins\n \nLet\'s consider a more complicated example.\n \nANALYZE SELECT *\nFROM orders, customer \nWHERE\n customer.c_custkey=orders.o_custkey AND\n customer.c_acctbal  200*1000\n \n+----+-------------+----------+------+---------------+-------------+---------+--------------------+--------+--------+----------+------------+-------------+\n| id | select_type | table | type | possible_keys | key |\nkey_len | ref | rows | r_rows | filtered | r_filtered |\nExtra |\n+----+-------------+----------+------+---------------+-------------+---------+--------------------+--------+--------+----------+------------+-------------+\n| 1 | SIMPLE | customer | ALL | PRIMARY,... | NULL | NULL |\nNULL | 149095 | 150000 | 18.08 | 9.13 | Using where |\n| 1 | SIMPLE | orders | ref | i_o_custkey | i_o_custkey | 5\n| customer.c_custkey | 7 | 10 | 100.00 | 30.03 | Using where\n|\n+----+-------------+----------+------+---------------+-------------+---------+--------------------+--------+--------+----------+------------+-------------+\n \nHere, one can see that\nFor table customer, customer.rows=149095,\ncustomer.r_rows=150000. The estimate for number of rows we\nwill read was fairly precise\ncustomer.filtered=18.08, customer.r_filtered=9.13. The\noptimizer somewhat overestimated the number of records that\nwill match selectivity of condition attached to `customer`\ntable (in general, when you have a full scan and r_filtered\nis less than 15%, it\'s time to consider adding an\nappropriate index).\nFor table orders, orders.rows=7, orders.r_rows=10. This\nmeans that on average, there are 7 orders for a given\nc_custkey, but in our case there were 10, which is close to\nthe expectation (when this number is consistently far from\nthe expectation, it may be time to run ANALYZE TABLE, or\neven edit the table statistics manually to get better query\nplans).\norders.filtered=100, orders.r_filtered=30.03. The optimizer\ndidn\'t have any way to estimate which fraction of records\nwill be left after it checks the condition that is attached\nto table orders (it\'s orders.o_totalprice > 200*1000). So,\nit used 100%. In reality, it is 30%. 30% is typically not\nselective enough to warrant adding new indexes. For joins\nwith many tables, it might be worth to collect and use\ncolumn statistics for columns in question, this may help the\noptimizer to pick a better query plan.\n \nMeaning of NULL in r_rows and r_filtered\n \nLet\'s modify the previous example slightly\n \nANALYZE SELECT * \nFROM orders, customer \nWHERE\n customer.c_custkey=orders.o_custkey AND\n customer.c_acctbal  200*1000;\n \n+----+-------------+----------+------+---------------+-------------+---------+--------------------+--------+--------+----------+------------+-------------+\n| id | select_type | table | type | possible_keys | key |\nkey_len | ref | rows | r_rows | filtered | r_filtered |\nExtra |\n+----+-------------+----------+------+---------------+-------------+---------+--------------------+--------+--------+----------+------------+-------------+\n| 1 | SIMPLE | customer | ALL | PRIMARY,... | NULL | NULL |\nNULL | 149095 | 150000 | 18.08 | 0.00 | Using where |\n| 1 | SIMPLE | orders | ref | i_o_custkey | i_o_custkey | 5\n| customer.c_custkey | 7 | NULL | 100.00 | NULL | Using\nwhere |\n+----+-------------+----------+------+---------------+-------------+---------+--------------------+--------+--------+----------+------------+-------------+\n \nHere, one can see that orders.r_rows=NULL and\norders.r_filtered=NULL. This means that table orders was not\nscanned even once. \nIndeed, we can also see customer.r_filtered=0.00. This shows\nthat a part of WHERE attached to table `customer` was never\nsatisfied (or, satisfied in less than 0.01% of cases).\n \nANALYZE FORMAT=JSON\n \nANALYZE FORMAT=JSON produces JSON output. It produces much\nmore information than tabular ANALYZE.\n \nNotes\n \nANALYZE UPDATE or ANALYZE DELETE will actually make\nupdates/deletes (ANALYZE SELECT will perform the select\noperation and then discard the resultset).\nPostgreSQL has a similar command, EXPLAIN ANALYZE.\nThe EXPLAIN in the slow query log feature allows MariaDB to\nhave ANALYZE output of slow queries printed into the slow\nquery log (see MDEV-6388).\n \n\n\nURL: https://mariadb.com/kb/en/analyze-statement/', '', 'https://mariadb.com/kb/en/analyze-statement/'),
(449, 'EXPLAIN FORMAT=JSON', 28, 'Starting from version 10.1.2, MariaDB supports the EXPLAIN\nFORMAT=JSON syntax.\n \nSynopsis\n \nEXPLAIN FORMAT=JSON is a variant of EXPLAIN command that\nproduces output in JSON form. The output always has one row\nwhich has only one column titled \"JSON\". The contents are\na JSON representation of the query plan, formatted for\nreadability:\n \nEXPLAIN FORMAT=JSON SELECT * FROM t1 WHERE col1=1\\G\n \n*************************** 1. row\n***************************\nEXPLAIN: {\n \"query_block\": {\n \"select_id\": 1,\n \"table\": {\n \"table_name\": \"t1\",\n \"access_type\": \"ALL\",\n \"rows\": 1000,\n \"filtered\": 100,\n \"attached_condition\": \"(t1.col1 = 1)\"\n }\n }\n}\n \nOutput is different from MySQL\n \nThe output of MariaDB\'s EXPLAIN FORMAT=JSON is different\nfrom EXPLAIN FORMAT=JSON in MySQL.The reasons for that are:\nMySQL\'s output has deficiencies. Some are listed here:\nEXPLAIN FORMAT=JSON in MySQL)\nThe output of MySQL\'s EXPLAIN FORMAT=JSON is not defined.\nEven MySQL Workbench has trouble parsing it (see this blog\npost).\nMariaDB has query optimizations that MySQL does not have.\nErgo, MariaDB generates query plans that MySQL does not\ngenerate.\n \nA (as yet incomplete) list of how MariaDB\'s output is\ndifferent from MySQL can be found here: EXPLAIN FORMAT=JSON\ndifferences from MySQL. \n \nOutput format\n \nTODO: MariaDB\'s output format description.\n \n\n\nURL: https://mariadb.com/kb/en/explain-format-json/', '', 'https://mariadb.com/kb/en/explain-format-json/'),
(456, 'ST_CONTAINS', 30, 'Syntax\n------ \nST_CONTAINS(g1,g2)\n \nDescription\n----------- \nReturns 1 or 0 to indicate whether a geometry g1 completely\ncontains geometry g2.\n \nST_CONTAINS() uses object shapes, while CONTAINS(), based on\nthe original MySQL implementation, uses object bounding\nrectangles.\n \nST_CONTAINS tests the opposite relationship to ST_WITHIN().\n \nExamples\n-------- \nSET @g1 = ST_GEOMFROMTEXT(\'POLYGON((175 150, 20 40, 50 60,\n125 100, 175 150))\');\n \nSET @g2 = ST_GEOMFROMTEXT(\'POINT(174 149)\');\n \nSELECT ST_CONTAINS(@g1,@g2);\n+----------------------+\n| ST_CONTAINS(@g1,@g2) |\n+----------------------+\n| 1 |\n+----------------------+\n \nSET @g2 = ST_GEOMFROMTEXT(\'POINT(175 151)\');\n \nSELECT ST_CONTAINS(@g1,@g2);\n+----------------------+\n| ST_CONTAINS(@g1,@g2) |\n+----------------------+\n| 0 |\n+----------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st-contains/', '', 'https://mariadb.com/kb/en/st-contains/'),
(457, 'ST_CROSSES', 30, 'Syntax\n------ \nST_CROSSES(g1,g2)\n \nDescription\n----------- \nReturns 1 if geometry g1 spatially crosses geometry g2.\nReturns NULL if g1 is a Polygon or a MultiPolygon, or if g2\nis a\nPoint or a MultiPoint. Otherwise, returns 0.\n \nThe term spatially crosses denotes a spatial relation\nbetween two\ngiven geometries that has the following properties:\nThe two geometries intersect\nTheir intersection results in a geometry that has a\ndimension that is one\n less than the maximum dimension of the two given geometries\nTheir intersection is not equal to either of the two given\ngeometries\n \nST_CROSSES() uses object shapes, while CROSSES(), based on\nthe original MySQL implementation, uses object bounding\nrectangles.\n \nExamples\n-------- \nSET @g1 = ST_GEOMFROMTEXT(\'LINESTRING(174 149, 176 151)\');\n \nSET @g2 = ST_GEOMFROMTEXT(\'POLYGON((175 150, 20 40, 50 60,\n125 100, 175 150))\');\n \nSELECT ST_CROSSES(@g1,@g2);\n+---------------------+\n| ST_CROSSES(@g1,@g2) |\n+---------------------+\n| 1 |\n+---------------------+\n \nSET @g1 = ST_GEOMFROMTEXT(\'LINESTRING(176 149, 176 151)\');\n \nSELECT ST_CROSSES(@g1,@g2);\n+---------------------+\n| ST_CROSSES(@g1,@g2) |\n+---------------------+\n| 0 |\n+---------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st-crosses/', '', 'https://mariadb.com/kb/en/st-crosses/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(459, 'ST_DISJOINT', 30, 'Syntax\n------ \nST_DISJOINT(g1,g2)\n \nDescription\n----------- \nReturns 1 or 0 to indicate whether geometry g1 is spatially\ndisjoint from\n(does not intersect with) geometry g2.\n \nST_DISJOINT() uses object shapes, while DISJOINT(), based on\nthe original MySQL implementation, uses object bounding\nrectangles.\n \nST_DISJOINT() tests the opposite relationship to\nST_INTERSECTS().\n \nExamples\n-------- \nSET @g1 = ST_GEOMFROMTEXT(\'POINT(0 0)\');\n \nSET @g2 = ST_GEOMFROMTEXT(\'LINESTRING(2 0, 0 2)\');\n \nSELECT ST_DISJOINT(@g1,@g2);\n+----------------------+\n| ST_DISJOINT(@g1,@g2) |\n+----------------------+\n| 1 |\n+----------------------+\n \nSET @g2 = ST_GEOMFROMTEXT(\'LINESTRING(0 0, 0 2)\');\n \nSELECT ST_DISJOINT(@g1,@g2);\n+----------------------+\n| ST_DISJOINT(@g1,@g2) |\n+----------------------+\n| 0 |\n+----------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_disjoint/', '', 'https://mariadb.com/kb/en/st_disjoint/'),
(461, 'ST_EQUALS', 30, 'Syntax\n------ \nST_EQUALS(g1,g2)\n \nDescription\n----------- \nReturns 1 or 0 to indicate whether geometry g1 is spatially\nequal to geometry g2.\n \nST_EQUALS() uses object shapes, while EQUALS(), based on the\noriginal MySQL implementation, uses object bounding\nrectangles.\n \nExamples\n-------- \nSET @g1 = ST_GEOMFROMTEXT(\'LINESTRING(174 149, 176 151)\');\n \nSET @g2 = ST_GEOMFROMTEXT(\'LINESTRING(176 151, 174 149)\');\n \nSELECT ST_EQUALS(@g1,@g2);\n+--------------------+\n| ST_EQUALS(@g1,@g2) |\n+--------------------+\n| 1 |\n+--------------------+\n \nSET @g1 = ST_GEOMFROMTEXT(\'POINT(0 2)\');\n \nSET @g1 = ST_GEOMFROMTEXT(\'POINT(2 0)\');\n \nSELECT ST_EQUALS(@g1,@g2);\n+--------------------+\n| ST_EQUALS(@g1,@g2) |\n+--------------------+\n| 0 |\n+--------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st-equals/', '', 'https://mariadb.com/kb/en/st-equals/'),
(462, 'ST_INTERSECTS', 30, 'Syntax\n------ \nST_INTERSECTS(g1,g2)\n \nDescription\n----------- \nReturns 1 or 0 to indicate whether geometry g1 spatially\nintersects geometry g2.\n \nST_INTERSECTS() uses object shapes, while INTERSECTS(),\nbased on the original MySQL implementation, uses object\nbounding rectangles.\n \nST_INTERSECTS() tests the opposite relationship to\nST_DISJOINT().\n \nExamples\n-------- \nSET @g1 = ST_GEOMFROMTEXT(\'POINT(0 0)\');\n \nSET @g2 = ST_GEOMFROMTEXT(\'LINESTRING(0 0, 0 2)\');\n \nSELECT ST_INTERSECTS(@g1,@g2);\n+------------------------+\n| ST_INTERSECTS(@g1,@g2) |\n+------------------------+\n| 1 |\n+------------------------+\n \nSET @g2 = ST_GEOMFROMTEXT(\'LINESTRING(2 0, 0 2)\');\n \nSELECT ST_INTERSECTS(@g1,@g2);\n+------------------------+\n| ST_INTERSECTS(@g1,@g2) |\n+------------------------+\n| 0 |\n+------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st-intersects/', '', 'https://mariadb.com/kb/en/st-intersects/'),
(465, 'ST_TOUCHES', 30, 'Syntax\n------ \nST_TOUCHES(g1,g2)\n \nDescription\n----------- \nReturns 1 or 0 to indicate whether geometry g1 spatially\ntouches geometry g2. Two geometries spatially touch if the\ninteriors of the geometries do not intersect,\nbut the boundary of one of the geometries intersects either\nthe boundary or the\ninterior of the other.\n \nST_TOUCHES() uses object shapes, while TOUCHES(), based on\nthe original MySQL implementation, uses object bounding\nrectangles.\n \nExamples\n-------- \nSET @g1 = ST_GEOMFROMTEXT(\'POINT(2 0)\');\n \nSET @g2 = ST_GEOMFROMTEXT(\'LINESTRING(2 0, 0 2)\');\n \nSELECT ST_TOUCHES(@g1,@g2);\n+---------------------+\n| ST_TOUCHES(@g1,@g2) |\n+---------------------+\n| 1 |\n+---------------------+\n \nSET @g1 = ST_GEOMFROMTEXT(\'POINT(2 1)\');\n \nSELECT ST_TOUCHES(@g1,@g2);\n+---------------------+\n| ST_TOUCHES(@g1,@g2) |\n+---------------------+\n| 0 |\n+---------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st-touches/', '', 'https://mariadb.com/kb/en/st-touches/'),
(466, 'ST_WITHIN', 30, 'Syntax\n------ \nST_WITHIN(g1,g2)\n \nDescription\n----------- \nReturns 1 or 0 to indicate whether geometry g1 is spatially\nwithin geometry g2.\n \nThis tests the opposite relationship as ST_CONTAINS().\n \nST_WITHIN() uses object shapes, while WITHIN(), based on the\noriginal MySQL implementation, uses object bounding\nrectangles.\n \nExamples\n-------- \nSET @g1 = ST_GEOMFROMTEXT(\'POINT(174 149)\');\n \nSET @g2 = ST_GEOMFROMTEXT(\'POLYGON((175 150, 20 40, 50 60,\n125 100, 175 150))\');\n \nSELECT ST_WITHIN(@g1,@g2);\n+--------------------+\n| ST_WITHIN(@g1,@g2) |\n+--------------------+\n| 1 |\n+--------------------+\n \nSET @g1 = ST_GEOMFROMTEXT(\'POINT(176 151)\');\n \nSELECT ST_WITHIN(@g1,@g2);\n+--------------------+\n| ST_WITHIN(@g1,@g2) |\n+--------------------+\n| 0 |\n+--------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st-within/', '', 'https://mariadb.com/kb/en/st-within/'),
(468, 'WITHIN', 30, 'Syntax\n------ \nWithin(g1,g2)\n \nDescription\n----------- \nReturns 1 or 0 to indicate whether g1 is spatially within\ng2.\nThis tests the opposite relationship as Contains().\n \nWITHIN() is based on the original MySQL implementation, and\nuses object bounding rectangles, while ST_WITHIN() uses\nobject shapes.\n \nExamples\n-------- \nSET @g1 = GEOMFROMTEXT(\'POINT(174 149)\');\nSET @g2 = GEOMFROMTEXT(\'POINT(176 151)\');\nSET @g3 = GEOMFROMTEXT(\'POLYGON((175 150, 20 40, 50 60, 125\n100, 175 150))\');\n \nSELECT within(@g1,@g3);\n+-----------------+\n| within(@g1,@g3) |\n+-----------------+\n| 1 |\n+-----------------+\n \nSELECT within(@g2,@g3);\n+-----------------+\n| within(@g2,@g3) |\n+-----------------+\n| 0 |\n+-----------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/within/', '', 'https://mariadb.com/kb/en/within/'),
(469, 'ADDDATE', 31, 'Syntax\n------ \nADDDATE(date,INTERVAL expr unit), ADDDATE(expr,days)\n \nDescription\n----------- \nWhen invoked with the INTERVAL form of the second argument,\nADDDATE()\nis a synonym for DATE_ADD(). The related function\nSUBDATE() is a synonym for DATE_SUB(). For\ninformation on the INTERVAL unit argument, see the\ndiscussion for\nDATE_ADD().\n \nWhen invoked with the days form of the second argument,\nMariaDB treats it as an\ninteger number of days to be added to expr.\n \nExamples\n-------- \nSELECT DATE_ADD(\'2008-01-02\', INTERVAL 31 DAY);\n+-----------------------------------------+\n| DATE_ADD(\'2008-01-02\', INTERVAL 31 DAY) |\n+-----------------------------------------+\n| 2008-02-02 |\n+-----------------------------------------+\n \nSELECT ADDDATE(\'2008-01-02\', INTERVAL 31 DAY);\n+----------------------------------------+\n| ADDDATE(\'2008-01-02\', INTERVAL 31 DAY) |\n+----------------------------------------+\n| 2008-02-02 |\n+----------------------------------------+\n \nSELECT ADDDATE(\'2008-01-02\', 31);\n+---------------------------+\n| ADDDATE(\'2008-01-02\', 31) |\n+---------------------------+\n| 2008-02-02 |\n+---------------------------+\n \nCREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n (\"2007-01-30 21:31:07\"),\n (\"1983-10-15 06:42:51\"),\n (\"2011-04-21 12:34:56\"),\n (\"2011-10-30 06:31:41\"),\n (\"2011-01-30 14:03:25\"),\n (\"2004-10-07 11:19:34\");\n \nSELECT d, ADDDATE(d, 10) from t1;\n \n+---------------------+---------------------+\n| d | ADDDATE(d, 10) |\n+---------------------+---------------------+\n| 2007-01-30 21:31:07 | 2007-02-09 21:31:07 |\n| 1983-10-15 06:42:51 | 1983-10-25 06:42:51 |\n| 2011-04-21 12:34:56 | 2011-05-01 12:34:56 |\n| 2011-10-30 06:31:41 | 2011-11-09 06:31:41 |\n| 2011-01-30 14:03:25 | 2011-02-09 14:03:25 |\n| 2004-10-07 11:19:34 | 2004-10-17 11:19:34 |\n+---------------------+---------------------+\n \nSELECT d, ADDDATE(d, INTERVAL 10 HOUR) from t1;\n \n+---------------------+------------------------------+\n| d | ADDDATE(d, INTERVAL 10 HOUR) |\n+---------------------+------------------------------+\n| 2007-01-30 21:31:07 | 2007-01-31 07:31:07 |\n| 1983-10-15 06:42:51 | 1983-10-15 16:42:51 |\n| 2011-04-21 12:34:56 | 2011-04-21 22:34:56 |\n| 2011-10-30 06:31:41 | 2011-10-30 16:31:41 |\n| 2011-01-30 14:03:25 | 2011-01-31 00:03:25 |\n| 2004-10-07 11:19:34 | 2004-10-07 21:19:34 |\n+---------------------+------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/adddate/', '', 'https://mariadb.com/kb/en/adddate/'),
(470, 'ADDTIME', 31, 'Syntax\n------ \nADDTIME(expr1,expr2)\n \nDescription\n----------- \nADDTIME() adds expr2 to expr1 and returns the result. expr1\nis a time\nor datetime expression, and expr2 is a time expression.\n \nExamples\n-------- \nSELECT ADDTIME(\'2007-12-31 23:59:59.999999\', \'1\n1:1:1.000002\');\n+---------------------------------------------------------+\n| ADDTIME(\'2007-12-31 23:59:59.999999\', \'1\n1:1:1.000002\') |\n+---------------------------------------------------------+\n| 2008-01-02 01:01:01.000001 |\n+---------------------------------------------------------+\n \nSELECT ADDTIME(\'01:00:00.999999\', \'02:00:00.999998\');\n+-----------------------------------------------+\n| ADDTIME(\'01:00:00.999999\', \'02:00:00.999998\') |\n+-----------------------------------------------+\n| 03:00:01.999997 |\n+-----------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/addtime/', '', 'https://mariadb.com/kb/en/addtime/'),
(471, 'CONVERT_TZ', 31, 'Syntax\n------ \nCONVERT_TZ(dt,from_tz,to_tz)\n \nDescription\n----------- \nCONVERT_TZ() converts a datetime value dt from the time zone\ngiven by from_tz to the time zone given by to_tz and returns\nthe resulting value.\n \nIn order to use named time zones, such as GMT, MET or\nAfrica/Johannesburg, the time_zone tables must be loaded\n(see mysql_tzinfo_to_sql).\n \nNo conversion will take place if the value falls outside of\nthe supported TIMESTAMP range (\'1970-01-01 00:00:01\' to\n\'2038-01-19 05:14:07\' UTC) when converted from from_tz to\nUTC.\n \nThis function returns NULL if the arguments are invalid (or\nnamed time zones have not been loaded).\n \nSee time zones for more information.\n \nExamples\n-------- \nSELECT CONVERT_TZ(\'2016-01-01\n12:00:00\',\'+00:00\',\'+10:00\');\n+-----------------------------------------------------+\n| CONVERT_TZ(\'2016-01-01 12:00:00\',\'+00:00\',\'+10:00\')\n|\n+-----------------------------------------------------+\n| 2016-01-01 22:00:00 |\n+-----------------------------------------------------+\n \nUsing named time zones (with the time zone tables loaded):\n \nSELECT CONVERT_TZ(\'2016-01-01\n12:00:00\',\'GMT\',\'Africa/Johannesburg\');\n+---------------------------------------------------------------+\n| CONVERT_TZ(\'2016-01-01\n12:00:00\',\'GMT\',\'Africa/Johannesburg\') |\n+---------------------------------------------------------------+\n| 2016-01-01 14:00:00 |\n+---------------------------------------------------------------+\n \nThe value is out of the TIMESTAMP range, so no conversion\ntakes place:\n \nSELECT CONVERT_TZ(\'1969-12-31\n22:00:00\',\'+00:00\',\'+10:00\');\n+-----------------------------------------------------+\n| CONVERT_TZ(\'1969-12-31 22:00:00\',\'+00:00\',\'+10:00\')\n|\n+-----------------------------------------------------+\n| 1969-12-31 22:00:00 |\n+-----------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/convert_tz/', '', 'https://mariadb.com/kb/en/convert_tz/'),
(478, 'DATEDIFF', 31, 'Syntax\n------ \nDATEDIFF(expr1,expr2)\n \nDescription\n----------- \nDATEDIFF() returns (expr1 – expr2) expressed\nas a value in days from one date to the other. expr1 and\nexpr2 are date\nor date-and-time expressions. Only the date parts of the\nvalues are used in the\ncalculation.\n \nExamples\n-------- \nSELECT DATEDIFF(\'2007-12-31 23:59:59\',\'2007-12-30\');\n+----------------------------------------------+\n| DATEDIFF(\'2007-12-31 23:59:59\',\'2007-12-30\') |\n+----------------------------------------------+\n| 1 |\n+----------------------------------------------+\n \nSELECT DATEDIFF(\'2010-11-30 23:59:59\',\'2010-12-31\');\n+----------------------------------------------+\n| DATEDIFF(\'2010-11-30 23:59:59\',\'2010-12-31\') |\n+----------------------------------------------+\n| -31 |\n+----------------------------------------------+\n \nCREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n (\"2007-01-30 21:31:07\"),\n (\"1983-10-15 06:42:51\"),\n (\"2011-04-21 12:34:56\"),\n (\"2011-10-30 06:31:41\"),\n (\"2011-01-30 14:03:25\"),\n (\"2004-10-07 11:19:34\");\n \nSELECT NOW();\n+---------------------+\n| NOW() |\n+---------------------+\n| 2011-05-23 10:56:05 |\n+---------------------+\n \nSELECT d, DATEDIFF(NOW(),d) FROM t1;\n \n+---------------------+-------------------+\n| d | DATEDIFF(NOW(),d) |\n+---------------------+-------------------+\n| 2007-01-30 21:31:07 | 1574 |\n| 1983-10-15 06:42:51 | 10082 |\n| 2011-04-21 12:34:56 | 32 |\n| 2011-10-30 06:31:41 | -160 |\n| 2011-01-30 14:03:25 | 113 |\n| 2004-10-07 11:19:34 | 2419 |\n+---------------------+-------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/datediff/', '', 'https://mariadb.com/kb/en/datediff/'),
(479, 'DATE_ADD', 31, 'Syntax\n------ \nDATE_ADD(date,INTERVAL expr unit)\n \nDescription\n----------- \nPerforms date arithmetic. The date argument specifies the\nstarting date or datetime value. expr is an expression\nspecifying the\ninterval value to be added or subtracted from the starting\ndate. expr is a\nstring; it may start with a \"-\" for negative intervals.\nunit is a\nkeyword indicating the units in which the expression should\nbe interpreted. See Date and Time Units for a complete list\nof permitted units. \n \nSee also DATE_SUB().\n \nExamples\n-------- \nSELECT \'2008-12-31 23:59:59\' + INTERVAL 1 SECOND;\n \n+-------------------------------------------+\n| \'2008-12-31 23:59:59\' + INTERVAL 1 SECOND |\n+-------------------------------------------+\n| 2009-01-01 00:00:00 |\n+-------------------------------------------+\n \nSELECT INTERVAL 1 DAY + \'2008-12-31\';\n \n+-------------------------------+\n| INTERVAL 1 DAY + \'2008-12-31\' |\n+-------------------------------+\n| 2009-01-01 |\n+-------------------------------+\n \nSELECT \'2005-01-01\' - INTERVAL 1 SECOND;\n \n+----------------------------------+\n| \'2005-01-01\' - INTERVAL 1 SECOND |\n+----------------------------------+\n| 2004-12-31 23:59:59 |\n+----------------------------------+\n \nSELECT DATE_ADD(\'2000-12-31 23:59:59\', INTERVAL 1 SECOND);\n+----------------------------------------------------+\n| DATE_ADD(\'2000-12-31 23:59:59\', INTERVAL 1 SECOND) |\n+----------------------------------------------------+\n| 2001-01-01 00:00:00 |\n+----------------------------------------------------+\n \nSELECT DATE_ADD(\'2010-12-31 23:59:59\', INTERVAL 1 DAY);\n+-------------------------------------------------+\n| DATE_ADD(\'2010-12-31 23:59:59\', INTERVAL 1 DAY) |\n+-------------------------------------------------+\n| 2011-01-01 23:59:59 |\n+-------------------------------------------------+\n \nSELECT DATE_ADD(\'2100-12-31 23:59:59\', INTERVAL \'1:1\'\nMINUTE_SECOND);\n+---------------------------------------------------------------+\n| DATE_ADD(\'2100-12-31 23:59:59\', INTERVAL \'1:1\'\nMINUTE_SECOND) |\n+---------------------------------------------------------------+\n| 2101-01-01 00:01:00 |\n+---------------------------------------------------------------+\n \nSELECT DATE_ADD(\'1900-01-01 00:00:00\', INTERVAL \'-1 10\'\nDAY_HOUR);\n+------------------------------------------------------------+\n| DATE_ADD(\'1900-01-01 00:00:00\', INTERVAL \'-1 10\'\nDAY_HOUR) |\n+------------------------------------------------------------+\n| 1899-12-30 14:00:00 |\n+------------------------------------------------------------+\n \nSELECT DATE_ADD(\'1992-12-31 23:59:59.000002\', INTERVAL\n\'1.999999\' SECOND_MICROSECOND);\n+--------------------------------------------------------------------------------+\n| DATE_ADD(\'1992-12-31 23:59:59.000002\', INTERVAL\n\'1.999999\' SECOND_MICROSECOND) |\n+--------------------------------------------------------------------------------+\n| 1993-01-01 00:00:01.000001 |\n+--------------------------------------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/date_add/', '', 'https://mariadb.com/kb/en/date_add/'),
(480, 'DATE_FORMAT', 31, 'Syntax\n------ \nDATE_FORMAT(date, format[, locale])\n \nDescription\n----------- \nFormats the date value according to the format string. \n \nThe language used for the names is controlled by the value\nof the lc_time_names system variable. See server locale for\nmore on the supported locales.\n \nThe options that can be used by DATE_FORMAT(), as well as\nits inverse STR_TO_DATE() and the FROM_UNIXTIME() function,\nare:\n \nOption | Description | \n \n%a | Short weekday name in current locale (Variable\nlc_time_names). | \n \n%b | Short form month name in current locale. For locale\nen_US this is one of:\nJan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov or Dec. | \n \n%c | Month with 1 or 2 digits. | \n \n%D | Day with English suffix \'th\', \'nd\', \'st\' or\n\'rd\'\'. (1st, 2nd, 3rd...). | \n \n%d | Day with 2 digits. | \n \n%e | Day with 1 or 2 digits. | \n \n%f | Sub seconds 6 digits. | \n \n%H | Hour with 2 digits between 00-23. | \n \n%h | Hour with 2 digits between 01-12. | \n \n%I | Hour with 2 digits between 01-12. | \n \n%i | Minute with 2 digits. | \n \n%j | Day of the year (001-366) | \n \n%k | Hour with 1 digits between 0-23. | \n \n%l | Hour with 1 digits between 1-12. | \n \n%M | Full month name in current locale (Variable\nlc_time_names). | \n \n%m | Month with 2 digits. | \n \n%p | AM/PM according to current locale (Variable\nlc_time_names). | \n \n%r | Time in 12 hour format, followed by AM/PM. Short for\n\'%I:%i:%S %p\'. | \n \n%S | Seconds with 2 digits. | \n \n%s | Seconds with 2 digits. | \n \n%T | Time in 24 hour format. Short for \'%H:%i:%S\'. | \n \n%U | Week number (00-53), when first day of the week is\nSunday. | \n \n%u | Week number (00-53), when first day of the week is\nMonday. | \n \n%V | Week number (01-53), when first day of the week is\nSunday. Used with %X. | \n \n%v | Week number (01-53), when first day of the week is\nMonday. Used with %x. | \n \n%W | Full weekday name in current locale (Variable\nlc_time_names). | \n \n%w | Day of the week. 0 = Sunday, 6 = Saturday. | \n \n%X | Year with 4 digits when first day of the week is\nSunday. Used with %V. | \n \n%x | Year with 4 digits when first day of the week is\nMonday. Used with %v. | \n \n%Y | Year with 4 digits. | \n \n%y | Year with 2 digits. | \n \n%# | For str_to_date(), skip all numbers. | \n \n%. | For str_to_date(), skip all punctation characters. | \n \n%@ | For str_to_date(), skip all alpha characters. | \n \n%% | A literal % character. | \n \nTo get a date in one of the standard formats, GET_FORMAT()\ncan be used.\n \nExamples\n-------- \nSELECT DATE_FORMAT(\'2009-10-04 22:23:00\', \'%W %M %Y\');\n+------------------------------------------------+\n| DATE_FORMAT(\'2009-10-04 22:23:00\', \'%W %M %Y\') |\n+------------------------------------------------+\n| Sunday October 2009 |\n+------------------------------------------------+\n \nSELECT DATE_FORMAT(\'2007-10-04 22:23:00\', \'%H:%i:%s\');\n+------------------------------------------------+\n| DATE_FORMAT(\'2007-10-04 22:23:00\', \'%H:%i:%s\') |\n+------------------------------------------------+\n| 22:23:00 |\n+------------------------------------------------+\n \nSELECT DATE_FORMAT(\'1900-10-04 22:23:00\', \'%D %y %a %d %m\n%b %j\');\n+------------------------------------------------------------+\n| DATE_FORMAT(\'1900-10-04 22:23:00\', \'%D %y %a %d %m %b\n%j\') |\n+------------------------------------------------------------+\n| 4th 00 Thu 04 10 Oct 277 |\n+------------------------------------------------------------+\n \nSELECT DATE_FORMAT(\'1997-10-04 22:23:00\', \'%H %k %I %r %T\n%S %w\');\n+------------------------------------------------------------+\n| DATE_FORMAT(\'1997-10-04 22:23:00\', \'%H %k %I %r %T %S\n%w\') |\n+------------------------------------------------------------+\n| 22 22 10 10:23:00 PM 22:23:00 00 6 |\n+------------------------------------------------------------+\n \nSELECT DATE_FORMAT(\'1999-01-01\', \'%X %V\');\n+------------------------------------+\n| DATE_FORMAT(\'1999-01-01\', \'%X %V\') |\n+------------------------------------+\n| 1998 52 |\n+------------------------------------+\n \nSELECT DATE_FORMAT(\'2006-06-00\', \'%d\');\n+---------------------------------+\n| DATE_FORMAT(\'2006-06-00\', \'%d\') |\n+---------------------------------+\n| 00 |\n+---------------------------------+\n \nOptionally, the locale can be explicitly specified as the\nthird DATE_FORMAT() argument. Doing so makes the function\nindependent from the session settings, and the three\nargument version of DATE_FORMAT() can be used in virtual\nindexed and persistent generated-columns:\n \nSELECT DATE_FORMAT(\'2006-01-01\', \'%W\', \'el_GR\');\n+------------------------------------------+\n| DATE_FORMAT(\'2006-01-01\', \'%W\', \'el_GR\') |\n+------------------------------------------+\n| Κυριακή |\n+------------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/date_format/', '', 'https://mariadb.com/kb/en/date_format/'),
(481, 'DATE_SUB', 31, 'Syntax\n------ \nDATE_SUB(date,INTERVAL expr unit)\n \nDescription\n----------- \nPerforms date arithmetic. The date argument specifies the\nstarting date or datetime value. expr is an expression\nspecifying the\ninterval value to be added or subtracted from the starting\ndate. expr is a\nstring; it may start with a \"-\" for negative intervals.\nunit is a\nkeyword indicating the units in which the expression should\nbe interpreted. See Date and Time Units for a complete list\nof permitted units. \n \nSee also DATE_ADD().\n \nExamples\n-------- \nSELECT DATE_SUB(\'1998-01-02\', INTERVAL 31 DAY);\n+-----------------------------------------+\n| DATE_SUB(\'1998-01-02\', INTERVAL 31 DAY) |\n+-----------------------------------------+\n| 1997-12-02 |\n+-----------------------------------------+\n \nSELECT DATE_SUB(\'2005-01-01 00:00:00\', INTERVAL \'1\n1:1:1\' DAY_SECOND);\n+----------------------------------------------------------------+\n| DATE_SUB(\'2005-01-01 00:00:00\', INTERVAL \'1 1:1:1\'\nDAY_SECOND) |\n+----------------------------------------------------------------+\n| 2004-12-30 22:58:59 |\n+----------------------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/date_sub/', '', 'https://mariadb.com/kb/en/date_sub/'),
(483, 'DAYNAME', 31, 'Syntax\n------ \nDAYNAME(date)\n \nDescription\n----------- \nReturns the name of the weekday for date. The language used\nfor the name is controlled by the value\nof the lc_time_names system variable. See server locale for\nmore on the supported locales.\n \nExamples\n-------- \nSELECT DAYNAME(\'2007-02-03\');\n+-----------------------+\n| DAYNAME(\'2007-02-03\') |\n+-----------------------+\n| Saturday |\n+-----------------------+\n \nCREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n (\"2007-01-30 21:31:07\"),\n (\"1983-10-15 06:42:51\"),\n (\"2011-04-21 12:34:56\"),\n (\"2011-10-30 06:31:41\"),\n (\"2011-01-30 14:03:25\"),\n (\"2004-10-07 11:19:34\");\n \nSELECT d, DAYNAME(d) FROM t1;\n \n+---------------------+------------+\n| d | DAYNAME(d) |\n+---------------------+------------+\n| 2007-01-30 21:31:07 | Tuesday |\n| 1983-10-15 06:42:51 | Saturday |\n| 2011-04-21 12:34:56 | Thursday |\n| 2011-10-30 06:31:41 | Sunday |\n| 2011-01-30 14:03:25 | Sunday |\n| 2004-10-07 11:19:34 | Thursday |\n+---------------------+------------+\n \nChanging the locale:\n \nSET lc_time_names = \'fr_CA\';\n \nSELECT DAYNAME(\'2013-04-01\');\n+-----------------------+\n| DAYNAME(\'2013-04-01\') |\n+-----------------------+\n| lundi |\n+-----------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/dayname/', '', 'https://mariadb.com/kb/en/dayname/'),
(484, 'DAYOFMONTH', 31, 'Syntax\n------ \nDAYOFMONTH(date)\n \nDescription\n----------- \nReturns the day of the month for date, in the range 1 to 31,\nor 0\nfor dates such as \'0000-00-00\' or \'2008-00-00\' which\nhave a zero day\npart.\n \nDAY() is a synonym.\n \nExamples\n-------- \nSELECT DAYOFMONTH(\'2007-02-03\');\n+--------------------------+\n| DAYOFMONTH(\'2007-02-03\') |\n+--------------------------+\n| 3 |\n+--------------------------+\n \nCREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n (\"2007-01-30 21:31:07\"),\n (\"1983-10-15 06:42:51\"),\n (\"2011-04-21 12:34:56\"),\n (\"2011-10-30 06:31:41\"),\n (\"2011-01-30 14:03:25\"),\n (\"2004-10-07 11:19:34\");\n \nSELECT d FROM t1 where DAYOFMONTH(d) = 30;\n \n+---------------------+\n| d |\n+---------------------+\n| 2007-01-30 21:31:07 |\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n+---------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/dayofmonth/', '', 'https://mariadb.com/kb/en/dayofmonth/'),
(485, 'DAYOFWEEK', 31, 'Syntax\n------ \nDAYOFWEEK(date)\n \nDescription\n----------- \nReturns the day of the week index for the date (1 = Sunday,\n2 = Monday, ..., 7 =\nSaturday). These index values correspond to the ODBC\nstandard.\n \nThis contrasts with WEEKDAY() which follows a different\nindex numbering\n(0 = Monday, 1 = Tuesday, ... 6 = Sunday).\n \nExamples\n-------- \nSELECT DAYOFWEEK(\'2007-02-03\');\n+-------------------------+\n| DAYOFWEEK(\'2007-02-03\') |\n+-------------------------+\n| 7 |\n+-------------------------+\n \nCREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n (\"2007-01-30 21:31:07\"),\n (\"1983-10-15 06:42:51\"),\n (\"2011-04-21 12:34:56\"),\n (\"2011-10-30 06:31:41\"),\n (\"2011-01-30 14:03:25\"),\n (\"2004-10-07 11:19:34\");\n \nSELECT d, DAYNAME(d), DAYOFWEEK(d), WEEKDAY(d) from t1;\n \n+---------------------+------------+--------------+------------+\n| d | DAYNAME(d) | DAYOFWEEK(d) | WEEKDAY(d) |\n+---------------------+------------+--------------+------------+\n| 2007-01-30 21:31:07 | Tuesday | 3 | 1 |\n| 1983-10-15 06:42:51 | Saturday | 7 | 5 |\n| 2011-04-21 12:34:56 | Thursday | 5 | 3 |\n| 2011-10-30 06:31:41 | Sunday | 1 | 6 |\n| 2011-01-30 14:03:25 | Sunday | 1 | 6 |\n| 2004-10-07 11:19:34 | Thursday | 5 | 3 |\n+---------------------+------------+--------------+------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/dayofweek/', '', 'https://mariadb.com/kb/en/dayofweek/'),
(487, 'EXTRACT', 31, 'Syntax\n------ \nEXTRACT(unit FROM date)\n \nDescription\n----------- \nThe EXTRACT() function extracts the required unit from the\ndate. See Date and Time Units for a complete list of\npermitted units.\n \nIn MariaDB 10.0.7 and MariaDB 5.5.35, EXTRACT (HOUR FROM\n...) was changed to return a value from 0 to 23, adhering to\nthe SQL standard. Until MariaDB 10.0.6 and MariaDB 5.5.34,\nand in all versions of MySQL at least as of MySQL 5.7, it\ncould return a value > 23. HOUR() is not a standard\nfunction, so continues to adhere to the old behaviour\ninherited from MySQL.\n \nExamples\n-------- \nSELECT EXTRACT(YEAR FROM \'2009-07-02\');\n+---------------------------------+\n| EXTRACT(YEAR FROM \'2009-07-02\') |\n+---------------------------------+\n| 2009 |\n+---------------------------------+\n \nSELECT EXTRACT(YEAR_MONTH FROM \'2009-07-02 01:02:03\');\n+------------------------------------------------+\n| EXTRACT(YEAR_MONTH FROM \'2009-07-02 01:02:03\') |\n+------------------------------------------------+\n| 200907 |\n+------------------------------------------------+\n \nSELECT EXTRACT(DAY_MINUTE FROM \'2009-07-02 01:02:03\');\n+------------------------------------------------+\n| EXTRACT(DAY_MINUTE FROM \'2009-07-02 01:02:03\') |\n+------------------------------------------------+\n| 20102 |\n+------------------------------------------------+\n \nSELECT EXTRACT(MICROSECOND FROM \'2003-01-02\n10:30:00.000123\');\n+--------------------------------------------------------+\n| EXTRACT(MICROSECOND FROM \'2003-01-02 10:30:00.000123\') |\n+--------------------------------------------------------+\n| 123 |\n+--------------------------------------------------------+\n \nFrom MariaDB 10.0.7 and MariaDB 5.5.35, EXTRACT (HOUR\nFROM...) returns a value from 0 to 23, as per the SQL\nstandard. HOUR is not a standard function, so continues to\nadhere to the old behaviour inherited from MySQL.\n \nSELECT EXTRACT(HOUR FROM \'26:30:00\'), HOUR(\'26:30:00\');\n+-------------------------------+------------------+\n| EXTRACT(HOUR FROM \'26:30:00\') | HOUR(\'26:30:00\') |\n+-------------------------------+------------------+\n| 2 | 26 |\n+-------------------------------+------------------+\n \n\n\nURL: https://mariadb.com/kb/en/extract/', '', 'https://mariadb.com/kb/en/extract/'),
(489, 'FROM_UNIXTIME', 31, 'Syntax\n------ \nFROM_UNIXTIME(unix_timestamp),\nFROM_UNIXTIME(unix_timestamp,format)\n \nDescription\n----------- \nReturns a representation of the unix_timestamp argument as a\nvalue in\n\'YYYY-MM-DD HH:MM:SS\' or YYYYMMDDHHMMSS.uuuuuu format,\ndepending on\nwhether the function is used in a string or numeric context.\nThe value\nis expressed in the current time zone. unix_timestamp is an\ninternal\ntimestamp value such as is produced by the UNIX_TIMESTAMP()\nfunction.\n \nIf format is given, the result is formatted according to the\nformat\nstring, which is used the same way as listed in the entry\nfor the\nDATE_FORMAT() function.\n \nTimestamps in MariaDB have a maximum value of 2147483647,\nequivalent to 2038-01-19 05:14:07. This is due to the\nunderlying 32-bit limitation. Using the function on a\ntimestamp beyond this will result in NULL being returned.\nUse DATETIME as a storage type if you require dates beyond\nthis.\n \nThe options that can be used by FROM_UNIXTIME(), as well as\nDATE_FORMAT() and STR_TO_DATE(), are:\n \nOption | Description | \n \n%a | Short weekday name in current locale (Variable\nlc_time_names). | \n \n%b | Short form month name in current locale. For locale\nen_US this is one of:\nJan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov or Dec. | \n \n%c | Month with 1 or 2 digits. | \n \n%D | Day with English suffix \'th\', \'nd\', \'st\' or\n\'rd\'\'. (1st, 2nd, 3rd...). | \n \n%d | Day with 2 digits. | \n \n%e | Day with 1 or 2 digits. | \n \n%f | Sub seconds 6 digits. | \n \n%H | Hour with 2 digits between 00-23. | \n \n%h | Hour with 2 digits between 01-12. | \n \n%I | Hour with 2 digits between 01-12. | \n \n%i | Minute with 2 digits. | \n \n%j | Day of the year (001-366) | \n \n%k | Hour with 1 digits between 0-23. | \n \n%l | Hour with 1 digits between 1-12. | \n \n%M | Full month name in current locale (Variable\nlc_time_names). | \n \n%m | Month with 2 digits. | \n \n%p | AM/PM according to current locale (Variable\nlc_time_names). | \n \n%r | Time in 12 hour format, followed by AM/PM. Short for\n\'%I:%i:%S %p\'. | \n \n%S | Seconds with 2 digits. | \n \n%s | Seconds with 2 digits. | \n \n%T | Time in 24 hour format. Short for \'%H:%i:%S\'. | \n \n%U | Week number (00-53), when first day of the week is\nSunday. | \n \n%u | Week number (00-53), when first day of the week is\nMonday. | \n \n%V | Week number (01-53), when first day of the week is\nSunday. Used with %X. | \n \n%v | Week number (01-53), when first day of the week is\nMonday. Used with %x. | \n \n%W | Full weekday name in current locale (Variable\nlc_time_names). | \n \n%w | Day of the week. 0 = Sunday, 1 = Saturday. | \n \n%X | Year with 4 digits when first day of the week is\nSunday. Used with %V. | \n \n%x | Year with 4 digits when first day of the week is\nSunday. Used with %v. | \n \n%Y | Year with 4 digits. | \n \n%y | Year with 2 digits. | \n \n%# | For str_to_date(), skip all numbers. | \n \n%. | For str_to_date(), skip all punctation characters. | \n \n%@ | For str_to_date(), skip all alpha characters. | \n \n%% | A literal % character. | \n \nPerformance Considerations\n \nIf your session time zone is set to SYSTEM (the default),\nFROM_UNIXTIME() will call the OS function to convert the\ndata using the system time zone. At least on Linux, the\ncorresponding function (localtime_r) uses a global mutex\ninside glibc that can cause contention under high concurrent\nload.\n \nSet your time zone to a named time zone to avoid this issue.\nSee mysql time zone tables for details on how to do this.\n \nExamples\n-------- \nSELECT FROM_UNIXTIME(1196440219);\n+---------------------------+\n| FROM_UNIXTIME(1196440219) |\n+---------------------------+\n| 2007-11-30 11:30:19 |\n+---------------------------+\n \nSELECT FROM_UNIXTIME(1196440219) + 0;\n \n+-------------------------------+\n| FROM_UNIXTIME(1196440219) + 0 |\n+-------------------------------+\n| 20071130113019.000000 |\n+-------------------------------+\n \nSELECT FROM_UNIXTIME(UNIX_TIMESTAMP(), \'%Y %D %M %h:%i:%s\n%x\');\n+---------------------------------------------------------+\n| FROM_UNIXTIME(UNIX_TIMESTAMP(), \'%Y %D %M %h:%i:%s %x\')\n|\n+---------------------------------------------------------+\n| 2010 27th March 01:03:47 2010 |\n+---------------------------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/from_unixtime/', '', 'https://mariadb.com/kb/en/from_unixtime/'),
(490, 'GET_FORMAT', 31, 'Syntax\n------ \nGET_FORMAT({DATE|DATETIME|TIME},\n{\'EUR\'|\'USA\'|\'JIS\'|\'ISO\'|\'INTERNAL\'})\n \nDescription\n----------- \nReturns a format string. This function is useful in\ncombination with\nthe DATE_FORMAT() and the STR_TO_DATE() functions.\n \nPossible result formats are:\n \nFunction Call | Result Format | \n \nGET_FORMAT(DATE,\'EUR\') | \'%d.%m.%Y\' | \n \nGET_FORMAT(DATE,\'USA\') | \'%m.%d.%Y\' | \n \nGET_FORMAT(DATE,\'JIS\') | \'%Y-%m-%d\' | \n \nGET_FORMAT(DATE,\'ISO\') | \'%Y-%m-%d\' | \n \nGET_FORMAT(DATE,\'INTERNAL\') | \'%Y%m%d\' | \n \nGET_FORMAT(DATETIME,\'EUR\') | \'%Y-%m-%d %H.%i.%s\' | \n \nGET_FORMAT(DATETIME,\'USA\') | \'%Y-%m-%d %H.%i.%s\' | \n \nGET_FORMAT(DATETIME,\'JIS\') | \'%Y-%m-%d %H:%i:%s\' | \n \nGET_FORMAT(DATETIME,\'ISO\') | \'%Y-%m-%d %H:%i:%s\' | \n \nGET_FORMAT(DATETIME,\'INTERNAL\') | \'%Y%m%d%H%i%s\' | \n \nGET_FORMAT(TIME,\'EUR\') | \'%H.%i.%s\' | \n \nGET_FORMAT(TIME,\'USA\') | \'%h:%i:%s %p\' | \n \nGET_FORMAT(TIME,\'JIS\') | \'%H:%i:%s\' | \n \nGET_FORMAT(TIME,\'ISO\') | \'%H:%i:%s\' | \n \nGET_FORMAT(TIME,\'INTERNAL\') | \'%H%i%s\' | \n \nExamples\n-------- \nObtaining the string matching to the standard European date\nformat:\n \nSELECT GET_FORMAT(DATE, \'EUR\');\n+-------------------------+\n| GET_FORMAT(DATE, \'EUR\') |\n+-------------------------+\n| %d.%m.%Y |\n+-------------------------+\n \nUsing the same string to format a date:\n \nSELECT DATE_FORMAT(\'2003-10-03\',GET_FORMAT(DATE,\'EUR\'));\n+--------------------------------------------------+\n| DATE_FORMAT(\'2003-10-03\',GET_FORMAT(DATE,\'EUR\')) |\n+--------------------------------------------------+\n| 03.10.2003 |\n+--------------------------------------------------+\n \nSELECT STR_TO_DATE(\'10.31.2003\',GET_FORMAT(DATE,\'USA\'));\n+--------------------------------------------------+\n| STR_TO_DATE(\'10.31.2003\',GET_FORMAT(DATE,\'USA\')) |\n+--------------------------------------------------+\n| 2003-10-31 |\n+--------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/get_format/', '', 'https://mariadb.com/kb/en/get_format/'),
(491, 'HOUR', 31, 'Syntax\n------ \nHOUR(time)\n \nDescription\n----------- \nReturns the hour for time. The range of the return value is\n0 to 23\nfor time-of-day values. However, the range of TIME values\nactually is\nmuch larger, so HOUR can return values greater than 23.\n \nThe return value is always positive, even if a negative TIME\nvalue is provided.\n \nExamples\n-------- \nSELECT HOUR(\'10:05:03\');\n+------------------+\n| HOUR(\'10:05:03\') |\n+------------------+\n| 10 |\n+------------------+\n \nSELECT HOUR(\'272:59:59\');\n+-------------------+\n| HOUR(\'272:59:59\') |\n+-------------------+\n| 272 |\n+-------------------+\n \nDifference between EXTRACT (HOUR FROM ...) (>= MariaDB\n10.0.7 and MariaDB 5.5.35) and HOUR:\n \nSELECT EXTRACT(HOUR FROM \'26:30:00\'), HOUR(\'26:30:00\');\n+-------------------------------+------------------+\n| EXTRACT(HOUR FROM \'26:30:00\') | HOUR(\'26:30:00\') |\n+-------------------------------+------------------+\n| 2 | 26 |\n+-------------------------------+------------------+\n \n\n\nURL: https://mariadb.com/kb/en/hour/', '', 'https://mariadb.com/kb/en/hour/'),
(492, 'LAST_DAY', 31, 'Syntax\n------ \nLAST_DAY(date)\n \nDescription\n----------- \nTakes a date or datetime value and returns the corresponding\nvalue for\nthe last day of the month. Returns NULL if the argument is\ninvalid.\n \nExamples\n-------- \nSELECT LAST_DAY(\'2003-02-05\');\n+------------------------+\n| LAST_DAY(\'2003-02-05\') |\n+------------------------+\n| 2003-02-28 |\n+------------------------+\n \nSELECT LAST_DAY(\'2004-02-05\');\n+------------------------+\n| LAST_DAY(\'2004-02-05\') |\n+------------------------+\n| 2004-02-29 |\n+------------------------+\n \nSELECT LAST_DAY(\'2004-01-01 01:01:01\');\n+---------------------------------+\n| LAST_DAY(\'2004-01-01 01:01:01\') |\n+---------------------------------+\n| 2004-01-31 |\n+---------------------------------+\n \nSELECT LAST_DAY(\'2003-03-32\');\n+------------------------+\n| LAST_DAY(\'2003-03-32\') |\n+------------------------+\n| NULL |\n+------------------------+\n1 row in set, 1 warning (0.00 sec)\n \nWarning (Code 1292): Incorrect datetime value:\n\'2003-03-32\'\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/last_day/', '', 'https://mariadb.com/kb/en/last_day/'),
(495, 'MAKEDATE', 31, 'Syntax\n------ \nMAKEDATE(year,dayofyear)\n \nDescription\n----------- \nReturns a date, given year and day-of-year values. dayofyear\nmust be\ngreater than 0 or the result is NULL.\n \nExamples\n-------- \nSELECT MAKEDATE(2011,31), MAKEDATE(2011,32);\n+-------------------+-------------------+\n| MAKEDATE(2011,31) | MAKEDATE(2011,32) |\n+-------------------+-------------------+\n| 2011-01-31 | 2011-02-01 |\n+-------------------+-------------------+\n \nSELECT MAKEDATE(2011,365), MAKEDATE(2014,365);\n+--------------------+--------------------+\n| MAKEDATE(2011,365) | MAKEDATE(2014,365) |\n+--------------------+--------------------+\n| 2011-12-31 | 2014-12-31 |\n+--------------------+--------------------+\n \nSELECT MAKEDATE(2011,0);\n+------------------+\n| MAKEDATE(2011,0) |\n+------------------+\n| NULL |\n+------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/makedate/', '', 'https://mariadb.com/kb/en/makedate/'),
(496, 'MAKETIME', 31, 'Syntax\n------ \nMAKETIME(hour,minute,second)\n \nDescription\n----------- \nReturns a time value calculated from the hour, minute, and\nsecond arguments.\n \nIf minute or second are out of the range 0 to 60, NULL is\nreturned. The hour can be in the range -838 to 838, outside\nof which the value is truncated with a warning.\n \nExamples\n-------- \nSELECT MAKETIME(13,57,33);\n+--------------------+\n| MAKETIME(13,57,33) |\n+--------------------+\n| 13:57:33 |\n+--------------------+\n \nSELECT MAKETIME(-13,57,33);\n+---------------------+\n| MAKETIME(-13,57,33) |\n+---------------------+\n| -13:57:33 |\n+---------------------+\n \nSELECT MAKETIME(13,67,33);\n+--------------------+\n| MAKETIME(13,67,33) |\n+--------------------+\n| NULL |\n+--------------------+\n \nSELECT MAKETIME(-1000,57,33);\n+-----------------------+\n| MAKETIME(-1000,57,33) |\n+-----------------------+\n| -838:59:59 |\n+-----------------------+\n1 row in set, 1 warning (0.00 sec)\n \nSHOW WARNINGS;\n \n+---------+------+-----------------------------------------------+\n| Level | Code | Message |\n+---------+------+-----------------------------------------------+\n| Warning | 1292 | Truncated incorrect time value:\n\'-1000:57:33\' |\n+---------+------+-----------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/maketime/', '', 'https://mariadb.com/kb/en/maketime/'),
(497, 'MICROSECOND', 31, 'Syntax\n------ \nMICROSECOND(expr)\n \nDescription\n----------- \nReturns the microseconds from the time or datetime\nexpression expr as a number in the range from 0 to 999999.\n \nIf expr is a time with no microseconds, zero is returned,\nwhile if expr is a date with no time, zero with a warning is\nreturned.\n \nExamples\n-------- \nSELECT MICROSECOND(\'12:00:00.123456\');\n+--------------------------------+\n| MICROSECOND(\'12:00:00.123456\') |\n+--------------------------------+\n| 123456 |\n+--------------------------------+\n \nSELECT MICROSECOND(\'2009-12-31 23:59:59.000010\');\n+-------------------------------------------+\n| MICROSECOND(\'2009-12-31 23:59:59.000010\') |\n+-------------------------------------------+\n| 10 |\n+-------------------------------------------+\n \nSELECT MICROSECOND(\'2013-08-07 12:13:14\');\n+------------------------------------+\n| MICROSECOND(\'2013-08-07 12:13:14\') |\n+------------------------------------+\n| 0 |\n+------------------------------------+\n \nSELECT MICROSECOND(\'2013-08-07\');\n+---------------------------+\n| MICROSECOND(\'2013-08-07\') |\n+---------------------------+\n| 0 |\n+---------------------------+\n1 row in set, 1 warning (0.00 sec)\n \nSHOW WARNINGS;\n \n+---------+------+----------------------------------------------+\n| Level | Code | Message |\n+---------+------+----------------------------------------------+\n| Warning | 1292 | Truncated incorrect time value:\n\'2013-08-07\' |\n+---------+------+----------------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/microsecond/', '', 'https://mariadb.com/kb/en/microsecond/'),
(501, 'NOW', 31, 'Syntax\n------ \nNOW([precision])\nCURRENT_TIMESTAMP\nCURRENT_TIMESTAMP([precision])\nLOCALTIME, LOCALTIME([precision])\nLOCALTIMESTAMP\nLOCALTIMESTAMP([precision])\n \nDescription\n----------- \nReturns the current date and time as a value in \'YYYY-MM-DD\nHH:MM:SS\'\nor YYYYMMDDHHMMSS.uuuuuu format, depending on whether the\nfunction is\nused in a string or numeric context. The value is expressed\nin the\ncurrent time zone.\n \nThe optional precision determines the microsecond precision.\nSee Microseconds in MariaDB.\n \nNOW() (or its synonyms) can be used as the default value for\nTIMESTAMP columns as well as, since MariaDB 10.0.1, DATETIME\ncolumns. Before MariaDB 10.0.1, it was only possible for a\nsingle TIMESTAMP column per table to contain the\nCURRENT_TIMESTAMP as its default.\n \nWhen displayed in the INFORMATION_SCHEMA.COLUMNS table, a\ndefault CURRENT TIMESTAMP is displayed as CURRENT_TIMESTAMP\nup until MariaDB 10.2.2, and as current_timestamp() from\nMariaDB 10.2.3, due to to MariaDB 10.2 accepting expressions\nin the DEFAULT clause.\n \nExamples\n-------- \nSELECT NOW();\n+---------------------+\n| NOW() |\n+---------------------+\n| 2010-03-27 13:13:25 |\n+---------------------+\n \nSELECT NOW() + 0;\n \n+-----------------------+\n| NOW() + 0 |\n+-----------------------+\n| 20100327131329.000000 |\n+-----------------------+\n \nWith precision:\n \nSELECT CURRENT_TIMESTAMP(2);\n+------------------------+\n| CURRENT_TIMESTAMP(2) |\n+------------------------+\n| 2018-07-10 09:47:26.24 |\n+------------------------+\n \nUsed as a default TIMESTAMP:\n \nCREATE TABLE t (createdTS TIMESTAMP NOT NULL DEFAULT\nCURRENT_TIMESTAMP);\n \nFrom MariaDB 10.2.2:\n \nSELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE\nTABLE_SCHEMA=\'test\'\n AND COLUMN_NAME LIKE \'%ts%\'\\G\n*************************** 1. row\n***************************\n TABLE_CATALOG: def\n TABLE_SCHEMA: test\n TABLE_NAME: t\n COLUMN_NAME: ts\n ORDINAL_POSITION: 1\n COLUMN_DEFAULT: current_timestamp()\n...\n \n\n\nURL: https://mariadb.com/kb/en/now/', '', 'https://mariadb.com/kb/en/now/'),
(502, 'PERIOD_ADD', 31, 'Syntax\n------ \nPERIOD_ADD(P,N)\n \nDescription\n----------- \nAdds N months to period P. P is in the format YYMM or\nYYYYMM, and is not a date value. If P contains a two-digit\nyear, values from 00 to 69 are converted to from 2000 to\n2069, while values from 70 are converted to 1970 upwards.\n \nReturns a value in the format YYYYMM.\n \nExamples\n-------- \nSELECT PERIOD_ADD(200801,2);\n+----------------------+\n| PERIOD_ADD(200801,2) |\n+----------------------+\n| 200803 |\n+----------------------+\n \nSELECT PERIOD_ADD(6910,2);\n+--------------------+\n| PERIOD_ADD(6910,2) |\n+--------------------+\n| 206912 |\n+--------------------+\n \nSELECT PERIOD_ADD(7010,2);\n+--------------------+\n| PERIOD_ADD(7010,2) |\n+--------------------+\n| 197012 |\n+--------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/period_add/', '', 'https://mariadb.com/kb/en/period_add/'),
(503, 'PERIOD_DIFF', 31, 'Syntax\n------ \nPERIOD_DIFF(P1,P2)\n \nDescription\n----------- \nReturns the number of months between periods P1 and P2. P1\nand P2 \ncan be in the format YYMM or YYYYMM, and are not date\nvalues.\n \nIf P1 or P2 contains a two-digit year, values from 00 to 69\nare converted to from 2000 to 2069, while values from 70 are\nconverted to 1970 upwards.\n \nExamples\n-------- \nSELECT PERIOD_DIFF(200802,200703);\n+----------------------------+\n| PERIOD_DIFF(200802,200703) |\n+----------------------------+\n| 11 |\n+----------------------------+\n \nSELECT PERIOD_DIFF(6902,6803);\n+------------------------+\n| PERIOD_DIFF(6902,6803) |\n+------------------------+\n| 11 |\n+------------------------+\n \nSELECT PERIOD_DIFF(7002,6803);\n+------------------------+\n| PERIOD_DIFF(7002,6803) |\n+------------------------+\n| -1177 |\n+------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/period_diff/', '', 'https://mariadb.com/kb/en/period_diff/'),
(506, 'SEC_TO_TIME', 31, 'Syntax\n------ \nSEC_TO_TIME(seconds)\n \nDescription\n----------- \nReturns the seconds argument, converted to hours, minutes,\nand\nseconds, as a TIME value. The range of the result is\nconstrained to\nthat of the TIME data type. A warning occurs if the argument\ncorresponds to a value outside that range.\n \nThe time will be returned in the format hh:mm:ss, or hhmmss\nif used in a numeric calculation.\n \nExamples\n-------- \nSELECT SEC_TO_TIME(12414);\n+--------------------+\n| SEC_TO_TIME(12414) |\n+--------------------+\n| 03:26:54 |\n+--------------------+\n \nSELECT SEC_TO_TIME(12414)+0;\n \n+----------------------+\n| SEC_TO_TIME(12414)+0 |\n+----------------------+\n| 32654 |\n+----------------------+\n \nSELECT SEC_TO_TIME(9999999);\n+----------------------+\n| SEC_TO_TIME(9999999) |\n+----------------------+\n| 838:59:59 |\n+----------------------+\n1 row in set, 1 warning (0.00 sec)\n \nSHOW WARNINGS;\n \n+---------+------+-------------------------------------------+\n| Level | Code | Message |\n+---------+------+-------------------------------------------+\n| Warning | 1292 | Truncated incorrect time value:\n\'9999999\' |\n+---------+------+-------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/sec_to_time/', '', 'https://mariadb.com/kb/en/sec_to_time/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(507, 'STR_TO_DATE', 31, 'Syntax\n------ \nSTR_TO_DATE(str,format)\n \nDescription\n----------- \nThis is the inverse of the DATE_FORMAT() function. It takes\na string str and a format string format. STR_TO_DATE()\nreturns a\nDATETIME value if the format string contains both date and\ntime parts, or a\nDATE or TIME value if the string contains only date or time\nparts.\n \nThe date, time, or datetime values contained in str should\nbe given in the format indicated by format. If str contains\nan illegal date, time, or datetime value, STR_TO_DATE()\nreturns NULL. An illegal value also produces a warning.\n \nThe options that can be used by STR_TO_DATE(), as well as\nits inverse DATE_FORMAT() and the FROM_UNIXTIME() function,\nare:\n \nOption | Description | \n \n%a | Short weekday name in current locale (Variable\nlc_time_names). | \n \n%b | Short form month name in current locale. For locale\nen_US this is one of:\nJan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov or Dec. | \n \n%c | Month with 1 or 2 digits. | \n \n%D | Day with English suffix \'th\', \'nd\', \'st\' or\n\'rd\'\'. (1st, 2nd, 3rd...). | \n \n%d | Day with 2 digits. | \n \n%e | Day with 1 or 2 digits. | \n \n%f | Sub seconds 6 digits. | \n \n%H | Hour with 2 digits between 00-23. | \n \n%h | Hour with 2 digits between 01-12. | \n \n%I | Hour with 2 digits between 01-12. | \n \n%i | Minute with 2 digits. | \n \n%j | Day of the year (001-366) | \n \n%k | Hour with 1 digits between 0-23. | \n \n%l | Hour with 1 digits between 1-12. | \n \n%M | Full month name in current locale (Variable\nlc_time_names). | \n \n%m | Month with 2 digits. | \n \n%p | AM/PM according to current locale (Variable\nlc_time_names). | \n \n%r | Time in 12 hour format, followed by AM/PM. Short for\n\'%I:%i:%S %p\'. | \n \n%S | Seconds with 2 digits. | \n \n%s | Seconds with 2 digits. | \n \n%T | Time in 24 hour format. Short for \'%H:%i:%S\'. | \n \n%U | Week number (00-53), when first day of the week is\nSunday. | \n \n%u | Week number (00-53), when first day of the week is\nMonday. | \n \n%V | Week number (01-53), when first day of the week is\nSunday. Used with %X. | \n \n%v | Week number (01-53), when first day of the week is\nMonday. Used with %x. | \n \n%W | Full weekday name in current locale (Variable\nlc_time_names). | \n \n%w | Day of the week. 0 = Sunday, 6 = Saturday. | \n \n%X | Year with 4 digits when first day of the week is\nSunday. Used with %V. | \n \n%x | Year with 4 digits when first day of the week is\nMonday. Used with %v. | \n \n%Y | Year with 4 digits. | \n \n%y | Year with 2 digits. | \n \n%# | For str_to_date(), skip all numbers. | \n \n%. | For str_to_date(), skip all punctation characters. | \n \n%@ | For str_to_date(), skip all alpha characters. | \n \n%% | A literal % character. | \n \nExamples\n-------- \nSELECT STR_TO_DATE(\'Wednesday, June 2, 2014\', \'%W, %M %e,\n%Y\');\n+---------------------------------------------------------+\n| STR_TO_DATE(\'Wednesday, June 2, 2014\', \'%W, %M %e,\n%Y\') |\n+---------------------------------------------------------+\n| 2014-06-02 |\n+---------------------------------------------------------+\n \nSELECT STR_TO_DATE(\'Wednesday23423, June 2, 2014\', \'%W,\n%M %e, %Y\');\n+--------------------------------------------------------------+\n| STR_TO_DATE(\'Wednesday23423, June 2, 2014\', \'%W, %M %e,\n%Y\') |\n+--------------------------------------------------------------+\n| NULL |\n+--------------------------------------------------------------+\n1 row in set, 1 warning (0.00 sec)\n \nSHOW WARNINGS;\n \n+---------+------+-----------------------------------------------------------------------------------+\n| Level | Code | Message |\n+---------+------+-----------------------------------------------------------------------------------+\n| Warning | 1411 | Incorrect datetime value:\n\'Wednesday23423, June 2, 2014\' for function str_to_date |\n+---------+------+-----------------------------------------------------------------------------------+\n \nSELECT STR_TO_DATE(\'Wednesday23423, June 2, 2014\', \'%W%#,\n%M %e, %Y\');\n+----------------------------------------------------------------+\n| STR_TO_DATE(\'Wednesday23423, June 2, 2014\', \'%W%#, %M\n%e, %Y\') |\n+----------------------------------------------------------------+\n| 2014-06-02 |\n+----------------------------------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/str_to_date/', '', 'https://mariadb.com/kb/en/str_to_date/'),
(508, 'SUBDATE', 31, 'Syntax\n------ \nSUBDATE(date,INTERVAL expr unit), SUBDATE(expr,days)\n \nDescription\n----------- \nWhen invoked with the INTERVAL form of the second argument,\nSUBDATE()\nis a synonym for DATE_SUB(). See Date and Time Units for a\ncomplete list of permitted units. \n \nThe second form allows the use of an integer value for days.\nIn such\ncases, it is interpreted as the number of days to be\nsubtracted from\nthe date or datetime expression expr.\n \nExamples\n-------- \nSELECT DATE_SUB(\'2008-01-02\', INTERVAL 31 DAY);\n+-----------------------------------------+\n| DATE_SUB(\'2008-01-02\', INTERVAL 31 DAY) |\n+-----------------------------------------+\n| 2007-12-02 |\n+-----------------------------------------+\n \nSELECT SUBDATE(\'2008-01-02\', INTERVAL 31 DAY);\n+----------------------------------------+\n| SUBDATE(\'2008-01-02\', INTERVAL 31 DAY) |\n+----------------------------------------+\n| 2007-12-02 |\n+----------------------------------------+\n \nSELECT SUBDATE(\'2008-01-02 12:00:00\', 31);\n+------------------------------------+\n| SUBDATE(\'2008-01-02 12:00:00\', 31) |\n+------------------------------------+\n| 2007-12-02 12:00:00 |\n+------------------------------------+\n \nCREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n (\"2007-01-30 21:31:07\"),\n (\"1983-10-15 06:42:51\"),\n (\"2011-04-21 12:34:56\"),\n (\"2011-10-30 06:31:41\"),\n (\"2011-01-30 14:03:25\"),\n (\"2004-10-07 11:19:34\");\n \nSELECT d, SUBDATE(d, 10) from t1;\n \n+---------------------+---------------------+\n| d | SUBDATE(d, 10) |\n+---------------------+---------------------+\n| 2007-01-30 21:31:07 | 2007-01-20 21:31:07 |\n| 1983-10-15 06:42:51 | 1983-10-05 06:42:51 |\n| 2011-04-21 12:34:56 | 2011-04-11 12:34:56 |\n| 2011-10-30 06:31:41 | 2011-10-20 06:31:41 |\n| 2011-01-30 14:03:25 | 2011-01-20 14:03:25 |\n| 2004-10-07 11:19:34 | 2004-09-27 11:19:34 |\n+---------------------+---------------------+\n \nSELECT d, SUBDATE(d, INTERVAL 10 MINUTE) from t1;\n \n+---------------------+--------------------------------+\n| d | SUBDATE(d, INTERVAL 10 MINUTE) |\n+---------------------+--------------------------------+\n| 2007-01-30 21:31:07 | 2007-01-30 21:21:07 |\n| 1983-10-15 06:42:51 | 1983-10-15 06:32:51 |\n| 2011-04-21 12:34:56 | 2011-04-21 12:24:56 |\n| 2011-10-30 06:31:41 | 2011-10-30 06:21:41 |\n| 2011-01-30 14:03:25 | 2011-01-30 13:53:25 |\n| 2004-10-07 11:19:34 | 2004-10-07 11:09:34 |\n+---------------------+--------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/subdate/', '', 'https://mariadb.com/kb/en/subdate/'),
(509, 'SUBTIME', 31, 'Syntax\n------ \nSUBTIME(expr1,expr2)\n \nDescription\n----------- \nSUBTIME() returns expr1 - expr2 expressed as a value in the\nsame\nformat as expr1. expr1 is a time or datetime expression, and\nexpr2 is\na time expression.\n \nExamples\n-------- \nSELECT SUBTIME(\'2007-12-31 23:59:59.999999\',\'1\n1:1:1.000002\');\n+--------------------------------------------------------+\n| SUBTIME(\'2007-12-31 23:59:59.999999\',\'1 1:1:1.000002\')\n|\n+--------------------------------------------------------+\n| 2007-12-30 22:58:58.999997 |\n+--------------------------------------------------------+\n \nSELECT SUBTIME(\'01:00:00.999999\', \'02:00:00.999998\');\n+-----------------------------------------------+\n| SUBTIME(\'01:00:00.999999\', \'02:00:00.999998\') |\n+-----------------------------------------------+\n| -00:59:59.999999 |\n+-----------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/subtime/', '', 'https://mariadb.com/kb/en/subtime/'),
(510, 'SYSDATE', 31, 'Syntax\n------ \nSYSDATE([precision])\n \nDescription\n----------- \nReturns the current date and time as a value in \'YYYY-MM-DD\nHH:MM:SS\'\nor YYYYMMDDHHMMSS.uuuuuu format, depending on whether the\nfunction is\nused in a string or numeric context.\n \nThe optional precision determines the microsecond precision.\nSee Microseconds in MariaDB.\n \nSYSDATE() returns the time at which it executes. This\ndiffers from the\nbehavior for NOW(), which returns a constant time that\nindicates the\ntime at which the statement began to execute. (Within a\nstored routine\nor trigger, NOW() returns the time at which the routine or\ntriggering\nstatement began to execute.)\n \nIn addition, changing the timestamp system variable with a\nSET timestamp statement affects the value returned by\nNOW() but not by SYSDATE(). This means that timestamp\nsettings in the\nbinary log have no effect on invocations of SYSDATE().\n \nBecause SYSDATE() can return different values even within\nthe same\nstatement, and is not affected by SET TIMESTAMP, it is\nnon-deterministic and therefore unsafe for replication if\nstatement-based binary logging is used. If that is a\nproblem, you can\nuse row-based logging, or start the server with the mysqld\noption --sysdate-is-now to cause SYSDATE() to be an alias\nfor NOW(). The non-deterministic nature of SYSDATE() also\nmeans that indexes cannot be used for evaluating expressions\nthat refer to it, and that statements using the SYSDATE()\nfunction are unsafe for statement-based replication.\n \nExamples\n-------- \nDifference between NOW() and SYSDATE():\n \nSELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW() | SLEEP(2) | NOW() |\n+---------------------+----------+---------------------+\n| 2010-03-27 13:23:40 | 0 | 2010-03-27 13:23:40 |\n+---------------------+----------+---------------------+\n \nSELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE() | SLEEP(2) | SYSDATE() |\n+---------------------+----------+---------------------+\n| 2010-03-27 13:23:52 | 0 | 2010-03-27 13:23:54 |\n+---------------------+----------+---------------------+\n \nWith precision:\n \nSELECT SYSDATE(4);\n+--------------------------+\n| SYSDATE(4) |\n+--------------------------+\n| 2018-07-10 10:17:13.1689 |\n+--------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/sysdate/', '', 'https://mariadb.com/kb/en/sysdate/'),
(512, 'TIMEDIFF', 31, 'Syntax\n------ \nTIMEDIFF(expr1,expr2)\n \nDescription\n----------- \nTIMEDIFF() returns expr1 - expr2 expressed as a time value.\nexpr1 and\nexpr2 are time or date-and-time expressions, but both must\nbe of the\nsame type.\n \nExamples\n-------- \nSELECT TIMEDIFF(\'2000:01:01 00:00:00\', \'2000:01:01\n00:00:00.000001\');\n+---------------------------------------------------------------+\n| TIMEDIFF(\'2000:01:01 00:00:00\', \'2000:01:01\n00:00:00.000001\') |\n+---------------------------------------------------------------+\n| -00:00:00.000001 |\n+---------------------------------------------------------------+\n \nSELECT TIMEDIFF(\'2008-12-31 23:59:59.000001\', \'2008-12-30\n01:01:01.000002\');\n+----------------------------------------------------------------------+\n| TIMEDIFF(\'2008-12-31 23:59:59.000001\', \'2008-12-30\n01:01:01.000002\') |\n+----------------------------------------------------------------------+\n| 46:58:57.999999 |\n+----------------------------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/timediff/', '', 'https://mariadb.com/kb/en/timediff/'),
(513, 'TIMESTAMP FUNCTION', 31, 'Syntax\n------ \nTIMESTAMP(expr), TIMESTAMP(expr1,expr2)\n \nDescription\n----------- \nWith a single argument, this function returns the date or\ndatetime\nexpression expr as a datetime value. With two arguments, it\nadds the\ntime expression expr2 to the date or datetime expression\nexpr1 and\nreturns the result as a datetime value.\n \nExamples\n-------- \nSELECT TIMESTAMP(\'2003-12-31\');\n+-------------------------+\n| TIMESTAMP(\'2003-12-31\') |\n+-------------------------+\n| 2003-12-31 00:00:00 |\n+-------------------------+\n \nSELECT TIMESTAMP(\'2003-12-31 12:00:00\',\'6:30:00\');\n+--------------------------------------------+\n| TIMESTAMP(\'2003-12-31 12:00:00\',\'6:30:00\') |\n+--------------------------------------------+\n| 2003-12-31 18:30:00 |\n+--------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/timestamp-function/', '', 'https://mariadb.com/kb/en/timestamp-function/'),
(514, 'TIMESTAMPADD', 31, 'Syntax\n------ \nTIMESTAMPADD(unit,interval,datetime_expr)\n \nDescription\n----------- \nAdds the integer expression interval to the date or datetime\nexpression datetime_expr. The unit for interval is given by\nthe unit\nargument, which should be one of the following values:\nMICROSECOND, SECOND, MINUTE, HOUR, DAY, WEEK, MONTH,\nQUARTER, or YEAR.\n \nThe unit value may be specified using one of keywords as\nshown, or\nwith a prefix of SQL_TSI_. For example, DAY and SQL_TSI_DAY\nboth are\nlegal.\n \nBefore MariaDB 5.5, FRAC_SECOND was permitted as a synonym\nfor MICROSECOND.\n \nExamples\n-------- \nSELECT TIMESTAMPADD(MINUTE,1,\'2003-01-02\');\n+-------------------------------------+\n| TIMESTAMPADD(MINUTE,1,\'2003-01-02\') |\n+-------------------------------------+\n| 2003-01-02 00:01:00 |\n+-------------------------------------+\n \nSELECT TIMESTAMPADD(WEEK,1,\'2003-01-02\');\n+-----------------------------------+\n| TIMESTAMPADD(WEEK,1,\'2003-01-02\') |\n+-----------------------------------+\n| 2003-01-09 |\n+-----------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/timestampadd/', '', 'https://mariadb.com/kb/en/timestampadd/'),
(515, 'TIMESTAMPDIFF', 31, 'Syntax\n------ \nTIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)\n \nDescription\n----------- \nReturns datetime_expr2 - datetime_expr1, where\ndatetime_expr1 and\ndatetime_expr2 are date or datetime expressions. One\nexpression may be\na date and the other a datetime; a date value is treated as\na datetime\nhaving the time part \'00:00:00\' where necessary. The unit\nfor the\nresult (an integer) is given by the unit argument. The legal\nvalues\nfor unit are the same as those listed in the description of\nthe\nTIMESTAMPADD() function, i.e MICROSECOND, SECOND, MINUTE,\nHOUR, DAY, WEEK, MONTH, QUARTER, or YEAR.\n \nTIMESTAMPDIFF can also be used to calculate age.\n \nExamples\n-------- \nSELECT TIMESTAMPDIFF(MONTH,\'2003-02-01\',\'2003-05-01\');\n+------------------------------------------------+\n| TIMESTAMPDIFF(MONTH,\'2003-02-01\',\'2003-05-01\') |\n+------------------------------------------------+\n| 3 |\n+------------------------------------------------+\n \nSELECT TIMESTAMPDIFF(YEAR,\'2002-05-01\',\'2001-01-01\');\n+-----------------------------------------------+\n| TIMESTAMPDIFF(YEAR,\'2002-05-01\',\'2001-01-01\') |\n+-----------------------------------------------+\n| -1 |\n+-----------------------------------------------+\n \nSELECT TIMESTAMPDIFF(MINUTE,\'2003-02-01\',\'2003-05-01\n12:05:55\');\n+----------------------------------------------------------+\n| TIMESTAMPDIFF(MINUTE,\'2003-02-01\',\'2003-05-01\n12:05:55\') |\n+----------------------------------------------------------+\n| 128885 |\n+----------------------------------------------------------+\n \nCalculating age:\n \nSELECT CURDATE();\n+------------+\n| CURDATE() |\n+------------+\n| 2019-05-27 |\n+------------+\n \nSELECT TIMESTAMPDIFF(YEAR, \'1971-06-06\', CURDATE()) AS\nage;\n \n+------+\n| age |\n+------+\n| 47 |\n+------+\n \nSELECT TIMESTAMPDIFF(YEAR, \'1971-05-06\', CURDATE()) AS\nage;\n \n+------+\n| age |\n+------+\n| 48 |\n+------+\n \nAge as of 2014-08-02:\n \nSELECT name, date_of_birth,\nTIMESTAMPDIFF(YEAR,date_of_birth,\'2014-08-02\') AS age \n FROM student_details;\n \n+---------+---------------+------+\n| name | date_of_birth | age |\n+---------+---------------+------+\n| Chun | 1993-12-31 | 20 |\n| Esben | 1946-01-01 | 68 |\n| Kaolin | 1996-07-16 | 18 |\n| Tatiana | 1988-04-13 | 26 |\n+---------+---------------+------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/timestampdiff/', '', 'https://mariadb.com/kb/en/timestampdiff/'),
(518, 'TO_DAYS', 31, 'Syntax\n------ \nTO_DAYS(date)\n \nDescription\n----------- \nGiven a date date, returns the number of days since the\nstart of the current calendar (0000-00-00).\n \nThe function is not designed for use with dates before the\nadvent of the Gregorian calendar in October 1582. Results\nwill not be reliable since it doesn\'t account for the lost\ndays when the calendar changed from the Julian calendar.\n \nThis is the converse of the FROM_DAYS() function.\n \nExamples\n-------- \nSELECT TO_DAYS(\'2007-10-07\');\n+-----------------------+\n| TO_DAYS(\'2007-10-07\') |\n+-----------------------+\n| 733321 |\n+-----------------------+\n \nSELECT TO_DAYS(\'0000-01-01\');\n+-----------------------+\n| TO_DAYS(\'0000-01-01\') |\n+-----------------------+\n| 1 |\n+-----------------------+\n \nSELECT TO_DAYS(950501);\n+-----------------+\n| TO_DAYS(950501) |\n+-----------------+\n| 728779 |\n+-----------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/to_days/', '', 'https://mariadb.com/kb/en/to_days/'),
(519, 'TO_SECONDS', 31, 'Syntax\n------ \nTO_SECONDS(expr)\n \nDescription\n----------- \nReturns the number of seconds from year 0 till expr, or NULL\nif expr is not a valid date or datetime.\n \nExamples\n-------- \nSELECT TO_SECONDS(\'2013-06-13\');\n+--------------------------+\n| TO_SECONDS(\'2013-06-13\') |\n+--------------------------+\n| 63538300800 |\n+--------------------------+\n \nSELECT TO_SECONDS(\'2013-06-13 21:45:13\');\n+-----------------------------------+\n| TO_SECONDS(\'2013-06-13 21:45:13\') |\n+-----------------------------------+\n| 63538379113 |\n+-----------------------------------+\n \nSELECT TO_SECONDS(NOW());\n+-------------------+\n| TO_SECONDS(NOW()) |\n+-------------------+\n| 63543530875 |\n+-------------------+\n \nSELECT TO_SECONDS(20130513);\n+----------------------+\n| TO_SECONDS(20130513) |\n+----------------------+\n| 63535622400 |\n+----------------------+\n1 row in set (0.00 sec)\n \nSELECT TO_SECONDS(130513);\n+--------------------+\n| TO_SECONDS(130513) |\n+--------------------+\n| 63535622400 |\n+--------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/to_seconds/', '', 'https://mariadb.com/kb/en/to_seconds/'),
(520, 'UNIX_TIMESTAMP', 31, 'Syntax\n------ \nUNIX_TIMESTAMP()\nUNIX_TIMESTAMP(date)\n \nDescription\n----------- \nIf called with no argument, returns a Unix timestamp\n(seconds since\n\'1970-01-01 00:00:00\' UTC) as an unsigned integer. If\nUNIX_TIMESTAMP()\nis called with a date argument, it returns the value of the\nargument as seconds\nsince \'1970-01-01 00:00:00\' UTC. date may be a DATE\nstring, a\nDATETIME string, a TIMESTAMP, or a number in\nthe format YYMMDD or YYYYMMDD. The server interprets date as\na value in the\ncurrent time zone and converts it to an internal value in\nUTC. Clients can set\ntheir time zone as described in time zones.\n \nThe inverse function of UNIX_TIMESTAMP() is FROM_UNIXTIME()\n \nUNIX_TIMESTAMP() supports microseconds.\n \nTimestamps in MariaDB have a maximum value of 2147483647,\nequivalent to 2038-01-19 05:14:07. This is due to the\nunderlying 32-bit limitation. Using the function on a date\nbeyond this will result in NULL being returned. Use DATETIME\nas a storage type if you require dates beyond this.\n \nError Handling\n \nReturns NULL for wrong arguments to UNIX_TIMESTAMP(). In\nMySQL and MariaDB before 5.3 wrong arguments to\nUNIX_TIMESTAMP() returned 0. \n \nCompatibility\n \nAs you can see in the examples above,\nUNIX_TIMESTAMP(constant-date-string) returns a timestamp\nwith 6 decimals while MariaDB 5.2 and before returns it\nwithout decimals. This can cause a problem if you are using\nUNIX_TIMESTAMP() as a partitioning function. You can fix\nthis by using FLOOR(UNIX_TIMESTAMP(..)) or changing the date\nstring to a date number, like 20080101000000. \n \nExamples\n-------- \nSELECT UNIX_TIMESTAMP();\n+------------------+\n| UNIX_TIMESTAMP() |\n+------------------+\n| 1269711082 |\n+------------------+\n \nSELECT UNIX_TIMESTAMP(\'2007-11-30 10:30:19\');\n+---------------------------------------+\n| UNIX_TIMESTAMP(\'2007-11-30 10:30:19\') |\n+---------------------------------------+\n| 1196436619.000000 |\n+---------------------------------------+\n \nSELECT UNIX_TIMESTAMP(\"2007-11-30 10:30:19.123456\");\n+----------------------------------------------+\n| unix_timestamp(\"2007-11-30 10:30:19.123456\") |\n+----------------------------------------------+\n| 1196411419.123456 |\n+----------------------------------------------+\n \nSELECT FROM_UNIXTIME(UNIX_TIMESTAMP(\'2007-11-30\n10:30:19\'));\n+------------------------------------------------------+\n| FROM_UNIXTIME(UNIX_TIMESTAMP(\'2007-11-30 10:30:19\')) |\n+------------------------------------------------------+\n| 2007-11-30 10:30:19.000000 |\n+------------------------------------------------------+\n \nSELECT FROM_UNIXTIME(FLOOR(UNIX_TIMESTAMP(\'2007-11-30\n10:30:19\')));\n+-------------------------------------------------------------+\n| FROM_UNIXTIME(FLOOR(UNIX_TIMESTAMP(\'2007-11-30\n10:30:19\'))) |\n+-------------------------------------------------------------+\n| 2007-11-30 10:30:19 |\n+-------------------------------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/unix_timestamp/', '', 'https://mariadb.com/kb/en/unix_timestamp/'),
(523, 'UTC_TIMESTAMP', 31, 'Syntax\n------ \nUTC_TIMESTAMP\nUTC_TIMESTAMP([precision])\n \nDescription\n----------- \nReturns the current UTC date and time as a value in\n\'YYYY-MM-DD\nHH:MM:SS\' or YYYYMMDDHHMMSS.uuuuuu format, depending on\nwhether the\nfunction is used in a string or numeric context.\n \nThe optional precision determines the microsecond precision.\nSee Microseconds in MariaDB.\n \nExamples\n-------- \nSELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;\n \n+---------------------+-----------------------+\n| UTC_TIMESTAMP() | UTC_TIMESTAMP() + 0 |\n+---------------------+-----------------------+\n| 2010-03-27 17:33:16 | 20100327173316.000000 |\n+---------------------+-----------------------+\n \nWith precision:\n \nSELECT UTC_TIMESTAMP(4);\n+--------------------------+\n| UTC_TIMESTAMP(4) |\n+--------------------------+\n| 2018-07-10 07:51:09.1019 |\n+--------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/utc_timestamp/', '', 'https://mariadb.com/kb/en/utc_timestamp/'),
(524, 'WEEK', 31, 'Syntax\n------ \nWEEK(date[,mode])\n \nDescription\n----------- \nThis function returns the week number for date. The\ntwo-argument form of\nWEEK() allows you to specify whether the week starts on\nSunday or Monday\nand whether the return value should be in the range from 0\nto 53 or from 1 to\n53. If the mode argument is omitted, the value of the\ndefault_week_format system variable is used.\n \nModes\n \nMode | 1st day of week | Range | Week 1 is the 1st week with\n| \n \n0 | Sunday | 0-53 | a Sunday in this year | \n \n1 | Monday | 0-53 | more than 3 days this year | \n \n2 | Sunday | 1-53 | a Sunday in this year | \n \n3 | Monday | 1-53 | more than 3 days this year | \n \n4 | Sunday | 0-53 | more than 3 days this year | \n \n5 | Monday | 0-53 | a Monday in this year | \n \n6 | Sunday | 1-53 | more than 3 days this year | \n \n7 | Monday | 1-53 | a Monday in this year | \n \nExamples\n-------- \nSELECT WEEK(\'2008-02-20\');\n+--------------------+\n| WEEK(\'2008-02-20\') |\n+--------------------+\n| 7 |\n+--------------------+\n \nSELECT WEEK(\'2008-02-20\',0);\n+----------------------+\n| WEEK(\'2008-02-20\',0) |\n+----------------------+\n| 7 |\n+----------------------+\n \nSELECT WEEK(\'2008-02-20\',1);\n+----------------------+\n| WEEK(\'2008-02-20\',1) |\n+----------------------+\n| 8 |\n+----------------------+\n \nSELECT WEEK(\'2008-12-31\',0);\n+----------------------+\n| WEEK(\'2008-12-31\',0) |\n+----------------------+\n| 52 |\n+----------------------+\n \nSELECT WEEK(\'2008-12-31\',1);\n+----------------------+\n| WEEK(\'2008-12-31\',1) |\n+----------------------+\n| 53 |\n+----------------------+\n \nCREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n (\"2007-01-30 21:31:07\"),\n (\"1983-10-15 06:42:51\"),\n (\"2011-04-21 12:34:56\"),\n (\"2011-10-30 06:31:41\"),\n (\"2011-01-30 14:03:25\"),\n (\"2004-10-07 11:19:34\");\n \nSELECT d, WEEK(d,0), WEEK(d,1) from t1;\n \n+---------------------+-----------+-----------+\n| d | WEEK(d,0) | WEEK(d,1) |\n+---------------------+-----------+-----------+\n| 2007-01-30 21:31:07 | 4 | 5 |\n| 1983-10-15 06:42:51 | 41 | 41 |\n| 2011-04-21 12:34:56 | 16 | 16 |\n| 2011-10-30 06:31:41 | 44 | 43 |\n| 2011-01-30 14:03:25 | 5 | 4 |\n| 2004-10-07 11:19:34 | 40 | 41 |\n+---------------------+-----------+-----------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/week/', '', 'https://mariadb.com/kb/en/week/'),
(525, 'WEEKDAY', 31, 'Syntax\n------ \nWEEKDAY(date)\n \nDescription\n----------- \nReturns the weekday index for date \n(0 = Monday, 1 = Tuesday, ... 6 = Sunday).\n \nThis contrasts with DAYOFWEEK() which follows the ODBC\nstandard\n(1 = Sunday, 2 = Monday, ..., 7 = Saturday).\n \nExamples\n-------- \nSELECT WEEKDAY(\'2008-02-03 22:23:00\');\n+--------------------------------+\n| WEEKDAY(\'2008-02-03 22:23:00\') |\n+--------------------------------+\n| 6 |\n+--------------------------------+\n \nSELECT WEEKDAY(\'2007-11-06\');\n+-----------------------+\n| WEEKDAY(\'2007-11-06\') |\n+-----------------------+\n| 1 |\n+-----------------------+\n \nCREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n (\"2007-01-30 21:31:07\"),\n (\"1983-10-15 06:42:51\"),\n (\"2011-04-21 12:34:56\"),\n (\"2011-10-30 06:31:41\"),\n (\"2011-01-30 14:03:25\"),\n (\"2004-10-07 11:19:34\");\n \nSELECT d FROM t1 where WEEKDAY(d) = 6;\n \n+---------------------+\n| d |\n+---------------------+\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n+---------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/weekday/', '', 'https://mariadb.com/kb/en/weekday/'),
(526, 'WEEKOFYEAR', 31, 'Syntax\n------ \nWEEKOFYEAR(date)\n \nDescription\n----------- \nReturns the calendar week of the date as a number in the\nrange from 1\nto 53. WEEKOFYEAR() is a compatibility function that is\nequivalent to\nWEEK(date,3).\n \nExamples\n-------- \nSELECT WEEKOFYEAR(\'2008-02-20\');\n+--------------------------+\n| WEEKOFYEAR(\'2008-02-20\') |\n+--------------------------+\n| 8 |\n+--------------------------+\n \nCREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n (\"2007-01-30 21:31:07\"),\n (\"1983-10-15 06:42:51\"),\n (\"2011-04-21 12:34:56\"),\n (\"2011-10-30 06:31:41\"),\n (\"2011-01-30 14:03:25\"),\n (\"2004-10-07 11:19:34\");\n \n select * from t1;\n \n+---------------------+\n| d |\n+---------------------+\n| 2007-01-30 21:31:07 |\n| 1983-10-15 06:42:51 |\n| 2011-04-21 12:34:56 |\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n| 2004-10-07 11:19:34 |\n+---------------------+\n \nSELECT d, WEEKOFYEAR(d), WEEK(d,3) from t1;\n \n+---------------------+---------------+-----------+\n| d | WEEKOFYEAR(d) | WEEK(d,3) |\n+---------------------+---------------+-----------+\n| 2007-01-30 21:31:07 | 5 | 5 |\n| 1983-10-15 06:42:51 | 41 | 41 |\n| 2011-04-21 12:34:56 | 16 | 16 |\n| 2011-10-30 06:31:41 | 43 | 43 |\n| 2011-01-30 14:03:25 | 4 | 4 |\n| 2004-10-07 11:19:34 | 41 | 41 |\n+---------------------+---------------+-----------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/weekofyear/', '', 'https://mariadb.com/kb/en/weekofyear/'),
(527, 'YEAR', 31, 'Syntax\n------ \nYEAR(date)\n \nDescription\n----------- \nReturns the year for the given date, in the range 1000 to\n9999, or 0 for the\n\"zero\" date.\n \nExamples\n-------- \nCREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n (\"2007-01-30 21:31:07\"),\n (\"1983-10-15 06:42:51\"),\n (\"2011-04-21 12:34:56\"),\n (\"2011-10-30 06:31:41\"),\n (\"2011-01-30 14:03:25\"),\n (\"2004-10-07 11:19:34\");\n \nSELECT * FROM t1;\n \n+---------------------+\n| d |\n+---------------------+\n| 2007-01-30 21:31:07 |\n| 1983-10-15 06:42:51 |\n| 2011-04-21 12:34:56 |\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n| 2004-10-07 11:19:34 |\n+---------------------+\n \nSELECT * FROM t1 WHERE YEAR(d) = 2011;\n \n+---------------------+\n| d |\n+---------------------+\n| 2011-04-21 12:34:56 |\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n+---------------------+\n \nSELECT YEAR(\'1987-01-01\');\n+--------------------+\n| YEAR(\'1987-01-01\') |\n+--------------------+\n| 1987 |\n+--------------------+\n \n\n\nURL: https://mariadb.com/kb/en/year/', '', 'https://mariadb.com/kb/en/year/'),
(528, 'YEARWEEK', 31, 'Syntax\n------ \nYEARWEEK(date), YEARWEEK(date,mode)\n \nDescription\n----------- \nReturns year and week for a date. The mode argument works\nexactly like the mode\nargument to WEEK(). The year in the result may be different\nfrom the\nyear in the date argument for the first and the last week of\nthe year.\n \nExamples\n-------- \nSELECT YEARWEEK(\'1987-01-01\');\n+------------------------+\n| YEARWEEK(\'1987-01-01\') |\n+------------------------+\n| 198652 |\n+------------------------+\n \nCREATE TABLE t1 (d DATETIME);\nINSERT INTO t1 VALUES\n (\"2007-01-30 21:31:07\"),\n (\"1983-10-15 06:42:51\"),\n (\"2011-04-21 12:34:56\"),\n (\"2011-10-30 06:31:41\"),\n (\"2011-01-30 14:03:25\"),\n (\"2004-10-07 11:19:34\");\n \nSELECT * FROM t1;\n \n+---------------------+\n| d |\n+---------------------+\n| 2007-01-30 21:31:07 |\n| 1983-10-15 06:42:51 |\n| 2011-04-21 12:34:56 |\n| 2011-10-30 06:31:41 |\n| 2011-01-30 14:03:25 |\n| 2004-10-07 11:19:34 |\n+---------------------+\n6 rows in set (0.02 sec)\n \nSELECT YEARWEEK(d) FROM t1 WHERE YEAR(d) = 2011;\n \n+-------------+\n| YEARWEEK(d) |\n+-------------+\n| 201116 |\n| 201144 |\n| 201105 |\n+-------------+\n3 rows in set (0.03 sec)\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/yearweek/', '', 'https://mariadb.com/kb/en/yearweek/'),
(529, 'Well-Known Binary (WKB) Format', 32, 'WKB stands for Well-Known Binary, a format for representing\ngeographical and geometrical data.\n \nWKB uses 1-byte unsigned integers, 4-byte unsigned integers,\nand 8-byte double-precision numbers.\nThe first byte indicates the byte order. 00 for big endian,\nor 01 for little endian.\nThe next 4 bytes indicate the geometry type. Values from 1\nto 7 indicate whether the type is Point, LineString,\nPolygon, MultiPoint, MultiLineString, MultiPolygon, or\nGeometryCollection respectively. \nThe 8-byte floats represent the co-ordinates.\n \nTake the following example, a sequence of 21 bytes each\nrepresented by two hex digits:\n \n000000000140000000000000004010000000000000\nIt\'s big endian\n000000000140000000000000004010000000000000\n \nIt\'s a POINT\n000000000140000000000000004010000000000000\n \nThe X co-ordinate is 2.0\n000000000140000000000000004010000000000000\n \nThe Y-co-ordinate is 4.0\n000000000140000000000000004010000000000000\n \n\n \n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/well-known-binary-wkb-format/', '', 'https://mariadb.com/kb/en/well-known-binary-wkb-format/'),
(534, 'MPolyFromWKB', 32, 'Syntax\n------ \nMPolyFromWKB(wkb[,srid])\nMultiPolygonFromWKB(wkb[,srid])\n \nDescription\n----------- \nConstructs a MULTIPOLYGON value using its WKB representation\nand SRID.\n \nMPolyFromWKB() and MultiPolygonFromWKB() are synonyms.\n \nExamples\n-------- \nSET @g = ST_AsBinary(MPointFromText(\'MULTIPOLYGON(((28\n26,28 0,84 0,84 42,28 26),(52 18,66 23,73 9,48 6,52\n18)),((59 18,67 18,67 13,59 13,59 18)))\'));\n \nSELECT ST_AsText(MPolyFromWKB(@g));\n+---------------------------------------------------------------------------------------------------------------+\n| ST_AsText(MPolyFromWKB(@g)) |\n+---------------------------------------------------------------------------------------------------------------+\n| MULTIPOLYGON(((28 26,28 0,84 0,84 42,28 26),(52 18,66\n23,73 9,48 6,52 18)),((59 18,67 18,67 13,59 13,59 18))) |\n+---------------------------------------------------------------------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/mpolyfromwkb/', '', 'https://mariadb.com/kb/en/mpolyfromwkb/'),
(549, 'ST_GeomCollFromWKB', 32, 'Syntax\n------ \nST_GeomCollFromWKB(wkb[,srid])\nST_GeometryCollectionFromWKB(wkb[,srid])\nGeomCollFromWKB(wkb[,srid])\nGeometryCollectionFromWKB(wkb[,srid])\n \nDescription\n----------- \nConstructs a GEOMETRYCOLLECTION value using its WKB\nrepresentation and SRID.\n \nST_GeomCollFromWKB(), ST_GeometryCollectionFromWKB(),\nGeomCollFromWKB() and GeometryCollectionFromWKB() are\nsynonyms.\n \nExamples\n-------- \nSET @g =\nST_AsBinary(ST_GeomFromText(\'GEOMETRYCOLLECTION(POLYGON((5\n5,10 5,10 10,5 5)),POINT(10 10))\'));\n \nSELECT ST_AsText(ST_GeomCollFromWKB(@g));\n+----------------------------------------------------------------+\n| ST_AsText(ST_GeomCollFromWKB(@g)) |\n+----------------------------------------------------------------+\n| GEOMETRYCOLLECTION(POLYGON((5 5,10 5,10 10,5 5)),POINT(10\n10)) |\n+----------------------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_geomcollfromwkb/', '', 'https://mariadb.com/kb/en/st_geomcollfromwkb/'),
(569, 'ST_BOUNDARY', 36, 'The ST_BOUNDARY function was introduced in MariaDB 10.1.2\n \nSyntax\n------ \nST_BOUNDARY(g)\nBOUNDARY(g)\n \nDescription\n----------- \nReturns a geometry that is the closure of the combinatorial\nboundary of the geometry value g.\n \nBOUNDARY() is a synonym.\n \nExamples\n-------- \nSELECT ST_AsText(ST_Boundary(ST_GeomFromText(\'LINESTRING(3\n3,0 0, -3 3)\')));\n+----------------------------------------------------------------------+\n| ST_AsText(ST_Boundary(ST_GeomFromText(\'LINESTRING(3 3,0\n0, -3 3)\'))) |\n+----------------------------------------------------------------------+\n| MULTIPOINT(3 3,-3 3) |\n+----------------------------------------------------------------------+\n \nSELECT ST_AsText(ST_Boundary(ST_GeomFromText(\'POLYGON((3\n3,0 0, -3 3, 3 3))\')));\n+--------------------------------------------------------------------------+\n| ST_AsText(ST_Boundary(ST_GeomFromText(\'POLYGON((3 3,0 0,\n-3 3, 3 3))\'))) |\n+--------------------------------------------------------------------------+\n| LINESTRING(3 3,0 0,-3 3,3 3) |\n+--------------------------------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_boundary/', '', 'https://mariadb.com/kb/en/st_boundary/'),
(571, 'ST_ENVELOPE', 36, 'Syntax\n------ \nST_ENVELOPE(g)\nENVELOPE(g)\n \nDescription\n----------- \nReturns the Minimum Bounding Rectangle (MBR) for the\ngeometry value g. The result is returned as a Polygon value.\n \nThe polygon is defined by the corner points of the bounding\nbox:\n \nPOLYGON((MINX MINY, MAXX MINY, MAXX MAXY, MINX MAXY, MINX\nMINY))\n \nST_ENVELOPE() and ENVELOPE() are synonyms.\n \nExamples\n-------- \nSELECT AsText(ST_ENVELOPE(GeomFromText(\'LineString(1 1,4\n4)\')));\n+----------------------------------------------------------+\n| AsText(ST_ENVELOPE(GeomFromText(\'LineString(1 1,4 4)\')))\n|\n+----------------------------------------------------------+\n| POLYGON((1 1,4 1,4 4,1 4,1 1)) |\n+----------------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_envelope/', '', 'https://mariadb.com/kb/en/st_envelope/'),
(574, 'ST_ISCLOSED', 36, 'Syntax\n------ \nST_IsClosed(g)\nIsClosed(g)\n \nDescription\n----------- \nReturns 1 if a given LINESTRING\'s start and end points are\nthe same, or 0 if they are not the same. Before MariaDB\n10.1.5, returns NULL if not given a LINESTRING. After\nMariaDB 10.1.5, returns -1.\n \nST_IsClosed() and IsClosed() are synonyms.\n \nExamples\n-------- \nSET @ls = \'LineString(0 0, 0 4, 4 4, 0 0)\';\n \nSELECT ST_ISCLOSED(GEOMFROMTEXT(@ls));\n+--------------------------------+\n| ST_ISCLOSED(GEOMFROMTEXT(@ls)) |\n+--------------------------------+\n| 1 |\n+--------------------------------+\n \nSET @ls = \'LineString(0 0, 0 4, 4 4, 0 1)\';\n \nSELECT ST_ISCLOSED(GEOMFROMTEXT(@ls));\n+--------------------------------+\n| ST_ISCLOSED(GEOMFROMTEXT(@ls)) |\n+--------------------------------+\n| 0 |\n+--------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/st_isclosed/', '', 'https://mariadb.com/kb/en/st_isclosed/'),
(583, 'BINARY Operator', 37, 'Syntax\n------ \nBINARY\n \nDescription\n----------- \nThe BINARY operator casts the string following it to a\nbinary string. This is an easy way to force a column\ncomparison to be done byte by byte rather than character by\ncharacter. This causes the comparison to be case sensitive\neven if the column isn\'t defined as BINARY or BLOB. \n \nBINARY also causes trailing spaces to be significant.\n \nExamples\n-------- \nSELECT \'a\' = \'A\';\n \n+-----------+\n| \'a\' = \'A\' |\n+-----------+\n| 1 |\n+-----------+\n \nSELECT BINARY \'a\' = \'A\';\n \n+------------------+\n| BINARY \'a\' = \'A\' |\n+------------------+\n| 0 |\n+------------------+\n \nSELECT \'a\' = \'a \';\n \n+------------+\n| \'a\' = \'a \' |\n+------------+\n| 1 |\n+------------+\n \nSELECT BINARY \'a\' = \'a \';\n \n+-------------------+\n| BINARY \'a\' = \'a \' |\n+-------------------+\n| 0 |\n+-------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/binary-operator/', '', 'https://mariadb.com/kb/en/binary-operator/'),
(585, 'CAST', 37, 'Syntax\n------ \nCAST(expr AS type)\n \nDescription\n----------- \nThe CAST() function takes a value of one type and produces a\nvalue of another type, similar to the CONVERT() function.\nFor more information, see the description of CONVERT(). \n \nThe main difference between the CAST() and CONVERT() is that\nCONVERT(expr,type) is ODBC syntax while CAST(expr as type)\nand CONVERT(... USING ...) are SQL92 syntax.\n \nIn MariaDB 10.4 and later, you can use the CAST() function\nwith the INTERVAL keyword.\n \nUntil MariaDB 5.5.31, X\'HHHH\', the standard SQL syntax for\nbinary string literals, erroneously worked in the same way\nas 0xHHHH. In 5.5.31 it was intentionally changed to behave\nas a string in all contexts (and never as a number).\n \nThis introduces an incompatibility with previous versions of\nMariaDB, and all versions of MySQL (see the example below). \n \nExamples\n-------- \nSimple casts:\n \nSELECT CAST(\"abc\" AS BINARY);\nSELECT CAST(\"1\" AS UNSIGNED INTEGER);\nSELECT CAST(123 AS CHAR CHARACTER SET utf8)\n \nNote that when one casts to CHAR without specifying the\ncharacter set, the collation_connection character set\ncollation will be used. When used with CHAR CHARACTER SET,\nthe default collation for that character set will be used.\n \nSELECT COLLATION(CAST(123 AS CHAR));\n+------------------------------+\n| COLLATION(CAST(123 AS CHAR)) |\n+------------------------------+\n| latin1_swedish_ci |\n+------------------------------+\n \nSELECT COLLATION(CAST(123 AS CHAR CHARACTER SET utf8));\n+-------------------------------------------------+\n| COLLATION(CAST(123 AS CHAR CHARACTER SET utf8)) |\n+-------------------------------------------------+\n| utf8_general_ci |\n+-------------------------------------------------+\n \nIf you also want to change the collation, you have to use\nthe COLLATE operator:\n \nSELECT COLLATION(CAST(123 AS CHAR CHARACTER SET utf8) \n COLLATE utf8_unicode_ci);\n+-------------------------------------------------------------------------+\n| COLLATION(CAST(123 AS CHAR CHARACTER SET utf8) COLLATE\nutf8_unicode_ci) |\n+-------------------------------------------------------------------------+\n| utf8_unicode_ci |\n+-------------------------------------------------------------------------+\n \nUsing CAST() to order an ENUM field as a CHAR rather than\nthe internal numerical value:\n \nCREATE TABLE enum_list (enum_field enum(\'c\',\'a\',\'b\'));\n \nINSERT INTO enum_list (enum_field) \nVALUES(\'c\'),(\'a\'),(\'c\'),(\'b\');\n \nSELECT * FROM enum_list \nORDER BY enum_field;\n \n+------------+\n| enum_field |\n+------------+\n| c |\n| c |\n| a |\n| b |\n+------------+\n \nSELECT * FROM enum_list \nORDER BY CAST(enum_field AS CHAR);\n+------------+\n| enum_field |\n+------------+\n| a |\n| b |\n| c |\n| c |\n+------------+\n \nFrom MariaDB 5.5.31, the following will trigger warnings,\nsince x\'aa\' and \'X\'aa\' no longer behave as a number.\nPreviously, and in all versions of MySQL, no warnings are\ntriggered since they did erroneously behave as a number:\n \nSELECT CAST(0xAA AS UNSIGNED), CAST(x\'aa\' AS UNSIGNED),\nCAST(X\'aa\' AS UNSIGNED);\n+------------------------+-------------------------+-------------------------+\n| CAST(0xAA AS UNSIGNED) | CAST(x\'aa\' AS UNSIGNED) |\nCAST(X\'aa\' AS UNSIGNED) |\n+------------------------+-------------------------+-------------------------+\n| 170 | 0 | 0 |\n+------------------------+-------------------------+-------------------------+\n1 row in set, 2 warnings (0.00 sec)\n \nWarning (Code 1292): Truncated incorrect INTEGER value:\n\'\\xAA\'\nWarning (Code 1292): Truncated incorrect INTEGER value:\n\'\\xAA\'\n \nCasting to intervals:\n \nSELECT CAST(2019-01-04 INTERVAL AS DAY_SECOND(2)) AS\n\"Cast\";\n \n+-------------+\n| Cast |\n+-------------+\n| 00:20:17.00 |\n+-------------+\n \n\n\nURL: https://mariadb.com/kb/en/cast/', '', 'https://mariadb.com/kb/en/cast/'),
(586, 'CHAR Function', 37, 'Syntax\n------ \nCHAR(N,... [USING charset_name])\n \nDescription\n----------- \nCHAR() interprets each argument as an INT and returns a\nstring consisting of the characters given by the code values\nof those integers. NULL values are skipped. By default,\nCHAR() returns a binary string. To produce a string in a\ngiven character set, use the optional USING clause:\n \nSELECT CHARSET(CHAR(0x65)), CHARSET(CHAR(0x65 USING utf8));\n+---------------------+--------------------------------+\n| CHARSET(CHAR(0x65)) | CHARSET(CHAR(0x65 USING utf8)) |\n+---------------------+--------------------------------+\n| binary | utf8 |\n+---------------------+--------------------------------+\n \nIf USING is given and the result string is illegal for the\ngiven character set, a warning is issued. Also, if strict\nSQL mode is enabled, the result from CHAR() becomes NULL.\n \nExamples\n-------- \nSELECT CHAR(77,97,114,\'105\',97,\'68\',66);\n+----------------------------------+\n| CHAR(77,97,114,\'105\',97,\'68\',66) |\n+----------------------------------+\n| MariaDB |\n+----------------------------------+\n \nSELECT CHAR(77,77.3,\'77.3\');\n+----------------------+\n| CHAR(77,77.3,\'77.3\') |\n+----------------------+\n| MMM |\n+----------------------+\n1 row in set, 1 warning (0.00 sec)\n \nWarning (Code 1292): Truncated incorrect INTEGER value:\n\'77.3\'\n \n\n\nURL: https://mariadb.com/kb/en/char-function/', '', 'https://mariadb.com/kb/en/char-function/'),
(588, 'CHAR_LENGTH', 37, 'Syntax\n------ \nCHAR_LENGTH(str)\n \nDescription\n----------- \nReturns the length of the given string argument, measured in\ncharacters. A multi-byte character counts as a single\ncharacter. This means that for a string containing five\ntwo-byte characters, LENGTH() (or OCTET_LENGTH() in Oracle\nmode) returns 10, whereas CHAR_LENGTH() returns 5. If the\nargument is NULL, it returns NULL. \n \nIf the argument is not a string value, it is converted into\na string.\n \nIt is synonymous with the CHARACTER_LENGTH() function.\n \nUntil MariaDB 10.3.1, returns MYSQL_TYPE_LONGLONG, or\nbigint(10), in all cases. From MariaDB 10.3.1, returns\nMYSQL_TYPE_LONG, or int(10), when the result would fit\nwithin 32-bits.\n \nExamples\n-------- \nSELECT CHAR_LENGTH(\'MariaDB\');\n+------------------------+\n| CHAR_LENGTH(\'MariaDB\') |\n+------------------------+\n| 7 |\n+------------------------+\n \nSELECT CHAR_LENGTH(\'π\');\n+-------------------+\n| CHAR_LENGTH(\'π\') |\n+-------------------+\n| 1 |\n+-------------------+\n \n\n\nURL: https://mariadb.com/kb/en/char_length/', '', 'https://mariadb.com/kb/en/char_length/'),
(589, 'CHR', 37, 'The CHR() function was introduced in MariaDB 10.3.1 to\nprovide Oracle compatibility\n \nSyntax\n------ \nCHR(N)\n \nDescription\n----------- \nCHR() interprets each argument N as an integer and returns a\nVARCHAR(1) string consisting of the character given by the\ncode values of the integer. The character set and collation\nof the string are set according to the values of the\ncharacter_set_database and collation_database system\nvariables.\n \nCHR() is similar to the CHAR() function, but only accepts a\nsingle argument.\n \nCHR() is available in all sql_modes.\n \nExamples\n-------- \nSELECT CHR(67);\n+---------+\n| CHR(67) |\n+---------+\n| C |\n+---------+\n \nSELECT CHR(\'67\');\n+-----------+\n| CHR(\'67\') |\n+-----------+\n| C |\n+-----------+\n \nSELECT CHR(\'C\');\n+----------+\n| CHR(\'C\') |\n+----------+\n| |\n+----------+\n1 row in set, 1 warning (0.000 sec)\n \nSHOW WARNINGS;\n \n+---------+------+----------------------------------------+\n| Level | Code | Message |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Truncated incorrect INTEGER value: \'C\'\n|\n+---------+------+----------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/chr/', '', 'https://mariadb.com/kb/en/chr/'),
(590, 'CONCAT', 37, 'Syntax\n------ \nCONCAT(str1,str2,...)\n \nDescription\n----------- \nReturns the string that results from concatenating the\narguments. May have one or more arguments. If all arguments\nare non-binary strings, the result is a non-binary string.\nIf the arguments include any binary strings, the result is a\nbinary string. A numeric argument is converted to its\nequivalent binary string form; if you want to avoid that,\nyou can use an explicit type cast, as in this example:\n \nSELECT CONCAT(CAST(int_col AS CHAR), char_col);\n \nCONCAT() returns NULL if any argument is NULL.\n \nA NULL parameter hides all information contained in other\nparameters from the result. Sometimes this is not desirable;\nto avoid this, you can:\nUse the CONCAT_WS() function with an empty separator,\nbecause that function is NULL-safe.\nUse IFNULL() to turn NULLs into empty strings.\n \nOracle Mode\n \nIn Oracle mode from MariaDB 10.3, CONCAT ignores NULL.\n \nExamples\n-------- \nSELECT CONCAT(\'Ma\', \'ria\', \'DB\');\n+---------------------------+\n| CONCAT(\'Ma\', \'ria\', \'DB\') |\n+---------------------------+\n| MariaDB |\n+---------------------------+\n \nSELECT CONCAT(\'Ma\', \'ria\', NULL, \'DB\');\n+---------------------------------+\n| CONCAT(\'Ma\', \'ria\', NULL, \'DB\') |\n+---------------------------------+\n| NULL |\n+---------------------------------+\n \nSELECT CONCAT(42.0);\n+--------------+\n| CONCAT(42.0) |\n+--------------+\n| 42.0 |\n+--------------+\n \nUsing IFNULL() to handle NULLs:\n \nSELECT CONCAT(\'The value of @v is: \', IFNULL(@v, \'\'));\n+------------------------------------------------+\n| CONCAT(\'The value of @v is: \', IFNULL(@v, \'\')) |\n+------------------------------------------------+\n| The value of @v is: |\n+------------------------------------------------+\n \nIn Oracle mode, from MariaDB 10.3:\n \nSELECT CONCAT(\'Ma\', \'ria\', NULL, \'DB\');\n+---------------------------------+\n| CONCAT(\'Ma\', \'ria\', NULL, \'DB\') |\n+---------------------------------+\n| MariaDB |\n+---------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/concat/', '', 'https://mariadb.com/kb/en/concat/'),
(591, 'CONCAT_WS', 37, 'Syntax\n------ \nCONCAT_WS(separator,str1,str2,...)\n \nDescription\n----------- \nCONCAT_WS() stands for Concatenate With Separator and is a\nspecial form of CONCAT(). The first argument is the\nseparator for the rest of the arguments. The separator is\nadded between the strings to be concatenated. The separator\ncan be a string, as can the rest of the arguments.\n \nIf the separator is NULL, the result is NULL; all other NULL\nvalues are skipped. This makes CONCAT_WS() suitable when you\nwant to concatenate some values and avoid losing all\ninformation if one of them is NULL.\n \nExamples\n-------- \nSELECT CONCAT_WS(\',\',\'First name\',\'Second name\',\'Last\nName\');\n+-------------------------------------------------------+\n| CONCAT_WS(\',\',\'First name\',\'Second name\',\'Last\nName\') |\n+-------------------------------------------------------+\n| First name,Second name,Last Name |\n+-------------------------------------------------------+\n \nSELECT CONCAT_WS(\'-\',\'Floor\',NULL,\'Room\');\n+------------------------------------+\n| CONCAT_WS(\'-\',\'Floor\',NULL,\'Room\') |\n+------------------------------------+\n| Floor-Room |\n+------------------------------------+\n \nIn some cases, remember to include a space in the separator\nstring:\n \nSET @a = \'gnu\', @b = \'penguin\', @c = \'sea lion\';\n \nQuery OK, 0 rows affected (0.00 sec)\n \nSELECT CONCAT_WS(\', \', @a, @b, @c);\n+-----------------------------+\n| CONCAT_WS(\', \', @a, @b, @c) |\n+-----------------------------+\n| gnu, penguin, sea lion |\n+-----------------------------+\n \nUsing CONCAT_WS() to handle NULLs:\n \nSET @a = \'a\', @b = NULL, @c = \'c\';\n \nSELECT CONCAT_WS(\'\', @a, @b, @c);\n+---------------------------+\n| CONCAT_WS(\'\', @a, @b, @c) |\n+---------------------------+\n| ac |\n+---------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/concat_ws/', '', 'https://mariadb.com/kb/en/concat_ws/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(592, 'CONVERT', 37, 'Syntax\n------ \nCONVERT(expr,type), CONVERT(expr USING transcoding_name)\n \nDescription\n----------- \nThe CONVERT() and CAST() functions take a value of one type\nand produce a value of another type.\n \nThe type can be one of the following values:\nBINARY\nCHAR\nDATE\nDATETIME \nDECIMAL[(M[,D])]\nDOUBLE \nFLOAT — From MariaDB 10.4.5\nINTEGER \nShort for SIGNED INTEGER\n \nSIGNED [INTEGER]\nTIME \nUNSIGNED [INTEGER]\n \nNote that in MariaDB, INT and INTEGER are the same thing.\n \nBINARY produces a string with the BINARY data type. If the\noptional length is given, BINARY(N) causes the cast to use\nno more than N bytes of the argument. Values shorter than\nthe given number in bytes are padded with 0x00 bytes to make\nthem equal the length value.\n \nCHAR(N) causes the cast to use no more than the number of\ncharacters given in the argument.\n \nThe main difference between the CAST() and CONVERT() is that\nCONVERT(expr,type) is ODBC syntax while CAST(expr as type)\nand CONVERT(... USING ...) are SQL92 syntax.\n \nCONVERT() with USING is used to convert data between\ndifferent character sets. In MariaDB, transcoding names are\nthe same as the\ncorresponding character set names. For example, this\nstatement\nconverts the string \'abc\' in the default character set to\nthe\ncorresponding string in the utf8 character set:\n \nSELECT CONVERT(\'abc\' USING utf8);\n \nExamples\n-------- \nSELECT enum_col FROM tbl_name \nORDER BY CAST(enum_col AS CHAR);\n \nConverting a BINARY to string to permit the LOWER function\nto work:\n \nSET @x = \'AardVark\';\n \nSET @x = BINARY \'AardVark\';\n \nSELECT LOWER(@x), LOWER(CONVERT (@x USING latin1));\n+-----------+----------------------------------+\n| LOWER(@x) | LOWER(CONVERT (@x USING latin1)) |\n+-----------+----------------------------------+\n| AardVark | aardvark |\n+-----------+----------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/convert/', '', 'https://mariadb.com/kb/en/convert/'),
(593, 'ELT', 37, 'Syntax\n------ \nELT(N, str1[, str2, str3,...])\n \nDescription\n----------- \nTakes a numeric argument and a series of string arguments.\nReturns the string that corresponds to the given numeric\nposition. For instance, it returns str1 if N is 1, str2 if N\nis 2, and so on. If the numeric argument is a FLOAT, MariaDB\nrounds it to the nearest INTEGER. If the numeric argument is\nless than 1, greater than the total number of arguments, or\nnot a number, ELT() returns NULL. It must have at least two\narguments.\n \nIt is complementary to the FIELD() function.\n \nExamples\n-------- \nSELECT ELT(1, \'ej\', \'Heja\', \'hej\', \'foo\');\n+------------------------------------+\n| ELT(1, \'ej\', \'Heja\', \'hej\', \'foo\') |\n+------------------------------------+\n| ej |\n+------------------------------------+\n \nSELECT ELT(4, \'ej\', \'Heja\', \'hej\', \'foo\');\n+------------------------------------+\n| ELT(4, \'ej\', \'Heja\', \'hej\', \'foo\') |\n+------------------------------------+\n| foo |\n+------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/elt/', '', 'https://mariadb.com/kb/en/elt/'),
(594, 'EXPORT_SET', 37, 'Syntax\n------ \nEXPORT_SET(bits, on, off[, separator[, number_of_bits]])\n \nDescription\n----------- \nTakes a minimum of three arguments. Returns a string where\neach bit in the given bits argument is returned, with the\nstring values given for on and off. \n \nBits are examined from right to left, (from low-order to\nhigh-order bits). Strings are added to the result from left\nto right, separated by a separator string (defaults as\n\',\'). You can optionally limit the number of bits the\nEXPORT_SET() function examines using the number_of_bits\noption. \n \nIf any of the arguments are set as NULL, the function\nreturns NULL.\n \nExamples\n-------- \nSELECT EXPORT_SET(5,\'Y\',\'N\',\',\',4);\n+-----------------------------+\n| EXPORT_SET(5,\'Y\',\'N\',\',\',4) |\n+-----------------------------+\n| Y,N,Y,N |\n+-----------------------------+\n \nSELECT EXPORT_SET(6,\'1\',\'0\',\',\',10);\n+------------------------------+\n| EXPORT_SET(6,\'1\',\'0\',\',\',10) |\n+------------------------------+\n| 0,1,1,0,0,0,0,0,0,0 |\n+------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/export_set/', '', 'https://mariadb.com/kb/en/export_set/'),
(596, 'FIELD', 37, 'Syntax\n------ \nFIELD(pattern, str1[,str2,...])\n \nDescription\n----------- \nReturns the index position of the string or number matching\nthe given pattern. Returns 0 in the event that none of the\narguments match the pattern. Raises an Error 1582 if not\ngiven at least two arguments.\n \nWhen all arguments given to the FIELD() function are\nstrings, they are treated as case-insensitive. When all the\narguments are numbers, they are treated as numbers.\nOtherwise, they are treated as doubles. \n \nIf the given pattern occurs more than once, the FIELD()\nfunction only returns the index of the first instance. If\nthe given pattern is NULL, the function returns 0, as a NULL\npattern always fails to match.\n \nThis function is complementary to the ELT() function.\n \nExamples\n-------- \nSELECT FIELD(\'ej\', \'Hej\', \'ej\', \'Heja\', \'hej\',\n\'foo\') \n AS \'Field Results\';\n \n+---------------+\n| Field Results | \n+---------------+\n| 2 |\n+---------------+\n \nSELECT FIELD(\'fo\', \'Hej\', \'ej\', \'Heja\', \'hej\',\n\'foo\')\n AS \'Field Results\';\n \n+---------------+\n| Field Results | \n+---------------+\n| 0 |\n+---------------+\n \nSELECT FIELD(1, 2, 3, 4, 5, 1) AS \'Field Results\';\n \n+---------------+\n| Field Results |\n+---------------+\n| 5 |\n+---------------+\n \nSELECT FIELD(NULL, 2, 3) AS \'Field Results\';\n \n+---------------+\n| Field Results |\n+---------------+\n| 0 |\n+---------------+\n \nSELECT FIELD(\'fail\') AS \'Field Results\';\n \nError 1582 (42000): Incorrect parameter count in call\nto native function \'field\'\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/field/', '', 'https://mariadb.com/kb/en/field/'),
(595, 'EXTRACTVALUE', 37, 'Syntax\n------ \nEXTRACTVALUE(xml_frag, xpath_expr)\n \nDescription\n----------- \nThe EXTRACTVALUE() function takes two string arguments: a\nfragment of XML markup and an XPath expression, (also known\nas a locator). It returns the text (That is, CDDATA), of the\nfirst text node which is a child of the element or elements\nmatching the XPath expression. \n \nIn cases where a valid XPath expression does not match any\ntext nodes in a valid XML fragment, (including the implicit\n/text() expression), the EXTRACTVALUE() function returns an\nempty string.\n \nInvalid Arguments\n \nWhen either the XML fragment or the XPath expression is\nNULL, the EXTRACTVALUE() function returns NULL. When the XML\nfragment is invalid, it raises a warning Code 1525:\n \nWarning (Code 1525): Incorrect XML value: \'parse error at\nline 1 pos 11: unexpected END-OF-INPUT\'\n \nWhen the XPath value is invalid, it generates an Error 1105:\n \nERROR 1105 (HY000): XPATH syntax error: \')\'\n \nExplicit text() Expressions\n \nThis function is the equivalent of performing a match using\nthe XPath expression after appending /text(). In other\nwords:\n \nSELECT\n EXTRACTVALUE(\'example\', \'/cases/case\') AS \'Base\nExample\',\n EXTRACTVALUE(\'example\', \'/cases/case/text()\') AS\n\'text() Example\';\n \n+--------------+----------------+\n| Base Example | text() Example |\n+--------------+----------------+\n| example | example |\n+--------------+----------------+\n \nCount Matches\n \nWhen EXTRACTVALUE() returns multiple matches, it returns the\ncontent of the first child text node of each matching\nelement, in the matched order, as a single, space-delimited\nstring.\n \nBy design, the EXTRACTVALUE() function makes no distinction\nbetween a match on an empty element and no match at all. If\nyou need to determine whether no matching element was found\nin the XML fragment or if an element was found that\ncontained no child text nodes, use the XPath count()\nfunction. \n \nFor instance, when looking for a value that exists, but\ncontains no child text nodes, you would get a count of the\nnumber of matching instances:\n \nSELECT\n EXTRACTVALUE(\'\', \'/cases/case\') AS \'Empty Example\',\n EXTRACTVALUE(\'\', \'/cases/case/count()\') AS \'count()\nExample\';\n \n+---------------+-----------------+\n| Empty Example | count() Example |\n+---------------+-----------------+\n| | 1 |\n+---------------+-----------------+\n \nAlternatively, when looking for a value that doesn\'t exist,\ncount() returns 0.\n \nSELECT\n EXTRACTVALUE(\'\', \'/cases/person\') AS \'No Match\nExample\',\n EXTRACTVALUE(\'\', \'/cases/person/count()\') AS \'count()\nExample\';\n \n+------------------+-----------------+\n| No Match Example | count() Example |\n+------------------+-----------------+\n| | 0|\n+------------------+-----------------+\n \nMatches\n \nImportant: The EXTRACTVALUE() function only returns CDDATA.\nIt does not return tags that the element might contain or\nthe text that these child elements contain.\n \nSELECT EXTRACTVALUE(\'Personx@example.com\', \'/cases\') AS\nCase;\n \n+--------+\n| Case |\n+--------+\n| Person |\n+--------+\n \nNote, in the above example, while the XPath expression\nmatches to the parent  instance, it does not return the\ncontained  tag or its content.\n \nExamples\n-------- \nSELECT\n ExtractValue(\'cccddd\', \'/a\') AS val1,\n ExtractValue(\'cccddd\', \'/a/b\') AS val2,\n ExtractValue(\'cccddd\', \'//b\') AS val3,\n ExtractValue(\'cccddd\', \'/b\') AS val4,\n ExtractValue(\'cccdddeee\', \'//b\') AS val5;\n \n+------+------+------+------+---------+\n| val1 | val2 | val3 | val4 | val5 |\n+------+------+------+------+---------+\n| ccc | ddd | ddd | | ddd eee |\n+------+------+------+------+---------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/extractvalue/', '', 'https://mariadb.com/kb/en/extractvalue/'),
(597, 'FIND_IN_SET', 37, 'Syntax\n------ \nFIND_IN_SET(pattern, strlist)\n \nDescription\n----------- \nReturns the index position where the given pattern occurs in\na string list. The first argument is the pattern you want to\nsearch for. The second argument is a string containing\ncomma-separated variables. If the second argument is of the\nSET data-type, the function is optimized to use bit\narithmetic.\n \nIf the pattern does not occur in the string list or if the\nstring list is an empty string, the function returns 0. If\neither argument is NULL, the function returns NULL. The\nfunction does not return the correct result if the pattern\ncontains a comma (\",\") character.\n \nExamples\n-------- \nSELECT FIND_IN_SET(\'b\',\'a,b,c,d\') AS \"Found Results\";\n \n+---------------+\n| Found Results |\n+---------------+\n| 2 |\n+---------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/find_in_set/', '', 'https://mariadb.com/kb/en/find_in_set/'),
(598, 'FORMAT', 37, 'Syntax\n------ \nFORMAT(num, decimal_position[, locale])\n \nDescription\n----------- \nFormats the given number for display as a string, adding\nseparators to appropriate position and rounding the results\nto the given decimal position. For instance, it would format\n15233.345 to 15,233.35.\n \nIf the given decimal position is 0, it rounds to return no\ndecimal point or fractional part. You can optionally specify\na locale value to format numbers to the pattern appropriate\nfor the given region.\n \nExamples\n-------- \nSELECT FORMAT(1234567890.09876543210, 4) AS \'Format\';\n \n+--------------------+\n| Format |\n+--------------------+\n| 1,234,567,890.0988 |\n+--------------------+\n \nSELECT FORMAT(1234567.89, 4) AS \'Format\';\n \n+----------------+\n| Format |\n+----------------+\n| 1,234,567.8900 |\n+----------------+\n \nSELECT FORMAT(1234567.89, 0) AS \'Format\';\n \n+-----------+\n| Format |\n+-----------+\n| 1,234,568 |\n+-----------+\n \nSELECT FORMAT(123456789,2,\'rm_CH\') AS \'Format\';\n \n+----------------+\n| Format |\n+----------------+\n| 123\'456\'789,00 |\n+----------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/format/', '', 'https://mariadb.com/kb/en/format/'),
(599, 'FROM_BASE64', 37, 'The FROM_BASE64() function was introduced in MariaDB 10.0.5.\n \nSyntax\n------ \nFROM_BASE64(str)\n \nDescription\n----------- \nDecodes the given base-64 encode string, returning the\nresult as a binary string. Returns NULL if the given string\nis NULL or if it\'s invalid.\n \nIt is the reverse of the TO_BASE64 function.\n \nThere are numerous methods to base-64 encode a string.\nMariaDB uses the following:\nIt encodes alphabet value 64 as \'+\'.\nIt encodes alphabet value 63 as \'/\'.\nIt codes output in groups of four printable characters. Each\nthree byte of data encoded uses four characters. If the\nfinal group is incomplete, it pads the difference with the\n\'=\' character.\nIt divides long output, adding a new line very 76\ncharacters.\nIn decoding, it recognizes and ignores newlines, carriage\nreturns, tabs and space whitespace characters.\n \nSELECT TO_BASE64(\'Maria\') AS \'Input\';\n \n+-----------+\n| Input |\n+-----------+\n| TWFyaWE= |\n+-----------+\n \nSELECT FROM_BASE64(\'TWFyaWE=\') AS \'Output\';\n \n+--------+\n| Output |\n+--------+\n| Maria |\n+--------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/from_base64/', '', 'https://mariadb.com/kb/en/from_base64/'),
(600, 'HEX', 37, 'Syntax\n------ \nHEX(N_or_S)\n \nDescription\n----------- \nIf N_or_S is a number, returns a string representation of\nthe hexadecimal\nvalue of N, where N is a longlong (BIGINT) number. This is\nequivalent to CONV(N,10,16).\n \nIf N_or_S is a string, returns a hexadecimal string\nrepresentation of\nN_or_S where each byte of each character in N_or_S is\nconverted to two hexadecimal\ndigits. If N_or_S is NULL, returns NULL. The inverse of this\noperation is performed by the UNHEX()\nfunction.\n \nExamples\n-------- \nSELECT HEX(255);\n+----------+\n| HEX(255) |\n+----------+\n| FF |\n+----------+\n \nSELECT 0x4D617269614442;\n \n+------------------+\n| 0x4D617269614442 |\n+------------------+\n| MariaDB |\n+------------------+\n \nSELECT HEX(\'MariaDB\');\n+----------------+\n| HEX(\'MariaDB\') |\n+----------------+\n| 4D617269614442 |\n+----------------+\n \n\n\nURL: https://mariadb.com/kb/en/hex/', '', 'https://mariadb.com/kb/en/hex/'),
(601, 'INSERT Function', 37, 'Syntax\n------ \nINSERT(str,pos,len,newstr)\n \nDescription\n----------- \nReturns the string str, with the substring beginning at\nposition pos\nand len characters long replaced by the string newstr.\nReturns the\noriginal string if pos is not within the length of the\nstring.\nReplaces the rest of the string from position pos if len is\nnot within\nthe length of the rest of the string. Returns NULL if any\nargument is\nNULL.\n \nExamples\n-------- \nSELECT INSERT(\'Quadratic\', 3, 4, \'What\');\n+-----------------------------------+\n| INSERT(\'Quadratic\', 3, 4, \'What\') |\n+-----------------------------------+\n| QuWhattic |\n+-----------------------------------+\n \nSELECT INSERT(\'Quadratic\', -1, 4, \'What\');\n+------------------------------------+\n| INSERT(\'Quadratic\', -1, 4, \'What\') |\n+------------------------------------+\n| Quadratic |\n+------------------------------------+\n \nSELECT INSERT(\'Quadratic\', 3, 100, \'What\');\n+-------------------------------------+\n| INSERT(\'Quadratic\', 3, 100, \'What\') |\n+-------------------------------------+\n| QuWhat |\n+-------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/insert-function/', '', 'https://mariadb.com/kb/en/insert-function/'),
(605, 'LENGTH', 37, 'Syntax\n------ \nLENGTH(str)\n \nDescription\n----------- \nReturns the length of the string str, measured in bytes. A\nmulti-byte\ncharacter counts as multiple bytes. This means that for a\nstring\ncontaining five two-byte characters, LENGTH() returns 10,\nwhereas\nCHAR_LENGTH() returns 5. \n \nIf str is not a string value, it is converted into a string.\nIf str is NULL, the function returns NULL.\n \nUntil MariaDB 10.3.1, returns MYSQL_TYPE_LONGLONG, or\nbigint(10), in all cases. From MariaDB 10.3.1, returns\nMYSQL_TYPE_LONG, or int(10), when the result would fit\nwithin 32-bits.\n \nOracle Mode\n \nWhen running Oracle mode from MariaDB 10.3, LENGTH() is a\nsynonym for CHAR_LENGTH().\n \nExamples\n-------- \nSELECT LENGTH(\'MariaDB\');\n+-------------------+\n| LENGTH(\'MariaDB\') |\n+-------------------+\n| 7 |\n+-------------------+\n \nSELECT LENGTH(\'π\');\n+--------------+\n| LENGTH(\'π\') |\n+--------------+\n| 2 |\n+--------------+\n \nIn Oracle mode from MariaDB 10.3:\n \nSELECT LENGTH(\'π\');\n+--------------+\n| LENGTH(\'π\') |\n+--------------+\n| 1 |\n+--------------+\n \n\n\nURL: https://mariadb.com/kb/en/length/', '', 'https://mariadb.com/kb/en/length/'),
(608, 'LOAD_FILE', 37, 'Syntax\n------ \nLOAD_FILE(file_name)\n \nDescription\n----------- \nReads the file and returns the file contents as a string. To\nuse this function, the file must be located on the server\nhost, you must specify the full path name to the file, and\nyou must have the FILE privilege. The file must be readable\nby all and it must be less than the size, in bytes, of the\nmax_allowed_packet system variable. If the secure_file_priv\nsystem variable is set to a non-empty directory name, the\nfile to be loaded must be located in that directory.\n \nIf the file does not exist or cannot be read because one of\nthe preceding conditions is not satisfied, the function\nreturns NULL.\n \nSince MariaDB 5.1, the character_set_filesystem system\nvariable has controlled interpretation of file names that\nare given as literal strings.\n \nStatements using the LOAD_FILE() function are not safe for\nstatement based replication. This is because the slave will\nexecute the LOAD_FILE() command itself. If the file doesn\'t\nexist on the slave, the function will return NULL.\n \nExamples\n-------- \nUPDATE t SET blob_col=LOAD_FILE(\'/tmp/picture\') WHERE\nid=1;\n \n\n\nURL: https://mariadb.com/kb/en/load_file/', '', 'https://mariadb.com/kb/en/load_file/'),
(607, 'LIKE', 37, 'Syntax\n------ \nexpr LIKE pat [ESCAPE \'escape_char\']\nexpr NOT LIKE pat [ESCAPE \'escape_char\']\n \nDescription\n----------- \nTests whether expr matches the pattern pat. Returns either 1\n(TRUE) or 0 (FALSE).\nBoth expr and pat may be any valid expression and are\nevaluated to strings.\nPatterns may use the following wildcard characters:\n% matches any number of characters, including zero.\n_ matches any single character.\n \nUse NOT LIKE to test if a string does not match a pattern.\nThis is equivalent to using\nthe NOT operator on the entire LIKE expression.\n \nIf either the expression or the pattern is NULL, the result\nis NULL.\n \nLIKE performs case-insensitive substring matches if the\ncollation for the\nexpression and pattern is case-insensitive. For\ncase-sensitive matches, declare either argument\nto use a binary collation using COLLATE, or coerce either of\nthem to a BINARY\nstring using CAST. Use SHOW COLLATION to get a list of\navailable collations. Collations ending in _bin are\ncase-sensitive.\n \nNumeric arguments are coerced to binary strings.\n \nThe _ wildcard matches a single character, not byte. It will\nonly match a multi-byte character\nif it is valid in the expression\'s character set. For\nexample, _ will match _utf8\"€\", but it\nwill not match _latin1\"€\" because the Euro sign is not a\nvalid latin1 character. If necessary,\nuse CONVERT to use the expression in a different character\nset.\n \nIf you need to match the characters _ or %, you must escape\nthem. By default,\nyou can prefix the wildcard characters the backslash\ncharacter \\ to escape them.\nThe backslash is used both to encode special characters like\nnewlines when a string is\nparsed as well as to escape wildcards in a pattern after\nparsing. Thus, to match an\nactual backslash, you sometimes need to double-escape it as\n\"\\\\\\\\\".\n \nTo avoid difficulties with the backslash character, you can\nchange the wildcard escape\ncharacter using ESCAPE in a LIKE expression. The argument to\nESCAPE\nmust be a single-character string.\n \nExamples\n-------- \nSelect the days that begin with \"T\":\n \nCREATE TABLE t1 (d VARCHAR(16));\nINSERT INTO t1 VALUES (\"Monday\"), (\"Tuesday\"),\n(\"Wednesday\"), (\"Thursday\"), (\"Friday\"),\n(\"Saturday\"), (\"Sunday\");\nSELECT * FROM t1 WHERE d LIKE \"T%\";\n \nSELECT * FROM t1 WHERE d LIKE \"T%\";\n+----------+\n| d |\n+----------+\n| Tuesday |\n| Thursday |\n+----------+\n \nSelect the days that contain the substring \"es\":\n \nSELECT * FROM t1 WHERE d LIKE \"%es%\";\n \nSELECT * FROM t1 WHERE d LIKE \"%es%\";\n+-----------+\n| d |\n+-----------+\n| Tuesday |\n| Wednesday |\n+-----------+\n \nSelect the six-character day names:\n \nSELECT * FROM t1 WHERE d like \"___day\";\n \nSELECT * FROM t1 WHERE d like \"___day\";\n+---------+\n| d |\n+---------+\n| Monday |\n| Friday |\n| Sunday |\n+---------+\n \nWith the default collations, LIKE is case-insensitive:\n \nSELECT * FROM t1 where d like \"t%\";\n \nSELECT * FROM t1 where d like \"t%\";\n+----------+\n| d |\n+----------+\n| Tuesday |\n| Thursday |\n+----------+\n \nUse COLLATE to specify a binary collation, forcing\ncase-sensitive matches:\n \nSELECT * FROM t1 WHERE d like \"t%\" COLLATE latin1_bin;\n \nSELECT * FROM t1 WHERE d like \"t%\" COLLATE latin1_bin;\nEmpty set (0.00 sec)\n \nYou can include functions and operators in the expression to\nmatch. Select dates\nbased on their day name:\n \nCREATE TABLE t2 (d DATETIME);\nINSERT INTO t2 VALUES\n (\"2007-01-30 21:31:07\"),\n (\"1983-10-15 06:42:51\"),\n (\"2011-04-21 12:34:56\"),\n (\"2011-10-30 06:31:41\"),\n (\"2011-01-30 14:03:25\"),\n (\"2004-10-07 11:19:34\");\nSELECT * FROM t2 WHERE DAYNAME(d) LIKE \"T%\";\n \nSELECT * FROM t2 WHERE DAYNAME(d) LIKE \"T%\";\n+------------------+\n| d |\n+------------------+\n| 2007-01-30 21:31 |\n| 2011-04-21 12:34 |\n| 2004-10-07 11:19 |\n+------------------+\n3 rows in set, 7 warnings (0.00 sec)\n \nOptimizing LIKE\n \nMariaDB can use indexes for LIKE on string columns in the\ncase where the LIKE doesn\'t start with % or _.\nStarting from MariaDB 10.0, one can set the\noptimizer_use_condition_selectivity variable to 5. If this\nis done, then the optimizer will read\noptimizer_selectivity_sampling_limit rows to calculate the\nselectivity of the LIKE expression before starting to\ncalculate the query plan. This can help speed up some LIKE\nqueries by providing the optimizer with more information\nabout your data.\n \n\n\nURL: https://mariadb.com/kb/en/like/', '', 'https://mariadb.com/kb/en/like/'),
(609, 'LOCATE', 37, 'Syntax\n------ \nLOCATE(substr,str), LOCATE(substr,str,pos)\n \nDescription\n----------- \nThe first syntax returns the position of the first\noccurrence of\nsubstring substr in string str. The second syntax returns\nthe position\nof the first occurrence of substring substr in string str,\nstarting at\nposition pos. Returns 0 if substr is not in str.\n \nLOCATE() performs a case-insensitive search.\n \nIf any argument is NULL, returns NULL.\n \nINSTR() is a synonym of LOCATE() without the third argument.\n \nExamples\n-------- \nSELECT LOCATE(\'bar\', \'foobarbar\');\n+----------------------------+\n| LOCATE(\'bar\', \'foobarbar\') |\n+----------------------------+\n| 4 |\n+----------------------------+\n \nSELECT LOCATE(\'My\', \'Maria\');\n+-----------------------+\n| LOCATE(\'My\', \'Maria\') |\n+-----------------------+\n| 0 |\n+-----------------------+\n \nSELECT LOCATE(\'bar\', \'foobarbar\', 5);\n+-------------------------------+\n| LOCATE(\'bar\', \'foobarbar\', 5) |\n+-------------------------------+\n| 7 |\n+-------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/locate/', '', 'https://mariadb.com/kb/en/locate/'),
(610, 'LOWER', 37, 'Syntax\n------ \nLOWER(str)\n \nDescription\n----------- \nReturns the string str with all characters changed to\nlowercase\naccording to the current character set mapping. The default\nis latin1\n(cp1252 West European).\n \nExamples\n-------- \n SELECT LOWER(\'QUADRATICALLY\');\n+------------------------+\n| LOWER(\'QUADRATICALLY\') |\n+------------------------+\n| quadratically |\n+------------------------+\n \nLOWER() (and UPPER()) are ineffective when applied to binary\nstrings (BINARY, VARBINARY, BLOB). \nTo perform lettercase conversion, CONVERT the string to a\nnon-binary string:\n \nSET @str = BINARY \'North Carolina\';\n \nSELECT LOWER(@str), LOWER(CONVERT(@str USING latin1));\n+----------------+-----------------------------------+\n| LOWER(@str) | LOWER(CONVERT(@str USING latin1)) |\n+----------------+-----------------------------------+\n| North Carolina | north carolina |\n+----------------+-----------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/lower/', '', 'https://mariadb.com/kb/en/lower/'),
(611, 'LPAD', 37, 'Syntax\n------ \nLPAD(str, len [,padstr])\n \nDescription\n----------- \nReturns the string str, left-padded with the string padstr\nto a length\nof len characters. If str is longer than len, the return\nvalue is\nshortened to len characters. If padstr is omitted, the LPAD\nfunction pads spaces.\n \nPrior to MariaDB 10.3.1, the padstr parameter was mandatory.\n \nReturns NULL if given a NULL argument. If the result is\nempty (zero length), returns either an empty string or, from\nMariaDB 10.3.6 with SQL_MODE=Oracle, NULL.\n \nThe Oracle mode version of the function can be accessed\noutside of Oracle mode by using LPAD_ORACLE as the function\nname.\n \nExamples\n-------- \nSELECT LPAD(\'hello\',10,\'.\');\n+----------------------+\n| LPAD(\'hello\',10,\'.\') |\n+----------------------+\n| .....hello |\n+----------------------+\n \nSELECT LPAD(\'hello\',2,\'.\');\n+---------------------+\n| LPAD(\'hello\',2,\'.\') |\n+---------------------+\n| he |\n+---------------------+\n \nFrom MariaDB 10.3.1, with the pad string defaulting to\nspace.\n \nSELECT LPAD(\'hello\',10);\n+------------------+\n| LPAD(\'hello\',10) |\n+------------------+\n| hello |\n+------------------+\n \nOracle mode version from MariaDB 10.3.6:\n \nSELECT LPAD(\'\',0),LPAD_ORACLE(\'\',0);\n+------------+-------------------+\n| LPAD(\'\',0) | LPAD_ORACLE(\'\',0) |\n+------------+-------------------+\n| | NULL |\n+------------+-------------------+\n \n\n\nURL: https://mariadb.com/kb/en/lpad/', '', 'https://mariadb.com/kb/en/lpad/'),
(612, 'LTRIM', 37, 'Syntax\n------ \nLTRIM(str)\n \nDescription\n----------- \nReturns the string str with leading space characters\nremoved.\n \nReturns NULL if given a NULL argument. If the result is\nempty, returns either an empty string, or, from MariaDB\n10.3.6 with SQL_MODE=Oracle, NULL.\n \nThe Oracle mode version of the function can be accessed\noutside of Oracle mode by using LTRIM_ORACLE as the function\nname.\n \nExamples\n-------- \nSELECT QUOTE(LTRIM(\' MariaDB \'));\n+-------------------------------+\n| QUOTE(LTRIM(\' MariaDB \')) |\n+-------------------------------+\n| \'MariaDB \' |\n+-------------------------------+\n \nOracle mode version from MariaDB 10.3.6:\n \nSELECT LTRIM(\'\'),LTRIM_ORACLE(\'\');\n+-----------+------------------+\n| LTRIM(\'\') | LTRIM_ORACLE(\'\') |\n+-----------+------------------+\n| | NULL |\n+-----------+------------------+\n \n\n\nURL: https://mariadb.com/kb/en/ltrim/', '', 'https://mariadb.com/kb/en/ltrim/'),
(613, 'MAKE_SET', 37, 'Syntax\n------ \nMAKE_SET(bits,str1,str2,...)\n \nDescription\n----------- \nReturns a set value (a string containing substrings\nseparated by \",\"\ncharacters) consisting of the strings that have the\ncorresponding bit\nin bits set. str1 corresponds to bit 0, str2 to bit 1, and\nso on. NULL\nvalues in str1, str2, ... are not appended to the result.\n \nExamples\n-------- \nSELECT MAKE_SET(1,\'a\',\'b\',\'c\');\n+-------------------------+\n| MAKE_SET(1,\'a\',\'b\',\'c\') |\n+-------------------------+\n| a |\n+-------------------------+\n \nSELECT MAKE_SET(1 | 4,\'hello\',\'nice\',\'world\');\n+----------------------------------------+\n| MAKE_SET(1 | 4,\'hello\',\'nice\',\'world\') |\n+----------------------------------------+\n| hello,world |\n+----------------------------------------+\n \nSELECT MAKE_SET(1 | 4,\'hello\',\'nice\',NULL,\'world\');\n+---------------------------------------------+\n| MAKE_SET(1 | 4,\'hello\',\'nice\',NULL,\'world\') |\n+---------------------------------------------+\n| hello |\n+---------------------------------------------+\n \nSELECT QUOTE(MAKE_SET(0,\'a\',\'b\',\'c\'));\n+--------------------------------+\n| QUOTE(MAKE_SET(0,\'a\',\'b\',\'c\')) |\n+--------------------------------+\n| \'\' |\n+--------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/make_set/', '', 'https://mariadb.com/kb/en/make_set/'),
(614, 'MATCH AGAINST', 37, 'Syntax\n------ \nMATCH (col1,col2,...) AGAINST (expr [search_modifier])\n \nDescription\n----------- \nA special construct used to perform a fulltext search on a\nfulltext index.\n \nSee Fulltext Index Overview for a full description, and\nFull-text Indexes for more articles on the topic.\n \nExamples\n-------- \nCREATE TABLE ft_myisam(copy TEXT,FULLTEXT(copy))\nENGINE=MyISAM;\n \nINSERT INTO ft_myisam(copy) VALUES (\'Once upon a time\'),\n(\'There was a wicked witch\'), \n (\'Who ate everybody up\');\n \nSELECT * FROM ft_myisam WHERE MATCH(copy)\nAGAINST(\'wicked\');\n+--------------------------+\n| copy |\n+--------------------------+\n| There was a wicked witch |\n+--------------------------+\n \nSELECT id, body, MATCH (title,body) AGAINST\n (\'Security implications of running MySQL as root\'\n IN NATURAL LANGUAGE MODE) AS score\n FROM articles WHERE MATCH (title,body) AGAINST\n (\'Security implications of running MySQL as root\'\n IN NATURAL LANGUAGE MODE);\n+----+-------------------------------------+-----------------+\n| id | body | score |\n+----+-------------------------------------+-----------------+\n| 4 | 1. Never run mysqld as root. 2. ... | 1.5219271183014\n|\n| 6 | When configured properly, MySQL ... | 1.3114095926285\n|\n+----+-------------------------------------+-----------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/match-against/', '', 'https://mariadb.com/kb/en/match-against/'),
(622, 'REGEXP_INSTR', 37, 'REGEXP_INSTR was introduced in MariaDB 10.0.5.\n \nSyntax\n------ \nREGEXP_INSTR(subject, pattern)\n \nReturns the position of the first occurrence of the regular\nexpression pattern in the string subject, or 0 if pattern\nwas not found.\n \nThe positions start with 1 and are measured in characters\n(i.e. not in bytes), which is important for multi-byte\ncharacter sets. You can cast a multi-byte character set to\nBINARY to get offsets in bytes.\n \nThe function follows the case sensitivity rules of the\neffective collation. Matching is performed case\ninsensitively for case insensitive collations, and case\nsensitively for case sensitive collations and for binary\ndata.\n \nThe collation case sensitivity can be overwritten using the\n(?i) and (?-i) PCRE flags.\n \nMariaDB 10.0.5 switched to the PCRE regular expression\nlibrary for enhanced regular expression performance, and\nREGEXP_INSTR was introduced as part of this enhancement.\n \nExamples\n-------- \nSELECT REGEXP_INSTR(\'abc\',\'b\');\n-> 2\n \nSELECT REGEXP_INSTR(\'abc\',\'x\');\n-> 0\n \nSELECT REGEXP_INSTR(\'BJÖRN\',\'N\');\n-> 5\n \nCasting a multi-byte character set as BINARY to get offsets\nin bytes:\n \nSELECT REGEXP_INSTR(BINARY \'BJÖRN\',\'N\') AS\ncast_utf8_to_binary;\n-> 6\n \nCase sensitivity:\n \nSELECT REGEXP_INSTR(\'ABC\',\'b\');\n-> 2\n \nSELECT REGEXP_INSTR(\'ABC\' COLLATE utf8_bin,\'b\');\n-> 0\n \nSELECT REGEXP_INSTR(BINARY\'ABC\',\'b\');\n-> 0\n \nSELECT REGEXP_INSTR(\'ABC\',\'(?-i)b\');\n-> 0\n \nSELECT REGEXP_INSTR(\'ABC\' COLLATE utf8_bin,\'(?i)b\');\n-> 2\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/regexp_instr/', '', 'https://mariadb.com/kb/en/regexp_instr/'),
(623, 'REGEXP_REPLACE', 37, 'REGEXP_REPLACE was introduced in MariaDB 10.0.5.\n \nSyntax\n------ \nREGEXP_REPLACE(subject, pattern, replace)\n \nDescription\n----------- \nREGEXP_REPLACE returns the string subject with all\noccurrences of the regular expression pattern replaced by\nthe string replace. If no occurrences are found, then\nsubject is returned as is.\n \nThe replace string can have backreferences to the\nsubexpressions in the form \\N, where N is a number from 1\nto 9.\n \nThe function follows the case sensitivity rules of the\neffective collation. Matching is performed case\ninsensitively for case insensitive collations, and case\nsensitively for case sensitive collations and for binary\ndata.\n \nThe collation case sensitivity can be overwritten using the\n(?i) and (?-i) PCRE flags.\n \nMariaDB 10.0.5 switched to the PCRE regular expression\nlibrary for enhanced regular expression performance, and\nREGEXP_REPLACE was introduced as part of this enhancement.\n \nMariaDB 10.0.11 introduced the default_regex_flags variable\nto address the remaining compatibilities between PCRE and\nthe old regex library. \n \nExamples\n-------- \nSELECT REGEXP_REPLACE(\'ab12cd\',\'[0-9]\',\'\') AS\nremove_digits;\n-> abcd\n \nSELECT REGEXP_REPLACE(\'titlebody\', \'\',\' \')\nAS strip_html;\n-> title body\n \nBackreferences to the subexpressions in the form \\N, where\nN is a number from 1 to 9:\n \nSELECT REGEXP_REPLACE(\'James Bond\',\'^(.*)\n(.*)$\',\'\\\\2, \\\\1\') AS reorder_name;\n-> Bond, James\n \nCase insensitive and case sensitive matches:\n \nSELECT REGEXP_REPLACE(\'ABC\',\'b\',\'-\') AS\ncase_insensitive;\n-> A-C\n \nSELECT REGEXP_REPLACE(\'ABC\' COLLATE utf8_bin,\'b\',\'-\')\nAS case_sensitive;\n-> ABC\n \nSELECT REGEXP_REPLACE(BINARY \'ABC\',\'b\',\'-\') AS\nbinary_data;\n-> ABC\n \nOverwriting the collation case sensitivity using the (?i)\nand (?-i) PCRE flags.\n \nSELECT REGEXP_REPLACE(\'ABC\',\'(?-i)b\',\'-\') AS\nforce_case_sensitive;\n-> ABC\n \nSELECT REGEXP_REPLACE(BINARY \'ABC\',\'(?i)b\',\'-\') AS\nforce_case_insensitive;\n-> A-C\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/regexp_replace/', '', 'https://mariadb.com/kb/en/regexp_replace/'),
(624, 'REGEXP_SUBSTR', 37, 'REGEXP_SUBSTR was introduced in MariaDB 10.0.5.\n \nSyntax\n------ \nREGEXP_SUBSTR(subject,pattern)\n \nDescription\n----------- \nReturns the part of the string subject that matches the\nregular expression pattern, or an empty string if pattern\nwas not found.\n \nThe function follows the case sensitivity rules of the\neffective collation. Matching is performed case\ninsensitively for case insensitive collations, and case\nsensitively for case sensitive collations and for binary\ndata.\n \nThe collation case sensitivity can be overwritten using the\n(?i) and (?-i) PCRE flags.\n \nMariaDB 10.0.5 switched to the PCRE regular expression\nlibrary for enhanced regular expression performance, and\nREGEXP_SUBSTR was introduced as part of this enhancement.\n \nMariaDB 10.0.11 introduced the default_regex_flags variable\nto address the remaining compatibilities between PCRE and\nthe old regex library. \n \nExamples\n-------- \nSELECT REGEXP_SUBSTR(\'ab12cd\',\'[0-9]+\');\n-> 12\n \nSELECT REGEXP_SUBSTR(\n \'See https://mariadb.org/en/foundation/ for details\',\n \'https?://[^/]*\');\n-> https://mariadb.org\n \nSELECT REGEXP_SUBSTR(\'ABC\',\'b\');\n-> B\n \nSELECT REGEXP_SUBSTR(\'ABC\' COLLATE utf8_bin,\'b\');\n->\n \nSELECT REGEXP_SUBSTR(BINARY\'ABC\',\'b\');\n->\n \nSELECT REGEXP_SUBSTR(\'ABC\',\'(?i)b\');\n-> B\n \nSELECT REGEXP_SUBSTR(\'ABC\' COLLATE utf8_bin,\'(?+i)b\');\n-> B\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/regexp_substr/', '', 'https://mariadb.com/kb/en/regexp_substr/'),
(629, 'RPAD', 37, 'Syntax\n------ \nRPAD(str, len [, padstr])\n \nDescription\n----------- \nReturns the string str, right-padded with the string padstr\nto a\nlength of len characters. If str is longer than len, the\nreturn value\nis shortened to len characters. If padstr is omitted, the\nRPAD function pads spaces.\n \nPrior to MariaDB 10.3.1, the padstr parameter was mandatory.\n \nReturns NULL if given a NULL argument. If the result is\nempty (a length of zero), returns either an empty string,\nor, from MariaDB 10.3.6 with SQL_MODE=Oracle, NULL.\n \nThe Oracle mode version of the function can be accessed\noutside of Oracle mode by using RPAD_ORACLE as the function\nname.\n \nExamples\n-------- \nSELECT RPAD(\'hello\',10,\'.\');\n+----------------------+\n| RPAD(\'hello\',10,\'.\') |\n+----------------------+\n| hello..... |\n+----------------------+\n \nSELECT RPAD(\'hello\',2,\'.\');\n+---------------------+\n| RPAD(\'hello\',2,\'.\') |\n+---------------------+\n| he |\n+---------------------+\n \nFrom MariaDB 10.3.1, with the pad string defaulting to\nspace.\n \nSELECT RPAD(\'hello\',30);\n+--------------------------------+\n| RPAD(\'hello\',30) |\n+--------------------------------+\n| hello |\n+--------------------------------+\n \nOracle mode version from MariaDB 10.3.6:\n \nSELECT RPAD(\'\',0),RPAD_ORACLE(\'\',0);\n+------------+-------------------+\n| RPAD(\'\',0) | RPAD_ORACLE(\'\',0) |\n+------------+-------------------+\n| | NULL |\n+------------+-------------------+\n \n\n\nURL: https://mariadb.com/kb/en/rpad/', '', 'https://mariadb.com/kb/en/rpad/'),
(630, 'RTRIM', 37, 'Syntax\n------ \nRTRIM(str)\n \nDescription\n----------- \nReturns the string str with trailing space characters\nremoved.\n \nReturns NULL if given a NULL argument. If the result is\nempty, returns either an empty string, or, from MariaDB\n10.3.6 with SQL_MODE=Oracle, NULL.\n \nThe Oracle mode version of the function can be accessed\noutside of Oracle mode by using RTRIM_ORACLE as the function\nname.\n \nExamples\n-------- \nSELECT QUOTE(RTRIM(\'MariaDB \'));\n+-----------------------------+\n| QUOTE(RTRIM(\'MariaDB \')) |\n+-----------------------------+\n| \'MariaDB\' |\n+-----------------------------+\n \nOracle mode version from MariaDB 10.3.6:\n \nSELECT RTRIM(\'\'),RTRIM_ORACLE(\'\');\n+-----------+------------------+\n| RTRIM(\'\') | RTRIM_ORACLE(\'\') |\n+-----------+------------------+\n| | NULL |\n+-----------+------------------+\n \n\n\nURL: https://mariadb.com/kb/en/rtrim/', '', 'https://mariadb.com/kb/en/rtrim/'),
(631, 'SOUNDEX', 37, 'Syntax\n------ \nSOUNDEX(str)\n \nDescription\n----------- \nReturns a soundex string from str. Two strings that sound\nalmost the\nsame should have identical soundex strings. A standard\nsoundex string is four\ncharacters long, but the SOUNDEX() function returns an\narbitrarily long\nstring. You can use SUBSTRING() on the result to get a\nstandard soundex\nstring. All non-alphabetic characters in str are ignored.\nAll\ninternational alphabetic characters outside the A-Z range\nare treated as\nvowels.\n \nImportant: When using SOUNDEX(), you should be aware of the\nfollowing limitations:\nThis function, as currently implemented, is intended to work\nwell with\n strings that are in the English language only. Strings in\nother languages may\n not produce reliable results.\n \nExamples\n-------- \nSOUNDEX(\'Hello\');\n+------------------+\n| SOUNDEX(\'Hello\') |\n+------------------+\n| H400 |\n+------------------+\n \nSELECT SOUNDEX(\'MariaDB\');\n+--------------------+\n| SOUNDEX(\'MariaDB\') |\n+--------------------+\n| M631 |\n+--------------------+\n \nSELECT SOUNDEX(\'Knowledgebase\');\n+--------------------------+\n| SOUNDEX(\'Knowledgebase\') |\n+--------------------------+\n| K543212 |\n+--------------------------+\n \nSELECT givenname, surname FROM users WHERE\nSOUNDEX(givenname) = SOUNDEX(\"robert\");\n+-----------+---------+\n| givenname | surname |\n+-----------+---------+\n| Roberto | Castro |\n+-----------+---------+\n \n\n\nURL: https://mariadb.com/kb/en/soundex/', '', 'https://mariadb.com/kb/en/soundex/'),
(636, 'SUBSTRING', 37, 'Syntax\n------ \nSUBSTRING(str,pos), \nSUBSTRING(str FROM pos), \nSUBSTRING(str,pos,len),\nSUBSTRING(str FROM pos FOR len)\n \nSUBSTR(str,pos), \nSUBSTR(str FROM pos), \nSUBSTR(str,pos,len),\nSUBSTR(str FROM pos FOR len)\n \nDescription\n----------- \nThe forms without a len argument return a substring from\nstring str starting at position pos.\n \nThe forms with a len argument return a substring len\ncharacters long from string str, starting at position pos.\n \nThe forms that use FROM are standard SQL syntax.\n \nIt is also possible to use a negative value for pos. In this\ncase, the beginning of the substring is pos characters from\nthe end of the string, rather than the beginning. A negative\nvalue may be used for pos in any of the forms of this\nfunction.\n \nBy default, the position of the first character in the\nstring from which the substring is to be extracted is\nreckoned as 1. For Oracle-compatibility, from MariaDB\n10.3.3, when sql_mode is set to \'oracle\', position zero is\ntreated as position 1 (although the first character is still\nreckoned as 1).\n \nIf any argument is NULL, returns NULL.\n \nExamples\n-------- \nSELECT SUBSTRING(\'Knowledgebase\',5);\n+------------------------------+\n| SUBSTRING(\'Knowledgebase\',5) |\n+------------------------------+\n| ledgebase |\n+------------------------------+\n \nSELECT SUBSTRING(\'MariaDB\' FROM 6);\n+-----------------------------+\n| SUBSTRING(\'MariaDB\' FROM 6) |\n+-----------------------------+\n| DB |\n+-----------------------------+\n \nSELECT SUBSTRING(\'Knowledgebase\',3,7);\n+--------------------------------+\n| SUBSTRING(\'Knowledgebase\',3,7) |\n+--------------------------------+\n| owledge |\n+--------------------------------+\n \nSELECT SUBSTRING(\'Knowledgebase\', -4);\n+--------------------------------+\n| SUBSTRING(\'Knowledgebase\', -4) |\n+--------------------------------+\n| base |\n+--------------------------------+\n \nSELECT SUBSTRING(\'Knowledgebase\', -8, 4);\n+-----------------------------------+\n| SUBSTRING(\'Knowledgebase\', -8, 4) |\n+-----------------------------------+\n| edge |\n+-----------------------------------+\n \nSELECT SUBSTRING(\'Knowledgebase\' FROM -8 FOR 4);\n+------------------------------------------+\n| SUBSTRING(\'Knowledgebase\' FROM -8 FOR 4) |\n+------------------------------------------+\n| edge |\n+------------------------------------------+\n \nOracle mode from MariaDB 10.3.3:\n \nSELECT SUBSTR(\'abc\',0,3);\n+-------------------+\n| SUBSTR(\'abc\',0,3) |\n+-------------------+\n| |\n+-------------------+\n \nSELECT SUBSTR(\'abc\',1,2);\n+-------------------+\n| SUBSTR(\'abc\',1,2) |\n+-------------------+\n| ab |\n+-------------------+\n \nSET sql_mode=\'oracle\';\n \nSELECT SUBSTR(\'abc\',0,3);\n+-------------------+\n| SUBSTR(\'abc\',0,3) |\n+-------------------+\n| abc |\n+-------------------+\n \nSELECT SUBSTR(\'abc\',1,2);\n+-------------------+\n| SUBSTR(\'abc\',1,2) |\n+-------------------+\n| ab |\n+-------------------+\n \n\n\nURL: https://mariadb.com/kb/en/substring/', '', 'https://mariadb.com/kb/en/substring/'),
(637, 'SUBSTRING_INDEX', 37, 'Syntax\n------ \nSUBSTRING_INDEX(str,delim,count)\n \nDescription\n----------- \nReturns the substring from string str before count\noccurrences of the\ndelimiter delim. If count is positive, everything to the\nleft\nof the final delimiter (counting from the left) is returned.\nIf count\nis negative, everything to the right of the final delimiter\n(counting from the\nright) is returned. SUBSTRING_INDEX() performs a\ncase-sensitive match when\nsearching for delim.\n \nIf any argument is NULL, returns NULL.\n \nExamples\n-------- \nSELECT SUBSTRING_INDEX(\'www.mariadb.org\', \'.\', 2);\n+--------------------------------------------+\n| SUBSTRING_INDEX(\'www.mariadb.org\', \'.\', 2) |\n+--------------------------------------------+\n| www.mariadb |\n+--------------------------------------------+\n \nSELECT SUBSTRING_INDEX(\'www.mariadb.org\', \'.\', -2);\n+---------------------------------------------+\n| SUBSTRING_INDEX(\'www.mariadb.org\', \'.\', -2) |\n+---------------------------------------------+\n| mariadb.org |\n+---------------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/substring_index/', '', 'https://mariadb.com/kb/en/substring_index/'),
(638, 'TO_BASE64', 37, 'The TO_BASE64() function was introduced in MariaDB 10.0.5.\n \nSyntax\n------ \nTO_BASE64(str)\n \nDescription\n----------- \nConverts the string argument str to its base-64 encoded\nform, returning the result as a character string in the\nconnection character set and collation.\n \nThe argument str will be converted to string first if it is\nnot a string. A NULL argument will return a NULL result.\n \nThe reverse function, FROM_BASE64(), decodes an encoded\nbase-64 string.\n \nThere are a numerous different methods to base-64 encode a\nstring. The following are used by MariaDB and MySQL:\nAlphabet value 64 is encoded as \'+\'.\nAlphabet value 63 is encoded as \'/\'.\nEncoding output is made up of groups of four printable\ncharacters, with each three bytes of data encoded using four\ncharacters. If the final group is not complete, it is padded\nwith \'=\' characters to make up a length of four.\nTo divide long output, a newline is added after every 76\ncharacters.\nDecoding will recognize and ignore newlines, carriage\nreturns, tabs, and spaces. \n \nExamples\n-------- \nSELECT TO_BASE64(\'Maria\');\n+--------------------+\n| TO_BASE64(\'Maria\') |\n+--------------------+\n| TWFyaWE= |\n+--------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/to_base64/', '', 'https://mariadb.com/kb/en/to_base64/'),
(639, 'TRIM', 37, 'Syntax\n------ \nTRIM([{BOTH | LEADING | TRAILING} [remstr] FROM] str),\nTRIM([remstr FROM] str)\n \nDescription\n----------- \nReturns the string str with all remstr prefixes or suffixes\nremoved. If none of the specifiers BOTH, LEADING, or\nTRAILING is given, BOTH is assumed. remstr is optional and,\nif not specified, spaces are removed.\n \nReturns NULL if given a NULL argument. If the result is\nempty, returns either an empty string, or, from MariaDB\n10.3.6 with SQL_MODE=Oracle, NULL.\n \nThe Oracle mode version of the function can be accessed\noutside of Oracle mode by using TRIM_ORACLE as the function\nname.\n \nExamples\n-------- \nSELECT TRIM(\' bar \')\\G\n*************************** 1. row\n***************************\nTRIM(\' bar \'): bar\n \nSELECT TRIM(LEADING \'x\' FROM \'xxxbarxxx\')\\G\n*************************** 1. row\n***************************\nTRIM(LEADING \'x\' FROM \'xxxbarxxx\'): barxxx\n \nSELECT TRIM(BOTH \'x\' FROM \'xxxbarxxx\')\\G\n*************************** 1. row\n***************************\nTRIM(BOTH \'x\' FROM \'xxxbarxxx\'): bar\n \nSELECT TRIM(TRAILING \'xyz\' FROM \'barxxyz\')\\G\n*************************** 1. row\n***************************\nTRIM(TRAILING \'xyz\' FROM \'barxxyz\'): barx\n \nOracle mode version from MariaDB 10.3.6:\n \nSELECT TRIM(\'\'),TRIM_ORACLE(\'\');\n+----------+-----------------+\n| TRIM(\'\') | TRIM_ORACLE(\'\') |\n+----------+-----------------+\n| | NULL |\n+----------+-----------------+\n \n\n\nURL: https://mariadb.com/kb/en/trim/', '', 'https://mariadb.com/kb/en/trim/'),
(641, 'UNHEX', 37, 'Syntax\n------ \nUNHEX(str)\n \nDescription\n----------- \nPerforms the inverse operation of HEX(str). That is, it\ninterprets\neach pair of hexadecimal digits in the argument as a number\nand\nconverts it to the character represented by the number. The\nresulting\ncharacters are returned as a binary string.\n \nIf str is NULL, UNHEX() returns NULL.\n \nExamples\n-------- \nSELECT HEX(\'MariaDB\');\n+----------------+\n| HEX(\'MariaDB\') |\n+----------------+\n| 4D617269614442 |\n+----------------+\n \nSELECT UNHEX(\'4D617269614442\');\n+-------------------------+\n| UNHEX(\'4D617269614442\') |\n+-------------------------+\n| MariaDB |\n+-------------------------+\n \nSELECT 0x4D617269614442;\n \n+------------------+\n| 0x4D617269614442 |\n+------------------+\n| MariaDB |\n+------------------+\n \nSELECT UNHEX(HEX(\'string\'));\n+----------------------+\n| UNHEX(HEX(\'string\')) |\n+----------------------+\n| string |\n+----------------------+\n \nSELECT HEX(UNHEX(\'1267\'));\n+--------------------+\n| HEX(UNHEX(\'1267\')) |\n+--------------------+\n| 1267 |\n+--------------------+\n \n\n\nURL: https://mariadb.com/kb/en/unhex/', '', 'https://mariadb.com/kb/en/unhex/'),
(642, 'UPDATEXML', 37, 'Syntax\n------ \nUpdateXML(xml_target, xpath_expr, new_xml)\n \nDescription\n----------- \nThis function replaces a single portion of a given fragment\nof XML markup\nxml_target with a new XML fragment new_xml, and then returns\nthe\nchanged XML. The portion of xml_target that is replaced\nmatches an XPath\nexpression xpath_expr supplied by the user. If no expression\nmatching\nxpath_expr is found, or if multiple matches are found, the\nfunction returns\nthe original xml_target XML fragment. All three arguments\nshould be\nstrings.\n \nExamples\n-------- \nSELECT\n UpdateXML(\'ccc\', \'/a\', \'fff\') AS val1,\n UpdateXML(\'ccc\', \'/b\', \'fff\') AS val2,\n UpdateXML(\'ccc\', \'//b\', \'fff\') AS val3,\n UpdateXML(\'ccc\', \'/a/d\', \'fff\') AS val4,\n UpdateXML(\'ccc\', \'/a/d\', \'fff\') AS val5\n \\G\n*************************** 1. row\n***************************\nval1: fff\nval2: ccc\nval3: fff\nval4: cccfff\nval5: ccc\n1 row in set (0.00 sec)\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/updatexml/', '', 'https://mariadb.com/kb/en/updatexml/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(644, 'WEIGHT_STRING', 37, 'The WEIGHT_STRING function was introduced in MariaDB 10.0.5.\n \nSyntax\n------ \nWEIGHT_STRING(str [AS {CHAR|BINARY}(N)] [LEVEL levels]\n[flags])\n levels: N [ASC|DESC|REVERSE] [, N [ASC|DESC|REVERSE]] ... \n \nDescription\n----------- \nReturns a binary string representing the string\'s sorting\nand comparison value. A string with a lower result means\nthat for sorting purposes the string appears before a string\nwith a higher result.\n \nWEIGHT_STRING() is particularly useful when adding new\ncollations, for testing purposes.\n \nIf str is a non-binary string (CHAR, VARCHAR or TEXT),\nWEIGHT_STRING returns the string\'s collation weight. If str\nis a binary string (BINARY, VARBINARY or BLOB), the return\nvalue is simply the input value, since the weight for each\nbyte in a binary string is the byte value.\n \nWEIGHT_STRING() returns NULL if given a NULL input. \n \nThe optional AS clause permits casting the input string to a\nbinary or non-binary string, as well as to a particular\nlength.\n \nAS BINARY(N) measures the length in bytes rather than\ncharacters, and right pads with 0x00 bytes to the desired\nlength. \n \nAS CHAR(N) measures the length in characters, and right pads\nwith spaces to the desired length.\n \nN has a minimum value of 1, and if it is less than the\nlength of the input string, the string is truncated without\nwarning.\n \nThe optional LEVEL clause specifies that the return value\nshould contain weights for specific collation levels. The\nlevels specifier can either be a single integer, a\ncomma-separated list of integers, or a range of integers\nseparated by a dash (whitespace is ignored). Integers can\nrange from 1 to a maximum of 6, dependent on the collation,\nand need to be listed in ascending order.\n \nIf the LEVEL clause is no provided, a default of 1 to the\nmaximum for the collation is assumed.\n \nIf the LEVEL is specified without using a range, an optional\nmodifier is permitted.\n \nASC, the default, returns the weights without any\nmodification.\n \nDESC returns bitwise-inverted weights.\n \nREVERSE returns the weights in reverse order.\n \nExamples\n-------- \nThe examples below use the HEX() function to represent\nnon-printable results in hexadecimal format.\n \nSELECT HEX(WEIGHT_STRING(\'x\'));\n+-------------------------+\n| HEX(WEIGHT_STRING(\'x\')) |\n+-------------------------+\n| 0058 |\n+-------------------------+\n \nSELECT HEX(WEIGHT_STRING(\'x\' AS BINARY(4)));\n+--------------------------------------+\n| HEX(WEIGHT_STRING(\'x\' AS BINARY(4))) |\n+--------------------------------------+\n| 78000000 |\n+--------------------------------------+\n \nSELECT HEX(WEIGHT_STRING(\'x\' AS CHAR(4)));\n+------------------------------------+\n| HEX(WEIGHT_STRING(\'x\' AS CHAR(4))) |\n+------------------------------------+\n| 0058002000200020 |\n+------------------------------------+\n \nSELECT HEX(WEIGHT_STRING(0xaa22ee LEVEL 1));\n+--------------------------------------+\n| HEX(WEIGHT_STRING(0xaa22ee LEVEL 1)) |\n+--------------------------------------+\n| AA22EE |\n+--------------------------------------+\n \nSELECT HEX(WEIGHT_STRING(0xaa22ee LEVEL 1 DESC));\n+-------------------------------------------+\n| HEX(WEIGHT_STRING(0xaa22ee LEVEL 1 DESC)) |\n+-------------------------------------------+\n| 55DD11 |\n+-------------------------------------------+\n \nSELECT HEX(WEIGHT_STRING(0xaa22ee LEVEL 1 REVERSE));\n+----------------------------------------------+\n| HEX(WEIGHT_STRING(0xaa22ee LEVEL 1 REVERSE)) |\n+----------------------------------------------+\n| EE22AA |\n+----------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/weight_string/', '', 'https://mariadb.com/kb/en/weight_string/'),
(645, 'ALTER DATABASE', 39, 'Modifies a database, changing its overall characteristics.\n \nSyntax\n------ \nALTER {DATABASE | SCHEMA} [db_name]\n alter_specification ...\nALTER {DATABASE | SCHEMA} db_name\n UPGRADE DATA DIRECTORY NAME\n \nalter_specification:\n [DEFAULT] CHARACTER SET [=] charset_name\n | [DEFAULT] COLLATE [=] collation_name\n \nDescription\n----------- \nALTER DATABASE enables you to change the overall\ncharacteristics of a\ndatabase. These characteristics are stored in the db.opt\nfile in the\ndatabase directory. To use ALTER DATABASE, you need the\nALTER\nprivilege on the database. ALTER SCHEMA is a synonym for\nALTER\nDATABASE.\n \nThe CHARACTER SET clause changes the default database\ncharacter set.\nThe COLLATE clause changes the default database collation.\nSee Character Sets and Collations for more.\n \nYou can see what character sets and collations are available\nusing,\nrespectively, the SHOW CHARACTER SET and SHOW COLLATION\nstatements.\n \nChanging the default character set/collation of a database\ndoes not change the character set/collation of any stored\nprocedures or stored functions that were previously created,\nand relied on the defaults. These need to be dropped and\nrecreated in order to apply the character set/collation\nchanges.\n \nThe database name can be omitted from the first syntax, in\nwhich case\nthe statement applies to the default database.\n \nThe syntax that includes the UPGRADE DATA DIRECTORY NAME\nclause was\nadded in MySQL 5.1.23. It updates the name of the directory\nassociated\nwith the database to use the encoding implemented in MySQL\n5.1 for\nmapping database names to database directory names (see\nIdentifier to File Name Mapping). This\nclause is for use under these conditions:\nIt is intended when upgrading MySQL to 5.1 or later from\nolder versions.\nIt is intended to update a database directory name to the\ncurrent encoding format if the name contains special\ncharacters that need encoding.\nThe statement is used by mysqlcheck (as invoked by\nmysql_upgrade).\n \nFor example,if a database in MySQL 5.0 has a name of a-b-c,\nthe name\ncontains instance of the `-\' character. In 5.0, the\ndatabase directory\nis also named a-b-c, which is not necessarily safe for all\nfile\nsystems. In MySQL 5.1 and up, the same database name is\nencoded as\na@002db@002dc to produce a file system-neutral directory\nname.\n \nWhen a MySQL installation is upgraded to MySQL 5.1 or later\nfrom an\nolder version,the server displays a name such as a-b-c\n(which is in\nthe old format) as #mysql50#a-b-c, and you must refer to the\nname\nusing the #mysql50# prefix. Use UPGRADE DATA DIRECTORY NAME\nin this\ncase to explicitly tell the server to re-encode the database\ndirectory\nname to the current encoding format:\n \nALTER DATABASE `#mysql50#a-b-c` UPGRADE DATA DIRECTORY NAME;\n \nAfter executing this statement, you can refer to the\ndatabase as a-b-c\nwithout the special #mysql50# prefix.\n \nExamples\n-------- \nALTER DATABASE test CHARACTER SET = \'utf8\' COLLATE =\n\'utf8_bin\';\n \n\n\nURL: https://mariadb.com/kb/en/alter-database/', '', 'https://mariadb.com/kb/en/alter-database/'),
(646, 'ALTER EVENT', 39, 'Modifies one or more characteristics of an existing event.\n \nSyntax\n------ \nALTER\n [DEFINER = { user | CURRENT_USER }]\n EVENT event_name\n [ON SCHEDULE schedule]\n [ON COMPLETION [NOT] PRESERVE]\n [RENAME TO new_event_name]\n [ENABLE | DISABLE | DISABLE ON SLAVE]\n [COMMENT \'comment\']\n [DO sql_statement]\n \nDescription\n----------- \nThe ALTER EVENT statement is used to change one or more of\nthe\ncharacteristics of an existing event without the need to\ndrop and recreate it.\nThe syntax for each of the DEFINER, ON SCHEDULE, ON\nCOMPLETION,\nCOMMENT, ENABLE / DISABLE, and DO clauses is exactly the\nsame as when used with CREATE EVENT.\n \nThis statement requires the EVENT privilege.\nWhen a user executes a successful ALTER EVENT statement,\nthat user becomes\nthe definer for the affected event.\n \n(In MySQL 5.1.11 and earlier, an event could be altered only\nby its definer, or\nby a user having the SUPER privilege.)\n \nALTER EVENT works only with an existing event:\n \nALTER EVENT no_such_event ON SCHEDULE EVERY \'2:3\'\nDAY_HOUR;\nERROR 1539 (HY000): Unknown event \'no_such_event\'\n \nExamples\n-------- \nALTER EVENT myevent \n ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 2 HOUR \n DO \n UPDATE myschema.mytable SET mycol = mycol + 1;\n \n\n\nURL: https://mariadb.com/kb/en/alter-event/', '', 'https://mariadb.com/kb/en/alter-event/'),
(647, 'ALTER FUNCTION', 39, 'Syntax\n------ \nALTER FUNCTION func_name [characteristic ...]\n \ncharacteristic:\n { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL\nDATA }\n | SQL SECURITY { DEFINER | INVOKER }\n | COMMENT \'string\'\n \nDescription\n----------- \nThis statement can be used to change the characteristics of\na stored\nfunction. More than one change may be specified in an ALTER\nFUNCTION\nstatement. However, you cannot change the parameters or body\nof a\nstored function using this statement; to make such changes,\nyou must\ndrop and re-create the function using DROP FUNCTION and\nCREATE FUNCTION.\n \nYou must have the ALTER ROUTINE privilege for the function.\n(That\nprivilege is granted automatically to the function creator.)\nIf binary\nlogging is enabled, the ALTER FUNCTION statement might also\nrequire\nthe SUPER privilege, as described in Binary Logging of\nStored Routines.\n \nExample\n \nALTER FUNCTION hello SQL SECURITY INVOKER;\n \n\n\nURL: https://mariadb.com/kb/en/alter-function/', '', 'https://mariadb.com/kb/en/alter-function/'),
(649, 'ALTER PROCEDURE', 39, 'Syntax\n------ \nALTER PROCEDURE proc_name [characteristic ...]\n \ncharacteristic:\n { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL\nDATA }\n | SQL SECURITY { DEFINER | INVOKER }\n | COMMENT \'string\'\n \nDescription\n----------- \nThis statement can be used to change the characteristics of\na stored\nprocedure. More than one change may be specified in an ALTER\nPROCEDURE\nstatement. However, you cannot change the parameters or body\nof a\nstored procedure using this statement. To make such changes,\nyou must\ndrop and re-create the procedure using either CREATE OR\nREPLACE PROCEDURE (since MariaDB 10.1.3) or DROP PROCEDURE\nand CREATE PROCEDURE (MariaDB 10.1.2 and before).\n \nYou must have the ALTER ROUTINE privilege for the procedure.\nBy default, that privilege is granted automatically to the\nprocedure creator. See Stored Routine Privileges.\n \nExample\n \nALTER PROCEDURE simpleproc SQL SECURITY INVOKER;\n \n\n\nURL: https://mariadb.com/kb/en/alter-procedure/', '', 'https://mariadb.com/kb/en/alter-procedure/'),
(654, 'ALTER VIEW', 39, 'Syntax\n------ \nALTER\n [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}]\n [DEFINER = { user | CURRENT_USER }]\n [SQL SECURITY { DEFINER | INVOKER }]\n VIEW view_name [(column_list)]\n AS select_statement\n [WITH [CASCADED | LOCAL] CHECK OPTION]\n \nDescription\n----------- \nThis statement changes the definition of a view, which must\nexist. The\nsyntax is similar to that for CREATE VIEW and the effect is\nthe same\nas for CREATE OR REPLACE VIEW if the view exists. This\nstatement\nrequires the CREATE VIEW and DROP privileges for the view,\nand some\nprivilege for each column referred to in the SELECT\nstatement. As of\nMariaDB 5.1.23, ALTER VIEW is allowed only to the definer or\nusers with\nthe SUPER privilege.\n \nExample\n \nALTER VIEW v AS SELECT a, a*3 AS a2 FROM t;\n \n\n\nURL: https://mariadb.com/kb/en/alter-view/', '', 'https://mariadb.com/kb/en/alter-view/'),
(656, 'CREATE DATABASE', 39, 'Syntax\n------ \nCREATE [OR REPLACE] {DATABASE | SCHEMA} [IF NOT EXISTS]\ndb_name\n [create_specification] ...\n \ncreate_specification:\n [DEFAULT] CHARACTER SET [=] charset_name\n | [DEFAULT] COLLATE [=] collation_name\n \nDescription\n----------- \nCREATE DATABASE creates a database with the given name. To\nuse this statement, you need the CREATE privilege for the\ndatabase. CREATE SCHEMA is a synonym for CREATE DATABASE.\n \nFor valid identifiers to use as database names, see\nIdentifier Names.\n \nOR REPLACE\n \nThe OR REPLACE clause was added in MariaDB 10.1.3\n \nIf the optional OR REPLACE clause is used, it acts as a\nshortcut for:\n \nDROP DATABASE IF EXISTS db_name;\n \nCREATE DATABASE db_name ...;\n \nIF NOT EXISTS\n \nWhen the IF NOT EXISTS clause is used, MariaDB will return a\nwarning instead of an error if the specified database\nalready exists.\n \nExamples\n-------- \nCREATE DATABASE db1;\n \nQuery OK, 1 row affected (0.18 sec)\n \nCREATE DATABASE db1;\n \nERROR 1007 (HY000): Can\'t create database \'db1\'; database\nexists\n \nCREATE OR REPLACE DATABASE db1;\nQuery OK, 2 rows affected (0.00 sec)\n \nCREATE DATABASE IF NOT EXISTS db1;\nQuery OK, 1 row affected, 1 warning (0.01 sec)\n \nSHOW WARNINGS;\n+-------+------+----------------------------------------------+\n| Level | Code | Message |\n+-------+------+----------------------------------------------+\n| Note | 1007 | Can\'t create database \'db1\';\n database exists |\n+-------+------+----------------------------------------------+\n \nSetting the character sets and collation. See Setting\nCharacter Sets and Collations for more details.\n \nCREATE DATABASE czech_slovak_names \n CHARACTER SET = \'keybcs2\'\n COLLATE = \'keybcs2_bin\';\n \n\n\nURL: https://mariadb.com/kb/en/create-database/', '', 'https://mariadb.com/kb/en/create-database/'),
(650, 'ALTER SEQUENCE', 39, 'ALTER SEQUENCE was introduced in MariaDB 10.3.\n \nSyntax\n------ \nALTER SEQUENCE [IF EXISTS] sequence_name\n[ INCREMENT [ BY | = ] increment ]\n[ MINVALUE [=] minvalue | NO MINVALUE | NOMINVALUE ]\n[ MAXVALUE [=] maxvalue | NO MAXVALUE | NOMAXVALUE ]\n[ START [ WITH | = ] start ] [ CACHE [=] cache ] [ [ NO ]\nCYCLE ]\n[ RESTART [[WITH | =] restart]\n \nALTER SEQUENCE allows one to change any values for a\nSEQUENCE created with CREATE SEQUENCE.\n \nThe options for ALTER SEQUENCE can be given in any order.\n \nDescription\n----------- \nALTER SEQUENCE changes the parameters of an existing\nsequence generator. Any parameters not specifically set in\nthe ALTER SEQUENCE command retain their prior settings.\n \nALTER SEQUENCE requires the ALTER privilege.\n \nArguments to ALTER SEQUENCE\n \nThe following options may be used:\n \nOption | Default value | Description | \n \nINCREMENT | 1 | Increment to use for values. May be\nnegative. | \n \nMINVALUE | 1 if INCREMENT > 0 and -9223372036854775807 if\nINCREMENT < 0 | Minimum value for the sequence. | \n \nMAXVALUE | 9223372036854775806 if INCREMENT > 0 and -1 if\nINCREMENT < 0 | Max value for sequence. | \n \nSTART | MINVALUE if INCREMENT > 0 and MAX_VALUE if\nINCREMENT< 0 | First value that the sequence will generate.\n| \n \nCACHE | 1000 | Number of values that should be cached. 0 if\nno CACHE. The underlying table will be updated first time a\nnew sequence number is generated and each time the cache\nruns out. | \n \nCYCLE | 0 (= NO CYCLE) | 1 if the sequence should start\nagain from MINVALUE# after it has run out of values. | \n \nRESTART | START if restart value not is given |  If RESTART\noption is used, NEXT VALUE will return the restart value. | \n \nThe optional clause RESTART [ WITH restart ] sets the next\nvalue for the sequence. This is equivalent to calling the\nSETVAL() function with the is_used argument as 0. The\nspecified value will be returned by the next call of\nnextval. Using RESTART with no restart value is\nequivalent to supplying the start value that was recorded by\nCREATE SEQUENCE or last set by ALTER SEQUENCE START WITH.\n \nALTER SEQUENCE will not allow you to change the sequence so\nthat it\'s inconsistent. For example:\n \nCREATE SEQUENCE s1;\nALTER SEQUENCE s1 MINVALUE 10;\nERROR 4061 (HY000): Sequence \'test.t1\' values are\nconflicting\n \nALTER SEQUENCE s1 MINVALUE 10 RESTART 10;\nERROR 4061 (HY000): Sequence \'test.t1\' values are\nconflicting\n \nALTER SEQUENCE s1 MINVALUE 10 START 10 RESTART 10;\n \nINSERT\n \nTo allow SEQUENCE objects to be backed up by old tools, like\nmysqldump, one can use SELECT to read the current state of a\nSEQUENCE object and use an INSERT to update the SEQUENCE\nobject. INSERT is only allowed if all fields are specified:\n \nCREATE SEQUENCE s1;\nINSERT INTO s1 VALUES(1000,10,2000,1005,1,1000,0,0);\nSELECT * FROM s1;\n \n+------------+-----------+-----------+-------+-----------+-------+-------+-------+\n| next_value | min_value | max_value | start | increment |\ncache | cycle | round |\n+------------+-----------+-----------+-------+-----------+-------+-------+-------+\n| 1000 | 10 | 2000 | 1005 | 1 | 1000 | 0 | 0 |\n+------------+-----------+-----------+-------+-----------+-------+-------+-------+\n \nSHOW CREATE SEQUENCE s1;\n+-------+--------------------------------------------------------------------------------------------------------------+\n| Table | Create Table |\n+-------+--------------------------------------------------------------------------------------------------------------+\n| s1 | CREATE SEQUENCE `s1` start with 1005 minvalue 10\nmaxvalue 2000 increment by 1 cache 1000 nocycle ENGINE=Aria\n|\n+-------+--------------------------------------------------------------------------------------------------------------+\n \nNotes\n \nALTER SEQUENCE will instantly affect all future SEQUENCE\noperations. This is in contrast to some other databases\nwhere the changes requested by ALTER SEQUENCE will not be\nseen until the sequence cache has run out.\n \nALTER SEQUENCE will take a full table lock of the sequence\nobject during\nits (brief) operation. This ensures that ALTER SEQUENCE is\nreplicated\ncorrectly. If you only want to set the next sequence value\nto a\nhigher value than current, then you should use SETVAL()\ninstead, as this is not blocking.\n \nIf you want to change storage engine, sequence comment or\nrename the sequence, you can use ALTER TABLE for this.\n \n\n\nURL: https://mariadb.com/kb/en/alter-sequence/', '', 'https://mariadb.com/kb/en/alter-sequence/'),
(660, 'CREATE PACKAGE', 39, 'Oracle-style packages were introduced in MariaDB 10.3.5.\n \nSyntax\n------ \nCREATE\n [ OR REPLACE]\n [DEFINER = { user | CURRENT_USER | role | CURRENT_ROLE }]\n PACKAGE [ IF NOT EXISTS ]\n [ db_name . ] package_name\n [ package_characteristic ... ]\n{ AS | IS }\n [ package_specification_element ... ]\nEND [ package_name ]\n \npackage_characteristic:\n COMMENT \'string\'\n | SQL SECURITY { DEFINER | INVOKER }\n \npackage_specification_element:\n FUNCTION_SYM package_specification_function ;\n | PROCEDURE_SYM package_specification_procedure ;\n \npackage_specification_function:\n func_name [ ( func_param [, func_param]... ) ]\n RETURNS func_return_type\n [ package_routine_characteristic... ]\n \npackage_specification_procedure:\n proc_name [ ( proc_param [, proc_param]... ) ]\n [ package_routine_characteristic... ]\n \nfunc_return_type:\n type\n \nfunc_param:\n param_name type\n \nproc_param:\n param_name { IN | OUT | INOUT | IN OUT } type\n \ntype:\n Any valid MariaDB explicit or anchored data type\n \npackage_routine_characteristic:\n COMMENT \'string\'\n | LANGUAGE SQL\n | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL\nDATA }\n | SQL SECURITY { DEFINER | INVOKER }\n \nDescription\n----------- \nThe CREATE PACKAGE statement can be used when Oracle\nSQL_MODE is set.\n \nThe CREATE PACKAGE creates the specification for a stored\npackage (a collection of logically related stored objects).\nA stored package specification declares public routines\n(procedures and functions) of the package, but does not\nimplement these routines.\n \nA package whose specification was created by the CREATE\nPACKAGE statement, should later be implemented using the\nCREATE PACKAGE BODY statement.\n \nExamples\n-------- \nSET sql_mode=ORACLE;\nDELIMITER $$\nCREATE OR REPLACE PACKAGE employee_tools AS\n FUNCTION getSalary(eid INT) RETURN DECIMAL(10,2);\n PROCEDURE raiseSalary(eid INT, amount DECIMAL(10,2));\n PROCEDURE raiseSalaryStd(eid INT);\n PROCEDURE hire(ename TEXT, esalary DECIMAL(10,2));\nEND;\n$$\nDELIMITER ;\n \n\n\nURL: https://mariadb.com/kb/en/create-package/', '', 'https://mariadb.com/kb/en/create-package/'),
(655, 'CONSTRAINT', 39, 'MariaDB supports the implementation of constraints at the\ntable-level using either CREATE TABLE or ALTER TABLE\nstatements. A table constraint restricts the data you can\nadd to the table. If you attempt to insert invalid data on a\ncolumn, MariaDB throws an error. \n \nSyntax\n------ \n[CONSTRAINT [symbol]] constraint_expression\n \nconstraint_expression:\n | PRIMARY KEY [index_type] (index_col_name, ...)\n[index_option] ...\n | FOREIGN KEY [index_name] (index_col_name, ...) \n REFERENCES tbl_name (index_col_name, ...)\n [ON DELETE reference_option]\n [ON UPDATE reference_option]\n | UNIQUE [INDEX|KEY] [index_name]\n [index_type] (index_col_name, ...) [index_option] ...\n | CHECK (check_constraints)\n \nindex_type:\n USING {BTREE | HASH | RTREE}\n \nindex_col_name:\n col_name [(length)] [ASC | DESC]\n \nindex_option:\n | KEY_BLOCK_SIZE [=] value\n | index_type\n | WITH PARSER parser_name\n | COMMENT \'string\'\n | CLUSTERING={YES|NO}\n \nreference_option:\n RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT\n \nDescription\n----------- \nConstraints provide restrictions on the data you can add to\na table. This allows you to enforce data integrity from\nMariaDB, rather than through application logic. When a\nstatement violates a constraint, MariaDB throws an error.\n \nThere are four types of table constraints:\n \nConstraint | Description | \n \nPRIMARY KEY | Sets the column for referencing rows. Values\nmust be unique and not null. | \n \nFOREIGN KEY | Sets the column to reference the primary key\non another table. | \n \nUNIQUE | Requires values in column or columns only occur\nonce in the table. | \n \nCHECK | Checks whether the data meets the given condition. |\n\n \nFOREIGN KEY Constraints\n \nInnoDB supports foreign key constraints. The syntax for a\nforeign key\nconstraint definition in InnoDB looks like this:\n \n[CONSTRAINT [symbol]] FOREIGN KEY\n [index_name] (index_col_name, ...)\n REFERENCES tbl_name (index_col_name,...)\n [ON DELETE reference_option]\n [ON UPDATE reference_option]\n \nreference_option:\n RESTRICT | CASCADE | SET NULL | NO ACTION\n \nCHECK Constraints\n \nFrom MariaDB 10.2.1, constraints are enforced. Before\nMariaDB 10.2.1 constraint expressions were accepted in the\nsyntax but ignored.\n \nIn MariaDB 10.2.1 you can define constraints in 2 different\nways:\nCHECK(expression) given as part of a column definition.\nCONSTRAINT [constraint_name] CHECK (expression)\n \nBefore a row is inserted or updated, all constraints are\nevaluated in the order they are defined. If any constraint\nexpression returns false, then the row will not be inserted\nor updated.\nOne can use most deterministic functions in a constraint,\nincluding UDFs.\n \nCREATE TABLE t1 (a INT CHECK (a>2), b INT CHECK (b>2),\nCONSTRAINT a_greater CHECK (a>b));\n \nIf you use the second format and you don\'t give a name to\nthe constraint, then the constraint will get an\nautomatically generated name. This is done so that you can\nlater delete the constraint with ALTER TABLE DROP\nconstraint_name.\n \nOne can disable all constraint expression checks by setting\nthe check_constraint_checks variable to OFF. This is useful\nfor example when loading a table that violates some\nconstraints that you want to later find and fix in SQL.\n \nReplication\n \nIn row-based replication, only the master checks\nconstraints, and failed statements will not be replicated.\nIn statement-based replication, the slaves will also check\nconstraints. Constraints should therefore be identical, as\nwell as deterministic, in a replication environment.\n \nAuto_increment\n \nFrom MariaDB 10.2.6, auto_increment columns are no longer\npermitted in check constraints. Previously they were\npermitted, but would not work correctly. See MDEV-11117.\n \nExamples\n-------- \nCREATE TABLE product (category INT NOT NULL, id INT NOT\nNULL,\n price DECIMAL,\n PRIMARY KEY(category, id)) ENGINE=INNODB;\n \nCREATE TABLE customer (id INT NOT NULL,\n PRIMARY KEY (id)) ENGINE=INNODB;\n \nCREATE TABLE product_order (no INT NOT NULL AUTO_INCREMENT,\n product_category INT NOT NULL,\n product_id INT NOT NULL,\n customer_id INT NOT NULL,\n PRIMARY KEY(no),\n INDEX (product_category, product_id),\n FOREIGN KEY (product_category, product_id)\n REFERENCES product(category, id)\n ON UPDATE CASCADE ON DELETE RESTRICT,\n INDEX (customer_id),\n FOREIGN KEY (customer_id)\n REFERENCES customer(id)) ENGINE=INNODB;\n \nThe following examples will work from MariaDB 10.2.1\nonwards.\n \nNumeric constraints and comparisons:\n \nCREATE TABLE t1 (a INT CHECK (a>2), b INT CHECK (b>2),\nCONSTRAINT a_greater CHECK (a>b));\n \nINSERT INTO t1(a) VALUES (1);\nERROR 4022 (23000): CONSTRAINT `a` failed for `test`.`t1`\n \nINSERT INTO t1(a,b) VALUES (3,4);\nERROR 4022 (23000): CONSTRAINT `a_greater` failed for\n`test`.`t1`\n \nINSERT INTO t1(a,b) VALUES (4,3);\nQuery OK, 1 row affected (0.04 sec)\n \nDropping a constraint:\n \nALTER TABLE t1 DROP CONSTRAINT a_greater;\n \nAdding a constraint:\n \nALTER TABLE t1 ADD CONSTRAINT a_greater CHECK (a>b);\n \nDate comparisons and character length:\n \nCREATE TABLE t2 (name VARCHAR(30) CHECK\n(CHAR_LENGTH(name)>2), start_date DATE, \n end_date DATE CHECK (start_date IS NULL OR end_date IS NULL\nOR start_date2)), start_date DATE, \n end_date DATE CHECK (start_date IS NULL OR end_date IS NULL\nOR start_date2 is very different to CHAR_LENGTH(name>2) as\nthe latter mistakenly performs a numeric comparison on the\nname field, leading to unexpected results.\n \n\n\nURL: https://mariadb.com/kb/en/constraint/', '', 'https://mariadb.com/kb/en/constraint/'),
(657, 'CREATE EVENT', 39, 'Syntax\n------ \nCREATE [OR REPLACE]\n [DEFINER = { user | CURRENT_USER | role | CURRENT_ROLE }]\n EVENT \n [IF NOT EXISTS]\n event_name \n ON SCHEDULE schedule\n [ON COMPLETION [NOT] PRESERVE]\n [ENABLE | DISABLE | DISABLE ON SLAVE]\n [COMMENT \'comment\']\n DO sql_statement;\n \nschedule:\n AT timestamp [+ INTERVAL interval] ...\n | EVERY interval \n [STARTS timestamp [+ INTERVAL interval] ...] \n [ENDS timestamp [+ INTERVAL interval] ...]\n \ninterval:\n quantity {YEAR | QUARTER | MONTH | DAY | HOUR | MINUTE |\n WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE |\n DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND}\n \nDescription\n----------- \nThis statement creates and schedules a new event. It\nrequires the\nEVENT privilege for the schema in which the event is to be\ncreated.\n \nThe minimum requirements for a valid CREATE EVENT statement\nare as\nfollows:\nThe keywords CREATE EVENT plus an event name, which uniquely\nidentifies\n the event in the current schema. (Prior to MySQL 5.1.12,\nthe event name\n needed to be unique only among events created by the same\nuser on a given\n database.)\nAn ON SCHEDULE clause, which determines when and how often\nthe event\n executes.\nA DO clause, which contains the SQL statement to be executed\nby an\n event.\n \nHere is an example of a minimal CREATE EVENT statement:\n \nCREATE EVENT myevent\n ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n DO\n UPDATE myschema.mytable SET mycol = mycol + 1;\n \nThe previous statement creates an event named myevent. This\nevent executes once\n— one hour following its creation\n— by running an SQL statement that increments the\nvalue of the myschema.mytable table\'s mycol column by 1.\n \nThe event_name must be a valid MariaDB identifier with a\nmaximum length\nof 64 characters. It may be delimited using back ticks, and\nmay be\nqualified with the name of a database schema. An event is\nassociated\nwith both a MariaDB user (the definer) and a schema, and its\nname must\nbe unique among names of events within that schema. In\ngeneral, the\nrules governing event names are the same as those for names\nof stored\nroutines. See Identifier Names.\n \nIf no schema is indicated as part of event_name, the default\n(current)\nschema is assumed.\n \nFor valid identifiers to use as event names, see Identifier\nNames.\n \nOR REPLACE\n \nThe OR REPLACE clause was included in MariaDB 10.1.4. If\nused and the event already exists, instead of an error being\nreturned, the existing event will be dropped and replaced by\nthe newly defined event.\n \nIF NOT EXISTS\n \nIf the IF NOT EXISTS clause is used, MariaDB will return a\nwarning instead of an error if the event already exists.\nCannot be used together with OR REPLACE.\n \nON SCHEDULE\n \nThe ON SCHEDULE clause can be used to specify when the event\nmust be triggered.\n \nAT\n \nIf you want to execute the event only once (one time event),\nyou can use the AT keyword, followed by a timestamp. If you\nuse CURRENT_TIMESTAMP, the event acts as soon as it is\ncreated. As a convenience, you can add one or more intervals\nto that timestamp. You can also specify a timestamp in the\npast, so that the event is stored but not triggered, until\nyou modify it via ALTER EVENT.\n \nThe following example shows how to create an event that will\nbe triggered tomorrow at a certain time:\n \nCREATE EVENT example\nON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 DAY + INTERVAL\n3 HOUR\nDO something;\n \nYou can also specify that an event must be triggered at a\nregular interval (recurring event). In such cases, use the\nEVERY clause followed by the interval.\n \nIf an event is recurring, you can specify when the first\nexecution must happen via the STARTS clause and a maximum\ntime for the last execution via the ENDS clause. STARTS and\nENDS clauses are followed by a timestamp and, optionally,\none or more intervals. The ENDS clause can specify a\ntimestamp in the past, so that the event is stored but not\nexecuted until you modify it via ALTER EVENT.\n \nIn the following example, next month a recurring event will\nbe triggered hourly for a week:\n \nCREATE EVENT example\nON SCHEDULE EVERY 1 HOUR\nSTARTS CURRENT_TIMESTAMP + INTERVAL 1 MONTH\nENDS CURRENT_TIMESTAMP + INTERVAL 1 MONTH + INTERVAL 1 WEEK\nDO some_task;\n \nIntervals consist of a quantity and a time unit. The time\nunits are the same used for other staments and time\nfunctions, except that you can\'t use microseconds for\nevents. For simple time units, like HOUR or MINUTE, the\nquantity is an integer number, for example \'10 MINUTE\'.\nFor composite time units, like HOUR_MINUTE or HOUR_SECOND,\nthe quantity must be a string with all involved simple\nvalues and their separators, for example \'2:30\' or\n\'2:30:30\'.\n \nON COMPLETION [NOT] PRESERVE\n \nThe ON COMPLETION clause can be used to specify if the event\nmust be deleted after its last execution (that is, after its\nAT or ENDS timestamp is past). By default, events are\ndropped when they are expired. To explicitly state that this\nis the desired behaviour, you can use ON COMPLETION NOT\nPRESERVE. Instead, if you want the event to be preserved,\nyou can use ON COMPLETION PRESERVE.\n \nIn you specify ON COMPLETION NOT PRESERVE, and you specify a\ntimestamp in the past for AT or ENDS clause, the event will\nbe immediatly dropped. In such cases, you will get a Note\n1558: \"Event execution time is in the past and ON\nCOMPLETION NOT PRESERVE is set. The event was dropped\nimmediately after creation\".\n \nENABLE/DISABLE/DISABLE ON SLAVE\n \nEvents are ENABLEd by default. If you want to stop MariaDB\nfrom executing\nan event, you may specify DISABLE. When it is ready to be\nactivated, you\nmay enable it using ALTER EVENT. Another option is\nDISABLE ON SLAVE, which indicates that an event was created\non a master and has been replicated to the slave, which is\nprevented from executing the event. If DISABLE ON SLAVE is\nspecifically set, the event will not be executed.\n \nCOMMENT\n \nThe COMMENT clause may be used to set a comment for the\nevent. Maximum\nlength for comments is 64 characters. The comment is a\nstring, so it must be\nquoted. To see events comments, you can query the\nINFORMATION_SCHEMA.EVENTS table (the column is named\nEVENT_COMMENT).\n \nExamples\n-------- \nMinimal CREATE EVENT statement:\n \nCREATE EVENT myevent\n ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n DO\n UPDATE myschema.mytable SET mycol = mycol + 1;\n \nAn event that will be triggered tomorrow at a certain time:\n \nCREATE EVENT example\nON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 DAY + INTERVAL\n3 HOUR\nDO something;\n \nNext month a recurring event will be triggered hourly for a\nweek:\n \nCREATE EVENT example\nON SCHEDULE EVERY 1 HOUR\nSTARTS CURRENT_TIMESTAMP + INTERVAL 1 MONTH\nENDS CURRENT_TIMESTAMP + INTERVAL 1 MONTH + INTERVAL 1 WEEK\nDO some_task;\n \nOR REPLACE and IF NOT EXISTS:\n \nCREATE EVENT myevent\n ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n DO\n UPDATE myschema.mytable SET mycol = mycol + 1;\n \nERROR 1537 (HY000): Event \'myevent\' already exists\n \nCREATE OR REPLACE EVENT myevent\n ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n DO\n UPDATE myschema.mytable SET mycol = mycol + 1;;\nQuery OK, 0 rows affected (0.00 sec)\n \nCREATE EVENT IF NOT EXISTS myevent\n ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR\n DO\n UPDATE myschema.mytable SET mycol = mycol + 1;\n \nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n \n SHOW WARNINGS;\n \n+-------+------+--------------------------------+\n| Level | Code | Message |\n+-------+------+--------------------------------+\n| Note | 1537 | Event \'myevent\' already exists |\n+-------+------+--------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/create-event/', '', 'https://mariadb.com/kb/en/create-event/'),
(659, 'CREATE INDEX', 39, 'Syntax\n------ \nCREATE [OR REPLACE] [UNIQUE|FULLTEXT|SPATIAL] INDEX \n [IF NOT EXISTS] index_name\n [index_type]\n ON tbl_name (index_col_name,...)\n [WAIT n | NOWAIT]\n [index_option]\n [algorithm_option | lock_option] ...\n \nindex_col_name:\n col_name [(length)] [ASC | DESC]\n \nindex_type:\n USING {BTREE | HASH | RTREE}\n \nindex_option:\n KEY_BLOCK_SIZE [=] value\n | index_type\n | WITH PARSER parser_name\n | COMMENT \'string\'\n \nalgorithm_option:\n ALGORITHM [=] {DEFAULT|INPLACE|COPY|NOCOPY|INSTANT}\n \nlock_option:\n LOCK [=] {DEFAULT|NONE|SHARED|EXCLUSIVE}\n \nDescription\n----------- \nCREATE INDEX is mapped to an ALTER TABLE statement to create\nindexes.\nSee ALTER TABLE. CREATE INDEX cannot be used to create a\nPRIMARY KEY; use ALTER TABLE instead.\n \nIf another connection is using the table, a metadata lock is\nactive, and this statement will wait until the lock is\nreleased. This is also true for non-transactional tables.\n \nAnother shortcut, DROP INDEX, allows the removal of an\nindex.\n \nFor valid identifiers to use as index names, see Identifier\nNames.\n \nNote that KEY_BLOCK_SIZE is currently ignored in CREATE\nINDEX, although it is included in the output of SHOW CREATE\nTABLE.\n \nPrivileges\n \nExecuting the CREATE INDEX statement requires the INDEX\nprivilege for the table or the database.\n \nOnline DDL\n \nIn MariaDB 10.0 and later, online DDL is supported with the\nALGORITHM and LOCK clauses.\n \nSee InnoDB Online DDL Overview for more information on\nonline DDL with InnoDB.\n \nCREATE OR REPLACE INDEX ...\n \nThe OR REPLACE clause was added in MariaDB 10.1.4.\n \nIf the OR REPLACE clause is used and if the index already\nexists, then instead of returning an error, the server will\ndrop the existing index and replace it with the newly\ndefined index.\n \nCREATE INDEX IF NOT EXISTS ...\n \nIf the IF NOT EXISTS clause is used, then the index will\nonly be created if an index with the same name does not\nalready exist. If the index already exists, then a warning\nwill be triggered by default.\n \nIndex Definitions\n \nSee CREATE TABLE: Index Definitions for information about\nindex definitions.\n \nWAIT/NOWAIT\n \nSet the lock wait timeout. See WAIT and NOWAIT.\n \nALGORITHM\n \nSee ALTER TABLE: ALGORITHM for more information.\n \nLOCK\n \nSee ALTER TABLE: LOCK for more information.\n \nProgress Reporting\n \nMariaDB provides progress reporting for CREATE INDEX\nstatement for clients\nthat support the new progress reporting protocol. For\nexample, if you were using the mysql client, then the\nprogress report might look like this::\n \nCREATE INDEX ON tab (num);;\nStage: 1 of 2 \'copy to tmp table\' 46% of stage\n \nThe progress report is also shown in the output of the SHOW\nPROCESSLIST statement and in the contents of the\ninformation_schema.PROCESSLIST table.\n \nSee Progress Reporting for more information.\n \nExamples\n-------- \nCreating a unique index:\n \nCREATE UNIQUE INDEX HomePhone ON Employees(Home_Phone);\n \nOR REPLACE and IF NOT EXISTS:\n \nCREATE INDEX xi ON xx5 (x);\nQuery OK, 0 rows affected (0.03 sec)\n \nCREATE INDEX xi ON xx5 (x);\nERROR 1061 (42000): Duplicate key name \'xi\'\n \nCREATE OR REPLACE INDEX xi ON xx5 (x);\nQuery OK, 0 rows affected (0.03 sec)\n \nCREATE INDEX IF NOT EXISTS xi ON xx5 (x);\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n \nSHOW WARNINGS;\n \n+-------+------+-------------------------+\n| Level | Code | Message |\n+-------+------+-------------------------+\n| Note | 1061 | Duplicate key name \'xi\' |\n+-------+------+-------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/create-index/', '', 'https://mariadb.com/kb/en/create-index/'),
(663, 'CREATE SEQUENCE', 39, 'CREATE SEQUENCE was introduced in MariaDB 10.3.\n \nSyntax\n------ \nCREATE [OR REPLACE] [TEMPORARY] SEQUENCE [IF NOT EXISTS]\nsequence_name\n[ INCREMENT [ BY | = ] increment ]\n[ MINVALUE [=] minvalue | NO MINVALUE | NOMINVALUE ]\n[ MAXVALUE [=] maxvalue | NO MAXVALUE | NOMAXVALUE ]\n[ START [ WITH | = ] start ] \n[ CACHE [=] cache | NOCACHE ] [ CYCLE | NOCYCLE] \n[table_options]\n \nThe options for CREATE SEQUENCE can be given in any order,\noptionally followed by table_options.\n \ntable_options can be any of the normal table options in\nCREATE TABLE but the most usable ones are ENGINE=... and\nCOMMENT=.\n \nNOMAXVALUE and NOMINVALUE are there to allow one to create\nSEQUENCEs using the Oracle syntax.\n \nDescription\n----------- \nCREATE SEQUENCE will create a sequence that generates new\nvalues when called with NEXT VALUE FOR sequence_name. It\'s\nan alternative to AUTO INCREMENT when one wants to have more\ncontrol of how the numbers are generated. As the SEQUENCE\ncaches values (up to CACHE) it can in some cases be much\nfaster than AUTO INCREMENT. Another benefit is that one can\naccess the last value generated by all used sequences, which\nsolves one of the limitations with LAST_INSERT_ID().\n \nCREATE SEQUENCE requires the CREATE privilege.\n \nDROP SEQUENCE can be used to drop a sequence, and ALTER\nSEQUENCE to change it.\n \nArguments to Create\n \nThe following options may be used:\n \nOption | Default value |  Description | \n \nINCREMENT |  1 | Increment to use for values. May be\nnegative. Setting an increment of 0 causes the sequence to\nuse the value of the auto_increment_increment system\nvariable at the time of creation, which is always a positive\nnumber. (see MDEV-16035). | \n \nMINVALUE | 1 if INCREMENT > 0 and -9223372036854775807 if\nINCREMENT < 0 | Minimum value for the sequence | \n \nMAXVALUE | 9223372036854775806 if INCREMENT > 0 and -1 if\nINCREMENT < 0 | Max value for sequence | \n \nSTART | MINVALUE if INCREMENT > 0 and MAX_VALUE if\nINCREMENT< 0 | First value that the sequence will generate |\n\n \nCACHE | 1000 |  Number of values that should be cached. 0\nif no CACHE. The underlying table will be updated first time\na new sequence number is generated and each time the cache\nruns out. | \n \nIf CYCLE is used then the sequence should start again from\nMINVALUE after it has run out of values. Default value is\nNOCYCLE.\n \nConstraints on Create Arguments\n \nTo be able to create a legal sequence, the following must\nhold:\nMAXVALUE >= start\nMAXVALUE > MINVALUE\nSTART >= MINVALUE\nMAXVALUE = -9223372036854775807 (LONGLONG_MIN+1)\n \nNote that sequences can\'t generate the maximum/minimum 64\nbit number because of the constraint of\nMINVALUE and MAXVALUE. \n \nExamples\n-------- \nCREATE SEQUENCE s START WITH 100 INCREMENT BY 10;\n \nCREATE SEQUENCE s2 START WITH -100 INCREMENT BY -10;\n \nThe following statement fails, as the increment conflicts\nwith the defaults\n \nCREATE SEQUENCE s3 START WITH -100 INCREMENT BY 10;\n \nERROR 4082 (HY000): Sequence \'test.s3\' values are\nconflicting\n \nThe sequence can be created by specifying workable minimum\nand maximum values:\n \nCREATE SEQUENCE s3 START WITH -100 INCREMENT BY 10\nMINVALUE=-100 MAXVALUE=1000;\n \n\n\nURL: https://mariadb.com/kb/en/create-sequence/', '', 'https://mariadb.com/kb/en/create-sequence/'),
(661, 'CREATE PACKAGE BODY', 39, 'Oracle-style packages were introduced in MariaDB 10.3.5.\n \nSyntax\n------ \nCREATE [ OR REPLACE ]\n [DEFINER = { user | CURRENT_USER | role | CURRENT_ROLE }]\n PACKAGE BODY\n [ IF NOT EXISTS ]\n [ db_name . ] package_name\n [ package_characteristic... ]\n{ AS | IS }\n package_implementation_declare_section\n package_implementation_executable_section\nEND [ package_name]\n \npackage_implementation_declare_section:\n package_implementation_item_declaration\n [ package_implementation_item_declaration... ]\n [ package_implementation_routine_definition... ]\n | package_implementation_routine_definition\n [ package_implementation_routine_definition...]\n \npackage_implementation_item_declaration:\n variable_declaration ;\n \nvariable_declaration:\n variable_name[,...] type [:= expr ]\n \npackage_implementation_routine_definition:\n FUNCTION package_specification_function\n [ package_implementation_function_body ] ;\n | PROCEDURE package_specification_procedure\n [ package_implementation_procedure_body ] ;\n \npackage_implementation_function_body:\n { AS | IS } package_routine_body [func_name]\n \npackage_implementation_procedure_body:\n { AS | IS } package_routine_body [proc_name]\n \npackage_routine_body:\n [ package_routine_declarations ]\n BEGIN\n statements [ EXCEPTION exception_handlers ]\n END\n \npackage_routine_declarations:\n package_routine_declaration \';\'\n[package_routine_declaration \';\']...\n \npackage_routine_declaration:\n variable_declaration\n | condition_name CONDITION FOR condition_value\n | user_exception_name EXCEPTION\n | CURSOR_SYM cursor_name\n [ ( cursor_formal_parameters ) ]\n IS select_statement\n ;\n \npackage_implementation_executable_section:\n END\n | BEGIN\n statement ; [statement ; ]...\n [EXCEPTION exception_handlers]\n END\n \nexception_handlers:\n exception_handler [exception_handler...]\n \nexception_handler:\n WHEN_SYM condition_value [, condition_value]...\n THEN_SYM statement ; [statement ;]...\n \ncondition_value:\n condition_name\n | user_exception_name\n | SQLWARNING\n | SQLEXCEPTION\n | NOT FOUND\n | OTHERS_SYM\n | SQLSTATE [VALUE] sqlstate_value\n | mariadb_error_code\n \n\nDescription\n----------- \nThe CREATE PACKAGE BODY statement can be used when Oracle\nSQL_MODE is set.\n \nThe CREATE PACKAGE BODY statement creates the package body\nfor a stored package. The package specification must be\npreviously created using the CREATE PACKAGE statement.\n \nA package body provides implementations of the package\npublic routines and can optionally have:\npackage-wide private variables\npackage private routines\nforward declarations for private routines\nan executable initialization section\n \nExamples\n-------- \nSET sql_mode=ORACLE;\nDELIMITER $$\nCREATE OR REPLACE PACKAGE employee_tools AS\n FUNCTION getSalary(eid INT) RETURN DECIMAL(10,2);\n PROCEDURE raiseSalary(eid INT, amount DECIMAL(10,2));\n PROCEDURE raiseSalaryStd(eid INT);\n PROCEDURE hire(ename TEXT, esalary DECIMAL(10,2));\nEND;\n$$\nCREATE PACKAGE BODY employee_tools AS\n -- package body variables\n stdRaiseAmount DECIMAL(10,2):=500;\n \n -- private routines\n PROCEDURE log (eid INT, ecmnt TEXT) AS\n BEGIN\n INSERT INTO employee_log (id, cmnt) VALUES (eid, ecmnt);\n END;\n \n -- public routines\n PROCEDURE hire(ename TEXT, esalary DECIMAL(10,2)) AS\n eid INT;\n BEGIN\n INSERT INTO employee (name, salary) VALUES (ename,\nesalary);\n eid:= last_insert_id();\n log(eid, \'hire \' || ename);\n END;\n \n FUNCTION getSalary(eid INT) RETURN DECIMAL(10,2) AS\n nSalary DECIMAL(10,2);\n BEGIN\n SELECT salary INTO nSalary FROM employee WHERE id=eid;\n log(eid, \'getSalary id=\' || eid || \' salary=\' ||\nnSalary);\n RETURN nSalary;\n END;\n \n PROCEDURE raiseSalary(eid INT, amount DECIMAL(10,2)) AS\n BEGIN\n UPDATE employee SET salary=salary+amount WHERE id=eid;\n log(eid, \'raiseSalary id=\' || eid || \' amount=\' ||\namount);\n END;\n \n PROCEDURE raiseSalaryStd(eid INT) AS\n BEGIN\n raiseSalary(eid, stdRaiseAmount);\n log(eid, \'raiseSalaryStd id=\' || eid);\n END;\n \nBEGIN\n -- This code is executed when the current session\n -- accesses any of the package routines for the first time\n log(0, \'Session \' || connection_id() || \' \' ||\ncurrent_user || \' started\');\nEND;\n$$\n \nDELIMITER ;\n \n\n\nURL: https://mariadb.com/kb/en/create-package-body/', '', 'https://mariadb.com/kb/en/create-package-body/'),
(669, 'DROP DATABASE', 39, 'Syntax\n------ \nDROP {DATABASE | SCHEMA} [IF EXISTS] db_name\n \nDescription\n----------- \nDROP DATABASE drops all tables in the database and deletes\nthe database. Be very careful with this statement! To use\nDROP DATABASE,\nyou need the DROP privilege on the database. DROP SCHEMA is\na synonym for DROP DATABASE.\n \nImportant: When a database is dropped, user privileges on\nthe database are not automatically dropped. See GRANT.\n \nIF EXISTS\n \nUse IF EXISTS to prevent an error from occurring for\ndatabases that do not exist. A NOTE is generated for each\nnon-existent database when using IF EXISTS. See SHOW\nWARNINGS.\n \nExamples\n-------- \nDROP DATABASE bufg;\n \nQuery OK, 0 rows affected (0.39 sec)\n \nDROP DATABASE bufg;\n \nERROR 1008 (HY000): Can\'t drop database \'bufg\'; database\ndoesn\'t exist\n \n \\W\nShow warnings enabled.\n \nDROP DATABASE IF EXISTS bufg;\n \nQuery OK, 0 rows affected, 1 warning (0.00 sec)\nNote (Code 1008): Can\'t drop database \'bufg\'; database\ndoesn\'t exist\n \n\n\nURL: https://mariadb.com/kb/en/drop-database/', '', 'https://mariadb.com/kb/en/drop-database/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(664, 'CREATE SERVER', 39, 'Syntax\n------ \nCREATE [OR REPLACE] SERVER [IF NOT EXISTS] server_name\n FOREIGN DATA WRAPPER wrapper_name\n OPTIONS (option [, option] ...)\n \noption:\n { HOST character-literal\n | DATABASE character-literal\n | USER character-literal\n | PASSWORD character-literal\n | SOCKET character-literal\n | OWNER character-literal\n | PORT numeric-literal }\n \nDescription\n----------- \nThis statement creates the definition of a server for use\nwith the Spider,\nFEDERATED or FederatedX storage\nengine. The CREATE SERVER statement creates a new row within\nthe\nservers table within the mysql database. This statement\nrequires the SUPER privilege.\n \nThe server_name should be a unique reference to the server.\nServer definitions\nare global within the scope of the server, it is not\npossible to qualify the\nserver definition to a specific database. server_name has a\nmaximum length of\n64 characters (names longer than 64 characters are silently\ntruncated), and is\ncase insensitive. You may specify the name as a quoted\nstring.\n \nThe wrapper_name should be mysql, and may be quoted with\nsingle quotes.\nOther values for wrapper_name are not currently supported.\n \nFor each option you must specify either a character literal\nor numeric literal.\nCharacter literals are UTF-8, support a maximum length of 64\ncharacters and\ndefault to a blank (empty) string. String literals are\nsilently truncated to 64\ncharacters. Numeric literals must be a number between 0 and\n9999, default value\nis 0.\n \nNote: The OWNER option is currently not applied, and has no\neffect on\nthe ownership or operation of the server connection that is\ncreated.\n \nThe CREATE SERVER statement creates an entry in the\nmysql.servers table that can later be used with the\nCREATE TABLE statement when creating a Spider, FederatedX or\nFEDERATED table. The options that you specify will\nbe used to populate the columns in the mysql.servers table.\nThe table columns\nare Server_name, Host, Db, Username, Password, Port and\nSocket.\n \n DROP SERVER removes a previously created server definition.\n\n \nCREATE SERVER is not written to the binary log, irrespective\nof\nthe binary log format being used.\n \nFor valid identifiers to use as server names, see Identifier\nNames.\n \nOR REPLACE\n \nIf the optional OR REPLACE clause is used, it acts as a\nshortcut for:\n \nDROP SERVER IF EXISTS name;\n \nCREATE SERVER server_name ...;\n \nIF NOT EXISTS\n \nIf the IF NOT EXISTS clause is used, MariaDB will return a\nwarning instead of an error if the server already exists.\nCannot be used together with OR REPLACE.\n \nExamples\n-------- \nCREATE SERVER s\nFOREIGN DATA WRAPPER mysql\nOPTIONS (USER \'Remote\', HOST \'192.168.1.106\', DATABASE\n\'test\');\n \nOR REPLACE and IF NOT EXISTS:\n \nCREATE SERVER s \nFOREIGN DATA WRAPPER mysql \nOPTIONS (USER \'Remote\', HOST \'192.168.1.106\', DATABASE\n\'test\');\nERROR 1476 (HY000): The foreign server, s, you are trying to\ncreate already exists\n \nCREATE OR REPLACE SERVER s \nFOREIGN DATA WRAPPER mysql \nOPTIONS (USER \'Remote\', HOST \'192.168.1.106\', DATABASE\n\'test\');\nQuery OK, 0 rows affected (0.00 sec)\n \nCREATE SERVER IF NOT EXISTS s \nFOREIGN DATA WRAPPER mysql \nOPTIONS (USER \'Remote\', HOST \'192.168.1.106\', DATABASE\n\'test\');\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n \nSHOW WARNINGS;\n \n+-------+------+----------------------------------------------------------------+\n| Level | Code | Message |\n+-------+------+----------------------------------------------------------------+\n| Note | 1476 | The foreign server, s, you are trying to\ncreate already exists |\n+-------+------+----------------------------------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/create-server/', '', 'https://mariadb.com/kb/en/create-server/'),
(670, 'DROP EVENT', 39, 'Syntax\n------ \nDROP EVENT [IF EXISTS] event_name\n \nDescription\n----------- \nThis statement drops the event named event_name. The event\nimmediately\nceases being active, and is deleted completely from the\nserver.\n \nIf the event does not exist, the error\nERROR 1517 (HY000): Unknown event \'event_name\'\nresults. You can override this and cause the\nstatement to generate a NOTE for non-existent events instead\nby using\nIF EXISTS. See SHOW WARNINGS.\n \nThis statement requires the EVENT privilege. In MySQL 5.1.11\nand earlier, an event could be dropped only\nby its definer, or by a user having the SUPER privilege.\n \nExamples\n-------- \nDROP EVENT myevent3;\n \nUsing the IF EXISTS clause:\n \nDROP EVENT IF EXISTS myevent3;\n \nQuery OK, 0 rows affected, 1 warning (0.01 sec)\n \nSHOW WARNINGS;\n \n+-------+------+-------------------------------+\n| Level | Code | Message |\n+-------+------+-------------------------------+\n| Note | 1305 | Event myevent3 does not exist |\n+-------+------+-------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/drop-event/', '', 'https://mariadb.com/kb/en/drop-event/'),
(671, 'DROP FUNCTION', 39, 'Syntax\n------ \nDROP FUNCTION [IF EXISTS] f_name\n \nDescription\n----------- \nThe DROP FUNCTION statement is used to drop a stored\nfunction or a user-defined function (UDF). That is, the\nspecified routine is removed from the server, along with all\nprivileges specific to the function. You must have the ALTER\nROUTINE privilege for the routine in order to drop it. If\nthe automatic_sp_privileges server system variable is set,\nboth the ALTER ROUTINE and EXECUTE privileges are granted\nautomatically to the routine creator - see Stored Routine\nPrivileges.\n \nIF EXISTS\n \nThe IF EXISTS clause is a MySQL/MariaDB extension. It\nprevents an error from occurring if the function does not\nexist. A\nNOTE is produced that can be viewed with SHOW WARNINGS.\n \nFor dropping a user-defined functions (UDF), see DROP\nFUNCTION UDF.\n \nExamples\n-------- \nDROP FUNCTION hello;\n \nQuery OK, 0 rows affected (0.042 sec)\n \nDROP FUNCTION hello;\n \nERROR 1305 (42000): FUNCTION test.hello does not exist\n \nDROP FUNCTION IF EXISTS hello;\n \nQuery OK, 0 rows affected, 1 warning (0.000 sec)\n \nSHOW WARNINGS;\n \n+-------+------+------------------------------------+\n| Level | Code | Message |\n+-------+------+------------------------------------+\n| Note | 1305 | FUNCTION test.hello does not exist |\n+-------+------+------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/drop-function/', '', 'https://mariadb.com/kb/en/drop-function/'),
(667, 'CREATE TRIGGER', 39, 'Syntax\n------ \nCREATE [OR REPLACE]\n [DEFINER = { user | CURRENT_USER | role | CURRENT_ROLE }]\n TRIGGER [IF NOT EXISTS] trigger_name trigger_time\ntrigger_event\n ON tbl_name FOR EACH ROW\n [{ FOLLOWS | PRECEDES } other_trigger_name ]\n trigger_stmt\n \nDescription\n----------- \nThis statement creates a new trigger. A trigger is a named\ndatabase\nobject that is associated with a table, and that activates\nwhen a\nparticular event occurs for the table. The trigger becomes\nassociated\nwith the table named tbl_name, which must refer to a\npermanent table.\nYou cannot associate a trigger with a TEMPORARY table or a\nview.\n \nCREATE TRIGGER requires the TRIGGER privilege for the table\nassociated\nwith the trigger. (Before MySQL 5.1.6, this statement\nrequires the\nSUPER privilege.)\n \nYou can have multiple triggers for the same trigger_time and\ntrigger_event.\n \nFor valid identifiers to use as trigger names, see\nIdentifier Names.\n \nOR REPLACE\n \nIf used and the trigger already exists, instead of an error\nbeing returned, the existing trigger will be dropped and\nreplaced by the newly defined trigger.\n \nDEFINER\n \nThe DEFINER clause determines the security context to be\nused when\nchecking access privileges at trigger activation time.\n \nIF NOT EXISTS\n \nIf the IF NOT EXISTS clause is used, the trigger will only\nbe created if a trigger of the same name does not exist. If\nthe trigger already exists, by default a warning will be\nreturned.\n \ntrigger_time\n \ntrigger_time is the trigger action time. It can be BEFORE or\nAFTER to\nindicate that the trigger activates before or after each row\nto be\nmodified.\n \ntrigger_event\n \ntrigger_event indicates the kind of statement that activates\nthe\ntrigger. The trigger_event can be one of the following:\nINSERT: The trigger is activated whenever a new row is\ninserted into the table; for example, through INSERT, LOAD\nDATA, and REPLACE statements.\nUPDATE: The trigger is activated whenever a row is modified;\nfor example, through UPDATE statements.\nDELETE: The trigger is activated whenever a row is deleted\nfrom the table; for example, through DELETE and REPLACE\nstatements. However, DROP TABLE and TRUNCATE statements on\nthe table do not activate this trigger, because they do not\nuse DELETE. Dropping a partition does not activate DELETE\ntriggers, either.\n \nFOLLOWS/PRECEDES other_trigger_name\n \nThe FOLLOWS other_trigger_name and PRECEDES\nother_trigger_name options were added in MariaDB 10.2.3 as\npart of supporting multiple triggers per action time.\nThis is the same syntax used by MySQL 5.7, although MySQL\n5.7 does not have multi-trigger support.\n \nFOLLOWS adds the new trigger after another trigger while\nPRECEDES adds the new trigger before another trigger. If\nneither option is used, the new trigger is added last for\nthe given action and time.\n \nFOLLOWS and PRECEDES are not stored in the trigger\ndefinition. However the trigger order is guaranteed to not\nchange over time. mysqldump and other backup methods will\nnot change trigger order.\nYou can verify the trigger order from the ACTION_ORDER\ncolumn in INFORMATION_SCHEMA.TRIGGERS table.\n \nSELECT trigger_name, action_order FROM\ninformation_schema.triggers \n WHERE event_object_table=\'t1\';\n \nExamples\n-------- \nCREATE DEFINER=`root`@`localhost` TRIGGER increment_animal\n AFTER INSERT ON animals FOR EACH ROW \n UPDATE animal_count SET animal_count.animals =\nanimal_count.animals+1;\n \nOR REPLACE and IF NOT EXISTS\n \nCREATE DEFINER=`root`@`localhost` TRIGGER increment_animal\n AFTER INSERT ON animals FOR EACH ROW\n UPDATE animal_count SET animal_count.animals =\nanimal_count.animals+1;\n \nERROR 1359 (HY000): Trigger already exists\n \nCREATE OR REPLACE DEFINER=`root`@`localhost` TRIGGER\nincrement_animal\n AFTER INSERT ON animals FOR EACH ROW\n UPDATE animal_count SET animal_count.animals =\nanimal_count.animals+1;\n \nQuery OK, 0 rows affected (0.12 sec)\n \nCREATE DEFINER=`root`@`localhost` TRIGGER IF NOT EXISTS\nincrement_animal\n AFTER INSERT ON animals FOR EACH ROW\n UPDATE animal_count SET animal_count.animals =\nanimal_count.animals+1;\n \nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n \nSHOW WARNINGS;\n \n+-------+------+------------------------+\n| Level | Code | Message |\n+-------+------+------------------------+\n| Note | 1359 | Trigger already exists |\n+-------+------+------------------------+\n1 row in set (0.00 sec)\n \n\n\nURL: https://mariadb.com/kb/en/create-trigger/', '', 'https://mariadb.com/kb/en/create-trigger/'),
(672, 'DROP INDEX', 39, 'Syntax\n------ \nDROP INDEX [IF EXISTS] index_name ON tbl_name \n [WAIT n |NOWAIT]\n [algorithm_option | lock_option] ...\n \nalgorithm_option:\n ALGORITHM [=] {DEFAULT|INPLACE|COPY|NOCOPY|INSTANT}\n \nlock_option:\n LOCK [=] {DEFAULT|NONE|SHARED|EXCLUSIVE}\n \nDescription\n----------- \nDROP INDEX drops the index named index_name from the table\ntbl_name.\nThis statement is mapped to an ALTER TABLE statement to drop\nthe\nindex.\n \nIf another connection is using the table, a metadata lock is\nactive, and this statement will wait until the lock is\nreleased. This is also true for non-transactional tables.\n \nSee ALTER TABLE.\n \nAnother shortcut, CREATE INDEX, allows the creation of an\nindex.\n \nTo remove the primary key, `PRIMARY` must be specified as\nindex_name. Note that the quotes are necessary, because\nPRIMARY is a keyword.\n \nPrivileges\n \nExecuting the DROP INDEX statement requires the INDEX\nprivilege for the table or the database.\n \nOnline DDL\n \nIn MariaDB 10.0 and later, online DDL is supported with the\nALGORITHM and LOCK clauses.\n \nSee InnoDB Online DDL Overview for more information on\nonline DDL with InnoDB.\n \nDROP INDEX IF EXISTS ...\n \nThe IF EXISTS clause was added in MariaDB 10.1.4.\n \nIf the IF EXISTS clause is used, then MariaDB will return a\nwarning instead of an error if the index does not exist.\n \nWAIT/NOWAIT\n \nSet the lock wait timeout. See WAIT and NOWAIT.\n \nALGORITHM\n \nSee ALTER TABLE: ALGORITHM for more information.\n \nLOCK\n \nSee ALTER TABLE: LOCK for more information.\n \nProgress Reporting\n \nMariaDB provides progress reporting for DROP INDEX statement\nfor clients\nthat support the new progress reporting protocol. For\nexample, if you were using the mysql client, then the\nprogress report might look like this::\n \n\n\nURL: https://mariadb.com/kb/en/drop-index/', '', 'https://mariadb.com/kb/en/drop-index/'),
(675, 'DROP PROCEDURE', 39, 'Syntax\n------ \nDROP PROCEDURE [IF EXISTS] sp_name\n \nDescription\n----------- \nThis statement is used to drop a stored procedure. That is,\nthe\nspecified routine is removed from the server along with all\nprivileges specific to the procedure. You must have the\nALTER ROUTINE privilege for the routine. If the\nautomatic_sp_privileges server system variable is set, that\nprivilege and EXECUTE are granted automatically to the\nroutine creator - see Stored Routine Privileges.\n \nThe IF EXISTS clause is a MySQL/MariaDB extension. It\nprevents an error from occurring if the procedure or\nfunction does not exist. A\nNOTE is produced that can be viewed with SHOW WARNINGS.\n \nWhile this statement takes effect immediately, threads which\nare executing a procedure can continue execution.\n \nExamples\n-------- \nDROP PROCEDURE simpleproc;\n \nIF EXISTS:\n \nDROP PROCEDURE simpleproc;\n \nERROR 1305 (42000): PROCEDURE test.simpleproc does not exist\n \nDROP PROCEDURE IF EXISTS simpleproc;\n \nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n \nSHOW WARNINGS;\n \n+-------+------+------------------------------------------+\n| Level | Code | Message |\n+-------+------+------------------------------------------+\n| Note | 1305 | PROCEDURE test.simpleproc does not exist |\n+-------+------+------------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/drop-procedure/', '', 'https://mariadb.com/kb/en/drop-procedure/'),
(676, 'DROP SEQUENCE', 39, 'DROP SEQUENCE was introduced in MariaDB 10.3.\n \nSyntax\n------ \nDROP [TEMPORARY] SEQUENCE [IF EXISTS] [/*COMMENT TO SAVE*/]\n sequence_name [, sequence_name] ...\n \nDescription\n----------- \nDROP SEQUENCE removes one or more sequences created with\nCREATE SEQUENCE. You must have the DROP privilege for each\nsequence. MariaDB returns an error indicating by name which\nnon-existing tables it was unable to drop, but it also drops\nall of the tables in the list that do exist.\n \nImportant: When a table is dropped, user privileges on the\ntable are not automatically dropped. See GRANT.\n \nIf another connection is using the sequence, a metadata lock\nis active, and this statement will wait until the lock is\nreleased. This is also true for non-transactional tables.\n \nFor each referenced sequence, DROP SEQUENCE drops a\ntemporary sequence with that name, if it exists. If it does\nnot exist, and the TEMPORARY keyword is not used, it drops a\nnon-temporary sequence with the same name, if it exists. The\nTEMPORARY keyword ensures that a non-temporary sequence will\nnot accidentally be dropped.\n \nUse IF EXISTS to prevent an error from occurring for\nsequences that do not exist. A NOTE is generated for each\nnon-existent sequence when using IF EXISTS. See SHOW\nWARNINGS.\n \nDROP SEQUENCE requires the DROP privilege.\n \nNotes\n \nDROP SEQUENCE only removes sequences, not tables. However,\nDROP TABLE can remove both sequences and tables.\n \n\n\nURL: https://mariadb.com/kb/en/drop-sequence/', '', 'https://mariadb.com/kb/en/drop-sequence/'),
(677, 'DROP SERVER', 39, 'Syntax\n------ \nDROP SERVER [ IF EXISTS ] server_name\n \nDescription\n----------- \nDrops the server definition for the server named\nserver_name. The\ncorresponding row within the mysql.servers table will be\ndeleted. This\nstatement requires the SUPER privilege. \n \nDropping a server for a table does not affect any\nFederatedX, FEDERATED or Spider tables that used this\nconnection information when they were created. \n \nIF EXISTS\n \nIf the IF EXISTS clause is used, MariaDB will not return an\nerror if the server does not exist. Unlike all other\nstatements, DROP SERVER IF EXISTS does not issue a note if\nthe server does not exist. See MDEV-9400.\n \nExamples\n-------- \nDROP SERVER s;\n \nIF EXISTS:\n \nDROP SERVER s;\n \nERROR 1477 (HY000): The foreign server name you are trying\nto reference \n does not exist. Data source error: s\n \nDROP SERVER IF EXISTS s;\n \nQuery OK, 0 rows affected (0.00 sec)\n \n\n\nURL: https://mariadb.com/kb/en/drop-server/', '', 'https://mariadb.com/kb/en/drop-server/'),
(680, 'DROP TRIGGER', 39, 'Syntax\n------ \nDROP TRIGGER [IF EXISTS] [schema_name.]trigger_name\n \nDescription\n----------- \nThis statement drops a trigger. The schema (database) name\nis optional. If the\nschema is omitted, the trigger is dropped from the default\nschema.\nIts use requires the TRIGGER privilege for the table\nassociated with the trigger.\n \nUse IF EXISTS to prevent an error from occurring for a\ntrigger that does not exist. A NOTE is generated for a\nnon-existent trigger\nwhen using IF EXISTS. See SHOW WARNINGS.\n \nNote: Triggers for a table are also dropped if you drop the\ntable.\n \nExamples\n-------- \nDROP TRIGGER test.example_trigger;\n \nUsing the IF EXISTS clause:\n \nDROP TRIGGER IF EXISTS test.example_trigger;\n \nQuery OK, 0 rows affected, 1 warning (0.01 sec)\n \nSHOW WARNINGS;\n \n+-------+------+------------------------+\n| Level | Code | Message |\n+-------+------+------------------------+\n| Note | 1360 | Trigger does not exist |\n+-------+------+------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/drop-trigger/', '', 'https://mariadb.com/kb/en/drop-trigger/'),
(678, 'DROP TABLE', 39, 'Syntax\n------ \nDROP [TEMPORARY] TABLE [IF EXISTS] [/*COMMENT TO SAVE*/]\n tbl_name [, tbl_name] ...\n [WAIT n|NOWAIT]\n [RESTRICT | CASCADE]\n \nDescription\n----------- \nDROP TABLE removes one or more tables. You must have the\nDROP privilege\nfor each table. All table data and the table definition are\nremoved, as well as triggers associated to the table, so be\ncareful with this statement! If any of the tables named in\nthe argument list do\nnot exist, MariaDB returns an error indicating by name which\nnon-existing tables\nit was unable to drop, but it also drops all of the tables\nin the list that do\nexist.\n \nImportant: When a table is dropped, user privileges on the\ntable are not\nautomatically dropped. See GRANT.\n \nIf another connection is using the table, a metadata lock is\nactive, and this statement will wait until the lock is\nreleased. This is also true for non-transactional tables.\n \nNote that for a partitioned table, DROP TABLE permanently\nremoves the table\ndefinition, all of its partitions, and all of the data which\nwas stored in\nthose partitions. It also removes the partitioning\ndefinition (.par) file\nassociated with the dropped table.\n \nFor each referenced table, DROP TABLE drops a temporary\ntable with that name, if it exists. If it does not exist,\nand the TEMPORARY keyword is not used, it drops a\nnon-temporary table with the same name, if it exists. The\nTEMPORARY keyword ensures that a non-temporary table will\nnot accidentally be dropped.\n \nUse IF EXISTS to prevent an error from occurring for tables\nthat do not\nexist. A NOTE is generated for each non-existent table when\nusing\nIF EXISTS. See SHOW WARNINGS.\n \nIf a foreign key references this table, the table cannot be\ndropped. In this case, it is necessary to drop the foreign\nkey first.\n \nRESTRICT and CASCADE are allowed to make porting from other\ndatabase systems easier. In MariaDB, they do nothing.\n \nSince MariaDB 5.5.27, the comment before the tablenames\n(that /*COMMENT TO SAVE*/) is stored in the binary log. That\nfeature can be used by replication tools to send their\ninternal messages.\n \nIt is possible to specify table names as db_name.tab_name.\nThis is useful to delete tables from multiple databases with\none statement. See Identifier Qualifiers for details.\n \nThe DROP privilege is required to use DROP TABLE on\nnon-temporary tables. For temporary tables, no privilege is\nrequired, because such tables are only visible for the\ncurrent session.\n \nNote: DROP TABLE automatically commits the current active\ntransaction,\nunless you use the TEMPORARY keyword.\n \nWAIT/NOWAIT\n \nSet the lock wait timeout. See WAIT and NOWAIT.\n \nDROP TABLE in replication\n \nDROP TABLE has the following characteristics in replication:\nDROP TABLE IF EXISTS are always logged.\nDROP TABLE without IF EXISTS for tables that don\'t exist\nare not written to the binary log.\nDropping of TEMPORARY tables are prefixed in the log with\nTEMPORARY. These drops are only logged when running\nstatement or mixed mode replication.\nOne DROP TABLE statement can be logged with up to 3\ndifferent DROP statements:\nDROP TEMPORARY TABLE\nlist_of_non_transactional_temporary_tables\nDROP TEMPORARY TABLE list_of_transactional_temporary_tables\nDROP TABLE list_of_normal_tables\n \nStarting from MariaDB 10.0.8, DROP TABLE on the master is\ntreated on the slave as DROP TABLE IF EXISTS. You can change\nthat by setting slave-ddl-exec-mode to STRICT.\n \nDropping an Internal #sql-... Table\n \nIf the mysqld process is killed during an ALTER TABLE you\nmay find a table named #sql-... in your data directory. In\nMariaDB 10.3, InnoDB tables with this prefix will de deleted\nautomatically during startup.\nIn MariaDB 10.4 we will ensure that these temporary tables\nwill always be deleted automatically.\n \nIf you want to delete one of these tables explicitly you can\ndo so by using the following syntax:\n \nDROP TABLE `#mysql50##sql-...`;\n \nWhen running an ALTER TABLE…ALGORITHM=INPLACE that\nrebuilds the table, InnoDB will create an internal #sql-ib\ntable. For these tables, the .frm file will be called\nsomething else. In order to drop such a table after a server\ncrash, you must rename the #sql*.frm file to match the\n#sql-ib*.ibd file.\n \nDropping All Tables in a Database\n \nThe best way to drop all tables in a database is by\nexecuting DROP DATABASE, which will drop the database\nitself, and all tables in it.\n \nHowever, if you want to drop all tables in the database, but\nyou also want to keep the database itself and any other\nnon-table objects in it, then you would need to execute DROP\nTABLE to drop each individual table. You can construct these\nDROP TABLE commands by querying the TABLES table in the\ninformation_schema database. For example:\n \nSELECT CONCAT(\'DROP TABLE IF EXISTS `\', TABLE_SCHEMA,\n\'`.`\', TABLE_NAME, \'`;\')\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = \'mydb\';\n \nExamples\n-------- \nDROP TABLE Employees, Customers;\n \nNotes\n \nBeware that DROP TABLE can drop both tables and sequences.\nThis is mainly done to allow old tools like mysqldump to\nwork with sequences.\n \n\n\nURL: https://mariadb.com/kb/en/drop-table/', '', 'https://mariadb.com/kb/en/drop-table/'),
(681, 'DROP VIEW', 39, 'Syntax\n------ \nDROP VIEW [IF EXISTS]\n view_name [, view_name] ...\n [RESTRICT | CASCADE]\n \nDescription\n----------- \nDROP VIEW removes one or more views. You must have the DROP\nprivilege for\neach view. If any of the views named in the argument list do\nnot exist, MariaDB\nreturns an error indicating by name which non-existing views\nit was unable to\ndrop, but it also drops all of the views in the list that do\nexist.\n \nThe IF EXISTS clause prevents an error from occurring for\nviews that don\'t\nexist. When this clause is given, a NOTE is generated for\neach non-existent\nview. See SHOW WARNINGS.\n \nRESTRICT and CASCADE, if given, are parsed and ignored.\n \nIt is possible to specify view names as db_name.view_name.\nThis is useful to delete views from multiple databases with\none statement. See Identifier Qualifiers for details.\n \nThe DROP privilege is required to use DROP TABLE on\nnon-temporary tables. For temporary tables, no privilege is\nrequired, because such tables are only visible for the\ncurrent session.\n \nIf a view references another view, it will be possible to\ndrop the referenced view. However, the other view will\nreference a view which does not exist any more. Thus,\nquerying it will produce an error similar to the following:\n \nERROR 1356 (HY000): View \'db_name.view_name\' references\ninvalid table(s) or \ncolumn(s) or function(s) or definer/invoker of view lack\nrights to use them\n \nThis problem is reported in the output of CHECK TABLE.\n \nNote that it is not necessary to use DROP VIEW to replace an\nexisting view, because CREATE VIEW has an OR REPLACE clause.\n \nExamples\n-------- \nDROP VIEW v,v2;\n \nGiven views v and v2, but no view v3\n \nDROP VIEW v,v2,v3;\nERROR 1051 (42S02): Unknown table \'v3\'\n \nDROP VIEW IF EXISTS v,v2,v3;\nQuery OK, 0 rows affected, 1 warning (0.01 sec)\n \nSHOW WARNINGS;\n+-------+------+-------------------------+\n| Level | Code | Message |\n+-------+------+-------------------------+\n| Note | 1051 | Unknown table \'test.v3\' |\n+-------+------+-------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/drop-view/', '', 'https://mariadb.com/kb/en/drop-view/'),
(682, 'Invisible Columns', 39, 'Invisible columns (sometimes also called hidden columns)\nfirst appeared in MariaDB 10.3.3.\n \nColumns can be given an INVISIBLE attribute in a CREATE\nTABLE or ALTER TABLE statement. These columns will then not\nbe listed in the results of a SELECT * statement, nor do\nthey need to be assigned a value in an INSERT statement,\nunless INSERT explicitly mentions them by name.\n \nSince SELECT * does not return the invisible columns, new\ntables or views created in this manner will have no trace of\nthe invisible columns. If specifically referenced in the\nSELECT statement, the columns will be brought into the\nview/new table, but the INVISIBLE attribute will not.\n \nInvisible columns can be declared as NOT NULL, but then\nrequire a DEFAULT value.\n \nIt is not possible for all columns in a table to be\ninvisible.\n \nExamples\n-------- \nCREATE TABLE t (x INT, y INT INVISIBLE, z INT INVISIBLE NOT\nNULL);\nERROR 4106 (HY000): Invisible column `z` must have a default\nvalue\n \nCREATE TABLE t (x INT, y INT INVISIBLE, z INT INVISIBLE NOT\nNULL DEFAULT 4);\n \nINSERT INTO t VALUES (1),(2);\n \nINSERT INTO t (x,y) VALUES (3,33);\n \nSELECT * FROM t;\n \n+------+\n| x |\n+------+\n| 1 |\n| 2 |\n| 3 |\n+------+\n \nSELECT x,y,z FROM t;\n \n+------+------+---+\n| x | y | z |\n+------+------+---+\n| 1 | NULL | 4 |\n| 2 | NULL | 4 |\n| 3 | 33 | 4 |\n+------+------+---+\n \nDESC t;\n \n+-------+---------+------+-----+---------+-----------+\n| Field | Type | Null | Key | Default | Extra |\n+-------+---------+------+-----+---------+-----------+\n| x | int(11) | YES | | NULL | |\n| y | int(11) | YES | | NULL | INVISIBLE |\n| z | int(11) | NO | | 4 | INVISIBLE |\n+-------+---------+------+-----+---------+-----------+\n \nALTER TABLE t MODIFY x INT INVISIBLE, MODIFY y INT, MODIFY z\nINT NOT NULL DEFAULT 4;\n \nDESC t;\n \n+-------+---------+------+-----+---------+-----------+\n| Field | Type | Null | Key | Default | Extra |\n+-------+---------+------+-----+---------+-----------+\n| x | int(11) | YES | | NULL | INVISIBLE |\n| y | int(11) | YES | | NULL | |\n| z | int(11) | NO | | 4 | |\n+-------+---------+------+-----+---------+-----------+\n \nCreating a view from a table with hidden columns:\n \nCREATE VIEW v1 AS SELECT * FROM t;\n \nDESC v1;\n \n+-------+---------+------+-----+---------+-------+\n| Field | Type | Null | Key | Default | Extra |\n+-------+---------+------+-----+---------+-------+\n| x | int(11) | YES | | NULL | |\n+-------+---------+------+-----+---------+-------+\n \nCREATE VIEW v2 AS SELECT x,y,z FROM t;\n \nDESC v2;\n \n+-------+---------+------+-----+---------+-------+\n| Field | Type | Null | Key | Default | Extra |\n+-------+---------+------+-----+---------+-------+\n| x | int(11) | YES | | NULL | |\n| y | int(11) | YES | | NULL | |\n| z | int(11) | NO | | 4 | |\n+-------+---------+------+-----+---------+-------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/invisible-columns/', '', 'https://mariadb.com/kb/en/invisible-columns/'),
(683, 'MERGE', 39, 'Description\n----------- \nThe MERGE storage engine, also known as the MRG_MyISAM\nengine, is a\ncollection of identical MyISAM tables that can be used as\none.\n\"Identical\" means that all tables have identical column\nand index\ninformation. You cannot merge MyISAM tables in which the\ncolumns are\nlisted in a different order, do not have exactly the same\ncolumns, or\nhave the indexes in different order. However, any or all of\nthe MyISAM\ntables can be compressed with myisampack. Columns names and\nindexes names can be different, as long as data types and\nNULL/NOT NULL clauses are the same. Differences in\ntable options such as AVG_ROW_LENGTH, MAX_ROWS, or PACK_KEYS\ndo not\nmatter.\n \nEach index in a MERGE table must match an index in\nunderlying MyISAM tables, but the opposite is not true.\nAlso, a MERGE table cannot have a PRIMARY KEY or UNIQUE\nindexes, because it cannot enforce uniqueness over all\nunderlying tables.\n \nThe following options are meaningful for MERGE tables:\nUNION. This option specifies the list of the underlying\nMyISAM tables. The list is enclosed between parentheses and\nseparated with commas.\nINSERT_METHOD. This options specifies whether, and how,\nINSERTs are allowed for the table. Allowed values are: NO\n(INSERTs are not allowed), FIRST (new rows will be written\ninto the first table specified in the UNION list), LAST (new\nrows will be written into the last table specified in the\nUNION list). The default value is NO.\n \nIf you define a MERGE table with a definition which is\ndifferent from the underlying MyISAM tables, or one of the\nunderlying tables is not MyISAM, the CREATE TABLE statement\nwill not return any error. But any statement which involves\nthe table will produce an error like the following:\n \nERROR 1168 (HY000): Unable to open underlying table which is\ndifferently defined \n or of non-MyISAM type or doesn\'t exist\n \nA CHECK TABLE will show more information about the problem.\n \nThe error is also produced if the table is properly define,\nbut an underlying table\'s definition changes at some point\nin time.\n \nIf you try to insert a new row into a MERGE table with\nINSERT_METHOD=NO, you will get an error like the following:\n \nERROR 1036 (HY000): Table \'tbl_name\' is read only\n \nIt is possible to build a MERGE table on MyISAM tables which\nhave one or more virtual columns. MERGE itself does not\nsupport virtual columns, thus such columns will be seen as\nregular columns. The data types and sizes will still need to\nbe identical, and they cannot be NOT NULL.\n \nExamples\n-------- \nCREATE TABLE t1 (\n a INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n message CHAR(20)) ENGINE=MyISAM;\n \nCREATE TABLE t2 (\n a INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n message CHAR(20)) ENGINE=MyISAM;\n \nINSERT INTO t1 (message) VALUES\n(\'Testing\'),(\'table\'),(\'t1\');\n \nINSERT INTO t2 (message) VALUES\n(\'Testing\'),(\'table\'),(\'t2\');\n \nCREATE TABLE total (\n a INT NOT NULL AUTO_INCREMENT,\n message CHAR(20), INDEX(a))\n ENGINE=MERGE UNION=(t1,t2) INSERT_METHOD=LAST;\n \nSELECT * FROM total;\n \n+---+---------+\n| a | message |\n+---+---------+\n| 1 | Testing |\n| 2 | table |\n| 3 | t1 |\n| 1 | Testing |\n| 2 | table |\n| 3 | t2 |\n+---+---------+\n \nIn the following example, we\'ll create three MyISAM tables,\nand then a MERGE table on them. However, one of them uses a\ndifferent data type for the column b, so a SELECT will\nproduce an error:\n \nCREATE TABLE t1 (\n a INT,\n b INT\n) ENGINE = MyISAM;\n \nCREATE TABLE t2 (\n a INT,\n b INT\n) ENGINE = MyISAM;\n \nCREATE TABLE t3 (\n a INT,\n b TINYINT\n) ENGINE = MyISAM;\n \nCREATE TABLE t_mrg (\n a INT,\n b INT\n) ENGINE = MERGE,UNION=(t1,t2,t3);\n \nSELECT * FROM t_mrg;\n \nERROR 1168 (HY000): Unable to open underlying table which is\ndifferently defined\n or of non-MyISAM type or doesn\'t exist\n \nTo find out what\'s wrong, we\'ll use a CHECK TABLE:\n \nCHECK TABLE t_mrg;\n \n+------------+-------+----------+-----------------------------------------------------------------------------------------------------+\n| Table | Op | Msg_type | Msg_text |\n+------------+-------+----------+-----------------------------------------------------------------------------------------------------+\n| test.t_mrg | check | Error | Table \'test.t3\' is\ndifferently defined or of non-MyISAM type or doesn\'t exist\n|\n| test.t_mrg | check | Error | Unable to open underlying\ntable which is differently defined or of non-MyISAM type or\ndoesn\'t exist |\n| test.t_mrg | check | error | Corrupt |\n+------------+-------+----------+-----------------------------------------------------------------------------------------------------+\n \nNow, we know that the problem is in t3\'s definition.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/merge/', '', 'https://mariadb.com/kb/en/merge/'),
(684, 'RENAME TABLE', 39, 'Syntax\n------ \nRENAME TABLE tbl_name \n [WAIT n | NOWAIT]\n TO new_tbl_name\n [, tbl_name2 TO new_tbl_name2] ...\n \nDescription\n----------- \nThis statement renames one or more tables or views, but not\nthe privileges associated to them.\n \nThe rename operation is done atomically, which means that no\nother session can\naccess any of the tables while the rename is running. For\nexample, if you have\nan existing table old_table, you can create another table\nnew_table that has the same structure but is empty, and then\nreplace the existing table with the empty one as follows\n(assuming that\nbackup_table does not already exist):\n \nCREATE TABLE new_table (...);\nRENAME TABLE old_table TO backup_table, new_table TO\nold_table;\n \ntbl_name can optionally be specified as db_name.tbl_name.\nSee Identifier Qualifiers. This allows to use RENAME to move\na table from a database to another (as long as they are on\nthe same filesystem):\n \nRENAME TABLE db1.t TO db2.t;\n \nNote that moving a table to another database is not possible\nif it has some triggers. Trying to do so produces the\nfollowing error:\n \nERROR 1435 (HY000): Trigger in wrong schema\n \nAlso, views cannot be moved to another database:\n \nERROR 1450 (HY000): Changing schema from \'old_db\' to\n\'new_db\' is not allowed.\n \nIf a RENAME TABLE renames more than one table and one\nrenaming fails, all renames executed by the same statement\nare rolled back.\n \nRenames are always executed in the specified order. Knowing\nthis, it is also possible to swap two tables\' names:\n \nRENAME TABLE t1 TO tmp_table,\n t2 TO t1,\n tmp_table TO t2;\n \nPrivileges\n \nExecuting the RENAME TABLE statement requires the DROP,\nCREATE and INSERT privileges for the table or the database.\n \nWAIT/NOWAIT\n \nSet the lock wait timeout. See WAIT and NOWAIT.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/rename-table/', '', 'https://mariadb.com/kb/en/rename-table/'),
(685, 'Silent Column Changes', 39, 'When a CREATE TABLE or ALTER TABLE command is issued,\nMariaDB will silently change a column specification in the\nfollowing cases:\nPRIMARY KEY columns are always NOT NULL.\nAny trailing spaces from SET and ENUM values are discarded.\nTIMESTAMP columns are always NOT NULL, and display sizes are\ndiscarded\nA row-size limit of 65535 bytes applies\nIf strict SQL mode is not enabled, a VARCHAR column longer\nthan 65535 become TEXT, and a VARBINARY columns longer than\n65535 becomes a BLOB. If strict mode is enabled the silent\nchanges will not be made, and an error will occur.\nIf a USING clause specifies an index that\'s not permitted\nby the storage engine, the engine will instead use another\navailable index type that can be applied without affecting\nresults.\nIf the CHARACTER SET binary attribute is specified, the\ncolumn is created as the matching binary data type. A TEXT\nbecomes a BLOB, CHAR a BINARY and VARCHAR a VARBINARY. ENUMs\nand SETs are created as defined.\n \nTo ease imports from other RDBMS\'s, MariaDB will also\nsilently map the following data types:\n \nOther Vendor Type | MariaDB Type | \n \nBOOL | TINYINT | \n \nBOOLEAN | TINYINT | \n \nCHARACTER VARYING(M) | VARCHAR(M) | \n \nFIXED | DECIMAL | \n \nFLOAT4 | FLOAT | \n \nFLOAT8 | DOUBLE | \n \nINT1 | TINYINT | \n \nINT2 | SMALLINT | \n \nINT3 | MEDIUMINT | \n \nINT4 | INT | \n \nINT8 | BIGINT | \n \nLONG VARBINARY | MEDIUMBLOB | \n \nLONG VARCHAR | MEDIUMTEXT | \n \nLONG | MEDIUMTEXT | \n \nMIDDLEINT | MEDIUMINT | \n \nNUMERIC | DECIMAL | \n \nCurrently, all MySQL types are supported in MariaDB.\n \nFor type mapping between Cassandra and MariaDB, see\nCassandra storage engine.\n \nExample\n \nSilent changes in action:\n \nCREATE TABLE SilenceIsGolden\n (\n f1 TEXT CHARACTER SET binary,\n f2 VARCHAR(15) CHARACTER SET binary,\n f3 CHAR CHARACTER SET binary,\n f4 ENUM(\'x\',\'y\',\'z\') CHARACTER SET binary,\n f5 VARCHAR (65536),\n f6 VARBINARY (65536),\n f7 INT1\n );\nQuery OK, 0 rows affected, 2 warnings (0.31 sec)\n \nSHOW WARNINGS;\n \n+-------+------+-----------------------------------------------+\n| Level | Code | Message |\n+-------+------+-----------------------------------------------+\n| Note | 1246 | Converting column \'f5\' from VARCHAR to\nTEXT |\n| Note | 1246 | Converting column \'f6\' from VARBINARY to\nBLOB |\n+-------+------+-----------------------------------------------+\n \nDESCRIBE SilenceIsGolden;\n \n+-------+-------------------+------+-----+---------+-------+\n| Field | Type | Null | Key | Default | Extra |\n+-------+-------------------+------+-----+---------+-------+\n| f1 | blob | YES | | NULL | |\n| f2 | varbinary(15) | YES | | NULL | |\n| f3 | binary(1) | YES | | NULL | |\n| f4 | enum(\'x\',\'y\',\'z\') | YES | | NULL | |\n| f5 | mediumtext | YES | | NULL | |\n| f6 | mediumblob | YES | | NULL | |\n| f7 | tinyint(4) | YES | | NULL | |\n+-------+-------------------+------+-----+---------+-------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/silent-column-changes/', '', 'https://mariadb.com/kb/en/silent-column-changes/'),
(689, 'NEXT VALUE for sequence_name', 40, 'SEQUENCEs were introduced in MariaDB 10.3\n \nSyntax\n------ \nNEXT VALUE FOR sequence\n \nor\n \nNEXTVAL(sequence_name)\n \nor in Oracle mode (SQL_MODE=ORACLE)\n \nsequence_name.nextval\n \nNEXT VALUE FOR is ANSI SQL syntax while NEXTVAL() is\nPostgreSQL syntax.\n \nDescription\n----------- \nGenerate next value for a SEQUENCE.\nYou can greatly speed up NEXT VALUE by creating the sequence\nwith the CACHE option. If not, every NEXT VALUE usage will\ncause changes in the stored SEQUENCE table.\nWhen using NEXT VALUE the value will be reserved at once and\nwill not be reused, except if the SEQUENCE was created with\nCYCLE. This means that when you are using SEQUENCEs you have\nto expect gaps in the generated sequence numbers.\nIf one updates the SEQUENCE with SETVAL() or ALTER SEQUENCE\n... RESTART, NEXT VALUE FOR will notice this and start from\nthe next requested value.\nFLUSH TABLES will close the sequence and the next sequence\nnumber generated will be according to what\'s stored in the\nSEQUENCE object. In effect, this will discard the cached\nvalues.\nNEXT VALUE requires the INSERT privilege.\n \nYou can also use NEXT VALUE FOR sequence for column DEFAULT.\n \n\n\nURL: https://mariadb.com/kb/en/next-value-for-sequence_name/', '', 'https://mariadb.com/kb/en/next-value-for-sequence_name/'),
(691, 'PREVIOUS VALUE FOR sequence_name', 40, 'SEQUENCEs were introduced in MariaDB 10.3.\n \nSyntax\n------ \nPREVIOUS VALUE FOR sequence_name\n \nor\n \nLASTVAL(sequence_name)\n \nor in Oracle mode (SQL_MODE=ORACLE)\n \nsequence_name.currval\n \nPREVIOUS VALUE FOR is IBM DB2 syntax while LASTVAL() is\nPostgreSQL syntax.\n \nDescription\n----------- \nGet last value in the current connection generated from a\nsequence.\nIf the sequence has not yet been used by the connection,\nPREVIOUS VALUE FOR returns NULL\nIf a SEQUENCE has been dropped and re-created then it\'s\ntreated as a new SEQUENCE and PREVIOUS VALUE FOR will return\nNULL.\nFLUSH TABLES has no effect on PREVIOUS VALUE FOR.\nPrevious values for all used sequences are stored per\nconnection until connection ends.\n \nPREVIOUS VALUE FOR requires the SELECT privilege.\n \nExample\n \nSELECT PREVIOUS VALUE FOR s;\n \n+----------------------+\n| PREVIOUS VALUE FOR s |\n+----------------------+\n| 100 |\n+----------------------+\n \n\n\nURL:\nhttps://mariadb.com/kb/en/previous-value-for-sequence_name/', '', 'https://mariadb.com/kb/en/previous-value-for-sequence_name/'),
(686, 'TRUNCATE TABLE', 39, 'Syntax\n------ \nTRUNCATE [TABLE] tbl_name\n [WAIT n | NOWAIT]\n \nDescription\n----------- \nTRUNCATE TABLE empties a table completely. It requires the\nDROP privilege. See GRANT.\n \ntbl_name can also be specified in the form db_name.tbl_name\n(see Identifier Qualifiers).\n \nLogically, TRUNCATE TABLE is equivalent to a DELETE\nstatement that deletes all rows, but there are practical\ndifferences under some circumstances.\n \nTRUNCATE TABLE will fail for an InnoDB table if any FOREIGN\nKEY constraints from other tables reference the table,\nreturning the error:\n \nERROR 1701 (42000): Cannot truncate a table referenced in a\nforeign key constraint\n \nForeign Key constraints between columns in the same table\nare permitted.\n \nFor an InnoDB table, if there are no FOREIGN KEY\nconstraints, InnoDB performs fast truncation by dropping the\noriginal table and creating an empty one with the same\ndefinition, which is much faster than deleting rows one by\none. The AUTO_INCREMENT counter is reset by TRUNCATE TABLE,\nregardless of whether there is a FOREIGN KEY constraint.\n \nThe count of rows affected by TRUNCATE TABLE is accurate\nonly\nwhen it is mapped to a DELETE statement.\n \nFor other storage engines, TRUNCATE TABLE differs from\nDELETE in the following ways:\nTruncate operations drop and re-create the table, which is\nmuch\n faster than deleting rows one by one, particularly for\nlarge tables.\nTruncate operations cause an implicit commit.\nTruncation operations cannot be performed if the session\nholds an\n active table lock.\nTruncation operations do not return a meaningful value for\nthe number\n of deleted rows. The usual result is \"0 rows affected,\"\nwhich should\n be interpreted as \"no information.\"\nAs long as the table format file tbl_name.frm is valid, the\n table can be re-created as an empty table\n with TRUNCATE TABLE, even if the data or index files have\nbecome\n corrupted.\nThe table handler does not remember the last\n used AUTO_INCREMENT value, but starts counting\n from the beginning. This is true even for MyISAM and\nInnoDB, which normally\n do not reuse sequence values.\nWhen used with partitioned tables, TRUNCATE TABLE preserves\n the partitioning; that is, the data and index files are\ndropped and\n re-created, while the partition definitions (.par) file is\n unaffected.\nSince truncation of a table does not make any use of DELETE,\n the TRUNCATE statement does not invoke ON DELETE triggers.\nTRUNCATE TABLE will only reset the values in the Performance\nSchema summary tables to zero or null, and will not remove\nthe rows.\n \nFor the purposes of binary logging and replication, TRUNCATE\nTABLE is treated as DROP TABLE followed by CREATE TABLE (DDL\nrather than DML).\n \nTRUNCATE TABLE does not work on views. Currently, TRUNCATE\nTABLE drops all historical records from a system-versioned\ntable.\n \nWAIT/NOWAIT\n \nSet the lock wait timeout. See WAIT and NOWAIT.\n \nOracle-mode\n \nOracle-mode from MariaDB 10.3 permits the optional keywords\nREUSE STORAGE or DROP STORAGE to be used.\n \nTRUNCATE [TABLE] tbl_name [{DROP | REUSE} STORAGE]\n \nThese have no effect on the operation.\n \nPerformance\n \nTRUNCATE TABLE is faster than DELETE, because it drops and\nre-creates a table.\n \nWith XtraDB/InnoDB, TRUNCATE TABLE is slower if\ninnodb_file_per_table=ON is set (the default since MariaDB\n5.5). This is because TRUNCATE TABLE unlinks the underlying\ntablespace file, which can be an expensive operation. See\nMDEV-8069 for more details.\n \nThe performance issues with innodb_file_per_table=ON can be\nexacerbated in cases where the InnoDB buffer pool is very\nlarge and innodb_adaptive_hash_index=ON is set. In that\ncase, using DROP TABLE followed by CREATE TABLE instead of\nTRUNCATE TABLE may perform better. Setting\ninnodb_adaptive_hash_index=OFF can also help. In MariaDB\n10.2.19 and later, this performance can also be improved by\nsetting innodb_safe_truncate=OFF. See MDEV-9459 for more\ndetails.\n \nSetting innodb_adaptive_hash_index=OFF can also improve\nTRUNCATE TABLE performance in general. See MDEV-16796 for\nmore details.\n \n\n\nURL: https://mariadb.com/kb/en/truncate-table/', '', 'https://mariadb.com/kb/en/truncate-table/'),
(694, 'Differences between JSON_QUERY and JSON_VALUE', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nThe primary difference between the two functions is that\nJSON_QUERY returns an object or an array, while JSON_VALUE\nreturns a scalar. \n \nTake the following JSON document as an example\n \nSET @json=\'{ \"x\": [0,1], \"y\": \"[0,1]\", \"z\":\n\"Monty\" }\';\n \nNote that data member \"x\" is an array, and data members\n\"y\" and \"z\" are strings. The following examples\ndemonstrate the differences between the two functions.\n \nSELECT JSON_QUERY(@json,\'$\'), JSON_VALUE(@json,\'$\');\n+--------------------------------------------+-----------------------+\n| JSON_QUERY(@json,\'$\') | JSON_VALUE(@json,\'$\') |\n+--------------------------------------------+-----------------------+\n| { \"x\": [0,1], \"y\": \"[0,1]\", \"z\": \"Monty\" } |\nNULL |\n+--------------------------------------------+-----------------------+\n \nSELECT JSON_QUERY(@json,\'$.x\'), JSON_VALUE(@json,\'$.x\');\n+-------------------------+-------------------------+\n| JSON_QUERY(@json,\'$.x\') | JSON_VALUE(@json,\'$.x\') |\n+-------------------------+-------------------------+\n| [0,1] | NULL |\n+-------------------------+-------------------------+\n \nSELECT JSON_QUERY(@json,\'$.y\'), JSON_VALUE(@json,\'$.y\');\n+-------------------------+-------------------------+\n| JSON_QUERY(@json,\'$.y\') | JSON_VALUE(@json,\'$.y\') |\n+-------------------------+-------------------------+\n| NULL | [0,1] |\n+-------------------------+-------------------------+\n \nSELECT JSON_QUERY(@json,\'$.z\'), JSON_VALUE(@json,\'$.z\');\n+-------------------------+-------------------------+\n| JSON_QUERY(@json,\'$.z\') | JSON_VALUE(@json,\'$.z\') |\n+-------------------------+-------------------------+\n| NULL | Monty |\n+-------------------------+-------------------------+\n \nSELECT JSON_QUERY(@json,\'$.x[0]\'),\nJSON_VALUE(@json,\'$.x[0]\');\n+----------------------------+----------------------------+\n| JSON_QUERY(@json,\'$.x[0]\') |\nJSON_VALUE(@json,\'$.x[0]\') |\n+----------------------------+----------------------------+\n| NULL | 0 |\n+----------------------------+----------------------------+\n \n\n \n \n \n \n \n \n \n\nURL:\nhttps://mariadb.com/kb/en/differences-between-json_query-and-json_value/', '', 'https://mariadb.com/kb/en/differences-between-json_query-and-json_value/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(692, 'Sequence Overview', 40, 'Sequences were introduced in MariaDB 10.3.\n \nIntroduction\n \nA sequence is an object that generates a sequence of numeric\nvalues, as specified by the CREATE SEQUENCE statement. \n \nCREATE SEQUENCE will create a sequence that generates new\nvalues when called with NEXT VALUE FOR sequence_name. It\'s\nan alternative to AUTO INCREMENT when one wants to have more\ncontrol of how the numbers are generated. As the SEQUENCE\ncaches values (up to the CACHE value in the CREATE SEQUENCE\nstatement, by default 1000) it can in some cases be much\nfaster than AUTO INCREMENT. Another benefit is that one can\naccess the last value generated by all used sequences, which\nsolves one of the limitations with LAST_INSERT_ID().\n \nCreating a Sequence\n \nThe CREATE SEQUENCE statement is used to create a sequence.\nHere is an example of a sequence starting at 100,\nincrementing by 10 each time:\n \nCREATE SEQUENCE s START WITH 100 INCREMENT BY 10;\n \nThe CREATE SEQUENCE statement, along with defaults, can be\nviewd with the SHOW CREATE SEQUENCE STATEMENT, for example:\n \nSHOW CREATE SEQUENCE s\\G\n*************************** 1. row\n***************************\n Table: s\nCreate Table: CREATE SEQUENCE `s` start with 100 minvalue 1\nmaxvalue 9223372036854775806 \n increment by 10 cache 1000 nocycle ENGINE=InnoDB\n \nUsing Sequence Objects\n \nTo get the next value from a sequence, use\n \nNEXT VALUE FOR sequence_name\n \nor\n \nNEXTVAL(sequence_name)\n \nor in Oracle mode (SQL_MODE=ORACLE)\n \nsequence_name.nextval\n \nFor retrieving the last value used by the current connection\nfrom a sequence\nuse:\n \nPREVIOUS VALUE FOR sequence_name\n \nor\n \nLASTVAL(sequence_name)\n \nor in Oracle mode (SQL_MODE=ORACLE)\n \nsequence_name.currval\n \nFor example:\n \nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n| 100 |\n+------------+\n \nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n| 110 |\n+------------+\n \nSELECT LASTVAL(s);\n+------------+\n| LASTVAL(s) |\n+------------+\n| 110 |\n+------------+\n \nUsing Sequences in DEFAULT\n \nStarting from 10.3.3 you can use Sequences in DEFAULT:\n \ncreate sequence s1;\n \ncreate table t1 (a int primary key default (next value for\ns1), b int);\ninsert into t1 (b) values (1),(2);\nselect * from t1;\n \n+---+------+\n| a | b |\n+---+------+\n| 1 | 1 |\n| 2 | 2 |\n+---+------+\n \nChanging a Sequence\n \nThe ALTER SEQUENCE statement is used for changing sequences.\nFor example, to restart the sequence at another value:\n \nALTER SEQUENCE s RESTART 50;\n \nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n| 50 |\n+------------+\n \nThe SETVAL function can also be used to set the next value\nto be returned for a SEQUENCE, for example:\n \nSELECT SETVAL(s, 100);\n+----------------+\n| SETVAL(s, 100) |\n+----------------+\n| 100 |\n+----------------+\n \nSETVAL can only be used to increase the sequence value.\nAttempting to set a lower value will fail, returning NULL:\n \nSELECT SETVAL(s, 50);\n+---------------+\n| SETVAL(s, 50) |\n+---------------+\n| NULL |\n+---------------+\n \nDropping a Sequence\n \nThe DROP SEQUENCE statement is used to drop a sequence, for\nexample:\n \nDROP SEQUENCE s;\n \nReplication\n \nIf one wants to use Sequences in a master-master setup or\nwith Galera one\nshould use INCREMENT=0. This will tell the Sequence to use\nauto_increment_increment and auto_increment_offset to\ngenerate unique values for each server.\n \nStandards Compliance\n \nMariaDB 10.3 supports both ANSI SQL and Oracle syntax for\nsequences.\n \nHowever as SEQUENCE is implemented as a special kind of\ntable, it uses the same namespace as tables. The benefits\nare that sequences show up in SHOW TABLES, and one can also\ncreate a sequence with CREATE TABLE and drop it with DROP\nTABLE. One can SELECT from it as from any other table. This\nensures that all old tools that work with tables should work\nwith sequences.\n \nSince sequence objects act as regular tables in many\ncontexts, they will be affected by LOCK TABLES. This is not\nthe case in other DBMS, such as Oracle, where LOCK TABLE\ndoes not affect sequences.\n \nNotes\n \nOne of the goals with the Sequence implementation is that\nall old\ntools, such as mysqldump, should work unchanged, while still\nkeeping the\nnormal usage of sequence standard compatibly.\n \nTo make this possible, sequence is currently implemented as\na table with a few exclusive properties.\n \nThe special properties for sequence tables are:\nA sequence table has always one row.\nWhen one creates a sequence, either with CREATE TABLE or\nCREATE SEQUENCE, one row will be inserted.\nIf one tries to insert into a sequence table, the single row\nwill be updated. This allows mysqldump to work but also\ngives the additional benefit that one can change all\nproperties of a sequence with a single insert. New\napplications should of course also use ALTER SEQUENCE.\nUPDATE or DELETE can\'t be performed on Sequence objects.\nDoing a select on the sequence shows the current state of\nthe sequence, except the values that are reserved in the\ncache. The next_value column shows the next value not\nreserved by the cache.\nFLUSH TABLES will close the sequence and the next sequence\nnumber generated will be according to what\'s stored in the\nSequence object. In effect, this will discard the cached\nvalues.\nA number of normal table operations work on Sequence tables.\nSee next section.\n \nTable Operations that Work with Sequences\n \nSHOW CREATE TABLE sequence_name. This shows the table\nstructure that is behind the SEQUENCE including the field\nnames that can be used with SELECT or even CREATE TABLE.\nCREATE TABLE sequence-structure ... SEQUENCE=1\nALTER TABLE sequence RENAME TO sequence2\nRENAME TABLE sequence_name TO new_sequence_name\nDROP TABLE sequence_name. This is allowed mainly to get old\ntools like mysqldump to work with sequence tables.\nSHOW TABLES\n \nImplementation\n \nInternally, sequence tables are created as a normal table\nwithout\nrollback (the InnoDB, Aria and MySAM engines support this),\nwrapped by a\nsequence engine object. This allowed us to create sequences\nwith\nalmost no performance impact for normal tables. (The cost is\none \'if\'\nper insert if the binary log is enabled).\n \nUnderlying Table Structure\n \nThe following example shows the table structure of sequences\nand how it\ncan be used as a table.\n(Output of results are slightly edited to make them easier\nto read)\n \ncreate sequence t1;\nshow create sequence t1\\G\n***** 1. row *****\n CREATE SEQUENCE `t1` start with 1 minvalue 1 maxvalue\n9223372036854775806\n increment by 1 cache 1000 nocycle ENGINE=InnoDB\n \nshow create table t1\\G\n***** 1. row *****\nCreate Table: CREATE TABLE `t1` (\n `next_not_cached_value` bigint(21) NOT NULL,\n `minimum_value` bigint(21) NOT NULL,\n `maximum_value` bigint(21) NOT NULL,\n `start_value` bigint(21) NOT NULL COMMENT \'start value\nwhen sequences is created or value if RESTART is used\',\n `increment` bigint(21) NOT NULL COMMENT \'increment\nvalue\',\n `cache_size` bigint(21) unsigned NOT NULL,\n `cycle_option` tinyint(1) unsigned NOT NULL COMMENT \'0 if\nno cycles are allowed, 1 if the sequence should begin a new\ncycle when maximum_value is passed\',\n `cycle_count` bigint(21) NOT NULL COMMENT \'How many cycles\nhave been done\'\n) ENGINE=InnoDB SEQUENCE=1\n \nselect * from t1\\G\nnext_not_cached_value: 1\n minimum_value: 1\n maximum_value: 9223372036854775806\n start_value: 1\n increment: 1\n cache_size: 1000\n cycle_option: 0\n cycle_count: 0\nThe cycle_count column is incremented every time the\nsequence wraps around.\n \nCredits\n \nThanks to Jianwe Zhao from Aliyun for his work on SEQUENCE\nin AliSQL, which gave ideas and inspiration for this work.\nThanks to Peter Gulutzan,who helped test and gave useful\ncomments about the implementation.\n \n\n\nURL: https://mariadb.com/kb/en/sequence-overview/', '', 'https://mariadb.com/kb/en/sequence-overview/'),
(693, 'SETVAL()', 40, 'SEQUENCEs were introduced in MariaDB 10.3.\n \nSyntax\n------ \nSETVAL(sequence_name, next_value, [is_used, [round]])\n \nDescription\n----------- \nSet the next value to be returned for a SEQUENCE.\n \nThis function is compatible with PostgreSQL syntax, extended\nwith the round argument.\n \nIf the is_used argument is not given or is 1 or true, then\nthe next used value will\none after the given value. If is_used is 0 or false then the\nnext generated value\nwill be the given value.\n \nIf round is used then it will set the round value (or the\ninternal cycle count, starting at zero) for the sequence.\nIf round is not used, it\'s assumed to be 0.\n \nnext_value must be an integer literal.\n \nFor SEQUENCE tables defined with CYCLE (see CREATE SEQUENCE)\none should use both next_value and round to define the next\nvalue. In this case the\ncurrent sequence value is defined to be round, next_value.\n \nThe result returned by SETVAL() is next_value or NULL if the\ngiven next_value and round is smaller than the current\nvalue.\n \nSETVAL() will not set the SEQUENCE value to a something that\nis less than\nits current value. This is needed to ensure that SETVAL()\nis replication safe. If you want to set the SEQUENCE to a\nsmaller number\nuse ALTER SEQUENCE.\n \nIf CYCLE is used, first round and then next_value are\ncompared\nto see if the value is bigger than the current value.\n \nInternally, in the MariaDB server, SETVAL() is used to\ninform\nslaves that a SEQUENCE has changed value. The slave may get\nSETVAL() statements out of order, but this is ok as only the\nbiggest one will have an effect.\n \nSETVAL requires the INSERT privilege.\n \nExamples\n-------- \nSELECT setval(foo, 42); -- Next nextval will return 43\nSELECT setval(foo, 42, true); -- Same as above\nSELECT setval(foo, 42, false); -- Next nextval will return\n42\n \nSETVAL setting higher and lower values on a sequence with an\nincrement of 10:\n \nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n| 50 |\n+------------+\n \nSELECT SETVAL(s, 100);\n+----------------+\n| SETVAL(s, 100) |\n+----------------+\n| 100 |\n+----------------+\n \nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n| 110 |\n+------------+\n \nSELECT SETVAL(s, 50);\n+---------------+\n| SETVAL(s, 50) |\n+---------------+\n| NULL |\n+---------------+\n \nSELECT NEXTVAL(s);\n+------------+\n| NEXTVAL(s) |\n+------------+\n| 120 |\n+------------+\n \nExample demonstrating round:\n \nCREATE OR REPLACE SEQUENCE s1\n START WITH 1\n MINVALUE 1\n MAXVALUE 99\n INCREMENT BY 1 \n CACHE 20 \n CYCLE;\n \nSELECT SETVAL(s1, 99, 1, 0);\n+----------------------+\n| SETVAL(s1, 99, 1, 0) |\n+----------------------+\n| 99 |\n+----------------------+\n \nSELECT NEXTVAL(s1);\n+-------------+\n| NEXTVAL(s1) |\n+-------------+\n| 1 |\n+-------------+\n \nThe following statement returns NULL, as the given\nnext_value and round is smaller than the current value.\n \nSELECT SETVAL(s1, 99, 1, 0);\n+----------------------+\n| SETVAL(s1, 99, 1, 0) |\n+----------------------+\n| NULL |\n+----------------------+\n \nSELECT NEXTVAL(s1);\n+-------------+\n| NEXTVAL(s1) |\n+-------------+\n| 2 |\n+-------------+\n \nIncreasing the round from zero to 1 will allow next_value to\nbe returned.\n \nSELECT SETVAL(s1, 99, 1, 1);\n+----------------------+\n| SETVAL(s1, 99, 1, 1) |\n+----------------------+\n| 99 |\n+----------------------+\n \nSELECT NEXTVAL(s1);\n+-------------+\n| NEXTVAL(s1) |\n+-------------+\n| 1 |\n+-------------+\n \n\n\nURL: https://mariadb.com/kb/en/setval/', '', 'https://mariadb.com/kb/en/setval/'),
(696, 'JSON_ARRAY_APPEND', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nSyntax\n------ \nJSON_ARRAY_APPEND(json_doc, path, value[, path, value] ...)\n \nDescription\n----------- \nAppends values to the end of the specified arrays within a\nJSON document, returning the result, or NULL if any of the\narguments are NULL.\n \nEvaluation is performed from left to right, with the\nresulting document from the previous pair becoming the new\nvalue against which the next pair is evaluated.\n \nIf the json_doc is not a valid JSON document, or if any of\nthe paths are not valid, or contain a * or ** wildcard, an\nerror is returned.\n \nExamples\n-------- \nSET @json = \'[1, 2, [3, 4]]\';\n \nSELECT JSON_ARRAY_APPEND(@json, \'$[0]\', 5)\n+-------------------------------------+\n| JSON_ARRAY_APPEND(@json, \'$[0]\', 5) |\n+-------------------------------------+\n| [[1, 5], 2, [3, 4]] |\n+-------------------------------------+\n \nSELECT JSON_ARRAY_APPEND(@json, \'$[1]\', 6);\n+-------------------------------------+\n| JSON_ARRAY_APPEND(@json, \'$[1]\', 6) |\n+-------------------------------------+\n| [1, [2, 6], [3, 4]] |\n+-------------------------------------+\n \nSELECT JSON_ARRAY_APPEND(@json, \'$[1]\', 6, \'$[2]\', 7);\n+------------------------------------------------+\n| JSON_ARRAY_APPEND(@json, \'$[1]\', 6, \'$[2]\', 7) |\n+------------------------------------------------+\n| [1, [2, 6], [3, 4, 7]] |\n+------------------------------------------------+\n \nSELECT JSON_ARRAY_APPEND(@json, \'$\', 5);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@json, \'$\', 5) |\n+----------------------------------+\n| [1, 2, [3, 4], 5] |\n+----------------------------------+\n \nSET @json = \'{\"A\": 1, \"B\": [2], \"C\": [3, 4]}\';\n \nSELECT JSON_ARRAY_APPEND(@json, \'$.B\', 5);\n+------------------------------------+\n| JSON_ARRAY_APPEND(@json, \'$.B\', 5) |\n+------------------------------------+\n| {\"A\": 1, \"B\": [2, 5], \"C\": [3, 4]} |\n+------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_array_append/', '', 'https://mariadb.com/kb/en/json_array_append/'),
(697, 'JSON_ARRAY_INSERT', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nSyntax\n------ \nJSON_ARRAY_INSERT(json_doc, path, value[, path, value] ...)\n \nDescription\n----------- \nInserts a value into a JSON document, returning the modified\ndocument, or NULL if any of the arguments are NULL.\n \nEvaluation is performed from left to right, with the\nresulting document from the previous pair becoming the new\nvalue against which the next pair is evaluated.\n \nIf the json_doc is not a valid JSON document, or if any of\nthe paths are not valid, or contain a * or ** wildcard, an\nerror is returned.\n \nExamples\n-------- \nSET @json = \'[1, 2, [3, 4]]\';\n \nSELECT JSON_ARRAY_INSERT(@json, \'$[0]\', 5);\n+-------------------------------------+\n| JSON_ARRAY_INSERT(@json, \'$[0]\', 5) |\n+-------------------------------------+\n| [5, 1, 2, [3, 4]] |\n+-------------------------------------+\n \nSELECT JSON_ARRAY_INSERT(@json, \'$[1]\', 6);\n+-------------------------------------+\n| JSON_ARRAY_INSERT(@json, \'$[1]\', 6) |\n+-------------------------------------+\n| [1, 6, 2, [3, 4]] |\n+-------------------------------------+\n \nSELECT JSON_ARRAY_INSERT(@json, \'$[1]\', 6, \'$[2]\', 7);\n+------------------------------------------------+\n| JSON_ARRAY_INSERT(@json, \'$[1]\', 6, \'$[2]\', 7) |\n+------------------------------------------------+\n| [1, 6, 7, 2, [3, 4]] |\n+------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_array_insert/', '', 'https://mariadb.com/kb/en/json_array_insert/'),
(699, 'JSON_CONTAINS', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nSyntax\n------ \nJSON_CONTAINS(json_doc, val[, path])\n \nDescription\n----------- \nReturns whether or not the specified value is found in the\ngiven JSON document or, optionally, at the specified path\nwithin the document. Returns 1 if it does, 0 if not and NULL\nif any of the arguments are null. An error occurs if the\ndocument or path is not valid, or contains the * or **\nwildcards.\n \nExamples\n-------- \nSET @json = \'{\"A\": 0, \"B\": {\"C\": 1}, \"D\": 2}\';\n \nSELECT JSON_CONTAINS(@json, \'2\', \'$.A\');\n+----------------------------------+\n| JSON_CONTAINS(@json, \'2\', \'$.A\') |\n+----------------------------------+\n| 0 |\n+----------------------------------+\n \nSELECT JSON_CONTAINS(@json, \'2\', \'$.D\');\n+----------------------------------+\n| JSON_CONTAINS(@json, \'2\', \'$.D\') |\n+----------------------------------+\n| 1 |\n+----------------------------------+\n \nSELECT JSON_CONTAINS(@json, \'{\"C\": 1}\', \'$.A\');\n+-----------------------------------------+\n| JSON_CONTAINS(@json, \'{\"C\": 1}\', \'$.A\') |\n+-----------------------------------------+\n| 0 |\n+-----------------------------------------+\n \nSELECT JSON_CONTAINS(@json, \'{\"C\": 1}\', \'$.B\');\n+-----------------------------------------+\n| JSON_CONTAINS(@json, \'{\"C\": 1}\', \'$.B\') |\n+-----------------------------------------+\n| 1 |\n+-----------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_contains/', '', 'https://mariadb.com/kb/en/json_contains/'),
(700, 'JSON_CONTAINS_PATH', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nSyntax\n------ \nJSON_CONTAINS_PATH(json_doc, return_arg, path[, path] ...)\n \nDescription\n----------- \nIndicates whether the given JSON document contains data at\nthe specified path or paths. Returns 1 if it does, 0 if not\nand NULL if any of the arguments are null.\n \nThe return_arg can be one or all:\none - Returns 1 if at least one path exists within the JSON\ndocument. \nall - Returns 1 only if all paths exist within the JSON\ndocument.\n \nExamples\n-------- \nSET @json = \'{\"A\": 1, \"B\": [2], \"C\": [3, 4]}\';\n \nSELECT JSON_CONTAINS_PATH(@json, \'one\', \'$.A\', \'$.D\');\n+------------------------------------------------+\n| JSON_CONTAINS_PATH(@json, \'one\', \'$.A\', \'$.D\') |\n+------------------------------------------------+\n| 1 |\n+------------------------------------------------+\n1 row in set (0.00 sec)\n \nSELECT JSON_CONTAINS_PATH(@json, \'all\', \'$.A\', \'$.D\');\n+------------------------------------------------+\n| JSON_CONTAINS_PATH(@json, \'all\', \'$.A\', \'$.D\') |\n+------------------------------------------------+\n| 0 |\n+------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_contains_path/', '', 'https://mariadb.com/kb/en/json_contains_path/'),
(701, 'JSON_DEPTH', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nSyntax\n------ \nJSON_DEPTH(json_doc)\n \nDescription\n----------- \nReturns the maximum depth of the given JSON document, or\nNULL if the argument is null. An error will occur if the\nargument is an invalid JSON document.\nScalar values or empty arrays or objects have a depth of 1.\nArrays or objects that are not empty but contain only\nelements or member values of depth 1 will have a depth of 2.\nIn other cases, the depth will be greater than 2.\n \nExamples\n-------- \nSELECT JSON_DEPTH(\'[]\'), JSON_DEPTH(\'true\'),\nJSON_DEPTH(\'{}\');\n+------------------+--------------------+------------------+\n| JSON_DEPTH(\'[]\') | JSON_DEPTH(\'true\') |\nJSON_DEPTH(\'{}\') |\n+------------------+--------------------+------------------+\n| 1 | 1 | 1 |\n+------------------+--------------------+------------------+\n \nSELECT JSON_DEPTH(\'[1, 2, 3]\'), JSON_DEPTH(\'[[], {},\n[]]\');\n+-------------------------+----------------------------+\n| JSON_DEPTH(\'[1, 2, 3]\') | JSON_DEPTH(\'[[], {}, []]\') |\n+-------------------------+----------------------------+\n| 2 | 2 |\n+-------------------------+----------------------------+\n \nSELECT JSON_DEPTH(\'[1, 2, [3, 4, 5, 6], 7]\');\n+---------------------------------------+\n| JSON_DEPTH(\'[1, 2, [3, 4, 5, 6], 7]\') |\n+---------------------------------------+\n| 3 |\n+---------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_depth/', '', 'https://mariadb.com/kb/en/json_depth/'),
(703, 'JSON_EXISTS', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nSyntax\n------ \nDescription\n----------- \nDetermines whether a specified JSON value exists in the\ngiven data. Returns 1 if found, 0 if not, or NULL if any of\nthe inputs were NULL.\n \nExamples\n-------- \nSELECT JSON_EXISTS(\'{\"key1\":\"xxxx\", \"key2\":[1, 2,\n3]}\', \"$.key2\");\n+------------------------------------------------------------+\n| JSON_EXISTS(\'{\"key1\":\"xxxx\", \"key2\":[1, 2, 3]}\',\n\"$.key2\") |\n+------------------------------------------------------------+\n| 1 |\n+------------------------------------------------------------+\n \nSELECT JSON_EXISTS(\'{\"key1\":\"xxxx\", \"key2\":[1, 2,\n3]}\', \"$.key3\");\n+------------------------------------------------------------+\n| JSON_EXISTS(\'{\"key1\":\"xxxx\", \"key2\":[1, 2, 3]}\',\n\"$.key3\") |\n+------------------------------------------------------------+\n| 0 |\n+------------------------------------------------------------+\n \nSELECT JSON_EXISTS(\'{\"key1\":\"xxxx\", \"key2\":[1, 2,\n3]}\', \"$.key2[1]\");\n+---------------------------------------------------------------+\n| JSON_EXISTS(\'{\"key1\":\"xxxx\", \"key2\":[1, 2, 3]}\',\n\"$.key2[1]\") |\n+---------------------------------------------------------------+\n| 1 |\n+---------------------------------------------------------------+\n \nSELECT JSON_EXISTS(\'{\"key1\":\"xxxx\", \"key2\":[1, 2,\n3]}\', \"$.key2[10]\");\n+----------------------------------------------------------------+\n| JSON_EXISTS(\'{\"key1\":\"xxxx\", \"key2\":[1, 2, 3]}\',\n\"$.key2[10]\") |\n+----------------------------------------------------------------+\n| 0 |\n+----------------------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_exists/', '', 'https://mariadb.com/kb/en/json_exists/'),
(704, 'JSON_EXTRACT', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nSyntax\n------ \nJSON_EXTRACT(json_doc, path[, path] ...)\n \nDescription\n----------- \nExtracts data from a JSON document. The extracted data is\nselected from the parts matching the path arguments. Returns\nall matched values; either as a single matched value, or, if\nthe arguments could return multiple values, a result\nautowrapped as an array in the matching order.\n \nReturns NULL if no paths match or if any of the arguments\nare NULL. \n \nAn error will occur if any path argument is not a valid\npath, or if the json_doc argument is not a valid JSON\ndocument.\n \nExamples\n-------- \nSET @json = \'[1, 2, [3, 4]]\';\n \nSELECT JSON_EXTRACT(@json, \'$[1]\');\n+-----------------------------+\n| JSON_EXTRACT(@json, \'$[1]\') |\n+-----------------------------+\n| 2 |\n+-----------------------------+\n \nSELECT JSON_EXTRACT(@json, \'$[2]\');\n+-----------------------------+\n| JSON_EXTRACT(@json, \'$[2]\') |\n+-----------------------------+\n| [3, 4] |\n+-----------------------------+\n \nSELECT JSON_EXTRACT(@json, \'$[2][1]\');\n+--------------------------------+\n| JSON_EXTRACT(@json, \'$[2][1]\') |\n+--------------------------------+\n| 4 |\n+--------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_extract/', '', 'https://mariadb.com/kb/en/json_extract/'),
(705, 'JSON_INSERT', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nSyntax\n------ \nJSON_INSERT(json_doc, path, val[, path, val] ...)\n \nDescription\n----------- \nInserts data into a JSON document, returning the resulting\ndocument or NULL if any argument is null. \n \nAn error will occur if the JSON document is not invalid, or\nif any of the paths are invalid or contain a * or **\nwildcard.\n \nJSON_INSERT can only insert data while JSON_REPLACE can only\nupdate. JSON_SET can update or insert data. \n \nExamples\n-------- \nSET @json = \'{ \"A\": 0, \"B\": [1, 2]}\';\n \nSELECT JSON_INSERT(@json, \'$.C\', \'[3, 4]\');\n+--------------------------------------+\n| JSON_INSERT(@json, \'$.C\', \'[3, 4]\') |\n+--------------------------------------+\n| { \"A\": 0, \"B\": [1, 2], \"C\":\"[3, 4]\"} |\n+--------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_insert/', '', 'https://mariadb.com/kb/en/json_insert/'),
(706, 'JSON_KEYS', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nSyntax\n------ \nJSON_KEYS(json_doc[, path])\n \nDescription\n----------- \nReturns the keys as a JSON array from the top-level value of\na JSON object or, if the optional path argument is provided,\nthe top-level keys from the path. \n \nExcludes keys from nested sub-objects in the top level\nvalue. The resulting array will be empty if the selected\nobject is empty.\n \nReturns NULL if any of the arguments are null, a given path\ndoes not locate an object, or if the json_doc argument is\nnot an object.\n \nAn error will occur if JSON document is invalid, the path is\ninvalid or if the path contains a * or ** wildcard.\n \nExamples\n-------- \nSELECT JSON_KEYS(\'{\"A\": 1, \"B\": {\"C\": 2}}\');\n+--------------------------------------+\n| JSON_KEYS(\'{\"A\": 1, \"B\": {\"C\": 2}}\') |\n+--------------------------------------+\n| [\"A\", \"B\"] |\n+--------------------------------------+\n \nSELECT JSON_KEYS(\'{\"A\": 1, \"B\": 2, \"C\": {\"D\":\n3}}\', \'$.C\');\n+-----------------------------------------------------+\n| JSON_KEYS(\'{\"A\": 1, \"B\": 2, \"C\": {\"D\": 3}}\',\n\'$.C\') |\n+-----------------------------------------------------+\n| [\"D\"] |\n+-----------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_keys/', '', 'https://mariadb.com/kb/en/json_keys/'),
(707, 'JSON_LENGTH', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nSyntax\n------ \nJSON_LENGTH(json_doc[, path])\n \nDescription\n----------- \nReturns the length of a JSON document, or, if the optional\npath argument is given, the length of the value within the\ndocument specified by the path. \n \nReturns NULL if any of the arguments argument are null or\nthe path argument does not identify a value in the document.\n\n \nAn error will occur if the JSON document is invalid, the\npath is invalid or if the path contains a * or ** wildcard.\n \nLength will be determined as follow:\nA scalar\'s length is always 1.\nIf an array, the number of elements in the array.\nIf an object, the number of members in the object.\n \nThe length of nested arrays or objects are not counted.\n \nExamples\n-------- \n\n \n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_length/', '', 'https://mariadb.com/kb/en/json_length/'),
(709, 'JSON_MERGE', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nSyntax\n------ \nJSON_MERGE(json_doc, json_doc[, json_doc] ...)\n \nDescription\n----------- \nMerges the given JSON documents.\n \nReturns the merged result,or NULL if any argument is NULL.\n \nAn error occurs if any of the arguments are not valid JSON\ndocuments.\n \nJSON_MERGE has been deprecated since MariaDB 10.2.25,\nMariaDB 10.3.16 and MariaDB 10.4.5. JSON_MERGE_PATCH is an\nRFC 7396-compliant replacement, and JSON_MERGE_PRESERVE is a\nsynonym.\n \nExample\n \nSET @json1 = \'[1, 2]\';\n \nSET @json2 = \'[3, 4]\';\n \nSELECT JSON_MERGE(@json1,@json2);\n+---------------------------+\n| JSON_MERGE(@json1,@json2) |\n+---------------------------+\n| [1, 2, 3, 4] |\n+---------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/json_merge/', '', 'https://mariadb.com/kb/en/json_merge/'),
(710, 'JSON_MERGE_PATCH', 41, 'JSON_MERGE_PATCH was introduced in MariaDB 10.2.25, MariaDB\n10.3.16 and MariaDB 10.4.5.\n \nSyntax\n------ \nJSON_MERGE_PATCH(json_doc, json_doc[, json_doc] ...)\n \nDescription\n----------- \nMerges the given JSON documents, returning the merged\nresult, or NULL if any argument is NULL.\n \nJSON_MERGE_PATCH is an RFC 7396-compliant replacement for\nJSON_MERGE, which has been deprecated.\n \nExample\n \nSET @json1 = \'[1, 2]\';\n \nSET @json2 = \'[2, 3]\';\n \nSELECT\nJSON_MERGE_PATCH(@json1,@json2),JSON_MERGE_PRESERVE(@json1,@json2);\n+---------------------------------+------------------------------------+\n| JSON_MERGE_PATCH(@json1,@json2) |\nJSON_MERGE_PRESERVE(@json1,@json2) |\n+---------------------------------+------------------------------------+\n| [2, 3] | [1, 2, 2, 3] |\n+---------------------------------+------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_merge_patch/', '', 'https://mariadb.com/kb/en/json_merge_patch/'),
(711, 'JSON_MERGE_PRESERVE', 41, 'JSON_MERGE_PRESERVE was introduced in MariaDB 10.2.25,\nMariaDB 10.3.16 and MariaDB 10.4.5.\n \nSyntax\n------ \nJSON_MERGE_PRESERVE(json_doc, json_doc[, json_doc] ...)\n \nDescription\n----------- \nMerges the given JSON documents, returning the merged\nresult, or NULL if any argument is NULL.\n \nJSON_MERGE_PRESERVE was introduced in MariaDB 10.2.25,\nMariaDB 10.3.16 and MariaDB 10.4.5 as a synonym for\nJSON_MERGE, which has been deprecated.\n \nExample\n \nSET @json1 = \'[1, 2]\';\n \nSET @json2 = \'[2, 3]\';\n \nSELECT\nJSON_MERGE_PATCH(@json1,@json2),JSON_MERGE_PRESERVE(@json1,@json2);\n+---------------------------------+------------------------------------+\n| JSON_MERGE_PATCH(@json1,@json2) |\nJSON_MERGE_PRESERVE(@json1,@json2) |\n+---------------------------------+------------------------------------+\n| [2, 3] | [1, 2, 2, 3] |\n+---------------------------------+------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/json_merge_preserve/', '', 'https://mariadb.com/kb/en/json_merge_preserve/'),
(713, 'JSON_QUERY', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nSyntax\n------ \nJSON_QUERY(json_doc, path)\n \nDescription\n----------- \nGiven a JSON document, returns an object or array specified\nby the path. Returns NULL if not given a valid JSON\ndocument, or if there is no match.\n \nExamples\n-------- \nselect json_query(\'{\"key1\":{\"a\":1, \"b\":[1,2]}}\',\n\'$.key1\');\n+-----------------------------------------------------+\n| json_query(\'{\"key1\":{\"a\":1, \"b\":[1,2]}}\',\n\'$.key1\') |\n+-----------------------------------------------------+\n| {\"a\":1, \"b\":[1,2]} |\n+-----------------------------------------------------+\n \nselect json_query(\'{\"key1\":123, \"key1\": [1,2,3]}\',\n\'$.key1\');\n+-------------------------------------------------------+\n| json_query(\'{\"key1\":123, \"key1\": [1,2,3]}\',\n\'$.key1\') |\n+-------------------------------------------------------+\n| [1,2,3] |\n+-------------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_query/', '', 'https://mariadb.com/kb/en/json_query/'),
(714, 'JSON_QUOTE', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nSyntax\n------ \nJSON_QUOTE(json_value)\n \nDescription\n----------- \nQuotes a string as a JSON value, usually for producing valid\nJSON string literals for inclusion in JSON documents. Wraps\nthe string with double quote characters and escapes interior\nquotes and other special characters, returning a utf8mb4\nstring. \n \nReturns NULL if the argument is NULL.\n \nExamples\n-------- \nSELECT JSON_QUOTE(\'A\'), JSON_QUOTE(\"B\"),\nJSON_QUOTE(\'\"C\"\');\n+-----------------+-----------------+-------------------+\n| JSON_QUOTE(\'A\') | JSON_QUOTE(\"B\") |\nJSON_QUOTE(\'\"C\"\') |\n+-----------------+-----------------+-------------------+\n| \"A\" | \"B\" | \"\\\"C\\\"\" |\n+-----------------+-----------------+-------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_quote/', '', 'https://mariadb.com/kb/en/json_quote/'),
(715, 'JSON_REMOVE', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nSyntax\n------ \nJSON_REMOVE(json_doc, path[, path] ...)\n \nDescription\n----------- \nRemoves data from a JSON document returning the result, or\nNULL if any of the arguments are null. If the element does\nnot exist in the document, no changes are made.\n \nAn error will occur if JSON document is invalid, the path is\ninvalid or if the path contains a * or ** wildcard.\n \nPath arguments are evaluated from left to right, with the\nresult from the earlier evaluation being used as the value\nfor the next.\n \nExamples\n-------- \nSELECT JSON_REMOVE(\'{\"A\": 1, \"B\": 2, \"C\": {\"D\":\n3}}\', \'$.C\');\n+-------------------------------------------------------+\n| JSON_REMOVE(\'{\"A\": 1, \"B\": 2, \"C\": {\"D\": 3}}\',\n\'$.C\') |\n+-------------------------------------------------------+\n| {\"A\": 1, \"B\": 2} |\n+-------------------------------------------------------+\n \nSELECT JSON_REMOVE(\'[\"A\", \"B\", [\"C\", \"D\"],\n\"E\"]\', \'$[1]\');\n+----------------------------------------------------+\n| JSON_REMOVE(\'[\"A\", \"B\", [\"C\", \"D\"], \"E\"]\',\n\'$[1]\') |\n+----------------------------------------------------+\n| [\"A\", [\"C\", \"D\"], \"E\"] |\n+----------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_remove/', '', 'https://mariadb.com/kb/en/json_remove/'),
(716, 'JSON_REPLACE', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nSyntax\n------ \nJSON_REPLACE(json_doc, path, val[, path, val] ...)\n \nDescription\n----------- \nReplaces existing values in a JSON document, returning the\nresult, or NULL if any of the arguments are NULL. \n \nAn error will occur if the JSON document is invalid, the\npath is invalid or if the path contains a * or ** wildcard.\n \nPaths and values are evaluated from left to right, with the\nresult from the earlier evaluation being used as the value\nfor the next.\n \nJSON_REPLACE can only update data, while JSON_INSERT can\nonly insert. JSON_SET can update or insert data. \n \nExamples\n-------- \nSELECT JSON_REPLACE(\'{ \"A\": 1, \"B\": [2, 3]}\',\n\'$.B[1]\', 4);\n+-----------------------------------------------------+\n| JSON_REPLACE(\'{ \"A\": 1, \"B\": [2, 3]}\', \'$.B[1]\',\n4) |\n+-----------------------------------------------------+\n| { \"A\": 1, \"B\": [2, 4]} |\n+-----------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_replace/', '', 'https://mariadb.com/kb/en/json_replace/'),
(717, 'JSON_SEARCH', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nSyntax\n------ \nJSON_SEARCH(json_doc, return_arg, search_str[, escape_char[,\npath] ...])\n \nDescription\n----------- \nReturns the path to the given string within a JSON document,\nor NULL if any of json_doc, search_str or a path argument is\nNULL; if the search string is not found, or if no path\nexists within the document. \n \nA warning will occur if the JSON document is not valid, any\nof the path arguments are not valid, if return_arg is\nneither one nor all, or if the escape character is not a\nconstant. NULL will be returned.\n \nreturn_arg can be one of two values:\n\'one: Terminates after finding the first match, so will\nreturn one path string. If there is more than one match, it\nis undefined which is considered first.\nall: Returns all matching path strings, without duplicates.\nMultiple strings are autowrapped as an array. The order is\nundefined.\n \nExamples\n-------- \nSET @json = \'[\"A\", [{\"B\": \"1\"}], {\"C\":\"AB\"},\n{\"D\":\"BC\"}]\';\n \nSELECT JSON_SEARCH(@json, \'one\', \'AB\');\n+---------------------------------+\n| JSON_SEARCH(@json, \'one\', \'AB\') |\n+---------------------------------+\n| \"$[2].C\" |\n+---------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_search/', '', 'https://mariadb.com/kb/en/json_search/'),
(719, 'JSON_TYPE', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nSyntax\n------ \nJSON_TYPE(json_val)\n \nDescription\n----------- \nReturns the type of a JSON value, or NULL if the argument is\nnull.\n \nAn error will occur if the argument is an invalid JSON\nvalue.\n \nThe following is a complete list of the possible return\ntypes:\n \nReturn type | Value | \n \nARRAY | JSON array | \n \nBIT | MariaDB BIT scalar | \n \nBLOB | MariaDB binary types (BINARY, VARBINARY or BLOB) | \n \nBOOLEAN | JSON true/false literals | \n \nDATE | MariaDB DATE scalar | \n \nDATETIME | MariaDB DATETIME or TIMESTAMP scalar | \n \nDECIMAL | MariaDB DECIMAL or NUMERIC scalar | \n \nDOUBLE | MariaDB DOUBLE FLOAT scalar | \n \nINTEGER | MariaDB integer types (TINYINT, SMALLINT,\nMEDIUMINT, INT or BIGINT) | \n \nNULL | JSON null literal or NULL argument | \n \nOBJECT | JSON object | \n \nOPAQUE | Any valid JSON value that is not one of the other\ntypes. | \n \nSTRING | MariaDB character types (CHAR, VARCHAR, TEXT, ENUM\nor SET) | \n \nTIME | MariaDB TIME scalar | \n \nExamples\n-------- \nSELECT JSON_TYPE(\'{\"A\": 1, \"B\": 2, \"C\": 3}\');\n+---------------------------------------+\n| JSON_TYPE(\'{\"A\": 1, \"B\": 2, \"C\": 3}\') |\n+---------------------------------------+\n| OBJECT |\n+---------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_type/', '', 'https://mariadb.com/kb/en/json_type/'),
(720, 'JSON_UNQUOTE', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nSyntax\n------ \nJSON_UNQUOTE(val)\n \nDescription\n----------- \nUnquotes a JSON value, returning a string, or NULL if the\nargument is null. \n \nAn error will occur if the given value begins and ends with\ndouble quotes and is an invalid JSON string literal.\n \nCertain character sequences have special meanings within a\nstring. Usually, a backspace is ignored, but the escape\nsequences in the table below are recognised by MariaDB,\nunless the SQL Mode is set to NO_BACKSLASH_ESCAPES SQL.\n \nEscape sequence | Character | \n \n\\\" | Double quote (\") | \n \n\\b | Backspace | \n \n\\f | Formfeed | \n \n\\n | Newline (linefeed) | \n \n\\r | Carriage return | \n \n\\t | Tab | \n \n\\\\ | Backslash (\\) | \n \n\\uXXXX | UTF-8 bytes for Unicode value XXXX | \n \nExamples\n-------- \nSELECT JSON_UNQUOTE(\'\"Monty\"\');\n+-------------------------+\n| JSON_UNQUOTE(\'\"Monty\"\') |\n+-------------------------+\n| Monty |\n+-------------------------+\n \nWith the default SQL Mode:\n \nSELECT JSON_UNQUOTE(\'Si\\bng\\ting\');\n+-----------------------------+\n| JSON_UNQUOTE(\'Si\\bng\\ting\') |\n+-----------------------------+\n| Sng ing |\n+-----------------------------+\n \nSetting NO_BACKSLASH_ESCAPES:\n \nSET @@sql_mode = \'NO_BACKSLASH_ESCAPES\';\n \nSELECT JSON_UNQUOTE(\'Si\\bng\\ting\');\n+-----------------------------+\n| JSON_UNQUOTE(\'Si\\bng\\ting\') |\n+-----------------------------+\n| Si\\bng\\ting |\n+-----------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_unquote/', '', 'https://mariadb.com/kb/en/json_unquote/'),
(721, 'JSON_VALID', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nSyntax\n------ \nJSON_VALID(value)\n \nDescription\n----------- \nIndicates whether the given value is a valid JSON document\nor not. Returns 1 if valid, 0 if not, and NULL if the\nargument is NULL.\n \nFrom MariaDB 10.4.3, the JSON_VALID function is\nautomatically used as a CHECK constraint for the JSON data\ntype alias in order to ensure that a valid json document is\ninserted. \n \nExamples\n-------- \nSELECT JSON_VALID(\'{\"id\": 1, \"name\": \"Monty\"}\');\n+------------------------------------------+\n| JSON_VALID(\'{\"id\": 1, \"name\": \"Monty\"}\') |\n+------------------------------------------+\n| 1 |\n+------------------------------------------+\n \nSELECT JSON_VALID(\'{\"id\": 1, \"name\": \"Monty\",\n\"oddfield\"}\');\n+------------------------------------------------------+\n| JSON_VALID(\'{\"id\": 1, \"name\": \"Monty\",\n\"oddfield\"}\') |\n+------------------------------------------------------+\n| 0 |\n+------------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_valid/', '', 'https://mariadb.com/kb/en/json_valid/'),
(722, 'JSON_VALUE', 41, 'JSON functions were added in MariaDB 10.2.3.\n \nSyntax\n------ \nJSON_VALUE(json_doc, path)\n \nDescription\n----------- \nGiven a JSON document, returns the scalar specified by the\npath. Returns NULL if not given a valid JSON document, or if\nthere is no match.\n \nExamples\n-------- \nselect json_value(\'{\"key1\":123}\', \'$.key1\');\n+--------------------------------------+\n| json_value(\'{\"key1\":123}\', \'$.key1\') |\n+--------------------------------------+\n| 123 |\n+--------------------------------------+\n \nselect json_value(\'{\"key1\": [1,2,3], \"key1\":123}\',\n\'$.key1\');\n+-------------------------------------------------------+\n| json_value(\'{\"key1\": [1,2,3], \"key1\":123}\',\n\'$.key1\') |\n+-------------------------------------------------------+\n| 123 |\n+-------------------------------------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/json_value/', '', 'https://mariadb.com/kb/en/json_value/'),
(727, 'DENSE_RANK', 42, 'The DENSE_RANK() function was first introduced with window\nfunctions in MariaDB 10.2.0.\n \nSyntax\n------ \nDENSE_RANK() OVER (\n [ PARTITION BY partition_expression ]\n [ ORDER BY order_list ]\n) \n \nDescription\n----------- \nDENSE_RANK() is a window function that displays the number\nof a given row, starting at one and following the ORDER BY\nsequence of the window function, with identical values\nreceiving the same result. Unlike the RANK() function, there\nare no skipped values if the preceding results are\nidentical. It is also similar to the ROW_NUMBER() function\nexcept that in that function, identical values will receive\na different row number for each result.\n \nExamples\n-------- \nThe distinction between DENSE_RANK(), RANK() and\nROW_NUMBER():\n \nCREATE TABLE student(course VARCHAR(10), mark int, name\nvarchar(10));\n \nINSERT INTO student VALUES \n (\'Maths\', 60, \'Thulile\'),\n (\'Maths\', 60, \'Pritha\'),\n (\'Maths\', 70, \'Voitto\'),\n (\'Maths\', 55, \'Chun\'),\n (\'Biology\', 60, \'Bilal\'),\n (\'Biology\', 70, \'Roger\');\n \nSELECT \n RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS\nrank, \n DENSE_RANK() OVER (PARTITION BY course ORDER BY mark DESC)\nAS dense_rank, \n ROW_NUMBER() OVER (PARTITION BY course ORDER BY mark DESC)\nAS row_num, \n course, mark, name \nFROM student ORDER BY course, mark DESC;\n \n+------+------------+---------+---------+------+---------+\n| rank | dense_rank | row_num | course | mark | name |\n+------+------------+---------+---------+------+---------+\n| 1 | 1 | 1 | Biology | 70 | Roger |\n| 2 | 2 | 2 | Biology | 60 | Bilal |\n| 1 | 1 | 1 | Maths | 70 | Voitto |\n| 2 | 2 | 2 | Maths | 60 | Thulile |\n| 2 | 2 | 3 | Maths | 60 | Pritha |\n| 4 | 3 | 4 | Maths | 55 | Chun |\n+------+------------+---------+---------+------+---------+\n \n\n\nURL: https://mariadb.com/kb/en/dense_rank/', '', 'https://mariadb.com/kb/en/dense_rank/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(723, 'Window Functions Overview', 42, 'Window functions were introduced in MariaDB 10.2.\n \nIntroduction\n \nWindow functions allow calculations to be performed across a\nset of rows related to the current row.\n \nSyntax\n------ \nfunction (expression) OVER (\n [ PARTITION BY expression_list ]\n [ ORDER BY order_list [ frame_clause ] ] ) \n \nfunction:\n A valid window function\n \nexpression_list:\n expression | column_name [, expr_list ]\n \norder_list:\n expression | column_name [ ASC | DESC ] \n [, ... ]\n \nframe_clause:\n {ROWS | RANGE} {frame_border | BETWEEN frame_border AND\nframe_border}\n \nframe_border:\n | UNBOUNDED PRECEDING\n | UNBOUNDED FOLLOWING\n | CURRENT ROW\n | expr PRECEDING\n | expr FOLLOWING\n \nDescription\n----------- \nIn some ways, window functions are similar to aggregate\nfunctions in that they perform calculations across a set of\nrows. However, unlike aggregate functions, the output is not\ngrouped into a single row. \n \nNon-aggregate window functions include \nCUME_DIST\nDENSE_RANK\nFIRST_VALUE\nLAG\nLAST_VALUE\nLEAD\nMEDIAN\nNTH_VALUE\nNTILE\nPERCENT_RANK\nPERCENTILE_CONT\nPERCENTILE_DISC\nRANK, ROW_NUMBER\n \nAggregate functions that can also be used as window\nfunctions include \nAVG\nBIT_AND\nBIT_OR\nBIT_XOR\nCOUNT\nMAX\nMIN\nSTD\nSTDDEV\nSTDDEV_POP\nSTDDEV_SAMP\nSUM\nVAR_POP\nVAR_SAMP\nVARIANCE\n \nWindow function queries are characterised by the OVER\nkeyword, following which the set of rows used for the\ncalculation is specified. By default, the set of rows used\nfor the calculation (the \"window) is the entire dataset,\nwhich can be ordered with the ORDER BY clause. The PARTITION\nBY clause is used to reduce the window to a particular group\nwithin the dataset.\n \nFor example, given the following data:\n \nCREATE TABLE student (name CHAR(10), test CHAR(10), score\nTINYINT); \n \nINSERT INTO student VALUES \n (\'Chun\', \'SQL\', 75), (\'Chun\', \'Tuning\', 73), \n (\'Esben\', \'SQL\', 43), (\'Esben\', \'Tuning\', 31), \n (\'Kaolin\', \'SQL\', 56), (\'Kaolin\', \'Tuning\', 88), \n (\'Tatiana\', \'SQL\', 87), (\'Tatiana\', \'Tuning\', 83);\n \nthe following two queries return the average partitioned by\ntest and by name respectively:\n \nSELECT name, test, score, AVG(score) OVER (PARTITION BY\ntest) \n AS average_by_test FROM student;\n \n+---------+--------+-------+-----------------+\n| name | test | score | average_by_test |\n+---------+--------+-------+-----------------+\n| Chun | SQL | 75 | 65.2500 |\n| Chun | Tuning | 73 | 68.7500 |\n| Esben | SQL | 43 | 65.2500 |\n| Esben | Tuning | 31 | 68.7500 |\n| Kaolin | SQL | 56 | 65.2500 |\n| Kaolin | Tuning | 88 | 68.7500 |\n| Tatiana | SQL | 87 | 65.2500 |\n| Tatiana | Tuning | 83 | 68.7500 |\n+---------+--------+-------+-----------------+\n \nSELECT name, test, score, AVG(score) OVER (PARTITION BY\nname) \n AS average_by_name FROM student;\n \n+---------+--------+-------+-----------------+\n| name | test | score | average_by_name |\n+---------+--------+-------+-----------------+\n| Chun | SQL | 75 | 74.0000 |\n| Chun | Tuning | 73 | 74.0000 |\n| Esben | SQL | 43 | 37.0000 |\n| Esben | Tuning | 31 | 37.0000 |\n| Kaolin | SQL | 56 | 72.0000 |\n| Kaolin | Tuning | 88 | 72.0000 |\n| Tatiana | SQL | 87 | 85.0000 |\n| Tatiana | Tuning | 83 | 85.0000 |\n+---------+--------+-------+-----------------+\n \nIt is also possible to specify which rows to include for the\nwindow function (for example, the current row and all\npreceding rows). See Window Frames for more details.\n \nScope\n \nWindow functions were introduced in SQL:2003, and their\ndefinition was expanded in subsequent versions of the\nstandard. The last expansion was in the latest version of\nthe standard, SQL:2011. \n \nMost database products support a subset of the standard,\nthey implement some functions defined as late as in\nSQL:2011, and at the same time leave some parts of SQL:2008\nunimplemented.\n \nMariaDB:\nSupports ROWS and RANGE-type frames\nAll kinds of frame bounds are supported, including RANGE\nPRECEDING|FOLLOWING n frame bounds (unlike PostgreSQL or MS\nSQL Server)\nDoes not yet support DATE[TIME] datatype and arithmetic for\nRANGE-type frames (MDEV-9727)\n \nDoes not support GROUPS-type frames (it seems that no\npopular database supports it, either)\n \nDoes not support frame exclusion (no other database seems to\nsupport it, either) (MDEV-9724)\nDoes not support explicit NULLS FIRST or NULLS LAST.\nDoes not support nested navigation in window functions (this\nis VALUE_OF(expr AT row_marker [, default_value) syntax)\n \nThe following window functions are supported:\n\"Streamable\" window functions: ROW_NUMBER, RANK,\nDENSE_RANK, \nWindow functions that can be streamed once the number of\nrows in partition is known: PERCENT_RANK, CUME_DIST, NTILE\n \nAggregate functions that are currently supported as window\nfunctions are: COUNT, SUM, AVG, BIT_OR, BIT_AND, BIT_XOR.\nAggregate functions with the DISTINCT specifier (e.g. COUNT(\nDISTINCT x)) are not supported as window functions.\n \nLinks\n \nMDEV-6115 is the main jira task for window functions\ndevelopment. Other tasks are are attached as sub-tasks\nbb-10.2-mdev9543 is the feature tree for window functions.\nDevelopment is ongoing, and this tree has the newest\nchanges.\nTestcases are in mysql-test/t/win*.test\n \nExamples\n-------- \nGiven the following sample data:\n \nCREATE TABLE users (\n email VARCHAR(30), \n first_name VARCHAR(30), \n last_name VARCHAR(30), \n account_type VARCHAR(30)\n);\n \nINSERT INTO users VALUES \n (\'admin@boss.org\', \'Admin\', \'Boss\', \'admin\'), \n (\'bob.carlsen@foo.bar\', \'Bob\', \'Carlsen\',\n\'regular\'),\n (\'eddie.stevens@data.org\', \'Eddie\', \'Stevens\',\n\'regular\'),\n (\'john.smith@xyz.org\', \'John\', \'Smith\', \'regular\'),\n\n (\'root@boss.org\', \'Root\', \'Chief\', \'admin\')\n \nFirst, let\'s order the records by email alphabetically,\ngiving each an ascending rnum value starting with 1. This\nwill make use of the ROW_NUMBER window function:\n \nSELECT row_number() OVER (ORDER BY email) AS rnum,\n email, first_name, last_name, account_type\nFROM users ORDER BY email;\n \n+------+------------------------+------------+-----------+--------------+\n| rnum | email | first_name | last_name | account_type |\n+------+------------------------+------------+-----------+--------------+\n| 1 | admin@boss.org | Admin | Boss | admin |\n| 2 | bob.carlsen@foo.bar | Bob | Carlsen | regular |\n| 3 | eddie.stevens@data.org | Eddie | Stevens | regular |\n| 4 | john.smith@xyz.org | John | Smith | regular |\n| 5 | root@boss.org | Root | Chief | admin |\n+------+------------------------+------------+-----------+--------------\n \nWe can generate separate sequences based on account type,\nusing the PARTITION BY clause:\n \nSELECT row_number() OVER (PARTITION BY account_type ORDER BY\nemail) AS rnum, \n email, first_name, last_name, account_type \nFROM users ORDER BY account_type,email;\n \n+------+------------------------+------------+-----------+--------------+\n| rnum | email | first_name | last_name | account_type |\n+------+------------------------+------------+-----------+--------------+\n| 1 | admin@boss.org | Admin | Boss | admin |\n| 2 | root@boss.org | Root | Chief | admin |\n| 1 | bob.carlsen@foo.bar | Bob | Carlsen | regular |\n| 2 | eddie.stevens@data.org | Eddie | Stevens | regular |\n| 3 | john.smith@xyz.org | John | Smith | regular |\n+------+------------------------+------------+-----------+--------------+\n \nGiven the following structure and data, we want to find the\ntop 5 salaries from each department. \n \nCREATE TABLE employee_salaries (dept VARCHAR(20), name\nVARCHAR(20), salary INT(11));\n \nINSERT INTO employee_salaries VALUES\n(\'Engineering\', \'Dharma\', 3500),\n(\'Engineering\', \'Bình\', 3000),\n(\'Engineering\', \'Adalynn\', 2800),\n(\'Engineering\', \'Samuel\', 2500),\n(\'Engineering\', \'Cveta\', 2200),\n(\'Engineering\', \'Ebele\', 1800),\n(\'Sales\', \'Carbry\', 500),\n(\'Sales\', \'Clytemnestra\', 400),\n(\'Sales\', \'Juraj\', 300),\n(\'Sales\', \'Kalpana\', 300),\n(\'Sales\', \'Svantepolk\', 250),\n(\'Sales\', \'Angelo\', 200);\n \nWe could do this without using window functions, as follows:\n \nselect dept, name, salary\nfrom employee_salaries as t1\nwhere (select count(t2.salary)\n from employee_salaries as t2\n where t1.name != t2.name and\n t1.dept = t2.dept and\n t2.salary > t1.salary) \n\nURL:\nhttps://mariadb.com/kb/en/library/window-functions-overview/', '', 'https://mariadb.com/kb/en/library/window-functions-overview/'),
(725, 'Window Frames', 42, 'Window functions were first introduced in MariaDB 10.2.0.\n \nSyntax\n------ \nframe_clause:\n {ROWS | RANGE} {frame_border | BETWEEN frame_border AND\nframe_border}\n \nframe_border:\n | UNBOUNDED PRECEDING\n | UNBOUNDED FOLLOWING\n | CURRENT ROW\n | expr PRECEDING\n | expr FOLLOWING\n \nDescription\n----------- \nA basic overview of window functions is described in Window\nFunctions Overview. Window frames expand this functionality\nby allowing the function to include a specified a number of\nrows around the current row.\n \nThese include:\nAll rows before the current row (UNBOUNDED PRECEDING), for\nexample RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\nAll rows after the current row (UNBOUNDED FOLLOWING), for\nexample RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING\nA set number of rows before the current row (expr PRECEDING)\nfor example RANGE BETWEEN 6 PRECEDING AND CURRENT ROW\nA set number of rows after the current row (expr PRECEDING\nAND expr FOLLOWING) for example RANGE BETWEEN CURRENT ROW\nAND 2 FOLLOWING\nA specified number of rows both before and after the current\nrow, for example RANGE BETWEEN 6 PRECEDING AND 3 FOLLOWING \n \nThe following functions operate on window frames:\nAVG\nBIT_AND\nBIT_OR\nBIT_XOR\nCOUNT\nLEAD\nMAX\nMIN\nNTILE\nSTD\nSTDDEV\nSTDDEV_POP\nSTDDEV_SAMP\nSUM\nVAR_POP\nVAR_SAMP\nVARIANCE\n \nWindow frames are determined by the frame_clause in the\nwindow function request. \n \nTake the following example:\n \nCREATE TABLE `student_test` (\n name char(10),\n test char(10),\n score tinyint(4)\n);\n \nINSERT INTO student_test VALUES \n (\'Chun\', \'SQL\', 75), (\'Chun\', \'Tuning\', 73), \n (\'Esben\', \'SQL\', 43), (\'Esben\', \'Tuning\', 31), \n (\'Kaolin\', \'SQL\', 56), (\'Kaolin\', \'Tuning\', 88), \n (\'Tatiana\', \'SQL\', 87);\n \nSELECT name, test, score, SUM(score) \n OVER () AS total_score \n FROM student_test;\n \n+---------+--------+-------+-------------+\n| name | test | score | total_score |\n+---------+--------+-------+-------------+\n| Chun | SQL | 75 | 453 |\n| Chun | Tuning | 73 | 453 |\n| Esben | SQL | 43 | 453 |\n| Esben | Tuning | 31 | 453 |\n| Kaolin | SQL | 56 | 453 |\n| Kaolin | Tuning | 88 | 453 |\n| Tatiana | SQL | 87 | 453 |\n+---------+--------+-------+-------------+\n \nBy not specifying an OVER condition, the SUM function is run\nover the entire dataset. However, if we specify an ORDER BY\ncondition based on score (and order the entire result in the\nsame way for clarity), the following result is returned:\n \nSELECT name, test, score, SUM(score) \n OVER (ORDER BY score) AS total_score \n FROM student_test ORDER BY score;\n \n+---------+--------+-------+-------------+\n| name | test | score | total_score |\n+---------+--------+-------+-------------+\n| Esben | Tuning | 31 | 31 |\n| Esben | SQL | 43 | 74 |\n| Kaolin | SQL | 56 | 130 |\n| Chun | Tuning | 73 | 203 |\n| Chun | SQL | 75 | 278 |\n| Tatiana | SQL | 87 | 365 |\n| Kaolin | Tuning | 88 | 453 |\n+---------+--------+-------+-------------+\n \nThe total_score column represents a running total of the\ncurrent row, and all previous rows. The window frame in this\nexample expands as the function proceeds.\n \nThe above query makes use of the default to define the\nwindow frame. It could be written explicitly as follows:\n \nSELECT name, test, score, SUM(score) \n OVER (ORDER BY score RANGE BETWEEN UNBOUNDED PRECEDING AND\nCURRENT ROW) AS total_score \n FROM student_test ORDER BY score;\n \n+---------+--------+-------+-------------+\n| name | test | score | total_score |\n+---------+--------+-------+-------------+\n| Esben | Tuning | 31 | 31 |\n| Esben | SQL | 43 | 74 |\n| Kaolin | SQL | 56 | 130 |\n| Chun | Tuning | 73 | 203 |\n| Chun | SQL | 75 | 278 |\n| Tatiana | SQL | 87 | 365 |\n| Kaolin | Tuning | 88 | 453 |\n+---------+--------+-------+-------------+\n \nLet\'s look at some alternatives:\n \nFirstly, applying the window function to the current row and\nall following rows can be done with the use of UNBOUNDED\nFOLLOWING:\n \nSELECT name, test, score, SUM(score) \n OVER (ORDER BY score RANGE BETWEEN CURRENT ROW AND\nUNBOUNDED FOLLOWING) AS total_score \n FROM student_test ORDER BY score;\n \n+---------+--------+-------+-------------+\n| name | test | score | total_score |\n+---------+--------+-------+-------------+\n| Esben | Tuning | 31 | 453 |\n| Esben | SQL | 43 | 422 |\n| Kaolin | SQL | 56 | 379 |\n| Chun | Tuning | 73 | 323 |\n| Chun | SQL | 75 | 250 |\n| Tatiana | SQL | 87 | 175 |\n| Kaolin | Tuning | 88 | 88 |\n+---------+--------+-------+-------------+\n \nIt\'s possible to specify a number of rows, rather than the\nentire unbounded following or preceding set. The following\nexample takes the current row, as well as the previous row:\n \nSELECT name, test, score, SUM(score) \n OVER (ORDER BY score ROWS BETWEEN 1 PRECEDING AND CURRENT\nROW) AS total_score \n FROM student_test ORDER BY score;\n \n+---------+--------+-------+-------------+\n| name | test | score | total_score |\n+---------+--------+-------+-------------+\n| Esben | Tuning | 31 | 31 |\n| Esben | SQL | 43 | 74 |\n| Kaolin | SQL | 56 | 99 |\n| Chun | Tuning | 73 | 129 |\n| Chun | SQL | 75 | 148 |\n| Tatiana | SQL | 87 | 162 |\n| Kaolin | Tuning | 88 | 175 |\n+---------+--------+-------+-------------+\n \nThe current row and the following row:\n \nSELECT name, test, score, SUM(score) \n OVER (ORDER BY score ROWS BETWEEN 1 PRECEDING AND 1\nFOLLOWING) AS total_score \n FROM student_test ORDER BY score;\n \n+---------+--------+-------+-------------+\n| name | test | score | total_score |\n+---------+--------+-------+-------------+\n| Esben | Tuning | 31 | 74 |\n| Esben | SQL | 43 | 130 |\n| Kaolin | SQL | 56 | 172 |\n| Chun | Tuning | 73 | 204 |\n| Chun | SQL | 75 | 235 |\n| Tatiana | SQL | 87 | 250 |\n| Kaolin | Tuning | 88 | 175 |\n+---------+--------+-------+-------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/library/window-frames/', '', 'https://mariadb.com/kb/en/library/window-frames/'),
(728, 'FIRST_VALUE', 42, 'The FIRST_VALUE() function was first introduced with other\nwindow functions in MariaDB 10.2.\n \nSyntax\n------ \nFIRST_VALUE(expr) OVER (\n [ PARTITION BY partition_expression ]\n [ ORDER BY order_list ]\n) \n \nDescription\n----------- \nFIRST_VALUE returns the first result from an ordered set, or\nNULL if no such result exists.\n \nExamples\n-------- \nCREATE TABLE t1 (\n pk int primary key,\n a int,\n b int,\n c char(10),\n d decimal(10, 3),\n e real\n);\n \nINSERT INTO t1 VALUES\n( 1, 0, 1, \'one\', 0.1, 0.001),\n( 2, 0, 2, \'two\', 0.2, 0.002),\n( 3, 0, 3, \'three\', 0.3, 0.003),\n( 4, 1, 2, \'three\', 0.4, 0.004),\n( 5, 1, 1, \'two\', 0.5, 0.005),\n( 6, 1, 1, \'one\', 0.6, 0.006),\n( 7, 2, NULL, \'n_one\', 0.5, 0.007),\n( 8, 2, 1, \'n_two\', NULL, 0.008),\n( 9, 2, 2, NULL, 0.7, 0.009),\n(10, 2, 0, \'n_four\', 0.8, 0.010),\n(11, 2, 10, NULL, 0.9, NULL);\n \nSELECT pk, FIRST_VALUE(pk) OVER (ORDER BY pk) AS first_asc,\n LAST_VALUE(pk) OVER (ORDER BY pk) AS last_asc,\n FIRST_VALUE(pk) OVER (ORDER BY pk DESC) AS first_desc,\n LAST_VALUE(pk) OVER (ORDER BY pk DESC) AS last_desc\nFROM t1\nORDER BY pk DESC;\n \n+----+-----------+----------+------------+-----------+\n| pk | first_asc | last_asc | first_desc | last_desc |\n+----+-----------+----------+------------+-----------+\n| 11 | 1 | 11 | 11 | 11 |\n| 10 | 1 | 10 | 11 | 10 |\n| 9 | 1 | 9 | 11 | 9 |\n| 8 | 1 | 8 | 11 | 8 |\n| 7 | 1 | 7 | 11 | 7 |\n| 6 | 1 | 6 | 11 | 6 |\n| 5 | 1 | 5 | 11 | 5 |\n| 4 | 1 | 4 | 11 | 4 |\n| 3 | 1 | 3 | 11 | 3 |\n| 2 | 1 | 2 | 11 | 2 |\n| 1 | 1 | 1 | 11 | 1 |\n+----+-----------+----------+------------+-----------+\n \nCREATE OR REPLACE TABLE t1 (i int);\nINSERT INTO t1 VALUES\n(1),(2),(3),(4),(5),(6),(7),(8),(9),(10);\n \nSELECT i,\n FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW\nand 1 FOLLOWING) AS f_1f,\n LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN CURRENT ROW and\n1 FOLLOWING) AS l_1f,\n FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING\nAND 1 FOLLOWING) AS f_1p1f,\n LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 PRECEDING AND\n1 FOLLOWING) AS f_1p1f,\n FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING\nAND 1 PRECEDING) AS f_2p1p,\n LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 2 PRECEDING AND\n1 PRECEDING) AS f_2p1p,\n FIRST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 FOLLOWING\nAND 2 FOLLOWING) AS f_1f2f,\n LAST_VALUE(i) OVER (ORDER BY i ROWS BETWEEN 1 FOLLOWING AND\n2 FOLLOWING) AS f_1f2f\nFROM t1;\n \n+------+------+------+--------+--------+--------+--------+--------+--------+\n| i | f_1f | l_1f | f_1p1f | f_1p1f | f_2p1p | f_2p1p |\nf_1f2f | f_1f2f |\n+------+------+------+--------+--------+--------+--------+--------+--------+\n| 1 | 1 | 2 | 1 | 2 | NULL | NULL | 2 | 3 |\n| 2 | 2 | 3 | 1 | 3 | 1 | 1 | 3 | 4 |\n| 3 | 3 | 4 | 2 | 4 | 1 | 2 | 4 | 5 |\n| 4 | 4 | 5 | 3 | 5 | 2 | 3 | 5 | 6 |\n| 5 | 5 | 6 | 4 | 6 | 3 | 4 | 6 | 7 |\n| 6 | 6 | 7 | 5 | 7 | 4 | 5 | 7 | 8 |\n| 7 | 7 | 8 | 6 | 8 | 5 | 6 | 8 | 9 |\n| 8 | 8 | 9 | 7 | 9 | 6 | 7 | 9 | 10 |\n| 9 | 9 | 10 | 8 | 10 | 7 | 8 | 10 | 10 |\n| 10 | 10 | 10 | 9 | 10 | 8 | 9 | NULL | NULL |\n+------+------+------+--------+--------+--------+--------+--------+--------+\n \n\n\nURL: https://mariadb.com/kb/en/first_value/', '', 'https://mariadb.com/kb/en/first_value/'),
(729, 'LAG', 42, 'The LAG() function was first introduced with other window\nfunctions in MariaDB 10.2.\n \nSyntax\n------ \nLAG (expr[, offset]) OVER ( \n [ PARTITION BY partition_expression ] \n < ORDER BY order_list >\n)\n \nDescription\n----------- \nThe LAG function accesses data from a previous row according\nto the ORDER BY clause without the need for a self-join. The\nspecific row is determined by the offset (default 1), which\nspecifies the number of rows behind the current row to use.\nAn offset of 0 is the current row.\n \nExamples\n-------- \nCREATE TABLE t1 (pk int primary key, a int, b int, c\nchar(10), d decimal(10, 3), e real);\n \nINSERT INTO t1 VALUES\n ( 1, 0, 1, \'one\', 0.1, 0.001),\n ( 2, 0, 2, \'two\', 0.2, 0.002),\n ( 3, 0, 3, \'three\', 0.3, 0.003),\n ( 4, 1, 2, \'three\', 0.4, 0.004),\n ( 5, 1, 1, \'two\', 0.5, 0.005),\n ( 6, 1, 1, \'one\', 0.6, 0.006),\n ( 7, 2, NULL, \'n_one\', 0.5, 0.007),\n ( 8, 2, 1, \'n_two\', NULL, 0.008),\n ( 9, 2, 2, NULL, 0.7, 0.009),\n (10, 2, 0, \'n_four\', 0.8, 0.010),\n (11, 2, 10, NULL, 0.9, NULL);\n \nSELECT pk, LAG(pk) OVER (ORDER BY pk) AS l,\n LAG(pk,1) OVER (ORDER BY pk) AS l1,\n LAG(pk,2) OVER (ORDER BY pk) AS l2,\n LAG(pk,0) OVER (ORDER BY pk) AS l0,\n LAG(pk,-1) OVER (ORDER BY pk) AS lm1,\n LAG(pk,-2) OVER (ORDER BY pk) AS lm2 \nFROM t1;\n \n+----+------+------+------+------+------+------+\n| pk | l | l1 | l2 | l0 | lm1 | lm2 |\n+----+------+------+------+------+------+------+\n| 1 | NULL | NULL | NULL | 1 | 2 | 3 |\n| 2 | 1 | 1 | NULL | 2 | 3 | 4 |\n| 3 | 2 | 2 | 1 | 3 | 4 | 5 |\n| 4 | 3 | 3 | 2 | 4 | 5 | 6 |\n| 5 | 4 | 4 | 3 | 5 | 6 | 7 |\n| 6 | 5 | 5 | 4 | 6 | 7 | 8 |\n| 7 | 6 | 6 | 5 | 7 | 8 | 9 |\n| 8 | 7 | 7 | 6 | 8 | 9 | 10 |\n| 9 | 8 | 8 | 7 | 9 | 10 | 11 |\n| 10 | 9 | 9 | 8 | 10 | 11 | NULL |\n| 11 | 10 | 10 | 9 | 11 | NULL | NULL |\n+----+------+------+------+------+------+------+\n \n\n\nURL: https://mariadb.com/kb/en/lag/', '', 'https://mariadb.com/kb/en/lag/'),
(730, 'LEAD', 42, 'The LEAD() function was first introduced with other window\nfunctions in MariaDB 10.2.\n \nSyntax\n------ \nLEAD (expr[, offset]) OVER ( \n [ PARTITION BY partition_expression ] \n [ ORDER BY order_list ]\n)\n \nDescription\n----------- \nThe LEAD function accesses data from a following row in the\nsame result set without the need for a self-join. The\nspecific row is determined by the offset (default 1), which\nspecifies the number of rows ahead the current row to use.\nAn offset of 0 is the current row.\n \nExample\n \nCREATE TABLE t1 (pk int primary key, a int, b int, c\nchar(10), d decimal(10, 3), e real);\n \nINSERT INTO t1 VALUES\n ( 1, 0, 1, \'one\', 0.1, 0.001),\n ( 2, 0, 2, \'two\', 0.2, 0.002),\n ( 3, 0, 3, \'three\', 0.3, 0.003),\n ( 4, 1, 2, \'three\', 0.4, 0.004),\n ( 5, 1, 1, \'two\', 0.5, 0.005),\n ( 6, 1, 1, \'one\', 0.6, 0.006),\n ( 7, 2, NULL, \'n_one\', 0.5, 0.007),\n ( 8, 2, 1, \'n_two\', NULL, 0.008),\n ( 9, 2, 2, NULL, 0.7, 0.009),\n (10, 2, 0, \'n_four\', 0.8, 0.010),\n (11, 2, 10, NULL, 0.9, NULL);\n \nSELECT pk, LEAD(pk) OVER (ORDER BY pk) AS l,\n LEAD(pk,1) OVER (ORDER BY pk) AS l1,\n LEAD(pk,2) OVER (ORDER BY pk) AS l2,\n LEAD(pk,0) OVER (ORDER BY pk) AS l0,\n LEAD(pk,-1) OVER (ORDER BY pk) AS lm1,\n LEAD(pk,-2) OVER (ORDER BY pk) AS lm2 \nFROM t1;\n \n+----+------+------+------+------+------+------+\n| pk | l | l1 | l2 | l0 | lm1 | lm2 |\n+----+------+------+------+------+------+------+\n| 1 | 2 | 2 | 3 | 1 | NULL | NULL |\n| 2 | 3 | 3 | 4 | 2 | 1 | NULL |\n| 3 | 4 | 4 | 5 | 3 | 2 | 1 |\n| 4 | 5 | 5 | 6 | 4 | 3 | 2 |\n| 5 | 6 | 6 | 7 | 5 | 4 | 3 |\n| 6 | 7 | 7 | 8 | 6 | 5 | 4 |\n| 7 | 8 | 8 | 9 | 7 | 6 | 5 |\n| 8 | 9 | 9 | 10 | 8 | 7 | 6 |\n| 9 | 10 | 10 | 11 | 9 | 8 | 7 |\n| 10 | 11 | 11 | NULL | 10 | 9 | 8 |\n| 11 | NULL | NULL | NULL | 11 | 10 | 9 |\n+----+------+------+------+------+------+------+\n \n\n\nURL: https://mariadb.com/kb/en/lead/', '', 'https://mariadb.com/kb/en/lead/'),
(731, 'Median Window Function', 42, 'The MEDIAN() window function was first introduced with in\nMariaDB 10.3.3.\n \nSyntax\n------ \nMEDIAN(median expression) OVER (\n [ PARTITION BY partition_expression ] \n)\n \nDescription\n----------- \nMEDIAN() is a window function that returns the median value\nof a range of values.\n \nIt is a specific case of PERCENTILE_CONT, with an argument\nof 0.5 and the ORDER BY column the one in MEDIAN\'s\nargument. \n \nMEDIAN() OVER ( [ PARTITION BY partition_expression] )\n \nIs equivalent to:\n \nPERCENTILE_CONT(0.5) WITHIN \n GROUP (ORDER BY ) OVER ( [ PARTITION BY\npartition_expression ])\n \nExamples\n-------- \nCREATE TABLE book_rating (name CHAR(30), star_rating\nTINYINT);\n \nINSERT INTO book_rating VALUES (\'Lord of the Ladybirds\',\n5);\nINSERT INTO book_rating VALUES (\'Lord of the Ladybirds\',\n3);\nINSERT INTO book_rating VALUES (\'Lady of the Flies\', 1);\nINSERT INTO book_rating VALUES (\'Lady of the Flies\', 2);\nINSERT INTO book_rating VALUES (\'Lady of the Flies\', 5);\n \nSELECT name, median(star_rating) OVER (PARTITION BY name)\nFROM book_rating;\n \n+-----------------------+----------------------------------------------+\n| name | median(star_rating) OVER (PARTITION BY name) |\n+-----------------------+----------------------------------------------+\n| Lord of the Ladybirds | 4.0000000000 |\n| Lord of the Ladybirds | 4.0000000000 |\n| Lady of the Flies | 2.0000000000 |\n| Lady of the Flies | 2.0000000000 |\n| Lady of the Flies | 2.0000000000 |\n+-----------------------+----------------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/median/', '', 'https://mariadb.com/kb/en/median/'),
(733, 'NTILE', 42, 'The NTILE() function was first introduced with window\nfunctions in MariaDB 10.2.0.\n \nSyntax\n------ \nNTILE (expr) OVER ( \n [ PARTITION BY partition_expression ] \n [ ORDER BY order_list ]\n)\n \nDescription\n----------- \nNTILE() is a window function that returns an integer\nindicating which group a given row falls into. The number of\ngroups is specified in the argument (expr), starting at one.\nOrdered rows in the partition are divided into the specified\nnumber of groups with as equal a size as possible. \n \nExamples\n-------- \ncreate table t1 (\n pk int primary key,\n a int,\n b int\n );\n \ninsert into t1 values\n (11 , 0, 10),\n (12 , 0, 10),\n (13 , 1, 10),\n (14 , 1, 10),\n (18 , 2, 10),\n (15 , 2, 20),\n (16 , 2, 20),\n (17 , 2, 20),\n (19 , 4, 20),\n (20 , 4, 20);\n \nselect pk, a, b,\n ntile(1) over (order by pk)\n from t1;\n \n+----+------+------+-----------------------------+\n| pk | a | b | ntile(1) over (order by pk) |\n+----+------+------+-----------------------------+\n| 11 | 0 | 10 | 1 |\n| 12 | 0 | 10 | 1 |\n| 13 | 1 | 10 | 1 |\n| 14 | 1 | 10 | 1 |\n| 15 | 2 | 20 | 1 |\n| 16 | 2 | 20 | 1 |\n| 17 | 2 | 20 | 1 |\n| 18 | 2 | 10 | 1 |\n| 19 | 4 | 20 | 1 |\n| 20 | 4 | 20 | 1 |\n+----+------+------+-----------------------------+\n \nselect pk, a, b,\n ntile(4) over (order by pk)\n from t1;\n \n+----+------+------+-----------------------------+\n| pk | a | b | ntile(4) over (order by pk) |\n+----+------+------+-----------------------------+\n| 11 | 0 | 10 | 1 |\n| 12 | 0 | 10 | 1 |\n| 13 | 1 | 10 | 1 |\n| 14 | 1 | 10 | 2 |\n| 15 | 2 | 20 | 2 |\n| 16 | 2 | 20 | 2 |\n| 17 | 2 | 20 | 3 |\n| 18 | 2 | 10 | 3 |\n| 19 | 4 | 20 | 4 |\n| 20 | 4 | 20 | 4 |\n+----+------+------+-----------------------------+\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/ntile/', '', 'https://mariadb.com/kb/en/ntile/'),
(734, 'PERCENT_RANK', 42, 'The PERCENT_RANK() function was first introduced with window\nfunctions in MariaDB 10.2.0.\n \nSyntax\n------ \nPERCENT_RANK() OVER (\n [ PARTITION BY partition_expression ] \n [ ORDER BY order_list ]\n)\n \nDescription\n----------- \nPERCENT_RANK() is a window function that returns the\nrelative percent rank of a given row. The following formula\nis used to calculate the percent rank:\n \n(rank - 1) / (number of rows in the window or partition - 1)\n \nExamples\n-------- \ncreate table t1 (\n pk int primary key,\n a int,\n b int\n);\n \ninsert into t1 values\n( 1 , 0, 10),\n( 2 , 0, 10),\n( 3 , 1, 10),\n( 4 , 1, 10),\n( 8 , 2, 10),\n( 5 , 2, 20),\n( 6 , 2, 20),\n( 7 , 2, 20),\n( 9 , 4, 20),\n(10 , 4, 20);\n \nselect pk, a, b,\n rank() over (order by a) as rank,\n percent_rank() over (order by a) as pct_rank,\n cume_dist() over (order by a) as cume_dist\nfrom t1;\n \n+----+------+------+------+--------------+--------------+\n| pk | a | b | rank | pct_rank | cume_dist |\n+----+------+------+------+--------------+--------------+\n| 1 | 0 | 10 | 1 | 0.0000000000 | 0.2000000000 |\n| 2 | 0 | 10 | 1 | 0.0000000000 | 0.2000000000 |\n| 3 | 1 | 10 | 3 | 0.2222222222 | 0.4000000000 |\n| 4 | 1 | 10 | 3 | 0.2222222222 | 0.4000000000 |\n| 5 | 2 | 20 | 5 | 0.4444444444 | 0.8000000000 |\n| 6 | 2 | 20 | 5 | 0.4444444444 | 0.8000000000 |\n| 7 | 2 | 20 | 5 | 0.4444444444 | 0.8000000000 |\n| 8 | 2 | 10 | 5 | 0.4444444444 | 0.8000000000 |\n| 9 | 4 | 20 | 9 | 0.8888888889 | 1.0000000000 |\n| 10 | 4 | 20 | 9 | 0.8888888889 | 1.0000000000 |\n+----+------+------+------+--------------+--------------+\n \nselect pk, a, b,\n percent_rank() over (order by pk) as pct_rank,\n cume_dist() over (order by pk) as cume_dist\nfrom t1 order by pk;\n \n+----+------+------+--------------+--------------+\n| pk | a | b | pct_rank | cume_dist |\n+----+------+------+--------------+--------------+\n| 1 | 0 | 10 | 0.0000000000 | 0.1000000000 |\n| 2 | 0 | 10 | 0.1111111111 | 0.2000000000 |\n| 3 | 1 | 10 | 0.2222222222 | 0.3000000000 |\n| 4 | 1 | 10 | 0.3333333333 | 0.4000000000 |\n| 5 | 2 | 20 | 0.4444444444 | 0.5000000000 |\n| 6 | 2 | 20 | 0.5555555556 | 0.6000000000 |\n| 7 | 2 | 20 | 0.6666666667 | 0.7000000000 |\n| 8 | 2 | 10 | 0.7777777778 | 0.8000000000 |\n| 9 | 4 | 20 | 0.8888888889 | 0.9000000000 |\n| 10 | 4 | 20 | 1.0000000000 | 1.0000000000 |\n+----+------+------+--------------+--------------+\n \nselect pk, a, b,\n percent_rank() over (partition by a order by a) as\npct_rank,\n cume_dist() over (partition by a order by a) as cume_dist\nfrom t1;\n \n+----+------+------+--------------+--------------+\n| pk | a | b | pct_rank | cume_dist |\n+----+------+------+--------------+--------------+\n| 1 | 0 | 10 | 0.0000000000 | 1.0000000000 |\n| 2 | 0 | 10 | 0.0000000000 | 1.0000000000 |\n| 3 | 1 | 10 | 0.0000000000 | 1.0000000000 |\n| 4 | 1 | 10 | 0.0000000000 | 1.0000000000 |\n| 5 | 2 | 20 | 0.0000000000 | 1.0000000000 |\n| 6 | 2 | 20 | 0.0000000000 | 1.0000000000 |\n| 7 | 2 | 20 | 0.0000000000 | 1.0000000000 |\n| 8 | 2 | 10 | 0.0000000000 | 1.0000000000 |\n| 9 | 4 | 20 | 0.0000000000 | 1.0000000000 |\n| 10 | 4 | 20 | 0.0000000000 | 1.0000000000 |\n+----+------+------+--------------+--------------+\n \n\n\nURL: https://mariadb.com/kb/en/percent_rank/', '', 'https://mariadb.com/kb/en/percent_rank/'),
(736, 'PERCENTILE_DISC', 42, 'The PERCENTILE_DISC() window function was first introduced\nwith in MariaDB 10.3.3.\n \nSyntax\n------ \n\nDescription\n----------- \nPERCENTILE_DISC() (standing for discrete percentile) is a\nwindow function which returns the first value in the set\nwhose ordered position is the same or more than the\nspecified fraction.\n \nEssentially, the following process is followed to find the\nvalue to return:\nGet the number of rows in the partition.\nWalk through the partition, in order, until finding the the\nfirst row with CUME_DIST() > function_argument.\n \nExamples\n-------- \nCREATE TABLE book_rating (name CHAR(30), star_rating\nTINYINT);\n \nINSERT INTO book_rating VALUES (\'Lord of the Ladybirds\',\n5);\nINSERT INTO book_rating VALUES (\'Lord of the Ladybirds\',\n3);\nINSERT INTO book_rating VALUES (\'Lady of the Flies\', 1);\nINSERT INTO book_rating VALUES (\'Lady of the Flies\', 2);\nINSERT INTO book_rating VALUES (\'Lady of the Flies\', 5);\n \nSELECT name, PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY\nstar_rating)\n OVER (PARTITION BY name) AS pc FROM book_rating;\n \n+-----------------------+------+\n| name | pc |\n+-----------------------+------+\n| Lord of the Ladybirds | 3 |\n| Lord of the Ladybirds | 3 |\n| Lady of the Flies | 2 |\n| Lady of the Flies | 2 |\n| Lady of the Flies | 2 |\n+-----------------------+------+\n5 rows in set (0.000 sec)\n \nSELECT name, PERCENTILE_DISC(0) WITHIN GROUP (ORDER BY\nstar_rating) \n OVER (PARTITION BY name) AS pc FROM book_rating;\n \n+-----------------------+------+\n| name | pc |\n+-----------------------+------+\n| Lord of the Ladybirds | 3 |\n| Lord of the Ladybirds | 3 |\n| Lady of the Flies | 1 |\n| Lady of the Flies | 1 |\n| Lady of the Flies | 1 |\n+-----------------------+------+\n5 rows in set (0.000 sec)\n \nSELECT name, PERCENTILE_DISC(1) WITHIN GROUP (ORDER BY\nstar_rating) \n OVER (PARTITION BY name) AS pc FROM book_rating;\n \n+-----------------------+------+\n| name | pc |\n+-----------------------+------+\n| Lord of the Ladybirds | 5 |\n| Lord of the Ladybirds | 5 |\n| Lady of the Flies | 5 |\n| Lady of the Flies | 5 |\n| Lady of the Flies | 5 |\n+-----------------------+------+\n5 rows in set (0.000 sec)\n \nSELECT name, PERCENTILE_DISC(0.6) WITHIN GROUP (ORDER BY\nstar_rating) \n OVER (PARTITION BY name) AS pc FROM book_rating;\n \n+-----------------------+------+\n| name | pc |\n+-----------------------+------+\n| Lord of the Ladybirds | 5 |\n| Lord of the Ladybirds | 5 |\n| Lady of the Flies | 2 |\n| Lady of the Flies | 2 |\n| Lady of the Flies | 2 |\n+-----------------------+------\n \n\n\nURL: https://mariadb.com/kb/en/percentile_disc/', '', 'https://mariadb.com/kb/en/percentile_disc/'),
(735, 'PERCENTILE_CONT', 42, 'The PERCENTILE_CONT() window function was first introduced\nwith in MariaDB 10.3.3.\n \nSyntax\n------ \nDescription\n----------- \nPERCENTILE_CONT() (standing for continuous percentile) is a\nwindow function which returns a value which corresponds to\nthe given fraction in the sort order. If required, it will\ninterpolate between adjacent input items.\n \nEssentially, the following process is followed to find the\nvalue to return:\nGet the number of rows in the partition, denoted by N\nRN = p*(N-1), where p denotes the argument to the\nPERCENTILE_CONT function\ncalculate the FRN(floor row number) and CRN(column row\nnumber for the group( FRN= floor(RN) and CRN = ceil(RN))\nlook up rows FRN and CRN\nIf (CRN = FRN = RN) then the result is (value of expression\nfrom row at RN)\nOtherwise the result is\n(CRN - RN) * (value of expression for row at FRN) +\n(RN - FRN) * (value of expression for row at CRN)\n \nThe MEDIAN function is a specific case of PERCENTILE_CONT,\nequivalent to PERCENTILE_CONT(0.5).\n \nExamples\n-------- \nCREATE TABLE book_rating (name CHAR(30), star_rating\nTINYINT);\n \nINSERT INTO book_rating VALUES (\'Lord of the Ladybirds\',\n5);\nINSERT INTO book_rating VALUES (\'Lord of the Ladybirds\',\n3);\nINSERT INTO book_rating VALUES (\'Lady of the Flies\', 1);\nINSERT INTO book_rating VALUES (\'Lady of the Flies\', 2);\nINSERT INTO book_rating VALUES (\'Lady of the Flies\', 5);\n \nSELECT name, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY\nstar_rating) \n OVER (PARTITION BY name) AS pc \n FROM book_rating;\n \n+-----------------------+--------------+\n| name | pc |\n+-----------------------+--------------+\n| Lord of the Ladybirds | 4.0000000000 |\n| Lord of the Ladybirds | 4.0000000000 |\n| Lady of the Flies | 2.0000000000 |\n| Lady of the Flies | 2.0000000000 |\n| Lady of the Flies | 2.0000000000 |\n+-----------------------+--------------+\n \nSELECT name, PERCENTILE_CONT(1) WITHIN GROUP (ORDER BY\nstar_rating) \n OVER (PARTITION BY name) AS pc \n FROM book_rating;\n \n+-----------------------+--------------+\n| name | pc |\n+-----------------------+--------------+\n| Lord of the Ladybirds | 5.0000000000 |\n| Lord of the Ladybirds | 5.0000000000 |\n| Lady of the Flies | 5.0000000000 |\n| Lady of the Flies | 5.0000000000 |\n| Lady of the Flies | 5.0000000000 |\n+-----------------------+--------------+\n \nSELECT name, PERCENTILE_CONT(0) WITHIN GROUP (ORDER BY\nstar_rating) \n OVER (PARTITION BY name) AS pc \n FROM book_rating;\n \n+-----------------------+--------------+\n| name | pc |\n+-----------------------+--------------+\n| Lord of the Ladybirds | 3.0000000000 |\n| Lord of the Ladybirds | 3.0000000000 |\n| Lady of the Flies | 1.0000000000 |\n| Lady of the Flies | 1.0000000000 |\n| Lady of the Flies | 1.0000000000 |\n+-----------------------+--------------+\n \nSELECT name, PERCENTILE_CONT(0.6) WITHIN GROUP (ORDER BY\nstar_rating) \n OVER (PARTITION BY name) AS pc \n FROM book_rating;\n \n+-----------------------+--------------+\n| name | pc |\n+-----------------------+--------------+\n| Lord of the Ladybirds | 4.2000000000 |\n| Lord of the Ladybirds | 4.2000000000 |\n| Lady of the Flies | 2.6000000000 |\n| Lady of the Flies | 2.6000000000 |\n| Lady of the Flies | 2.6000000000 |\n+-----------------------+--------------+\n \n\n\nURL: https://mariadb.com/kb/en/percentile_cont/', '', 'https://mariadb.com/kb/en/percentile_cont/'),
(737, 'RANK', 42, 'The RANK() function was first introduced with window\nfunctions in MariaDB 10.2.0.\n \nSyntax\n------ \nRANK() OVER (\n [ PARTITION BY partition_expression ]\n [ ORDER BY order_list ]\n) \n \nDescription\n----------- \nRANK() is a window function that displays the number of a\ngiven row, starting at one and following the ORDER BY\nsequence of the window function, with identical values\nreceiving the same result. It is similar to the ROW_NUMBER()\nfunction except that in that function, identical values will\nreceive a different row number for each result.\n \nExamples\n-------- \nThe distinction between DENSE_RANK(), RANK() and\nROW_NUMBER():\n \nCREATE TABLE student(course VARCHAR(10), mark int, name\nvarchar(10));\n \nINSERT INTO student VALUES \n (\'Maths\', 60, \'Thulile\'),\n (\'Maths\', 60, \'Pritha\'),\n (\'Maths\', 70, \'Voitto\'),\n (\'Maths\', 55, \'Chun\'),\n (\'Biology\', 60, \'Bilal\'),\n (\'Biology\', 70, \'Roger\');\n \nSELECT \n RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS\nrank, \n DENSE_RANK() OVER (PARTITION BY course ORDER BY mark DESC)\nAS dense_rank, \n ROW_NUMBER() OVER (PARTITION BY course ORDER BY mark DESC)\nAS row_num, \n course, mark, name \nFROM student ORDER BY course, mark DESC;\n \n+------+------------+---------+---------+------+---------+\n| rank | dense_rank | row_num | course | mark | name |\n+------+------------+---------+---------+------+---------+\n| 1 | 1 | 1 | Biology | 70 | Roger |\n| 2 | 2 | 2 | Biology | 60 | Bilal |\n| 1 | 1 | 1 | Maths | 70 | Voitto |\n| 2 | 2 | 2 | Maths | 60 | Thulile |\n| 2 | 2 | 3 | Maths | 60 | Pritha |\n| 4 | 3 | 4 | Maths | 55 | Chun |\n+------+------------+---------+---------+------+---------+\n \n\n\nURL: https://mariadb.com/kb/en/rank/', '', 'https://mariadb.com/kb/en/rank/'),
(738, 'ROW_NUMBER', 42, 'ROW_NUMBER() was first introduced with window functions in\nMariaDB 10.2.0.\n \nSyntax\n------ \nROW_NUMBER() OVER (\n [ PARTITION BY partition_expression ]\n [ ORDER BY order_list ]\n) \n \nDescription\n----------- \nROW_NUMBER() is a window function that displays the number\nof a given row, starting at one and following the ORDER BY\nsequence of the window function, with identical values\nreceiving different row numbers. It is similar to the RANK()\nand DENSE_RANK() functions except that in that function,\nidentical values will receive the same rank for each result.\n \nExamples\n-------- \nThe distinction between DENSE_RANK(), RANK() and\nROW_NUMBER():\n \nCREATE TABLE student(course VARCHAR(10), mark int, name\nvarchar(10));\n \nINSERT INTO student VALUES \n (\'Maths\', 60, \'Thulile\'),\n (\'Maths\', 60, \'Pritha\'),\n (\'Maths\', 70, \'Voitto\'),\n (\'Maths\', 55, \'Chun\'),\n (\'Biology\', 60, \'Bilal\'),\n (\'Biology\', 70, \'Roger\');\n \nSELECT \n RANK() OVER (PARTITION BY course ORDER BY mark DESC) AS\nrank, \n DENSE_RANK() OVER (PARTITION BY course ORDER BY mark DESC)\nAS dense_rank, \n ROW_NUMBER() OVER (PARTITION BY course ORDER BY mark DESC)\nAS row_num, \n course, mark, name \nFROM student ORDER BY course, mark DESC;\n \n+------+------------+---------+---------+------+---------+\n| rank | dense_rank | row_num | course | mark | name |\n+------+------------+---------+---------+------+---------+\n| 1 | 1 | 1 | Biology | 70 | Roger |\n| 2 | 2 | 2 | Biology | 60 | Bilal |\n| 1 | 1 | 1 | Maths | 70 | Voitto |\n| 2 | 2 | 2 | Maths | 60 | Thulile |\n| 2 | 2 | 3 | Maths | 60 | Pritha |\n| 4 | 3 | 4 | Maths | 55 | Chun |\n+------+------------+---------+---------+------+---------+\n \n\n\nURL: https://mariadb.com/kb/en/row_number/', '', 'https://mariadb.com/kb/en/row_number/'),
(739, 'SPIDER_BG_DIRECT_SQL', 43, 'Syntax\n------ \nSPIDER_BG_DIRECT_SQL(\'sql\', \'tmp_table_list\',\n\'parameters\')\n \nDescription\n----------- \nExecutes the given SQL statement in the background on the\nremote server, as defined in the parameters listing. If the\nquery returns a result-set, it sttores the results in the\ngiven temporary table. When the given SQL statement executes\nsuccessfully, this function returns the number of called\nUDF\'s. It returns 0 when the given SQL statement fails.\n \nThis function is a UDF installed with the Spider storage\nengine.\n \nExamples\n-------- \nSELECT SPIDER_BG_DIRECT_SQL(\'SELECT * FROM example_table\',\n\'\', \n \'srv \"node1\", port \"8607\"\') AS \"Direct Query\";\n+--------------+\n| Direct Query | \n+--------------+\n| 1 |\n+--------------+\n \nParameters\n \nerror_rw_mode\n \nDescription: Returns empty results on network error.\n0 : Return error on getting network error.\n1: Return 0 records on getting network error.\n \nDefault Table Value: 0\nDSN Parameter Name: erwm\n \n\n\nURL: https://mariadb.com/kb/en/spider_bg_direct_sql/', '', 'https://mariadb.com/kb/en/spider_bg_direct_sql/'),
(740, 'SPIDER_COPY_TABLES', 43, 'Syntax\n------ \nSPIDER_COPY_TABLES(spider_table_name, \n source_link_id, destination_link_id_list [,parameters])\n \nDescription\n----------- \nA UDF installed with the Spider Storage Engine, this\nfunction copies table data from source_link_id to\ndestination_link_id_list. The service does not need to be\nstopped in order to copy.\n \nIf the Spider table is partitioned, the name must be of the\nformat table_name#P#partition_name. The partition name can\nbe viewed in the mysql.spider_tables table, for example:\n \nSELECT table_name FROM mysql.spider_tables;\n+-------------+\n| table_name |\n+-------------+\n| spt_a#P#pt1 |\n| spt_a#P#pt2 |\n| spt_a#P#pt3 |\n+-------------+\n \nReturns 1 if the data was copied successfully, or 0 if\ncopying the data failed.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/spider_copy_tables/', '', 'https://mariadb.com/kb/en/spider_copy_tables/'),
(741, 'SPIDER_DIRECT_SQL', 43, 'Syntax\n------ \nSPIDER_DIRECT_SQL(\'sql\', \'tmp_table_list\',\n\'parameters\')\n \nDescription\n----------- \nA UDF installed with the Spider Storage Engine, this\nfunction is used to execute the SQL string sql on the remote\nserver, as defined in parameters. If any resultsets are\nreturned, they are stored in the tmp_table_list.\n \nThe function returns 1 if the SQL executes successfully, or\n0 if it fails.\n \nExamples\n-------- \nSELECT SPIDER_DIRECT_SQL(\'SELECT * FROM s\', \'\', \'srv\n\"node1\", port \"8607\"\');\n+----------------------------------------------------------------------+\n| SPIDER_DIRECT_SQL(\'SELECT * FROM s\', \'\', \'srv\n\"node1\", port \"8607\"\') |\n+----------------------------------------------------------------------+\n| 1 |\n+----------------------------------------------------------------------+\n \n\n\nURL: https://mariadb.com/kb/en/spider_direct_sql/', '', 'https://mariadb.com/kb/en/spider_direct_sql/'),
(743, 'COLUMN_ADD', 44, 'The Dynamic columns feature was introduced in MariaDB 5.3.\n \nSyntax\n------ \nCOLUMN_ADD(dyncol_blob, column_nr, value [as type],\n[column_nr, value [as type]]...);\nCOLUMN_ADD(dyncol_blob, column_name, value [as type],\n[column_name, value [as type]]...);\n \nDescription\n----------- \nAdds or updates dynamic columns.\ndyncol_blob must be either a valid dynamic columns blob (for\nexample, COLUMN_CREATE returns such blob), or an empty\nstring.\ncolumn_name specifies the name of the column to be added. If\ndyncol_blob already has a column with this name, it will be\noverwritten.\nvalue specifies the new value for the column. Passing a NULL\nvalue will cause the column to be deleted.\nas type is optional. See #datatypes section for a discussion\nabout types.\n \nThe return value is a dynamic column blob after the\nmodifications.\n \nExamples\n-------- \n-- MariaDB 5.3+:\nUPDATE tbl SET dyncol_blob=COLUMN_ADD(dyncol_blob, 1\n/*column id*/, \"value\") WHERE id=1;\n \n-- MariaDB 10.0.1+:\nUPDATE t1 SET dyncol_blob=COLUMN_ADD(dyncol_blob,\n\"column_name\", \"value\") WHERE id=1;\n \nNote: COLUMN_ADD() is a regular function (just like\nCONCAT()), hence, in order to update the value in the table\nyou have to use the UPDATE ... SET\ndynamic_col=COLUMN_ADD(dynamic_col,\n....)  pattern.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/column_add/', '', 'https://mariadb.com/kb/en/column_add/'),
(745, 'COLUMN_CREATE', 44, 'The Dynamic columns feature was introduced in MariaDB 5.3.\n \nSyntax\n------ \nCOLUMN_CREATE(column_nr, value [as type], [column_nr, value\n[as type]]...);\nCOLUMN_CREATE(column_name, value [as type], [column_name,\nvalue [as type]]...);\n \nDescription\n----------- \nReturns a dynamic columns blob that stores the specified\ncolumns with values.\n \nThe return value is suitable for \nstoring in a table\nfurther modification with other dynamic columns functions\n \nThe as type part allows one to specify the value type. In\nmost cases,\nthis is redundant because MariaDB will be able to deduce the\ntype of the\nvalue. Explicit type specification may be needed when the\ntype of the value is\nnot apparent. For example, a literal \'2012-12-01\' has a\nCHAR type by\ndefault, one will need to specify \'2012-12-01\' AS DATE to\nhave it stored as\na date. See Dynamic Columns:Datatypes for further details.\n \nExamples\n-------- \n-- MariaDB 5.3+:\nINSERT INTO tbl SET dyncol_blob=COLUMN_CREATE(1 /*column\nid*/, \"value\");\n-- MariaDB 10.0.1+:\nINSERT INTO tbl SET\ndyncol_blob=COLUMN_CREATE(\"column_name\", \"value\");\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/column_create/', '', 'https://mariadb.com/kb/en/column_create/'),
(748, 'COLUMN_GET', 44, 'The Dynamic columns feature was introduced in MariaDB 5.3.\n \nSyntax\n------ \nCOLUMN_GET(dyncol_blob, column_nr as type);\nCOLUMN_GET(dyncol_blob, column_name as type);\n \nDescription\n----------- \nGets the value of a dynamic column by its name. If no column\nwith the given name exists, NULL will be returned.\n \ncolumn_name as type requires that one specify the datatype\nof the dynamic column they are reading. \n \nThis may seem counter-intuitive: why would one need to\nspecify which datatype they\'re retrieving? Can\'t the\ndynamic columns system figure the datatype from the data\nbeing stored?\n \nThe answer is: SQL is a statically-typed language. The SQL\ninterpreter needs to know the datatypes of all expressions\nbefore the query is run (for example, when one is using\nprepared statements and runs \"select COLUMN_GET(...)\", the\nprepared statement API requires the server to inform the\nclient about the datatype of the column being read before\nthe query is executed and the server can see what datatype\nthe column actually has).\n \nA note about lengths\n \nIf you\'re running queries like:\n \nSELECT COLUMN_GET(blob, \'colname\' as CHAR) ...\n \nwithout specifying a maximum length (i.e. using #as CHAR#,\nnot as CHAR(n)), MariaDB will report the maximum length of\nthe resultset column to be 53,6870,911 for MariaDB\n5.3-10.0.0 and 16,777,216 for MariaDB 10.0.1+. This may\ncause excessive memory usage in some client libraries,\nbecause they try to pre-allocate a buffer of maximum\nresultset width. To avoid this problem, use CHAR(n) whenever\nyou\'re using COLUMN_GET in the select list.\n \nSee Dynamic Columns:Datatypes for more information about\ndatatypes.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/column_get/', '', 'https://mariadb.com/kb/en/column_get/'),
(749, 'COLUMN_JSON', 44, 'COLUMN_JSON was introduced in MariaDB 10.0.1\n \nSyntax\n------ \nCOLUMN_JSON(dyncol_blob)\n \nDescription\n----------- \nReturns a JSON representation of data in dyncol_blob. Can\nalso be used to display nested columns. See dynamic columns\nfor more information.\n \nExample\n \nselect item_name, COLUMN_JSON(dynamic_cols) from assets;\n+-----------------+----------------------------------------+\n| item_name | COLUMN_JSON(dynamic_cols) |\n+-----------------+----------------------------------------+\n| MariaDB T-shirt | {\"size\":\"XL\",\"color\":\"blue\"} |\n| Thinkpad Laptop | {\"color\":\"black\",\"warranty\":\"3\nyears\"} |\n+-----------------+----------------------------------------+\n \nLimitation: COLUMN_JSON will decode nested dynamic columns\nat a nesting level of not more than 10 levels deep. Dynamic\ncolumns that are nested deeper than 10 levels will be shown\nas BINARY string, without encoding.\n \n\n \n \n \n \n \n \n \n\nURL: https://mariadb.com/kb/en/column_json/', '', 'https://mariadb.com/kb/en/column_json/');
INSERT INTO `help_topic` (`help_topic_id`, `name`, `help_category_id`, `description`, `example`, `url`) VALUES
(751, 'Instant ADD COLUMN for InnoDB', 46, 'Instant ALTER TABLE ... ADD COLUMN for InnoDB was introduced\nin MariaDB 10.3.2. The INSTANT option for the ALGORITHM\nclause was introduced in MariaDB 10.3.7.\n \nNormally, adding a column to a table requires the full table\nto be rebuilt. The complexity of the operation is\nproportional to the size of the table, or O(n·m) where n is\nthe number of rows in the table and m is the number of\nindexes. \n \nIn MariaDB 10.0 and later, the ALTER TABLE statement\nsupports online DDL for storage engines that have\nimplemented the relevant online DDL algorithms and locking\nstrategies.\n \nThe InnoDB storage engine has implemented online DDL for\nmany operations. These online DDL optimizations allow\nconcurrent DML to the table in many cases, even if the table\nneeds to be rebuilt.\n \nSee InnoDB Online DDL Overview for more information about\nonline DDL with InnoDB.\n \nAllowing concurrent DML during the operation does not solve\nall problems. When a column was added to a table with the\nolder in-place optimization, the resulting table rebuild\ncould still significantly increase the I/O and memory\nconsumption and cause replication lag.\n \nIn contrast, with the new instant ALTER TABLE ... ADD\nCOLUMN, all that is needed is an O(log n) operation to\ninsert a special hidden record into the table, and an update\nof the data dictionary. For a large table, instead of taking\nseveral hours, the operation would be completed in the blink\nof an eye. The ALTER TABLE ... ADD COLUMN operation is only\nslightly more expensive than a regular INSERT, due to\nlocking constraints.\n \nIn the past, some developers may have implemented a kind of\n\"instant add column\" in the application by encoding\nmultiple columns in a single TEXT or BLOB column. MariaDB\nDynamic Columns was an early example of that. A more recent\nexample is JSON and related string manipulation functions.\n \nAdding real columns has the following advantages over\nencoding columns into a single \"expandable\" column:\nEfficient storage in a native binary format\nData type safety\nIndexes can be built natively\nConstraints are available: UNIQUE, CHECK, FOREIGN KEY\nDEFAULT values can be specified\nTriggers can be written more easily\n \nWith instant ALTER TABLE ... ADD COLUMN, you can enjoy all\nthe benefits of structured storage without the drawback of\nhaving to rebuild the table.\n \nInstant ALTER TABLE ... ADD COLUMN is available for both old\nand new InnoDB tables. Basically you can just upgrade from\nMySQL 5.x or MariaDB and start adding columns instantly.\n \nColumns instantly added to a table exist in a separate data\nstructure from the main table definition, similar to how\nInnoDB separates BLOB columns. If the table ever becomes\nempty, (such as from TRUNCATE or DELETE statements), InnoDB\nincorporates the instantly added columns into the main table\ndefinition. See InnoDB Online DDL Operations with\nALGORITHM=INSTANT: Non-canonical Storage Format Caused by\nSome Operations for more information.\n \nThe operation is also crash safe. If the server is killed\nwhile executing an instant ALTER TABLE ... ADD COLUMN, when\nthe table is restored InnoDB integrates the new column,\nflattening the table definition.\n \nLimitations\n \nIn MariaDB 10.3, instant ALTER TABLE ... ADD COLUMN only\napplies when the added columns appear last in the table. The\nplace specifier LAST is the default. If AFTER col is\nspecified, then col must be the last column, or the\noperation will require the table to be rebuilt. In MariaDB\n10.4, this restriction has been lifted.\n \nIf the table contains a hidden FTS_DOC_ID column due to a\nFULLTEXT INDEX, then instant ALTER TABLE ... ADD COLUMN will\nnot be possible.\n \nInnoDB data files after instant ALTER TABLE ... ADD COLUMN\ncannot be imported to older versions of MariaDB or MySQL\nwithout first being rebuilt.\n \nAfter using Instant ALTER TABLE ... ADD COLUMN, any\ntable-rebuilding operation such as ALTER TABLE … FORCE\nwill incorporate instantaneously added columns into the main\ntable body.\n \nInstant ALTER TABLE ... ADD COLUMN is not available for\nROW_FORMAT=COMPRESSED.\n \nIn MariaDB 10.3, ALTER TABLE … DROP COLUMN requires the\ntable to be rebuilt. In MariaDB 10.4, this restriction has\nbeen lifted.\n \nExample\n \nCREATE TABLE t(id INT PRIMARY KEY, u INT UNSIGNED NOT NULL\nUNIQUE)\nENGINE=InnoDB;\n \nINSERT INTO t(id,u) VALUES(1,1),(2,2),(3,3);\n \nALTER TABLE t ADD COLUMN\n(d DATETIME DEFAULT current_timestamp(),\n p POINT NOT NULL DEFAULT ST_GeomFromText(\'POINT(0 0)\'),\n t TEXT CHARSET utf8 DEFAULT \'The quick brown fox jumps\nover the lazy dog\');\n \nUPDATE t SET t=NULL WHERE id=3;\n \nSELECT id,u,d,ST_AsText(p),t FROM t;\n \nSELECT variable_value FROM information_schema.global_status\nWHERE variable_name = \'innodb_instant_alter_column\';\n \nThe above example illustrates that when the added columns\nare declared NOT NULL, a DEFAULT value must be available,\neither implied by the data type or set explicitly by the\nuser. The expression need not be constant, but it must not\nrefer to the columns of the table, such as DEFAULT u+1 (a\nMariaDB extension). The DEFAULT current_timestamp() would be\nevaluated at the time of the ALTER TABLE and apply to each\nrow, like it does for non-instant ALTER TABLE. If a\nsubsequent ALTER TABLE changes the DEFAULT value for\nsubsequent INSERT, the values of the columns in existing\nrecords will naturally be unaffected.\n \nThe design was brainstormed in April by engineers from\nMariaDB Corporation, Alibaba and Tencent. A prototype was\ndeveloped by Vin Chen (陈福荣) from the Tencent Game DBA\nTeam.\n \n\n \n \n \n \n \n \n \n\nURL:\nhttps://mariadb.com/kb/en/instant-add-column-for-innodb/', '', 'https://mariadb.com/kb/en/instant-add-column-for-innodb/'),
(752, 'Full-Text Index Overview', 48, 'MariaDB has support for full-text indexing and searching:\nA full-text index in MariaDB is an index of type FULLTEXT,\nand it allows more options when searching for portions of\ntext from a field.\nFull-text indexes can be used only with MyISAM and Aria\ntables, from MariaDB 10.0.5 with InnoDB tables and from\nMariaDB 10.0.15 with Mroonga tables, and can be created only\nfor CHAR, VARCHAR, or TEXT columns.\nPartitioned tables cannot contain fulltext indexes, even if\nthe storage engine supports them.\nA FULLTEXT index definition can be given in the CREATE TABLE\nstatement when a\n table is created, or added later using ALTER TABLE or\nCREATE INDEX.\nFor large data sets, it is much faster to load your data\ninto a table that\n has no FULLTEXT index and then create the index after that,\nthan to load data\n into a table that has an existing FULLTEXT index.\n \nFull-text searching is performed using MATCH() ... AGAINST\nsyntax.\nMATCH() takes a comma-separated list that names the columns\nto be\nsearched. AGAINST takes a string to search for, and an\noptional\nmodifier that indicates what type of search to perform. The\nsearch\nstring must be a literal string, not a variable or a column\nname.\n \nMATCH (col1,col2,...) AGAINST (expr [search_modifier])\n \nExcluded Results\n \nPartial words are excluded.\nWords less than 4 characters in length (3 or less) will not\nbe stored in the fulltext index. This value can be adjusted\nby changing the ft_min_word_length system variable (or, for\nInnoDB, innodb_ft_min_token_size).\nWords longer than 84 characters in length will also not be\nstored in the fulltext index. This values can be adjusted by\nchanging the ft_max_word_length system variable (or, for\nInnoDB, innodb_ft_max_token_size).\nStopwords are a list of common words such as \"once\" or\n\"then\" that do not reflect in the search results unless IN\nBOOLEAN MODE is used. The stopword list for MyISAM/Aria\ntables and InnoDB tables can differ. See stopwords for\ndetails and a full list, as well as for details on how to\nchange the default list.\nFor MyISAM/Aria fulltext indexes only, if a word appears in\nmore than half the rows, it is also excluded from the\nresults of a fulltext search.\nFor InnoDB indexes, only committed rows appear -\nmodifications from the current transaction do not apply.\n \nRelevance\n \nMariaDB calculates a relevance for each result, based on a\nnumber of factors, including the number of words in the\nindex, the number of unique words in a row, the total number\nof words in both the index and the result, and the weight of\nthe word. In English, \'cool\' will be weighted less than\n\'dandy\', at least at present! The relevance can be\nreturned as part of a query simply by using the MATCH\nfunction in the field list.\n \nTypes of Full-Text search\n \nIN NATURAL LANGUAGE MODE\n \nIN NATURAL LANGUAGE MODE is the default type of full-text\nsearch, and the keywords can be omitted. There are no\nspecial operators, and searches consist of one or more\ncomma-separated keywords.\n \nSearches are returned in descending order of relevance.\n \nIN BOOLEAN MODE\n \nBoolean search permits the use of a number of special\noperators:\n \nOperator | Description | \n \n+ | The word is mandatory in all rows returned. | \n \n- | The word cannot appear in any row returned. | \n \n< | The word that follows has a lower relevance than other\nwords, although rows containing it will still match | \n \n> | The word that follows has a higher relevance than other\nwords. | \n \n() | Used to group words into subexpressions. | \n \n~ | The word following contributes negatively to the\nrelevance of the row (which is different to the \'-\'\noperator, which specifically excludes the word, or the \'\n\nURL: https://mariadb.com/kb/en/full-text-index-overview/', '', 'https://mariadb.com/kb/en/full-text-index-overview/');

-- --------------------------------------------------------

--
-- Table structure for table `index_stats`
--

CREATE TABLE `index_stats` (
  `db_name` varchar(64) NOT NULL,
  `table_name` varchar(64) NOT NULL,
  `index_name` varchar(64) NOT NULL,
  `prefix_arity` int(11) UNSIGNED NOT NULL,
  `avg_frequency` decimal(12,4) DEFAULT NULL
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- --------------------------------------------------------

--
-- Table structure for table `innodb_index_stats`
--

CREATE TABLE `innodb_index_stats` (
  `database_name` varchar(64) NOT NULL,
  `table_name` varchar(199) NOT NULL,
  `index_name` varchar(64) NOT NULL,
  `last_update` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  `stat_name` varchar(64) NOT NULL,
  `stat_value` bigint(20) UNSIGNED NOT NULL,
  `sample_size` bigint(20) UNSIGNED DEFAULT NULL,
  `stat_description` varchar(1024) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

--
-- Dumping data for table `innodb_index_stats`
--

INSERT INTO `innodb_index_stats` (`database_name`, `table_name`, `index_name`, `last_update`, `stat_name`, `stat_value`, `sample_size`, `stat_description`) VALUES
('mysql', 'gtid_slave_pos', 'PRIMARY', '2019-10-21 12:17:49', 'n_diff_pfx01', 0, 1, 'domain_id'),
('mysql', 'gtid_slave_pos', 'PRIMARY', '2019-10-21 12:17:49', 'n_diff_pfx02', 0, 1, 'domain_id,sub_id'),
('mysql', 'gtid_slave_pos', 'PRIMARY', '2019-10-21 12:17:49', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('mysql', 'gtid_slave_pos', 'PRIMARY', '2019-10-21 12:17:49', 'size', 1, NULL, 'Number of pages in the index'),
('mysql', 'table_barangay', 'PRIMARY', '2025-05-03 16:40:27', 'n_diff_pfx01', 41984, 20, 'barangay_id'),
('mysql', 'table_barangay', 'PRIMARY', '2025-05-03 16:40:27', 'n_leaf_pages', 105, NULL, 'Number of leaf pages in the index'),
('mysql', 'table_barangay', 'PRIMARY', '2025-05-03 16:40:27', 'size', 161, NULL, 'Number of pages in the index'),
('mysql', 'table_municipality', 'GEN_CLUST_INDEX', '2025-05-03 16:40:36', 'n_diff_pfx01', 1634, 6, 'DB_ROW_ID'),
('mysql', 'table_municipality', 'GEN_CLUST_INDEX', '2025-05-03 16:40:36', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('mysql', 'table_municipality', 'GEN_CLUST_INDEX', '2025-05-03 16:40:36', 'size', 7, NULL, 'Number of pages in the index'),
('mysql', 'table_province', 'GEN_CLUST_INDEX', '2025-05-03 16:40:26', 'n_diff_pfx01', 228, 1, 'DB_ROW_ID'),
('mysql', 'table_province', 'GEN_CLUST_INDEX', '2025-05-03 16:40:26', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('mysql', 'table_province', 'GEN_CLUST_INDEX', '2025-05-03 16:40:26', 'size', 1, NULL, 'Number of pages in the index'),
('mysql', 'table_region', 'GEN_CLUST_INDEX', '2025-05-03 16:40:46', 'n_diff_pfx01', 17, 1, 'DB_ROW_ID'),
('mysql', 'table_region', 'GEN_CLUST_INDEX', '2025-05-03 16:40:46', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('mysql', 'table_region', 'GEN_CLUST_INDEX', '2025-05-03 16:40:46', 'size', 1, NULL, 'Number of pages in the index'),
('mysql', 'table_users_registration', 'PRIMARY', '2025-05-03 17:17:06', 'n_diff_pfx01', 2, 1, 'id'),
('mysql', 'table_users_registration', 'PRIMARY', '2025-05-03 17:17:06', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('mysql', 'table_users_registration', 'PRIMARY', '2025-05-03 17:17:06', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__bookmark', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'id'),
('phpmyadmin', 'pma__bookmark', 'PRIMARY', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__bookmark', 'PRIMARY', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__central_columns', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'db_name'),
('phpmyadmin', 'pma__central_columns', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx02', 0, 1, 'db_name,col_name'),
('phpmyadmin', 'pma__central_columns', 'PRIMARY', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__central_columns', 'PRIMARY', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__column_info', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'id'),
('phpmyadmin', 'pma__column_info', 'PRIMARY', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__column_info', 'PRIMARY', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__column_info', 'db_name', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'db_name'),
('phpmyadmin', 'pma__column_info', 'db_name', '2019-10-21 12:19:11', 'n_diff_pfx02', 0, 1, 'db_name,table_name'),
('phpmyadmin', 'pma__column_info', 'db_name', '2019-10-21 12:19:11', 'n_diff_pfx03', 0, 1, 'db_name,table_name,column_name'),
('phpmyadmin', 'pma__column_info', 'db_name', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__column_info', 'db_name', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__designer_settings', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'username'),
('phpmyadmin', 'pma__designer_settings', 'PRIMARY', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__designer_settings', 'PRIMARY', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__export_templates', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'id'),
('phpmyadmin', 'pma__export_templates', 'PRIMARY', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__export_templates', 'PRIMARY', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__export_templates', 'u_user_type_template', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'username'),
('phpmyadmin', 'pma__export_templates', 'u_user_type_template', '2019-10-21 12:19:11', 'n_diff_pfx02', 0, 1, 'username,export_type'),
('phpmyadmin', 'pma__export_templates', 'u_user_type_template', '2019-10-21 12:19:11', 'n_diff_pfx03', 0, 1, 'username,export_type,template_name'),
('phpmyadmin', 'pma__export_templates', 'u_user_type_template', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__export_templates', 'u_user_type_template', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__favorite', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'username'),
('phpmyadmin', 'pma__favorite', 'PRIMARY', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__favorite', 'PRIMARY', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__history', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'id'),
('phpmyadmin', 'pma__history', 'PRIMARY', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__history', 'PRIMARY', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__history', 'username', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'username'),
('phpmyadmin', 'pma__history', 'username', '2019-10-21 12:19:11', 'n_diff_pfx02', 0, 1, 'username,db'),
('phpmyadmin', 'pma__history', 'username', '2019-10-21 12:19:11', 'n_diff_pfx03', 0, 1, 'username,db,table'),
('phpmyadmin', 'pma__history', 'username', '2019-10-21 12:19:11', 'n_diff_pfx04', 0, 1, 'username,db,table,timevalue'),
('phpmyadmin', 'pma__history', 'username', '2019-10-21 12:19:11', 'n_diff_pfx05', 0, 1, 'username,db,table,timevalue,id'),
('phpmyadmin', 'pma__history', 'username', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__history', 'username', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__navigationhiding', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'username'),
('phpmyadmin', 'pma__navigationhiding', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx02', 0, 1, 'username,item_name'),
('phpmyadmin', 'pma__navigationhiding', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx03', 0, 1, 'username,item_name,item_type'),
('phpmyadmin', 'pma__navigationhiding', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx04', 0, 1, 'username,item_name,item_type,db_name'),
('phpmyadmin', 'pma__navigationhiding', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx05', 0, 1, 'username,item_name,item_type,db_name,table_name'),
('phpmyadmin', 'pma__navigationhiding', 'PRIMARY', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__navigationhiding', 'PRIMARY', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__pdf_pages', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'page_nr'),
('phpmyadmin', 'pma__pdf_pages', 'PRIMARY', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__pdf_pages', 'PRIMARY', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__pdf_pages', 'db_name', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'db_name'),
('phpmyadmin', 'pma__pdf_pages', 'db_name', '2019-10-21 12:19:11', 'n_diff_pfx02', 0, 1, 'db_name,page_nr'),
('phpmyadmin', 'pma__pdf_pages', 'db_name', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__pdf_pages', 'db_name', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__recent', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'username'),
('phpmyadmin', 'pma__recent', 'PRIMARY', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__recent', 'PRIMARY', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__relation', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'master_db'),
('phpmyadmin', 'pma__relation', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx02', 0, 1, 'master_db,master_table'),
('phpmyadmin', 'pma__relation', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx03', 0, 1, 'master_db,master_table,master_field'),
('phpmyadmin', 'pma__relation', 'PRIMARY', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__relation', 'PRIMARY', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__relation', 'foreign_field', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'foreign_db'),
('phpmyadmin', 'pma__relation', 'foreign_field', '2019-10-21 12:19:11', 'n_diff_pfx02', 0, 1, 'foreign_db,foreign_table'),
('phpmyadmin', 'pma__relation', 'foreign_field', '2019-10-21 12:19:11', 'n_diff_pfx03', 0, 1, 'foreign_db,foreign_table,master_db'),
('phpmyadmin', 'pma__relation', 'foreign_field', '2019-10-21 12:19:11', 'n_diff_pfx04', 0, 1, 'foreign_db,foreign_table,master_db,master_table'),
('phpmyadmin', 'pma__relation', 'foreign_field', '2019-10-21 12:19:11', 'n_diff_pfx05', 0, 1, 'foreign_db,foreign_table,master_db,master_table,master_field'),
('phpmyadmin', 'pma__relation', 'foreign_field', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__relation', 'foreign_field', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__savedsearches', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'id'),
('phpmyadmin', 'pma__savedsearches', 'PRIMARY', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__savedsearches', 'PRIMARY', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__savedsearches', 'u_savedsearches_username_dbname', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'username'),
('phpmyadmin', 'pma__savedsearches', 'u_savedsearches_username_dbname', '2019-10-21 12:19:11', 'n_diff_pfx02', 0, 1, 'username,db_name'),
('phpmyadmin', 'pma__savedsearches', 'u_savedsearches_username_dbname', '2019-10-21 12:19:11', 'n_diff_pfx03', 0, 1, 'username,db_name,search_name'),
('phpmyadmin', 'pma__savedsearches', 'u_savedsearches_username_dbname', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__savedsearches', 'u_savedsearches_username_dbname', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__table_coords', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'db_name'),
('phpmyadmin', 'pma__table_coords', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx02', 0, 1, 'db_name,table_name'),
('phpmyadmin', 'pma__table_coords', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx03', 0, 1, 'db_name,table_name,pdf_page_number'),
('phpmyadmin', 'pma__table_coords', 'PRIMARY', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__table_coords', 'PRIMARY', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__table_info', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'db_name'),
('phpmyadmin', 'pma__table_info', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx02', 0, 1, 'db_name,table_name'),
('phpmyadmin', 'pma__table_info', 'PRIMARY', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__table_info', 'PRIMARY', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__table_uiprefs', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'username'),
('phpmyadmin', 'pma__table_uiprefs', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx02', 0, 1, 'username,db_name'),
('phpmyadmin', 'pma__table_uiprefs', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx03', 0, 1, 'username,db_name,table_name'),
('phpmyadmin', 'pma__table_uiprefs', 'PRIMARY', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__table_uiprefs', 'PRIMARY', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__tracking', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'db_name'),
('phpmyadmin', 'pma__tracking', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx02', 0, 1, 'db_name,table_name'),
('phpmyadmin', 'pma__tracking', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx03', 0, 1, 'db_name,table_name,version'),
('phpmyadmin', 'pma__tracking', 'PRIMARY', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__tracking', 'PRIMARY', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__userconfig', 'PRIMARY', '2019-10-21 13:36:49', 'n_diff_pfx01', 0, 1, 'username'),
('phpmyadmin', 'pma__userconfig', 'PRIMARY', '2019-10-21 13:36:49', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__userconfig', 'PRIMARY', '2019-10-21 13:36:49', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__usergroups', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'usergroup'),
('phpmyadmin', 'pma__usergroups', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx02', 0, 1, 'usergroup,tab'),
('phpmyadmin', 'pma__usergroups', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx03', 0, 1, 'usergroup,tab,allowed'),
('phpmyadmin', 'pma__usergroups', 'PRIMARY', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__usergroups', 'PRIMARY', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('phpmyadmin', 'pma__users', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx01', 0, 1, 'username'),
('phpmyadmin', 'pma__users', 'PRIMARY', '2019-10-21 12:19:11', 'n_diff_pfx02', 0, 1, 'username,usergroup'),
('phpmyadmin', 'pma__users', 'PRIMARY', '2019-10-21 12:19:11', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('phpmyadmin', 'pma__users', 'PRIMARY', '2019-10-21 12:19:11', 'size', 1, NULL, 'Number of pages in the index'),
('places', 'table_barangay', 'PRIMARY', '2025-04-26 16:25:55', 'n_diff_pfx01', 43497, 20, 'barangay_id'),
('places', 'table_barangay', 'PRIMARY', '2025-04-26 16:25:55', 'n_leaf_pages', 138, NULL, 'Number of leaf pages in the index'),
('places', 'table_barangay', 'PRIMARY', '2025-04-26 16:25:55', 'size', 161, NULL, 'Number of pages in the index'),
('places', 'table_municipality', 'GEN_CLUST_INDEX', '2025-04-26 16:02:23', 'n_diff_pfx01', 1634, 6, 'DB_ROW_ID'),
('places', 'table_municipality', 'GEN_CLUST_INDEX', '2025-04-26 16:02:23', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('places', 'table_municipality', 'GEN_CLUST_INDEX', '2025-04-26 16:02:23', 'size', 7, NULL, 'Number of pages in the index'),
('places', 'table_province', 'GEN_CLUST_INDEX', '2025-04-26 16:01:17', 'n_diff_pfx01', 228, 1, 'DB_ROW_ID'),
('places', 'table_province', 'GEN_CLUST_INDEX', '2025-04-26 16:01:17', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('places', 'table_province', 'GEN_CLUST_INDEX', '2025-04-26 16:01:17', 'size', 1, NULL, 'Number of pages in the index'),
('places', 'table_region', 'GEN_CLUST_INDEX', '2025-04-26 16:00:53', 'n_diff_pfx01', 17, 1, 'DB_ROW_ID'),
('places', 'table_region', 'GEN_CLUST_INDEX', '2025-04-26 16:00:53', 'n_leaf_pages', 1, NULL, 'Number of leaf pages in the index'),
('places', 'table_region', 'GEN_CLUST_INDEX', '2025-04-26 16:00:53', 'size', 1, NULL, 'Number of pages in the index');

-- --------------------------------------------------------

--
-- Table structure for table `innodb_table_stats`
--

CREATE TABLE `innodb_table_stats` (
  `database_name` varchar(64) NOT NULL,
  `table_name` varchar(199) NOT NULL,
  `last_update` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  `n_rows` bigint(20) UNSIGNED NOT NULL,
  `clustered_index_size` bigint(20) UNSIGNED NOT NULL,
  `sum_of_other_index_sizes` bigint(20) UNSIGNED NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

--
-- Dumping data for table `innodb_table_stats`
--

INSERT INTO `innodb_table_stats` (`database_name`, `table_name`, `last_update`, `n_rows`, `clustered_index_size`, `sum_of_other_index_sizes`) VALUES
('mysql', 'gtid_slave_pos', '2019-10-21 12:17:49', 0, 1, 0),
('mysql', 'table_barangay', '2025-05-03 16:40:27', 41984, 161, 0),
('mysql', 'table_municipality', '2025-05-03 16:40:36', 1634, 7, 0),
('mysql', 'table_province', '2025-05-03 16:40:26', 228, 1, 0),
('mysql', 'table_region', '2025-05-03 16:40:46', 17, 1, 0),
('mysql', 'table_users_registration', '2025-05-03 17:17:06', 2, 1, 0),
('phpmyadmin', 'pma__bookmark', '2019-10-21 12:19:11', 0, 1, 0),
('phpmyadmin', 'pma__central_columns', '2019-10-21 12:19:11', 0, 1, 0),
('phpmyadmin', 'pma__column_info', '2019-10-21 12:19:11', 0, 1, 1),
('phpmyadmin', 'pma__designer_settings', '2019-10-21 12:19:11', 0, 1, 0),
('phpmyadmin', 'pma__export_templates', '2019-10-21 12:19:11', 0, 1, 1),
('phpmyadmin', 'pma__favorite', '2019-10-21 12:19:11', 0, 1, 0),
('phpmyadmin', 'pma__history', '2019-10-21 12:19:11', 0, 1, 1),
('phpmyadmin', 'pma__navigationhiding', '2019-10-21 12:19:11', 0, 1, 0),
('phpmyadmin', 'pma__pdf_pages', '2019-10-21 12:19:11', 0, 1, 1),
('phpmyadmin', 'pma__recent', '2019-10-21 12:19:11', 0, 1, 0),
('phpmyadmin', 'pma__relation', '2019-10-21 12:19:11', 0, 1, 1),
('phpmyadmin', 'pma__savedsearches', '2019-10-21 12:19:11', 0, 1, 1),
('phpmyadmin', 'pma__table_coords', '2019-10-21 12:19:11', 0, 1, 0),
('phpmyadmin', 'pma__table_info', '2019-10-21 12:19:11', 0, 1, 0),
('phpmyadmin', 'pma__table_uiprefs', '2019-10-21 12:19:11', 0, 1, 0),
('phpmyadmin', 'pma__tracking', '2019-10-21 12:19:11', 0, 1, 0),
('phpmyadmin', 'pma__userconfig', '2019-10-21 13:36:49', 0, 1, 0),
('phpmyadmin', 'pma__usergroups', '2019-10-21 12:19:11', 0, 1, 0),
('phpmyadmin', 'pma__users', '2019-10-21 12:19:11', 0, 1, 0),
('places', 'table_barangay', '2025-04-26 16:25:55', 43497, 161, 0),
('places', 'table_municipality', '2025-04-26 16:02:23', 1634, 7, 0),
('places', 'table_province', '2025-04-26 16:01:17', 228, 1, 0),
('places', 'table_region', '2025-04-26 16:00:53', 17, 1, 0);

-- --------------------------------------------------------

--
-- Table structure for table `plugin`
--

CREATE TABLE `plugin` (
  `name` varchar(64) NOT NULL DEFAULT '',
  `dl` varchar(128) NOT NULL DEFAULT ''
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;

-- --------------------------------------------------------

--
-- Table structure for table `proc`
--

CREATE TABLE `proc` (
  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',
  `name` char(64) NOT NULL DEFAULT '',
  `type` enum('FUNCTION','PROCEDURE','PACKAGE','PACKAGE BODY') NOT NULL,
  `specific_name` char(64) NOT NULL DEFAULT '',
  `language` enum('SQL') NOT NULL DEFAULT 'SQL',
  `sql_data_access` enum('CONTAINS_SQL','NO_SQL','READS_SQL_DATA','MODIFIES_SQL_DATA') NOT NULL DEFAULT 'CONTAINS_SQL',
  `is_deterministic` enum('YES','NO') NOT NULL DEFAULT 'NO',
  `security_type` enum('INVOKER','DEFINER') NOT NULL DEFAULT 'DEFINER',
  `param_list` blob NOT NULL,
  `returns` longblob NOT NULL,
  `body` longblob NOT NULL,
  `definer` char(141) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',
  `created` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','IGNORE_BAD_TABLE_OPTIONS','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH','EMPTY_STRING_IS_NULL','SIMULTANEOUS_ASSIGNMENT','TIME_ROUND_FRACTIONAL') NOT NULL DEFAULT '',
  `comment` text CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `body_utf8` longblob DEFAULT NULL,
  `aggregate` enum('NONE','GROUP') NOT NULL DEFAULT 'NONE'
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;

-- --------------------------------------------------------

--
-- Table structure for table `procs_priv`
--

CREATE TABLE `procs_priv` (
  `Host` char(60) NOT NULL DEFAULT '',
  `Db` char(64) NOT NULL DEFAULT '',
  `User` char(80) NOT NULL DEFAULT '',
  `Routine_name` char(64) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '',
  `Routine_type` enum('FUNCTION','PROCEDURE','PACKAGE','PACKAGE BODY') NOT NULL,
  `Grantor` char(141) NOT NULL DEFAULT '',
  `Proc_priv` set('Execute','Alter Routine','Grant') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '',
  `Timestamp` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp()
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- --------------------------------------------------------

--
-- Table structure for table `proxies_priv`
--

CREATE TABLE `proxies_priv` (
  `Host` char(60) NOT NULL DEFAULT '',
  `User` char(80) NOT NULL DEFAULT '',
  `Proxied_host` char(60) NOT NULL DEFAULT '',
  `Proxied_user` char(80) NOT NULL DEFAULT '',
  `With_grant` tinyint(1) NOT NULL DEFAULT 0,
  `Grantor` char(141) NOT NULL DEFAULT '',
  `Timestamp` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp()
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

--
-- Dumping data for table `proxies_priv`
--

INSERT INTO `proxies_priv` (`Host`, `User`, `Proxied_host`, `Proxied_user`, `With_grant`, `Grantor`, `Timestamp`) VALUES
('localhost', 'root', '', '', 1, '', '2019-10-21 12:17:49');

-- --------------------------------------------------------

--
-- Table structure for table `roles_mapping`
--

CREATE TABLE `roles_mapping` (
  `Host` char(60) NOT NULL DEFAULT '',
  `User` char(80) NOT NULL DEFAULT '',
  `Role` char(80) NOT NULL DEFAULT '',
  `Admin_option` enum('N','Y') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'N'
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- --------------------------------------------------------

--
-- Table structure for table `servers`
--

CREATE TABLE `servers` (
  `Server_name` char(64) NOT NULL DEFAULT '',
  `Host` char(64) NOT NULL DEFAULT '',
  `Db` char(64) NOT NULL DEFAULT '',
  `Username` char(80) NOT NULL DEFAULT '',
  `Password` char(64) NOT NULL DEFAULT '',
  `Port` int(4) NOT NULL DEFAULT 0,
  `Socket` char(64) NOT NULL DEFAULT '',
  `Wrapper` char(64) NOT NULL DEFAULT '',
  `Owner` char(64) NOT NULL DEFAULT ''
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;

-- --------------------------------------------------------

--
-- Table structure for table `slow_log`
--

CREATE TABLE `slow_log` (
  `start_time` timestamp(6) NOT NULL DEFAULT current_timestamp(6) ON UPDATE current_timestamp(6),
  `user_host` mediumtext NOT NULL,
  `query_time` time(6) NOT NULL,
  `lock_time` time(6) NOT NULL,
  `rows_sent` int(11) NOT NULL,
  `rows_examined` int(11) NOT NULL,
  `db` varchar(512) NOT NULL,
  `last_insert_id` int(11) NOT NULL,
  `insert_id` int(11) NOT NULL,
  `server_id` int(10) UNSIGNED NOT NULL,
  `sql_text` mediumtext NOT NULL,
  `thread_id` bigint(21) UNSIGNED NOT NULL,
  `rows_affected` int(11) NOT NULL
) ENGINE=CSV DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci COMMENT='Slow log';

-- --------------------------------------------------------

--
-- Table structure for table `tables_priv`
--

CREATE TABLE `tables_priv` (
  `Host` char(60) NOT NULL DEFAULT '',
  `Db` char(64) NOT NULL DEFAULT '',
  `User` char(80) NOT NULL DEFAULT '',
  `Table_name` char(64) NOT NULL DEFAULT '',
  `Grantor` char(141) NOT NULL DEFAULT '',
  `Timestamp` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  `Table_priv` set('Select','Insert','Update','Delete','Create','Drop','Grant','References','Index','Alter','Create View','Show view','Trigger','Delete versioning rows') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '',
  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT ''
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- --------------------------------------------------------

--
-- Table structure for table `table_barangay`
--

CREATE TABLE `table_barangay` (
  `barangay_id` int(11) NOT NULL,
  `municipality_id` int(11) DEFAULT NULL,
  `barangay_name` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `table_barangay`
--

INSERT INTO `table_barangay` (`barangay_id`, `municipality_id`, `barangay_name`) VALUES
(1, 1, 'Adams (Pob.)'),
(2, 2, 'Bani'),
(3, 2, 'Buyon'),
(4, 2, 'Cabaruan'),
(5, 2, 'Cabulalaan'),
(6, 2, 'Cabusligan'),
(7, 2, 'Cadaratan'),
(8, 2, 'Calioet-Libong'),
(9, 2, 'Casilian'),
(10, 2, 'Corocor'),
(11, 2, 'Duripes'),
(12, 2, 'Ganagan'),
(13, 2, 'Libtong'),
(14, 2, 'Macupit'),
(15, 2, 'Nambaran'),
(16, 2, 'Natba'),
(17, 2, 'Paninaan'),
(18, 2, 'Pasiocan'),
(19, 2, 'Pasngal'),
(20, 2, 'Pipias'),
(21, 2, 'Pulangi'),
(22, 2, 'Pungto'),
(23, 2, 'San Agustin I (Pob.)'),
(24, 2, 'San Agustin II (Pob.)'),
(25, 2, 'San Andres I (Pob.)'),
(26, 2, 'San Andres II (Pob.)'),
(27, 2, 'San Gabriel I (Pob.)'),
(28, 2, 'San Gabriel II (Pob.)'),
(29, 2, 'San Pedro I (Pob.)'),
(30, 2, 'San Pedro II (Pob.)'),
(31, 2, 'San Roque I (Pob.)'),
(32, 2, 'San Roque II (Pob.)'),
(33, 2, 'San Simon I (Pob.)'),
(34, 2, 'San Simon II (Pob.)'),
(35, 2, 'San Vicente (Pob.)'),
(36, 2, 'Sangil'),
(37, 2, 'Santa Filomena I (Pob.)'),
(38, 2, 'Santa Filomena II (Pob.)'),
(39, 2, 'Santa Rita (Pob.)'),
(40, 2, 'Santo Cristo I (Pob.)'),
(41, 2, 'Santo Cristo II (Pob.)'),
(42, 2, 'Tambidao'),
(43, 2, 'Teppang'),
(44, 2, 'Tubburan'),
(45, 3, 'Alay-Nangbabaan'),
(46, 3, 'Alogoog'),
(47, 3, 'Ar-arusip'),
(48, 3, 'Aring'),
(49, 3, 'Balbaldez'),
(50, 3, 'Bato'),
(51, 3, 'Camanga'),
(52, 3, 'Canaan (Pob.)'),
(53, 3, 'Caraitan'),
(54, 3, 'Gabut Norte'),
(55, 3, 'Gabut Sur'),
(56, 3, 'Garreta (Pob.)'),
(57, 3, 'Labut'),
(58, 3, 'Lacuben'),
(59, 3, 'Lubigan'),
(60, 3, 'Mabusag Norte'),
(61, 3, 'Mabusag Sur'),
(62, 3, 'Madupayas'),
(63, 3, 'Morong'),
(64, 3, 'Nagrebcan'),
(65, 3, 'Napu'),
(66, 3, 'La Virgen Milagrosa'),
(67, 3, 'Pagsanahan Norte'),
(68, 3, 'Pagsanahan Sur'),
(69, 3, 'Paltit'),
(70, 3, 'Parang'),
(71, 3, 'Pasuc'),
(72, 3, 'Santa Cruz Norte'),
(73, 3, 'Santa Cruz Sur'),
(74, 3, 'Saud'),
(75, 3, 'Turod'),
(76, 4, 'Abaca'),
(77, 4, 'Bacsil'),
(78, 4, 'Banban'),
(79, 4, 'Baruyen'),
(80, 4, 'Dadaor'),
(81, 4, 'Lanao'),
(82, 4, 'Malasin'),
(83, 4, 'Manayon'),
(84, 4, 'Masikil'),
(85, 4, 'Nagbalagan'),
(86, 4, 'Payac'),
(87, 4, 'San Lorenzo (Pob.)'),
(88, 4, 'Taguiporo'),
(89, 4, 'Utol'),
(90, 5, 'Aglipay (Pob.)'),
(91, 5, 'Baay'),
(92, 5, 'Baligat'),
(93, 5, 'Bungon'),
(94, 5, 'Baoa East'),
(95, 5, 'Baoa West'),
(96, 5, 'Barani (Pob.)'),
(97, 5, 'Ben-agan (Pob.)'),
(98, 5, 'Bil-loca'),
(99, 5, 'Biningan'),
(100, 5, 'Callaguip (Pob.)'),
(101, 5, 'Camandingan'),
(102, 5, 'Camguidan'),
(103, 5, 'Cangrunaan (Pob.)'),
(104, 5, 'Capacuan'),
(105, 5, 'Caunayan (Pob.)'),
(106, 5, 'Valdez Pob.'),
(107, 5, 'Colo'),
(108, 5, 'Pimentel'),
(109, 5, 'Dariwdiw'),
(110, 5, 'Acosta Pob.'),
(111, 5, 'Ablan Pob.'),
(112, 5, 'Lacub (Pob.)'),
(113, 5, 'Mabaleng'),
(114, 5, 'Magnuang'),
(115, 5, 'Maipalig'),
(116, 5, 'Nagbacalan'),
(117, 5, 'Naguirangan'),
(118, 5, 'Ricarte Pob.'),
(119, 5, 'Palongpong'),
(120, 5, 'Palpalicong (Pob.)'),
(121, 5, 'Parangopong'),
(122, 5, 'Payao'),
(123, 5, 'Quiling Norte'),
(124, 5, 'Quiling Sur'),
(125, 5, 'Quiom'),
(126, 5, 'Rayuray'),
(127, 5, 'San Julian (Pob.)'),
(128, 5, 'San Mateo'),
(129, 5, 'San Pedro'),
(130, 5, 'Suabit (Pob.)'),
(131, 5, 'Sumader'),
(132, 5, 'Tabug'),
(133, 6, 'Ablan Sarat'),
(134, 6, 'Agaga'),
(135, 6, 'Bayog'),
(136, 6, 'Bobon'),
(137, 6, 'Buduan'),
(138, 6, 'Nagsurot'),
(139, 6, 'Paayas'),
(140, 6, 'Pagali'),
(141, 6, 'Poblacion'),
(142, 6, 'Saoit'),
(143, 6, 'Tanap'),
(144, 7, 'Angset'),
(145, 7, 'Barbaqueso (Pob.)'),
(146, 7, 'Virbira'),
(147, 8, 'Anggapang Norte'),
(148, 8, 'Anggapang Sur'),
(149, 8, 'Bimmanga'),
(150, 8, 'Cabuusan'),
(151, 8, 'Comcomloong'),
(152, 8, 'Gaang'),
(153, 8, 'Lang-ayan-Baramban'),
(154, 8, 'Lioes'),
(155, 8, 'Maglaoi Centro'),
(156, 8, 'Maglaoi Norte'),
(157, 8, 'Maglaoi Sur'),
(158, 8, 'Paguludan-Salindeg'),
(159, 8, 'Pangil'),
(160, 8, 'Pias Norte'),
(161, 8, 'Pias Sur'),
(162, 8, 'Poblacion I'),
(163, 8, 'Poblacion II'),
(164, 8, 'Salugan'),
(165, 8, 'San Simeon'),
(166, 8, 'Santa Cruz'),
(167, 8, 'Tapao-Tigue'),
(168, 8, 'Torre'),
(169, 8, 'Victoria'),
(170, 9, 'Albano (Pob.)'),
(171, 9, 'Bacsil'),
(172, 9, 'Bagut'),
(173, 9, 'Parado (Bangay)'),
(174, 9, 'Baresbes'),
(175, 9, 'Barong'),
(176, 9, 'Bungcag'),
(177, 9, 'Cali'),
(178, 9, 'Capasan'),
(179, 9, 'Dancel (Pob.)'),
(180, 9, 'Foz'),
(181, 9, 'Guerrero (Pob.)'),
(182, 9, 'Lanas'),
(183, 9, 'Lumbad'),
(184, 9, 'Madamba (Pob.)'),
(185, 9, 'Mandaloque'),
(186, 9, 'Medina'),
(187, 9, 'Ver'),
(188, 9, 'San Marcelino'),
(189, 9, 'Puruganan (Pob.)'),
(190, 9, 'Peralta (Pob.)'),
(191, 9, 'Root'),
(192, 9, 'Sagpatan'),
(193, 9, 'Saludares'),
(194, 9, 'San Esteban'),
(195, 9, 'Espiritu'),
(196, 9, 'Sulquiano'),
(197, 9, 'San Francisco'),
(198, 9, 'Suyo'),
(199, 9, 'San Marcos'),
(200, 9, 'Elizabeth'),
(201, 10, 'Cabaritan'),
(202, 10, 'San Isidro'),
(203, 10, 'Kalaw'),
(204, 10, 'Quibel'),
(205, 11, 'Balioeg'),
(206, 11, 'Bangsar'),
(207, 11, 'Barbarangay'),
(208, 11, 'Bomitog'),
(209, 11, 'Bugasi'),
(210, 11, 'Caestebanan'),
(211, 11, 'Caribquib'),
(212, 11, 'Catagtaguen'),
(213, 11, 'Crispina'),
(214, 11, 'Hilario (Pob.)'),
(215, 11, 'Imelda'),
(216, 11, 'Lorenzo (Pob.)'),
(217, 11, 'Macayepyep'),
(218, 11, 'Marcos (Pob.)'),
(219, 11, 'Nagpatayan'),
(220, 11, 'Valdez'),
(221, 11, 'Sinamar'),
(222, 11, 'Tabtabagan'),
(223, 11, 'Valenciano (Pob.)'),
(224, 11, 'Binacag'),
(225, 12, 'Bgy. No. 42, Apaya'),
(226, 12, 'Bgy. No. 36, Araniw'),
(227, 12, 'Bgy. No. 56-A, Bacsil North'),
(228, 12, 'Bgy. No. 56-B, Bacsil South'),
(229, 12, 'Bgy. No. 41, Balacad'),
(230, 12, 'Bgy. No. 40, Balatong'),
(231, 12, 'Bgy. No. 55-A, Barit-Pandan'),
(232, 12, 'Bgy. No. 47, Bengcag'),
(233, 12, 'Bgy. No. 50, Buttong'),
(234, 12, 'Bgy. No. 60-A, Caaoacan'),
(235, 12, 'Bry. No. 48-A, Cabungaan North'),
(236, 12, 'Bgy. No. 48-B, Cabungaan South'),
(237, 12, 'Bgy. No. 37, Calayab'),
(238, 12, 'Bgy. No. 54-B, Camangaan'),
(239, 12, 'Bgy. No. 58, Casili'),
(240, 12, 'Bgy. No. 61, Cataban'),
(241, 12, 'Bgy. No. 43, Cavit'),
(242, 12, 'Bgy. No. 49-A, Darayday'),
(243, 12, 'Bgy. No. 59-B, Dibua North'),
(244, 12, 'Bgy. No. 59-A, Dibua South'),
(245, 12, 'Bgy. No. 34-B, Gabu Norte East'),
(246, 12, 'Bgy. No. 34-A, Gabu Norte West'),
(247, 12, 'Bgy. No. 35, Gabu Sur'),
(248, 12, 'Bgy. No. 32-C La Paz East'),
(249, 12, 'Bgy. No. 33-B, La Paz Proper'),
(250, 12, 'Bgy. No. 32-B, La Paz West'),
(251, 12, 'Bgy. No. 54-A, Lagui-Sail'),
(252, 12, 'Bgy. No. 32-A, La Paz East'),
(253, 12, 'Bgy. No. 33-A, La Paz Proper'),
(254, 12, 'Bgy. No. 52-B, Lataag'),
(255, 12, 'Bgy. No. 60-B, Madiladig'),
(256, 12, 'Bgy. No. 38-A, Mangato East'),
(257, 12, 'Bgy. No. 38-B, Mangato West'),
(258, 12, 'Bgy. No. 62-A, Navotas North'),
(259, 12, 'Bgy. No. 62-B, Navotas South'),
(260, 12, 'Bgy. No. 46, Nalbo'),
(261, 12, 'Bgy. No. 51-A, Nangalisan East'),
(262, 12, 'Bgy. No. 51-B, Nangalisan West'),
(263, 12, 'Bgy. No. 24, Nstra. Sra. De Consolacion (Pob.)'),
(264, 12, 'Bgy. No. 7-A, Nstra. Sra. De Natividad (Pob.)'),
(265, 12, 'Bgy. No. 7-B, Nstra. Sra. De Natividad (Pob.)'),
(266, 12, 'Bgy. No. 27, Nstra. Sra. De Soledad (Pob.)'),
(267, 12, 'Bgy. No. 13, Nstra. Sra. De Visitacion (Pob.)'),
(268, 12, 'Bgy. No. 3, Nstra. Sra. Del Rosario (Pob.)'),
(269, 12, 'Bgy. No. 57, Pila'),
(270, 12, 'Bgy. No. 49-B, Raraburan'),
(271, 12, 'Bgy. No. 53, Rioeng'),
(272, 12, 'Bgy. No. 55-B, Salet-Bulangon'),
(273, 12, 'Bgy. No. 6, San Agustin (Pob.)'),
(274, 12, 'Bgy. No. 22, San Andres (Pob.)'),
(275, 12, 'Bgy. No. 28, San Bernardo (Pob.)'),
(276, 12, 'Bgy. No. 17, San Francisco (Pob.)'),
(277, 12, 'Bgy. No. 4, San Guillermo (Pob.)'),
(278, 12, 'Bgy. No. 15, San Guillermo (Pob.)'),
(279, 12, 'Bgy. No. 12, San Isidro (Pob.)'),
(280, 12, 'Bgy. No. 16, San Jacinto (Pob.)'),
(281, 12, 'Bgy. No. 10, San Jose (Pob.)'),
(282, 12, 'Bgy. No. 1, San Lorenzo (Pob.)'),
(283, 12, 'Bgy. No. 26, San Marcelino (Pob.)'),
(284, 12, 'Bgy. No. 52-A, San Mateo'),
(285, 12, 'Bgy. No. 23, San Matias (Pob.)'),
(286, 12, 'Bgy. No. 20, San Miguel (Pob.)'),
(287, 12, 'Bgy. No. 21, San Pedro (Pob.)'),
(288, 12, 'Bgy. No. 5, San Pedro (Pob.)'),
(289, 12, 'Bry. No. 18, San Quirino (Pob.)'),
(290, 12, 'Bgy. No. 8, San Vicente (Pob.)'),
(291, 12, 'Bgy. No. 9, Santa Angela (Pob.)'),
(292, 12, 'Bgy. No. 11, Santa Balbina (Pob.)'),
(293, 12, 'Bgy. No. 25, Santa Cayetana (Pob.)'),
(294, 12, 'Bgy. No. 2, Santa Joaquina (Pob.)'),
(295, 12, 'Bgy. No. 19, Santa Marcela (Pob.)'),
(296, 12, 'Bgy. No. 30-B, Santa Maria'),
(297, 12, 'Bgy. No. 39, Santa Rosa'),
(298, 12, 'Bgy. No. 14, Santo Tomas (Pob.)'),
(299, 12, 'Bgy. No. 29, Santo Tomas (Pob.)'),
(300, 12, 'Bgy. No. 30-A, Suyo'),
(301, 12, 'Bgy. No. 31, Talingaan'),
(302, 12, 'Bgy. No. 45, Tangid'),
(303, 12, 'Bgy. No. 55-C, Vira'),
(304, 12, 'Bgy. No. 44, Zamboanga'),
(305, 13, 'Pacifico'),
(306, 13, 'Imelda'),
(307, 13, 'Elizabeth'),
(308, 13, 'Daquioag'),
(309, 13, 'Escoda'),
(310, 13, 'Ferdinand'),
(311, 13, 'Fortuna'),
(312, 13, 'Lydia (Pob.)'),
(313, 13, 'Mabuti'),
(314, 13, 'Valdez'),
(315, 13, 'Tabucbuc'),
(316, 13, 'Santiago'),
(317, 13, 'Cacafean'),
(318, 14, 'Acnam'),
(319, 14, 'Barangobong'),
(320, 14, 'Barikir'),
(321, 14, 'Bugayong'),
(322, 14, 'Cabittauran'),
(323, 14, 'Caray'),
(324, 14, 'Garnaden'),
(325, 14, 'Naguillan'),
(326, 14, 'Poblacion'),
(327, 14, 'Santo Niño'),
(328, 14, 'Uguis'),
(329, 15, 'Aggasi'),
(330, 15, 'Baduang'),
(331, 15, 'Balaoi'),
(332, 15, 'Burayoc'),
(333, 15, 'Caunayan'),
(334, 15, 'Dampig'),
(335, 15, 'Ligaya'),
(336, 15, 'Pancian'),
(337, 15, 'Pasaleng'),
(338, 15, 'Poblacion 1'),
(339, 15, 'Poblacion 2'),
(340, 15, 'Saguigui'),
(341, 15, 'Saud'),
(342, 15, 'Subec'),
(343, 15, 'Tarrag'),
(344, 15, 'Caparispisan'),
(345, 16, 'Bacsil'),
(346, 16, 'Cabagoan'),
(347, 16, 'Cabangaran'),
(348, 16, 'Callaguip'),
(349, 16, 'Cayubog'),
(350, 16, 'Dolores'),
(351, 16, 'Laoa'),
(352, 16, 'Masintoc'),
(353, 16, 'Monte'),
(354, 16, 'Mumulaan'),
(355, 16, 'Nagbacalan'),
(356, 16, 'Nalasin'),
(357, 16, 'Nanguyudan'),
(358, 16, 'Oaig-Upay-Abulao'),
(359, 16, 'Pambaran'),
(360, 16, 'Pannaratan (Pob.)'),
(361, 16, 'Paratong'),
(362, 16, 'Pasil'),
(363, 16, 'Salbang (Pob.)'),
(364, 16, 'San Agustin'),
(365, 16, 'San Blas (Pob.)'),
(366, 16, 'San Juan'),
(367, 16, 'San Pedro'),
(368, 16, 'San Roque (Pob.)'),
(369, 16, 'Sangladan Pob.'),
(370, 16, 'Santa Rita (Pob.)'),
(371, 16, 'Sideg'),
(372, 16, 'Suba'),
(373, 16, 'Sungadan'),
(374, 16, 'Surgui'),
(375, 16, 'Veronica'),
(376, 17, 'Batuli'),
(377, 17, 'Binsang'),
(378, 17, 'Nalvo'),
(379, 17, 'Caruan'),
(380, 17, 'Carusikis'),
(381, 17, 'Carusipan'),
(382, 17, 'Dadaeman'),
(383, 17, 'Darupidip'),
(384, 17, 'Davila'),
(385, 17, 'Dilanis'),
(386, 17, 'Dilavo'),
(387, 17, 'Estancia'),
(388, 17, 'Naglicuan'),
(389, 17, 'Nagsanga'),
(390, 17, 'Ngabangab'),
(391, 17, 'Pangil'),
(392, 17, 'Poblacion 1'),
(393, 17, 'Poblacion 2'),
(394, 17, 'Poblacion 3'),
(395, 17, 'Poblacion 4'),
(396, 17, 'Pragata'),
(397, 17, 'Puyupuyan'),
(398, 17, 'Sulongan'),
(399, 17, 'Salpad'),
(400, 17, 'San Juan'),
(401, 17, 'Santa Catalina'),
(402, 17, 'Santa Matilde'),
(403, 17, 'Sapat'),
(404, 17, 'Sulbec'),
(405, 17, 'Surong'),
(406, 17, 'Susugaen'),
(407, 17, 'Tabungao'),
(408, 17, 'Tadao'),
(409, 18, 'Ab-abut'),
(410, 18, 'Abucay'),
(411, 18, 'Anao (Pob.)'),
(412, 18, 'Arua-ay'),
(413, 18, 'Bimmanga'),
(414, 18, 'Boyboy'),
(415, 18, 'Cabaroan (Pob.)'),
(416, 18, 'Calambeg'),
(417, 18, 'Callusa'),
(418, 18, 'Dupitac'),
(419, 18, 'Estancia'),
(420, 18, 'Gayamat'),
(421, 18, 'Lagandit'),
(422, 18, 'Libnaoan'),
(423, 18, 'Loing (Pob.)'),
(424, 18, 'Maab-abaca'),
(425, 18, 'Mangitayag'),
(426, 18, 'Maruaya'),
(427, 18, 'San Antonio'),
(428, 18, 'Santa Maria'),
(429, 18, 'Sucsuquen'),
(430, 18, 'Tangaoan'),
(431, 18, 'Tonoton'),
(432, 19, 'Aglipay'),
(433, 19, 'Apatut-Lubong'),
(434, 19, 'Badio'),
(435, 19, 'Barbar'),
(436, 19, 'Buanga'),
(437, 19, 'Bulbulala'),
(438, 19, 'Bungro'),
(439, 19, 'Cabaroan'),
(440, 19, 'Capangdanan'),
(441, 19, 'Dalayap'),
(442, 19, 'Darat'),
(443, 19, 'Gulpeng'),
(444, 19, 'Liliputen'),
(445, 19, 'Lumbaan-Bicbica'),
(446, 19, 'Nagtrigoan'),
(447, 19, 'Pagdilao (Pob.)'),
(448, 19, 'Pugaoan'),
(449, 19, 'Puritac'),
(450, 19, 'Sacritan'),
(451, 19, 'Salanap'),
(452, 19, 'Santo Tomas'),
(453, 19, 'Tartarabang'),
(454, 19, 'Puzol'),
(455, 19, 'Upon'),
(456, 19, 'Valbuena (Pob.)'),
(457, 20, 'San Francisco (Pob.)'),
(458, 20, 'San Ildefonso (Pob.)'),
(459, 20, 'San Agustin'),
(460, 20, 'San Baltazar (Pob.)'),
(461, 20, 'San Bartolome (Pob.)'),
(462, 20, 'San Cayetano (Pob.)'),
(463, 20, 'San Eugenio (Pob.)'),
(464, 20, 'San Fernando (Pob.)'),
(465, 20, 'San Gregorio (Pob.)'),
(466, 20, 'San Guillermo'),
(467, 20, 'San Jose (Pob.)'),
(468, 20, 'San Juan Bautista (Pob.)'),
(469, 20, 'San Lorenzo'),
(470, 20, 'San Lucas (Pob.)'),
(471, 20, 'San Marcos'),
(472, 20, 'San Miguel (Pob.)'),
(473, 20, 'San Pablo'),
(474, 20, 'San Paulo (Pob.)'),
(475, 20, 'San Pedro'),
(476, 20, 'San Rufino (Pob.)'),
(477, 20, 'San Silvestre (Pob.)'),
(478, 20, 'Santa Asuncion'),
(479, 20, 'Santa Cecilia'),
(480, 20, 'Santa Monica'),
(481, 21, 'San Agustin (Pob.)'),
(482, 21, 'San Andres'),
(483, 21, 'San Antonio'),
(484, 21, 'San Bernabe'),
(485, 21, 'San Cristobal'),
(486, 21, 'San Felipe'),
(487, 21, 'San Francisco (Pob.)'),
(488, 21, 'San Isidro'),
(489, 21, 'San Joaquin (Pob.)'),
(490, 21, 'San Jose'),
(491, 21, 'San Juan'),
(492, 21, 'San Leandro (Pob.)'),
(493, 21, 'San Lorenzo'),
(494, 21, 'San Manuel'),
(495, 21, 'San Marcos'),
(496, 21, 'San Nicolas'),
(497, 21, 'San Pedro'),
(498, 21, 'San Roque'),
(499, 21, 'San Vicente (Pob.)'),
(500, 21, 'Santa Barbara (Pob.)'),
(501, 21, 'Santa Magdalena'),
(502, 21, 'Santa Rosa'),
(503, 21, 'Santo Santiago'),
(504, 21, 'Santo Tomas'),
(505, 22, 'Aguitap'),
(506, 22, 'Bagbag'),
(507, 22, 'Bagbago'),
(508, 22, 'Barcelona'),
(509, 22, 'Bubuos'),
(510, 22, 'Capurictan'),
(511, 22, 'Catangraran'),
(512, 22, 'Darasdas'),
(513, 22, 'Juan (Pob.)'),
(514, 22, 'Laureta (Pob.)'),
(515, 22, 'Lipay'),
(516, 22, 'Maananteng'),
(517, 22, 'Manalpac'),
(518, 22, 'Mariquet'),
(519, 22, 'Nagpatpatan'),
(520, 22, 'Nalasin'),
(521, 22, 'Puttao'),
(522, 22, 'San Juan'),
(523, 22, 'San Julian'),
(524, 22, 'Santa Ana'),
(525, 22, 'Santiago'),
(526, 22, 'Talugtog'),
(527, 23, 'Abkir'),
(528, 23, 'Alsem'),
(529, 23, 'Bago'),
(530, 23, 'Bulbulala'),
(531, 23, 'Cabangaran'),
(532, 23, 'Cabayo'),
(533, 23, 'Cabisocolan'),
(534, 23, 'Canaam'),
(535, 23, 'Columbia'),
(536, 23, 'Dagupan'),
(537, 23, 'Pedro F. Alviar'),
(538, 23, 'Dipilat'),
(539, 23, 'Esperanza'),
(540, 23, 'Ester'),
(541, 23, 'Isic Isic'),
(542, 23, 'Lubnac'),
(543, 23, 'Mabanbanag'),
(544, 23, 'Alejo Malasig'),
(545, 23, 'Manarang'),
(546, 23, 'Margaay'),
(547, 23, 'Namoroc'),
(548, 23, 'Malampa'),
(549, 23, 'Parparoroc'),
(550, 23, 'Parut'),
(551, 23, 'Salsalamagui'),
(552, 23, 'San Jose'),
(553, 23, 'San Nicolas (Pob.)'),
(554, 23, 'San Pedro (Pob.)'),
(555, 23, 'San Ramon (Pob.)'),
(556, 23, 'San Roque (Pob.)'),
(557, 23, 'Santa Maria (Pob.)'),
(558, 23, 'Tamdagan'),
(559, 23, 'Visaya'),
(560, 24, 'Alilem Daya (Pob.)'),
(561, 24, 'Amilongan'),
(562, 24, 'Anaao'),
(563, 24, 'Apang'),
(564, 24, 'Apaya'),
(565, 24, 'Batbato'),
(566, 24, 'Daddaay'),
(567, 24, 'Dalawa'),
(568, 24, 'Kiat'),
(569, 25, 'Bagbagotot'),
(570, 25, 'Banbanaal'),
(571, 25, 'Bisangol'),
(572, 25, 'Cadanglaan'),
(573, 25, 'Casilagan Norte'),
(574, 25, 'Casilagan Sur'),
(575, 25, 'Elefante'),
(576, 25, 'Guardia'),
(577, 25, 'Lintic'),
(578, 25, 'Lopez'),
(579, 25, 'Montero'),
(580, 25, 'Naguimba'),
(581, 25, 'Pila'),
(582, 25, 'Poblacion'),
(583, 26, 'Aggay'),
(584, 26, 'An-annam'),
(585, 26, 'Balaleng'),
(586, 26, 'Banaoang'),
(587, 26, 'Bulag'),
(588, 26, 'Buquig'),
(589, 26, 'Cabalanggan'),
(590, 26, 'Cabaroan'),
(591, 26, 'Cabusligan'),
(592, 26, 'Capangdanan'),
(593, 26, 'Guimod'),
(594, 26, 'Lingsat'),
(595, 26, 'Malingeb'),
(596, 26, 'Mira'),
(597, 26, 'Naguiddayan'),
(598, 26, 'Ora'),
(599, 26, 'Paing'),
(600, 26, 'Puspus'),
(601, 26, 'Quimmarayan'),
(602, 26, 'Sagneb'),
(603, 26, 'Sagpat'),
(604, 26, 'San Mariano'),
(605, 26, 'San Isidro'),
(606, 26, 'San Julian'),
(607, 26, 'Sinabaan'),
(608, 26, 'Taguiporo'),
(609, 26, 'Taleb'),
(610, 26, 'Tay-ac'),
(611, 26, 'Barangay 1 (Pob.)'),
(612, 26, 'Barangay 2 (Pob.)'),
(613, 26, 'Barangay 3 (Pob.)'),
(614, 26, 'Barangay 4 (Pob.)'),
(615, 26, 'Barangay 5 (Pob.)'),
(616, 26, 'Barangay 6 (Pob.)'),
(617, 27, 'Ambugat'),
(618, 27, 'Balugang'),
(619, 27, 'Bangbangar'),
(620, 27, 'Bessang'),
(621, 27, 'Cabcaburao'),
(622, 27, 'Cadacad'),
(623, 27, 'Callitong'),
(624, 27, 'Dayanki'),
(625, 27, 'Lesseb'),
(626, 27, 'Lubing'),
(627, 27, 'Lucaban'),
(628, 27, 'Luna'),
(629, 27, 'Macaoayan'),
(630, 27, 'Mambug'),
(631, 27, 'Manaboc'),
(632, 27, 'Mapanit'),
(633, 27, 'Poblacion Sur'),
(634, 27, 'Nagpanaoan'),
(635, 27, 'Dirdirig'),
(636, 27, 'Paduros'),
(637, 27, 'Patac'),
(638, 27, 'Poblacion Norte'),
(639, 27, 'Sabangan Pinggan'),
(640, 27, 'Subadi Norte'),
(641, 27, 'Subadi Sur'),
(642, 27, 'Taliao'),
(643, 28, 'Alinaay'),
(644, 28, 'Aragan'),
(645, 28, 'Arnap'),
(646, 28, 'Baclig (Pob.)'),
(647, 28, 'Bato'),
(648, 28, 'Bonifacio (Pob.)'),
(649, 28, 'Bungro'),
(650, 28, 'Cacadiran'),
(651, 28, 'Caellayan'),
(652, 28, 'Carusipan'),
(653, 28, 'Catucdaan'),
(654, 28, 'Cuancabal'),
(655, 28, 'Cuantacla'),
(656, 28, 'Daclapan'),
(657, 28, 'Dardarat'),
(658, 28, 'Lipit'),
(659, 28, 'Maradodon'),
(660, 28, 'Margaay'),
(661, 28, 'Nagsantaan'),
(662, 28, 'Nagsincaoan'),
(663, 28, 'Namruangan'),
(664, 28, 'Pila'),
(665, 28, 'Pug-os'),
(666, 28, 'Quezon (Pob.)'),
(667, 28, 'Reppaac'),
(668, 28, 'Rizal (Pob.)'),
(669, 28, 'Sabang'),
(670, 28, 'Sagayaden'),
(671, 28, 'Salapasap'),
(672, 28, 'Salomague'),
(673, 28, 'Sisim'),
(674, 28, 'Turod'),
(675, 28, 'Turod-Patac'),
(676, 29, 'Allangigan Primero'),
(677, 29, 'Allangigan Segundo'),
(678, 29, 'Amguid'),
(679, 29, 'Ayudante'),
(680, 29, 'Bagani Camposanto'),
(681, 29, 'Bagani Gabor'),
(682, 29, 'Bagani Tocgo'),
(683, 29, 'Bagani Ubbog'),
(684, 29, 'Bagar'),
(685, 29, 'Balingaoan'),
(686, 29, 'Bugnay'),
(687, 29, 'Calaoaan'),
(688, 29, 'Calongbuyan'),
(689, 29, 'Caterman'),
(690, 29, 'Cubcubboot'),
(691, 29, 'Darapidap'),
(692, 29, 'Langlangca Primero'),
(693, 29, 'Langlangca Segundo'),
(694, 29, 'Oaig-Daya'),
(695, 29, 'Palacapac'),
(696, 29, 'Paras'),
(697, 29, 'Parioc Primero'),
(698, 29, 'Parioc Segundo'),
(699, 29, 'Patpata Primero'),
(700, 29, 'Patpata Segundo'),
(701, 29, 'Paypayad'),
(702, 29, 'Salvador Primero'),
(703, 29, 'Salvador Segundo'),
(704, 29, 'San Agustin'),
(705, 29, 'San Andres'),
(706, 29, 'San Antonio (Pob.)'),
(707, 29, 'San Isidro (Pob.)'),
(708, 29, 'San Jose (Pob.)'),
(709, 29, 'San Juan (Pob.)'),
(710, 29, 'San Nicolas'),
(711, 29, 'San Pedro'),
(712, 29, 'Santo Tomas'),
(713, 29, 'Tablac'),
(714, 29, 'Talogtog'),
(715, 29, 'Tamurong Primero'),
(716, 29, 'Tamurong Segundo'),
(717, 29, 'Villarica'),
(718, 30, 'Anonang Mayor'),
(719, 30, 'Anonang Menor'),
(720, 30, 'Baggoc'),
(721, 30, 'Callaguip'),
(722, 30, 'Caparacadan'),
(723, 30, 'Fuerte'),
(724, 30, 'Manangat'),
(725, 30, 'Naguilian'),
(726, 30, 'Nansuagao'),
(727, 30, 'Pandan'),
(728, 30, 'Pantay-Quitiquit'),
(729, 30, 'Don Dimas Querubin (Pob.)'),
(730, 30, 'Puro'),
(731, 30, 'Pantay Tamurong'),
(732, 30, 'Villamar'),
(733, 30, 'Don Alejandro Quirolgico (Pob.)'),
(734, 30, 'Don Lorenzo Querubin (Pob.)'),
(735, 31, 'Aluling'),
(736, 31, 'Comillas North'),
(737, 31, 'Comillas South'),
(738, 31, 'Concepcion (Pob.)'),
(739, 31, 'Dinwede East'),
(740, 31, 'Dinwede West'),
(741, 31, 'Libang'),
(742, 31, 'Pilipil'),
(743, 31, 'Remedios'),
(744, 31, 'Rosario (Pob.)'),
(745, 31, 'San Juan'),
(746, 31, 'San Luis'),
(747, 31, 'Malaya'),
(748, 32, 'Abaya'),
(749, 32, 'Baracbac'),
(750, 32, 'Bidbiday'),
(751, 32, 'Bitong'),
(752, 32, 'Borobor'),
(753, 32, 'Calimugtong'),
(754, 32, 'Calongbuyan'),
(755, 32, 'Calumbaya'),
(756, 32, 'Daldagan'),
(757, 32, 'Kilang'),
(758, 32, 'Legaspi'),
(759, 32, 'Mabayag'),
(760, 32, 'Matanubong'),
(761, 32, 'Mckinley'),
(762, 32, 'Nagsingcaoan'),
(763, 32, 'Oaig-Daya'),
(764, 32, 'Pagangpang'),
(765, 32, 'Patac'),
(766, 32, 'Poblacion'),
(767, 32, 'Rubio'),
(768, 32, 'Sabangan-Bato'),
(769, 32, 'Sacaang'),
(770, 32, 'San Vicente'),
(771, 32, 'Sapang'),
(772, 33, 'Alfonso'),
(773, 33, 'Bussot'),
(774, 33, 'Concepcion'),
(775, 33, 'Dapdappig'),
(776, 33, 'Matue-Butarag'),
(777, 33, 'Poblacion Norte'),
(778, 33, 'Poblacion Sur'),
(779, 34, 'Banucal'),
(780, 34, 'Bequi-Walin'),
(781, 34, 'Bugui'),
(782, 34, 'Calungbuyan'),
(783, 34, 'Carcarabasa'),
(784, 34, 'Labut'),
(785, 34, 'Poblacion Norte'),
(786, 34, 'Poblacion Sur'),
(787, 34, 'San Vicente'),
(788, 34, 'Suysuyan'),
(789, 34, 'Tay-ac'),
(790, 35, 'Alangan'),
(791, 35, 'Bacar'),
(792, 35, 'Barbarit'),
(793, 35, 'Bungro'),
(794, 35, 'Cabaroan'),
(795, 35, 'Cadanglaan'),
(796, 35, 'Caraisan'),
(797, 35, 'Dacutan'),
(798, 35, 'Labut'),
(799, 35, 'Maas-asin'),
(800, 35, 'Macatcatud'),
(801, 35, 'Namalpalan'),
(802, 35, 'Manzante'),
(803, 35, 'Maratudo'),
(804, 35, 'Miramar'),
(805, 35, 'Napo'),
(806, 35, 'Pagsanaan Norte'),
(807, 35, 'Pagsanaan Sur'),
(808, 35, 'Panay Norte'),
(809, 35, 'Panay Sur'),
(810, 35, 'Patong'),
(811, 35, 'Puro'),
(812, 35, 'San Basilio (Pob.)'),
(813, 35, 'San Clemente (Pob.)'),
(814, 35, 'San Julian (Pob.)'),
(815, 35, 'San Lucas (Pob.)'),
(816, 35, 'San Ramon (Pob.)'),
(817, 35, 'San Vicente (Pob.)'),
(818, 35, 'Santa Monica'),
(819, 35, 'Sarsaracat'),
(820, 36, 'Balaweg'),
(821, 36, 'Bandril'),
(822, 36, 'Bantugo'),
(823, 36, 'Cadacad'),
(824, 36, 'Casilagan'),
(825, 36, 'Casocos'),
(826, 36, 'Lapting'),
(827, 36, 'Mapisi'),
(828, 36, 'Mission'),
(829, 36, 'Poblacion East'),
(830, 36, 'Poblacion West'),
(831, 36, 'Taleb'),
(832, 37, 'Abuor'),
(833, 37, 'Ambulogan'),
(834, 37, 'Aquib'),
(835, 37, 'Banglayan'),
(836, 37, 'Bulanos'),
(837, 37, 'Cadacad'),
(838, 37, 'Cagayungan'),
(839, 37, 'Camarao'),
(840, 37, 'Casilagan'),
(841, 37, 'Codoog'),
(842, 37, 'Dasay'),
(843, 37, 'Dinalaoan'),
(844, 37, 'Estancia'),
(845, 37, 'Lanipao'),
(846, 37, 'Lungog'),
(847, 37, 'Margaay'),
(848, 37, 'Marozo'),
(849, 37, 'Naguneg'),
(850, 37, 'Orence'),
(851, 37, 'Pantoc'),
(852, 37, 'Paratong'),
(853, 37, 'Parparia'),
(854, 37, 'Quinarayan'),
(855, 37, 'Rivadavia'),
(856, 37, 'San Antonio'),
(857, 37, 'San Jose (Pob.)'),
(858, 37, 'San Pablo'),
(859, 37, 'San Pedro'),
(860, 37, 'Santa Lucia (Pob.)'),
(861, 37, 'Sarmingan'),
(862, 37, 'Sucoc'),
(863, 37, 'Sulvec'),
(864, 37, 'Turod'),
(865, 37, 'Bantay Abot'),
(866, 38, 'Banoen'),
(867, 38, 'Cayus'),
(868, 38, 'Patungcaleo'),
(869, 38, 'Malideg'),
(870, 38, 'Namitpit'),
(871, 38, 'Patiacan'),
(872, 38, 'Legleg (Pob.)'),
(873, 38, 'Suagayan'),
(874, 38, 'Lamag'),
(875, 39, 'Atabay'),
(876, 39, 'Calangcuasan'),
(877, 39, 'Balidbid'),
(878, 39, 'Baluarte'),
(879, 39, 'Baybayading'),
(880, 39, 'Boguibog'),
(881, 39, 'Bulala-Leguey'),
(882, 39, 'Kaliwakiw'),
(883, 39, 'Culiong'),
(884, 39, 'Dinaratan'),
(885, 39, 'Kinmarin'),
(886, 39, 'Lucbuban'),
(887, 39, 'Madarang'),
(888, 39, 'Maligcong'),
(889, 39, 'Pias'),
(890, 39, 'Poblacion Norte'),
(891, 39, 'Poblacion Sur'),
(892, 39, 'San Gaspar'),
(893, 39, 'San Tiburcio'),
(894, 39, 'Sorioan'),
(895, 39, 'Ubbog'),
(896, 40, 'Cabaroan (Pob.)'),
(897, 40, 'Kalumsing'),
(898, 40, 'Lancuas'),
(899, 40, 'Matibuey'),
(900, 40, 'Paltoc'),
(901, 40, 'Sibsibbu'),
(902, 40, 'Tiagan'),
(903, 40, 'San Miliano'),
(904, 41, 'Ansad'),
(905, 41, 'Apatot'),
(906, 41, 'Bateria'),
(907, 41, 'Cabaroan'),
(908, 41, 'Cappa-cappa'),
(909, 41, 'Poblacion'),
(910, 41, 'San Nicolas'),
(911, 41, 'San Pablo'),
(912, 41, 'San Rafael'),
(913, 41, 'Villa Quirino'),
(914, 42, 'Arnap'),
(915, 42, 'Bahet'),
(916, 42, 'Belen'),
(917, 42, 'Bungro'),
(918, 42, 'Busiing Sur'),
(919, 42, 'Busiing Norte'),
(920, 42, 'Dongalo'),
(921, 42, 'Gongogong'),
(922, 42, 'Iboy'),
(923, 42, 'Otol-Patac'),
(924, 42, 'Poblacion East'),
(925, 42, 'Poblacion West'),
(926, 42, 'Kinamantirisan'),
(927, 42, 'Sagneb'),
(928, 42, 'Sagsagat'),
(929, 43, 'Bacsil'),
(930, 43, 'Baliw'),
(931, 43, 'Bannuar (Pob.)'),
(932, 43, 'Barbar'),
(933, 43, 'Cabanglotan'),
(934, 43, 'Cacandongan'),
(935, 43, 'Camanggaan'),
(936, 43, 'Camindoroan'),
(937, 43, 'Caronoan'),
(938, 43, 'Darao'),
(939, 43, 'Dardarat'),
(940, 43, 'Guimod Norte'),
(941, 43, 'Guimod Sur'),
(942, 43, 'Immayos Norte'),
(943, 43, 'Immayos Sur'),
(944, 43, 'Labnig'),
(945, 43, 'Lapting'),
(946, 43, 'Lira (Pob.)'),
(947, 43, 'Malamin'),
(948, 43, 'Muraya'),
(949, 43, 'Nagsabaran'),
(950, 43, 'Nagsupotan'),
(951, 43, 'Pandayan (Pob.)'),
(952, 43, 'Refaro'),
(953, 43, 'Resurreccion (Pob.)'),
(954, 43, 'Sabangan'),
(955, 43, 'San Isidro'),
(956, 43, 'Saoang'),
(957, 43, 'Solotsolot'),
(958, 43, 'Sunggiam'),
(959, 43, 'Surngit'),
(960, 43, 'Asilang'),
(961, 44, 'Bantaoay'),
(962, 44, 'Bayubay Norte'),
(963, 44, 'Bayubay Sur'),
(964, 44, 'Lubong'),
(965, 44, 'Poblacion'),
(966, 44, 'Pudoc'),
(967, 44, 'San Sebastian'),
(968, 45, 'Ampandula'),
(969, 45, 'Banaoang'),
(970, 45, 'Basug'),
(971, 45, 'Bucalag'),
(972, 45, 'Cabangaran'),
(973, 45, 'Calungboyan'),
(974, 45, 'Casiber'),
(975, 45, 'Dammay'),
(976, 45, 'Labut Norte'),
(977, 45, 'Labut Sur'),
(978, 45, 'Mabilbila Sur'),
(979, 45, 'Mabilbila Norte'),
(980, 45, 'Magsaysay District (Pob.)'),
(981, 45, 'Manueva'),
(982, 45, 'Marcos (Pob.)'),
(983, 45, 'Nagpanaoan'),
(984, 45, 'Namalangan'),
(985, 45, 'Oribi'),
(986, 45, 'Pasungol'),
(987, 45, 'Quezon (Pob.)'),
(988, 45, 'Quirino (Pob.)'),
(989, 45, 'Rancho'),
(990, 45, 'Rizal'),
(991, 45, 'Sacuyya Norte'),
(992, 45, 'Sacuyya Sur'),
(993, 45, 'Tabucolan'),
(994, 46, 'Cabaroan'),
(995, 46, 'Cabittaogan'),
(996, 46, 'Cabuloan'),
(997, 46, 'Pangada'),
(998, 46, 'Paratong'),
(999, 46, 'Poblacion'),
(1000, 46, 'Sinabaan'),
(1001, 46, 'Subec'),
(1002, 46, 'Tamorong'),
(1003, 47, 'Amarao'),
(1004, 47, 'Babayoan'),
(1005, 47, 'Bacsayan'),
(1006, 47, 'Banay'),
(1007, 47, 'Bayugao Este'),
(1008, 47, 'Bayugao Oeste'),
(1009, 47, 'Besalan'),
(1010, 47, 'Bugbuga'),
(1011, 47, 'Calaoaan'),
(1012, 47, 'Camanggaan'),
(1013, 47, 'Candalican'),
(1014, 47, 'Capariaan'),
(1015, 47, 'Casilagan'),
(1016, 47, 'Coscosnong'),
(1017, 47, 'Daligan'),
(1018, 47, 'Dili'),
(1019, 47, 'Gabor Norte'),
(1020, 47, 'Gabor Sur'),
(1021, 47, 'Lalong'),
(1022, 47, 'Lantag'),
(1023, 47, 'Las-ud'),
(1024, 47, 'Mambog'),
(1025, 47, 'Mantanas'),
(1026, 47, 'Nagtengnga'),
(1027, 47, 'Padaoil'),
(1028, 47, 'Paratong'),
(1029, 47, 'Pattiqui'),
(1030, 47, 'Pidpid'),
(1031, 47, 'Pilar'),
(1032, 47, 'Pinipin'),
(1033, 47, 'Poblacion Este'),
(1034, 47, 'Poblacion Norte'),
(1035, 47, 'Poblacion Weste'),
(1036, 47, 'Poblacion Sur'),
(1037, 47, 'Quinfermin'),
(1038, 47, 'Quinsoriano'),
(1039, 47, 'Sagat'),
(1040, 47, 'San Antonio'),
(1041, 47, 'San Jose'),
(1042, 47, 'San Pedro'),
(1043, 47, 'Saoat'),
(1044, 47, 'Sevilla'),
(1045, 47, 'Sidaoen'),
(1046, 47, 'Suyo'),
(1047, 47, 'Tampugo'),
(1048, 47, 'Turod'),
(1049, 47, 'Villa Garcia'),
(1050, 47, 'Villa Hermosa'),
(1051, 47, 'Villa Laurencia'),
(1052, 48, 'Alincaoeg'),
(1053, 48, 'Angkileng'),
(1054, 48, 'Arangin'),
(1055, 48, 'Ayusan (Pob.)'),
(1056, 48, 'Banbanaba'),
(1057, 48, 'Bao-as'),
(1058, 48, 'Barangobong (Pob.)'),
(1059, 48, 'Buliclic'),
(1060, 48, 'Burgos (Pob.)'),
(1061, 48, 'Cabaritan'),
(1062, 48, 'Catayagan'),
(1063, 48, 'Conconig East'),
(1064, 48, 'Conconig West'),
(1065, 48, 'Damacuag'),
(1066, 48, 'Lubong'),
(1067, 48, 'Luba'),
(1068, 48, 'Nagrebcan'),
(1069, 48, 'Nagtablaan'),
(1070, 48, 'Namatican'),
(1071, 48, 'Nangalisan'),
(1072, 48, 'Palali Norte'),
(1073, 48, 'Palali Sur'),
(1074, 48, 'Paoc Norte'),
(1075, 48, 'Paoc Sur'),
(1076, 48, 'Paratong'),
(1077, 48, 'Pila East'),
(1078, 48, 'Pila West'),
(1079, 48, 'Quinabalayangan'),
(1080, 48, 'Ronda'),
(1081, 48, 'Sabuanan'),
(1082, 48, 'San Juan'),
(1083, 48, 'San Pedro'),
(1084, 48, 'Sapang'),
(1085, 48, 'Suagayan'),
(1086, 48, 'Vical'),
(1087, 48, 'Bani'),
(1088, 49, 'Ag-agrao'),
(1089, 49, 'Ampuagan'),
(1090, 49, 'Baballasioan'),
(1091, 49, 'Baliw Daya'),
(1092, 49, 'Baliw Laud'),
(1093, 49, 'Bia-o'),
(1094, 49, 'Butir'),
(1095, 49, 'Cabaroan'),
(1096, 49, 'Danuman East'),
(1097, 49, 'Danuman West'),
(1098, 49, 'Dunglayan'),
(1099, 49, 'Gusing'),
(1100, 49, 'Langaoan'),
(1101, 49, 'Laslasong Norte'),
(1102, 49, 'Laslasong Sur'),
(1103, 49, 'Laslasong West'),
(1104, 49, 'Lesseb'),
(1105, 49, 'Lingsat'),
(1106, 49, 'Lubong'),
(1107, 49, 'Maynganay Norte'),
(1108, 49, 'Maynganay Sur'),
(1109, 49, 'Nagsayaoan'),
(1110, 49, 'Nagtupacan'),
(1111, 49, 'Nalvo'),
(1112, 49, 'Pacang'),
(1113, 49, 'Penned'),
(1114, 49, 'Poblacion Norte'),
(1115, 49, 'Poblacion Sur'),
(1116, 49, 'Silag'),
(1117, 49, 'Sumagui'),
(1118, 49, 'Suso'),
(1119, 49, 'Tangaoan'),
(1120, 49, 'Tinaan'),
(1121, 50, 'Al-aludig'),
(1122, 50, 'Ambucao'),
(1123, 50, 'San Jose'),
(1124, 50, 'Baybayabas'),
(1125, 50, 'Bigbiga'),
(1126, 50, 'Bulbulala'),
(1127, 50, 'Busel-busel'),
(1128, 50, 'Butol'),
(1129, 50, 'Caburao'),
(1130, 50, 'Dan-ar'),
(1131, 50, 'Gabao'),
(1132, 50, 'Guinabang'),
(1133, 50, 'Imus'),
(1134, 50, 'Lang-ayan'),
(1135, 50, 'Mambug'),
(1136, 50, 'Nalasin'),
(1137, 50, 'Olo-olo Norte'),
(1138, 50, 'Olo-olo Sur'),
(1139, 50, 'Poblacion Norte'),
(1140, 50, 'Poblacion Sur'),
(1141, 50, 'Sabangan'),
(1142, 50, 'Salincub'),
(1143, 50, 'San Roque'),
(1144, 50, 'Ubbog'),
(1145, 51, 'Binalayangan'),
(1146, 51, 'Binongan'),
(1147, 51, 'Borobor'),
(1148, 51, 'Cabaritan'),
(1149, 51, 'Cabigbigaan'),
(1150, 51, 'Calautit'),
(1151, 51, 'Calay-ab'),
(1152, 51, 'Camestizoan'),
(1153, 51, 'Casili'),
(1154, 51, 'Flora'),
(1155, 51, 'Lagatit'),
(1156, 51, 'Laoingen'),
(1157, 51, 'Lussoc'),
(1158, 51, 'Nalasin'),
(1159, 51, 'Nagbettedan'),
(1160, 51, 'Naglaoa-an'),
(1161, 51, 'Nambaran'),
(1162, 51, 'Nanerman'),
(1163, 51, 'Napo'),
(1164, 51, 'Padu Chico'),
(1165, 51, 'Padu Grande'),
(1166, 51, 'Paguraper'),
(1167, 51, 'Panay'),
(1168, 51, 'Pangpangdan'),
(1169, 51, 'Parada'),
(1170, 51, 'Paras'),
(1171, 51, 'Poblacion'),
(1172, 51, 'Puerta Real'),
(1173, 51, 'Pussuac'),
(1174, 51, 'Quimmarayan'),
(1175, 51, 'San Pablo'),
(1176, 51, 'Santa Cruz'),
(1177, 51, 'Santo Tomas'),
(1178, 51, 'Sived'),
(1179, 51, 'Vacunero'),
(1180, 51, 'Suksukit'),
(1181, 52, 'Abaccan'),
(1182, 52, 'Mabileg'),
(1183, 52, 'Matallucod'),
(1184, 52, 'Poblacion'),
(1185, 52, 'San Elias'),
(1186, 52, 'San Ramon'),
(1187, 52, 'Santo Rosario'),
(1188, 53, 'Aguing'),
(1189, 53, 'Ballaigui (Pob.)'),
(1190, 53, 'Baliw'),
(1191, 53, 'Baracbac'),
(1192, 53, 'Barikir'),
(1193, 53, 'Battog'),
(1194, 53, 'Binacud'),
(1195, 53, 'Cabangtalan'),
(1196, 53, 'Cabarambanan'),
(1197, 53, 'Cabulalaan'),
(1198, 53, 'Cadanglaan'),
(1199, 53, 'Calingayan'),
(1200, 53, 'Curtin'),
(1201, 53, 'Dadalaquiten Norte'),
(1202, 53, 'Dadalaquiten Sur'),
(1203, 53, 'Duyayyat'),
(1204, 53, 'Jordan'),
(1205, 53, 'Calanutian'),
(1206, 53, 'Katipunan'),
(1207, 53, 'Macabiag (Pob.)'),
(1208, 53, 'Magsaysay'),
(1209, 53, 'Marnay'),
(1210, 53, 'Masadag'),
(1211, 53, 'Nagcullooban'),
(1212, 53, 'Nagbalioartian'),
(1213, 53, 'Nagongburan'),
(1214, 53, 'Namnama (Pob.)'),
(1215, 53, 'Pacis'),
(1216, 53, 'Paratong'),
(1217, 53, 'Dean Leopoldo Yabes'),
(1218, 53, 'Purag'),
(1219, 53, 'Quibit-quibit'),
(1220, 53, 'Quimmallogong'),
(1221, 53, 'Rang-ay (Pob.)'),
(1222, 53, 'Ricudo'),
(1223, 53, 'Sabañgan'),
(1224, 53, 'Sallacapo'),
(1225, 53, 'Santa Cruz'),
(1226, 53, 'Sapriana'),
(1227, 53, 'Tapao'),
(1228, 53, 'Teppeng'),
(1229, 53, 'Tubigay'),
(1230, 53, 'Ubbog'),
(1231, 53, 'Zapat'),
(1232, 54, 'Banga'),
(1233, 54, 'Caoayan'),
(1234, 54, 'Licungan'),
(1235, 54, 'Danac'),
(1236, 54, 'Pangotan'),
(1237, 54, 'Balbalayang (Pob.)'),
(1238, 55, 'Baringcucurong'),
(1239, 55, 'Cabugao'),
(1240, 55, 'Man-atong'),
(1241, 55, 'Patoc-ao'),
(1242, 55, 'Poblacion'),
(1243, 55, 'Suyo Proper'),
(1244, 55, 'Urzadan'),
(1245, 55, 'Uso'),
(1246, 56, 'Ag-aguman'),
(1247, 56, 'Ambalayat'),
(1248, 56, 'Baracbac'),
(1249, 56, 'Bario-an'),
(1250, 56, 'Baritao'),
(1251, 56, 'Borono'),
(1252, 56, 'Becques'),
(1253, 56, 'Bimmanga'),
(1254, 56, 'Bio'),
(1255, 56, 'Bitalag'),
(1256, 56, 'Bucao East'),
(1257, 56, 'Bucao West'),
(1258, 56, 'Cabaroan'),
(1259, 56, 'Cabugbugan'),
(1260, 56, 'Cabulanglangan'),
(1261, 56, 'Dacutan'),
(1262, 56, 'Dardarat'),
(1263, 56, 'Del Pilar (Pob.)'),
(1264, 56, 'Farola'),
(1265, 56, 'Gabur'),
(1266, 56, 'Garitan'),
(1267, 56, 'Jardin'),
(1268, 56, 'Lacong'),
(1269, 56, 'Lantag'),
(1270, 56, 'Las-ud'),
(1271, 56, 'Libtong'),
(1272, 56, 'Lubnac'),
(1273, 56, 'Magsaysay (Pob.)'),
(1274, 56, 'Malacañang'),
(1275, 56, 'Pacac'),
(1276, 56, 'Pallogan'),
(1277, 56, 'Pudoc East'),
(1278, 56, 'Pudoc West'),
(1279, 56, 'Pula'),
(1280, 56, 'Quirino (Pob.)'),
(1281, 56, 'Ranget'),
(1282, 56, 'Rizal (Pob.)'),
(1283, 56, 'Salvacion'),
(1284, 56, 'San Miguel'),
(1285, 56, 'Sawat'),
(1286, 56, 'Tallaoen'),
(1287, 56, 'Tampugo'),
(1288, 56, 'Tarangotong'),
(1289, 57, 'Ayusan Norte'),
(1290, 57, 'Ayusan Sur'),
(1291, 57, 'Barangay I (Pob.)'),
(1292, 57, 'Barangay II (Pob.)'),
(1293, 57, 'Barangay III (Pob.)'),
(1294, 57, 'Barangay IV (Pob.)'),
(1295, 57, 'Barangay V (Pob.)'),
(1296, 57, 'Barangay VI (Pob.)'),
(1297, 57, 'Barraca'),
(1298, 57, 'Beddeng Laud'),
(1299, 57, 'Beddeng Daya'),
(1300, 57, 'Bongtolan'),
(1301, 57, 'Bulala'),
(1302, 57, 'Cabalangegan'),
(1303, 57, 'Cabaroan Daya'),
(1304, 57, 'Cabaroan Laud'),
(1305, 57, 'Camangaan'),
(1306, 57, 'Capangpangan'),
(1307, 57, 'Mindoro'),
(1308, 57, 'Nagsangalan'),
(1309, 57, 'Pantay Daya'),
(1310, 57, 'Pantay Fatima'),
(1311, 57, 'Pantay Laud'),
(1312, 57, 'Paoa'),
(1313, 57, 'Paratong'),
(1314, 57, 'Pong-ol'),
(1315, 57, 'Purok-a-bassit'),
(1316, 57, 'Purok-a-dackel'),
(1317, 57, 'Raois'),
(1318, 57, 'Rugsuanan'),
(1319, 57, 'Salindeg'),
(1320, 57, 'San Jose'),
(1321, 57, 'San Julian Norte'),
(1322, 57, 'San Julian Sur'),
(1323, 57, 'San Pedro'),
(1324, 57, 'Tamag'),
(1325, 57, 'Barangay VII'),
(1326, 57, 'Barangay VIII'),
(1327, 57, 'Barangay IX'),
(1328, 58, 'Ambitacay'),
(1329, 58, 'Balawarte'),
(1330, 58, 'Capas'),
(1331, 58, 'Consolacion (Pob.)'),
(1332, 58, 'Macalva Central'),
(1333, 58, 'Macalva Norte'),
(1334, 58, 'Macalva Sur'),
(1335, 58, 'Nazareno'),
(1336, 58, 'Purok'),
(1337, 58, 'San Agustin East'),
(1338, 58, 'San Agustin Norte'),
(1339, 58, 'San Agustin Sur'),
(1340, 58, 'San Antonino'),
(1341, 58, 'San Antonio'),
(1342, 58, 'San Francisco'),
(1343, 58, 'San Isidro'),
(1344, 58, 'San Joaquin Norte'),
(1345, 58, 'San Joaquin Sur'),
(1346, 58, 'San Jose Norte'),
(1347, 58, 'San Jose Sur'),
(1348, 58, 'San Juan'),
(1349, 58, 'San Julian Central'),
(1350, 58, 'San Julian East'),
(1351, 58, 'San Julian Norte'),
(1352, 58, 'San Julian West'),
(1353, 58, 'San Manuel Norte'),
(1354, 58, 'San Manuel Sur'),
(1355, 58, 'San Marcos'),
(1356, 58, 'San Miguel'),
(1357, 58, 'San Nicolas Central (Pob.)'),
(1358, 58, 'San Nicolas East'),
(1359, 58, 'San Nicolas Norte (Pob.)'),
(1360, 58, 'San Nicolas West'),
(1361, 58, 'San Nicolas Sur (Pob.)'),
(1362, 58, 'San Pedro'),
(1363, 58, 'San Roque West'),
(1364, 58, 'San Roque East'),
(1365, 58, 'San Vicente Norte'),
(1366, 58, 'San Vicente Sur'),
(1367, 58, 'Santa Ana'),
(1368, 58, 'Santa Barbara (Pob.)'),
(1369, 58, 'Santa Fe'),
(1370, 58, 'Santa Maria'),
(1371, 58, 'Santa Monica'),
(1372, 58, 'Santa Rita'),
(1373, 58, 'Santa Rita East'),
(1374, 58, 'Santa Rita Norte'),
(1375, 58, 'Santa Rita Sur'),
(1376, 58, 'Santa Rita West'),
(1377, 59, 'Alaska'),
(1378, 59, 'Basca'),
(1379, 59, 'Dulao'),
(1380, 59, 'Gallano'),
(1381, 59, 'Macabato'),
(1382, 59, 'Manga'),
(1383, 59, 'Pangao-aoan East'),
(1384, 59, 'Pangao-aoan West'),
(1385, 59, 'Poblacion'),
(1386, 59, 'Samara'),
(1387, 59, 'San Antonio'),
(1388, 59, 'San Benito Norte'),
(1389, 59, 'San Benito Sur'),
(1390, 59, 'San Eugenio'),
(1391, 59, 'San Juan East'),
(1392, 59, 'San Juan West'),
(1393, 59, 'San Simon East'),
(1394, 59, 'San Simon West'),
(1395, 59, 'Santa Cecilia'),
(1396, 59, 'Santa Lucia'),
(1397, 59, 'Santa Rita East'),
(1398, 59, 'Santa Rita West'),
(1399, 59, 'Santo Rosario East'),
(1400, 59, 'Santo Rosario West'),
(1401, 60, 'Agtipal'),
(1402, 60, 'Arosip'),
(1403, 60, 'Bacqui'),
(1404, 60, 'Bacsil'),
(1405, 60, 'Bagutot'),
(1406, 60, 'Ballogo'),
(1407, 60, 'Baroro'),
(1408, 60, 'Bitalag'),
(1409, 60, 'Bulala'),
(1410, 60, 'Burayoc'),
(1411, 60, 'Bussaoit'),
(1412, 60, 'Cabaroan'),
(1413, 60, 'Cabarsican'),
(1414, 60, 'Cabugao'),
(1415, 60, 'Calautit'),
(1416, 60, 'Carcarmay'),
(1417, 60, 'Casiaman'),
(1418, 60, 'Galongen'),
(1419, 60, 'Guinabang'),
(1420, 60, 'Legleg'),
(1421, 60, 'Lisqueb'),
(1422, 60, 'Mabanengbeng 1st'),
(1423, 60, 'Mabanengbeng 2nd'),
(1424, 60, 'Maragayap'),
(1425, 60, 'Nangalisan'),
(1426, 60, 'Nagatiran'),
(1427, 60, 'Nagsaraboan'),
(1428, 60, 'Nagsimbaanan'),
(1429, 60, 'Narra'),
(1430, 60, 'Ortega'),
(1431, 60, 'Paagan'),
(1432, 60, 'Pandan'),
(1433, 60, 'Pang-pang'),
(1434, 60, 'Poblacion'),
(1435, 60, 'Quirino'),
(1436, 60, 'Raois'),
(1437, 60, 'Salincob'),
(1438, 60, 'San Martin'),
(1439, 60, 'Santa Cruz'),
(1440, 60, 'Santa Rita'),
(1441, 60, 'Sapilang'),
(1442, 60, 'Sayoan'),
(1443, 60, 'Sipulo'),
(1444, 60, 'Tammocalao'),
(1445, 60, 'Ubbog'),
(1446, 60, 'Oya-oy'),
(1447, 60, 'Zaragosa'),
(1448, 61, 'Alibangsay'),
(1449, 61, 'Baay'),
(1450, 61, 'Cambaly'),
(1451, 61, 'Cardiz'),
(1452, 61, 'Dagup'),
(1453, 61, 'Libbo'),
(1454, 61, 'Suyo (Pob.)'),
(1455, 61, 'Tagudtud'),
(1456, 61, 'Tio-angan'),
(1457, 61, 'Wallayan'),
(1458, 62, 'Apatut'),
(1459, 62, 'Ar-arampang'),
(1460, 62, 'Baracbac Este'),
(1461, 62, 'Baracbac Oeste'),
(1462, 62, 'Bet-ang'),
(1463, 62, 'Bulbulala'),
(1464, 62, 'Bungol'),
(1465, 62, 'Butubut Este'),
(1466, 62, 'Butubut Norte'),
(1467, 62, 'Butubut Oeste'),
(1468, 62, 'Butubut Sur'),
(1469, 62, 'Cabuaan Oeste (Pob.)'),
(1470, 62, 'Calliat'),
(1471, 62, 'Calungbuyan'),
(1472, 62, 'Camiling'),
(1473, 62, 'Guinaburan'),
(1474, 62, 'Masupe'),
(1475, 62, 'Nagsabaran Norte'),
(1476, 62, 'Nagsabaran Sur'),
(1477, 62, 'Nalasin'),
(1478, 62, 'Napaset'),
(1479, 62, 'Pagbennecan'),
(1480, 62, 'Pagleddegan'),
(1481, 62, 'Pantar Norte'),
(1482, 62, 'Pantar Sur'),
(1483, 62, 'Pa-o'),
(1484, 62, 'Almieda'),
(1485, 62, 'Paraoir'),
(1486, 62, 'Patpata'),
(1487, 62, 'Dr. Camilo Osias Pob.'),
(1488, 62, 'Sablut'),
(1489, 62, 'San Pablo'),
(1490, 62, 'Sinapangan Norte'),
(1491, 62, 'Sinapangan Sur'),
(1492, 62, 'Tallipugo'),
(1493, 62, 'Antonino'),
(1494, 63, 'Agdeppa'),
(1495, 63, 'Alzate'),
(1496, 63, 'Bangaoilan East'),
(1497, 63, 'Bangaoilan West'),
(1498, 63, 'Barraca'),
(1499, 63, 'Cadapli'),
(1500, 63, 'Caggao'),
(1501, 63, 'Consuegra'),
(1502, 63, 'General Prim East'),
(1503, 63, 'General Prim West'),
(1504, 63, 'General Terrero'),
(1505, 63, 'Luzong Norte'),
(1506, 63, 'Luzong Sur'),
(1507, 63, 'Maria Cristina East'),
(1508, 63, 'Maria Cristina West'),
(1509, 63, 'Mindoro'),
(1510, 63, 'Nagsabaran'),
(1511, 63, 'Paratong Norte'),
(1512, 63, 'Paratong No. 3'),
(1513, 63, 'Paratong No. 4'),
(1514, 63, 'Central East No. 1 (Pob.)'),
(1515, 63, 'Central East No. 2 (Pob.)'),
(1516, 63, 'Central West No. 1 (Pob.)'),
(1517, 63, 'Central West No. 2 (Pob.)'),
(1518, 63, 'Central West No. 3 (Pob.)'),
(1519, 63, 'Quintarong'),
(1520, 63, 'Reyna Regente'),
(1521, 63, 'Rissing'),
(1522, 63, 'San Blas'),
(1523, 63, 'San Cristobal'),
(1524, 63, 'Sinapangan Norte'),
(1525, 63, 'Sinapangan Sur'),
(1526, 63, 'Ubbog'),
(1527, 64, 'Acao'),
(1528, 64, 'Baccuit Norte'),
(1529, 64, 'Baccuit Sur'),
(1530, 64, 'Bagbag'),
(1531, 64, 'Ballay'),
(1532, 64, 'Bawanta'),
(1533, 64, 'Boy-utan'),
(1534, 64, 'Bucayab'),
(1535, 64, 'Cabalayangan'),
(1536, 64, 'Cabisilan'),
(1537, 64, 'Calumbaya'),
(1538, 64, 'Carmay'),
(1539, 64, 'Casilagan'),
(1540, 64, 'Central East (Pob.)'),
(1541, 64, 'Central West (Pob.)'),
(1542, 64, 'Dili'),
(1543, 64, 'Disso-or'),
(1544, 64, 'Guerrero'),
(1545, 64, 'Nagrebcan'),
(1546, 64, 'Pagdalagan Sur'),
(1547, 64, 'Palintucang'),
(1548, 64, 'Palugsi-Limmansangan'),
(1549, 64, 'Parian Oeste'),
(1550, 64, 'Parian Este'),
(1551, 64, 'Paringao'),
(1552, 64, 'Payocpoc Norte Este'),
(1553, 64, 'Payocpoc Norte Oeste'),
(1554, 64, 'Payocpoc Sur'),
(1555, 64, 'Pilar'),
(1556, 64, 'Pudoc'),
(1557, 64, 'Pottot'),
(1558, 64, 'Pugo'),
(1559, 64, 'Quinavite'),
(1560, 64, 'Lower San Agustin'),
(1561, 64, 'Santa Monica'),
(1562, 64, 'Santiago'),
(1563, 64, 'Taberna'),
(1564, 64, 'Upper San Agustin'),
(1565, 64, 'Urayong'),
(1566, 65, 'Agpay'),
(1567, 65, 'Bilis'),
(1568, 65, 'Caoayan'),
(1569, 65, 'Dalacdac'),
(1570, 65, 'Delles'),
(1571, 65, 'Imelda'),
(1572, 65, 'Libtong'),
(1573, 65, 'Linuan'),
(1574, 65, 'New Poblacion'),
(1575, 65, 'Old Poblacion'),
(1576, 65, 'Lower Tumapoc'),
(1577, 65, 'Upper Tumapoc'),
(1578, 66, 'Bautista'),
(1579, 66, 'Gana'),
(1580, 66, 'Juan Cartas'),
(1581, 66, 'Las-ud'),
(1582, 66, 'Liquicia'),
(1583, 66, 'Poblacion Norte'),
(1584, 66, 'Poblacion Sur'),
(1585, 66, 'San Carlos'),
(1586, 66, 'San Cornelio'),
(1587, 66, 'San Fermin'),
(1588, 66, 'San Gregorio'),
(1589, 66, 'San Jose'),
(1590, 66, 'Santiago Norte'),
(1591, 66, 'Santiago Sur'),
(1592, 66, 'Sobredillo'),
(1593, 66, 'Urayong'),
(1594, 66, 'Wenceslao'),
(1595, 67, 'Alcala (Pob.)'),
(1596, 67, 'Ayaoan'),
(1597, 67, 'Barangobong'),
(1598, 67, 'Barrientos'),
(1599, 67, 'Bungro'),
(1600, 67, 'Buselbusel'),
(1601, 67, 'Cabalitocan'),
(1602, 67, 'Cantoria No. 1'),
(1603, 67, 'Cantoria No. 2'),
(1604, 67, 'Cantoria No. 3'),
(1605, 67, 'Cantoria No. 4'),
(1606, 67, 'Carisquis'),
(1607, 67, 'Darigayos'),
(1608, 67, 'Magallanes (Pob.)'),
(1609, 67, 'Magsiping'),
(1610, 67, 'Mamay'),
(1611, 67, 'Nagrebcan'),
(1612, 67, 'Nalvo Norte'),
(1613, 67, 'Nalvo Sur'),
(1614, 67, 'Napaset'),
(1615, 67, 'Oaqui No. 1'),
(1616, 67, 'Oaqui No. 2'),
(1617, 67, 'Oaqui No. 3'),
(1618, 67, 'Oaqui No. 4'),
(1619, 67, 'Pila'),
(1620, 67, 'Pitpitac'),
(1621, 67, 'Rimos No. 1'),
(1622, 67, 'Rimos No. 2'),
(1623, 67, 'Rimos No. 3'),
(1624, 67, 'Rimos No. 4'),
(1625, 67, 'Rimos No. 5'),
(1626, 67, 'Rissing'),
(1627, 67, 'Salcedo (Pob.)'),
(1628, 67, 'Santo Domingo Norte'),
(1629, 67, 'Santo Domingo Sur'),
(1630, 67, 'Sucoc Norte'),
(1631, 67, 'Sucoc Sur'),
(1632, 67, 'Suyo'),
(1633, 67, 'Tallaoen'),
(1634, 67, 'Victoria (Pob.)'),
(1635, 68, 'Aguioas'),
(1636, 68, 'Al-alinao Norte'),
(1637, 68, 'Al-alinao Sur'),
(1638, 68, 'Ambaracao Norte'),
(1639, 68, 'Ambaracao Sur'),
(1640, 68, 'Angin'),
(1641, 68, 'Balecbec'),
(1642, 68, 'Bancagan'),
(1643, 68, 'Baraoas Norte'),
(1644, 68, 'Baraoas Sur'),
(1645, 68, 'Bariquir'),
(1646, 68, 'Bato'),
(1647, 68, 'Bimmotobot'),
(1648, 68, 'Cabaritan Norte'),
(1649, 68, 'Cabaritan Sur'),
(1650, 68, 'Casilagan'),
(1651, 68, 'Dal-lipaoen'),
(1652, 68, 'Daramuangan'),
(1653, 68, 'Guesset'),
(1654, 68, 'Gusing Norte'),
(1655, 68, 'Gusing Sur'),
(1656, 68, 'Imelda'),
(1657, 68, 'Lioac Norte'),
(1658, 68, 'Lioac Sur'),
(1659, 68, 'Magungunay'),
(1660, 68, 'Mamat-ing Norte'),
(1661, 68, 'Mamat-ing Sur'),
(1662, 68, 'Nagsidorisan'),
(1663, 68, 'Natividad (Pob.)'),
(1664, 68, 'Ortiz (Pob.)'),
(1665, 68, 'Ribsuan'),
(1666, 68, 'San Antonio'),
(1667, 68, 'San Isidro'),
(1668, 68, 'Sili'),
(1669, 68, 'Suguidan Norte'),
(1670, 68, 'Suguidan Sur'),
(1671, 68, 'Tuddingan'),
(1672, 69, 'Ambalite'),
(1673, 69, 'Ambangonan'),
(1674, 69, 'Cares'),
(1675, 69, 'Cuenca'),
(1676, 69, 'Duplas'),
(1677, 69, 'Maoasoas Norte'),
(1678, 69, 'Maoasoas Sur'),
(1679, 69, 'Palina'),
(1680, 69, 'Poblacion East'),
(1681, 69, 'San Luis'),
(1682, 69, 'Saytan'),
(1683, 69, 'Tavora East'),
(1684, 69, 'Tavora Proper'),
(1685, 69, 'Poblacion West'),
(1686, 70, 'Alipang'),
(1687, 70, 'Ambangonan'),
(1688, 70, 'Amlang'),
(1689, 70, 'Bacani'),
(1690, 70, 'Bangar'),
(1691, 70, 'Bani'),
(1692, 70, 'Benteng-Sapilang'),
(1693, 70, 'Cadumanian'),
(1694, 70, 'Camp One'),
(1695, 70, 'Carunuan East'),
(1696, 70, 'Carunuan West'),
(1697, 70, 'Casilagan'),
(1698, 70, 'Cataguingtingan'),
(1699, 70, 'Concepcion'),
(1700, 70, 'Damortis'),
(1701, 70, 'Gumot-Nagcolaran'),
(1702, 70, 'Inabaan Norte'),
(1703, 70, 'Inabaan Sur'),
(1704, 70, 'Nagtagaan'),
(1705, 70, 'Nangcamotian'),
(1706, 70, 'Parasapas'),
(1707, 70, 'Poblacion East'),
(1708, 70, 'Poblacion West'),
(1709, 70, 'Puzon'),
(1710, 70, 'Rabon'),
(1711, 70, 'San Jose'),
(1712, 70, 'Marcos'),
(1713, 70, 'Subusub'),
(1714, 70, 'Tabtabungao'),
(1715, 70, 'Tanglag'),
(1716, 70, 'Tay-ac'),
(1717, 70, 'Udiao'),
(1718, 70, 'Vila'),
(1719, 71, 'Abut'),
(1720, 71, 'Apaleng'),
(1721, 71, 'Bacsil'),
(1722, 71, 'Bangbangolan'),
(1723, 71, 'Bangcusay'),
(1724, 71, 'Barangay I (Pob.)'),
(1725, 71, 'Barangay II (Pob.)'),
(1726, 71, 'Barangay III (Pob.)'),
(1727, 71, 'Barangay IV (Pob.)'),
(1728, 71, 'Baraoas'),
(1729, 71, 'Bato'),
(1730, 71, 'Biday'),
(1731, 71, 'Birunget'),
(1732, 71, 'Bungro'),
(1733, 71, 'Cabaroan'),
(1734, 71, 'Cabarsican'),
(1735, 71, 'Cadaclan'),
(1736, 71, 'Calabugao'),
(1737, 71, 'Camansi'),
(1738, 71, 'Canaoay'),
(1739, 71, 'Carlatan'),
(1740, 71, 'Catbangen'),
(1741, 71, 'Dallangayan Este'),
(1742, 71, 'Dallangayan Oeste'),
(1743, 71, 'Dalumpinas Este'),
(1744, 71, 'Dalumpinas Oeste'),
(1745, 71, 'Ilocanos Norte'),
(1746, 71, 'Ilocanos Sur'),
(1747, 71, 'Langcuas'),
(1748, 71, 'Lingsat'),
(1749, 71, 'Madayegdeg'),
(1750, 71, 'Mameltac'),
(1751, 71, 'Masicong'),
(1752, 71, 'Nagyubuyuban'),
(1753, 71, 'Namtutan'),
(1754, 71, 'Narra Este'),
(1755, 71, 'Narra Oeste'),
(1756, 71, 'Pacpaco'),
(1757, 71, 'Pagdalagan'),
(1758, 71, 'Pagdaraoan'),
(1759, 71, 'Pagudpud'),
(1760, 71, 'Pao Norte'),
(1761, 71, 'Pao Sur'),
(1762, 71, 'Parian'),
(1763, 71, 'Pias'),
(1764, 71, 'Poro'),
(1765, 71, 'Puspus'),
(1766, 71, 'Sacyud'),
(1767, 71, 'Sagayad'),
(1768, 71, 'San Agustin'),
(1769, 71, 'San Francisco'),
(1770, 71, 'San Vicente'),
(1771, 71, 'Santiago Norte'),
(1772, 71, 'Santiago Sur'),
(1773, 71, 'Saoay'),
(1774, 71, 'Sevilla'),
(1775, 71, 'Siboan-Otong'),
(1776, 71, 'Tanqui'),
(1777, 71, 'Tanquigan'),
(1778, 72, 'Amontoc'),
(1779, 72, 'Apayao'),
(1780, 72, 'Balbalayang'),
(1781, 72, 'Bayabas'),
(1782, 72, 'Bucao'),
(1783, 72, 'Bumbuneg'),
(1784, 72, 'Lacong'),
(1785, 72, 'Lipay Este'),
(1786, 72, 'Lipay Norte'),
(1787, 72, 'Lipay Proper'),
(1788, 72, 'Lipay Sur'),
(1789, 72, 'Lon-oy'),
(1790, 72, 'Poblacion'),
(1791, 72, 'Polipol'),
(1792, 72, 'Daking'),
(1793, 73, 'Allangigan'),
(1794, 73, 'Aludaid'),
(1795, 73, 'Bacsayan'),
(1796, 73, 'Balballosa'),
(1797, 73, 'Bambanay'),
(1798, 73, 'Bugbugcao'),
(1799, 73, 'Caarusipan'),
(1800, 73, 'Cabaroan'),
(1801, 73, 'Cabugnayan'),
(1802, 73, 'Cacapian'),
(1803, 73, 'Caculangan'),
(1804, 73, 'Calincamasan'),
(1805, 73, 'Casilagan'),
(1806, 73, 'Catdongan'),
(1807, 73, 'Dangdangla'),
(1808, 73, 'Dasay'),
(1809, 73, 'Dinanum'),
(1810, 73, 'Duplas'),
(1811, 73, 'Guinguinabang'),
(1812, 73, 'Ili Norte (Pob.)'),
(1813, 73, 'Ili Sur (Pob.)'),
(1814, 73, 'Legleg'),
(1815, 73, 'Lubing'),
(1816, 73, 'Nadsaag'),
(1817, 73, 'Nagsabaran'),
(1818, 73, 'Naguirangan'),
(1819, 73, 'Naguituban'),
(1820, 73, 'Nagyubuyuban'),
(1821, 73, 'Oaquing'),
(1822, 73, 'Pacpacac'),
(1823, 73, 'Pagdildilan'),
(1824, 73, 'Panicsican'),
(1825, 73, 'Quidem'),
(1826, 73, 'San Felipe'),
(1827, 73, 'Santa Rosa'),
(1828, 73, 'Santo Rosario'),
(1829, 73, 'Saracat'),
(1830, 73, 'Sinapangan'),
(1831, 73, 'Taboc'),
(1832, 73, 'Talogtog'),
(1833, 73, 'Urbiztondo'),
(1834, 74, 'Ambitacay'),
(1835, 74, 'Bail'),
(1836, 74, 'Balaoc'),
(1837, 74, 'Balsaan'),
(1838, 74, 'Baybay'),
(1839, 74, 'Cabaruan'),
(1840, 74, 'Casantaan'),
(1841, 74, 'Casilagan'),
(1842, 74, 'Cupang'),
(1843, 74, 'Damortis'),
(1844, 74, 'Fernando'),
(1845, 74, 'Linong'),
(1846, 74, 'Lomboy'),
(1847, 74, 'Malabago'),
(1848, 74, 'Namboongan'),
(1849, 74, 'Namonitan'),
(1850, 74, 'Narvacan'),
(1851, 74, 'Patac'),
(1852, 74, 'Poblacion'),
(1853, 74, 'Pongpong'),
(1854, 74, 'Raois'),
(1855, 74, 'Tubod'),
(1856, 74, 'Tococ'),
(1857, 74, 'Ubagan'),
(1858, 75, 'Corrooy'),
(1859, 75, 'Lettac Norte'),
(1860, 75, 'Lettac Sur'),
(1861, 75, 'Mangaan'),
(1862, 75, 'Paagan'),
(1863, 75, 'Poblacion'),
(1864, 75, 'Puguil'),
(1865, 75, 'Ramot'),
(1866, 75, 'Sapdaan'),
(1867, 75, 'Sasaba'),
(1868, 75, 'Tubaday'),
(1869, 76, 'Bigbiga'),
(1870, 76, 'Castro'),
(1871, 76, 'Duplas'),
(1872, 76, 'Ipet'),
(1873, 76, 'Ilocano'),
(1874, 76, 'Maliclico'),
(1875, 76, 'Old Central'),
(1876, 76, 'Namaltugan'),
(1877, 76, 'Poblacion'),
(1878, 76, 'Porporiket'),
(1879, 76, 'San Francisco Norte'),
(1880, 76, 'San Francisco Sur'),
(1881, 76, 'San Jose'),
(1882, 76, 'Sengngat'),
(1883, 76, 'Turod'),
(1884, 76, 'Up-uplas'),
(1885, 76, 'Bulalaan'),
(1886, 77, 'Amallapay'),
(1887, 77, 'Anduyan'),
(1888, 77, 'Caoigue'),
(1889, 77, 'Francia Sur'),
(1890, 77, 'Francia West'),
(1891, 77, 'Garcia'),
(1892, 77, 'Gonzales'),
(1893, 77, 'Halog East'),
(1894, 77, 'Halog West'),
(1895, 77, 'Leones East'),
(1896, 77, 'Leones West'),
(1897, 77, 'Linapew'),
(1898, 77, 'Magsaysay'),
(1899, 77, 'Pideg'),
(1900, 77, 'Poblacion'),
(1901, 77, 'Rizal'),
(1902, 77, 'Santa Teresa'),
(1903, 77, 'Lloren'),
(1904, 78, 'Allabon'),
(1905, 78, 'Aloleng'),
(1906, 78, 'Bangan-Oda'),
(1907, 78, 'Baruan'),
(1908, 78, 'Boboy'),
(1909, 78, 'Cayungnan'),
(1910, 78, 'Dangley'),
(1911, 78, 'Gayusan'),
(1912, 78, 'Macaboboni'),
(1913, 78, 'Magsaysay'),
(1914, 78, 'Namatucan'),
(1915, 78, 'Patar'),
(1916, 78, 'Poblacion East'),
(1917, 78, 'Poblacion West'),
(1918, 78, 'San Juan'),
(1919, 78, 'Tupa'),
(1920, 78, 'Viga'),
(1921, 79, 'Bayaoas'),
(1922, 79, 'Baybay'),
(1923, 79, 'Bocacliw'),
(1924, 79, 'Bocboc East'),
(1925, 79, 'Bocboc West'),
(1926, 79, 'Buer'),
(1927, 79, 'Calsib'),
(1928, 79, 'Ninoy'),
(1929, 79, 'Poblacion'),
(1930, 79, 'Pogomboa'),
(1931, 79, 'Pogonsili'),
(1932, 79, 'San Jose'),
(1933, 79, 'Tampac'),
(1934, 79, 'Laoag'),
(1935, 79, 'Manlocboc'),
(1936, 79, 'Panacol'),
(1937, 80, 'Alos'),
(1938, 80, 'Amandiego'),
(1939, 80, 'Amangbangan'),
(1940, 80, 'Balangobong'),
(1941, 80, 'Balayang'),
(1942, 80, 'Bisocol'),
(1943, 80, 'Bolaney'),
(1944, 80, 'Baleyadaan'),
(1945, 80, 'Bued'),
(1946, 80, 'Cabatuan'),
(1947, 80, 'Cayucay'),
(1948, 80, 'Dulacac'),
(1949, 80, 'Inerangan'),
(1950, 80, 'Linmansangan'),
(1951, 80, 'Lucap'),
(1952, 80, 'Macatiw'),
(1953, 80, 'Magsaysay'),
(1954, 80, 'Mona'),
(1955, 80, 'Palamis'),
(1956, 80, 'Pangapisan'),
(1957, 80, 'Poblacion'),
(1958, 80, 'Pocalpocal'),
(1959, 80, 'Pogo'),
(1960, 80, 'Polo'),
(1961, 80, 'Quibuar'),
(1962, 80, 'Sabangan'),
(1963, 80, 'San Jose'),
(1964, 80, 'San Roque'),
(1965, 80, 'San Vicente'),
(1966, 80, 'Santa Maria'),
(1967, 80, 'Tanaytay'),
(1968, 80, 'Tangcarang'),
(1969, 80, 'Tawintawin'),
(1970, 80, 'Telbang'),
(1971, 80, 'Victoria'),
(1972, 80, 'Landoc'),
(1973, 80, 'Maawi'),
(1974, 80, 'Pandan'),
(1975, 80, 'San Antonio'),
(1976, 81, 'Anulid'),
(1977, 81, 'Atainan'),
(1978, 81, 'Bersamin'),
(1979, 81, 'Canarvacanan'),
(1980, 81, 'Caranglaan'),
(1981, 81, 'Curareng'),
(1982, 81, 'Gualsic'),
(1983, 81, 'Kasikis'),
(1984, 81, 'Laoac'),
(1985, 81, 'Macayo'),
(1986, 81, 'Pindangan Centro'),
(1987, 81, 'Pindangan East'),
(1988, 81, 'Pindangan West'),
(1989, 81, 'Poblacion East'),
(1990, 81, 'Poblacion West'),
(1991, 81, 'San Juan'),
(1992, 81, 'San Nicolas'),
(1993, 81, 'San Pedro Apartado'),
(1994, 81, 'San Pedro IlI'),
(1995, 81, 'San Vicente'),
(1996, 81, 'Vacante'),
(1997, 82, 'Awile'),
(1998, 82, 'Awag'),
(1999, 82, 'Batiarao'),
(2000, 82, 'Cabungan'),
(2001, 82, 'Carot'),
(2002, 82, 'Dolaoan'),
(2003, 82, 'Imbo'),
(2004, 82, 'Macaleeng'),
(2005, 82, 'Macandocandong'),
(2006, 82, 'Mal-ong'),
(2007, 82, 'Namagbagan'),
(2008, 82, 'Poblacion'),
(2009, 82, 'Roxas'),
(2010, 82, 'Sablig'),
(2011, 82, 'San Jose'),
(2012, 82, 'Siapar'),
(2013, 82, 'Tondol'),
(2014, 82, 'Toritori'),
(2015, 83, 'Ariston Este'),
(2016, 83, 'Ariston Weste'),
(2017, 83, 'Bantog'),
(2018, 83, 'Baro'),
(2019, 83, 'Bobonan'),
(2020, 83, 'Cabalitian'),
(2021, 83, 'Calepaan'),
(2022, 83, 'Carosucan Norte'),
(2023, 83, 'Carosucan Sur'),
(2024, 83, 'Coldit'),
(2025, 83, 'Domanpot'),
(2026, 83, 'Dupac'),
(2027, 83, 'Macalong'),
(2028, 83, 'Palaris'),
(2029, 83, 'Poblacion East'),
(2030, 83, 'Poblacion West'),
(2031, 83, 'San Vicente Este'),
(2032, 83, 'San Vicente Weste'),
(2033, 83, 'Sanchez'),
(2034, 83, 'Sobol'),
(2035, 83, 'Toboy'),
(2036, 84, 'Angayan Norte'),
(2037, 84, 'Angayan Sur'),
(2038, 84, 'Capulaan'),
(2039, 84, 'Esmeralda'),
(2040, 84, 'Kita-kita'),
(2041, 84, 'Mabini'),
(2042, 84, 'Mauban'),
(2043, 84, 'Poblacion'),
(2044, 84, 'Pugaro'),
(2045, 84, 'Rajal'),
(2046, 84, 'San Andres'),
(2047, 84, 'San Aurelio 1st'),
(2048, 84, 'San Aurelio 2nd'),
(2049, 84, 'San Aurelio 3rd'),
(2050, 84, 'San Joaquin'),
(2051, 84, 'San Julian'),
(2052, 84, 'San Leon'),
(2053, 84, 'San Marcelino'),
(2054, 84, 'San Miguel'),
(2055, 84, 'San Raymundo'),
(2056, 85, 'Ambabaay'),
(2057, 85, 'Aporao'),
(2058, 85, 'Arwas'),
(2059, 85, 'Ballag'),
(2060, 85, 'Banog Norte'),
(2061, 85, 'Banog Sur'),
(2062, 85, 'Centro Toma'),
(2063, 85, 'Colayo'),
(2064, 85, 'Dacap Norte'),
(2065, 85, 'Dacap Sur'),
(2066, 85, 'Garrita'),
(2067, 85, 'Luac'),
(2068, 85, 'Macabit'),
(2069, 85, 'Masidem'),
(2070, 85, 'Poblacion'),
(2071, 85, 'Quinaoayanan'),
(2072, 85, 'Ranao'),
(2073, 85, 'Ranom Iloco'),
(2074, 85, 'San Jose'),
(2075, 85, 'San Miguel'),
(2076, 85, 'San Simon'),
(2077, 85, 'San Vicente'),
(2078, 85, 'Tiep'),
(2079, 85, 'Tipor'),
(2080, 85, 'Tugui Grande'),
(2081, 85, 'Tugui Norte'),
(2082, 85, 'Calabeng'),
(2083, 86, 'Anambongan'),
(2084, 86, 'Bayoyong'),
(2085, 86, 'Cabeldatan'),
(2086, 86, 'Dumpay'),
(2087, 86, 'Malimpec East'),
(2088, 86, 'Mapolopolo'),
(2089, 86, 'Nalneran'),
(2090, 86, 'Navatat'),
(2091, 86, 'Obong'),
(2092, 86, 'Osmena Sr.'),
(2093, 86, 'Palma'),
(2094, 86, 'Patacbo'),
(2095, 86, 'Poblacion'),
(2096, 87, 'Artacho'),
(2097, 87, 'Cabuaan'),
(2098, 87, 'Cacandongan'),
(2099, 87, 'Diaz'),
(2100, 87, 'Nandacan'),
(2101, 87, 'Nibaliw Norte'),
(2102, 87, 'Nibaliw Sur'),
(2103, 87, 'Palisoc'),
(2104, 87, 'Poblacion East'),
(2105, 87, 'Poblacion West'),
(2106, 87, 'Pogo'),
(2107, 87, 'Poponto'),
(2108, 87, 'Primicias'),
(2109, 87, 'Ketegan'),
(2110, 87, 'Sinabaan'),
(2111, 87, 'Vacante'),
(2112, 87, 'Villanueva'),
(2113, 87, 'Baluyot'),
(2114, 88, 'Alinggan'),
(2115, 88, 'Amamperez'),
(2116, 88, 'Amancosiling Norte'),
(2117, 88, 'Amancosiling Sur'),
(2118, 88, 'Ambayat I');
INSERT INTO `table_barangay` (`barangay_id`, `municipality_id`, `barangay_name`) VALUES
(2119, 88, 'Ambayat II'),
(2120, 88, 'Apalen'),
(2121, 88, 'Asin'),
(2122, 88, 'Ataynan'),
(2123, 88, 'Bacnono'),
(2124, 88, 'Balaybuaya'),
(2125, 88, 'Banaban'),
(2126, 88, 'Bani'),
(2127, 88, 'Batangcawa'),
(2128, 88, 'Beleng'),
(2129, 88, 'Bical Norte'),
(2130, 88, 'Bical Sur'),
(2131, 88, 'Bongato East'),
(2132, 88, 'Bongato West'),
(2133, 88, 'Buayaen'),
(2134, 88, 'Buenlag 1st'),
(2135, 88, 'Buenlag 2nd'),
(2136, 88, 'Cadre Site'),
(2137, 88, 'Carungay'),
(2138, 88, 'Caturay'),
(2139, 88, 'Duera'),
(2140, 88, 'Dusoc'),
(2141, 88, 'Hermoza'),
(2142, 88, 'Idong'),
(2143, 88, 'Inanlorenzana'),
(2144, 88, 'Inirangan'),
(2145, 88, 'Iton'),
(2146, 88, 'Langiran'),
(2147, 88, 'Ligue'),
(2148, 88, 'M. H. del Pilar'),
(2149, 88, 'Macayocayo'),
(2150, 88, 'Magsaysay'),
(2151, 88, 'Maigpa'),
(2152, 88, 'Malimpec'),
(2153, 88, 'Malioer'),
(2154, 88, 'Managos'),
(2155, 88, 'Manambong Norte'),
(2156, 88, 'Manambong Parte'),
(2157, 88, 'Manambong Sur'),
(2158, 88, 'Mangayao'),
(2159, 88, 'Nalsian Norte'),
(2160, 88, 'Nalsian Sur'),
(2161, 88, 'Pangdel'),
(2162, 88, 'Pantol'),
(2163, 88, 'Paragos'),
(2164, 88, 'Poblacion Sur'),
(2165, 88, 'Pugo'),
(2166, 88, 'Reynado'),
(2167, 88, 'San Gabriel 1st'),
(2168, 88, 'San Gabriel 2nd'),
(2169, 88, 'San Vicente'),
(2170, 88, 'Sangcagulis'),
(2171, 88, 'Sanlibo'),
(2172, 88, 'Sapang'),
(2173, 88, 'Tamaro'),
(2174, 88, 'Tambac'),
(2175, 88, 'Tampog'),
(2176, 88, 'Darawey'),
(2177, 88, 'Tanolong'),
(2178, 88, 'Tatarao'),
(2179, 88, 'Telbang'),
(2180, 88, 'Tococ East'),
(2181, 88, 'Tococ West'),
(2182, 88, 'Warding'),
(2183, 88, 'Wawa'),
(2184, 88, 'Zone I (Pob.)'),
(2185, 88, 'Zone II (Pob.)'),
(2186, 88, 'Zone III (Pob.)'),
(2187, 88, 'Zone IV (Pob.)'),
(2188, 88, 'Zone V (Pob.)'),
(2189, 88, 'Zone VI (Pob.)'),
(2190, 88, 'Zone VII (Pob.)'),
(2191, 89, 'Balangobong'),
(2192, 89, 'Bued'),
(2193, 89, 'Bugayong'),
(2194, 89, 'Camangaan'),
(2195, 89, 'Canarvacanan'),
(2196, 89, 'Capas'),
(2197, 89, 'Cili'),
(2198, 89, 'Dumayat'),
(2199, 89, 'Linmansangan'),
(2200, 89, 'Mangcasuy'),
(2201, 89, 'Moreno'),
(2202, 89, 'Pasileng Norte'),
(2203, 89, 'Pasileng Sur'),
(2204, 89, 'Poblacion'),
(2205, 89, 'San Felipe Central'),
(2206, 89, 'San Felipe Sur'),
(2207, 89, 'San Pablo'),
(2208, 89, 'Santa Catalina'),
(2209, 89, 'Santa Maria Norte'),
(2210, 89, 'Santiago'),
(2211, 89, 'Santo Niño'),
(2212, 89, 'Sumabnit'),
(2213, 89, 'Tabuyoc'),
(2214, 89, 'Vacante'),
(2215, 90, 'Amancoro'),
(2216, 90, 'Balagan'),
(2217, 90, 'Balogo'),
(2218, 90, 'Basing'),
(2219, 90, 'Baybay Lopez'),
(2220, 90, 'Baybay Polong'),
(2221, 90, 'Biec'),
(2222, 90, 'Buenlag'),
(2223, 90, 'Calit'),
(2224, 90, 'Caloocan Norte'),
(2225, 90, 'Caloocan Sur'),
(2226, 90, 'Camaley'),
(2227, 90, 'Canaoalan'),
(2228, 90, 'Dulag'),
(2229, 90, 'Gayaman'),
(2230, 90, 'Linoc'),
(2231, 90, 'Lomboy'),
(2232, 90, 'Nagpalangan'),
(2233, 90, 'Malindong'),
(2234, 90, 'Manat'),
(2235, 90, 'Naguilayan'),
(2236, 90, 'Pallas'),
(2237, 90, 'Papagueyan'),
(2238, 90, 'Parayao'),
(2239, 90, 'Poblacion'),
(2240, 90, 'Pototan'),
(2241, 90, 'Sabangan'),
(2242, 90, 'Salapingao'),
(2243, 90, 'San Isidro Norte'),
(2244, 90, 'San Isidro Sur'),
(2245, 90, 'Santa Rosa'),
(2246, 90, 'Tombor'),
(2247, 90, 'Caloocan Dupo'),
(2248, 91, 'Arnedo'),
(2249, 91, 'Balingasay'),
(2250, 91, 'Binabalian'),
(2251, 91, 'Cabuyao'),
(2252, 91, 'Catuday'),
(2253, 91, 'Catungi'),
(2254, 91, 'Concordia (Pob.)'),
(2255, 91, 'Culang'),
(2256, 91, 'Dewey'),
(2257, 91, 'Estanza'),
(2258, 91, 'Germinal (Pob.)'),
(2259, 91, 'Goyoden'),
(2260, 91, 'Ilogmalino'),
(2261, 91, 'Lambes'),
(2262, 91, 'Liwa-liwa'),
(2263, 91, 'Lucero'),
(2264, 91, 'Luciente 1.0'),
(2265, 91, 'Luciente 2.0'),
(2266, 91, 'Luna'),
(2267, 91, 'Patar'),
(2268, 91, 'Pilar'),
(2269, 91, 'Salud'),
(2270, 91, 'Samang Norte'),
(2271, 91, 'Samang Sur'),
(2272, 91, 'Sampaloc'),
(2273, 91, 'San Roque'),
(2274, 91, 'Tara'),
(2275, 91, 'Tupa'),
(2276, 91, 'Victory'),
(2277, 91, 'Zaragoza'),
(2278, 92, 'Angarian'),
(2279, 92, 'Asinan'),
(2280, 92, 'Banaga'),
(2281, 92, 'Bacabac'),
(2282, 92, 'Bolaoen'),
(2283, 92, 'Buenlag'),
(2284, 92, 'Cabayaoasan'),
(2285, 92, 'Cayanga'),
(2286, 92, 'Gueset'),
(2287, 92, 'Hacienda'),
(2288, 92, 'Laguit Centro'),
(2289, 92, 'Laguit Padilla'),
(2290, 92, 'Magtaking'),
(2291, 92, 'Pangascasan'),
(2292, 92, 'Pantal'),
(2293, 92, 'Poblacion'),
(2294, 92, 'Polong'),
(2295, 92, 'Portic'),
(2296, 92, 'Salasa'),
(2297, 92, 'Salomague Norte'),
(2298, 92, 'Salomague Sur'),
(2299, 92, 'Samat'),
(2300, 92, 'San Francisco'),
(2301, 92, 'Umanday'),
(2302, 93, 'Anapao'),
(2303, 93, 'Cacayasen'),
(2304, 93, 'Concordia'),
(2305, 93, 'Ilio-ilio'),
(2306, 93, 'Papallasen'),
(2307, 93, 'Poblacion'),
(2308, 93, 'Pogoruac'),
(2309, 93, 'Don Matias'),
(2310, 93, 'San Miguel'),
(2311, 93, 'San Pascual'),
(2312, 93, 'San Vicente'),
(2313, 93, 'Sapa Grande'),
(2314, 93, 'Sapa Pequeña'),
(2315, 93, 'Tambacan'),
(2316, 94, 'Ambonao'),
(2317, 94, 'Ambuetel'),
(2318, 94, 'Banaoang'),
(2319, 94, 'Bued'),
(2320, 94, 'Buenlag'),
(2321, 94, 'Cabilocaan'),
(2322, 94, 'Dinalaoan'),
(2323, 94, 'Doyong'),
(2324, 94, 'Gabon'),
(2325, 94, 'Lasip'),
(2326, 94, 'Longos'),
(2327, 94, 'Lumbang'),
(2328, 94, 'Macabito'),
(2329, 94, 'Malabago'),
(2330, 94, 'Mancup'),
(2331, 94, 'Nagsaing'),
(2332, 94, 'Nalsian'),
(2333, 94, 'Poblacion East'),
(2334, 94, 'Poblacion West'),
(2335, 94, 'Quesban'),
(2336, 94, 'San Miguel'),
(2337, 94, 'San Vicente'),
(2338, 94, 'Songkoy'),
(2339, 94, 'Talibaew'),
(2340, 95, 'Bacayao Norte'),
(2341, 95, 'Bacayao Sur'),
(2342, 95, 'Barangay II'),
(2343, 95, 'Barangay IV'),
(2344, 95, 'Bolosan'),
(2345, 95, 'Bonuan Binloc'),
(2346, 95, 'Bonuan Boquig'),
(2347, 95, 'Bonuan Gueset'),
(2348, 95, 'Calmay'),
(2349, 95, 'Carael'),
(2350, 95, 'Caranglaan'),
(2351, 95, 'Herrero'),
(2352, 95, 'Lasip Chico'),
(2353, 95, 'Lasip Grande'),
(2354, 95, 'Lomboy'),
(2355, 95, 'Lucao'),
(2356, 95, 'Malued'),
(2357, 95, 'Mamalingling'),
(2358, 95, 'Mangin'),
(2359, 95, 'Mayombo'),
(2360, 95, 'Pantal'),
(2361, 95, 'Poblacion Oeste'),
(2362, 95, 'Barangay I'),
(2363, 95, 'Pogo Chico'),
(2364, 95, 'Pogo Grande'),
(2365, 95, 'Pugaro Suit'),
(2366, 95, 'Salapingao'),
(2367, 95, 'Salisay'),
(2368, 95, 'Tambac'),
(2369, 95, 'Tapuac'),
(2370, 95, 'Tebeng'),
(2371, 96, 'Alilao'),
(2372, 96, 'Amalbalan'),
(2373, 96, 'Bobonot'),
(2374, 96, 'Eguia'),
(2375, 96, 'Gais-Guipe'),
(2376, 96, 'Hermosa'),
(2377, 96, 'Macalang'),
(2378, 96, 'Magsaysay'),
(2379, 96, 'Malacapas'),
(2380, 96, 'Malimpin'),
(2381, 96, 'Osmeña'),
(2382, 96, 'Petal'),
(2383, 96, 'Poblacion'),
(2384, 96, 'San Vicente'),
(2385, 96, 'Tambac'),
(2386, 96, 'Tambobong'),
(2387, 96, 'Uli'),
(2388, 96, 'Viga'),
(2389, 97, 'Bamban'),
(2390, 97, 'Batang'),
(2391, 97, 'Bayambang'),
(2392, 97, 'Cato'),
(2393, 97, 'Doliman'),
(2394, 97, 'Fatima'),
(2395, 97, 'Maya'),
(2396, 97, 'Nangalisan'),
(2397, 97, 'Nayom'),
(2398, 97, 'Pita'),
(2399, 97, 'Poblacion'),
(2400, 97, 'Potol'),
(2401, 97, 'Babuyan'),
(2402, 98, 'Bolo'),
(2403, 98, 'Bongalon'),
(2404, 98, 'Dulig'),
(2405, 98, 'Laois'),
(2406, 98, 'Magsaysay'),
(2407, 98, 'Poblacion'),
(2408, 98, 'San Gonzalo'),
(2409, 98, 'San Jose'),
(2410, 98, 'Tobuan'),
(2411, 98, 'Uyong'),
(2412, 99, 'Aliwekwek'),
(2413, 99, 'Baay'),
(2414, 99, 'Balangobong'),
(2415, 99, 'Balococ'),
(2416, 99, 'Bantayan'),
(2417, 99, 'Basing'),
(2418, 99, 'Capandanan'),
(2419, 99, 'Domalandan Center'),
(2420, 99, 'Domalandan East'),
(2421, 99, 'Domalandan West'),
(2422, 99, 'Dorongan'),
(2423, 99, 'Dulag'),
(2424, 99, 'Estanza'),
(2425, 99, 'Lasip'),
(2426, 99, 'Libsong East'),
(2427, 99, 'Libsong West'),
(2428, 99, 'Malawa'),
(2429, 99, 'Malimpuec'),
(2430, 99, 'Maniboc'),
(2431, 99, 'Matalava'),
(2432, 99, 'Naguelguel'),
(2433, 99, 'Namolan'),
(2434, 99, 'Pangapisan North'),
(2435, 99, 'Pangapisan Sur'),
(2436, 99, 'Poblacion'),
(2437, 99, 'Quibaol'),
(2438, 99, 'Rosario'),
(2439, 99, 'Sabangan'),
(2440, 99, 'Talogtog'),
(2441, 99, 'Tonton'),
(2442, 99, 'Tumbar'),
(2443, 99, 'Wawa'),
(2444, 100, 'Bacnit'),
(2445, 100, 'Barlo'),
(2446, 100, 'Caabiangaan'),
(2447, 100, 'Cabanaetan'),
(2448, 100, 'Cabinuangan'),
(2449, 100, 'Calzada'),
(2450, 100, 'Caranglaan'),
(2451, 100, 'De Guzman'),
(2452, 100, 'Luna'),
(2453, 100, 'Magalong'),
(2454, 100, 'Nibaliw'),
(2455, 100, 'Patar'),
(2456, 100, 'Poblacion'),
(2457, 100, 'San Pedro'),
(2458, 100, 'Tagudin'),
(2459, 100, 'Villacorta'),
(2460, 101, 'Abonagan'),
(2461, 101, 'Agdao'),
(2462, 101, 'Alacan'),
(2463, 101, 'Aliaga'),
(2464, 101, 'Amacalan'),
(2465, 101, 'Anolid'),
(2466, 101, 'Apaya'),
(2467, 101, 'Asin Este'),
(2468, 101, 'Asin Weste'),
(2469, 101, 'Bacundao Este'),
(2470, 101, 'Bacundao Weste'),
(2471, 101, 'Bakitiw'),
(2472, 101, 'Balite'),
(2473, 101, 'Banawang'),
(2474, 101, 'Barang'),
(2475, 101, 'Bawer'),
(2476, 101, 'Binalay'),
(2477, 101, 'Bobon'),
(2478, 101, 'Bolaoit'),
(2479, 101, 'Bongar'),
(2480, 101, 'Butao'),
(2481, 101, 'Cabatling'),
(2482, 101, 'Cabueldatan'),
(2483, 101, 'Calbueg'),
(2484, 101, 'Canan Norte'),
(2485, 101, 'Canan Sur'),
(2486, 101, 'Cawayan Bogtong'),
(2487, 101, 'Don Pedro'),
(2488, 101, 'Gatang'),
(2489, 101, 'Goliman'),
(2490, 101, 'Gomez'),
(2491, 101, 'Guilig'),
(2492, 101, 'Ican'),
(2493, 101, 'Ingalagala'),
(2494, 101, 'Lareg-lareg'),
(2495, 101, 'Lasip'),
(2496, 101, 'Lepa'),
(2497, 101, 'Loqueb Este'),
(2498, 101, 'Loqueb Norte'),
(2499, 101, 'Loqueb Sur'),
(2500, 101, 'Lunec'),
(2501, 101, 'Mabulitec'),
(2502, 101, 'Malimpec'),
(2503, 101, 'Manggan-Dampay'),
(2504, 101, 'Nancapian'),
(2505, 101, 'Nalsian Norte'),
(2506, 101, 'Nalsian Sur'),
(2507, 101, 'Nansangaan'),
(2508, 101, 'Olea'),
(2509, 101, 'Pacuan'),
(2510, 101, 'Palapar Norte'),
(2511, 101, 'Palapar Sur'),
(2512, 101, 'Palong'),
(2513, 101, 'Pamaranum'),
(2514, 101, 'Pasima'),
(2515, 101, 'Payar'),
(2516, 101, 'Poblacion'),
(2517, 101, 'Polong Norte'),
(2518, 101, 'Polong Sur'),
(2519, 101, 'Potiocan'),
(2520, 101, 'San Julian'),
(2521, 101, 'Tabo-Sili'),
(2522, 101, 'Tobor'),
(2523, 101, 'Talospatang'),
(2524, 101, 'Taloy'),
(2525, 101, 'Taloyan'),
(2526, 101, 'Tambac'),
(2527, 101, 'Tolonguat'),
(2528, 101, 'Tomling'),
(2529, 101, 'Umando'),
(2530, 101, 'Viado'),
(2531, 101, 'Waig'),
(2532, 101, 'Warey'),
(2533, 102, 'Babasit'),
(2534, 102, 'Baguinay'),
(2535, 102, 'Baritao'),
(2536, 102, 'Bisal'),
(2537, 102, 'Bucao'),
(2538, 102, 'Cabanbanan'),
(2539, 102, 'Calaocan'),
(2540, 102, 'Inamotan'),
(2541, 102, 'Lelemaan'),
(2542, 102, 'Licsi'),
(2543, 102, 'Lipit Norte'),
(2544, 102, 'Lipit Sur'),
(2545, 102, 'Parian'),
(2546, 102, 'Matolong'),
(2547, 102, 'Mermer'),
(2548, 102, 'Nalsian'),
(2549, 102, 'Oraan East'),
(2550, 102, 'Oraan West'),
(2551, 102, 'Pantal'),
(2552, 102, 'Pao'),
(2553, 102, 'Poblacion'),
(2554, 102, 'Pugaro'),
(2555, 102, 'San Ramon'),
(2556, 102, 'Santa Ines'),
(2557, 102, 'Sapang'),
(2558, 102, 'Tebuel'),
(2559, 103, 'Alitaya'),
(2560, 103, 'Amansabina'),
(2561, 103, 'Anolid'),
(2562, 103, 'Banaoang'),
(2563, 103, 'Bantayan'),
(2564, 103, 'Bari'),
(2565, 103, 'Bateng'),
(2566, 103, 'Buenlag'),
(2567, 103, 'David'),
(2568, 103, 'Embarcadero'),
(2569, 103, 'Gueguesangen'),
(2570, 103, 'Guesang'),
(2571, 103, 'Guiguilonen'),
(2572, 103, 'Guilig'),
(2573, 103, 'Inlambo'),
(2574, 103, 'Lanas'),
(2575, 103, 'Landas'),
(2576, 103, 'Maasin'),
(2577, 103, 'Macayug'),
(2578, 103, 'Malabago'),
(2579, 103, 'Navaluan'),
(2580, 103, 'Nibaliw'),
(2581, 103, 'Osiem'),
(2582, 103, 'Palua'),
(2583, 103, 'Poblacion'),
(2584, 103, 'Pogo'),
(2585, 103, 'Salaan'),
(2586, 103, 'Salay'),
(2587, 103, 'Tebag'),
(2588, 103, 'Talogtog'),
(2589, 104, 'Andangin'),
(2590, 104, 'Arellano Street (Pob.)'),
(2591, 104, 'Bantay'),
(2592, 104, 'Bantocaling'),
(2593, 104, 'Baracbac'),
(2594, 104, 'Peania Pedania'),
(2595, 104, 'Bogtong Bolo'),
(2596, 104, 'Bogtong Bunao'),
(2597, 104, 'Bogtong Centro'),
(2598, 104, 'Bogtong Niog'),
(2599, 104, 'Bogtong Silag'),
(2600, 104, 'Buaya'),
(2601, 104, 'Buenlag'),
(2602, 104, 'Bueno'),
(2603, 104, 'Bunagan'),
(2604, 104, 'Bunlalacao'),
(2605, 104, 'Burgos Street (Pob.)'),
(2606, 104, 'Cabaluyan 1st'),
(2607, 104, 'Cabaluyan 2nd'),
(2608, 104, 'Cabarabuan'),
(2609, 104, 'Cabaruan'),
(2610, 104, 'Cabayaoasan'),
(2611, 104, 'Cabayugan'),
(2612, 104, 'Cacaoiten'),
(2613, 104, 'Calumboyan Norte'),
(2614, 104, 'Calumboyan Sur'),
(2615, 104, 'Calvo (Pob.)'),
(2616, 104, 'Casilagan'),
(2617, 104, 'Catarataraan'),
(2618, 104, 'Caturay Norte'),
(2619, 104, 'Caturay Sur'),
(2620, 104, 'Caviernesan'),
(2621, 104, 'Dorongan Ketaket'),
(2622, 104, 'Dorongan Linmansangan'),
(2623, 104, 'Dorongan Punta'),
(2624, 104, 'Dorongan Sawat'),
(2625, 104, 'Dorongan Valerio'),
(2626, 104, 'General Luna (Pob.)'),
(2627, 104, 'Historia'),
(2628, 104, 'Lawak Langka'),
(2629, 104, 'Linmansangan'),
(2630, 104, 'Lopez (Pob.)'),
(2631, 104, 'Mabini (Pob.)'),
(2632, 104, 'Macarang'),
(2633, 104, 'Malabobo'),
(2634, 104, 'Malibong'),
(2635, 104, 'Malunec'),
(2636, 104, 'Maravilla (Pob.)'),
(2637, 104, 'Maravilla-Arellano Ext. (Pob.)'),
(2638, 104, 'Muelang'),
(2639, 104, 'Naguilayan East'),
(2640, 104, 'Naguilayan West'),
(2641, 104, 'Nancasalan'),
(2642, 104, 'Niog-Cabison-Bulaney'),
(2643, 104, 'Olegario-Caoile (Pob.)'),
(2644, 104, 'Olo Cacamposan'),
(2645, 104, 'Olo Cafabrosan'),
(2646, 104, 'Olo Cagarlitan'),
(2647, 104, 'Osmeña (Pob.)'),
(2648, 104, 'Pacalat'),
(2649, 104, 'Pampano'),
(2650, 104, 'Parian'),
(2651, 104, 'Paul'),
(2652, 104, 'Pogon-Aniat'),
(2653, 104, 'Pogon-Lomboy (Pob.)'),
(2654, 104, 'Ponglo-Baleg'),
(2655, 104, 'Ponglo-Muelag'),
(2656, 104, 'Quetegan'),
(2657, 104, 'Quezon (Pob.)'),
(2658, 104, 'Salavante'),
(2659, 104, 'Sapang'),
(2660, 104, 'Sonson Ongkit'),
(2661, 104, 'Suaco'),
(2662, 104, 'Tagac'),
(2663, 104, 'Takipan'),
(2664, 104, 'Talogtog'),
(2665, 104, 'Tococ Barikir'),
(2666, 104, 'Torre 1st'),
(2667, 104, 'Torre 2nd'),
(2668, 104, 'Torres Bugallon (Pob.)'),
(2669, 104, 'Umangan'),
(2670, 104, 'Zamora (Pob.)'),
(2671, 105, 'Amanoaoac'),
(2672, 105, 'Apaya'),
(2673, 105, 'Aserda'),
(2674, 105, 'Baloling'),
(2675, 105, 'Coral'),
(2676, 105, 'Golden'),
(2677, 105, 'Jimenez'),
(2678, 105, 'Lambayan'),
(2679, 105, 'Luyan'),
(2680, 105, 'Nilombot'),
(2681, 105, 'Pias'),
(2682, 105, 'Poblacion'),
(2683, 105, 'Primicias'),
(2684, 105, 'Santa Maria'),
(2685, 105, 'Torres'),
(2686, 106, 'Barangobong'),
(2687, 106, 'Batchelor East'),
(2688, 106, 'Batchelor West'),
(2689, 106, 'Burgos'),
(2690, 106, 'Cacandungan'),
(2691, 106, 'Calapugan'),
(2692, 106, 'Canarem'),
(2693, 106, 'Luna'),
(2694, 106, 'Poblacion East'),
(2695, 106, 'Poblacion West'),
(2696, 106, 'Rizal'),
(2697, 106, 'Salud'),
(2698, 106, 'San Eugenio'),
(2699, 106, 'San Macario Norte'),
(2700, 106, 'San Macario Sur'),
(2701, 106, 'San Maximo'),
(2702, 106, 'San Miguel'),
(2703, 106, 'Silag'),
(2704, 107, 'Alipangpang'),
(2705, 107, 'Amagbagan'),
(2706, 107, 'Balacag'),
(2707, 107, 'Banding'),
(2708, 107, 'Bantugan'),
(2709, 107, 'Batakil'),
(2710, 107, 'Bobonan'),
(2711, 107, 'Buneg'),
(2712, 107, 'Cablong'),
(2713, 107, 'Castaño'),
(2714, 107, 'Dilan'),
(2715, 107, 'Don Benito'),
(2716, 107, 'Haway'),
(2717, 107, 'Imbalbalatong'),
(2718, 107, 'Inoman'),
(2719, 107, 'Laoac'),
(2720, 107, 'Maambal'),
(2721, 107, 'Malasin'),
(2722, 107, 'Malokiat'),
(2723, 107, 'Manaol'),
(2724, 107, 'Nama'),
(2725, 107, 'Nantangalan'),
(2726, 107, 'Palacpalac'),
(2727, 107, 'Palguyod'),
(2728, 107, 'Poblacion I'),
(2729, 107, 'Poblacion II'),
(2730, 107, 'Poblacion III'),
(2731, 107, 'Poblacion IV'),
(2732, 107, 'Rosario'),
(2733, 107, 'Sugcong'),
(2734, 107, 'Talogtog'),
(2735, 107, 'Tulnac'),
(2736, 107, 'Villegas'),
(2737, 107, 'Casanfernandoan'),
(2738, 108, 'Acop'),
(2739, 108, 'Bakitbakit'),
(2740, 108, 'Balingcanaway'),
(2741, 108, 'Cabalaoangan Norte'),
(2742, 108, 'Cabalaoangan Sur'),
(2743, 108, 'Camangaan'),
(2744, 108, 'Capitan Tomas'),
(2745, 108, 'Carmay West'),
(2746, 108, 'Carmen East'),
(2747, 108, 'Carmen West'),
(2748, 108, 'Casanicolasan'),
(2749, 108, 'Coliling'),
(2750, 108, 'Calanutan'),
(2751, 108, 'Guiling'),
(2752, 108, 'Palakipak'),
(2753, 108, 'Pangaoan'),
(2754, 108, 'Rabago'),
(2755, 108, 'Rizal'),
(2756, 108, 'Salvacion'),
(2757, 108, 'San Antonio'),
(2758, 108, 'San Bartolome'),
(2759, 108, 'San Isidro'),
(2760, 108, 'San Luis'),
(2761, 108, 'San Pedro East'),
(2762, 108, 'San Pedro West'),
(2763, 108, 'San Vicente'),
(2764, 108, 'San Angel'),
(2765, 108, 'Station District'),
(2766, 108, 'Tomana East'),
(2767, 108, 'Tomana West'),
(2768, 108, 'Zone I (Pob.)'),
(2769, 108, 'Zone IV (Pob.)'),
(2770, 108, 'Carmay East'),
(2771, 108, 'Don Antonio Village'),
(2772, 108, 'Zone II (Pob.)'),
(2773, 108, 'Zone III (Pob.)'),
(2774, 108, 'Zone V (Pob.)'),
(2775, 109, 'Abanon'),
(2776, 109, 'Agdao'),
(2777, 109, 'Anando'),
(2778, 109, 'Ano'),
(2779, 109, 'Antipangol'),
(2780, 109, 'Aponit'),
(2781, 109, 'Bacnar'),
(2782, 109, 'Balaya'),
(2783, 109, 'Balayong'),
(2784, 109, 'Baldog'),
(2785, 109, 'Balite Sur'),
(2786, 109, 'Balococ'),
(2787, 109, 'Bani'),
(2788, 109, 'Bega'),
(2789, 109, 'Bocboc'),
(2790, 109, 'Bugallon-Posadas Street (Pob.)'),
(2791, 109, 'Bogaoan'),
(2792, 109, 'Bolingit'),
(2793, 109, 'Bolosan'),
(2794, 109, 'Bonifacio (Pob.)'),
(2795, 109, 'Buenglat'),
(2796, 109, 'Burgos Padlan (Pob.)'),
(2797, 109, 'Cacaritan'),
(2798, 109, 'Caingal'),
(2799, 109, 'Calobaoan'),
(2800, 109, 'Calomboyan'),
(2801, 109, 'Capataan'),
(2802, 109, 'Caoayan-Kiling'),
(2803, 109, 'Cobol'),
(2804, 109, 'Coliling'),
(2805, 109, 'Cruz'),
(2806, 109, 'Doyong'),
(2807, 109, 'Gamata'),
(2808, 109, 'Guelew'),
(2809, 109, 'Ilang'),
(2810, 109, 'Inerangan'),
(2811, 109, 'Isla'),
(2812, 109, 'Libas'),
(2813, 109, 'Lilimasan'),
(2814, 109, 'Longos'),
(2815, 109, 'Lucban (Pob.)'),
(2816, 109, 'Mabalbalino'),
(2817, 109, 'Mabini (Pob.)'),
(2818, 109, 'Magtaking'),
(2819, 109, 'Malacañang'),
(2820, 109, 'Maliwara'),
(2821, 109, 'Mamarlao'),
(2822, 109, 'Manzon'),
(2823, 109, 'Matagdem'),
(2824, 109, 'Mestizo Norte'),
(2825, 109, 'Naguilayan'),
(2826, 109, 'Nilentap'),
(2827, 109, 'Padilla-Gomez'),
(2828, 109, 'Pagal'),
(2829, 109, 'Palaming'),
(2830, 109, 'Palaris (Pob.)'),
(2831, 109, 'Palospos'),
(2832, 109, 'Pangalangan'),
(2833, 109, 'Pangoloan'),
(2834, 109, 'Pangpang'),
(2835, 109, 'Paitan-Panoypoy'),
(2836, 109, 'Parayao'),
(2837, 109, 'Payapa'),
(2838, 109, 'Payar'),
(2839, 109, 'Perez Boulevard (Pob.)'),
(2840, 109, 'Polo'),
(2841, 109, 'Quezon Boulevard (Pob.)'),
(2842, 109, 'Quintong'),
(2843, 109, 'Rizal (Pob.)'),
(2844, 109, 'Roxas Boulevard (Pob.)'),
(2845, 109, 'Salinap'),
(2846, 109, 'San Juan'),
(2847, 109, 'San Pedro-Taloy'),
(2848, 109, 'Sapinit'),
(2849, 109, 'PNR Station Site'),
(2850, 109, 'Supo'),
(2851, 109, 'Talang'),
(2852, 109, 'Tamayo'),
(2853, 109, 'Tandoc'),
(2854, 109, 'Tarece'),
(2855, 109, 'Tarectec'),
(2856, 109, 'Tayambani'),
(2857, 109, 'Tebag'),
(2858, 109, 'Turac'),
(2859, 109, 'M. Soriano'),
(2860, 109, 'Tandang Sora'),
(2861, 110, 'Ambalangan-Dalin'),
(2862, 110, 'Angio'),
(2863, 110, 'Anonang'),
(2864, 110, 'Aramal'),
(2865, 110, 'Bigbiga'),
(2866, 110, 'Binday'),
(2867, 110, 'Bolaoen'),
(2868, 110, 'Bolasi'),
(2869, 110, 'Cayanga'),
(2870, 110, 'Gomot'),
(2871, 110, 'Inmalog'),
(2872, 110, 'Lekep-Butao'),
(2873, 110, 'Longos'),
(2874, 110, 'Mabilao'),
(2875, 110, 'Nibaliw Central'),
(2876, 110, 'Nibaliw East'),
(2877, 110, 'Nibaliw Magliba'),
(2878, 110, 'Palapad'),
(2879, 110, 'Poblacion'),
(2880, 110, 'Rabon'),
(2881, 110, 'Sagud-Bahley'),
(2882, 110, 'Sobol'),
(2883, 110, 'Tempra-Guilig'),
(2884, 110, 'Tocok'),
(2885, 110, 'Lipit-Tomeeng'),
(2886, 110, 'Colisao'),
(2887, 110, 'Nibaliw Narvarte'),
(2888, 110, 'Nibaliw Vidal'),
(2889, 110, 'Alacan'),
(2890, 110, 'Cabaruan'),
(2891, 110, 'Inmalog Norte'),
(2892, 110, 'Longos-Amangonan-Parac-Parac Fabrica'),
(2893, 110, 'Longos Proper'),
(2894, 110, 'Tiblong'),
(2895, 111, 'Awai'),
(2896, 111, 'Bolo'),
(2897, 111, 'Capaoay (Pob.)'),
(2898, 111, 'Casibong'),
(2899, 111, 'Imelda'),
(2900, 111, 'Guibel'),
(2901, 111, 'Labney'),
(2902, 111, 'Magsaysay'),
(2903, 111, 'Lobong'),
(2904, 111, 'Macayug'),
(2905, 111, 'Bagong Pag-asa'),
(2906, 111, 'San Guillermo'),
(2907, 111, 'San Jose'),
(2908, 111, 'San Juan'),
(2909, 111, 'San Roque'),
(2910, 111, 'San Vicente'),
(2911, 111, 'Santa Cruz'),
(2912, 111, 'Santa Maria'),
(2913, 111, 'Santo Tomas'),
(2914, 112, 'San Antonio-Arzadon'),
(2915, 112, 'Cabacaraan'),
(2916, 112, 'Cabaritan'),
(2917, 112, 'Flores'),
(2918, 112, 'Guiset Norte (Pob.)'),
(2919, 112, 'Guiset Sur (Pob.)'),
(2920, 112, 'Lapalo'),
(2921, 112, 'Nagsaag'),
(2922, 112, 'Narra'),
(2923, 112, 'San Bonifacio'),
(2924, 112, 'San Juan'),
(2925, 112, 'San Roque'),
(2926, 112, 'San Vicente'),
(2927, 112, 'Santo Domingo'),
(2928, 113, 'Bensican'),
(2929, 113, 'Cabitnongan'),
(2930, 113, 'Caboloan'),
(2931, 113, 'Cacabugaoan'),
(2932, 113, 'Calanutian'),
(2933, 113, 'Calaocan'),
(2934, 113, 'Camanggaan'),
(2935, 113, 'Camindoroan'),
(2936, 113, 'Casaratan'),
(2937, 113, 'Dalumpinas'),
(2938, 113, 'Fianza'),
(2939, 113, 'Lungao'),
(2940, 113, 'Malico'),
(2941, 113, 'Malilion'),
(2942, 113, 'Nagkaysa'),
(2943, 113, 'Nining'),
(2944, 113, 'Poblacion East'),
(2945, 113, 'Poblacion West'),
(2946, 113, 'Salingcob'),
(2947, 113, 'Salpad'),
(2948, 113, 'San Felipe East'),
(2949, 113, 'San Felipe West'),
(2950, 113, 'San Isidro'),
(2951, 113, 'San Jose'),
(2952, 113, 'San Rafael Centro'),
(2953, 113, 'San Rafael East'),
(2954, 113, 'San Rafael West'),
(2955, 113, 'San Roque'),
(2956, 113, 'Santa Maria East'),
(2957, 113, 'Santa Maria West'),
(2958, 113, 'Santo Tomas'),
(2959, 113, 'Siblot'),
(2960, 113, 'Sobol'),
(2961, 114, 'Alac'),
(2962, 114, 'Baligayan'),
(2963, 114, 'Bantog'),
(2964, 114, 'Bolintaguen'),
(2965, 114, 'Cabangaran'),
(2966, 114, 'Cabalaoangan'),
(2967, 114, 'Calomboyan'),
(2968, 114, 'Carayacan'),
(2969, 114, 'Casantamarian'),
(2970, 114, 'Gonzalo'),
(2971, 114, 'Labuan'),
(2972, 114, 'Lagasit'),
(2973, 114, 'Lumayao'),
(2974, 114, 'Mabini'),
(2975, 114, 'Mantacdang'),
(2976, 114, 'Nangapugan'),
(2977, 114, 'San Pedro'),
(2978, 114, 'Ungib'),
(2979, 114, 'Poblacion Zone I'),
(2980, 114, 'Poblacion Zone II'),
(2981, 114, 'Poblacion Zone III'),
(2982, 115, 'Alibago'),
(2983, 115, 'Balingueo'),
(2984, 115, 'Banaoang'),
(2985, 115, 'Banzal'),
(2986, 115, 'Botao'),
(2987, 115, 'Cablong'),
(2988, 115, 'Carusocan'),
(2989, 115, 'Dalongue'),
(2990, 115, 'Erfe'),
(2991, 115, 'Gueguesangen'),
(2992, 115, 'Leet'),
(2993, 115, 'Malanay'),
(2994, 115, 'Maningding'),
(2995, 115, 'Maronong'),
(2996, 115, 'Maticmatic'),
(2997, 115, 'Minien East'),
(2998, 115, 'Minien West'),
(2999, 115, 'Nilombot'),
(3000, 115, 'Patayac'),
(3001, 115, 'Payas'),
(3002, 115, 'Poblacion Norte'),
(3003, 115, 'Poblacion Sur'),
(3004, 115, 'Sapang'),
(3005, 115, 'Sonquil'),
(3006, 115, 'Tebag East'),
(3007, 115, 'Tebag West'),
(3008, 115, 'Tuliao'),
(3009, 115, 'Ventinilla'),
(3010, 115, 'Primicias'),
(3011, 116, 'Bal-loy'),
(3012, 116, 'Bantog'),
(3013, 116, 'Caboluan'),
(3014, 116, 'Cal-litang'),
(3015, 116, 'Capandanan'),
(3016, 116, 'Cauplasan'),
(3017, 116, 'Dalayap'),
(3018, 116, 'Libsong'),
(3019, 116, 'Namagbagan'),
(3020, 116, 'Paitan'),
(3021, 116, 'Pataquid'),
(3022, 116, 'Pilar'),
(3023, 116, 'Poblacion East'),
(3024, 116, 'Poblacion West'),
(3025, 116, 'Pugot'),
(3026, 116, 'Samon'),
(3027, 116, 'San Alejandro'),
(3028, 116, 'San Mariano'),
(3029, 116, 'San Pablo'),
(3030, 116, 'San Patricio'),
(3031, 116, 'San Vicente'),
(3032, 116, 'Santa Cruz'),
(3033, 116, 'Santa Rosa'),
(3034, 117, 'La Luna'),
(3035, 117, 'Poblacion East'),
(3036, 117, 'Poblacion West'),
(3037, 117, 'Salvacion'),
(3038, 117, 'San Agustin'),
(3039, 117, 'San Antonio'),
(3040, 117, 'San Jose'),
(3041, 117, 'San Marcos'),
(3042, 117, 'Santo Domingo'),
(3043, 117, 'Santo Niño'),
(3044, 118, 'Agat'),
(3045, 118, 'Alibeng'),
(3046, 118, 'Amagbagan'),
(3047, 118, 'Artacho'),
(3048, 118, 'Asan Norte'),
(3049, 118, 'Asan Sur'),
(3050, 118, 'Bantay Insik'),
(3051, 118, 'Bila'),
(3052, 118, 'Binmeckeg'),
(3053, 118, 'Bulaoen East'),
(3054, 118, 'Bulaoen West'),
(3055, 118, 'Cabaritan'),
(3056, 118, 'Calunetan'),
(3057, 118, 'Camangaan'),
(3058, 118, 'Cauringan'),
(3059, 118, 'Dungon'),
(3060, 118, 'Esperanza'),
(3061, 118, 'Killo'),
(3062, 118, 'Labayug'),
(3063, 118, 'Paldit'),
(3064, 118, 'Pindangan'),
(3065, 118, 'Pinmilapil'),
(3066, 118, 'Poblacion Central'),
(3067, 118, 'Poblacion Norte'),
(3068, 118, 'Poblacion Sur'),
(3069, 118, 'Sagunto'),
(3070, 118, 'Inmalog'),
(3071, 118, 'Tara-tara'),
(3072, 119, 'Baquioen'),
(3073, 119, 'Baybay Norte'),
(3074, 119, 'Baybay Sur'),
(3075, 119, 'Bolaoen'),
(3076, 119, 'Cabalitian'),
(3077, 119, 'Calumbuyan'),
(3078, 119, 'Camagsingalan'),
(3079, 119, 'Caoayan'),
(3080, 119, 'Capantolan'),
(3081, 119, 'Macaycayawan'),
(3082, 119, 'Paitan East'),
(3083, 119, 'Paitan West'),
(3084, 119, 'Pangascasan'),
(3085, 119, 'Poblacion'),
(3086, 119, 'Santo Domingo'),
(3087, 119, 'Seselangen'),
(3088, 119, 'Sioasio East'),
(3089, 119, 'Sioasio West'),
(3090, 119, 'Victoria'),
(3091, 120, 'Agno'),
(3092, 120, 'Amistad'),
(3093, 120, 'Barangobong'),
(3094, 120, 'Carriedo'),
(3095, 120, 'C. Lichauco'),
(3096, 120, 'Evangelista'),
(3097, 120, 'Guzon'),
(3098, 120, 'Lawak'),
(3099, 120, 'Legaspi'),
(3100, 120, 'Libertad'),
(3101, 120, 'Magallanes'),
(3102, 120, 'Panganiban'),
(3103, 120, 'Barangay A (Pob.)'),
(3104, 120, 'Barangay B (Pob.)'),
(3105, 120, 'Barangay C (Pob.)'),
(3106, 120, 'Barangay D (Pob.)'),
(3107, 120, 'Saleng'),
(3108, 120, 'Santo Domingo'),
(3109, 120, 'Toketec'),
(3110, 120, 'Trenchera'),
(3111, 120, 'Zamora'),
(3112, 121, 'Abot Molina'),
(3113, 121, 'Alo-o'),
(3114, 121, 'Amaronan'),
(3115, 121, 'Annam'),
(3116, 121, 'Bantug'),
(3117, 121, 'Baracbac'),
(3118, 121, 'Barat'),
(3119, 121, 'Buenavista'),
(3120, 121, 'Cabalitian'),
(3121, 121, 'Cabaruan'),
(3122, 121, 'Cabatuan'),
(3123, 121, 'Cadiz'),
(3124, 121, 'Calitlitan'),
(3125, 121, 'Capas'),
(3126, 121, 'Carosalesan'),
(3127, 121, 'Casilan'),
(3128, 121, 'Caurdanetaan'),
(3129, 121, 'Concepcion'),
(3130, 121, 'Decreto'),
(3131, 121, 'Diaz'),
(3132, 121, 'Diket'),
(3133, 121, 'Don Justo Abalos'),
(3134, 121, 'Don Montano'),
(3135, 121, 'Esperanza'),
(3136, 121, 'Evangelista'),
(3137, 121, 'Flores'),
(3138, 121, 'Fulgosino'),
(3139, 121, 'Gonzales'),
(3140, 121, 'La Paz'),
(3141, 121, 'Labuan'),
(3142, 121, 'Lauren'),
(3143, 121, 'Lubong'),
(3144, 121, 'Luna Weste'),
(3145, 121, 'Luna Este'),
(3146, 121, 'Mantacdang'),
(3147, 121, 'Maseil-seil'),
(3148, 121, 'Nampalcan'),
(3149, 121, 'Nancalabasaan'),
(3150, 121, 'Pangangaan'),
(3151, 121, 'Papallasen'),
(3152, 121, 'Pemienta'),
(3153, 121, 'Poblacion East'),
(3154, 121, 'Poblacion West'),
(3155, 121, 'Prado'),
(3156, 121, 'Resurreccion'),
(3157, 121, 'Ricos'),
(3158, 121, 'San Andres'),
(3159, 121, 'San Juan'),
(3160, 121, 'San Leon'),
(3161, 121, 'San Pablo'),
(3162, 121, 'San Vicente'),
(3163, 121, 'Santa Maria'),
(3164, 121, 'Santa Rosa'),
(3165, 121, 'Sinabaan'),
(3166, 121, 'Tanggal Sawang'),
(3167, 121, 'Cabangaran'),
(3168, 121, 'Carayungan Sur'),
(3169, 121, 'Del Rosario'),
(3170, 122, 'Angatel'),
(3171, 122, 'Balangay'),
(3172, 122, 'Batangcaoa'),
(3173, 122, 'Baug'),
(3174, 122, 'Bayaoas'),
(3175, 122, 'Bituag'),
(3176, 122, 'Camambugan'),
(3177, 122, 'Dalangiring'),
(3178, 122, 'Duplac'),
(3179, 122, 'Galarin'),
(3180, 122, 'Gueteb'),
(3181, 122, 'Malaca'),
(3182, 122, 'Malayo'),
(3183, 122, 'Malibong'),
(3184, 122, 'Pasibi East'),
(3185, 122, 'Pasibi West'),
(3186, 122, 'Pisuac'),
(3187, 122, 'Poblacion'),
(3188, 122, 'Real'),
(3189, 122, 'Salavante'),
(3190, 122, 'Sawat'),
(3191, 123, 'Anonas'),
(3192, 123, 'Bactad East'),
(3193, 123, 'Dr. Pedro T. Orata'),
(3194, 123, 'Bayaoas'),
(3195, 123, 'Bolaoen'),
(3196, 123, 'Cabaruan'),
(3197, 123, 'Cabuloan'),
(3198, 123, 'Camanang'),
(3199, 123, 'Camantiles'),
(3200, 123, 'Casantaan'),
(3201, 123, 'Catablan'),
(3202, 123, 'Cayambanan'),
(3203, 123, 'Consolacion'),
(3204, 123, 'Dilan Paurido'),
(3205, 123, 'Labit Proper'),
(3206, 123, 'Labit West'),
(3207, 123, 'Mabanogbog'),
(3208, 123, 'Macalong'),
(3209, 123, 'Nancalobasaan'),
(3210, 123, 'Nancamaliran East'),
(3211, 123, 'Nancamaliran West'),
(3212, 123, 'Nancayasan'),
(3213, 123, 'Oltama'),
(3214, 123, 'Palina East'),
(3215, 123, 'Palina West'),
(3216, 123, 'Pinmaludpod'),
(3217, 123, 'Poblacion'),
(3218, 123, 'San Jose'),
(3219, 123, 'San Vicente'),
(3220, 123, 'Santa Lucia'),
(3221, 123, 'Santo Domingo'),
(3222, 123, 'Sugcong'),
(3223, 123, 'Tipuso'),
(3224, 123, 'Tulong'),
(3225, 124, 'Amamperez'),
(3226, 124, 'Bacag'),
(3227, 124, 'Barangobong'),
(3228, 124, 'Barraca'),
(3229, 124, 'Capulaan'),
(3230, 124, 'Caramutan'),
(3231, 124, 'La Paz'),
(3232, 124, 'Labit'),
(3233, 124, 'Lipay'),
(3234, 124, 'Lomboy'),
(3235, 124, 'Piaz'),
(3236, 124, 'Zone V (Pob.)'),
(3237, 124, 'Zone I (Pob.)'),
(3238, 124, 'Zone II (Pob.)'),
(3239, 124, 'Zone III (Pob.)'),
(3240, 124, 'Zone IV (Pob.)'),
(3241, 124, 'Puelay'),
(3242, 124, 'San Blas'),
(3243, 124, 'San Nicolas'),
(3244, 124, 'Tombod'),
(3245, 124, 'Unzad'),
(3246, 125, 'Anis'),
(3247, 125, 'Botique'),
(3248, 125, 'Caaringayan'),
(3249, 125, 'Domingo Alarcio'),
(3250, 125, 'Cabilaoan West'),
(3251, 125, 'Cabulalaan'),
(3252, 125, 'Calaoagan'),
(3253, 125, 'Calmay'),
(3254, 125, 'Casampagaan'),
(3255, 125, 'Casanestebanan'),
(3256, 125, 'Casantiagoan'),
(3257, 125, 'Inmanduyan'),
(3258, 125, 'Poblacion'),
(3259, 125, 'Lebueg'),
(3260, 125, 'Maraboc'),
(3261, 125, 'Nanbagatan'),
(3262, 125, 'Panaga'),
(3263, 125, 'Talogtog'),
(3264, 125, 'Turko'),
(3265, 125, 'Yatyat'),
(3266, 125, 'Balligi'),
(3267, 125, 'Banuar'),
(3268, 126, 'Ihubok II'),
(3269, 126, 'Ihubok I'),
(3270, 126, 'San Antonio'),
(3271, 126, 'San Joaquin'),
(3272, 126, 'Chanarian'),
(3273, 126, 'Kayhuvokan'),
(3274, 127, 'Raele'),
(3275, 127, 'San Rafael'),
(3276, 127, 'Santa Lucia'),
(3277, 127, 'Santa Maria'),
(3278, 127, 'Santa Rosa'),
(3279, 128, 'Radiwan'),
(3280, 128, 'Salagao'),
(3281, 128, 'San Vicente'),
(3282, 128, 'Tuhel (Pob.)'),
(3283, 129, 'Hañib'),
(3284, 129, 'Kaumbakan'),
(3285, 129, 'Panatayan'),
(3286, 129, 'Uvoy (Pob.)'),
(3287, 130, 'Chavayan'),
(3288, 130, 'Malakdang (Pob.)'),
(3289, 130, 'Nakanmuan'),
(3290, 130, 'Savidug'),
(3291, 130, 'Sinakan (Pob.)'),
(3292, 130, 'Sumnanga'),
(3293, 131, 'Kayvaluganan (Pob.)'),
(3294, 131, 'Imnajbu'),
(3295, 131, 'Itbud'),
(3296, 131, 'Kayuganan (Pob.)'),
(3297, 132, 'Alinunu'),
(3298, 132, 'Bagu'),
(3299, 132, 'Banguian'),
(3300, 132, 'Calog Norte'),
(3301, 132, 'Calog Sur'),
(3302, 132, 'Canayun'),
(3303, 132, 'Centro (Pob.)'),
(3304, 132, 'Dana-Ili'),
(3305, 132, 'Guiddam'),
(3306, 132, 'Libertad'),
(3307, 132, 'Lucban'),
(3308, 132, 'Pinili'),
(3309, 132, 'Santa Filomena'),
(3310, 132, 'Santo Tomas'),
(3311, 132, 'Siguiran'),
(3312, 132, 'Simayung'),
(3313, 132, 'Sirit'),
(3314, 132, 'San Agustin'),
(3315, 132, 'San Julian'),
(3316, 132, 'Santa Rosa'),
(3317, 133, 'Abbeg'),
(3318, 133, 'Afusing Bato'),
(3319, 133, 'Afusing Daga'),
(3320, 133, 'Agani'),
(3321, 133, 'Baculod'),
(3322, 133, 'Baybayog'),
(3323, 133, 'Cabuluan'),
(3324, 133, 'Calantac'),
(3325, 133, 'Carallangan'),
(3326, 133, 'Centro Norte (Pob.)'),
(3327, 133, 'Centro Sur (Pob.)'),
(3328, 133, 'Dalaoig'),
(3329, 133, 'Damurog'),
(3330, 133, 'Jurisdiction'),
(3331, 133, 'Malalatan'),
(3332, 133, 'Maraburab'),
(3333, 133, 'Masin'),
(3334, 133, 'Pagbangkeruan'),
(3335, 133, 'Pared'),
(3336, 133, 'Piggatan'),
(3337, 133, 'Pinopoc'),
(3338, 133, 'Pussian'),
(3339, 133, 'San Esteban'),
(3340, 133, 'Tamban'),
(3341, 133, 'Tupang'),
(3342, 134, 'Bessang'),
(3343, 134, 'Binobongan'),
(3344, 134, 'Bulo'),
(3345, 134, 'Burot'),
(3346, 134, 'Capagaran'),
(3347, 134, 'Capalutan'),
(3348, 134, 'Capanickian Norte'),
(3349, 134, 'Capanickian Sur'),
(3350, 134, 'Cataratan'),
(3351, 134, 'Centro East (Pob.)'),
(3352, 134, 'Centro West (Pob.)'),
(3353, 134, 'Daan-Ili'),
(3354, 134, 'Dagupan'),
(3355, 134, 'Dalayap'),
(3356, 134, 'Gagaddangan'),
(3357, 134, 'Iringan'),
(3358, 134, 'Labben'),
(3359, 134, 'Maluyo'),
(3360, 134, 'Mapurao'),
(3361, 134, 'Matucay'),
(3362, 134, 'Nagattatan'),
(3363, 134, 'Pacac'),
(3364, 134, 'San Juan'),
(3365, 134, 'Silangan'),
(3366, 134, 'Tamboli'),
(3367, 134, 'Tubel'),
(3368, 134, 'Utan'),
(3369, 135, 'Abolo'),
(3370, 135, 'Agguirit'),
(3371, 135, 'Alitungtung'),
(3372, 135, 'Annabuculan'),
(3373, 135, 'Annafatan'),
(3374, 135, 'Anquiray'),
(3375, 135, 'Babayuan'),
(3376, 135, 'Baccuit'),
(3377, 135, 'Bacring'),
(3378, 135, 'Baculud'),
(3379, 135, 'Balauini'),
(3380, 135, 'Bauan'),
(3381, 135, 'Bayabat'),
(3382, 135, 'Calamagui'),
(3383, 135, 'Calintaan'),
(3384, 135, 'Caratacat'),
(3385, 135, 'Casingsingan Norte'),
(3386, 135, 'Casingsingan Sur'),
(3387, 135, 'Catarauan'),
(3388, 135, 'Centro'),
(3389, 135, 'Concepcion'),
(3390, 135, 'Cordova'),
(3391, 135, 'Dadda'),
(3392, 135, 'Dafunganay'),
(3393, 135, 'Dugayung'),
(3394, 135, 'Estefania'),
(3395, 135, 'Gabut'),
(3396, 135, 'Gangauan'),
(3397, 135, 'Goran'),
(3398, 135, 'Jurisdiccion'),
(3399, 135, 'La Suerte'),
(3400, 135, 'Logung'),
(3401, 135, 'Magogod'),
(3402, 135, 'Manalo'),
(3403, 135, 'Marobbob'),
(3404, 135, 'Masical'),
(3405, 135, 'Monte Alegre'),
(3406, 135, 'Nabbialan'),
(3407, 135, 'Nagsabaran'),
(3408, 135, 'Nangalasauan'),
(3409, 135, 'Nanuccauan'),
(3410, 135, 'Pacac-Grande'),
(3411, 135, 'Pacac-Pequeño'),
(3412, 135, 'Palacu'),
(3413, 135, 'Palayag'),
(3414, 135, 'Tana'),
(3415, 135, 'Unag'),
(3416, 136, 'Backiling'),
(3417, 136, 'Bangag'),
(3418, 136, 'Binalan'),
(3419, 136, 'Bisagu'),
(3420, 136, 'Centro 1 (Pob.)'),
(3421, 136, 'Centro 2 (Pob.)'),
(3422, 136, 'Centro 3 (Pob.)'),
(3423, 136, 'Centro 4 (Pob.)'),
(3424, 136, 'Centro 5 (Pob.)'),
(3425, 136, 'Centro 6 (Pob.)'),
(3426, 136, 'Centro 7 (Pob.)'),
(3427, 136, 'Centro 8 (Pob.)'),
(3428, 136, 'Centro 9 (Pob.)'),
(3429, 136, 'Centro 10 (Pob.)'),
(3430, 136, 'Centro 11 (Pob.)'),
(3431, 136, 'Centro 12 (Pob.)'),
(3432, 136, 'Centro 13 (Pob.)'),
(3433, 136, 'Centro 14 (Pob.)'),
(3434, 136, 'Bukig'),
(3435, 136, 'Bulala Norte'),
(3436, 136, 'Bulala Sur'),
(3437, 136, 'Caagaman'),
(3438, 136, 'Centro 15 (Pob.)'),
(3439, 136, 'Dodan'),
(3440, 136, 'Fuga Island'),
(3441, 136, 'Gaddang'),
(3442, 136, 'Linao'),
(3443, 136, 'Mabanguc'),
(3444, 136, 'Macanaya'),
(3445, 136, 'Maura'),
(3446, 136, 'Minanga'),
(3447, 136, 'Navagan'),
(3448, 136, 'Paddaya'),
(3449, 136, 'Paruddun Norte'),
(3450, 136, 'Paruddun Sur'),
(3451, 136, 'Plaza'),
(3452, 136, 'Punta'),
(3453, 136, 'San Antonio'),
(3454, 136, 'Tallungan'),
(3455, 136, 'Toran'),
(3456, 136, 'Sanja'),
(3457, 136, 'Zinarag'),
(3458, 137, 'Adaoag'),
(3459, 137, 'Agaman'),
(3460, 137, 'Alba'),
(3461, 137, 'Annayatan'),
(3462, 137, 'Asassi'),
(3463, 137, 'Asinga-Via'),
(3464, 137, 'Awallan'),
(3465, 137, 'Bacagan'),
(3466, 137, 'Bagunot'),
(3467, 137, 'Barsat East'),
(3468, 137, 'Barsat West'),
(3469, 137, 'Bitag Grande'),
(3470, 137, 'Bitag Pequeño'),
(3471, 137, 'Bunugan'),
(3472, 137, 'Canagatan'),
(3473, 137, 'Carupian'),
(3474, 137, 'Catugay'),
(3475, 137, 'Poblacion'),
(3476, 137, 'Dabbac Grande'),
(3477, 137, 'Dalin'),
(3478, 137, 'Dalla'),
(3479, 137, 'Hacienda Intal'),
(3480, 137, 'Ibulo'),
(3481, 137, 'Imurong'),
(3482, 137, 'J. Pallagao'),
(3483, 137, 'Lasilat'),
(3484, 137, 'Masical'),
(3485, 137, 'Mocag'),
(3486, 137, 'Nangalinan'),
(3487, 137, 'Remus'),
(3488, 137, 'San Antonio'),
(3489, 137, 'San Francisco'),
(3490, 137, 'San Isidro'),
(3491, 137, 'San Jose'),
(3492, 137, 'San Miguel'),
(3493, 137, 'San Vicente'),
(3494, 137, 'Santa Margarita'),
(3495, 137, 'Santor'),
(3496, 137, 'Taguing'),
(3497, 137, 'Taguntungan'),
(3498, 137, 'Tallang'),
(3499, 137, 'Temblique'),
(3500, 137, 'Taytay'),
(3501, 137, 'Tungel'),
(3502, 137, 'Mabini'),
(3503, 137, 'Agaman Norte'),
(3504, 137, 'Agaman Sur'),
(3505, 137, 'C. Verzosa'),
(3506, 138, 'Ammubuan'),
(3507, 138, 'Baran'),
(3508, 138, 'Cabaritan East'),
(3509, 138, 'Cabaritan West'),
(3510, 138, 'Cabayu'),
(3511, 138, 'Cabuluan East'),
(3512, 138, 'Cabuluan West'),
(3513, 138, 'Centro East (Pob.)'),
(3514, 138, 'Centro West (Pob.)'),
(3515, 138, 'Fugu'),
(3516, 138, 'Mabuttal East'),
(3517, 138, 'Mabuttal West'),
(3518, 138, 'Nararagan'),
(3519, 138, 'Palloc'),
(3520, 138, 'Payagan East'),
(3521, 138, 'Payagan West'),
(3522, 138, 'San Juan'),
(3523, 138, 'Santa Cruz'),
(3524, 138, 'Zitanga'),
(3525, 139, 'Ballang'),
(3526, 139, 'Balza'),
(3527, 139, 'Cabaritan'),
(3528, 139, 'Calamegatan'),
(3529, 139, 'Centro (Pob.)'),
(3530, 139, 'Centro West'),
(3531, 139, 'Dalaya'),
(3532, 139, 'Fula'),
(3533, 139, 'Leron'),
(3534, 139, 'Antiporda'),
(3535, 139, 'Maddalero'),
(3536, 139, 'Mala Este'),
(3537, 139, 'Mala Weste'),
(3538, 139, 'Minanga Este'),
(3539, 139, 'Paddaya Este'),
(3540, 139, 'Pattao'),
(3541, 139, 'Quinawegan'),
(3542, 139, 'Remebella'),
(3543, 139, 'San Isidro'),
(3544, 139, 'Santa Isabel'),
(3545, 139, 'Santa Maria'),
(3546, 139, 'Tabbac'),
(3547, 139, 'Villa Cielo'),
(3548, 139, 'Alucao Weste'),
(3549, 139, 'Minanga Weste'),
(3550, 139, 'Paddaya Weste'),
(3551, 139, 'San Juan'),
(3552, 139, 'San Vicente'),
(3553, 139, 'Villa Gracia'),
(3554, 139, 'Villa Leonora'),
(3555, 140, 'Cabudadan'),
(3556, 140, 'Balatubat'),
(3557, 140, 'Dadao'),
(3558, 140, 'Dibay'),
(3559, 140, 'Dilam'),
(3560, 140, 'Magsidel'),
(3561, 140, 'Naguilian'),
(3562, 140, 'Poblacion'),
(3563, 140, 'Babuyan Claro'),
(3564, 140, 'Centro II'),
(3565, 140, 'Dalupiri'),
(3566, 140, 'Minabel'),
(3567, 141, 'Abagao'),
(3568, 141, 'Afunan Cabayu'),
(3569, 141, 'Agusi'),
(3570, 141, 'Alilinu'),
(3571, 141, 'Baggao'),
(3572, 141, 'Bantay'),
(3573, 141, 'Bulala'),
(3574, 141, 'Casili Norte'),
(3575, 141, 'Catotoran Norte'),
(3576, 141, 'Centro Norte (Pob.)'),
(3577, 141, 'Centro Sur (Pob.)'),
(3578, 141, 'Cullit'),
(3579, 141, 'Dacal-Lafugu'),
(3580, 141, 'Dammang Norte'),
(3581, 141, 'Dugo'),
(3582, 141, 'Fusina'),
(3583, 141, 'Gang-ngo'),
(3584, 141, 'Jurisdiction'),
(3585, 141, 'Luec'),
(3586, 141, 'Minanga'),
(3587, 141, 'Paragat'),
(3588, 141, 'Tagum'),
(3589, 141, 'Tuluttuging'),
(3590, 141, 'Ziminila'),
(3591, 141, 'Casili Sur'),
(3592, 141, 'Catotoran Sur'),
(3593, 141, 'Dammang Sur'),
(3594, 141, 'Sapping'),
(3595, 142, 'Alimoan'),
(3596, 142, 'Bacsay Cataraoan Norte'),
(3597, 142, 'Bacsay Mapulapula'),
(3598, 142, 'Bilibigao'),
(3599, 142, 'Buenavista'),
(3600, 142, 'Cadcadir East'),
(3601, 142, 'Capanikian'),
(3602, 142, 'Centro I (Pob.)'),
(3603, 142, 'Centro II (Pob.)'),
(3604, 142, 'Culao'),
(3605, 142, 'Dibalio'),
(3606, 142, 'Kilkiling'),
(3607, 142, 'Lablabig'),
(3608, 142, 'Luzon'),
(3609, 142, 'Mabnang'),
(3610, 142, 'Magdalena'),
(3611, 142, 'Centro VII'),
(3612, 142, 'Malilitao'),
(3613, 142, 'Centro VI'),
(3614, 142, 'Nagsabaran'),
(3615, 142, 'Centro IV'),
(3616, 142, 'Pata East'),
(3617, 142, 'Pinas'),
(3618, 142, 'Santiago'),
(3619, 142, 'Santo Tomas'),
(3620, 142, 'Santa Maria'),
(3621, 142, 'Tabbugan'),
(3622, 142, 'Taggat Norte'),
(3623, 142, 'Union'),
(3624, 142, 'Bacsay Cataraoan Sur'),
(3625, 142, 'Cadcadir West'),
(3626, 142, 'Camalaggoan/D Leaño'),
(3627, 142, 'Centro III'),
(3628, 142, 'Centro V'),
(3629, 142, 'Centro VIII'),
(3630, 142, 'Pata West'),
(3631, 142, 'San Antonio'),
(3632, 142, 'San Isidro'),
(3633, 142, 'San Vicente'),
(3634, 142, 'Santo Niño'),
(3635, 142, 'Taggat Sur'),
(3636, 143, 'Alibago'),
(3637, 143, 'Barangay I (Pob.)'),
(3638, 143, 'Barangay II (Pob.)'),
(3639, 143, 'Barangay III'),
(3640, 143, 'Divisoria'),
(3641, 143, 'Inga'),
(3642, 143, 'Lanna'),
(3643, 143, 'Lemu Norte'),
(3644, 143, 'Liwan Norte'),
(3645, 143, 'Liwan Sur'),
(3646, 143, 'Maddarulug Norte'),
(3647, 143, 'Magalalag East'),
(3648, 143, 'Maracuru'),
(3649, 143, 'Barangay IV (Pob.)'),
(3650, 143, 'Roma Norte'),
(3651, 143, 'Barangay III-A'),
(3652, 143, 'Batu'),
(3653, 143, 'Lemu Sur'),
(3654, 143, 'Maddarulug Sur'),
(3655, 143, 'Magalalag West'),
(3656, 143, 'Roma Sur'),
(3657, 143, 'San Antonio'),
(3658, 144, 'Abra'),
(3659, 144, 'Aguiguican'),
(3660, 144, 'Bangatan Ngagan'),
(3661, 144, 'Baracaoit'),
(3662, 144, 'Baraoidan'),
(3663, 144, 'Barbarit'),
(3664, 144, 'Basao'),
(3665, 144, 'Cabayu'),
(3666, 144, 'Calaoagan Bassit'),
(3667, 144, 'Calaoagan Dackel'),
(3668, 144, 'Capiddigan'),
(3669, 144, 'Capissayan Norte'),
(3670, 144, 'Capissayan Sur'),
(3671, 144, 'Casicallan Sur'),
(3672, 144, 'Casicallan Norte'),
(3673, 144, 'Centro Norte (Pob.)'),
(3674, 144, 'Centro Sur (Pob.)'),
(3675, 144, 'Cullit'),
(3676, 144, 'Cumao'),
(3677, 144, 'Cunig'),
(3678, 144, 'Dummun'),
(3679, 144, 'Fugu'),
(3680, 144, 'Ganzano'),
(3681, 144, 'Guising'),
(3682, 144, 'Langgan'),
(3683, 144, 'Lapogan'),
(3684, 144, 'L. Adviento'),
(3685, 144, 'Mabuno'),
(3686, 144, 'Nabaccayan'),
(3687, 144, 'Naddungan'),
(3688, 144, 'Nagatutuan'),
(3689, 144, 'Nassiping'),
(3690, 144, 'Newagac'),
(3691, 144, 'Palagao Norte'),
(3692, 144, 'Palagao Sur'),
(3693, 144, 'Piña Este'),
(3694, 144, 'Piña Weste'),
(3695, 144, 'San Vicente'),
(3696, 144, 'Santa Maria'),
(3697, 144, 'Sidem'),
(3698, 144, 'Santa Ana'),
(3699, 144, 'Tagumay'),
(3700, 144, 'Takiki'),
(3701, 144, 'Taligan'),
(3702, 144, 'Tanglagan'),
(3703, 144, 'T. Elizaga'),
(3704, 144, 'Tubungan Este'),
(3705, 144, 'Tubungan Weste'),
(3706, 144, 'Bolos Point'),
(3707, 144, 'San Carlos'),
(3708, 145, 'Amunitan'),
(3709, 145, 'Batangan'),
(3710, 145, 'Baua'),
(3711, 145, 'Cabanbanan Norte'),
(3712, 145, 'Cabanbanan Sur'),
(3713, 145, 'Cabiraoan'),
(3714, 145, 'Callao'),
(3715, 145, 'Calayan'),
(3716, 145, 'Caroan'),
(3717, 145, 'Casitan'),
(3718, 145, 'Flourishing (Pob.)'),
(3719, 145, 'Ipil'),
(3720, 145, 'Isca'),
(3721, 145, 'Magrafil'),
(3722, 145, 'Minanga'),
(3723, 145, 'Rebecca'),
(3724, 145, 'Paradise (Pob.)'),
(3725, 145, 'Pateng'),
(3726, 145, 'Progressive (Pob.)'),
(3727, 145, 'San Jose'),
(3728, 145, 'Santa Clara'),
(3729, 145, 'Santa Cruz'),
(3730, 145, 'Santa Maria'),
(3731, 145, 'Smart (Pob.)'),
(3732, 145, 'Tapel'),
(3733, 146, 'Ajat (Pob.)'),
(3734, 146, 'Atulu'),
(3735, 146, 'Baculud'),
(3736, 146, 'Bayo'),
(3737, 146, 'Campo'),
(3738, 146, 'San Esteban'),
(3739, 146, 'Dumpao'),
(3740, 146, 'Gammad'),
(3741, 146, 'Santa Teresa'),
(3742, 146, 'Garab'),
(3743, 146, 'Malabbac'),
(3744, 146, 'Manaoag'),
(3745, 146, 'Minanga Norte'),
(3746, 146, 'Minanga Sur'),
(3747, 146, 'Nattanzan (Pob.)'),
(3748, 146, 'Redondo'),
(3749, 146, 'Salamague'),
(3750, 146, 'San Isidro'),
(3751, 146, 'San Lorenzo'),
(3752, 146, 'Santa Barbara'),
(3753, 146, 'Santa Rosa'),
(3754, 146, 'Santiago'),
(3755, 146, 'San Vicente'),
(3756, 147, 'Abagao'),
(3757, 147, 'Alaguia'),
(3758, 147, 'Bagumbayan'),
(3759, 147, 'Bangag'),
(3760, 147, 'Bical'),
(3761, 147, 'Bicud'),
(3762, 147, 'Binag'),
(3763, 147, 'Cabayabasan'),
(3764, 147, 'Cagoran'),
(3765, 147, 'Cambong'),
(3766, 147, 'Catayauan'),
(3767, 147, 'Catugan'),
(3768, 147, 'Centro (Pob.)'),
(3769, 147, 'Cullit'),
(3770, 147, 'Dagupan'),
(3771, 147, 'Dalaya'),
(3772, 147, 'Fabrica'),
(3773, 147, 'Fusina'),
(3774, 147, 'Jurisdiction'),
(3775, 147, 'Lalafugan'),
(3776, 147, 'Logac'),
(3777, 147, 'Magallungon'),
(3778, 147, 'Magapit'),
(3779, 147, 'Malanao'),
(3780, 147, 'Maxingal'),
(3781, 147, 'Naguilian'),
(3782, 147, 'Paranum'),
(3783, 147, 'Rosario'),
(3784, 147, 'San Antonio'),
(3785, 147, 'San Jose'),
(3786, 147, 'San Juan'),
(3787, 147, 'San Lorenzo'),
(3788, 147, 'San Mariano'),
(3789, 147, 'Santa Maria'),
(3790, 147, 'Tucalana'),
(3791, 148, 'Aggunetan'),
(3792, 148, 'Alannay'),
(3793, 148, 'Battalan'),
(3794, 148, 'Calapangan Norte'),
(3795, 148, 'Calapangan Sur'),
(3796, 148, 'Callao Norte'),
(3797, 148, 'Callao Sur'),
(3798, 148, 'Cataliganan'),
(3799, 148, 'Finugo Norte'),
(3800, 148, 'Gabun'),
(3801, 148, 'Ignacio Jurado'),
(3802, 148, 'Magsaysay'),
(3803, 148, 'Malinta'),
(3804, 148, 'Minanga Sur'),
(3805, 148, 'Minanga Norte'),
(3806, 148, 'Nicolas Agatep'),
(3807, 148, 'Peru'),
(3808, 148, 'Centro I (Pob.)'),
(3809, 148, 'San Pedro'),
(3810, 148, 'Sicalao'),
(3811, 148, 'Tagao'),
(3812, 148, 'Tucalan Passing'),
(3813, 148, 'Viga'),
(3814, 148, 'Cabatacan East'),
(3815, 148, 'Cabatacan West'),
(3816, 148, 'Nabannagan East'),
(3817, 148, 'Nabannagan West'),
(3818, 148, 'Centro II (Pob.)'),
(3819, 148, 'Centro III (Pob.)'),
(3820, 148, 'New Orlins'),
(3821, 149, 'Abanqueruan'),
(3822, 149, 'Allasitan'),
(3823, 149, 'Bagu'),
(3824, 149, 'Balingit'),
(3825, 149, 'Bidduang'),
(3826, 149, 'Cabaggan'),
(3827, 149, 'Capalalian'),
(3828, 149, 'Casitan'),
(3829, 149, 'Centro (Pob.)'),
(3830, 149, 'Curva'),
(3831, 149, 'Gattu'),
(3832, 149, 'Masi'),
(3833, 149, 'Nagattatan'),
(3834, 149, 'Nagtupacan'),
(3835, 149, 'San Juan'),
(3836, 149, 'Santa Cruz'),
(3837, 149, 'Tabba'),
(3838, 149, 'Tupanna'),
(3839, 150, 'Aggugaddan'),
(3840, 150, 'Alimanao'),
(3841, 150, 'Baliuag'),
(3842, 150, 'Bical'),
(3843, 150, 'Bugatay'),
(3844, 150, 'Buyun'),
(3845, 150, 'Cabasan'),
(3846, 150, 'Cabbo'),
(3847, 150, 'Callao'),
(3848, 150, 'Camasi'),
(3849, 150, 'Centro (Pob.)'),
(3850, 150, 'Dodan'),
(3851, 150, 'Lapi'),
(3852, 150, 'Malibabag'),
(3853, 150, 'Manga'),
(3854, 150, 'Minanga'),
(3855, 150, 'Nabbabalayan'),
(3856, 150, 'Nanguilattan'),
(3857, 150, 'Nannarian'),
(3858, 150, 'Parabba'),
(3859, 150, 'Patagueleg'),
(3860, 150, 'Quibal'),
(3861, 150, 'San Roque'),
(3862, 150, 'Sisim'),
(3863, 151, 'Apayao'),
(3864, 151, 'Aquib'),
(3865, 151, 'Dugayung'),
(3866, 151, 'Gumarueng'),
(3867, 151, 'Macapil'),
(3868, 151, 'Maguilling'),
(3869, 151, 'Minanga'),
(3870, 151, 'Poblacion I'),
(3871, 151, 'Santa Barbara'),
(3872, 151, 'Santo Domingo'),
(3873, 151, 'Sicatna'),
(3874, 151, 'Villa Rey'),
(3875, 151, 'Warat'),
(3876, 151, 'Baung'),
(3877, 151, 'Calaoagan'),
(3878, 151, 'Catarauan'),
(3879, 151, 'Poblacion II'),
(3880, 151, 'Villa Reyno'),
(3881, 152, 'Anagguan'),
(3882, 152, 'Anurturu'),
(3883, 152, 'Anungu'),
(3884, 152, 'Balungcanag'),
(3885, 152, 'Batu'),
(3886, 152, 'Cambabangan'),
(3887, 152, 'Capacuan'),
(3888, 152, 'Dunggan'),
(3889, 152, 'Duyun'),
(3890, 152, 'Gaddangao'),
(3891, 152, 'Gaggabutan East'),
(3892, 152, 'Illuru Norte'),
(3893, 152, 'Lattut'),
(3894, 152, 'Linno'),
(3895, 152, 'Liwan'),
(3896, 152, 'Mabbang'),
(3897, 152, 'Mauanan'),
(3898, 152, 'Masi'),
(3899, 152, 'Minanga'),
(3900, 152, 'Nanauatan'),
(3901, 152, 'Nanungaran'),
(3902, 152, 'Pasingan'),
(3903, 152, 'Poblacion'),
(3904, 152, 'San Juan'),
(3905, 152, 'Sinicking'),
(3906, 152, 'Battut'),
(3907, 152, 'Bural'),
(3908, 152, 'Gaggabutan West'),
(3909, 152, 'Illuru Sur'),
(3910, 153, 'Bangan'),
(3911, 153, 'Callungan'),
(3912, 153, 'Centro I (Pob.)'),
(3913, 153, 'Centro II (Pob.)'),
(3914, 153, 'Dacal'),
(3915, 153, 'Dagueray'),
(3916, 153, 'Dammang'),
(3917, 153, 'Kittag'),
(3918, 153, 'Langagan'),
(3919, 153, 'Magacan'),
(3920, 153, 'Marzan'),
(3921, 153, 'Masisit'),
(3922, 153, 'Nagrangtayan'),
(3923, 153, 'Namuac'),
(3924, 153, 'San Andres'),
(3925, 153, 'Santiago'),
(3926, 153, 'Santor'),
(3927, 153, 'Tokitok'),
(3928, 154, 'Casagan'),
(3929, 154, 'Casambalangan'),
(3930, 154, 'Centro (Pob.)'),
(3931, 154, 'Diora-Zinungan'),
(3932, 154, 'Dungeg'),
(3933, 154, 'Kapanikian'),
(3934, 154, 'Marede'),
(3935, 154, 'Palawig'),
(3936, 154, 'Batu-Parada'),
(3937, 154, 'Patunungan'),
(3938, 154, 'Rapuli'),
(3939, 154, 'San Vicente'),
(3940, 154, 'Santa Clara'),
(3941, 154, 'Santa Cruz'),
(3942, 154, 'Visitacion (Pob.)'),
(3943, 154, 'Tangatan'),
(3944, 155, 'Cadongdongan'),
(3945, 155, 'Capacuan'),
(3946, 155, 'Centro I (Pob.)'),
(3947, 155, 'Centro II (Pob.)'),
(3948, 155, 'Macatel'),
(3949, 155, 'Portabaga'),
(3950, 155, 'San Juan'),
(3951, 155, 'San Miguel'),
(3952, 155, 'Salungsong'),
(3953, 155, 'Sicul'),
(3954, 156, 'Alucao'),
(3955, 156, 'Buyun'),
(3956, 156, 'Centro East (Pob.)'),
(3957, 156, 'Dungeg'),
(3958, 156, 'Luga'),
(3959, 156, 'Masi'),
(3960, 156, 'Mission'),
(3961, 156, 'Simpatuyo'),
(3962, 156, 'Villa'),
(3963, 156, 'Aridawen'),
(3964, 156, 'Caniugan'),
(3965, 156, 'Centro West'),
(3966, 156, 'Simbaluca'),
(3967, 157, 'Abariongan Ruar'),
(3968, 157, 'Abariongan Uneg'),
(3969, 157, 'Balagan'),
(3970, 157, 'Balanni'),
(3971, 157, 'Cabayo'),
(3972, 157, 'Calapangan'),
(3973, 157, 'Calassitan'),
(3974, 157, 'Campo'),
(3975, 157, 'Centro Norte (Pob.)'),
(3976, 157, 'Centro Sur (Pob.)'),
(3977, 157, 'Dungao'),
(3978, 157, 'Lattac'),
(3979, 157, 'Lipatan'),
(3980, 157, 'Lubo'),
(3981, 157, 'Mabitbitnong'),
(3982, 157, 'Mapitac'),
(3983, 157, 'Masical'),
(3984, 157, 'Matalao'),
(3985, 157, 'Nag-uma'),
(3986, 157, 'Namuccayan'),
(3987, 157, 'Niug Norte'),
(3988, 157, 'Niug Sur'),
(3989, 157, 'Palusao'),
(3990, 157, 'San Manuel'),
(3991, 157, 'San Roque'),
(3992, 157, 'Santa Felicitas'),
(3993, 157, 'Santa Maria'),
(3994, 157, 'Sidiran'),
(3995, 157, 'Tabang'),
(3996, 157, 'Tamucco'),
(3997, 157, 'Virginia'),
(3998, 158, 'Andarayan North'),
(3999, 158, 'Lannig'),
(4000, 158, 'Bangag'),
(4001, 158, 'Bantay'),
(4002, 158, 'Basi East'),
(4003, 158, 'Bauan East'),
(4004, 158, 'Cadaanan'),
(4005, 158, 'Calamagui'),
(4006, 158, 'Carilucud'),
(4007, 158, 'Cattaran'),
(4008, 158, 'Centro Northeast (Pob.)'),
(4009, 158, 'Centro Northwest (Pob.)'),
(4010, 158, 'Centro Southeast (Pob.)'),
(4011, 158, 'Centro Southwest (Pob.)'),
(4012, 158, 'Lanna'),
(4013, 158, 'Lingu'),
(4014, 158, 'Maguirig'),
(4015, 158, 'Nabbotuan'),
(4016, 158, 'Nangalisan'),
(4017, 158, 'Natappian East'),
(4018, 158, 'Padul'),
(4019, 158, 'Palao'),
(4020, 158, 'Parug-parug'),
(4021, 158, 'Pataya'),
(4022, 158, 'Sampaguita'),
(4023, 158, 'Maddarulug'),
(4024, 158, 'Ubong'),
(4025, 158, 'Dassun'),
(4026, 158, 'Furagui'),
(4027, 158, 'Gadu'),
(4028, 158, 'Iraga'),
(4029, 158, 'Andarayan South'),
(4030, 158, 'Basi West'),
(4031, 158, 'Bauan West'),
(4032, 158, 'Calillauan'),
(4033, 158, 'Gen. Eulogio Balao'),
(4034, 158, 'Natappian West'),
(4035, 158, 'Malalam-Malacabibi'),
(4036, 159, 'Accusilian'),
(4037, 159, 'Alabiao'),
(4038, 159, 'Alabug'),
(4039, 159, 'Angang'),
(4040, 159, 'Bagumbayan'),
(4041, 159, 'Barancuag'),
(4042, 159, 'Battung'),
(4043, 159, 'Bicok'),
(4044, 159, 'Bugnay'),
(4045, 159, 'Balagao'),
(4046, 159, 'Cagumitan'),
(4047, 159, 'Cato'),
(4048, 159, 'Culong'),
(4049, 159, 'Dagupan'),
(4050, 159, 'Fugu'),
(4051, 159, 'Lakambini'),
(4052, 159, 'Lallayug'),
(4053, 159, 'Malumin'),
(4054, 159, 'Mambacag'),
(4055, 159, 'San Vicente'),
(4056, 159, 'Mungo'),
(4057, 159, 'Naruangan'),
(4058, 159, 'Palca'),
(4059, 159, 'Pata'),
(4060, 159, 'San Juan'),
(4061, 159, 'San Luis'),
(4062, 159, 'Santo Tomas'),
(4063, 159, 'Taribubu'),
(4064, 159, 'Villa Laida'),
(4065, 159, 'Poblacion I'),
(4066, 159, 'Poblacion II'),
(4067, 159, 'Malalinta'),
(4068, 160, 'Annafunan East'),
(4069, 160, 'Atulayan Norte'),
(4070, 160, 'Bagay'),
(4071, 160, 'Centro 1 (Pob.)'),
(4072, 160, 'Centro 4 (Pob.)'),
(4073, 160, 'Centro 5 (Pob.)'),
(4074, 160, 'Centro 6 (Pob.)'),
(4075, 160, 'Centro 7 (Pob.)'),
(4076, 160, 'Centro 8 (Pob.)'),
(4077, 160, 'Centro 9 (Pob.)'),
(4078, 160, 'Centro 10 (Pob.)'),
(4079, 160, 'Centro 11 (Pob.)'),
(4080, 160, 'Buntun'),
(4081, 160, 'Caggay'),
(4082, 160, 'Capatan'),
(4083, 160, 'Carig'),
(4084, 160, 'Caritan Norte'),
(4085, 160, 'Caritan Sur'),
(4086, 160, 'Cataggaman Nuevo'),
(4087, 160, 'Cataggaman Viejo'),
(4088, 160, 'Gosi Norte'),
(4089, 160, 'Larion Alto'),
(4090, 160, 'Larion Bajo'),
(4091, 160, 'Libag Norte'),
(4092, 160, 'Linao East'),
(4093, 160, 'Nambbalan Norte'),
(4094, 160, 'Pallua Norte'),
(4095, 160, 'Pengue'),
(4096, 160, 'Tagga'),
(4097, 160, 'Tanza'),
(4098, 160, 'Ugac Norte'),
(4099, 160, 'Centro 2 (Pob.)'),
(4100, 160, 'Centro 3 (Pob.)'),
(4101, 160, 'Centro 12 (Pob.)'),
(4102, 160, 'Annafunan West'),
(4103, 160, 'Atulayan Sur'),
(4104, 160, 'Caritan Centro'),
(4105, 160, 'Cataggaman Pardo'),
(4106, 160, 'Dadda'),
(4107, 160, 'Gosi Sur'),
(4108, 160, 'Leonarda'),
(4109, 160, 'Libag Sur'),
(4110, 160, 'Linao Norte'),
(4111, 160, 'Linao West'),
(4112, 160, 'Nambbalan Sur'),
(4113, 160, 'Pallua Sur'),
(4114, 160, 'Reyes'),
(4115, 160, 'San Gabriel'),
(4116, 160, 'Ugac Sur'),
(4117, 161, 'Amistad'),
(4118, 161, 'Antonino (Pob.)'),
(4119, 161, 'Apanay'),
(4120, 161, 'Aurora'),
(4121, 161, 'Bagnos'),
(4122, 161, 'Bagong Sikat'),
(4123, 161, 'Bantug-Petines'),
(4124, 161, 'Bonifacio'),
(4125, 161, 'Burgos'),
(4126, 161, 'Calaocan (Pob.)'),
(4127, 161, 'Callao'),
(4128, 161, 'Dagupan'),
(4129, 161, 'Inanama'),
(4130, 161, 'Linglingay'),
(4131, 161, 'M.H. del Pilar'),
(4132, 161, 'Mabini'),
(4133, 161, 'Magsaysay (Pob.)'),
(4134, 161, 'Mataas na Kahoy'),
(4135, 161, 'Paddad'),
(4136, 161, 'Rizal'),
(4137, 161, 'Rizaluna'),
(4138, 161, 'Salvacion'),
(4139, 161, 'San Antonio (Pob.)'),
(4140, 161, 'San Fernando'),
(4141, 161, 'San Francisco'),
(4142, 161, 'San Juan'),
(4143, 161, 'San Pablo'),
(4144, 161, 'San Pedro'),
(4145, 161, 'Santa Cruz'),
(4146, 161, 'Santa Maria'),
(4147, 161, 'Santo Domingo'),
(4148, 161, 'Santo Tomas'),
(4149, 161, 'Victoria'),
(4150, 161, 'Zamora'),
(4151, 162, 'Allangigan'),
(4152, 162, 'Aniog'),
(4153, 162, 'Baniket'),
(4154, 162, 'Bannawag'),
(4155, 162, 'Bantug'),
(4156, 162, 'Barangcuag'),
(4157, 162, 'Baui'),
(4158, 162, 'Bonifacio'),
(4159, 162, 'Buenavista'),
(4160, 162, 'Bunnay'),
(4161, 162, 'Calabayan-Minanga'),
(4162, 162, 'Calaccab'),
(4163, 162, 'Calaocan'),
(4164, 162, 'Kalusutan'),
(4165, 162, 'Campanario'),
(4166, 162, 'Canangan'),
(4167, 162, 'Centro I (Pob.)'),
(4168, 162, 'Centro II (Pob.)'),
(4169, 162, 'Centro III (Pob.)'),
(4170, 162, 'Consular'),
(4171, 162, 'Cumu'),
(4172, 162, 'Dalakip'),
(4173, 162, 'Dalenat'),
(4174, 162, 'Dipaluda'),
(4175, 162, 'Duroc'),
(4176, 162, 'Lourdes'),
(4177, 162, 'Esperanza'),
(4178, 162, 'Fugaru'),
(4179, 162, 'Liwliwa'),
(4180, 162, 'Ingud Norte'),
(4181, 162, 'Ingud Sur'),
(4182, 162, 'La Suerte'),
(4183, 162, 'Lomboy'),
(4184, 162, 'Loria'),
(4185, 162, 'Mabuhay'),
(4186, 162, 'Macalauat'),
(4187, 162, 'Macaniao'),
(4188, 162, 'Malannao'),
(4189, 162, 'Malasin'),
(4190, 162, 'Mangandingay'),
(4191, 162, 'Minanga Proper'),
(4192, 162, 'Pappat'),
(4193, 162, 'Pissay'),
(4194, 162, 'Ramona'),
(4195, 162, 'Rancho Bassit'),
(4196, 162, 'Rang-ayan'),
(4197, 162, 'Salay');
INSERT INTO `table_barangay` (`barangay_id`, `municipality_id`, `barangay_name`) VALUES
(4198, 162, 'San Ambrocio'),
(4199, 162, 'San Guillermo'),
(4200, 162, 'San Isidro'),
(4201, 162, 'San Marcelo'),
(4202, 162, 'San Roque'),
(4203, 162, 'San Vicente'),
(4204, 162, 'Santo Niño'),
(4205, 162, 'Saranay'),
(4206, 162, 'Sinabbaran'),
(4207, 162, 'Victory'),
(4208, 162, 'Viga'),
(4209, 162, 'Villa Domingo'),
(4210, 163, 'Apiat'),
(4211, 163, 'Bagnos'),
(4212, 163, 'Bagong Tanza'),
(4213, 163, 'Ballesteros'),
(4214, 163, 'Bannagao'),
(4215, 163, 'Bannawag'),
(4216, 163, 'Bolinao'),
(4217, 163, 'Caipilan'),
(4218, 163, 'Camarunggayan'),
(4219, 163, 'Dalig-Kalinga'),
(4220, 163, 'Diamantina'),
(4221, 163, 'Divisoria'),
(4222, 163, 'Esperanza East'),
(4223, 163, 'Esperanza West'),
(4224, 163, 'Kalabaza'),
(4225, 163, 'Rizaluna'),
(4226, 163, 'Macatal'),
(4227, 163, 'Malasin'),
(4228, 163, 'Nampicuan'),
(4229, 163, 'Villa Nuesa'),
(4230, 163, 'Panecien'),
(4231, 163, 'San Andres'),
(4232, 163, 'San Jose (Pob.)'),
(4233, 163, 'San Rafael'),
(4234, 163, 'San Ramon'),
(4235, 163, 'Santa Rita'),
(4236, 163, 'Santa Rosa'),
(4237, 163, 'Saranay'),
(4238, 163, 'Sili'),
(4239, 163, 'Victoria'),
(4240, 163, 'Villa Fugu'),
(4241, 163, 'San Juan (Pob.)'),
(4242, 163, 'San Pedro-San Pablo (Pob.)'),
(4243, 164, 'Andabuen'),
(4244, 164, 'Ara'),
(4245, 164, 'Binogtungan'),
(4246, 164, 'Capuseran'),
(4247, 164, 'Dagupan'),
(4248, 164, 'Danipa'),
(4249, 164, 'District II (Pob.)'),
(4250, 164, 'Gomez'),
(4251, 164, 'Guilingan'),
(4252, 164, 'La Salette'),
(4253, 164, 'Makindol'),
(4254, 164, 'Maluno Norte'),
(4255, 164, 'Maluno Sur'),
(4256, 164, 'Nacalma'),
(4257, 164, 'New Magsaysay'),
(4258, 164, 'District I (Pob.)'),
(4259, 164, 'Punit'),
(4260, 164, 'San Carlos'),
(4261, 164, 'San Francisco'),
(4262, 164, 'Santa Cruz'),
(4263, 164, 'Sevillana'),
(4264, 164, 'Sinipit'),
(4265, 164, 'Lucban'),
(4266, 164, 'Villaluz'),
(4267, 164, 'Yeban Norte'),
(4268, 164, 'Yeban Sur'),
(4269, 164, 'Santiago'),
(4270, 164, 'Placer'),
(4271, 164, 'Balliao'),
(4272, 165, 'Bacnor East'),
(4273, 165, 'Bacnor West'),
(4274, 165, 'Caliguian (Pob.)'),
(4275, 165, 'Catabban'),
(4276, 165, 'Cullalabo Del Norte'),
(4277, 165, 'Cullalabo San Antonio'),
(4278, 165, 'Cullalabo Del Sur'),
(4279, 165, 'Dalig'),
(4280, 165, 'Malasin'),
(4281, 165, 'Masigun'),
(4282, 165, 'Raniag'),
(4283, 165, 'San Bonifacio'),
(4284, 165, 'San Miguel'),
(4285, 165, 'San Roque'),
(4286, 166, 'Aggub'),
(4287, 166, 'Anao'),
(4288, 166, 'Angancasilian'),
(4289, 166, 'Balasig'),
(4290, 166, 'Cansan'),
(4291, 166, 'Casibarag Norte'),
(4292, 166, 'Casibarag Sur'),
(4293, 166, 'Catabayungan'),
(4294, 166, 'Cubag'),
(4295, 166, 'Garita'),
(4296, 166, 'Luquilu'),
(4297, 166, 'Mabangug'),
(4298, 166, 'Magassi'),
(4299, 166, 'Ngarag'),
(4300, 166, 'Pilig Abajo'),
(4301, 166, 'Pilig Alto'),
(4302, 166, 'Centro (Pob.)'),
(4303, 166, 'San Bernardo'),
(4304, 166, 'San Juan'),
(4305, 166, 'Saui'),
(4306, 166, 'Tallag'),
(4307, 166, 'Ugad'),
(4308, 166, 'Union'),
(4309, 166, 'Masipi East'),
(4310, 166, 'Masipi West'),
(4311, 166, 'San Antonio'),
(4312, 167, 'Rang-ay'),
(4313, 167, 'Calaocan'),
(4314, 167, 'Canan'),
(4315, 167, 'Centro (Pob.)'),
(4316, 167, 'Culing Centro'),
(4317, 167, 'Culing East'),
(4318, 167, 'Culing West'),
(4319, 167, 'Del Corpuz'),
(4320, 167, 'Del Pilar'),
(4321, 167, 'Diamantina'),
(4322, 167, 'La Paz'),
(4323, 167, 'Luzon'),
(4324, 167, 'Macalaoat'),
(4325, 167, 'Magdalena'),
(4326, 167, 'Magsaysay'),
(4327, 167, 'Namnama'),
(4328, 167, 'Nueva Era'),
(4329, 167, 'Paraiso'),
(4330, 167, 'Sampaloc'),
(4331, 167, 'San Andres'),
(4332, 167, 'Saranay'),
(4333, 167, 'Tandul'),
(4334, 168, 'Alicaocao'),
(4335, 168, 'Alinam'),
(4336, 168, 'Amobocan'),
(4337, 168, 'Andarayan'),
(4338, 168, 'Baculod'),
(4339, 168, 'Baringin Norte'),
(4340, 168, 'Baringin Sur'),
(4341, 168, 'Buena Suerte'),
(4342, 168, 'Bugallon'),
(4343, 168, 'Buyon'),
(4344, 168, 'Cabaruan'),
(4345, 168, 'Cabugao'),
(4346, 168, 'Carabatan Chica'),
(4347, 168, 'Carabatan Grande'),
(4348, 168, 'Carabatan Punta'),
(4349, 168, 'Carabatan Bacareno'),
(4350, 168, 'Casalatan'),
(4351, 168, 'San Pablo'),
(4352, 168, 'Cassap Fuera'),
(4353, 168, 'Catalina'),
(4354, 168, 'Culalabat'),
(4355, 168, 'Dabburab'),
(4356, 168, 'De Vera'),
(4357, 168, 'Dianao'),
(4358, 168, 'Disimuray'),
(4359, 168, 'District I (Pob.)'),
(4360, 168, 'District II (Pob.)'),
(4361, 168, 'District III (Pob.)'),
(4362, 168, 'Duminit'),
(4363, 168, 'Faustino'),
(4364, 168, 'Gagabutan'),
(4365, 168, 'Gappal'),
(4366, 168, 'Guayabal'),
(4367, 168, 'Labinab'),
(4368, 168, 'Linglingay'),
(4369, 168, 'Mabantad'),
(4370, 168, 'Maligaya'),
(4371, 168, 'Manaoag'),
(4372, 168, 'Marabulig I'),
(4373, 168, 'Marabulig II'),
(4374, 168, 'Minante I'),
(4375, 168, 'Minante II'),
(4376, 168, 'Nagcampegan'),
(4377, 168, 'Naganacan'),
(4378, 168, 'Nagrumbuan'),
(4379, 168, 'Nungnungan I'),
(4380, 168, 'Nungnungan II'),
(4381, 168, 'Pinoma'),
(4382, 168, 'Rizal'),
(4383, 168, 'Rogus'),
(4384, 168, 'San Antonio'),
(4385, 168, 'San Fermin'),
(4386, 168, 'San Francisco'),
(4387, 168, 'San Isidro'),
(4388, 168, 'San Luis'),
(4389, 168, 'Santa Luciana'),
(4390, 168, 'Santa Maria'),
(4391, 168, 'Sillawit'),
(4392, 168, 'Sinippil'),
(4393, 168, 'Tagaran'),
(4394, 168, 'Turayong'),
(4395, 168, 'Union'),
(4396, 168, 'Villa Concepcion'),
(4397, 168, 'Villa Luna'),
(4398, 168, 'Villaflor'),
(4399, 169, 'Aguinaldo'),
(4400, 169, 'Calimaturod'),
(4401, 169, 'Capirpiriwan'),
(4402, 169, 'Caquilingan'),
(4403, 169, 'Dallao'),
(4404, 169, 'Gayong'),
(4405, 169, 'Laurel'),
(4406, 169, 'Magsaysay'),
(4407, 169, 'Malapat'),
(4408, 169, 'Osmena'),
(4409, 169, 'Quezon'),
(4410, 169, 'Quirino'),
(4411, 169, 'Rizaluna'),
(4412, 169, 'Roxas Pob.'),
(4413, 169, 'Sagat'),
(4414, 169, 'San Juan'),
(4415, 169, 'Taliktik'),
(4416, 169, 'Tanggal'),
(4417, 169, 'Tarinsing'),
(4418, 169, 'Turod Norte'),
(4419, 169, 'Turod Sur'),
(4420, 169, 'Villamiemban'),
(4421, 169, 'Villamarzo'),
(4422, 169, 'Anonang'),
(4423, 169, 'Camarao'),
(4424, 169, 'Wigan'),
(4425, 170, 'Ayod'),
(4426, 170, 'Bucal Sur'),
(4427, 170, 'Bucal Norte'),
(4428, 170, 'Dibulo'),
(4429, 170, 'Digumased (Pob.)'),
(4430, 170, 'Dimaluade'),
(4431, 171, 'Dicambangan'),
(4432, 171, 'Dicaroyan'),
(4433, 171, 'Dicatian'),
(4434, 171, 'Bicobian'),
(4435, 171, 'Dilakit'),
(4436, 171, 'Dimapnat'),
(4437, 171, 'Dimapula (Pob.)'),
(4438, 171, 'Dimasalansan'),
(4439, 171, 'Dipudo'),
(4440, 171, 'Dibulos'),
(4441, 171, 'Ditarum'),
(4442, 171, 'Sapinit'),
(4443, 172, 'Angoluan'),
(4444, 172, 'Annafunan'),
(4445, 172, 'Arabiat'),
(4446, 172, 'Aromin'),
(4447, 172, 'Babaran'),
(4448, 172, 'Bacradal'),
(4449, 172, 'Benguet'),
(4450, 172, 'Buneg'),
(4451, 172, 'Busilelao'),
(4452, 172, 'Caniguing'),
(4453, 172, 'Carulay'),
(4454, 172, 'Castillo'),
(4455, 172, 'Dammang East'),
(4456, 172, 'Dammang West'),
(4457, 172, 'Dicaraoyan'),
(4458, 172, 'Dugayong'),
(4459, 172, 'Fugu'),
(4460, 172, 'Garit Norte'),
(4461, 172, 'Garit Sur'),
(4462, 172, 'Gucab'),
(4463, 172, 'Gumbauan'),
(4464, 172, 'Ipil'),
(4465, 172, 'Libertad'),
(4466, 172, 'Mabbayad'),
(4467, 172, 'Mabuhay'),
(4468, 172, 'Madadamian'),
(4469, 172, 'Magleticia'),
(4470, 172, 'Malibago'),
(4471, 172, 'Maligaya'),
(4472, 172, 'Malitao'),
(4473, 172, 'Narra'),
(4474, 172, 'Nilumisu'),
(4475, 172, 'Pag-asa'),
(4476, 172, 'Pangal Norte'),
(4477, 172, 'Pangal Sur'),
(4478, 172, 'Rumang-ay'),
(4479, 172, 'Salay'),
(4480, 172, 'Salvacion'),
(4481, 172, 'San Antonio Ugad'),
(4482, 172, 'San Antonio Minit'),
(4483, 172, 'San Carlos'),
(4484, 172, 'San Fabian'),
(4485, 172, 'San Felipe'),
(4486, 172, 'San Juan'),
(4487, 172, 'San Manuel'),
(4488, 172, 'San Miguel'),
(4489, 172, 'San Salvador'),
(4490, 172, 'Santa Ana'),
(4491, 172, 'Santa Cruz'),
(4492, 172, 'Santa Maria'),
(4493, 172, 'Santa Monica'),
(4494, 172, 'Santo Domingo'),
(4495, 172, 'Silauan Sur (Pob.)'),
(4496, 172, 'Silauan Norte (Pob.)'),
(4497, 172, 'Sinabbaran'),
(4498, 172, 'Soyung'),
(4499, 172, 'Taggappan'),
(4500, 172, 'Tuguegarao'),
(4501, 172, 'Villa Campo'),
(4502, 172, 'Villa Fermin'),
(4503, 172, 'Villa Rey'),
(4504, 172, 'Villa Victoria'),
(4505, 172, 'Cabugao (Pob.)'),
(4506, 172, 'Diasan'),
(4507, 173, 'Barcolan'),
(4508, 173, 'Buenavista'),
(4509, 173, 'Dammao'),
(4510, 173, 'Furao'),
(4511, 173, 'Guibang'),
(4512, 173, 'Lenzon'),
(4513, 173, 'Linglingay'),
(4514, 173, 'Mabini'),
(4515, 173, 'Pintor'),
(4516, 173, 'District I (Pob.)'),
(4517, 173, 'District II (Pob.)'),
(4518, 173, 'District III (Pob.)'),
(4519, 173, 'Rizal'),
(4520, 173, 'Songsong'),
(4521, 173, 'Union'),
(4522, 173, 'Upi'),
(4523, 174, 'Cabeseria 27'),
(4524, 174, 'Aggasian'),
(4525, 174, 'Alibagu'),
(4526, 174, 'Allinguigan 1st'),
(4527, 174, 'Allinguigan 2nd'),
(4528, 174, 'Allinguigan 3rd'),
(4529, 174, 'Arusip'),
(4530, 174, 'Baculod (Pob.)'),
(4531, 174, 'Bagumbayan (Pob.)'),
(4532, 174, 'Baligatan'),
(4533, 174, 'Ballacong'),
(4534, 174, 'Bangag'),
(4535, 174, 'Cabeseria 5'),
(4536, 174, 'Batong-Labang'),
(4537, 174, 'Bigao'),
(4538, 174, 'Cabeseria 4'),
(4539, 174, 'Cabannungan 1st'),
(4540, 174, 'Cabannungan 2nd'),
(4541, 174, 'Cabeseria 6 & 24'),
(4542, 174, 'Cabeseria 19'),
(4543, 174, 'Cabeseria 25'),
(4544, 174, 'Cabeseria 3'),
(4545, 174, 'Cabeseria 23'),
(4546, 174, 'Cadu'),
(4547, 174, 'Calamagui 1st'),
(4548, 174, 'Calamagui 2nd'),
(4549, 174, 'Camunatan'),
(4550, 174, 'Capellan'),
(4551, 174, 'Capo'),
(4552, 174, 'Cabeseria 9 and 11'),
(4553, 174, 'Carikkikan Norte'),
(4554, 174, 'Carikkikan Sur'),
(4555, 174, 'Cabeseria 14 and 16'),
(4556, 174, 'Cabeseria 2'),
(4557, 174, 'Fugu'),
(4558, 174, 'Fuyo'),
(4559, 174, 'Gayong-Gayong Norte'),
(4560, 174, 'Gayong-Gayong Sur'),
(4561, 174, 'Guinatan'),
(4562, 174, 'Lullutan'),
(4563, 174, 'Cabeseria 10'),
(4564, 174, 'Malalam'),
(4565, 174, 'Malasin'),
(4566, 174, 'Manaring'),
(4567, 174, 'Mangcuram'),
(4568, 174, 'Villa Imelda'),
(4569, 174, 'Marana I'),
(4570, 174, 'Marana II'),
(4571, 174, 'Marana III'),
(4572, 174, 'Minabang'),
(4573, 174, 'Morado'),
(4574, 174, 'Naguilian Norte'),
(4575, 174, 'Naguilian Sur'),
(4576, 174, 'Namnama'),
(4577, 174, 'Nanaguan'),
(4578, 174, 'Cabeseria 7'),
(4579, 174, 'Osmeña'),
(4580, 174, 'Paliueg'),
(4581, 174, 'Pasa'),
(4582, 174, 'Pilar'),
(4583, 174, 'Quimalabasa'),
(4584, 174, 'Rang-ayan'),
(4585, 174, 'Rugao'),
(4586, 174, 'Cabeseria 22'),
(4587, 174, 'Salindingan'),
(4588, 174, 'San Andres'),
(4589, 174, 'Centro - San Antonio'),
(4590, 174, 'San Felipe'),
(4591, 174, 'San Ignacio'),
(4592, 174, 'San Isidro'),
(4593, 174, 'San Juan'),
(4594, 174, 'San Lorenzo'),
(4595, 174, 'San Pablo'),
(4596, 174, 'Cabeseria 17 and 21'),
(4597, 174, 'San Vicente (Pob.)'),
(4598, 174, 'Santa Barbara (Pob.)'),
(4599, 174, 'Santa Catalina'),
(4600, 174, 'Santa Isabel Norte'),
(4601, 174, 'Santa Isabel Sur'),
(4602, 174, 'Santa Victoria'),
(4603, 174, 'Santo Tomas'),
(4604, 174, 'Siffu'),
(4605, 174, 'Sindon Bayabo'),
(4606, 174, 'Sindon Maride'),
(4607, 174, 'Sipay'),
(4608, 174, 'Tangcul'),
(4609, 174, 'Centro Poblacion'),
(4610, 174, 'Bagong Silang'),
(4611, 174, 'Imelda Bliss Village'),
(4612, 174, 'San Rodrigo'),
(4613, 174, 'Santa Maria'),
(4614, 175, 'Abulan'),
(4615, 175, 'Addalam'),
(4616, 175, 'Arubub'),
(4617, 175, 'Bannawag'),
(4618, 175, 'Bantay'),
(4619, 175, 'Barangay I (Pob.)'),
(4620, 175, 'Barangay II (Pob.)'),
(4621, 175, 'Barangcuag'),
(4622, 175, 'Dalibubon'),
(4623, 175, 'Daligan'),
(4624, 175, 'Diarao'),
(4625, 175, 'Dibuluan'),
(4626, 175, 'Dicamay I'),
(4627, 175, 'Dicamay II'),
(4628, 175, 'Dipangit'),
(4629, 175, 'Disimpit'),
(4630, 175, 'Divinan'),
(4631, 175, 'Dumawing'),
(4632, 175, 'Fugu'),
(4633, 175, 'Lacab'),
(4634, 175, 'Linamanan'),
(4635, 175, 'Linomot'),
(4636, 175, 'Malannit'),
(4637, 175, 'Minuri'),
(4638, 175, 'Namnama'),
(4639, 175, 'Napaliong'),
(4640, 175, 'Palagao'),
(4641, 175, 'Papan Este'),
(4642, 175, 'Papan Weste'),
(4643, 175, 'Payac'),
(4644, 175, 'Pongpongan'),
(4645, 175, 'San Antonio'),
(4646, 175, 'San Isidro'),
(4647, 175, 'San Jose'),
(4648, 175, 'San Roque'),
(4649, 175, 'San Sebastian'),
(4650, 175, 'San Vicente'),
(4651, 175, 'Santa Isabel'),
(4652, 175, 'Santo Domingo'),
(4653, 175, 'Tupax'),
(4654, 175, 'Usol'),
(4655, 175, 'Villa Bello'),
(4656, 176, 'Bustamante'),
(4657, 176, 'Centro 1 (Pob.)'),
(4658, 176, 'Centro 2 (Pob.)'),
(4659, 176, 'Centro 3 (Pob.)'),
(4660, 176, 'Concepcion'),
(4661, 176, 'Dadap'),
(4662, 176, 'Harana'),
(4663, 176, 'Lalog 1'),
(4664, 176, 'Lalog 2'),
(4665, 176, 'Luyao'),
(4666, 176, 'Macañao'),
(4667, 176, 'Macugay'),
(4668, 176, 'Mambabanga'),
(4669, 176, 'Pulay'),
(4670, 176, 'Puroc'),
(4671, 176, 'San Isidro'),
(4672, 176, 'San Miguel'),
(4673, 176, 'Santo Domingo'),
(4674, 176, 'Union Kalinga'),
(4675, 177, 'Diana'),
(4676, 177, 'Eleonor (Pob.)'),
(4677, 177, 'Fely (Pob.)'),
(4678, 177, 'Lita (Pob.)'),
(4679, 177, 'Reina Mercedes'),
(4680, 177, 'Minanga'),
(4681, 177, 'Malasin'),
(4682, 177, 'Canadam'),
(4683, 177, 'Aplaya'),
(4684, 177, 'Santa Marina'),
(4685, 178, 'Aga'),
(4686, 178, 'Andarayan'),
(4687, 178, 'Aneg'),
(4688, 178, 'Bayabo'),
(4689, 178, 'Calinaoan Sur'),
(4690, 178, 'Capitol'),
(4691, 178, 'Carmencita'),
(4692, 178, 'Concepcion'),
(4693, 178, 'Maui'),
(4694, 178, 'Quibal'),
(4695, 178, 'Ragan Almacen'),
(4696, 178, 'Ragan Norte'),
(4697, 178, 'Ragan Sur (Pob.)'),
(4698, 178, 'Rizal'),
(4699, 178, 'San Andres'),
(4700, 178, 'San Antonio'),
(4701, 178, 'San Isidro'),
(4702, 178, 'San Jose'),
(4703, 178, 'San Juan'),
(4704, 178, 'San Macario'),
(4705, 178, 'San Nicolas'),
(4706, 178, 'San Patricio'),
(4707, 178, 'San Roque'),
(4708, 178, 'Santo Rosario'),
(4709, 178, 'Santor'),
(4710, 178, 'Villa Luz'),
(4711, 178, 'Villa Pereda'),
(4712, 178, 'Visitacion'),
(4713, 178, 'Caloocan'),
(4714, 179, 'San Pedro'),
(4715, 179, 'Binmonton'),
(4716, 179, 'Casili'),
(4717, 179, 'Centro I (Pob.)'),
(4718, 179, 'Holy Friday'),
(4719, 179, 'Maligaya'),
(4720, 179, 'Manano'),
(4721, 179, 'Olango'),
(4722, 179, 'Centro II (Pob.)'),
(4723, 179, 'Rang-ayan'),
(4724, 179, 'San Jose Norte I'),
(4725, 179, 'San Jose Sur'),
(4726, 179, 'Siempre Viva Norte'),
(4727, 179, 'Trinidad'),
(4728, 179, 'Victoria'),
(4729, 179, 'San Jose Norte II'),
(4730, 179, 'San Ramon'),
(4731, 179, 'Siempre Viva Sur'),
(4732, 180, 'Aguinaldo'),
(4733, 180, 'Bagong Sikat'),
(4734, 180, 'Burgos'),
(4735, 180, 'Cabaruan'),
(4736, 180, 'Flores'),
(4737, 180, 'La Union'),
(4738, 180, 'Magsaysay (Pob.)'),
(4739, 180, 'Manaring'),
(4740, 180, 'Mansibang'),
(4741, 180, 'Minallo'),
(4742, 180, 'Minanga'),
(4743, 180, 'Palattao'),
(4744, 180, 'Quezon (Pob.)'),
(4745, 180, 'Quinalabasa'),
(4746, 180, 'Quirino (Pob.)'),
(4747, 180, 'Rangayan'),
(4748, 180, 'Rizal'),
(4749, 180, 'Roxas (Pob.)'),
(4750, 180, 'San Manuel'),
(4751, 180, 'Santo Tomas'),
(4752, 180, 'Sunlife'),
(4753, 180, 'Surcoc'),
(4754, 180, 'Tomines'),
(4755, 180, 'Villa Paz'),
(4756, 180, 'Santa Victoria'),
(4757, 181, 'Bisag'),
(4758, 181, 'Dialaoyao'),
(4759, 181, 'Dicadyuan'),
(4760, 181, 'Didiyan'),
(4761, 181, 'Dimalicu-licu'),
(4762, 181, 'Dimasari'),
(4763, 181, 'Dimatican'),
(4764, 181, 'Maligaya'),
(4765, 181, 'Marikit'),
(4766, 181, 'Dicabisagan East (Pob.)'),
(4767, 181, 'Dicabisagan West (Pob.)'),
(4768, 181, 'Santa Jacinta'),
(4769, 181, 'Villa Robles'),
(4770, 181, 'Culasi'),
(4771, 181, 'Alomanay'),
(4772, 181, 'Diddadungan'),
(4773, 181, 'San Isidro'),
(4774, 182, 'Abut'),
(4775, 182, 'Alunan (Pob.)'),
(4776, 182, 'Arellano (Pob.)'),
(4777, 182, 'Aurora'),
(4778, 182, 'Barucboc Norte'),
(4779, 182, 'Estrada'),
(4780, 182, 'Santos (Pob.)'),
(4781, 182, 'Lepanto'),
(4782, 182, 'Mangga'),
(4783, 182, 'Minagbag'),
(4784, 182, 'Samonte (Pob.)'),
(4785, 182, 'Turod'),
(4786, 182, 'Dunmon'),
(4787, 182, 'Calangigan'),
(4788, 182, 'San Juan'),
(4789, 183, 'Binarzang'),
(4790, 183, 'Cabaruan'),
(4791, 183, 'Camaal'),
(4792, 183, 'Dolores'),
(4793, 183, 'Luna'),
(4794, 183, 'Manaoag'),
(4795, 183, 'Rizal'),
(4796, 183, 'San Isidro'),
(4797, 183, 'San Jose'),
(4798, 183, 'San Juan'),
(4799, 183, 'San Mateo'),
(4800, 183, 'San Vicente'),
(4801, 183, 'Santa Catalina'),
(4802, 183, 'Santa Lucia (Pob.)'),
(4803, 183, 'Santiago'),
(4804, 183, 'Santo Domingo'),
(4805, 183, 'Sinait'),
(4806, 183, 'Suerte'),
(4807, 183, 'Villa Bulusan'),
(4808, 183, 'Villa Miguel'),
(4809, 183, 'Vintar'),
(4810, 184, 'Ambatali'),
(4811, 184, 'Bantug'),
(4812, 184, 'Bugallon Norte'),
(4813, 184, 'Burgos'),
(4814, 184, 'Nagbacalan'),
(4815, 184, 'Oscariz'),
(4816, 184, 'Pabil'),
(4817, 184, 'Pagrang-ayan'),
(4818, 184, 'Planas'),
(4819, 184, 'Purok ni Bulan'),
(4820, 184, 'Raniag'),
(4821, 184, 'San Antonio'),
(4822, 184, 'San Miguel'),
(4823, 184, 'San Sebastian'),
(4824, 184, 'Villa Beltran'),
(4825, 184, 'Villa Carmen'),
(4826, 184, 'Villa Marcos'),
(4827, 184, 'General Aguinaldo'),
(4828, 184, 'Bugallon Proper (Pob.)'),
(4829, 185, 'Banquero'),
(4830, 185, 'Binarsang'),
(4831, 185, 'Cutog Grande'),
(4832, 185, 'Cutog Pequeño'),
(4833, 185, 'Dangan'),
(4834, 185, 'District I (Pob.)'),
(4835, 185, 'District II (Pob.)'),
(4836, 185, 'Labinab Grande (Pob.)'),
(4837, 185, 'Labinab Pequeño (Pob.)'),
(4838, 185, 'Mallalatang Grande'),
(4839, 185, 'Mallalatang Tunggui'),
(4840, 185, 'Napaccu Grande'),
(4841, 185, 'Napaccu Pequeño'),
(4842, 185, 'Salucong'),
(4843, 185, 'Santor'),
(4844, 185, 'Sinippil'),
(4845, 185, 'Tallungan (Pob.)'),
(4846, 185, 'Turod'),
(4847, 185, 'Villador'),
(4848, 185, 'Santiago'),
(4849, 186, 'Anao'),
(4850, 186, 'Imbiao'),
(4851, 186, 'Lanting'),
(4852, 186, 'Lucban'),
(4853, 186, 'Marcos'),
(4854, 186, 'Masigun'),
(4855, 186, 'Rizal (Pob.)'),
(4856, 186, 'Vira (Pob.)'),
(4857, 186, 'Bantug (Pob.)'),
(4858, 186, 'Luna (Pob.)'),
(4859, 186, 'Quiling'),
(4860, 186, 'Rang-ayan'),
(4861, 186, 'San Antonio'),
(4862, 186, 'San Jose'),
(4863, 186, 'San Pedro'),
(4864, 186, 'San Placido'),
(4865, 186, 'San Rafael'),
(4866, 186, 'Simimbaan'),
(4867, 186, 'Sinamar'),
(4868, 186, 'Sotero Nuesa'),
(4869, 186, 'Villa Concepcion'),
(4870, 186, 'Matusalem'),
(4871, 186, 'Muñoz East'),
(4872, 186, 'Muñoz West'),
(4873, 186, 'Doña Concha'),
(4874, 186, 'San Luis'),
(4875, 187, 'Bautista'),
(4876, 187, 'Calaocan'),
(4877, 187, 'Dabubu Grande'),
(4878, 187, 'Dabubu Pequeño'),
(4879, 187, 'Dappig'),
(4880, 187, 'Laoag'),
(4881, 187, 'Mapalad'),
(4882, 187, 'Masaya Centro (Pob.)'),
(4883, 187, 'Masaya Norte'),
(4884, 187, 'Masaya Sur'),
(4885, 187, 'Nemmatan'),
(4886, 187, 'Palacian'),
(4887, 187, 'Panang'),
(4888, 187, 'Quimalabasa Norte'),
(4889, 187, 'Quimalabasa Sur'),
(4890, 187, 'Rang-ay'),
(4891, 187, 'Salay'),
(4892, 187, 'San Antonio'),
(4893, 187, 'Santo Niño'),
(4894, 187, 'Santos'),
(4895, 187, 'Sinaoangan Norte'),
(4896, 187, 'Sinaoangan Sur'),
(4897, 187, 'Virgoneza'),
(4898, 188, 'Anonang'),
(4899, 188, 'Aringay'),
(4900, 188, 'Centro 1 (Pob.)'),
(4901, 188, 'Centro 2 (Pob.)'),
(4902, 188, 'Colorado'),
(4903, 188, 'Dietban'),
(4904, 188, 'Dingading'),
(4905, 188, 'Dipacamo'),
(4906, 188, 'Estrella'),
(4907, 188, 'Guam'),
(4908, 188, 'Nakar'),
(4909, 188, 'Palawan'),
(4910, 188, 'Progreso'),
(4911, 188, 'Rizal'),
(4912, 188, 'San Francisco Sur'),
(4913, 188, 'San Mariano Norte'),
(4914, 188, 'San Mariano Sur'),
(4915, 188, 'Sinalugan'),
(4916, 188, 'Villa Remedios'),
(4917, 188, 'Villa Rose'),
(4918, 188, 'Villa Sanchez'),
(4919, 188, 'Villa Teresita'),
(4920, 188, 'Burgos'),
(4921, 188, 'San Francisco Norte'),
(4922, 188, 'Calaoagan'),
(4923, 188, 'San Rafael'),
(4924, 189, 'Camarag'),
(4925, 189, 'Cebu'),
(4926, 189, 'Gomez'),
(4927, 189, 'Gud'),
(4928, 189, 'Nagbukel'),
(4929, 189, 'Patanad'),
(4930, 189, 'Quezon'),
(4931, 189, 'Ramos East'),
(4932, 189, 'Ramos West'),
(4933, 189, 'Rizal East (Pob.)'),
(4934, 189, 'Rizal West (Pob.)'),
(4935, 189, 'Victoria'),
(4936, 189, 'Villaflor'),
(4937, 190, 'Agliam'),
(4938, 190, 'Babanuang'),
(4939, 190, 'Cabaritan'),
(4940, 190, 'Caraniogan'),
(4941, 190, 'Eden'),
(4942, 190, 'Malalinta'),
(4943, 190, 'Mararigue'),
(4944, 190, 'Nueva Era'),
(4945, 190, 'Pisang'),
(4946, 190, 'District 1 (Pob.)'),
(4947, 190, 'District 2 (Pob.)'),
(4948, 190, 'District 3 (Pob.)'),
(4949, 190, 'District 4 (Pob.)'),
(4950, 190, 'San Francisco'),
(4951, 190, 'Sandiat Centro'),
(4952, 190, 'Sandiat East'),
(4953, 190, 'Sandiat West'),
(4954, 190, 'Santa Cruz'),
(4955, 190, 'Villanueva'),
(4956, 191, 'Alibadabad'),
(4957, 191, 'Binatug'),
(4958, 191, 'Bitabian'),
(4959, 191, 'Buyasan'),
(4960, 191, 'Cadsalan'),
(4961, 191, 'Casala'),
(4962, 191, 'Cataguing'),
(4963, 191, 'Daragutan East'),
(4964, 191, 'Daragutan West'),
(4965, 191, 'Del Pilar'),
(4966, 191, 'Dibuluan'),
(4967, 191, 'Dicamay'),
(4968, 191, 'Dipusu'),
(4969, 191, 'Disulap'),
(4970, 191, 'Disusuan'),
(4971, 191, 'Gangalan'),
(4972, 191, 'Ibujan'),
(4973, 191, 'Libertad'),
(4974, 191, 'Macayucayu'),
(4975, 191, 'Mallabo'),
(4976, 191, 'Marannao'),
(4977, 191, 'Minanga'),
(4978, 191, 'Old San Mariano'),
(4979, 191, 'Palutan'),
(4980, 191, 'Panninan'),
(4981, 191, 'Zone I (Pob.)'),
(4982, 191, 'Zone II (Pob.)'),
(4983, 191, 'Zone III (Pob.)'),
(4984, 191, 'San Jose'),
(4985, 191, 'San Pablo'),
(4986, 191, 'San Pedro'),
(4987, 191, 'Santa Filomina'),
(4988, 191, 'Tappa'),
(4989, 191, 'Ueg'),
(4990, 191, 'Zamora'),
(4991, 191, 'Balagan'),
(4992, 192, 'Bacareña'),
(4993, 192, 'Bagong Sikat'),
(4994, 192, 'Bella Luz'),
(4995, 192, 'Daramuangan Sur'),
(4996, 192, 'Estrella'),
(4997, 192, 'Gaddanan'),
(4998, 192, 'Malasin'),
(4999, 192, 'Mapuroc'),
(5000, 192, 'Marasat Grande'),
(5001, 192, 'Marasat Pequeño'),
(5002, 192, 'Old Centro I'),
(5003, 192, 'Old Centro II'),
(5004, 192, 'Barangay I (Pob.)'),
(5005, 192, 'Barangay II (Pob.)'),
(5006, 192, 'Barangay III (Pob.)'),
(5007, 192, 'Barangay IV (Pob.)'),
(5008, 192, 'Salinungan East'),
(5009, 192, 'Salinungan West'),
(5010, 192, 'San Andres'),
(5011, 192, 'San Antonio'),
(5012, 192, 'San Ignacio'),
(5013, 192, 'San Manuel'),
(5014, 192, 'San Marcos'),
(5015, 192, 'San Roque'),
(5016, 192, 'Sinamar Norte'),
(5017, 192, 'Sinamar Sur'),
(5018, 192, 'Victoria'),
(5019, 192, 'Villafuerte'),
(5020, 192, 'Villa Cruz'),
(5021, 192, 'Villa Magat'),
(5022, 192, 'Villa Gamiao'),
(5023, 192, 'Dagupan'),
(5024, 192, 'Daramuangan Norte'),
(5025, 193, 'Annanuman'),
(5026, 193, 'Auitan'),
(5027, 193, 'Ballacayu'),
(5028, 193, 'Binguang'),
(5029, 193, 'Bungad'),
(5030, 193, 'Dalena'),
(5031, 193, 'Caddangan/Limbauan'),
(5032, 193, 'Calamagui'),
(5033, 193, 'Caralucud'),
(5034, 193, 'Guminga'),
(5035, 193, 'Minanga Norte'),
(5036, 193, 'Minanga Sur'),
(5037, 193, 'San Jose'),
(5038, 193, 'Poblacion'),
(5039, 193, 'Simanu Norte'),
(5040, 193, 'Simanu Sur'),
(5041, 193, 'Tupa'),
(5042, 194, 'Bangad'),
(5043, 194, 'Buenavista'),
(5044, 194, 'Calamagui North'),
(5045, 194, 'Calamagui East'),
(5046, 194, 'Calamagui West'),
(5047, 194, 'Divisoria'),
(5048, 194, 'Lingaling'),
(5049, 194, 'Mozzozzin Sur'),
(5050, 194, 'Mozzozzin North'),
(5051, 194, 'Naganacan'),
(5052, 194, 'Poblacion 1'),
(5053, 194, 'Poblacion 2'),
(5054, 194, 'Poblacion 3'),
(5055, 194, 'Quinagabian'),
(5056, 194, 'San Antonio'),
(5057, 194, 'San Isidro East'),
(5058, 194, 'San Isidro West'),
(5059, 194, 'San Rafael West'),
(5060, 194, 'San Rafael East'),
(5061, 194, 'Villabuena'),
(5062, 195, 'Abra'),
(5063, 195, 'Ambalatungan'),
(5064, 195, 'Balintocatoc'),
(5065, 195, 'Baluarte'),
(5066, 195, 'Bannawag Norte'),
(5067, 195, 'Batal'),
(5068, 195, 'Buenavista'),
(5069, 195, 'Cabulay'),
(5070, 195, 'Calao East (Pob.)'),
(5071, 195, 'Calao West (Pob.)'),
(5072, 195, 'Calaocan'),
(5073, 195, 'Villa Gonzaga'),
(5074, 195, 'Centro East (Pob.)'),
(5075, 195, 'Centro West (Pob.)'),
(5076, 195, 'Divisoria'),
(5077, 195, 'Dubinan East'),
(5078, 195, 'Dubinan West'),
(5079, 195, 'Luna'),
(5080, 195, 'Mabini'),
(5081, 195, 'Malvar'),
(5082, 195, 'Nabbuan'),
(5083, 195, 'Naggasican'),
(5084, 195, 'Patul'),
(5085, 195, 'Plaridel'),
(5086, 195, 'Rizal'),
(5087, 195, 'Rosario'),
(5088, 195, 'Sagana'),
(5089, 195, 'Salvador'),
(5090, 195, 'San Andres'),
(5091, 195, 'San Isidro'),
(5092, 195, 'San Jose'),
(5093, 195, 'Sinili'),
(5094, 195, 'Sinsayon'),
(5095, 195, 'Santa Rosa'),
(5096, 195, 'Victory Norte'),
(5097, 195, 'Victory Sur'),
(5098, 195, 'Villasis'),
(5099, 196, 'Ammugauan'),
(5100, 196, 'Antagan'),
(5101, 196, 'Bagabag'),
(5102, 196, 'Bagutari'),
(5103, 196, 'Balelleng'),
(5104, 196, 'Barumbong'),
(5105, 196, 'Bubug'),
(5106, 196, 'Bolinao-Culalabo'),
(5107, 196, 'Cañogan Abajo Norte'),
(5108, 196, 'Calinaoan Centro'),
(5109, 196, 'Calinaoan Malasin'),
(5110, 196, 'Calinaoan Norte'),
(5111, 196, 'Cañogan Abajo Sur'),
(5112, 196, 'Cañogan Alto'),
(5113, 196, 'Centro'),
(5114, 196, 'Colunguan'),
(5115, 196, 'Malapagay'),
(5116, 196, 'San Rafael Abajo'),
(5117, 196, 'San Rafael Alto'),
(5118, 196, 'San Roque'),
(5119, 196, 'San Vicente'),
(5120, 196, 'Uauang-Tuliao'),
(5121, 196, 'Uauang-Galicia'),
(5122, 196, 'Biga Occidental'),
(5123, 196, 'Biga Oriental'),
(5124, 196, 'Calanigan Norte'),
(5125, 196, 'Calanigan Sur'),
(5126, 197, 'Annafunan'),
(5127, 197, 'Antagan I'),
(5128, 197, 'Antagan II'),
(5129, 197, 'Arcon'),
(5130, 197, 'Balug'),
(5131, 197, 'Banig'),
(5132, 197, 'Bantug'),
(5133, 197, 'Bayabo East'),
(5134, 197, 'Caligayan'),
(5135, 197, 'Camasi'),
(5136, 197, 'Carpentero'),
(5137, 197, 'Compania'),
(5138, 197, 'Cumabao'),
(5139, 197, 'Fugu Abajo'),
(5140, 197, 'Fugu Norte'),
(5141, 197, 'Fugu Sur'),
(5142, 197, 'Fermeldy'),
(5143, 197, 'Lalauanan'),
(5144, 197, 'Lanna'),
(5145, 197, 'Lapogan'),
(5146, 197, 'Lingaling'),
(5147, 197, 'Liwanag'),
(5148, 197, 'Santa Visitacion'),
(5149, 197, 'Malamag East'),
(5150, 197, 'Malamag West'),
(5151, 197, 'Maligaya'),
(5152, 197, 'Minanga'),
(5153, 197, 'Namnama'),
(5154, 197, 'Paragu'),
(5155, 197, 'Pilitan'),
(5156, 197, 'Barangay District 1 (Pob.)'),
(5157, 197, 'Barangay District 2 (Pob.)'),
(5158, 197, 'Barangay District 3 (Pob.)'),
(5159, 197, 'Barangay District 4 (Pob.)'),
(5160, 197, 'San Mateo'),
(5161, 197, 'San Pedro'),
(5162, 197, 'San Vicente'),
(5163, 197, 'Santa'),
(5164, 197, 'Santa Catalina'),
(5165, 197, 'Santo Niño'),
(5166, 197, 'Sinippil'),
(5167, 197, 'Sisim Abajo'),
(5168, 197, 'Sisim Alto'),
(5169, 197, 'Tunggui'),
(5170, 197, 'Ugad'),
(5171, 197, 'Moldero'),
(5172, 198, 'Ammueg'),
(5173, 198, 'Camandag'),
(5174, 198, 'Labang'),
(5175, 198, 'Napo'),
(5176, 198, 'Poblacion'),
(5177, 198, 'Salingsingan'),
(5178, 198, 'Tiblac'),
(5179, 198, 'Dulli'),
(5180, 199, 'Banganan'),
(5181, 199, 'Beti'),
(5182, 199, 'Bone North'),
(5183, 199, 'Bone South'),
(5184, 199, 'Calitlitan'),
(5185, 199, 'Comon'),
(5186, 199, 'Cutar'),
(5187, 199, 'Darapidap'),
(5188, 199, 'Kirang'),
(5189, 199, 'Nagcuartelan'),
(5190, 199, 'Poblacion'),
(5191, 199, 'Santa Clara'),
(5192, 199, 'Tabueng'),
(5193, 199, 'Tucanon'),
(5194, 199, 'Anayo'),
(5195, 199, 'Baan'),
(5196, 199, 'Balite'),
(5197, 199, 'Canabuan'),
(5198, 199, 'Canarem'),
(5199, 199, 'Latar-Nocnoc-San Francisco'),
(5200, 199, 'Ocao-Capiniaan'),
(5201, 199, 'Yaway'),
(5202, 200, 'Bakir'),
(5203, 200, 'Baretbet'),
(5204, 200, 'Careb'),
(5205, 200, 'Lantap'),
(5206, 200, 'Murong'),
(5207, 200, 'Nangalisan'),
(5208, 200, 'Paniki'),
(5209, 200, 'Pogonsino'),
(5210, 200, 'San Geronimo (Pob.)'),
(5211, 200, 'San Pedro (Pob.)'),
(5212, 200, 'Santa Cruz'),
(5213, 200, 'Santa Lucia'),
(5214, 200, 'Tuao North'),
(5215, 200, 'Villa Coloma (Pob.)'),
(5216, 200, 'Quirino (Pob.)'),
(5217, 200, 'Villaros'),
(5218, 200, 'Tuao South'),
(5219, 201, 'Abian'),
(5220, 201, 'Abinganan'),
(5221, 201, 'Aliaga'),
(5222, 201, 'Almaguer North'),
(5223, 201, 'Almaguer South'),
(5224, 201, 'Banggot (Pob.)'),
(5225, 201, 'Barat'),
(5226, 201, 'Buag (Pob.)'),
(5227, 201, 'Calaocan (Pob.)'),
(5228, 201, 'Dullao'),
(5229, 201, 'Homestead'),
(5230, 201, 'Indiana'),
(5231, 201, 'Mabuslo'),
(5232, 201, 'Macate'),
(5233, 201, 'Manamtam'),
(5234, 201, 'Mauan'),
(5235, 201, 'Salinas'),
(5236, 201, 'San Antonio North'),
(5237, 201, 'San Antonio South'),
(5238, 201, 'San Fernando'),
(5239, 201, 'San Leonardo'),
(5240, 201, 'Santo Domingo'),
(5241, 201, 'Pallas'),
(5242, 201, 'Magsaysay Hills'),
(5243, 201, 'Santo Domingo West'),
(5244, 202, 'Bonfal East'),
(5245, 202, 'Bonfal Proper'),
(5246, 202, 'Bonfal West'),
(5247, 202, 'Buenavista'),
(5248, 202, 'Busilac'),
(5249, 202, 'Casat'),
(5250, 202, 'La Torre North'),
(5251, 202, 'Magapuy'),
(5252, 202, 'Magsaysay'),
(5253, 202, 'Masoc'),
(5254, 202, 'Paitan'),
(5255, 202, 'Don Domingo Maddela Pob. '),
(5256, 202, 'Don Tomas Maddela Pob.'),
(5257, 202, 'District III Pob.'),
(5258, 202, 'District IV (Pob.)'),
(5259, 202, 'Bansing'),
(5260, 202, 'Cabuaan'),
(5261, 202, 'Don Mariano Marcos'),
(5262, 202, 'Ipil-Cuneg'),
(5263, 202, 'La Torre South'),
(5264, 202, 'Luyang'),
(5265, 202, 'Salvacion'),
(5266, 202, 'San Nicolas North'),
(5267, 202, 'Santa Rosa'),
(5268, 202, 'Vista Alegre'),
(5269, 203, 'Arwas'),
(5270, 203, 'Balete'),
(5271, 203, 'Bugnay'),
(5272, 203, 'Decabacan'),
(5273, 203, 'Duruarog'),
(5274, 203, 'Escoting'),
(5275, 203, 'Nagsabaran'),
(5276, 203, 'Namamparan'),
(5277, 203, 'Pinya'),
(5278, 203, 'Poblacion'),
(5279, 203, 'Ampakling'),
(5280, 203, 'Butao'),
(5281, 203, 'Langca'),
(5282, 203, 'Lurad'),
(5283, 203, 'Rosario'),
(5284, 203, 'San Luis'),
(5285, 203, 'San Pablo'),
(5286, 203, 'Villa Aurora'),
(5287, 203, 'Villa Florentino'),
(5288, 204, 'Belance'),
(5289, 204, 'Bulala'),
(5290, 204, 'Inaban'),
(5291, 204, 'Ineangan'),
(5292, 204, 'Lamo'),
(5293, 204, 'Mabasa'),
(5294, 204, 'Malasin (Pob.)'),
(5295, 204, 'Munguia'),
(5296, 204, 'Oyao'),
(5297, 204, 'New Gumiad'),
(5298, 204, 'Yabbi'),
(5299, 204, 'Binnuangan'),
(5300, 204, 'Bitnong'),
(5301, 204, 'Macabenga'),
(5302, 204, 'Parai'),
(5303, 205, 'Abaca'),
(5304, 205, 'Banila'),
(5305, 205, 'Carolotan'),
(5306, 205, 'Gabut'),
(5307, 205, 'Ganao'),
(5308, 205, 'Lukidnon'),
(5309, 205, 'Mangayang'),
(5310, 205, 'Palabotan'),
(5311, 205, 'Biruk'),
(5312, 205, 'Bagumbayan'),
(5313, 205, 'Balsain'),
(5314, 205, 'Canabay'),
(5315, 205, 'Domang'),
(5316, 205, 'Dopaj'),
(5317, 205, 'Kimbutan'),
(5318, 205, 'Kinabuan'),
(5319, 205, 'Sanguit'),
(5320, 205, 'Santa Maria'),
(5321, 205, 'Talbek'),
(5322, 206, 'Antutot'),
(5323, 206, 'Alimit'),
(5324, 206, 'Poblacion'),
(5325, 206, 'Bilet'),
(5326, 206, 'Binogawan'),
(5327, 206, 'Bua'),
(5328, 206, 'Biyoy'),
(5329, 206, 'Capisaan'),
(5330, 206, 'Cordon'),
(5331, 206, 'Didipio'),
(5332, 206, 'Dine'),
(5333, 206, 'Kakiduguen'),
(5334, 206, 'Lupa'),
(5335, 206, 'Macalong'),
(5336, 206, 'Malabing'),
(5337, 206, 'Muta'),
(5338, 206, 'Pao'),
(5339, 206, 'Papaya'),
(5340, 206, 'Pudi'),
(5341, 206, 'Tokod'),
(5342, 206, 'Seguem'),
(5343, 206, 'Tadji'),
(5344, 206, 'Wangal'),
(5345, 206, 'Watwat'),
(5346, 206, 'Camamasi'),
(5347, 206, 'Catarawan'),
(5348, 206, 'Nantawacan'),
(5349, 206, 'Alloy'),
(5350, 206, 'Kongkong'),
(5351, 206, 'Pacquet'),
(5352, 207, 'Acacia'),
(5353, 207, 'Amilong Labeng'),
(5354, 207, 'Ansipsip'),
(5355, 207, 'Baan'),
(5356, 207, 'Babadi'),
(5357, 207, 'Balangabang'),
(5358, 207, 'Banao'),
(5359, 207, 'Binalian'),
(5360, 207, 'Besong'),
(5361, 207, 'Cabalatan-Alang'),
(5362, 207, 'Cabanglasan'),
(5363, 207, 'Kayapa Proper East'),
(5364, 207, 'Kayapa Proper West'),
(5365, 207, 'Mapayao'),
(5366, 207, 'Nansiakan'),
(5367, 207, 'Pampang (Pob.)'),
(5368, 207, 'Pangawan'),
(5369, 207, 'Pinayag'),
(5370, 207, 'Pingkian'),
(5371, 207, 'San Fabian'),
(5372, 207, 'Talecabcab'),
(5373, 207, 'Tubongan'),
(5374, 207, 'Alang-Salacsac'),
(5375, 207, 'Balete'),
(5376, 207, 'Buyasyas'),
(5377, 207, 'Cabayo'),
(5378, 207, 'Castillo Village'),
(5379, 207, 'Latbang'),
(5380, 207, 'Lawigan'),
(5381, 207, 'Tidang Village'),
(5382, 208, 'Aurora'),
(5383, 208, 'Baresbes'),
(5384, 208, 'Buliwao'),
(5385, 208, 'Bonifacio'),
(5386, 208, 'Calaocan'),
(5387, 208, 'Caliat (Pob.)'),
(5388, 208, 'Darubba'),
(5389, 208, 'Maddiangat'),
(5390, 208, 'Nalubbunan'),
(5391, 208, 'Runruno'),
(5392, 208, 'Maasin'),
(5393, 208, 'Dagupan'),
(5394, 209, 'Bacneng'),
(5395, 209, 'Baliling'),
(5396, 209, 'Bantinan'),
(5397, 209, 'Baracbac'),
(5398, 209, 'Buyasyas'),
(5399, 209, 'Imugan'),
(5400, 209, 'Poblacion'),
(5401, 209, 'Sinapaoan'),
(5402, 209, 'Tactac'),
(5403, 209, 'Villa Flores'),
(5404, 209, 'Atbu'),
(5405, 209, 'Balete'),
(5406, 209, 'Canabuan'),
(5407, 209, 'Malico'),
(5408, 209, 'Santa Rosa'),
(5409, 209, 'Unib'),
(5410, 210, 'Aggub'),
(5411, 210, 'Bangaan'),
(5412, 210, 'Bangar'),
(5413, 210, 'Bascaran'),
(5414, 210, 'Curifang'),
(5415, 210, 'Dadap'),
(5416, 210, 'Lactawan'),
(5417, 210, 'Osmeña'),
(5418, 210, 'Poblacion North'),
(5419, 210, 'Poblacion South'),
(5420, 210, 'Quezon'),
(5421, 210, 'Quirino'),
(5422, 210, 'Roxas'),
(5423, 210, 'San Juan'),
(5424, 210, 'San Luis'),
(5425, 210, 'Tucal'),
(5426, 210, 'Uddiawan'),
(5427, 210, 'Wacal'),
(5428, 210, 'Bagahabag'),
(5429, 210, 'Communal'),
(5430, 210, 'Concepcion'),
(5431, 210, 'Pilar D. Galima'),
(5432, 211, 'Bintawan Sur'),
(5433, 211, 'Ibung'),
(5434, 211, 'Cabuluan'),
(5435, 211, 'Nagbitin'),
(5436, 211, 'Ocapon'),
(5437, 211, 'Pieza'),
(5438, 211, 'Sawmill'),
(5439, 211, 'Poblacion'),
(5440, 211, 'Bintawan Norte'),
(5441, 212, 'Abuyo'),
(5442, 212, 'Galintuja'),
(5443, 212, 'Cauayan'),
(5444, 212, 'Lipuga'),
(5445, 212, 'Lublub (Pob.)'),
(5446, 212, 'Pelaway'),
(5447, 213, 'Dagupan'),
(5448, 213, 'Dumabel'),
(5449, 213, 'Dungo'),
(5450, 213, 'Guinalbin'),
(5451, 213, 'Ligaya'),
(5452, 213, 'Palacian'),
(5453, 213, 'Pinaripad Sur'),
(5454, 213, 'Progreso (Pob.)'),
(5455, 213, 'Ramos'),
(5456, 213, 'Rang-ayan'),
(5457, 213, 'San Antonio'),
(5458, 213, 'San Francisco'),
(5459, 213, 'San Leonardo'),
(5460, 213, 'San Ramon'),
(5461, 213, 'Victoria'),
(5462, 213, 'Villa Pagaduan'),
(5463, 213, 'Villa Santiago'),
(5464, 213, 'Alicia'),
(5465, 213, 'Cabugao'),
(5466, 213, 'Diodol'),
(5467, 213, 'Nagabgaban'),
(5468, 213, 'Pinaripad Norte'),
(5469, 213, 'San Benigno'),
(5470, 213, 'San Manuel'),
(5471, 213, 'Villa Ventura'),
(5472, 214, 'Banuar'),
(5473, 214, 'Burgos'),
(5474, 214, 'Calaocan'),
(5475, 214, 'Del Pilar'),
(5476, 214, 'Dibibi'),
(5477, 214, 'Eden'),
(5478, 214, 'Gundaway (Pob.)'),
(5479, 214, 'Mangandingay (Pob.)'),
(5480, 214, 'San Marcos'),
(5481, 214, 'Villamor'),
(5482, 214, 'Zamora'),
(5483, 214, 'Villarose'),
(5484, 214, 'Villa Peña'),
(5485, 214, 'Dingasan'),
(5486, 214, 'Tucod'),
(5487, 214, 'Gomez'),
(5488, 214, 'Santo Domingo'),
(5489, 215, 'Andres Bonifacio (Pob.)'),
(5490, 215, 'Aurora East (Pob.)'),
(5491, 215, 'Aurora West (Pob.)'),
(5492, 215, 'Baguio Village'),
(5493, 215, 'Balagbag'),
(5494, 215, 'Bannawag'),
(5495, 215, 'Cajel'),
(5496, 215, 'Campamento'),
(5497, 215, 'Diego Silang'),
(5498, 215, 'Don Mariano Perez, Sr.'),
(5499, 215, 'Doña Imelda'),
(5500, 215, 'Dumanisi'),
(5501, 215, 'Gabriela Silang'),
(5502, 215, 'Gulac'),
(5503, 215, 'Guribang'),
(5504, 215, 'Ifugao Village'),
(5505, 215, 'Isidro Paredes'),
(5506, 215, 'Rizal (Pob.)'),
(5507, 215, 'Liwayway'),
(5508, 215, 'Luttuad'),
(5509, 215, 'Magsaysay'),
(5510, 215, 'Makate'),
(5511, 215, 'Maria Clara'),
(5512, 215, 'Rafael Palma'),
(5513, 215, 'Ricarte Norte'),
(5514, 215, 'Ricarte Sur'),
(5515, 215, 'San Antonio'),
(5516, 215, 'San Isidro'),
(5517, 215, 'San Pascual'),
(5518, 215, 'Villa Pascua'),
(5519, 215, 'Aklan Village'),
(5520, 215, 'Gregorio Pimentel'),
(5521, 215, 'Don Faustino Pagaduan'),
(5522, 216, 'Abbag'),
(5523, 216, 'Balligui'),
(5524, 216, 'Divisoria Sur'),
(5525, 216, 'Buenavista'),
(5526, 216, 'Cabaruan'),
(5527, 216, 'Cabua-an'),
(5528, 216, 'Cofcaville'),
(5529, 216, 'Diduyon'),
(5530, 216, 'Dipintin'),
(5531, 216, 'Divisoria Norte'),
(5532, 216, 'Dumabato Norte'),
(5533, 216, 'Dumabato Sur'),
(5534, 216, 'Lusod'),
(5535, 216, 'Manglad'),
(5536, 216, 'Pedlisan'),
(5537, 216, 'Poblacion Norte'),
(5538, 216, 'San Bernabe'),
(5539, 216, 'San Dionisio I'),
(5540, 216, 'San Martin'),
(5541, 216, 'San Pedro'),
(5542, 216, 'San Salvador'),
(5543, 216, 'Santo Niño'),
(5544, 216, 'Santo Tomas'),
(5545, 216, 'Villa Gracia'),
(5546, 216, 'Villa Hermosa Sur'),
(5547, 216, 'Villa Hermosa Norte'),
(5548, 216, 'Ysmael'),
(5549, 216, 'Villa Agullana'),
(5550, 216, 'Poblacion Sur'),
(5551, 216, 'Villa Jose V Ylanan'),
(5552, 216, 'Jose Ancheta'),
(5553, 216, 'Santa Maria'),
(5554, 217, 'Dibul'),
(5555, 217, 'La Paz'),
(5556, 217, 'Magsaysay (Pob.)'),
(5557, 217, 'Rizal (Pob.)'),
(5558, 217, 'Salvacion'),
(5559, 217, 'Santo Tomas'),
(5560, 217, 'Tres Reyes'),
(5561, 217, 'Cardenas'),
(5562, 217, 'Gamis'),
(5563, 218, 'Anak'),
(5564, 218, 'Dipantan'),
(5565, 218, 'Dissimungal'),
(5566, 218, 'Guino'),
(5567, 218, 'La Conwap'),
(5568, 218, 'Landingan'),
(5569, 218, 'Mataddi'),
(5570, 218, 'Matmad'),
(5571, 218, 'Old Gumiad'),
(5572, 218, 'Ponggo'),
(5573, 218, 'San Dionisio II'),
(5574, 218, 'San Pugo'),
(5575, 218, 'San Ramos'),
(5576, 218, 'Sangbay'),
(5577, 218, 'Wasid'),
(5578, 218, 'Asaklat'),
(5579, 219, 'Bangkal'),
(5580, 219, 'Calaylayan (Pob.)'),
(5581, 219, 'Capitangan'),
(5582, 219, 'Gabon'),
(5583, 219, 'Laon (Pob.)'),
(5584, 219, 'Mabatang'),
(5585, 219, 'Omboy'),
(5586, 219, 'Salian'),
(5587, 219, 'Wawa (Pob.)'),
(5588, 220, 'Bagumbayan (Pob.)'),
(5589, 220, 'Banawang'),
(5590, 220, 'Binuangan'),
(5591, 220, 'Binukawan'),
(5592, 220, 'Ibaba'),
(5593, 220, 'Ibis'),
(5594, 220, 'Pag-asa'),
(5595, 220, 'Parang'),
(5596, 220, 'Paysawan'),
(5597, 220, 'Quinawan'),
(5598, 220, 'San Antonio'),
(5599, 220, 'Saysain'),
(5600, 220, 'Tabing-Ilog (Pob.)'),
(5601, 220, 'Atilano L. Ricardo'),
(5602, 221, 'Bagumbayan'),
(5603, 221, 'Cabog-Cabog'),
(5604, 221, 'Munting Batangas'),
(5605, 221, 'Cataning'),
(5606, 221, 'Central'),
(5607, 221, 'Cupang Proper'),
(5608, 221, 'Cupang West'),
(5609, 221, 'Dangcol'),
(5610, 221, 'Ibayo'),
(5611, 221, 'Malabia'),
(5612, 221, 'Poblacion'),
(5613, 221, 'Pto. Rivas Ibaba'),
(5614, 221, 'Pto. Rivas Itaas'),
(5615, 221, 'San Jose'),
(5616, 221, 'Sibacan'),
(5617, 221, 'Camacho'),
(5618, 221, 'Talisay'),
(5619, 221, 'Tanato'),
(5620, 221, 'Tenejero'),
(5621, 221, 'Tortugas'),
(5622, 221, 'Tuyo'),
(5623, 221, 'Bagong Silang'),
(5624, 221, 'Cupang North'),
(5625, 221, 'Doña Francisca'),
(5626, 221, 'Lote'),
(5627, 222, 'Bangal'),
(5628, 222, 'Bonifacio (Pob.)'),
(5629, 222, 'Burgos (Pob.)'),
(5630, 222, 'Colo'),
(5631, 222, 'Daang Bago'),
(5632, 222, 'Dalao'),
(5633, 222, 'Del Pilar (Pob.)'),
(5634, 222, 'Gen. Luna (Pob.)'),
(5635, 222, 'Gomez (Pob.)'),
(5636, 222, 'Happy Valley'),
(5637, 222, 'Kataasan'),
(5638, 222, 'Layac'),
(5639, 222, 'Luacan'),
(5640, 222, 'Mabini Proper (Pob.)'),
(5641, 222, 'Mabini Ext. (Pob.)'),
(5642, 222, 'Magsaysay'),
(5643, 222, 'Naparing'),
(5644, 222, 'New San Jose'),
(5645, 222, 'Old San Jose'),
(5646, 222, 'Padre Dandan (Pob.)'),
(5647, 222, 'Pag-asa'),
(5648, 222, 'Pagalanggang'),
(5649, 222, 'Pinulot'),
(5650, 222, 'Pita'),
(5651, 222, 'Rizal (Pob.)'),
(5652, 222, 'Roosevelt'),
(5653, 222, 'Roxas (Pob.)'),
(5654, 222, 'Saguing'),
(5655, 222, 'San Benito'),
(5656, 222, 'San Isidro (Pob.)'),
(5657, 222, 'San Pablo'),
(5658, 222, 'San Ramon'),
(5659, 222, 'San Simon'),
(5660, 222, 'Santo Niño'),
(5661, 222, 'Sapang Balas'),
(5662, 222, 'Santa Isabel'),
(5663, 222, 'Torres Bugauen (Pob.)'),
(5664, 222, 'Tucop'),
(5665, 222, 'Zamora (Pob.)'),
(5666, 222, 'Aquino'),
(5667, 222, 'Bayan-bayanan'),
(5668, 222, 'Maligaya'),
(5669, 222, 'Payangan'),
(5670, 222, 'Pentor'),
(5671, 222, 'Tubo-tubo'),
(5672, 222, 'Jose C. Payumo, Jr.'),
(5673, 223, 'A. Rivera (Pob.)'),
(5674, 223, 'Almacen'),
(5675, 223, 'Bacong'),
(5676, 223, 'Balsic'),
(5677, 223, 'Bamban'),
(5678, 223, 'Burgos-Soliman (Pob.)'),
(5679, 223, 'Cataning (Pob.)'),
(5680, 223, 'Culis'),
(5681, 223, 'Daungan (Pob.)'),
(5682, 223, 'Mabiga'),
(5683, 223, 'Mabuco'),
(5684, 223, 'Maite'),
(5685, 223, 'Mambog - Mandama'),
(5686, 223, 'Palihan'),
(5687, 223, 'Pandatung'),
(5688, 223, 'Pulo'),
(5689, 223, 'Saba'),
(5690, 223, 'San Pedro (Pob.)'),
(5691, 223, 'Santo Cristo (Pob.)'),
(5692, 223, 'Sumalo'),
(5693, 223, 'Tipo'),
(5694, 223, 'Judge Roman Cruz Sr.'),
(5695, 223, 'Sacrifice Valley'),
(5696, 224, 'Alangan'),
(5697, 224, 'Kitang I'),
(5698, 224, 'Kitang 2 & Luz'),
(5699, 224, 'Lamao'),
(5700, 224, 'Landing'),
(5701, 224, 'Poblacion'),
(5702, 224, 'Reformista'),
(5703, 224, 'Townsite'),
(5704, 224, 'Wawa'),
(5705, 224, 'Duale'),
(5706, 224, 'San Francisco de Asis'),
(5707, 224, 'St. Francis II'),
(5708, 225, 'Alas-asin'),
(5709, 225, 'Alion'),
(5710, 225, 'Batangas II'),
(5711, 225, 'Cabcaben'),
(5712, 225, 'Lucanin'),
(5713, 225, 'Baseco Country'),
(5714, 225, 'Poblacion'),
(5715, 225, 'San Carlos'),
(5716, 225, 'San Isidro'),
(5717, 225, 'Sisiman'),
(5718, 225, 'Balon-Anito'),
(5719, 225, 'Biaan'),
(5720, 225, 'Camaya'),
(5721, 225, 'Ipag'),
(5722, 225, 'Malaya'),
(5723, 225, 'Maligaya'),
(5724, 225, 'Mt. View'),
(5725, 225, 'Townsite'),
(5726, 226, 'Binaritan'),
(5727, 226, 'Mabayo'),
(5728, 226, 'Nagbalayong'),
(5729, 226, 'Poblacion'),
(5730, 226, 'Sabang'),
(5731, 227, 'Bagong Paraiso (Pob.)'),
(5732, 227, 'Balut (Pob.)'),
(5733, 227, 'Bayan (Pob.)'),
(5734, 227, 'Calero (Pob.)'),
(5735, 227, 'Paking-Carbonero (Pob.)'),
(5736, 227, 'Centro II (Pob.)'),
(5737, 227, 'Dona'),
(5738, 227, 'Kaparangan'),
(5739, 227, 'Masantol'),
(5740, 227, 'Mulawin'),
(5741, 227, 'Pag-asa'),
(5742, 227, 'Palihan (Pob.)'),
(5743, 227, 'Pantalan Bago (Pob.)'),
(5744, 227, 'Pantalan Luma (Pob.)'),
(5745, 227, 'Parang Parang (Pob.)'),
(5746, 227, 'Centro I (Pob.)'),
(5747, 227, 'Sibul'),
(5748, 227, 'Silahis'),
(5749, 227, 'Tala'),
(5750, 227, 'Talimundoc'),
(5751, 227, 'Tapulao'),
(5752, 227, 'Tenejero (Pob.)'),
(5753, 227, 'Tugatog'),
(5754, 227, 'Wawa (Pob.)'),
(5755, 227, 'Apollo'),
(5756, 227, 'Kabalutan'),
(5757, 227, 'Maria Fe'),
(5758, 227, 'Puksuan'),
(5759, 227, 'Tagumpay'),
(5760, 228, 'Arellano (Pob.)'),
(5761, 228, 'Bagumbayan (Pob.)'),
(5762, 228, 'Balagtas (Pob.)'),
(5763, 228, 'Balut (Pob.)'),
(5764, 228, 'Bantan'),
(5765, 228, 'Bilolo'),
(5766, 228, 'Calungusan'),
(5767, 228, 'Camachile'),
(5768, 228, 'Daang Bago (Pob.)'),
(5769, 228, 'Daang Bilolo (Pob.)'),
(5770, 228, 'Daang Pare'),
(5771, 228, 'General Lim'),
(5772, 228, 'Kapunitan'),
(5773, 228, 'Lati (Pob.)'),
(5774, 228, 'Lusungan (Pob.)'),
(5775, 228, 'Puting Buhangin'),
(5776, 228, 'Sabatan'),
(5777, 228, 'San Vicente (Pob.)'),
(5778, 228, 'Santo Domingo'),
(5779, 228, 'Villa Angeles (Pob.)'),
(5780, 228, 'Wakas (Pob.)'),
(5781, 228, 'Wawa (Pob.)'),
(5782, 228, 'Santa Elena'),
(5783, 229, 'Ala-uli'),
(5784, 229, 'Bagumbayan'),
(5785, 229, 'Balut I'),
(5786, 229, 'Balut II'),
(5787, 229, 'Bantan Munti'),
(5788, 229, 'Burgos'),
(5789, 229, 'Del Rosario (Pob.)'),
(5790, 229, 'Diwa'),
(5791, 229, 'Landing'),
(5792, 229, 'Liyang'),
(5793, 229, 'Nagwaling'),
(5794, 229, 'Panilao'),
(5795, 229, 'Pantingan'),
(5796, 229, 'Poblacion'),
(5797, 229, 'Rizal (Pob.)'),
(5798, 229, 'Santa Rosa'),
(5799, 229, 'Wakas North'),
(5800, 229, 'Wakas South'),
(5801, 229, 'Wawa'),
(5802, 230, 'East Calaguiman (Pob.)'),
(5803, 230, 'East Daang Bago (Pob.)'),
(5804, 230, 'Ibaba (Pob.)'),
(5805, 230, 'Imelda'),
(5806, 230, 'Lalawigan'),
(5807, 230, 'Palili'),
(5808, 230, 'San Juan (Pob.)'),
(5809, 230, 'San Roque (Pob.)'),
(5810, 230, 'Santa Lucia'),
(5811, 230, 'Sapa'),
(5812, 230, 'Tabing Ilog'),
(5813, 230, 'Gugo'),
(5814, 230, 'West Calaguiman (Pob.)'),
(5815, 230, 'West Daang Bago (Pob.)'),
(5816, 231, 'Banaban'),
(5817, 231, 'Baybay'),
(5818, 231, 'Binagbag'),
(5819, 231, 'Donacion'),
(5820, 231, 'Encanto'),
(5821, 231, 'Laog'),
(5822, 231, 'Marungko'),
(5823, 231, 'Niugan'),
(5824, 231, 'Paltok'),
(5825, 231, 'Pulong Yantok'),
(5826, 231, 'San Roque (Pob.)'),
(5827, 231, 'Santa Cruz (Pob.)'),
(5828, 231, 'Santa Lucia'),
(5829, 231, 'Santo Cristo (Pob.)'),
(5830, 231, 'Sulucan'),
(5831, 231, 'Taboc'),
(5832, 232, 'Borol 2nd'),
(5833, 232, 'Borol 1st'),
(5834, 232, 'Dalig'),
(5835, 232, 'Longos'),
(5836, 232, 'Panginay'),
(5837, 232, 'Pulong Gubat'),
(5838, 232, 'San Juan'),
(5839, 232, 'Santol'),
(5840, 232, 'Wawa (Pob.)'),
(5841, 233, 'Bagong Nayon'),
(5842, 233, 'Barangca'),
(5843, 233, 'Calantipay'),
(5844, 233, 'Catulinan'),
(5845, 233, 'Concepcion'),
(5846, 233, 'Hinukay'),
(5847, 233, 'Makinabang'),
(5848, 233, 'Matangtubig'),
(5849, 233, 'Pagala'),
(5850, 233, 'Paitan'),
(5851, 233, 'Piel'),
(5852, 233, 'Pinagbarilan'),
(5853, 233, 'Poblacion'),
(5854, 233, 'Sabang'),
(5855, 233, 'San Jose'),
(5856, 233, 'San Roque'),
(5857, 233, 'Santa Barbara'),
(5858, 233, 'Santo Cristo'),
(5859, 233, 'Santo Niño'),
(5860, 233, 'Subic'),
(5861, 233, 'Sulivan'),
(5862, 233, 'Tangos'),
(5863, 233, 'Tarcan'),
(5864, 233, 'Tiaong'),
(5865, 233, 'Tibag'),
(5866, 233, 'Tilapayong'),
(5867, 233, 'Virgen delas Flores'),
(5868, 234, 'Antipona'),
(5869, 234, 'Bagumbayan'),
(5870, 234, 'Bambang'),
(5871, 234, 'Batia'),
(5872, 234, 'Biñang 1st'),
(5873, 234, 'Biñang 2nd'),
(5874, 234, 'Bolacan'),
(5875, 234, 'Bundukan'),
(5876, 234, 'Bunlo'),
(5877, 234, 'Caingin'),
(5878, 234, 'Duhat'),
(5879, 234, 'Igulot'),
(5880, 234, 'Lolomboy'),
(5881, 234, 'Poblacion'),
(5882, 234, 'Sulucan'),
(5883, 234, 'Taal'),
(5884, 234, 'Tambobong'),
(5885, 234, 'Turo'),
(5886, 234, 'Wakas'),
(5887, 235, 'Bagumbayan'),
(5888, 235, 'Balubad'),
(5889, 235, 'Bambang'),
(5890, 235, 'Matungao'),
(5891, 235, 'Maysantol'),
(5892, 235, 'Perez'),
(5893, 235, 'Pitpitan'),
(5894, 235, 'San Francisco'),
(5895, 235, 'San Jose (Pob.)'),
(5896, 235, 'San Nicolas'),
(5897, 235, 'Santa Ana'),
(5898, 235, 'Santa Ines'),
(5899, 235, 'Taliptip'),
(5900, 235, 'Tibig'),
(5901, 236, 'Bonga Mayor'),
(5902, 236, 'Bonga Menor'),
(5903, 236, 'Buisan'),
(5904, 236, 'Camachilihan'),
(5905, 236, 'Cambaog'),
(5906, 236, 'Catacte'),
(5907, 236, 'Liciada'),
(5908, 236, 'Malamig'),
(5909, 236, 'Malawak'),
(5910, 236, 'Poblacion'),
(5911, 236, 'San Pedro'),
(5912, 236, 'Talampas'),
(5913, 236, 'Tanawan'),
(5914, 236, 'Tibagan'),
(5915, 237, 'Balite'),
(5916, 237, 'Balungao'),
(5917, 237, 'Buguion'),
(5918, 237, 'Bulusan'),
(5919, 237, 'Calizon'),
(5920, 237, 'Calumpang'),
(5921, 237, 'Caniogan'),
(5922, 237, 'Corazon'),
(5923, 237, 'Frances'),
(5924, 237, 'Gatbuca'),
(5925, 237, 'Gugo'),
(5926, 237, 'Iba Este'),
(5927, 237, 'Iba O\'Este'),
(5928, 237, 'Longos'),
(5929, 237, 'Meysulao'),
(5930, 237, 'Meyto'),
(5931, 237, 'Palimbang'),
(5932, 237, 'Panducot'),
(5933, 237, 'Pio Cruzcosa'),
(5934, 237, 'Poblacion'),
(5935, 237, 'Pungo'),
(5936, 237, 'San Jose'),
(5937, 237, 'San Marcos'),
(5938, 237, 'San Miguel'),
(5939, 237, 'Santa Lucia'),
(5940, 237, 'Santo Niño'),
(5941, 237, 'Sapang Bayan'),
(5942, 237, 'Sergio Bayan'),
(5943, 237, 'Sucol'),
(5944, 238, 'Cutcut'),
(5945, 238, 'Daungan'),
(5946, 238, 'Ilang-Ilang'),
(5947, 238, 'Malis'),
(5948, 238, 'Panginay'),
(5949, 238, 'Poblacion'),
(5950, 238, 'Pritil'),
(5951, 238, 'Pulong Gubat'),
(5952, 238, 'Santa Cruz'),
(5953, 238, 'Santa Rita'),
(5954, 238, 'Tabang'),
(5955, 238, 'Tabe'),
(5956, 238, 'Tiaong'),
(5957, 238, 'Tuktukan'),
(5958, 239, 'Abulalas'),
(5959, 239, 'Carillo'),
(5960, 239, 'Iba'),
(5961, 239, 'Mercado'),
(5962, 239, 'Palapat'),
(5963, 239, 'Pugad'),
(5964, 239, 'Sagrada Familia'),
(5965, 239, 'San Agustin'),
(5966, 239, 'San Isidro'),
(5967, 239, 'San Jose'),
(5968, 239, 'San Juan'),
(5969, 239, 'San Miguel'),
(5970, 239, 'San Nicolas'),
(5971, 239, 'San Pablo'),
(5972, 239, 'San Pascual'),
(5973, 239, 'San Pedro'),
(5974, 239, 'San Roque'),
(5975, 239, 'San Sebastian'),
(5976, 239, 'Santa Cruz'),
(5977, 239, 'Santa Elena'),
(5978, 239, 'Santa Monica'),
(5979, 239, 'Santo Niño (Pob.)'),
(5980, 239, 'Santo Rosario'),
(5981, 239, 'Tampok'),
(5982, 239, 'Tibaguin'),
(5983, 239, 'Iba-Ibayo'),
(5984, 240, 'Anilao'),
(5985, 240, 'Atlag'),
(5986, 240, 'Babatnin'),
(5987, 240, 'Bagna'),
(5988, 240, 'Bagong Bayan'),
(5989, 240, 'Balayong'),
(5990, 240, 'Balite'),
(5991, 240, 'Bangkal'),
(5992, 240, 'Barihan'),
(5993, 240, 'Bulihan'),
(5994, 240, 'Bungahan'),
(5995, 240, 'Dakila'),
(5996, 240, 'Guinhawa'),
(5997, 240, 'Caingin'),
(5998, 240, 'Calero'),
(5999, 240, 'Caliligawan'),
(6000, 240, 'Canalate'),
(6001, 240, 'Caniogan'),
(6002, 240, 'Catmon'),
(6003, 240, 'Ligas'),
(6004, 240, 'Liyang'),
(6005, 240, 'Longos'),
(6006, 240, 'Look 1st'),
(6007, 240, 'Look 2nd'),
(6008, 240, 'Lugam'),
(6009, 240, 'Mabolo'),
(6010, 240, 'Mambog'),
(6011, 240, 'Masile'),
(6012, 240, 'Matimbo'),
(6013, 240, 'Mojon'),
(6014, 240, 'Namayan'),
(6015, 240, 'Niugan'),
(6016, 240, 'Pamarawan'),
(6017, 240, 'Panasahan'),
(6018, 240, 'Pinagbakahan'),
(6019, 240, 'San Agustin'),
(6020, 240, 'San Gabriel'),
(6021, 240, 'San Juan'),
(6022, 240, 'San Pablo'),
(6023, 240, 'San Vicente (Pob.)'),
(6024, 240, 'Santiago'),
(6025, 240, 'Santisima Trinidad'),
(6026, 240, 'Santo Cristo'),
(6027, 240, 'Santo Niño (Pob.)'),
(6028, 240, 'Santo Rosario (Pob.)'),
(6029, 240, 'Santol'),
(6030, 240, 'Sumapang Bata'),
(6031, 240, 'Sumapang Matanda'),
(6032, 240, 'Taal'),
(6033, 240, 'Tikay'),
(6034, 240, 'Cofradia'),
(6035, 241, 'Abangan Norte'),
(6036, 241, 'Abangan Sur'),
(6037, 241, 'Ibayo'),
(6038, 241, 'Lambakin'),
(6039, 241, 'Lias'),
(6040, 241, 'Loma de Gato'),
(6041, 241, 'Nagbalon'),
(6042, 241, 'Patubig'),
(6043, 241, 'Poblacion I'),
(6044, 241, 'Poblacion II'),
(6045, 241, 'Prenza I'),
(6046, 241, 'Prenza II'),
(6047, 241, 'Santa Rosa I'),
(6048, 241, 'Santa Rosa II'),
(6049, 241, 'Saog'),
(6050, 241, 'Tabing Ilog'),
(6051, 242, 'Bagbaguin'),
(6052, 242, 'Bahay Pare'),
(6053, 242, 'Bancal'),
(6054, 242, 'Banga'),
(6055, 242, 'Bayugo'),
(6056, 242, 'Calvario'),
(6057, 242, 'Camalig'),
(6058, 242, 'Hulo'),
(6059, 242, 'Iba'),
(6060, 242, 'Langka'),
(6061, 242, 'Lawa'),
(6062, 242, 'Libtong'),
(6063, 242, 'Liputan'),
(6064, 242, 'Longos'),
(6065, 242, 'Malhacan'),
(6066, 242, 'Pajo'),
(6067, 242, 'Pandayan'),
(6068, 242, 'Pantoc'),
(6069, 242, 'Perez'),
(6070, 242, 'Poblacion'),
(6071, 242, 'Saluysoy'),
(6072, 242, 'Saint Francis'),
(6073, 242, 'Tugatog'),
(6074, 242, 'Ubihan'),
(6075, 242, 'Zamora'),
(6076, 242, 'Caingin'),
(6077, 243, 'Bangkal'),
(6078, 243, 'Baraka'),
(6079, 243, 'Bigte'),
(6080, 243, 'Bitungol'),
(6081, 243, 'Matictic'),
(6082, 243, 'Minuyan'),
(6083, 243, 'Partida'),
(6084, 243, 'Pinagtulayan'),
(6085, 243, 'Poblacion'),
(6086, 243, 'San Mateo'),
(6087, 243, 'Tigbe'),
(6088, 243, 'San Lorenzo'),
(6089, 243, 'Friendship Village Resources'),
(6090, 244, 'Binuangan'),
(6091, 244, 'Catanghalan'),
(6092, 244, 'Hulo'),
(6093, 244, 'Lawa'),
(6094, 244, 'Salambao'),
(6095, 244, 'Paco'),
(6096, 244, 'Pag-asa (Pob.)'),
(6097, 244, 'Paliwas'),
(6098, 244, 'Panghulo'),
(6099, 244, 'San Pascual'),
(6100, 244, 'Tawiran'),
(6101, 245, 'Bagbaguin'),
(6102, 245, 'Bagong Barrio'),
(6103, 245, 'Bunsuran III'),
(6104, 245, 'Bunsuran I'),
(6105, 245, 'Bunsuran II'),
(6106, 245, 'Cacarong Bata'),
(6107, 245, 'Cacarong Matanda'),
(6108, 245, 'Cupang'),
(6109, 245, 'Malibong Bata'),
(6110, 245, 'Malibong Matanda'),
(6111, 245, 'Manatal'),
(6112, 245, 'Mapulang Lupa'),
(6113, 245, 'Masagana'),
(6114, 245, 'Masuso'),
(6115, 245, 'Pinagkuartelan'),
(6116, 245, 'Poblacion'),
(6117, 245, 'Real de Cacarong'),
(6118, 245, 'San Roque'),
(6119, 245, 'Siling Bata'),
(6120, 245, 'Siling Matanda'),
(6121, 245, 'Baka-bakahan'),
(6122, 245, 'Santo Niño'),
(6123, 246, 'Binakod'),
(6124, 246, 'Kapitangan'),
(6125, 246, 'Malumot'),
(6126, 246, 'Masukol'),
(6127, 246, 'Pinalagdan'),
(6128, 246, 'Poblacion'),
(6129, 246, 'San Isidro I'),
(6130, 246, 'San Isidro II'),
(6131, 246, 'San Jose'),
(6132, 246, 'San Roque'),
(6133, 246, 'San Vicente'),
(6134, 246, 'Santa Cruz'),
(6135, 246, 'Santo Niño'),
(6136, 246, 'Santo Rosario'),
(6137, 247, 'Agnaya'),
(6138, 247, 'Bagong Silang'),
(6139, 247, 'Banga I'),
(6140, 247, 'Banga II'),
(6141, 247, 'Bintog'),
(6142, 247, 'Bulihan'),
(6143, 247, 'Culianin'),
(6144, 247, 'Dampol'),
(6145, 247, 'Lagundi'),
(6146, 247, 'Lalangan'),
(6147, 247, 'Lumang Bayan'),
(6148, 247, 'Parulan'),
(6149, 247, 'Poblacion'),
(6150, 247, 'Rueda'),
(6151, 247, 'San Jose'),
(6152, 247, 'Santa Ines'),
(6153, 247, 'Santo Niño'),
(6154, 247, 'Sipat'),
(6155, 247, 'Tabang'),
(6156, 248, 'Balatong A'),
(6157, 248, 'Balatong B'),
(6158, 248, 'Cutcot'),
(6159, 248, 'Dampol I'),
(6160, 248, 'Dampol II-A'),
(6161, 248, 'Dampol II-B'),
(6162, 248, 'Dulong Malabon'),
(6163, 248, 'Inaon'),
(6164, 248, 'Longos'),
(6165, 248, 'Lumbac'),
(6166, 248, 'Paltao'),
(6167, 248, 'Penabatan'),
(6168, 248, 'Poblacion'),
(6169, 248, 'Santa Peregrina'),
(6170, 248, 'Santo Cristo'),
(6171, 248, 'Taal'),
(6172, 248, 'Tabon'),
(6173, 248, 'Tibag'),
(6174, 248, 'Tinejero'),
(6175, 249, 'Akle'),
(6176, 249, 'Alagao'),
(6177, 249, 'Anyatam'),
(6178, 249, 'Bagong Barrio'),
(6179, 249, 'Basuit'),
(6180, 249, 'Bubulong Munti'),
(6181, 249, 'Bubulong Malaki'),
(6182, 249, 'Buhol na Mangga'),
(6183, 249, 'Bulusukan'),
(6184, 249, 'Calasag'),
(6185, 249, 'Calawitan'),
(6186, 249, 'Casalat'),
(6187, 249, 'Gabihan'),
(6188, 249, 'Garlang'),
(6189, 249, 'Lapnit'),
(6190, 249, 'Maasim'),
(6191, 249, 'Makapilapil'),
(6192, 249, 'Malipampang'),
(6193, 249, 'Matimbubong'),
(6194, 249, 'Nabaong Garlang'),
(6195, 249, 'Palapala'),
(6196, 249, 'Pasong Bangkal'),
(6197, 249, 'Pinaod'),
(6198, 249, 'Poblacion'),
(6199, 249, 'Pulong Tamo'),
(6200, 249, 'San Juan'),
(6201, 249, 'Santa Catalina Bata'),
(6202, 249, 'Santa Catalina Matanda'),
(6203, 249, 'Sapang Dayap'),
(6204, 249, 'Sapang Putik'),
(6205, 249, 'Sapang Putol'),
(6206, 249, 'Sumandig'),
(6207, 249, 'Telepatio'),
(6208, 249, 'Upig'),
(6209, 249, 'Umpucan'),
(6210, 249, 'Mataas na Parang'),
(6211, 250, 'Bagong Buhay'),
(6212, 250, 'Dulong Bayan'),
(6213, 250, 'Gaya-gaya'),
(6214, 250, 'Kaypian'),
(6215, 250, 'Kaybanban'),
(6216, 250, 'Minuyan'),
(6217, 250, 'Muzon'),
(6218, 250, 'Poblacion'),
(6219, 250, 'Santo Cristo'),
(6220, 250, 'Sapang Palay'),
(6221, 250, 'Tungkong Mangga'),
(6222, 250, 'Citrus'),
(6223, 250, 'San Martin'),
(6224, 250, 'Santa Cruz'),
(6225, 250, 'Fatima'),
(6226, 250, 'San Pedro'),
(6227, 250, 'San Rafael'),
(6228, 250, 'Santo Niño'),
(6229, 250, 'Assumption'),
(6230, 250, 'Bagong Buhay II');
INSERT INTO `table_barangay` (`barangay_id`, `municipality_id`, `barangay_name`) VALUES
(6231, 250, 'Bagong Buhay III'),
(6232, 250, 'Ciudad Real'),
(6233, 250, 'Fatima II'),
(6234, 250, 'Fatima III'),
(6235, 250, 'Fatima IV'),
(6236, 250, 'Fatima V'),
(6237, 250, 'Francisco Homes-Guijo'),
(6238, 250, 'Francisco Homes-Mulawin'),
(6239, 250, 'Francisco Homes-Narra'),
(6240, 250, 'Francisco Homes-Yakal'),
(6241, 250, 'Graceville'),
(6242, 250, 'Gumaoc Central'),
(6243, 250, 'Gumaoc East'),
(6244, 250, 'Gumaoc West'),
(6245, 250, 'Lawang Pari'),
(6246, 250, 'Maharlika'),
(6247, 250, 'Minuyan II'),
(6248, 250, 'Minuyan III'),
(6249, 250, 'Minuyan IV'),
(6250, 250, 'Minuyan V'),
(6251, 250, 'Minuyan Proper'),
(6252, 250, 'Paradise III'),
(6253, 250, 'Poblacion I'),
(6254, 250, 'San Isidro'),
(6255, 250, 'San Manuel'),
(6256, 250, 'San Martin II'),
(6257, 250, 'San Martin III'),
(6258, 250, 'San Martin IV'),
(6259, 250, 'San Rafael I'),
(6260, 250, 'San Rafael III'),
(6261, 250, 'San Rafael IV'),
(6262, 250, 'San Rafael V'),
(6263, 250, 'San Roque'),
(6264, 250, 'Santa Cruz II'),
(6265, 250, 'Santa Cruz III'),
(6266, 250, 'Santa Cruz IV'),
(6267, 250, 'Santa Cruz V'),
(6268, 250, 'Santo Niño II'),
(6269, 250, 'St. Martin de Porres'),
(6270, 251, 'Bagong Silang'),
(6271, 251, 'Balaong'),
(6272, 251, 'Balite'),
(6273, 251, 'Bantog'),
(6274, 251, 'Bardias'),
(6275, 251, 'Baritan'),
(6276, 251, 'Batasan Bata'),
(6277, 251, 'Batasan Matanda'),
(6278, 251, 'Biak-na-Bato'),
(6279, 251, 'Biclat'),
(6280, 251, 'Buga'),
(6281, 251, 'Buliran'),
(6282, 251, 'Bulualto'),
(6283, 251, 'Calumpang'),
(6284, 251, 'Cambio'),
(6285, 251, 'Camias'),
(6286, 251, 'Ilog-Bulo'),
(6287, 251, 'King Kabayo'),
(6288, 251, 'Labne'),
(6289, 251, 'Lambakin'),
(6290, 251, 'Magmarale'),
(6291, 251, 'Malibay'),
(6292, 251, 'Mandile'),
(6293, 251, 'Masalipit'),
(6294, 251, 'Pacalag'),
(6295, 251, 'Paliwasan'),
(6296, 251, 'Partida'),
(6297, 251, 'Pinambaran'),
(6298, 251, 'Poblacion'),
(6299, 251, 'Pulong Bayabas'),
(6300, 251, 'Sacdalan'),
(6301, 251, 'Salacot'),
(6302, 251, 'Salangan'),
(6303, 251, 'San Agustin'),
(6304, 251, 'San Jose'),
(6305, 251, 'San Juan'),
(6306, 251, 'San Vicente'),
(6307, 251, 'Santa Ines'),
(6308, 251, 'Santa Lucia'),
(6309, 251, 'Santa Rita Bata'),
(6310, 251, 'Santa Rita Matanda'),
(6311, 251, 'Sapang'),
(6312, 251, 'Sibul'),
(6313, 251, 'Tartaro'),
(6314, 251, 'Tibagan'),
(6315, 251, 'Bagong Pag-asa'),
(6316, 251, 'Pulong Duhat'),
(6317, 251, 'Maligaya'),
(6318, 251, 'Tigpalas'),
(6319, 252, 'BMA-Balagtas'),
(6320, 252, 'Banca-banca'),
(6321, 252, 'Caingin'),
(6322, 252, 'Coral na Bato'),
(6323, 252, 'Cruz na Daan'),
(6324, 252, 'Dagat-dagatan'),
(6325, 252, 'Diliman I'),
(6326, 252, 'Diliman II'),
(6327, 252, 'Capihan'),
(6328, 252, 'Libis'),
(6329, 252, 'Lico'),
(6330, 252, 'Maasim'),
(6331, 252, 'Mabalas-balas'),
(6332, 252, 'Maguinao'),
(6333, 252, 'Maronguillo'),
(6334, 252, 'Paco'),
(6335, 252, 'Pansumaloc'),
(6336, 252, 'Pantubig'),
(6337, 252, 'Pasong Bangkal'),
(6338, 252, 'Pasong Callos'),
(6339, 252, 'Pasong Intsik'),
(6340, 252, 'Pinacpinacan'),
(6341, 252, 'Poblacion'),
(6342, 252, 'Pulo'),
(6343, 252, 'Pulong Bayabas'),
(6344, 252, 'Salapungan'),
(6345, 252, 'Sampaloc'),
(6346, 252, 'San Agustin'),
(6347, 252, 'San Roque'),
(6348, 252, 'Talacsan'),
(6349, 252, 'Tambubong'),
(6350, 252, 'Tukod'),
(6351, 252, 'Ulingao'),
(6352, 252, 'Sapang Pahalang'),
(6353, 253, 'Bagbaguin'),
(6354, 253, 'Balasing'),
(6355, 253, 'Buenavista'),
(6356, 253, 'Bulac'),
(6357, 253, 'Camangyanan'),
(6358, 253, 'Catmon'),
(6359, 253, 'Cay Pombo'),
(6360, 253, 'Caysio'),
(6361, 253, 'Guyong'),
(6362, 253, 'Lalakhan'),
(6363, 253, 'Mag-asawang Sapa'),
(6364, 253, 'Mahabang Parang'),
(6365, 253, 'Manggahan'),
(6366, 253, 'Parada'),
(6367, 253, 'Poblacion'),
(6368, 253, 'Pulong Buhangin'),
(6369, 253, 'San Gabriel'),
(6370, 253, 'San Jose Patag'),
(6371, 253, 'San Vicente'),
(6372, 253, 'Santa Clara'),
(6373, 253, 'Santa Cruz'),
(6374, 253, 'Silangan'),
(6375, 253, 'Tabing Bakod'),
(6376, 253, 'Tumana'),
(6377, 254, 'Bayabas'),
(6378, 254, 'Kabayunan'),
(6379, 254, 'Camachin'),
(6380, 254, 'Camachile'),
(6381, 254, 'Kalawakan'),
(6382, 254, 'Pulong Sampalok'),
(6383, 254, 'Talbak'),
(6384, 254, 'Sapang Bulak'),
(6385, 255, 'Betes'),
(6386, 255, 'Bibiclat'),
(6387, 255, 'Bucot'),
(6388, 255, 'La Purisima'),
(6389, 255, 'Magsaysay'),
(6390, 255, 'Macabucod'),
(6391, 255, 'Pantoc'),
(6392, 255, 'Poblacion Centro'),
(6393, 255, 'Poblacion East I'),
(6394, 255, 'Poblacion East II'),
(6395, 255, 'Poblacion West III'),
(6396, 255, 'Poblacion West IV'),
(6397, 255, 'San Carlos'),
(6398, 255, 'San Emiliano'),
(6399, 255, 'San Eustacio'),
(6400, 255, 'San Felipe Bata'),
(6401, 255, 'San Felipe Matanda'),
(6402, 255, 'San Juan'),
(6403, 255, 'San Pablo Bata'),
(6404, 255, 'San Pablo Matanda'),
(6405, 255, 'Santa Monica'),
(6406, 255, 'Santiago'),
(6407, 255, 'Santo Rosario'),
(6408, 255, 'Santo Tomas'),
(6409, 255, 'Sunson'),
(6410, 255, 'Umangan'),
(6411, 256, 'Antipolo'),
(6412, 256, 'Ariendo'),
(6413, 256, 'Bantug'),
(6414, 256, 'Calaanan'),
(6415, 256, 'Commercial (Pob.)'),
(6416, 256, 'Cruz'),
(6417, 256, 'Digmala'),
(6418, 256, 'Curva'),
(6419, 256, 'Kaingin (Pob.)'),
(6420, 256, 'Labi'),
(6421, 256, 'Larcon'),
(6422, 256, 'Lusok'),
(6423, 256, 'Macabaclay'),
(6424, 256, 'Magtanggol (Pob.)'),
(6425, 256, 'Mantile (Pob.)'),
(6426, 256, 'Olivete'),
(6427, 256, 'Palo Maria (Pob.)'),
(6428, 256, 'Pesa'),
(6429, 256, 'Rizal (Pob.)'),
(6430, 256, 'Sampalucan (Pob.)'),
(6431, 256, 'San Roque (Pob.)'),
(6432, 256, 'Santor'),
(6433, 256, 'Sinipit (Pob.)'),
(6434, 256, 'Sisilang na Ligaya (Pob.)'),
(6435, 256, 'Social (Pob.)'),
(6436, 256, 'Tugatug'),
(6437, 256, 'Tulay na Bato (Pob.)'),
(6438, 256, 'Vega'),
(6439, 257, 'Aduas Centro'),
(6440, 257, 'Bagong Sikat'),
(6441, 257, 'Bagong Buhay'),
(6442, 257, 'Bakero'),
(6443, 257, 'Bakod Bayan'),
(6444, 257, 'Balite'),
(6445, 257, 'Bangad'),
(6446, 257, 'Bantug Bulalo'),
(6447, 257, 'Bantug Norte'),
(6448, 257, 'Barlis'),
(6449, 257, 'Barrera District (Pob.)'),
(6450, 257, 'Bernardo District (Pob.)'),
(6451, 257, 'Bitas'),
(6452, 257, 'Bonifacio District (Pob.)'),
(6453, 257, 'Buliran'),
(6454, 257, 'Caalibangbangan'),
(6455, 257, 'Cabu'),
(6456, 257, 'Campo Tinio'),
(6457, 257, 'Kapitan Pepe (Pob.)'),
(6458, 257, 'Cinco-Cinco'),
(6459, 257, 'City Supermarket (Pob.)'),
(6460, 257, 'Caudillo'),
(6461, 257, 'Communal'),
(6462, 257, 'Cruz Roja'),
(6463, 257, 'Daang Sarile'),
(6464, 257, 'Dalampang'),
(6465, 257, 'Dicarma (Pob.)'),
(6466, 257, 'Dimasalang (Pob.)'),
(6467, 257, 'Dionisio S. Garcia'),
(6468, 257, 'Fatima (Pob.)'),
(6469, 257, 'General Luna (Pob.)'),
(6470, 257, 'Ibabao Bana'),
(6471, 257, 'Imelda District'),
(6472, 257, 'Isla (Pob.)'),
(6473, 257, 'Calawagan'),
(6474, 257, 'Kalikid Norte'),
(6475, 257, 'Kalikid Sur'),
(6476, 257, 'Lagare'),
(6477, 257, 'M. S. Garcia'),
(6478, 257, 'Mabini Extension'),
(6479, 257, 'Mabini Homesite'),
(6480, 257, 'Macatbong'),
(6481, 257, 'Magsaysay District'),
(6482, 257, 'Matadero (Pob.)'),
(6483, 257, 'Lourdes'),
(6484, 257, 'Mayapyap Norte'),
(6485, 257, 'Mayapyap Sur'),
(6486, 257, 'Melojavilla (Pob.)'),
(6487, 257, 'Obrero'),
(6488, 257, 'Padre Crisostomo'),
(6489, 257, 'Pagas'),
(6490, 257, 'Palagay'),
(6491, 257, 'Pamaldan'),
(6492, 257, 'Pangatian'),
(6493, 257, 'Patalac'),
(6494, 257, 'Polilio'),
(6495, 257, 'Pula'),
(6496, 257, 'Quezon District (Pob.)'),
(6497, 257, 'Rizdelis (Pob.)'),
(6498, 257, 'Samon'),
(6499, 257, 'San Isidro'),
(6500, 257, 'San Josef Norte'),
(6501, 257, 'San Josef Sur'),
(6502, 257, 'San Juan Pob.'),
(6503, 257, 'San Roque Norte'),
(6504, 257, 'San Roque Sur'),
(6505, 257, 'Sanbermicristi (Pob.)'),
(6506, 257, 'Sangitan'),
(6507, 257, 'Santa Arcadia'),
(6508, 257, 'Sumacab Norte'),
(6509, 257, 'Valdefuente'),
(6510, 257, 'Valle Cruz'),
(6511, 257, 'Vijandre District (Pob.)'),
(6512, 257, 'Villa Ofelia-Caridad'),
(6513, 257, 'Zulueta District (Pob.)'),
(6514, 257, 'Nabao (Pob.)'),
(6515, 257, 'Padre Burgos (Pob.)'),
(6516, 257, 'Talipapa'),
(6517, 257, 'Aduas Norte'),
(6518, 257, 'Aduas Sur'),
(6519, 257, 'Hermogenes C. Concepcion, Sr.'),
(6520, 257, 'Sapang'),
(6521, 257, 'Sumacab Este'),
(6522, 257, 'Sumacab South'),
(6523, 257, 'Caridad'),
(6524, 257, 'Magsaysay South'),
(6525, 257, 'Maria Theresa'),
(6526, 257, 'Sangitan East'),
(6527, 257, 'Santo Niño'),
(6528, 258, 'Bagong Buhay'),
(6529, 258, 'Bagong Sikat'),
(6530, 258, 'Bagong Silang'),
(6531, 258, 'Concepcion'),
(6532, 258, 'Entablado'),
(6533, 258, 'Maligaya'),
(6534, 258, 'Natividad North (Pob.)'),
(6535, 258, 'Natividad South (Pob.)'),
(6536, 258, 'Palasinan'),
(6537, 258, 'San Antonio'),
(6538, 258, 'San Fernando Norte'),
(6539, 258, 'San Fernando Sur'),
(6540, 258, 'San Gregorio'),
(6541, 258, 'San Juan North (Pob.)'),
(6542, 258, 'San Juan South (Pob.)'),
(6543, 258, 'San Roque'),
(6544, 258, 'San Vicente'),
(6545, 258, 'Santa Rita'),
(6546, 258, 'Sinipit'),
(6547, 258, 'Polilio'),
(6548, 258, 'San Carlos'),
(6549, 258, 'Santa Isabel'),
(6550, 258, 'Santa Ines'),
(6551, 259, 'R.A.Padilla'),
(6552, 259, 'Bantug'),
(6553, 259, 'Bunga'),
(6554, 259, 'Burgos'),
(6555, 259, 'Capintalan'),
(6556, 259, 'Joson'),
(6557, 259, 'General Luna'),
(6558, 259, 'Minuli'),
(6559, 259, 'Piut'),
(6560, 259, 'Puncan'),
(6561, 259, 'Putlan'),
(6562, 259, 'Salazar'),
(6563, 259, 'San Agustin'),
(6564, 259, 'T. L. Padilla Pob.'),
(6565, 259, 'F. C. Otic Pob.'),
(6566, 259, 'D. L. Maglanoc Pob.'),
(6567, 259, 'G. S. Rosario Pob.'),
(6568, 260, 'Baloy'),
(6569, 260, 'Bambanaba'),
(6570, 260, 'Bantug'),
(6571, 260, 'Bentigan'),
(6572, 260, 'Bibiclat'),
(6573, 260, 'Bonifacio'),
(6574, 260, 'Bued'),
(6575, 260, 'Bulala'),
(6576, 260, 'Burgos'),
(6577, 260, 'Cabileo'),
(6578, 260, 'Cabatuan'),
(6579, 260, 'Cacapasan'),
(6580, 260, 'Calancuasan Norte'),
(6581, 260, 'Calancuasan Sur'),
(6582, 260, 'Colosboa'),
(6583, 260, 'Columbitin'),
(6584, 260, 'Curva'),
(6585, 260, 'District I'),
(6586, 260, 'District II'),
(6587, 260, 'District IV'),
(6588, 260, 'District V'),
(6589, 260, 'District VI'),
(6590, 260, 'District VII'),
(6591, 260, 'District VIII'),
(6592, 260, 'Landig'),
(6593, 260, 'Latap'),
(6594, 260, 'Loob'),
(6595, 260, 'Luna'),
(6596, 260, 'Malbeg-Patalan'),
(6597, 260, 'Malineng'),
(6598, 260, 'Matindeg'),
(6599, 260, 'Maycaban'),
(6600, 260, 'Nacuralan'),
(6601, 260, 'Nagmisahan'),
(6602, 260, 'Paitan Norte'),
(6603, 260, 'Paitan Sur'),
(6604, 260, 'Piglisan'),
(6605, 260, 'Pugo'),
(6606, 260, 'Rizal'),
(6607, 260, 'Sabit'),
(6608, 260, 'Salagusog'),
(6609, 260, 'San Antonio'),
(6610, 260, 'San Jose'),
(6611, 260, 'San Juan'),
(6612, 260, 'Santa Clara'),
(6613, 260, 'Santa Cruz'),
(6614, 260, 'Sinimbaan'),
(6615, 260, 'Tagtagumbao'),
(6616, 260, 'Tutuloy'),
(6617, 260, 'Ungab'),
(6618, 260, 'Villaflores'),
(6619, 261, 'Bagong Sikat'),
(6620, 261, 'Bagting'),
(6621, 261, 'Bantug'),
(6622, 261, 'Bitulok'),
(6623, 261, 'Bugnan'),
(6624, 261, 'Calabasa'),
(6625, 261, 'Camachile'),
(6626, 261, 'Cuyapa'),
(6627, 261, 'Ligaya'),
(6628, 261, 'Macasandal'),
(6629, 261, 'Malinao'),
(6630, 261, 'Pantoc'),
(6631, 261, 'Pinamalisan'),
(6632, 261, 'South Poblacion'),
(6633, 261, 'Sawmill'),
(6634, 261, 'Tagumpay'),
(6635, 262, 'Bayanihan'),
(6636, 262, 'Bulak'),
(6637, 262, 'Kapalangan'),
(6638, 262, 'Mahipon'),
(6639, 262, 'Malimba'),
(6640, 262, 'Mangino'),
(6641, 262, 'Marelo'),
(6642, 262, 'Pambuan'),
(6643, 262, 'Parcutela'),
(6644, 262, 'San Lorenzo (Pob.)'),
(6645, 262, 'San Nicolas'),
(6646, 262, 'San Roque'),
(6647, 262, 'San Vicente (Pob.)'),
(6648, 262, 'Santa Cruz'),
(6649, 262, 'Santo Cristo Norte'),
(6650, 262, 'Santo Cristo Sur'),
(6651, 262, 'Santo Niño'),
(6652, 262, 'Makabaclay'),
(6653, 262, 'Balante'),
(6654, 262, 'Bungo'),
(6655, 262, 'Mabunga'),
(6656, 262, 'Maburak'),
(6657, 262, 'Puting Tubig'),
(6658, 263, 'Balangkare Norte'),
(6659, 263, 'Balangkare Sur'),
(6660, 263, 'Balaring'),
(6661, 263, 'Belen'),
(6662, 263, 'Bravo'),
(6663, 263, 'Burol'),
(6664, 263, 'Kabulihan'),
(6665, 263, 'Mag-asawang Sampaloc'),
(6666, 263, 'Manarog'),
(6667, 263, 'Mataas na Kahoy'),
(6668, 263, 'Panacsac'),
(6669, 263, 'Picaleon'),
(6670, 263, 'Pinahan'),
(6671, 263, 'Platero'),
(6672, 263, 'Poblacion'),
(6673, 263, 'Pula'),
(6674, 263, 'Pulong Singkamas'),
(6675, 263, 'Sapang Bato'),
(6676, 263, 'Talabutab Norte'),
(6677, 263, 'Talabutab Sur'),
(6678, 264, 'Bago'),
(6679, 264, 'Concepcion'),
(6680, 264, 'Nazareth'),
(6681, 264, 'Padolina'),
(6682, 264, 'Pias'),
(6683, 264, 'San Pedro (Pob.)'),
(6684, 264, 'Poblacion East'),
(6685, 264, 'Poblacion West'),
(6686, 264, 'Rio Chico'),
(6687, 264, 'Poblacion Central'),
(6688, 264, 'Pulong Matong'),
(6689, 264, 'Sampaguita'),
(6690, 264, 'Palale'),
(6691, 265, 'Agcano'),
(6692, 265, 'Ayos Lomboy'),
(6693, 265, 'Bacayao'),
(6694, 265, 'Bagong Barrio'),
(6695, 265, 'Balbalino'),
(6696, 265, 'Balingog East'),
(6697, 265, 'Balingog West'),
(6698, 265, 'Banitan'),
(6699, 265, 'Bantug'),
(6700, 265, 'Bulakid'),
(6701, 265, 'Caballero'),
(6702, 265, 'Cabaruan'),
(6703, 265, 'Caingin Tabing Ilog'),
(6704, 265, 'Calem'),
(6705, 265, 'Camiling'),
(6706, 265, 'Cardinal'),
(6707, 265, 'Casongsong'),
(6708, 265, 'Catimon'),
(6709, 265, 'Cavite'),
(6710, 265, 'Cawayan Bugtong'),
(6711, 265, 'Consuelo'),
(6712, 265, 'Culong'),
(6713, 265, 'Escano'),
(6714, 265, 'Faigal'),
(6715, 265, 'Galvan'),
(6716, 265, 'Guiset'),
(6717, 265, 'Lamorito'),
(6718, 265, 'Lennec'),
(6719, 265, 'Macamias'),
(6720, 265, 'Macapabellag'),
(6721, 265, 'Macatcatuit'),
(6722, 265, 'Manacsac'),
(6723, 265, 'Manggang Marikit'),
(6724, 265, 'Maturanoc'),
(6725, 265, 'Maybubon'),
(6726, 265, 'Naglabrahan'),
(6727, 265, 'Nagpandayan'),
(6728, 265, 'Narvacan I'),
(6729, 265, 'Narvacan II'),
(6730, 265, 'Pacac'),
(6731, 265, 'Partida I'),
(6732, 265, 'Partida II'),
(6733, 265, 'Pasong Inchic'),
(6734, 265, 'Saint John District (Pob.)'),
(6735, 265, 'San Agustin'),
(6736, 265, 'San Andres'),
(6737, 265, 'San Bernardino'),
(6738, 265, 'San Marcelino'),
(6739, 265, 'San Miguel'),
(6740, 265, 'San Rafael'),
(6741, 265, 'San Roque'),
(6742, 265, 'Santa Ana'),
(6743, 265, 'Santa Cruz'),
(6744, 265, 'Santa Lucia'),
(6745, 265, 'Santa Veronica District (Pob.)'),
(6746, 265, 'Santo Cristo District (Pob.)'),
(6747, 265, 'Saranay District (Pob.)'),
(6748, 265, 'Sinulatan'),
(6749, 265, 'Subol'),
(6750, 265, 'Tampac I'),
(6751, 265, 'Tampac II & III'),
(6752, 265, 'Triala'),
(6753, 265, 'Yuson'),
(6754, 265, 'Bunol'),
(6755, 266, 'Calabasa'),
(6756, 266, 'Dampulan (Pob.)'),
(6757, 266, 'Hilera'),
(6758, 266, 'Imbunia'),
(6759, 266, 'Imelda Pob.'),
(6760, 266, 'Lambakin'),
(6761, 266, 'Langla'),
(6762, 266, 'Magsalisi'),
(6763, 266, 'Malabon-Kaingin'),
(6764, 266, 'Marawa'),
(6765, 266, 'Don Mariano Marcos (Pob.)'),
(6766, 266, 'San Josef'),
(6767, 266, 'Niyugan'),
(6768, 266, 'Pamacpacan'),
(6769, 266, 'Pakol'),
(6770, 266, 'Pinanggaan'),
(6771, 266, 'Ulanin-Pitak'),
(6772, 266, 'Putlod'),
(6773, 266, 'Ocampo-Rivera District (Pob.)'),
(6774, 266, 'San Jose'),
(6775, 266, 'San Pablo'),
(6776, 266, 'San Roque'),
(6777, 266, 'San Vicente'),
(6778, 266, 'Santa Rita'),
(6779, 266, 'Santo Tomas North'),
(6780, 266, 'Santo Tomas South'),
(6781, 266, 'Sapang'),
(6782, 267, 'Barangay I (Pob.)'),
(6783, 267, 'Barangay II (Pob.)'),
(6784, 267, 'Barangay III (Pob.)'),
(6785, 267, 'Barangay IV (Pob.)'),
(6786, 267, 'Betania'),
(6787, 267, 'Canantong'),
(6788, 267, 'Nauzon'),
(6789, 267, 'Pangarulong'),
(6790, 267, 'Pinagbayanan'),
(6791, 267, 'Sagana'),
(6792, 267, 'San Fernando'),
(6793, 267, 'San Isidro'),
(6794, 267, 'San Josef'),
(6795, 267, 'San Juan'),
(6796, 267, 'San Vicente'),
(6797, 267, 'Siclong'),
(6798, 267, 'San Felipe'),
(6799, 268, 'Linao'),
(6800, 268, 'Poblacion Norte'),
(6801, 268, 'Poblacion Sur'),
(6802, 268, 'San Casimiro'),
(6803, 268, 'San Cristobal'),
(6804, 268, 'San Jose'),
(6805, 268, 'San Juan'),
(6806, 268, 'Santa Maria'),
(6807, 268, 'Tabing Ilog'),
(6808, 268, 'Villarosa'),
(6809, 268, 'Aquino'),
(6810, 269, 'A. Bonifacio'),
(6811, 269, 'Caridad Norte'),
(6812, 269, 'Caridad Sur'),
(6813, 269, 'Casile'),
(6814, 269, 'Florida Blanca'),
(6815, 269, 'General Luna'),
(6816, 269, 'General Ricarte'),
(6817, 269, 'Gomez'),
(6818, 269, 'Inanama'),
(6819, 269, 'Ligaya'),
(6820, 269, 'Mabini'),
(6821, 269, 'Murcon'),
(6822, 269, 'Plaridel'),
(6823, 269, 'Bagumbayan (Pob.)'),
(6824, 269, 'San Felipe'),
(6825, 269, 'San Francisco'),
(6826, 269, 'San Nicolas'),
(6827, 269, 'San Vicente'),
(6828, 269, 'Santa Barbara'),
(6829, 269, 'Victoria'),
(6830, 269, 'Villa Viniegas'),
(6831, 269, 'Bosque'),
(6832, 270, 'Agupalo Este'),
(6833, 270, 'Agupalo Weste'),
(6834, 270, 'Alalay Chica'),
(6835, 270, 'Alalay Grande'),
(6836, 270, 'J. U. Tienzo'),
(6837, 270, 'Bagong Flores'),
(6838, 270, 'Balbalungao'),
(6839, 270, 'Burgos'),
(6840, 270, 'Cordero'),
(6841, 270, 'Mapangpang'),
(6842, 270, 'Namulandayan'),
(6843, 270, 'Parista'),
(6844, 270, 'Poblacion East'),
(6845, 270, 'Poblacion North'),
(6846, 270, 'Poblacion South'),
(6847, 270, 'Poblacion West'),
(6848, 270, 'Salvacion I'),
(6849, 270, 'Salvacion II'),
(6850, 270, 'San Antonio Este'),
(6851, 270, 'San Antonio Weste'),
(6852, 270, 'San Isidro'),
(6853, 270, 'San Pedro'),
(6854, 270, 'San Roque'),
(6855, 270, 'Santo Domingo'),
(6856, 271, 'Bagong Sikat'),
(6857, 271, 'Balante'),
(6858, 271, 'Bantug'),
(6859, 271, 'Bical'),
(6860, 271, 'Cabisuculan'),
(6861, 271, 'Calabalabaan'),
(6862, 271, 'Calisitan'),
(6863, 271, 'Catalanacan'),
(6864, 271, 'Curva'),
(6865, 271, 'Franza'),
(6866, 271, 'Gabaldon'),
(6867, 271, 'Labney'),
(6868, 271, 'Licaong'),
(6869, 271, 'Linglingay'),
(6870, 271, 'Mangandingay'),
(6871, 271, 'Magtanggol'),
(6872, 271, 'Maligaya'),
(6873, 271, 'Mapangpang'),
(6874, 271, 'Maragol'),
(6875, 271, 'Matingkis'),
(6876, 271, 'Naglabrahan'),
(6877, 271, 'Palusapis'),
(6878, 271, 'Pandalla'),
(6879, 271, 'Poblacion East'),
(6880, 271, 'Poblacion North'),
(6881, 271, 'Poblacion South'),
(6882, 271, 'Poblacion West'),
(6883, 271, 'Rang-ayan'),
(6884, 271, 'Rizal'),
(6885, 271, 'San Andres'),
(6886, 271, 'San Antonio'),
(6887, 271, 'San Felipe'),
(6888, 271, 'Sapang Cawayan'),
(6889, 271, 'Villa Isla'),
(6890, 271, 'Villa Nati'),
(6891, 271, 'Villa Santos'),
(6892, 271, 'Villa Cuizon'),
(6893, 272, 'Alemania'),
(6894, 272, 'Ambasador Alzate Village'),
(6895, 272, 'Cabaducan East (Pob.)'),
(6896, 272, 'Cabaducan West (Pob.)'),
(6897, 272, 'Cabawangan'),
(6898, 272, 'East Central Poblacion'),
(6899, 272, 'Edy'),
(6900, 272, 'Maeling'),
(6901, 272, 'Mayantoc'),
(6902, 272, 'Medico'),
(6903, 272, 'Monic'),
(6904, 272, 'North Poblacion'),
(6905, 272, 'Northwest Poblacion'),
(6906, 272, 'Estacion (Pob.)'),
(6907, 272, 'West Poblacion'),
(6908, 272, 'Recuerdo'),
(6909, 272, 'South Central Poblacion'),
(6910, 272, 'Southeast Poblacion'),
(6911, 272, 'Southwest Poblacion'),
(6912, 272, 'Tony'),
(6913, 272, 'West Central Poblacion'),
(6914, 273, 'Aulo'),
(6915, 273, 'Bo. Militar'),
(6916, 273, 'Ganaderia'),
(6917, 273, 'Maligaya'),
(6918, 273, 'Manacnac'),
(6919, 273, 'Mapait'),
(6920, 273, 'Marcos Village'),
(6921, 273, 'Malate (Pob.)'),
(6922, 273, 'Sapang Buho'),
(6923, 273, 'Singalat'),
(6924, 273, 'Atate'),
(6925, 273, 'Caballero'),
(6926, 273, 'Caimito'),
(6927, 273, 'Doña Josefa'),
(6928, 273, 'Imelda Valley'),
(6929, 273, 'Langka'),
(6930, 273, 'Santolan'),
(6931, 273, 'Popolon Pagas'),
(6932, 273, 'Bagong Buhay'),
(6933, 274, 'Cadaclan'),
(6934, 274, 'Cambitala'),
(6935, 274, 'Conversion'),
(6936, 274, 'Ganduz'),
(6937, 274, 'Liberty'),
(6938, 274, 'Malbang'),
(6939, 274, 'Marikit'),
(6940, 274, 'Napon-Napon'),
(6941, 274, 'Poblacion East'),
(6942, 274, 'Poblacion West'),
(6943, 274, 'Sampaloc'),
(6944, 274, 'San Juan'),
(6945, 274, 'Villarica'),
(6946, 274, 'Fatima'),
(6947, 275, 'Callos'),
(6948, 275, 'Las Piñas'),
(6949, 275, 'Poblacion I'),
(6950, 275, 'Poblacion II'),
(6951, 275, 'Poblacion III'),
(6952, 275, 'Poblacion IV'),
(6953, 275, 'Santo Tomas'),
(6954, 275, 'Sinasajan'),
(6955, 275, 'San Josef'),
(6956, 275, 'San Mariano'),
(6957, 276, 'Bertese'),
(6958, 276, 'Doña Lucia'),
(6959, 276, 'Dulong Bayan'),
(6960, 276, 'Ilog Baliwag'),
(6961, 276, 'Barangay I (Pob.)'),
(6962, 276, 'Barangay II (Pob.)'),
(6963, 276, 'Pulong Bahay'),
(6964, 276, 'San Alejandro'),
(6965, 276, 'San Andres I'),
(6966, 276, 'San Andres II'),
(6967, 276, 'San Manuel'),
(6968, 276, 'Santa Clara'),
(6969, 276, 'Santa Rita'),
(6970, 276, 'Santo Cristo'),
(6971, 276, 'Santo Tomas Feria'),
(6972, 276, 'San Miguel'),
(6973, 277, 'Agbannawag'),
(6974, 277, 'Bicos'),
(6975, 277, 'Cabucbucan'),
(6976, 277, 'Calaocan District'),
(6977, 277, 'Canaan East'),
(6978, 277, 'Canaan West'),
(6979, 277, 'Casilagan'),
(6980, 277, 'Aglipay'),
(6981, 277, 'Del Pilar'),
(6982, 277, 'Estrella'),
(6983, 277, 'General Luna'),
(6984, 277, 'Macapsing'),
(6985, 277, 'Maligaya'),
(6986, 277, 'Paco Roman'),
(6987, 277, 'Pag-asa'),
(6988, 277, 'Poblacion Central'),
(6989, 277, 'Poblacion East'),
(6990, 277, 'Poblacion Norte'),
(6991, 277, 'Poblacion Sur'),
(6992, 277, 'Poblacion West'),
(6993, 277, 'Portal'),
(6994, 277, 'San Esteban'),
(6995, 277, 'Santa Monica'),
(6996, 277, 'Villa Labrador'),
(6997, 277, 'Villa Paraiso'),
(6998, 277, 'San Gregorio'),
(6999, 278, 'Buliran'),
(7000, 278, 'Cama Juan'),
(7001, 278, 'Julo'),
(7002, 278, 'Lawang Kupang'),
(7003, 278, 'Luyos'),
(7004, 278, 'Maugat'),
(7005, 278, 'Panabingan'),
(7006, 278, 'Papaya'),
(7007, 278, 'Poblacion'),
(7008, 278, 'San Francisco'),
(7009, 278, 'San Jose'),
(7010, 278, 'San Mariano'),
(7011, 278, 'Santa Cruz'),
(7012, 278, 'Santo Cristo'),
(7013, 278, 'Santa Barbara'),
(7014, 278, 'Tikiw'),
(7015, 279, 'Alua'),
(7016, 279, 'Calaba'),
(7017, 279, 'Malapit'),
(7018, 279, 'Mangga'),
(7019, 279, 'Poblacion'),
(7020, 279, 'Pulo'),
(7021, 279, 'San Roque'),
(7022, 279, 'Santo Cristo'),
(7023, 279, 'Tabon'),
(7024, 280, 'A. Pascual'),
(7025, 280, 'Abar Ist'),
(7026, 280, 'Abar 2nd'),
(7027, 280, 'Bagong Sikat'),
(7028, 280, 'Caanawan'),
(7029, 280, 'Calaocan'),
(7030, 280, 'Camanacsacan'),
(7031, 280, 'Culaylay'),
(7032, 280, 'Dizol'),
(7033, 280, 'Kaliwanagan'),
(7034, 280, 'Kita-Kita'),
(7035, 280, 'Malasin'),
(7036, 280, 'Manicla'),
(7037, 280, 'Palestina'),
(7038, 280, 'Parang Mangga'),
(7039, 280, 'Villa Joson'),
(7040, 280, 'Pinili'),
(7041, 280, 'Rafael Rueda, Sr. Pob.'),
(7042, 280, 'Ferdinand E. Marcos Pob.'),
(7043, 280, 'Canuto Ramos Pob.'),
(7044, 280, 'Raymundo Eugenio Pob.'),
(7045, 280, 'Crisanto Sanchez Pob.'),
(7046, 280, 'Porais'),
(7047, 280, 'San Agustin'),
(7048, 280, 'San Juan'),
(7049, 280, 'San Mauricio'),
(7050, 280, 'Santo Niño 1st'),
(7051, 280, 'Santo Niño 2nd'),
(7052, 280, 'Santo Tomas'),
(7053, 280, 'Sibut'),
(7054, 280, 'Sinipit Bubon'),
(7055, 280, 'Santo Niño 3rd'),
(7056, 280, 'Tabulac'),
(7057, 280, 'Tayabo'),
(7058, 280, 'Tondod'),
(7059, 280, 'Tulat'),
(7060, 280, 'Villa Floresca'),
(7061, 280, 'Villa Marina'),
(7062, 281, 'Bonifacio District (Pob.)'),
(7063, 281, 'Burgos District (Pob.)'),
(7064, 281, 'Castellano'),
(7065, 281, 'Diversion'),
(7066, 281, 'Magpapalayoc'),
(7067, 281, 'Mallorca'),
(7068, 281, 'Mambangnan'),
(7069, 281, 'Nieves'),
(7070, 281, 'San Bartolome (Pob.)'),
(7071, 281, 'Rizal District (Pob.)'),
(7072, 281, 'San Anton'),
(7073, 281, 'San Roque'),
(7074, 281, 'Tabuating'),
(7075, 281, 'Tagumpay'),
(7076, 281, 'Tambo Adorable'),
(7077, 282, 'Cojuangco (Pob.)'),
(7078, 282, 'La Fuente'),
(7079, 282, 'Liwayway'),
(7080, 282, 'Malacañang'),
(7081, 282, 'Maliolio'),
(7082, 282, 'Mapalad'),
(7083, 282, 'Rizal (Pob.)'),
(7084, 282, 'Rajal Centro'),
(7085, 282, 'Rajal Norte'),
(7086, 282, 'Rajal Sur'),
(7087, 282, 'San Gregorio'),
(7088, 282, 'San Mariano'),
(7089, 282, 'San Pedro'),
(7090, 282, 'Santo Rosario'),
(7091, 282, 'Soledad'),
(7092, 282, 'Valenzuela (Pob.)'),
(7093, 282, 'Zamora (Pob.)'),
(7094, 282, 'Aguinaldo'),
(7095, 282, 'Berang'),
(7096, 282, 'Burgos'),
(7097, 282, 'Del Pilar'),
(7098, 282, 'Gomez'),
(7099, 282, 'Inspector'),
(7100, 282, 'Isla'),
(7101, 282, 'Lourdes'),
(7102, 282, 'Luna'),
(7103, 282, 'Mabini'),
(7104, 282, 'San Isidro'),
(7105, 282, 'San Josep'),
(7106, 282, 'Santa Teresita'),
(7107, 282, 'Sapsap'),
(7108, 282, 'Tagpos'),
(7109, 282, 'Tramo'),
(7110, 283, 'Baloc'),
(7111, 283, 'Buasao'),
(7112, 283, 'Burgos'),
(7113, 283, 'Cabugao'),
(7114, 283, 'Casulucan'),
(7115, 283, 'Comitang'),
(7116, 283, 'Concepcion'),
(7117, 283, 'Dolores'),
(7118, 283, 'General Luna'),
(7119, 283, 'Hulo'),
(7120, 283, 'Mabini'),
(7121, 283, 'Malasin'),
(7122, 283, 'Malayantoc'),
(7123, 283, 'Mambarao'),
(7124, 283, 'Poblacion'),
(7125, 283, 'Malaya'),
(7126, 283, 'Pulong Buli'),
(7127, 283, 'Sagaba'),
(7128, 283, 'San Agustin'),
(7129, 283, 'San Fabian'),
(7130, 283, 'San Francisco'),
(7131, 283, 'San Pascual'),
(7132, 283, 'Santa Rita'),
(7133, 283, 'Santo Rosario'),
(7134, 284, 'Andal Alino (Pob.)'),
(7135, 284, 'Bagong Sikat'),
(7136, 284, 'Bagong Silang'),
(7137, 284, 'Bakal I'),
(7138, 284, 'Bakal II'),
(7139, 284, 'Bakal III'),
(7140, 284, 'Baluga'),
(7141, 284, 'Bantug'),
(7142, 284, 'Bantug Hacienda'),
(7143, 284, 'Bantug Hamog'),
(7144, 284, 'Bugtong na Buli'),
(7145, 284, 'Bulac'),
(7146, 284, 'Burnay'),
(7147, 284, 'Calipahan'),
(7148, 284, 'Campos'),
(7149, 284, 'Casulucan Este'),
(7150, 284, 'Collado'),
(7151, 284, 'Dimasalang Norte'),
(7152, 284, 'Dimasalang Sur'),
(7153, 284, 'Dinarayat'),
(7154, 284, 'Esguerra District (Pob.)'),
(7155, 284, 'Gulod'),
(7156, 284, 'Homestead I'),
(7157, 284, 'Homestead II'),
(7158, 284, 'Cabubulaonan'),
(7159, 284, 'Caaniplahan'),
(7160, 284, 'Caputican'),
(7161, 284, 'Kinalanguyan'),
(7162, 284, 'La Torre'),
(7163, 284, 'Lomboy'),
(7164, 284, 'Mabuhay'),
(7165, 284, 'Maestrang Kikay (Pob.)'),
(7166, 284, 'Mamandil'),
(7167, 284, 'Marcos District (Pob.)'),
(7168, 284, 'Purok Matias (Pob.)'),
(7169, 284, 'Matingkis'),
(7170, 284, 'Minabuyoc'),
(7171, 284, 'Pag-asa (Pob.)'),
(7172, 284, 'Paludpod'),
(7173, 284, 'Pantoc Bulac'),
(7174, 284, 'Pinagpanaan'),
(7175, 284, 'Poblacion Sur'),
(7176, 284, 'Pula'),
(7177, 284, 'Pulong San Miguel (Pob.)'),
(7178, 284, 'Sampaloc'),
(7179, 284, 'San Miguel na Munti'),
(7180, 284, 'San Pascual'),
(7181, 284, 'San Ricardo'),
(7182, 284, 'Sibul'),
(7183, 284, 'Sicsican Matanda'),
(7184, 284, 'Tabacao'),
(7185, 284, 'Tagaytay'),
(7186, 284, 'Valle'),
(7187, 285, 'Alula'),
(7188, 285, 'Baybayabas'),
(7189, 285, 'Buted'),
(7190, 285, 'Cabiangan'),
(7191, 285, 'Calisitan'),
(7192, 285, 'Cinense'),
(7193, 285, 'Culiat'),
(7194, 285, 'Maasin'),
(7195, 285, 'Magsaysay (Pob.)'),
(7196, 285, 'Mayamot I'),
(7197, 285, 'Mayamot II'),
(7198, 285, 'Nangabulan'),
(7199, 285, 'Osmeña (Pob.)'),
(7200, 285, 'Pangit'),
(7201, 285, 'Patola'),
(7202, 285, 'Quezon (Pob.)'),
(7203, 285, 'Quirino (Pob.)'),
(7204, 285, 'Roxas (Pob.)'),
(7205, 285, 'Saguing'),
(7206, 285, 'Sampaloc'),
(7207, 285, 'Santa Catalina'),
(7208, 285, 'Santo Domingo'),
(7209, 285, 'Saringaya'),
(7210, 285, 'Saverona'),
(7211, 285, 'Tandoc'),
(7212, 285, 'Tibag'),
(7213, 285, 'Villa Rosario'),
(7214, 285, 'Villa Boado'),
(7215, 286, 'Batitang'),
(7216, 286, 'Carmen'),
(7217, 286, 'Concepcion'),
(7218, 286, 'Del Pilar'),
(7219, 286, 'General Luna'),
(7220, 286, 'H. Romero'),
(7221, 286, 'Macarse'),
(7222, 286, 'Manaul'),
(7223, 286, 'Mayamot'),
(7224, 286, 'Pantoc'),
(7225, 286, 'San Vicente (Pob.)'),
(7226, 286, 'San Isidro'),
(7227, 286, 'San Rafael'),
(7228, 286, 'Santa Cruz'),
(7229, 286, 'Santa Lucia Old'),
(7230, 286, 'Santa Lucia Young'),
(7231, 286, 'Santo Rosario Old'),
(7232, 286, 'Santo Rosario Young'),
(7233, 286, 'Valeriana'),
(7234, 287, 'Agapito del Rosario'),
(7235, 287, 'Anunas'),
(7236, 287, 'Balibago'),
(7237, 287, 'Capaya'),
(7238, 287, 'Claro M. Recto'),
(7239, 287, 'Cuayan'),
(7240, 287, 'Cutcut'),
(7241, 287, 'Cutud'),
(7242, 287, 'Lourdes North West'),
(7243, 287, 'Lourdes Sur'),
(7244, 287, 'Lourdes Sur East'),
(7245, 287, 'Malabanias'),
(7246, 287, 'Margot'),
(7247, 287, 'Mining'),
(7248, 287, 'Pampang'),
(7249, 287, 'Pandan'),
(7250, 287, 'Pulung Maragul'),
(7251, 287, 'Pulungbulu'),
(7252, 287, 'Pulung Cacutud'),
(7253, 287, 'Salapungan'),
(7254, 287, 'San Jose'),
(7255, 287, 'San Nicolas'),
(7256, 287, 'Santa Teresita'),
(7257, 287, 'Santa Trinidad'),
(7258, 287, 'Santo Cristo'),
(7259, 287, 'Santo Domingo'),
(7260, 287, 'Santo Rosario (Pob.)'),
(7261, 287, 'Sapalibutad'),
(7262, 287, 'Sapangbato'),
(7263, 287, 'Tabun'),
(7264, 287, 'Virgen Delos Remedios'),
(7265, 287, 'Amsic'),
(7266, 287, 'Ninoy Aquino'),
(7267, 288, 'Balucuc'),
(7268, 288, 'Calantipe'),
(7269, 288, 'Cansinala'),
(7270, 288, 'Capalangan'),
(7271, 288, 'Colgante'),
(7272, 288, 'Paligui'),
(7273, 288, 'Sampaloc'),
(7274, 288, 'San Juan (Pob.)'),
(7275, 288, 'San Vicente'),
(7276, 288, 'Sucad'),
(7277, 288, 'Sulipan'),
(7278, 288, 'Tabuyuc'),
(7279, 289, 'Arenas'),
(7280, 289, 'Baliti'),
(7281, 289, 'Batasan'),
(7282, 289, 'Buensuceso'),
(7283, 289, 'Candating'),
(7284, 289, 'Gatiawin'),
(7285, 289, 'Guemasan'),
(7286, 289, 'La Paz'),
(7287, 289, 'Lacmit'),
(7288, 289, 'Lacquios'),
(7289, 289, 'Mangga-Cacutud'),
(7290, 289, 'Mapalad'),
(7291, 289, 'Panlinlang'),
(7292, 289, 'Paralaya'),
(7293, 289, 'Plazang Luma'),
(7294, 289, 'Poblacion'),
(7295, 289, 'San Agustin Norte'),
(7296, 289, 'San Agustin Sur'),
(7297, 289, 'San Antonio'),
(7298, 289, 'San Jose Mesulo'),
(7299, 289, 'San Juan Bano'),
(7300, 289, 'San Mateo'),
(7301, 289, 'San Nicolas'),
(7302, 289, 'San Roque Bitas'),
(7303, 289, 'Cupang'),
(7304, 289, 'Matamo'),
(7305, 289, 'Santo Niño Tabuan'),
(7306, 289, 'Suclayin'),
(7307, 289, 'Telapayong'),
(7308, 289, 'Kaledian'),
(7309, 290, 'Balas'),
(7310, 290, 'Cabalantian'),
(7311, 290, 'Cabambangan (Pob.)'),
(7312, 290, 'Cabetican'),
(7313, 290, 'Calibutbut'),
(7314, 290, 'Concepcion'),
(7315, 290, 'Dolores'),
(7316, 290, 'Duat'),
(7317, 290, 'Macabacle'),
(7318, 290, 'Magliman'),
(7319, 290, 'Maliwalu'),
(7320, 290, 'Mesalipit'),
(7321, 290, 'Parulog'),
(7322, 290, 'Potrero'),
(7323, 290, 'San Antonio'),
(7324, 290, 'San Isidro'),
(7325, 290, 'San Vicente'),
(7326, 290, 'Santa Barbara'),
(7327, 290, 'Santa Ines'),
(7328, 290, 'Talba'),
(7329, 290, 'Tinajero'),
(7330, 291, 'Bahay Pare'),
(7331, 291, 'Bambang'),
(7332, 291, 'Barangca'),
(7333, 291, 'Barit'),
(7334, 291, 'Buas (Pob.)'),
(7335, 291, 'Cuayang Bugtong'),
(7336, 291, 'Dalayap'),
(7337, 291, 'Dulong Ilog'),
(7338, 291, 'Gulap'),
(7339, 291, 'Lanang'),
(7340, 291, 'Lourdes'),
(7341, 291, 'Magumbali'),
(7342, 291, 'Mandasig'),
(7343, 291, 'Mandili'),
(7344, 291, 'Mangga'),
(7345, 291, 'Mapaniqui'),
(7346, 291, 'Paligui'),
(7347, 291, 'Pangclara'),
(7348, 291, 'Pansinao'),
(7349, 291, 'Paralaya (Pob.)'),
(7350, 291, 'Pasig'),
(7351, 291, 'Pescadores (Pob.)'),
(7352, 291, 'Pulong Gubat'),
(7353, 291, 'Pulong Palazan'),
(7354, 291, 'Salapungan'),
(7355, 291, 'San Agustin (Pob.)'),
(7356, 291, 'Santo Rosario'),
(7357, 291, 'Tagulod'),
(7358, 291, 'Talang'),
(7359, 291, 'Tenejero'),
(7360, 291, 'Vizal San Pablo'),
(7361, 291, 'Vizal Santo Cristo'),
(7362, 291, 'Vizal Santo Niño'),
(7363, 292, 'Anon'),
(7364, 292, 'Apalit'),
(7365, 292, 'Basa Air Base'),
(7366, 292, 'Benedicto'),
(7367, 292, 'Bodega'),
(7368, 292, 'Cabangcalan'),
(7369, 292, 'Calantas'),
(7370, 292, 'Carmencita'),
(7371, 292, 'Consuelo'),
(7372, 292, 'Dampe'),
(7373, 292, 'Del Carmen'),
(7374, 292, 'Fortuna'),
(7375, 292, 'Gutad'),
(7376, 292, 'Mabical'),
(7377, 292, 'Santo Rosario'),
(7378, 292, 'Maligaya'),
(7379, 292, 'Nabuclod'),
(7380, 292, 'Pabanlag'),
(7381, 292, 'Paguiruan'),
(7382, 292, 'Palmayo'),
(7383, 292, 'Pandaguirig'),
(7384, 292, 'Poblacion'),
(7385, 292, 'San Antonio'),
(7386, 292, 'San Isidro'),
(7387, 292, 'San Jose'),
(7388, 292, 'San Nicolas'),
(7389, 292, 'San Pedro'),
(7390, 292, 'San Ramon'),
(7391, 292, 'San Roque'),
(7392, 292, 'Santa Monica'),
(7393, 292, 'Solib'),
(7394, 292, 'Valdez'),
(7395, 292, 'Mawacat'),
(7396, 293, 'Bancal'),
(7397, 293, 'Jose Abad Santos'),
(7398, 293, 'Lambac'),
(7399, 293, 'Magsaysay'),
(7400, 293, 'Maquiapo'),
(7401, 293, 'Natividad'),
(7402, 293, 'Plaza Burgos (Pob.)'),
(7403, 293, 'Pulungmasle'),
(7404, 293, 'Rizal'),
(7405, 293, 'San Agustin'),
(7406, 293, 'San Antonio'),
(7407, 293, 'San Isidro'),
(7408, 293, 'San Jose'),
(7409, 293, 'San Juan Bautista'),
(7410, 293, 'San Juan Nepomuceno'),
(7411, 293, 'San Matias'),
(7412, 293, 'San Miguel'),
(7413, 293, 'San Nicolas 1st'),
(7414, 293, 'San Nicolas 2nd'),
(7415, 293, 'San Pablo'),
(7416, 293, 'San Pedro'),
(7417, 293, 'San Rafael'),
(7418, 293, 'San Roque'),
(7419, 293, 'San Vicente'),
(7420, 293, 'San Juan'),
(7421, 293, 'Santa Filomena (Pob.)'),
(7422, 293, 'Santa Ines'),
(7423, 293, 'Santa Ursula'),
(7424, 293, 'Santo Cristo'),
(7425, 293, 'Santo Niño (Pob.)'),
(7426, 293, 'Ascomo'),
(7427, 294, 'Balantacan'),
(7428, 294, 'Bancal Sinubli'),
(7429, 294, 'Bancal Pugad'),
(7430, 294, 'Baruya'),
(7431, 294, 'Calangain'),
(7432, 294, 'Concepcion'),
(7433, 294, 'Del Carmen'),
(7434, 294, 'De La Paz'),
(7435, 294, 'Don Ignacio Dimson'),
(7436, 294, 'Lourdes'),
(7437, 294, 'Prado Siongco'),
(7438, 294, 'Remedios'),
(7439, 294, 'San Agustin'),
(7440, 294, 'San Antonio'),
(7441, 294, 'San Francisco'),
(7442, 294, 'San Isidro'),
(7443, 294, 'San Jose Apunan'),
(7444, 294, 'San Jose Gumi'),
(7445, 294, 'San Juan (Pob.)'),
(7446, 294, 'San Matias'),
(7447, 294, 'San Miguel'),
(7448, 294, 'San Nicolas 1st (Pob.)'),
(7449, 294, 'San Nicolas 2nd'),
(7450, 294, 'San Pablo 1st'),
(7451, 294, 'San Pablo 2nd'),
(7452, 294, 'San Pedro Palcarangan'),
(7453, 294, 'San Pedro Saug'),
(7454, 294, 'San Roque Arbol'),
(7455, 294, 'San Roque Dau'),
(7456, 294, 'San Vicente'),
(7457, 294, 'Santa Barbara'),
(7458, 294, 'Santa Catalina'),
(7459, 294, 'Santa Cruz'),
(7460, 294, 'Santa Lucia (Pob.)'),
(7461, 294, 'Santa Maria'),
(7462, 294, 'Santa Monica'),
(7463, 294, 'Santa Rita'),
(7464, 294, 'Santa Teresa 1st'),
(7465, 294, 'Santa Teresa 2nd'),
(7466, 294, 'Santiago'),
(7467, 294, 'Santo Domingo'),
(7468, 294, 'Santo Niño'),
(7469, 294, 'Santo Tomas (Pob.)'),
(7470, 294, 'Santo Cristo'),
(7471, 295, 'Atlu-Bola'),
(7472, 295, 'Bical'),
(7473, 295, 'Bundagul'),
(7474, 295, 'Cacutud'),
(7475, 295, 'Calumpang'),
(7476, 295, 'Camachiles'),
(7477, 295, 'Dapdap'),
(7478, 295, 'Dau'),
(7479, 295, 'Dolores'),
(7480, 295, 'Duquit'),
(7481, 295, 'Lakandula'),
(7482, 295, 'Mabiga'),
(7483, 295, 'Macapagal Village'),
(7484, 295, 'Mamatitang'),
(7485, 295, 'Mangalit'),
(7486, 295, 'Marcos Village'),
(7487, 295, 'Mawaque'),
(7488, 295, 'Paralayunan'),
(7489, 295, 'Poblacion'),
(7490, 295, 'San Francisco'),
(7491, 295, 'San Joaquin'),
(7492, 295, 'Santa Ines'),
(7493, 295, 'Santa Maria'),
(7494, 295, 'Santo Rosario'),
(7495, 295, 'Sapang Balen'),
(7496, 295, 'Sapang Biabas'),
(7497, 295, 'Tabun'),
(7498, 296, 'Batasan'),
(7499, 296, 'Caduang Tete'),
(7500, 296, 'Candelaria'),
(7501, 296, 'Castuli'),
(7502, 296, 'Consuelo'),
(7503, 296, 'Dalayap'),
(7504, 296, 'Mataguiti'),
(7505, 296, 'San Esteban'),
(7506, 296, 'San Francisco'),
(7507, 296, 'San Gabriel (Pob.)'),
(7508, 296, 'San Isidro'),
(7509, 296, 'San Jose'),
(7510, 296, 'San Juan'),
(7511, 296, 'San Rafael'),
(7512, 296, 'San Roque'),
(7513, 296, 'San Vicente'),
(7514, 296, 'Santa Cruz (Pob.)'),
(7515, 296, 'Santa Lutgarda'),
(7516, 296, 'Santa Maria'),
(7517, 296, 'Santa Rita (Pob.)'),
(7518, 296, 'Santo Niño'),
(7519, 296, 'Santo Rosario (Pob.)'),
(7520, 296, 'Saplad David'),
(7521, 296, 'Tacasan'),
(7522, 296, 'Telacsan'),
(7523, 297, 'Camias'),
(7524, 297, 'Dolores'),
(7525, 297, 'Escaler'),
(7526, 297, 'La Paz'),
(7527, 297, 'Navaling'),
(7528, 297, 'San Agustin'),
(7529, 297, 'San Antonio'),
(7530, 297, 'San Franciso'),
(7531, 297, 'San Ildefonso'),
(7532, 297, 'San Isidro'),
(7533, 297, 'San Jose'),
(7534, 297, 'San Miguel'),
(7535, 297, 'San Nicolas 1st (Pob.)'),
(7536, 297, 'San Nicolas 2nd'),
(7537, 297, 'San Pablo (Pob.)'),
(7538, 297, 'San Pedro I'),
(7539, 297, 'San Pedro II'),
(7540, 297, 'San Roque'),
(7541, 297, 'San Vicente'),
(7542, 297, 'Santa Cruz (Pob.)'),
(7543, 297, 'Santa Lucia'),
(7544, 297, 'Santa Maria'),
(7545, 297, 'Santo Niño'),
(7546, 297, 'Santo Rosario'),
(7547, 297, 'Bucanan'),
(7548, 297, 'Turu'),
(7549, 297, 'Ayala'),
(7550, 298, 'Alauli'),
(7551, 298, 'Bagang'),
(7552, 298, 'Balibago'),
(7553, 298, 'Bebe Anac'),
(7554, 298, 'Bebe Matua'),
(7555, 298, 'Bulacus'),
(7556, 298, 'San Agustin'),
(7557, 298, 'Santa Monica'),
(7558, 298, 'Cambasi'),
(7559, 298, 'Malauli'),
(7560, 298, 'Nigui'),
(7561, 298, 'Palimpe'),
(7562, 298, 'Puti'),
(7563, 298, 'Sagrada'),
(7564, 298, 'San Isidro Anac'),
(7565, 298, 'San Isidro Matua (Pob.)'),
(7566, 298, 'San Nicolas (Pob.)'),
(7567, 298, 'San Pedro'),
(7568, 298, 'Santa Cruz'),
(7569, 298, 'Santa Lucia Matua'),
(7570, 298, 'Santa Lucia Paguiba'),
(7571, 298, 'Santa Lucia Wakas'),
(7572, 298, 'Santa Lucia Anac (Pob.)'),
(7573, 298, 'Sapang Kawayan'),
(7574, 298, 'Sua'),
(7575, 298, 'Santo Niño'),
(7576, 299, 'Acli'),
(7577, 299, 'Anao'),
(7578, 299, 'Balas'),
(7579, 299, 'Buenavista'),
(7580, 299, 'Camuning'),
(7581, 299, 'Cawayan'),
(7582, 299, 'Concepcion'),
(7583, 299, 'Culubasa'),
(7584, 299, 'Divisoria'),
(7585, 299, 'Dolores'),
(7586, 299, 'Eden'),
(7587, 299, 'Gandus'),
(7588, 299, 'Lagundi'),
(7589, 299, 'Laput'),
(7590, 299, 'Laug'),
(7591, 299, 'Masamat'),
(7592, 299, 'Masangsang'),
(7593, 299, 'Nueva Victoria'),
(7594, 299, 'Pandacaqui'),
(7595, 299, 'Pangatlan'),
(7596, 299, 'Panipuan'),
(7597, 299, 'Parian (Pob.)'),
(7598, 299, 'Sabanilla'),
(7599, 299, 'San Antonio'),
(7600, 299, 'San Carlos'),
(7601, 299, 'San Jose Malino'),
(7602, 299, 'San Jose Matulid'),
(7603, 299, 'San Juan'),
(7604, 299, 'San Lorenzo'),
(7605, 299, 'San Miguel'),
(7606, 299, 'San Nicolas'),
(7607, 299, 'San Pablo'),
(7608, 299, 'San Patricio'),
(7609, 299, 'San Rafael'),
(7610, 299, 'San Roque'),
(7611, 299, 'San Vicente'),
(7612, 299, 'Santa Cruz'),
(7613, 299, 'Santa Maria'),
(7614, 299, 'Santo Domingo'),
(7615, 299, 'Santo Rosario'),
(7616, 299, 'Sapang Maisac'),
(7617, 299, 'Suclaban'),
(7618, 299, 'Tangle'),
(7619, 300, 'Bulac'),
(7620, 300, 'Dawe'),
(7621, 300, 'Lourdes'),
(7622, 300, 'Maniango'),
(7623, 300, 'San Francisco 1st'),
(7624, 300, 'San Francisco 2nd'),
(7625, 300, 'San Isidro'),
(7626, 300, 'San Nicolas (Pob.)'),
(7627, 300, 'San Pedro'),
(7628, 300, 'Santa Catalina'),
(7629, 300, 'Santa Maria'),
(7630, 300, 'Santa Rita'),
(7631, 300, 'Santo Domingo'),
(7632, 300, 'Santo Rosario (Pob.)'),
(7633, 300, 'Saplad'),
(7634, 301, 'Babo Pangulo'),
(7635, 301, 'Babo Sacan'),
(7636, 301, 'Balubad'),
(7637, 301, 'Calzadang Bayu'),
(7638, 301, 'Camias'),
(7639, 301, 'Cangatba'),
(7640, 301, 'Diaz'),
(7641, 301, 'Dolores'),
(7642, 301, 'Jalung'),
(7643, 301, 'Mancatian'),
(7644, 301, 'Manibaug Libutad'),
(7645, 301, 'Manibaug Paralaya'),
(7646, 301, 'Manibaug Pasig'),
(7647, 301, 'Manuali'),
(7648, 301, 'Mitla Proper'),
(7649, 301, 'Palat'),
(7650, 301, 'Pias'),
(7651, 301, 'Pio'),
(7652, 301, 'Planas'),
(7653, 301, 'Poblacion'),
(7654, 301, 'Pulong Santol'),
(7655, 301, 'Salu'),
(7656, 301, 'San Jose Mitla'),
(7657, 301, 'Santa Cruz'),
(7658, 301, 'Sepung Bulaun'),
(7659, 301, 'Sinura'),
(7660, 301, 'Villa Maria'),
(7661, 301, 'Inararo'),
(7662, 301, 'Sapang Uwak'),
(7663, 302, 'Alasas'),
(7664, 302, 'Baliti'),
(7665, 302, 'Bulaon'),
(7666, 302, 'Calulut'),
(7667, 302, 'Dela Paz Norte'),
(7668, 302, 'Dela Paz Sur'),
(7669, 302, 'Del Carmen'),
(7670, 302, 'Del Pilar'),
(7671, 302, 'Del Rosario'),
(7672, 302, 'Dolores'),
(7673, 302, 'Juliana'),
(7674, 302, 'Lara'),
(7675, 302, 'Lourdes'),
(7676, 302, 'Magliman'),
(7677, 302, 'Maimpis'),
(7678, 302, 'Malino'),
(7679, 302, 'Malpitic'),
(7680, 302, 'Pandaras'),
(7681, 302, 'Panipuan'),
(7682, 302, 'Santo Rosario (Pob.)'),
(7683, 302, 'Quebiauan'),
(7684, 302, 'Saguin'),
(7685, 302, 'San Agustin'),
(7686, 302, 'San Felipe'),
(7687, 302, 'San Isidro'),
(7688, 302, 'San Jose'),
(7689, 302, 'San Juan'),
(7690, 302, 'San Nicolas'),
(7691, 302, 'San Pedro'),
(7692, 302, 'Santa Lucia'),
(7693, 302, 'Santa Teresita'),
(7694, 302, 'Santo Niño'),
(7695, 302, 'Sindalan'),
(7696, 302, 'Telabastagan'),
(7697, 302, 'Pulung Bulu'),
(7698, 303, 'San Agustin'),
(7699, 303, 'San Carlos'),
(7700, 303, 'San Isidro'),
(7701, 303, 'San Jose'),
(7702, 303, 'San Juan'),
(7703, 303, 'San Nicolas'),
(7704, 303, 'San Roque'),
(7705, 303, 'San Sebastian'),
(7706, 303, 'Santa Catalina'),
(7707, 303, 'Santa Cruz Pambilog'),
(7708, 303, 'Santa Cruz Poblacion'),
(7709, 303, 'Santa Lucia'),
(7710, 303, 'Santa Monica'),
(7711, 303, 'Santa Rita'),
(7712, 303, 'Santo Niño'),
(7713, 303, 'Santo Rosario'),
(7714, 303, 'Santo Tomas'),
(7715, 304, 'Concepcion'),
(7716, 304, 'De La Paz'),
(7717, 304, 'San Juan (Pob.)'),
(7718, 304, 'San Agustin'),
(7719, 304, 'San Isidro'),
(7720, 304, 'San Jose'),
(7721, 304, 'San Miguel'),
(7722, 304, 'San Nicolas'),
(7723, 304, 'San Pablo Libutad'),
(7724, 304, 'San Pablo Proper'),
(7725, 304, 'San Pedro'),
(7726, 304, 'Santa Cruz'),
(7727, 304, 'Santa Monica'),
(7728, 304, 'Santo Niño'),
(7729, 305, 'San Agustin'),
(7730, 305, 'San Bartolome'),
(7731, 305, 'San Isidro'),
(7732, 305, 'San Joaquin (Pob.)'),
(7733, 305, 'San Jose'),
(7734, 305, 'San Juan'),
(7735, 305, 'San Nicolas'),
(7736, 305, 'San Pablo'),
(7737, 305, 'San Pedro'),
(7738, 305, 'San Roque'),
(7739, 305, 'Santa Lucia'),
(7740, 305, 'Santa Maria'),
(7741, 305, 'Santiago'),
(7742, 305, 'Santo Rosario'),
(7743, 306, 'Becuran'),
(7744, 306, 'Dila-dila'),
(7745, 306, 'San Agustin'),
(7746, 306, 'San Basilio'),
(7747, 306, 'San Isidro'),
(7748, 306, 'San Jose (Pob.)'),
(7749, 306, 'San Juan'),
(7750, 306, 'San Matias'),
(7751, 306, 'San Vicente'),
(7752, 306, 'Santa Monica'),
(7753, 307, 'Moras De La Paz'),
(7754, 307, 'Poblacion'),
(7755, 307, 'San Bartolome'),
(7756, 307, 'San Matias'),
(7757, 307, 'San Vicente'),
(7758, 307, 'Santo Rosario'),
(7759, 307, 'Sapa'),
(7760, 308, 'Batang 1st'),
(7761, 308, 'Batang 2nd'),
(7762, 308, 'Mabuanbuan'),
(7763, 308, 'Malusac'),
(7764, 308, 'Santa Lucia (Pob.)'),
(7765, 308, 'San Antonio'),
(7766, 308, 'San Nicolas 1st'),
(7767, 308, 'San Nicolas 2nd'),
(7768, 308, 'San Pedro'),
(7769, 308, 'Santa Monica'),
(7770, 308, 'Santo Tomas'),
(7771, 308, 'Sabitanan'),
(7772, 309, 'Baguindoc'),
(7773, 309, 'Bantog'),
(7774, 309, 'Campos'),
(7775, 309, 'Carmen'),
(7776, 309, 'Casili'),
(7777, 309, 'Don Ramon'),
(7778, 309, 'Hernando'),
(7779, 309, 'Poblacion'),
(7780, 309, 'Rizal'),
(7781, 309, 'San Francisco East'),
(7782, 309, 'San Francisco West'),
(7783, 309, 'San Jose North'),
(7784, 309, 'San Jose South'),
(7785, 309, 'San Juan'),
(7786, 309, 'San Roque'),
(7787, 309, 'Santo Domingo'),
(7788, 309, 'Sinense'),
(7789, 309, 'Suaverdez'),
(7790, 310, 'Anupul'),
(7791, 310, 'Banaba'),
(7792, 310, 'Bangcu'),
(7793, 310, 'Culubasa'),
(7794, 310, 'Dela Cruz'),
(7795, 310, 'La Paz'),
(7796, 310, 'Lourdes'),
(7797, 310, 'Malonzo'),
(7798, 310, 'Virgen de los Remedios'),
(7799, 310, 'San Nicolas (Pob.)'),
(7800, 310, 'San Pedro'),
(7801, 310, 'San Rafael'),
(7802, 310, 'San Roque'),
(7803, 310, 'San Vicente'),
(7804, 310, 'Santo Niño'),
(7805, 311, 'Anoling 1st'),
(7806, 311, 'Anoling 2nd'),
(7807, 311, 'Anoling 3rd'),
(7808, 311, 'Bacabac'),
(7809, 311, 'Bacsay'),
(7810, 311, 'Bancay 1st'),
(7811, 311, 'Bancay 2nd'),
(7812, 311, 'Bilad'),
(7813, 311, 'Birbira'),
(7814, 311, 'Bobon Caarosipan'),
(7815, 311, 'Bobon 1st'),
(7816, 311, 'Bobon 2nd'),
(7817, 311, 'Cabanabaan'),
(7818, 311, 'Cacamilingan Norte'),
(7819, 311, 'Cacamilingan Sur'),
(7820, 311, 'Caniag'),
(7821, 311, 'Carael'),
(7822, 311, 'Cayaoan'),
(7823, 311, 'Cayasan'),
(7824, 311, 'Florida'),
(7825, 311, 'Lasong'),
(7826, 311, 'Libueg'),
(7827, 311, 'Malacampa'),
(7828, 311, 'Manakem'),
(7829, 311, 'Manupeg'),
(7830, 311, 'Marawi'),
(7831, 311, 'Matubog'),
(7832, 311, 'Nagrambacan'),
(7833, 311, 'Nagserialan'),
(7834, 311, 'Palimbo Proper'),
(7835, 311, 'Palimbo-Caarosipan'),
(7836, 311, 'Pao 1st'),
(7837, 311, 'Pao 2nd'),
(7838, 311, 'Pao 3rd'),
(7839, 311, 'Papaac'),
(7840, 311, 'Pindangan 1st'),
(7841, 311, 'Pindangan 2nd'),
(7842, 311, 'Poblacion A'),
(7843, 311, 'Poblacion B'),
(7844, 311, 'Poblacion C'),
(7845, 311, 'Poblacion D'),
(7846, 311, 'Poblacion E'),
(7847, 311, 'Poblacion F'),
(7848, 311, 'Poblacion G'),
(7849, 311, 'Poblacion H'),
(7850, 311, 'Poblacion I'),
(7851, 311, 'Poblacion J'),
(7852, 311, 'Santa Maria'),
(7853, 311, 'Sawat'),
(7854, 311, 'Sinilian 1st'),
(7855, 311, 'Sinilian 2nd'),
(7856, 311, 'Sinilian 3rd'),
(7857, 311, 'Sinilian Cacalibosoan'),
(7858, 311, 'Sinulatan 1st'),
(7859, 311, 'Sinulatan 2nd'),
(7860, 311, 'Surgui 1st'),
(7861, 311, 'Surgui 2nd'),
(7862, 311, 'Surgui 3rd'),
(7863, 311, 'Tambugan'),
(7864, 311, 'Telbang'),
(7865, 311, 'Tuec'),
(7866, 312, 'Aranguren'),
(7867, 312, 'Bueno'),
(7868, 312, 'Cubcub (Pob.)'),
(7869, 312, 'Cutcut 1st'),
(7870, 312, 'Cutcut 2nd'),
(7871, 312, 'Dolores'),
(7872, 312, 'Estrada'),
(7873, 312, 'Lawy'),
(7874, 312, 'Manga'),
(7875, 312, 'Manlapig'),
(7876, 312, 'O\'Donnell'),
(7877, 312, 'Santa Lucia'),
(7878, 312, 'Santa Rita'),
(7879, 312, 'Santo Domingo 1st'),
(7880, 312, 'Santo Domingo 2nd'),
(7881, 312, 'Santo Rosario'),
(7882, 312, 'Talaga'),
(7883, 312, 'Maruglu'),
(7884, 312, 'Santa Juliana'),
(7885, 312, 'Cristo Rey'),
(7886, 313, 'Alfonso'),
(7887, 313, 'Balutu'),
(7888, 313, 'Cafe'),
(7889, 313, 'Calius Gueco'),
(7890, 313, 'Caluluan'),
(7891, 313, 'Castillo'),
(7892, 313, 'Corazon de Jesus'),
(7893, 313, 'Culatingan'),
(7894, 313, 'Dungan'),
(7895, 313, 'Dutung-A-Matas'),
(7896, 313, 'Lilibangan'),
(7897, 313, 'Mabilog'),
(7898, 313, 'Magao'),
(7899, 313, 'Malupa'),
(7900, 313, 'Minane'),
(7901, 313, 'Panalicsian'),
(7902, 313, 'Pando'),
(7903, 313, 'Parang'),
(7904, 313, 'Parulung'),
(7905, 313, 'Pitabunan'),
(7906, 313, 'San Agustin'),
(7907, 313, 'San Antonio'),
(7908, 313, 'San Bartolome'),
(7909, 313, 'San Francisco'),
(7910, 313, 'San Isidro'),
(7911, 313, 'San Jose (Pob.)'),
(7912, 313, 'San Juan'),
(7913, 313, 'San Martin'),
(7914, 313, 'San Nicolas (Pob.)'),
(7915, 313, 'San Nicolas Balas'),
(7916, 313, 'Santo Niño'),
(7917, 313, 'Santa Cruz'),
(7918, 313, 'Santa Maria'),
(7919, 313, 'Santa Monica'),
(7920, 313, 'Santa Rita'),
(7921, 313, 'Santa Rosa'),
(7922, 313, 'Santiago'),
(7923, 313, 'Santo Cristo'),
(7924, 313, 'Santo Rosario'),
(7925, 313, 'Talimunduc Marimla'),
(7926, 313, 'Talimunduc San Miguel'),
(7927, 313, 'Telabanca'),
(7928, 313, 'Tinang'),
(7929, 313, 'San Vicente'),
(7930, 313, 'Green Village'),
(7931, 314, 'Abagon'),
(7932, 314, 'Amacalan'),
(7933, 314, 'Apsayan'),
(7934, 314, 'Ayson'),
(7935, 314, 'Bawa'),
(7936, 314, 'Buenlag'),
(7937, 314, 'Bularit'),
(7938, 314, 'Calayaan'),
(7939, 314, 'Carbonel'),
(7940, 314, 'Cardona'),
(7941, 314, 'Caturay'),
(7942, 314, 'Danzo'),
(7943, 314, 'Dicolor'),
(7944, 314, 'Don Basilio'),
(7945, 314, 'Luna'),
(7946, 314, 'Mabini'),
(7947, 314, 'Magaspac'),
(7948, 314, 'Malayep'),
(7949, 314, 'Matapitap'),
(7950, 314, 'Matayumcab'),
(7951, 314, 'New Salem'),
(7952, 314, 'Oloybuaya'),
(7953, 314, 'Padapada'),
(7954, 314, 'Parsolingan'),
(7955, 314, 'Pinasling'),
(7956, 314, 'Plastado'),
(7957, 314, 'Poblacion 1'),
(7958, 314, 'Poblacion 2'),
(7959, 314, 'Poblacion 3'),
(7960, 314, 'Quezon'),
(7961, 314, 'Rizal'),
(7962, 314, 'Salapungan'),
(7963, 314, 'San Agustin'),
(7964, 314, 'San Antonio'),
(7965, 314, 'San Bartolome'),
(7966, 314, 'San Jose'),
(7967, 314, 'Santa Lucia'),
(7968, 314, 'Santiago'),
(7969, 314, 'Sembrano'),
(7970, 314, 'Singat'),
(7971, 314, 'Sulipa'),
(7972, 314, 'Tagumbao'),
(7973, 314, 'Tangcaran'),
(7974, 314, 'Villa Paz'),
(7975, 315, 'Balanoy'),
(7976, 315, 'Bantog-Caricutan'),
(7977, 315, 'Caramutan'),
(7978, 315, 'Caut'),
(7979, 315, 'Comillas'),
(7980, 315, 'Dumarais'),
(7981, 315, 'Guevarra'),
(7982, 315, 'Kapanikian'),
(7983, 315, 'La Purisima'),
(7984, 315, 'Lara'),
(7985, 315, 'Laungcupang'),
(7986, 315, 'Lomboy'),
(7987, 315, 'Macalong'),
(7988, 315, 'Matayumtayum'),
(7989, 315, 'Mayang'),
(7990, 315, 'Motrico'),
(7991, 315, 'Paludpud'),
(7992, 315, 'Rizal'),
(7993, 315, 'San Isidro (Pob.)'),
(7994, 315, 'San Roque (Pob.)'),
(7995, 315, 'Sierra'),
(7996, 316, 'Ambalingit'),
(7997, 316, 'Baybayaoas'),
(7998, 316, 'Bigbiga'),
(7999, 316, 'Binbinaca'),
(8000, 316, 'Calabtangan'),
(8001, 316, 'Caocaoayan'),
(8002, 316, 'Carabaoan'),
(8003, 316, 'Cubcub'),
(8004, 316, 'Gayonggayong'),
(8005, 316, 'Gossood'),
(8006, 316, 'Labney'),
(8007, 316, 'Mamonit'),
(8008, 316, 'Maniniog'),
(8009, 316, 'Mapandan'),
(8010, 316, 'Nambalan'),
(8011, 316, 'Pedro L. Quines'),
(8012, 316, 'Pitombayog'),
(8013, 316, 'Poblacion Norte'),
(8014, 316, 'Poblacion Sur'),
(8015, 316, 'Rotrottooc'),
(8016, 316, 'San Bartolome'),
(8017, 316, 'San Jose'),
(8018, 316, 'Taldiapan'),
(8019, 316, 'Tangcarang'),
(8020, 317, 'Ablang-Sapang'),
(8021, 317, 'Aringin'),
(8022, 317, 'Atencio'),
(8023, 317, 'Banaoang East'),
(8024, 317, 'Banaoang West'),
(8025, 317, 'Baquero Norte'),
(8026, 317, 'Baquero Sur'),
(8027, 317, 'Burgos'),
(8028, 317, 'Calamay'),
(8029, 317, 'Calapan'),
(8030, 317, 'Camangaan East'),
(8031, 317, 'Camangaan West'),
(8032, 317, 'Camposanto 1 - Norte'),
(8033, 317, 'Camposanto 1 - Sur'),
(8034, 317, 'Camposanto 2'),
(8035, 317, 'Capaoayan'),
(8036, 317, 'Lapsing'),
(8037, 317, 'Mabini'),
(8038, 317, 'Maluac'),
(8039, 317, 'Poblacion 1'),
(8040, 317, 'Poblacion 2'),
(8041, 317, 'Poblacion 3'),
(8042, 317, 'Poblacion 4'),
(8043, 317, 'Rizal'),
(8044, 317, 'San Juan'),
(8045, 317, 'San Julian'),
(8046, 317, 'San Leon'),
(8047, 317, 'San Pedro'),
(8048, 317, 'San Roque'),
(8049, 317, 'Santa Lucia East'),
(8050, 317, 'Santa Lucia West'),
(8051, 317, 'Santa Maria'),
(8052, 317, 'Santa Monica'),
(8053, 317, 'Tubectubang'),
(8054, 317, 'Tolega Norte'),
(8055, 317, 'Tolega Sur'),
(8056, 317, 'Villa'),
(8057, 318, 'Abogado'),
(8058, 318, 'Acocolao'),
(8059, 318, 'Aduas'),
(8060, 318, 'Apulid'),
(8061, 318, 'Balaoang'),
(8062, 318, 'Barang'),
(8063, 318, 'Brillante'),
(8064, 318, 'Burgos'),
(8065, 318, 'Cabayaoasan'),
(8066, 318, 'Canan'),
(8067, 318, 'Carino'),
(8068, 318, 'Cayanga'),
(8069, 318, 'Colibangbang'),
(8070, 318, 'Coral'),
(8071, 318, 'Dapdap'),
(8072, 318, 'Estacion'),
(8073, 318, 'Mabilang'),
(8074, 318, 'Manaois'),
(8075, 318, 'Matalapitap'),
(8076, 318, 'Nagmisaan'),
(8077, 318, 'Nancamarinan'),
(8078, 318, 'Nipaco'),
(8079, 318, 'Patalan'),
(8080, 318, 'Poblacion Norte'),
(8081, 318, 'Poblacion Sur'),
(8082, 318, 'Rang-ayan'),
(8083, 318, 'Salumague'),
(8084, 318, 'Samput'),
(8085, 318, 'San Carlos'),
(8086, 318, 'San Isidro'),
(8087, 318, 'San Juan de Milla'),
(8088, 318, 'Santa Ines'),
(8089, 318, 'Sinigpit'),
(8090, 318, 'Tablang'),
(8091, 318, 'Ventenilla'),
(8092, 319, 'Balite'),
(8093, 319, 'Buenavista'),
(8094, 319, 'Cadanglaan'),
(8095, 319, 'Estipona'),
(8096, 319, 'Linao'),
(8097, 319, 'Maasin'),
(8098, 319, 'Matindeg'),
(8099, 319, 'Maungib'),
(8100, 319, 'Naya'),
(8101, 319, 'Nilasin 1st'),
(8102, 319, 'Nilasin 2nd'),
(8103, 319, 'Poblacion 1'),
(8104, 319, 'Poblacion 2'),
(8105, 319, 'Poblacion 3'),
(8106, 319, 'Poroc'),
(8107, 319, 'Singat'),
(8108, 320, 'Coral-Iloco'),
(8109, 320, 'Guiteb'),
(8110, 320, 'Pance'),
(8111, 320, 'Poblacion Center'),
(8112, 320, 'Poblacion North'),
(8113, 320, 'Poblacion South'),
(8114, 320, 'San Juan'),
(8115, 320, 'San Raymundo'),
(8116, 320, 'Toledo'),
(8117, 321, 'Balloc'),
(8118, 321, 'Bamban'),
(8119, 321, 'Casipo'),
(8120, 321, 'Catagudingan'),
(8121, 321, 'Daldalayap'),
(8122, 321, 'Doclong 1'),
(8123, 321, 'Doclong 2'),
(8124, 321, 'Maasin'),
(8125, 321, 'Nagsabaran'),
(8126, 321, 'Pit-ao'),
(8127, 321, 'Poblacion Norte'),
(8128, 321, 'Poblacion Sur'),
(8129, 322, 'Colubot'),
(8130, 322, 'Lanat'),
(8131, 322, 'Legaspi'),
(8132, 322, 'Mangandingay'),
(8133, 322, 'Matarannoc'),
(8134, 322, 'Pacpaco'),
(8135, 322, 'Poblacion'),
(8136, 322, 'Salcedo'),
(8137, 322, 'San Agustin'),
(8138, 322, 'San Felipe'),
(8139, 322, 'San Jacinto'),
(8140, 322, 'San Miguel'),
(8141, 322, 'San Narciso'),
(8142, 322, 'San Vicente'),
(8143, 322, 'Santa Maria'),
(8144, 323, 'Baldios'),
(8145, 323, 'Botbotones'),
(8146, 323, 'Caanamongan'),
(8147, 323, 'Cabaruan'),
(8148, 323, 'Cabugbugan'),
(8149, 323, 'Caduldulaoan'),
(8150, 323, 'Calipayan'),
(8151, 323, 'Macaguing'),
(8152, 323, 'Nambalan'),
(8153, 323, 'Padapada'),
(8154, 323, 'Pilpila'),
(8155, 323, 'Pinpinas'),
(8156, 323, 'Poblacion East'),
(8157, 323, 'Poblacion West'),
(8158, 323, 'Pugo-Cecilio'),
(8159, 323, 'San Francisco'),
(8160, 323, 'San Sotero'),
(8161, 323, 'San Vicente'),
(8162, 323, 'Santa Ines Centro'),
(8163, 323, 'Santa Ines East'),
(8164, 323, 'Santa Ines West'),
(8165, 323, 'Taguiporo'),
(8166, 323, 'Timmaguab'),
(8167, 323, 'Vargas'),
(8168, 324, 'Aguso'),
(8169, 324, 'Alvindia Segundo'),
(8170, 324, 'Amucao'),
(8171, 324, 'Armenia'),
(8172, 324, 'Asturias'),
(8173, 324, 'Atioc'),
(8174, 324, 'Balanti'),
(8175, 324, 'Balete'),
(8176, 324, 'Balibago I'),
(8177, 324, 'Balibago II'),
(8178, 324, 'Balingcanaway'),
(8179, 324, 'Banaba'),
(8180, 324, 'Bantog'),
(8181, 324, 'Baras-baras'),
(8182, 324, 'Batang-batang'),
(8183, 324, 'Binauganan'),
(8184, 324, 'Bora'),
(8185, 324, 'Buenavista'),
(8186, 324, 'Buhilit'),
(8187, 324, 'Burot'),
(8188, 324, 'Calingcuan'),
(8189, 324, 'Capehan'),
(8190, 324, 'Carangian'),
(8191, 324, 'Central'),
(8192, 324, 'Culipat'),
(8193, 324, 'Cut-cut I'),
(8194, 324, 'Cut-cut II'),
(8195, 324, 'Dalayap'),
(8196, 324, 'Dela Paz'),
(8197, 324, 'Dolores'),
(8198, 324, 'Laoang'),
(8199, 324, 'Ligtasan'),
(8200, 324, 'Lourdes'),
(8201, 324, 'Mabini'),
(8202, 324, 'Maligaya'),
(8203, 324, 'Maliwalo'),
(8204, 324, 'Mapalacsiao'),
(8205, 324, 'Mapalad'),
(8206, 324, 'Matatalaib'),
(8207, 324, 'Paraiso'),
(8208, 324, 'Poblacion'),
(8209, 324, 'San Carlos'),
(8210, 324, 'San Francisco'),
(8211, 324, 'San Isidro'),
(8212, 324, 'San Jose');
INSERT INTO `table_barangay` (`barangay_id`, `municipality_id`, `barangay_name`) VALUES
(8213, 324, 'San Jose de Urquico'),
(8214, 324, 'San Juan de Mata'),
(8215, 324, 'San Luis'),
(8216, 324, 'San Manuel'),
(8217, 324, 'San Miguel'),
(8218, 324, 'San Nicolas'),
(8219, 324, 'San Pablo'),
(8220, 324, 'San Pascual'),
(8221, 324, 'San Rafael'),
(8222, 324, 'San Roque'),
(8223, 324, 'San Sebastian'),
(8224, 324, 'San Vicente'),
(8225, 324, 'Santa Cruz'),
(8226, 324, 'Santa Maria'),
(8227, 324, 'Santo Cristo'),
(8228, 324, 'Santo Domingo'),
(8229, 324, 'Santo Niño'),
(8230, 324, 'Sapang Maragul'),
(8231, 324, 'Sapang Tagalog'),
(8232, 324, 'Sepung Calzada'),
(8233, 324, 'Sinait'),
(8234, 324, 'Suizo'),
(8235, 324, 'Tariji'),
(8236, 324, 'Tibag'),
(8237, 324, 'Tibagan'),
(8238, 324, 'Trinidad'),
(8239, 324, 'Ungot'),
(8240, 324, 'Matadero'),
(8241, 324, 'Salapungan'),
(8242, 324, 'Villa Bacolor'),
(8243, 324, 'Care'),
(8244, 325, 'Baculong'),
(8245, 325, 'Balayang'),
(8246, 325, 'Balbaloto'),
(8247, 325, 'Bangar'),
(8248, 325, 'Bantog'),
(8249, 325, 'Batangbatang'),
(8250, 325, 'Bulo'),
(8251, 325, 'Cabuluan'),
(8252, 325, 'Calibungan'),
(8253, 325, 'Canarem'),
(8254, 325, 'Cruz'),
(8255, 325, 'Lalapac'),
(8256, 325, 'Maluid'),
(8257, 325, 'Mangolago'),
(8258, 325, 'Masalasa'),
(8259, 325, 'Palacpalac'),
(8260, 325, 'San Agustin'),
(8261, 325, 'San Andres'),
(8262, 325, 'San Fernando (Pob.)'),
(8263, 325, 'San Francisco'),
(8264, 325, 'San Gavino (Pob.)'),
(8265, 325, 'San Jacinto'),
(8266, 325, 'San Nicolas (Pob.)'),
(8267, 325, 'San Vicente'),
(8268, 325, 'Santa Barbara'),
(8269, 325, 'Santa Lucia (Pob.)'),
(8270, 326, 'Burgos'),
(8271, 326, 'David'),
(8272, 326, 'Iba'),
(8273, 326, 'Labney'),
(8274, 326, 'Lawacamulag'),
(8275, 326, 'Lubigan'),
(8276, 326, 'Maamot'),
(8277, 326, 'Mababanaba'),
(8278, 326, 'Moriones'),
(8279, 326, 'Pao'),
(8280, 326, 'San Juan de Valdez'),
(8281, 326, 'Sula'),
(8282, 326, 'Villa Aglipay'),
(8283, 327, 'Bangan'),
(8284, 327, 'Batonlapoc'),
(8285, 327, 'Beneg'),
(8286, 327, 'Capayawan'),
(8287, 327, 'Carael'),
(8288, 327, 'Danacbunga'),
(8289, 327, 'Maguisguis'),
(8290, 327, 'Mambog'),
(8291, 327, 'Moraza'),
(8292, 327, 'Paco (Pob.)'),
(8293, 327, 'Panan'),
(8294, 327, 'Parel'),
(8295, 327, 'Paudpod'),
(8296, 327, 'Poonbato'),
(8297, 327, 'Porac'),
(8298, 327, 'San Isidro'),
(8299, 327, 'San Juan'),
(8300, 327, 'San Miguel'),
(8301, 327, 'Santiago'),
(8302, 327, 'Tampo (Pob.)'),
(8303, 327, 'Taugtog'),
(8304, 327, 'Villar'),
(8305, 327, 'Bancal'),
(8306, 327, 'Belbel'),
(8307, 327, 'Binuclutan'),
(8308, 327, 'Burgos'),
(8309, 327, 'Cabatuan'),
(8310, 327, 'Malomboy'),
(8311, 327, 'Nacolcol'),
(8312, 327, 'Owaog-Nibloc'),
(8313, 327, 'Palis'),
(8314, 328, 'Anonang'),
(8315, 328, 'Apo-apo'),
(8316, 328, 'Arew'),
(8317, 328, 'Banuambayo (Pob.)'),
(8318, 328, 'Cadmang-Reserva'),
(8319, 328, 'Camiling'),
(8320, 328, 'Casabaan'),
(8321, 328, 'Dolores (Pob.)'),
(8322, 328, 'Del Carmen (Pob.)'),
(8323, 328, 'Laoag'),
(8324, 328, 'Lomboy'),
(8325, 328, 'Longos'),
(8326, 328, 'Mabanglit'),
(8327, 328, 'New San Juan'),
(8328, 328, 'San Antonio'),
(8329, 328, 'San Isidro'),
(8330, 328, 'San Juan (Pob.)'),
(8331, 328, 'San Rafael'),
(8332, 328, 'Santa Rita'),
(8333, 328, 'Santo Niño'),
(8334, 328, 'Tondo'),
(8335, 328, 'Felmida-Diaz'),
(8336, 329, 'Babancal'),
(8337, 329, 'Binabalian'),
(8338, 329, 'Catol'),
(8339, 329, 'Dampay'),
(8340, 329, 'Lauis'),
(8341, 329, 'Libertador'),
(8342, 329, 'Malabon'),
(8343, 329, 'Malimanga'),
(8344, 329, 'Pamibian'),
(8345, 329, 'Panayonan'),
(8346, 329, 'Pinagrealan'),
(8347, 329, 'Poblacion'),
(8348, 329, 'Sinabacan'),
(8349, 329, 'Taposo'),
(8350, 329, 'Uacon'),
(8351, 329, 'Yamot'),
(8352, 330, 'Balaybay'),
(8353, 330, 'Buenavista'),
(8354, 330, 'Del Pilar'),
(8355, 330, 'Looc'),
(8356, 330, 'Magsaysay'),
(8357, 330, 'Nagbayan'),
(8358, 330, 'Nagbunga'),
(8359, 330, 'San Agustin'),
(8360, 330, 'San Jose (Pob.)'),
(8361, 330, 'San Juan (Pob.)'),
(8362, 330, 'San Nicolas'),
(8363, 330, 'San Pablo (Pob.)'),
(8364, 330, 'San Roque'),
(8365, 330, 'Santa Maria'),
(8366, 331, 'Amungan'),
(8367, 331, 'Zone 2 Pob.'),
(8368, 331, 'Zone 5 Pob.'),
(8369, 331, 'Bangantalinga'),
(8370, 331, 'Zone 6 Pob.'),
(8371, 331, 'Zone 3 Pob.'),
(8372, 331, 'Dirita-Baloguen'),
(8373, 331, 'Zone 1 Pob.'),
(8374, 331, 'Lipay-Dingin-Panibuatan'),
(8375, 331, 'Palanginan'),
(8376, 331, 'Zone 4 Pob.'),
(8377, 331, 'San Agustin'),
(8378, 331, 'Santa Barbara'),
(8379, 331, 'Santo Rosario'),
(8380, 332, 'Baloganon'),
(8381, 332, 'Bamban'),
(8382, 332, 'Bani'),
(8383, 332, 'Collat'),
(8384, 332, 'Inhobol'),
(8385, 332, 'North Poblacion'),
(8386, 332, 'San Lorenzo'),
(8387, 332, 'San Salvador'),
(8388, 332, 'Santa Rita'),
(8389, 332, 'Santo Rosario'),
(8390, 332, 'South Poblacion'),
(8391, 332, 'Taltal'),
(8392, 332, 'Tapuac'),
(8393, 333, 'Asinan'),
(8394, 333, 'Banicain'),
(8395, 333, 'Barreto'),
(8396, 333, 'East Bajac-bajac'),
(8397, 333, 'East Tapinac'),
(8398, 333, 'Gordon Heights'),
(8399, 333, 'Kalaklan'),
(8400, 333, 'New Kalalake'),
(8401, 333, 'Mabayuan'),
(8402, 333, 'New Cabalan'),
(8403, 333, 'New Ilalim'),
(8404, 333, 'New Kababae'),
(8405, 333, 'Pag-asa'),
(8406, 333, 'Santa Rita'),
(8407, 333, 'West Bajac-bajac'),
(8408, 333, 'West Tapinac'),
(8409, 333, 'Old Cabalan'),
(8410, 334, 'Alwa'),
(8411, 334, 'Bato'),
(8412, 334, 'Bulawen'),
(8413, 334, 'Cauyan'),
(8414, 334, 'Garreta'),
(8415, 334, 'Libaba'),
(8416, 334, 'Liozon'),
(8417, 334, 'Lipay'),
(8418, 334, 'Locloc'),
(8419, 334, 'Macarang'),
(8420, 334, 'Magalawa'),
(8421, 334, 'Pangolingan'),
(8422, 334, 'East Poblacion'),
(8423, 334, 'West Poblacion'),
(8424, 334, 'Salaza'),
(8425, 334, 'San Juan'),
(8426, 334, 'Santo Niño'),
(8427, 334, 'Santo Tomas'),
(8428, 334, 'Tition'),
(8429, 335, 'Angeles'),
(8430, 335, 'Antipolo (Pob.)'),
(8431, 335, 'Burgos (Pob.)'),
(8432, 335, 'West Dirita'),
(8433, 335, 'East Dirita'),
(8434, 335, 'Luna (Pob.)'),
(8435, 335, 'Pundaquit'),
(8436, 335, 'San Esteban'),
(8437, 335, 'San Gregorio (Pob.)'),
(8438, 335, 'San Juan (Pob.)'),
(8439, 335, 'San Miguel'),
(8440, 335, 'San Nicolas (Pob.)'),
(8441, 335, 'Santiago'),
(8442, 335, 'Rizal'),
(8443, 336, 'Amagna (Pob.)'),
(8444, 336, 'Apostol (Pob.)'),
(8445, 336, 'Balincaguing'),
(8446, 336, 'Farañal (Pob.)'),
(8447, 336, 'Feria (Pob.)'),
(8448, 336, 'Maloma'),
(8449, 336, 'Manglicmot (Pob.)'),
(8450, 336, 'Rosete (Pob.)'),
(8451, 336, 'San Rafael'),
(8452, 336, 'Santo Niño'),
(8453, 336, 'Sindol'),
(8454, 337, 'Aglao'),
(8455, 337, 'Buhawen'),
(8456, 337, 'Burgos (Pob.)'),
(8457, 337, 'Consuelo Norte'),
(8458, 337, 'Consuelo Sur (Pob.)'),
(8459, 337, 'La Paz (Pob.)'),
(8460, 337, 'Laoag'),
(8461, 337, 'Linasin'),
(8462, 337, 'Linusungan'),
(8463, 337, 'Lucero (Pob.)'),
(8464, 337, 'Nagbunga'),
(8465, 337, 'Rizal (Pob.)'),
(8466, 337, 'San Guillermo (Pob.)'),
(8467, 337, 'San Isidro (Pob.)'),
(8468, 337, 'San Rafael'),
(8469, 337, 'Santa Fe'),
(8470, 337, 'Central (Pob.)'),
(8471, 337, 'Rabanes'),
(8472, 338, 'Alusiis'),
(8473, 338, 'Beddeng'),
(8474, 338, 'Candelaria (Pob.)'),
(8475, 338, 'Dallipawen'),
(8476, 338, 'Grullo'),
(8477, 338, 'La Paz'),
(8478, 338, 'Libertad (Pob.)'),
(8479, 338, 'Namatacan'),
(8480, 338, 'Natividad (Pob.)'),
(8481, 338, 'Paite'),
(8482, 338, 'Patrocinio (Pob.)'),
(8483, 338, 'San Jose (Pob.)'),
(8484, 338, 'San Juan (Pob.)'),
(8485, 338, 'San Pascual (Pob.)'),
(8486, 338, 'San Rafael (Pob.)'),
(8487, 338, 'Siminublan'),
(8488, 338, 'Omaya'),
(8489, 339, 'Babuyan'),
(8490, 339, 'Bolitoc'),
(8491, 339, 'Bangcol'),
(8492, 339, 'Bayto'),
(8493, 339, 'Biay'),
(8494, 339, 'Canaynayan'),
(8495, 339, 'Gama'),
(8496, 339, 'Guinabon'),
(8497, 339, 'Guisguis'),
(8498, 339, 'Lipay'),
(8499, 339, 'Lomboy'),
(8500, 339, 'Lucapon North'),
(8501, 339, 'Lucapon South'),
(8502, 339, 'Malabago'),
(8503, 339, 'Naulo'),
(8504, 339, 'Poblacion North'),
(8505, 339, 'Pagatpat'),
(8506, 339, 'Pamonoran'),
(8507, 339, 'Sabang'),
(8508, 339, 'San Fernando'),
(8509, 339, 'Poblacion South'),
(8510, 339, 'Tabalong'),
(8511, 339, 'Tubotubo North'),
(8512, 339, 'Tubotubo South'),
(8513, 339, 'Bulawon'),
(8514, 340, 'Aningway Sacatihan'),
(8515, 340, 'Asinan Poblacion'),
(8516, 340, 'Asinan Proper'),
(8517, 340, 'Baraca-Camachile (Pob.)'),
(8518, 340, 'Batiawan'),
(8519, 340, 'Calapacuan'),
(8520, 340, 'Calapandayan (Pob.)'),
(8521, 340, 'Cawag'),
(8522, 340, 'Ilwas (Pob.)'),
(8523, 340, 'Mangan-Vaca'),
(8524, 340, 'Matain'),
(8525, 340, 'Naugsol'),
(8526, 340, 'Pamatawan'),
(8527, 340, 'San Isidro'),
(8528, 340, 'Santo Tomas'),
(8529, 340, 'Wawandue (Pob.)'),
(8530, 341, 'Barangay I (Pob.)'),
(8531, 341, 'Barangay II (Pob.)'),
(8532, 341, 'Barangay III (Pob.)'),
(8533, 341, 'Barangay IV (Pob.)'),
(8534, 341, 'Barangay V (Pob.)'),
(8535, 341, 'Buhangin'),
(8536, 341, 'Calabuanan'),
(8537, 341, 'Obligacion'),
(8538, 341, 'Pingit'),
(8539, 341, 'Reserva'),
(8540, 341, 'Sabang'),
(8541, 341, 'Suclayin'),
(8542, 341, 'Zabali'),
(8543, 342, 'Barangay 1 (Pob.)'),
(8544, 342, 'Barangay 2 (Pob.)'),
(8545, 342, 'Barangay 3 (Pob.)'),
(8546, 342, 'Barangay 4 (Pob.)'),
(8547, 342, 'Barangay 5 (Pob.)'),
(8548, 342, 'Barangay 6 (Pob.)'),
(8549, 342, 'Barangay 7 (Pob.)'),
(8550, 342, 'Barangay 8 (Pob.)'),
(8551, 342, 'Calabgan'),
(8552, 342, 'Calangcuasan'),
(8553, 342, 'Calantas'),
(8554, 342, 'Culat'),
(8555, 342, 'Dibet'),
(8556, 342, 'Esperanza'),
(8557, 342, 'Lual'),
(8558, 342, 'Marikit'),
(8559, 342, 'Tabas'),
(8560, 342, 'Tinib'),
(8561, 342, 'Bianuan'),
(8562, 342, 'Cozo'),
(8563, 342, 'Dibacong'),
(8564, 342, 'Ditinagyan'),
(8565, 342, 'Esteves'),
(8566, 342, 'San Ildefonso'),
(8567, 343, 'Diagyan'),
(8568, 343, 'Dicabasan'),
(8569, 343, 'Dilaguidi'),
(8570, 343, 'Dimaseset'),
(8571, 343, 'Diniog'),
(8572, 343, 'Lawang'),
(8573, 343, 'Maligaya (Pob.)'),
(8574, 343, 'Manggitahan'),
(8575, 343, 'Masagana (Pob.)'),
(8576, 343, 'Ura'),
(8577, 343, 'Esperanza'),
(8578, 344, 'Abuleg'),
(8579, 344, 'Zone I (Pob.)'),
(8580, 344, 'Zone II (Pob.)'),
(8581, 344, 'Nipoo'),
(8582, 344, 'Dibaraybay'),
(8583, 344, 'Ditawini'),
(8584, 344, 'Mapalad'),
(8585, 344, 'Paleg'),
(8586, 344, 'Simbahan'),
(8587, 345, 'Aplaya'),
(8588, 345, 'Butas Na Bato'),
(8589, 345, 'Cabog'),
(8590, 345, 'Caragsacan'),
(8591, 345, 'Davildavilan'),
(8592, 345, 'Dikapanikian'),
(8593, 345, 'Ibona'),
(8594, 345, 'Paltic'),
(8595, 345, 'Poblacion'),
(8596, 345, 'Tanawan'),
(8597, 345, 'Umiray'),
(8598, 346, 'Bayabas'),
(8599, 346, 'Buenavista'),
(8600, 346, 'Borlongan'),
(8601, 346, 'Calaocan'),
(8602, 346, 'Dianed'),
(8603, 346, 'Diarabasin'),
(8604, 346, 'Dibutunan'),
(8605, 346, 'Dimabuno'),
(8606, 346, 'Dinadiawan'),
(8607, 346, 'Ditale'),
(8608, 346, 'Gupa'),
(8609, 346, 'Ipil'),
(8610, 346, 'Laboy'),
(8611, 346, 'Lipit'),
(8612, 346, 'Lobbot'),
(8613, 346, 'Maligaya'),
(8614, 346, 'Mijares'),
(8615, 346, 'Mucdol'),
(8616, 346, 'North Poblacion'),
(8617, 346, 'Puangi'),
(8618, 346, 'Salay'),
(8619, 346, 'Sapangkawayan'),
(8620, 346, 'South Poblacion'),
(8621, 346, 'Toytoyan'),
(8622, 346, 'Diamanen'),
(8623, 347, 'Alcala'),
(8624, 347, 'Bagtu'),
(8625, 347, 'Bangco'),
(8626, 347, 'Bannawag'),
(8627, 347, 'Barangay I (Pob.)'),
(8628, 347, 'Barangay II (Pob.)'),
(8629, 347, 'Barangay III (Pob.)'),
(8630, 347, 'Barangay IV (Pob.)'),
(8631, 347, 'Baubo'),
(8632, 347, 'Bayanihan'),
(8633, 347, 'Bazal'),
(8634, 347, 'Cabituculan East'),
(8635, 347, 'Cabituculan West'),
(8636, 347, 'Debucao'),
(8637, 347, 'Decoliat'),
(8638, 347, 'Detailen'),
(8639, 347, 'Diaat'),
(8640, 347, 'Dialatman'),
(8641, 347, 'Diaman'),
(8642, 347, 'Dianawan'),
(8643, 347, 'Dikildit'),
(8644, 347, 'Dimanpudso'),
(8645, 347, 'Diome'),
(8646, 347, 'Estonilo'),
(8647, 347, 'Florida'),
(8648, 347, 'Galintuja'),
(8649, 347, 'Cadayacan'),
(8650, 347, 'Malasin'),
(8651, 347, 'Ponglo'),
(8652, 347, 'Quirino'),
(8653, 347, 'Ramada'),
(8654, 347, 'San Joaquin'),
(8655, 347, 'San Jose'),
(8656, 347, 'San Leonardo'),
(8657, 347, 'Santa Lucia'),
(8658, 347, 'Santo Tomas'),
(8659, 347, 'Suguit'),
(8660, 347, 'Villa Aurora'),
(8661, 347, 'Wenceslao'),
(8662, 347, 'San Juan'),
(8663, 348, 'Bacong'),
(8664, 348, 'Barangay I (Pob.)'),
(8665, 348, 'Barangay II (Pob.)'),
(8666, 348, 'Barangay III (Pob.)'),
(8667, 348, 'Barangay IV (Pob.)'),
(8668, 348, 'Dibalo'),
(8669, 348, 'Dibayabay'),
(8670, 348, 'Dibut'),
(8671, 348, 'Dikapinisan'),
(8672, 348, 'Dimanayat'),
(8673, 348, 'Diteki'),
(8674, 348, 'Ditumabo'),
(8675, 348, 'L. Pimentel'),
(8676, 348, 'Nonong Senior'),
(8677, 348, 'Real'),
(8678, 348, 'San Isidro'),
(8679, 348, 'San Jose'),
(8680, 348, 'Zarah'),
(8681, 349, 'Adia'),
(8682, 349, 'Bagong Sikat'),
(8683, 349, 'Balangon'),
(8684, 349, 'Bilibinwang'),
(8685, 349, 'Bangin'),
(8686, 349, 'Barigon'),
(8687, 349, 'Coral Na Munti'),
(8688, 349, 'Guitna'),
(8689, 349, 'Mabini'),
(8690, 349, 'Pamiga'),
(8691, 349, 'Panhulan'),
(8692, 349, 'Pansipit'),
(8693, 349, 'Poblacion'),
(8694, 349, 'Pook'),
(8695, 349, 'San Jacinto'),
(8696, 349, 'San Teodoro'),
(8697, 349, 'Santa Cruz'),
(8698, 349, 'Santo Tomas'),
(8699, 349, 'Subic Ibaba'),
(8700, 349, 'Subic Ilaya'),
(8701, 349, 'Banyaga'),
(8702, 350, 'Balagbag'),
(8703, 350, 'Concepcion'),
(8704, 350, 'Concordia'),
(8705, 350, 'Dalipit East'),
(8706, 350, 'Dalipit West'),
(8707, 350, 'Dominador East'),
(8708, 350, 'Dominador West'),
(8709, 350, 'Munlawin Sur'),
(8710, 350, 'Munlawin Norte'),
(8711, 350, 'Muzon Primero'),
(8712, 350, 'Muzon Segundo'),
(8713, 350, 'Pinagkurusan'),
(8714, 350, 'Ping-As'),
(8715, 350, 'Poblacion East'),
(8716, 350, 'Poblacion West'),
(8717, 350, 'San Jose'),
(8718, 350, 'Santa Cruz'),
(8719, 350, 'Tadlac'),
(8720, 350, 'San Juan'),
(8721, 351, 'Baclaran'),
(8722, 351, 'Barangay 1 (Pob.)'),
(8723, 351, 'Barangay 10 (Pob.)'),
(8724, 351, 'Barangay 11 (Pob.)'),
(8725, 351, 'Barangay 12 (Pob.)'),
(8726, 351, 'Barangay 2 (Pob.)'),
(8727, 351, 'Barangay 3 (Pob.)'),
(8728, 351, 'Barangay 4 (Pob.)'),
(8729, 351, 'Barangay 5 (Pob.)'),
(8730, 351, 'Barangay 6 (Pob.)'),
(8731, 351, 'Barangay 7 (Pob.)'),
(8732, 351, 'Barangay 8 (Pob.)'),
(8733, 351, 'Barangay 9 (Pob.)'),
(8734, 351, 'Calan'),
(8735, 351, 'Caloocan'),
(8736, 351, 'Calzada'),
(8737, 351, 'Canda'),
(8738, 351, 'Carenahan'),
(8739, 351, 'Caybunga'),
(8740, 351, 'Cayponce'),
(8741, 351, 'Dalig'),
(8742, 351, 'Dao'),
(8743, 351, 'Dilao'),
(8744, 351, 'Duhatan'),
(8745, 351, 'Durungao'),
(8746, 351, 'Gimalas'),
(8747, 351, 'Gumamela'),
(8748, 351, 'Lagnas'),
(8749, 351, 'Lanatan'),
(8750, 351, 'Langgangan'),
(8751, 351, 'Lucban Putol'),
(8752, 351, 'Lucban Pook'),
(8753, 351, 'Magabe'),
(8754, 351, 'Malalay'),
(8755, 351, 'Munting Tubig'),
(8756, 351, 'Navotas'),
(8757, 351, 'Patugo'),
(8758, 351, 'Palikpikan'),
(8759, 351, 'Pooc'),
(8760, 351, 'Sambat'),
(8761, 351, 'Sampaga'),
(8762, 351, 'San Juan'),
(8763, 351, 'San Piro'),
(8764, 351, 'Santol'),
(8765, 351, 'Sukol'),
(8766, 351, 'Tactac'),
(8767, 351, 'Taludtud'),
(8768, 351, 'Tanggoy'),
(8769, 352, 'Alangilan'),
(8770, 352, 'Calawit'),
(8771, 352, 'Looc'),
(8772, 352, 'Magapi'),
(8773, 352, 'Makina'),
(8774, 352, 'Malabanan'),
(8775, 352, 'Paligawan'),
(8776, 352, 'Palsara'),
(8777, 352, 'Poblacion'),
(8778, 352, 'Sala'),
(8779, 352, 'Sampalocan'),
(8780, 352, 'Solis'),
(8781, 352, 'San Sebastian'),
(8782, 353, 'Alangilan'),
(8783, 353, 'Balagtas'),
(8784, 353, 'Balete'),
(8785, 353, 'Banaba Center'),
(8786, 353, 'Banaba Kanluran'),
(8787, 353, 'Banaba Silangan'),
(8788, 353, 'Banaba Ibaba'),
(8789, 353, 'Bilogo'),
(8790, 353, 'Maapas'),
(8791, 353, 'Bolbok'),
(8792, 353, 'Bukal'),
(8793, 353, 'Calicanto'),
(8794, 353, 'Catandala'),
(8795, 353, 'Concepcion'),
(8796, 353, 'Conde Itaas'),
(8797, 353, 'Conde Labak'),
(8798, 353, 'Cuta'),
(8799, 353, 'Dalig'),
(8800, 353, 'Dela Paz'),
(8801, 353, 'Dela Paz Pulot Aplaya'),
(8802, 353, 'Dela Paz Pulot Itaas'),
(8803, 353, 'Domoclay'),
(8804, 353, 'Dumantay'),
(8805, 353, 'Gulod Itaas'),
(8806, 353, 'Gulod Labak'),
(8807, 353, 'Haligue Kanluran'),
(8808, 353, 'Haligue Silangan'),
(8809, 353, 'Ilihan'),
(8810, 353, 'Kumba'),
(8811, 353, 'Kumintang Ibaba'),
(8812, 353, 'Kumintang Ilaya'),
(8813, 353, 'Libjo'),
(8814, 353, 'Liponpon, Isla Verde'),
(8815, 353, 'Mahabang Dahilig'),
(8816, 353, 'Mahabang Parang'),
(8817, 353, 'Mahacot Silangan'),
(8818, 353, 'Mahacot Kanluran'),
(8819, 353, 'Malalim'),
(8820, 353, 'Malibayo'),
(8821, 353, 'Malitam'),
(8822, 353, 'Maruclap'),
(8823, 353, 'Mabacong'),
(8824, 353, 'Pagkilatan'),
(8825, 353, 'Paharang Kanluran'),
(8826, 353, 'Paharang Silangan'),
(8827, 353, 'Pallocan Silangan'),
(8828, 353, 'Pallocan Kanluran'),
(8829, 353, 'Pinamucan'),
(8830, 353, 'Pinamucan Ibaba'),
(8831, 353, 'Pinamucan Silangan'),
(8832, 353, 'Barangay 1 (Pob.)'),
(8833, 353, 'Barangay 10 (Pob.)'),
(8834, 353, 'Barangay 11 (Pob.)'),
(8835, 353, 'Barangay 12 (Pob.)'),
(8836, 353, 'Barangay 13 (Pob.)'),
(8837, 353, 'Barangay 14 (Pob.)'),
(8838, 353, 'Barangay 15 (Pob.)'),
(8839, 353, 'Barangay 16 (Pob.)'),
(8840, 353, 'Barangay 17 (Pob.)'),
(8841, 353, 'Barangay 18 (Pob.)'),
(8842, 353, 'Barangay 19 (Pob.)'),
(8843, 353, 'Barangay 2 (Pob.)'),
(8844, 353, 'Barangay 20 (Pob.)'),
(8845, 353, 'Barangay 21 (Pob.)'),
(8846, 353, 'Barangay 22 (Pob.)'),
(8847, 353, 'Barangay 23 (Pob.)'),
(8848, 353, 'Barangay 24 (Pob.)'),
(8849, 353, 'Barangay 3 (Pob.)'),
(8850, 353, 'Barangay 4 (Pob.)'),
(8851, 353, 'Barangay 5 (Pob.)'),
(8852, 353, 'Barangay 6 (Pob.)'),
(8853, 353, 'Barangay 7 (Pob.)'),
(8854, 353, 'Barangay 8 (Pob.)'),
(8855, 353, 'Barangay 9 (Pob.)'),
(8856, 353, 'Sampaga'),
(8857, 353, 'San Agapito, Isla Verde'),
(8858, 353, 'San Agustin Kanluran, Isla Verde'),
(8859, 353, 'San Agustin Silangan, Isla Verde'),
(8860, 353, 'San Andres, Isla Verde'),
(8861, 353, 'San Antonio, Isla Verde'),
(8862, 353, 'San Isidro'),
(8863, 353, 'San Jose Sico'),
(8864, 353, 'San Miguel'),
(8865, 353, 'San Pedro'),
(8866, 353, 'Santa Clara'),
(8867, 353, 'Santa Rita Aplaya'),
(8868, 353, 'Santa Rita Karsada'),
(8869, 353, 'Santo Domingo'),
(8870, 353, 'Santo Niño'),
(8871, 353, 'Simlong'),
(8872, 353, 'Sirang Lupa'),
(8873, 353, 'Sorosoro Ibaba'),
(8874, 353, 'Sorosoro Ilaya'),
(8875, 353, 'Sorosoro Karsada'),
(8876, 353, 'Tabangao Aplaya'),
(8877, 353, 'Tabangao Ambulong'),
(8878, 353, 'Tabangao Dao'),
(8879, 353, 'Talahib Pandayan'),
(8880, 353, 'Talahib Payapa'),
(8881, 353, 'Talumpok Kanluran'),
(8882, 353, 'Talumpok Silangan'),
(8883, 353, 'Tinga Itaas'),
(8884, 353, 'Tinga Labak'),
(8885, 353, 'Tulo'),
(8886, 353, 'Wawa'),
(8887, 354, 'Alagao'),
(8888, 354, 'Aplaya'),
(8889, 354, 'As-Is'),
(8890, 354, 'Bagong Silang'),
(8891, 354, 'Baguilawa'),
(8892, 354, 'Balayong'),
(8893, 354, 'Barangay I (Pob.)'),
(8894, 354, 'Barangay II (Pob.)'),
(8895, 354, 'Barangay III (Pob.)'),
(8896, 354, 'Barangay IV (Pob.)'),
(8897, 354, 'Bolo'),
(8898, 354, 'Colvo'),
(8899, 354, 'Cupang'),
(8900, 354, 'Durungao'),
(8901, 354, 'Gulibay'),
(8902, 354, 'Inicbulan'),
(8903, 354, 'Locloc'),
(8904, 354, 'Magalang-Galang'),
(8905, 354, 'Malindig'),
(8906, 354, 'Manalupong'),
(8907, 354, 'Manghinao Proper'),
(8908, 354, 'Manghinao Uno'),
(8909, 354, 'New Danglayan'),
(8910, 354, 'Orense'),
(8911, 354, 'Pitugo'),
(8912, 354, 'Rizal'),
(8913, 354, 'Sampaguita'),
(8914, 354, 'San Agustin'),
(8915, 354, 'San Andres Proper'),
(8916, 354, 'San Andres Uno'),
(8917, 354, 'San Diego'),
(8918, 354, 'San Miguel'),
(8919, 354, 'San Pablo'),
(8920, 354, 'San Pedro'),
(8921, 354, 'San Roque'),
(8922, 354, 'San Teodoro'),
(8923, 354, 'San Vicente'),
(8924, 354, 'Santa Maria'),
(8925, 354, 'Santo Domingo'),
(8926, 354, 'Sinala'),
(8927, 355, 'Bagong Tubig'),
(8928, 355, 'Baclas'),
(8929, 355, 'Balimbing'),
(8930, 355, 'Bambang'),
(8931, 355, 'Barangay 1 (Pob.)'),
(8932, 355, 'Barangay 2 (Pob.)'),
(8933, 355, 'Barangay 3 (Pob.)'),
(8934, 355, 'Barangay 4 (Pob.)'),
(8935, 355, 'Barangay 5 (Pob.)'),
(8936, 355, 'Barangay 6 (Pob.)'),
(8937, 355, 'Bisaya'),
(8938, 355, 'Cahil'),
(8939, 355, 'Caluangan'),
(8940, 355, 'Calantas'),
(8941, 355, 'Camastilisan'),
(8942, 355, 'Coral Ni Lopez'),
(8943, 355, 'Coral Ni Bacal'),
(8944, 355, 'Dacanlao'),
(8945, 355, 'Dila'),
(8946, 355, 'Loma'),
(8947, 355, 'Lumbang Calzada'),
(8948, 355, 'Lumbang Na Bata'),
(8949, 355, 'Lumbang Na Matanda'),
(8950, 355, 'Madalunot'),
(8951, 355, 'Makina'),
(8952, 355, 'Matipok'),
(8953, 355, 'Munting Coral'),
(8954, 355, 'Niyugan'),
(8955, 355, 'Pantay'),
(8956, 355, 'Puting Bato West'),
(8957, 355, 'Puting Kahoy'),
(8958, 355, 'Puting Bato East'),
(8959, 355, 'Quisumbing'),
(8960, 355, 'Salong'),
(8961, 355, 'San Rafael'),
(8962, 355, 'Sinisian'),
(8963, 355, 'Taklang Anak'),
(8964, 355, 'Talisay'),
(8965, 355, 'Tamayo'),
(8966, 355, 'Timbain'),
(8967, 356, 'Bagong Silang'),
(8968, 356, 'Baha'),
(8969, 356, 'Balibago'),
(8970, 356, 'Balitoc'),
(8971, 356, 'Biga'),
(8972, 356, 'Bucal'),
(8973, 356, 'Carlosa'),
(8974, 356, 'Carretunan'),
(8975, 356, 'Encarnacion'),
(8976, 356, 'Gulod'),
(8977, 356, 'Hukay'),
(8978, 356, 'Lucsuhin'),
(8979, 356, 'Luya'),
(8980, 356, 'Paraiso'),
(8981, 356, 'Barangay 1 (Pob.)'),
(8982, 356, 'Barangay 2 (Pob.)'),
(8983, 356, 'Barangay 3 (Pob.)'),
(8984, 356, 'Barangay 4 (Pob.)'),
(8985, 356, 'Quilitisan'),
(8986, 356, 'Real'),
(8987, 356, 'Sambungan'),
(8988, 356, 'Santa Ana'),
(8989, 356, 'Talibayog'),
(8990, 356, 'Talisay'),
(8991, 356, 'Tanagan'),
(8992, 357, 'Balagbag'),
(8993, 357, 'Bungahan'),
(8994, 357, 'Calumayin'),
(8995, 357, 'Dalipit East'),
(8996, 357, 'Dalipit West'),
(8997, 357, 'Dita'),
(8998, 357, 'Don Juan'),
(8999, 357, 'Emmanuel'),
(9000, 357, 'Ibabao'),
(9001, 357, 'Labac'),
(9002, 357, 'Pinagkaisahan'),
(9003, 357, 'San Felipe'),
(9004, 357, 'San Isidro'),
(9005, 357, 'Barangay 1 (Pob.)'),
(9006, 357, 'Barangay 2 (Pob.)'),
(9007, 357, 'Barangay 3 (Pob.)'),
(9008, 357, 'Barangay 4 (Pob.)'),
(9009, 357, 'Barangay 5 (Pob.)'),
(9010, 357, 'Barangay 6 (Pob.)'),
(9011, 357, 'Barangay 7 (Pob.)'),
(9012, 357, 'Barangay 8 (Pob.)'),
(9013, 358, 'Bago'),
(9014, 358, 'Balanga'),
(9015, 358, 'Bungahan'),
(9016, 358, 'Calamias'),
(9017, 358, 'Catandala'),
(9018, 358, 'Coliat'),
(9019, 358, 'Dayapan'),
(9020, 358, 'Lapu-lapu'),
(9021, 358, 'Lucsuhin'),
(9022, 358, 'Mabalor'),
(9023, 358, 'Malainin'),
(9024, 358, 'Matala'),
(9025, 358, 'Munting-Tubig'),
(9026, 358, 'Palindan'),
(9027, 358, 'Pangao'),
(9028, 358, 'Panghayaan'),
(9029, 358, 'Poblacion'),
(9030, 358, 'Quilo'),
(9031, 358, 'Sabang'),
(9032, 358, 'Salaban I'),
(9033, 358, 'San Agustin'),
(9034, 358, 'Sandalan'),
(9035, 358, 'Santo Niño'),
(9036, 358, 'Talaibon'),
(9037, 358, 'Tulay Na Patpat'),
(9038, 358, 'Salaban II'),
(9039, 359, 'As-Is'),
(9040, 359, 'Balakilong'),
(9041, 359, 'Berinayan'),
(9042, 359, 'Bugaan East'),
(9043, 359, 'Bugaan West'),
(9044, 359, 'Buso-buso'),
(9045, 359, 'Dayap Itaas'),
(9046, 359, 'Gulod'),
(9047, 359, 'J. Leviste'),
(9048, 359, 'Molinete'),
(9049, 359, 'Niyugan'),
(9050, 359, 'Paliparan'),
(9051, 359, 'Barangay 1 (Pob.)'),
(9052, 359, 'Barangay 2 (Pob.)'),
(9053, 359, 'Barangay 3 (Pob.)'),
(9054, 359, 'Barangay 4 (Pob.)'),
(9055, 359, 'Barangay 5 (Pob.)'),
(9056, 359, 'San Gabriel'),
(9057, 359, 'San Gregorio'),
(9058, 359, 'Santa Maria'),
(9059, 359, 'Ticub'),
(9060, 360, 'Anak-Dagat'),
(9061, 360, 'Arumahan'),
(9062, 360, 'Ayao-iyao'),
(9063, 360, 'Bagong Pook'),
(9064, 360, 'Bagong Sikat'),
(9065, 360, 'Balanga'),
(9066, 360, 'Bukal'),
(9067, 360, 'Cahilan I'),
(9068, 360, 'Cahilan II'),
(9069, 360, 'Dayapan'),
(9070, 360, 'Dita'),
(9071, 360, 'Gulod'),
(9072, 360, 'Lucky'),
(9073, 360, 'Maguihan'),
(9074, 360, 'Mahabang Dahilig'),
(9075, 360, 'Mahayahay'),
(9076, 360, 'Maigsing Dahilig'),
(9077, 360, 'Maligaya'),
(9078, 360, 'Malinis'),
(9079, 360, 'Masalisi'),
(9080, 360, 'Mataas Na Bayan'),
(9081, 360, 'Matingain I'),
(9082, 360, 'Matingain II'),
(9083, 360, 'Mayasang'),
(9084, 360, 'Niugan'),
(9085, 360, 'Nonong Casto'),
(9086, 360, 'Palanas'),
(9087, 360, 'Payapa Ibaba'),
(9088, 360, 'Payapa Ilaya'),
(9089, 360, 'District I (Pob.)'),
(9090, 360, 'District II (Pob.)'),
(9091, 360, 'District III (Pob.)'),
(9092, 360, 'District IV (Pob.)'),
(9093, 360, 'Rizal'),
(9094, 360, 'Sambal Ibaba'),
(9095, 360, 'Sambal Ilaya'),
(9096, 360, 'San Isidro Ibaba'),
(9097, 360, 'San Isidro Itaas'),
(9098, 360, 'Sangalang'),
(9099, 360, 'Talaga'),
(9100, 360, 'Tubigan'),
(9101, 360, 'Tubuan'),
(9102, 360, 'Wawa Ibaba'),
(9103, 360, 'Wawa Ilaya'),
(9104, 360, 'Sinisian East'),
(9105, 360, 'Sinisian West'),
(9106, 361, 'Bagong Pook'),
(9107, 361, 'Balibago'),
(9108, 361, 'Binubusan'),
(9109, 361, 'Bungahan'),
(9110, 361, 'Cumba'),
(9111, 361, 'Humayingan'),
(9112, 361, 'Kapito'),
(9113, 361, 'Lumaniag'),
(9114, 361, 'Luyahan'),
(9115, 361, 'Malaruhatan'),
(9116, 361, 'Matabungkay'),
(9117, 361, 'Barangay 1 (Pob.)'),
(9118, 361, 'Barangay 2 (Pob.)'),
(9119, 361, 'Barangay 3 (Pob.)'),
(9120, 361, 'Barangay 4 (Pob.)'),
(9121, 361, 'Barangay 5 (Pob.)'),
(9122, 361, 'Prenza'),
(9123, 361, 'Puting-Kahoy'),
(9124, 361, 'San Diego'),
(9125, 362, 'Adya'),
(9126, 362, 'Anilao'),
(9127, 362, 'Anilao-Labac'),
(9128, 362, 'Antipolo Del Norte'),
(9129, 362, 'Antipolo Del Sur'),
(9130, 362, 'Bagong Pook'),
(9131, 362, 'San Sebastian'),
(9132, 362, 'Balintawak'),
(9133, 362, 'Banaybanay'),
(9134, 362, 'Bolbok'),
(9135, 362, 'Bugtong na Pulo'),
(9136, 362, 'Bulacnin'),
(9137, 362, 'Bulaklakan'),
(9138, 362, 'Calamias'),
(9139, 362, 'Cumba'),
(9140, 362, 'Dagatan'),
(9141, 362, 'Duhatan'),
(9142, 362, 'Halang'),
(9143, 362, 'Inosloban'),
(9144, 362, 'Kayumanggi'),
(9145, 362, 'Latag'),
(9146, 362, 'Lodlod'),
(9147, 362, 'Lumbang'),
(9148, 362, 'Mabini'),
(9149, 362, 'Malagonlong'),
(9150, 362, 'Malitlit'),
(9151, 362, 'Marauoy'),
(9152, 362, 'Mataas Na Lupa'),
(9153, 362, 'Munting Pulo'),
(9154, 362, 'Pagolingin Bata'),
(9155, 362, 'Pagolingin East'),
(9156, 362, 'Pagolingin West'),
(9157, 362, 'Pangao'),
(9158, 362, 'Pinagkawitan'),
(9159, 362, 'Pinagtongulan'),
(9160, 362, 'Plaridel'),
(9161, 362, 'Poblacion Barangay 1'),
(9162, 362, 'Poblacion Barangay 10'),
(9163, 362, 'Poblacion Barangay 11'),
(9164, 362, 'Poblacion Barangay 2'),
(9165, 362, 'Poblacion Barangay 3'),
(9166, 362, 'Poblacion Barangay 4'),
(9167, 362, 'Poblacion Barangay 5'),
(9168, 362, 'Poblacion Barangay 6'),
(9169, 362, 'Poblacion Barangay 7'),
(9170, 362, 'Poblacion Barangay 8'),
(9171, 362, 'Poblacion Barangay 9'),
(9172, 362, 'Pusil'),
(9173, 362, 'Quezon'),
(9174, 362, 'Rizal'),
(9175, 362, 'Sabang'),
(9176, 362, 'Sampaguita'),
(9177, 362, 'San Benito'),
(9178, 362, 'San Carlos'),
(9179, 362, 'San Celestino'),
(9180, 362, 'San Francisco'),
(9181, 362, 'San Guillermo'),
(9182, 362, 'San Jose'),
(9183, 362, 'San Lucas'),
(9184, 362, 'San Salvador'),
(9185, 362, 'Sapac'),
(9186, 362, 'Sico'),
(9187, 362, 'Santo Niño'),
(9188, 362, 'Santo Toribio'),
(9189, 362, 'Talisay'),
(9190, 362, 'Tambo'),
(9191, 362, 'Tangob'),
(9192, 362, 'Tanguay'),
(9193, 362, 'Tibig'),
(9194, 362, 'Tipacan'),
(9195, 362, 'Poblacion Barangay 9-A'),
(9196, 362, 'Barangay 12 (Pob.)'),
(9197, 363, 'Apar'),
(9198, 363, 'Balatbat'),
(9199, 363, 'Balibago'),
(9200, 363, 'Banalo'),
(9201, 363, 'Biga'),
(9202, 363, 'Bignay'),
(9203, 363, 'Calo'),
(9204, 363, 'Calumpit'),
(9205, 363, 'Fabrica'),
(9206, 363, 'Jaybanga'),
(9207, 363, 'Lagadlarin'),
(9208, 363, 'Mabilog Na Bundok'),
(9209, 363, 'Malabrigo'),
(9210, 363, 'Malalim Na Sanog'),
(9211, 363, 'Malapad Na Parang'),
(9212, 363, 'Masaguitsit'),
(9213, 363, 'Nagtalongtong'),
(9214, 363, 'Nagtoctoc'),
(9215, 363, 'Olo-olo'),
(9216, 363, 'Pinaghawanan'),
(9217, 363, 'San Miguel'),
(9218, 363, 'San Nicolas'),
(9219, 363, 'Sawang'),
(9220, 363, 'Soloc'),
(9221, 363, 'Tayuman'),
(9222, 363, 'Poblacion'),
(9223, 364, 'Anilao Proper'),
(9224, 364, 'Anilao East'),
(9225, 364, 'Bagalangit'),
(9226, 364, 'Bulacan'),
(9227, 364, 'Calamias'),
(9228, 364, 'Estrella'),
(9229, 364, 'Gasang'),
(9230, 364, 'Laurel'),
(9231, 364, 'Ligaya'),
(9232, 364, 'Mainaga'),
(9233, 364, 'Mainit'),
(9234, 364, 'Majuben'),
(9235, 364, 'Malimatoc I'),
(9236, 364, 'Malimatoc II'),
(9237, 364, 'Nag-Iba'),
(9238, 364, 'Pilahan'),
(9239, 364, 'Poblacion'),
(9240, 364, 'Pulang Lupa'),
(9241, 364, 'Pulong Anahao'),
(9242, 364, 'Pulong Balibaguhan'),
(9243, 364, 'Pulong Niogan'),
(9244, 364, 'Saguing'),
(9245, 364, 'Sampaguita'),
(9246, 364, 'San Francisco'),
(9247, 364, 'San Jose'),
(9248, 364, 'San Juan'),
(9249, 364, 'San Teodoro'),
(9250, 364, 'Santa Ana'),
(9251, 364, 'Santa Mesa'),
(9252, 364, 'Santo Niño'),
(9253, 364, 'Santo Tomas'),
(9254, 364, 'Solo'),
(9255, 364, 'Talaga Proper'),
(9256, 364, 'Talaga East'),
(9257, 365, 'Bagong Pook'),
(9258, 365, 'Bilucao'),
(9259, 365, 'Bulihan'),
(9260, 365, 'San Gregorio'),
(9261, 365, 'Luta Del Norte'),
(9262, 365, 'Luta Del Sur'),
(9263, 365, 'Poblacion'),
(9264, 365, 'San Andres'),
(9265, 365, 'San Fernando'),
(9266, 365, 'San Isidro East'),
(9267, 365, 'San Juan'),
(9268, 365, 'San Pedro II'),
(9269, 365, 'San Pedro I'),
(9270, 365, 'San Pioquinto'),
(9271, 365, 'Santiago'),
(9272, 366, 'District I (Pob.)'),
(9273, 366, 'District II (Pob.)'),
(9274, 366, 'District III (Pob.)'),
(9275, 366, 'District IV (Pob.)'),
(9276, 366, 'Bayorbor'),
(9277, 366, 'Bubuyan'),
(9278, 366, 'Calingatan'),
(9279, 366, 'Kinalaglagan'),
(9280, 366, 'Loob'),
(9281, 366, 'Lumang Lipa'),
(9282, 366, 'Manggahan'),
(9283, 366, 'Nangkaan'),
(9284, 366, 'San Sebastian'),
(9285, 366, 'Santol'),
(9286, 366, 'Upa'),
(9287, 366, 'Barangay II-A (Pob.)'),
(9288, 367, 'Aga'),
(9289, 367, 'Balaytigui'),
(9290, 367, 'Banilad'),
(9291, 367, 'Barangay 10 (Pob.)'),
(9292, 367, 'Barangay 11 (Pob.)'),
(9293, 367, 'Barangay 12 (Pob.)'),
(9294, 367, 'Barangay 2 (Pob.)'),
(9295, 367, 'Barangay 3 (Pob.)'),
(9296, 367, 'Barangay 4 (Pob.)'),
(9297, 367, 'Barangay 5 (Pob.)'),
(9298, 367, 'Barangay 6 (Pob.)'),
(9299, 367, 'Barangay 7 (Pob.)'),
(9300, 367, 'Barangay 8 (Pob.)'),
(9301, 367, 'Barangay 9 (Pob.)'),
(9302, 367, 'Bilaran'),
(9303, 367, 'Bucana'),
(9304, 367, 'Bulihan'),
(9305, 367, 'Bunducan'),
(9306, 367, 'Butucan'),
(9307, 367, 'Calayo'),
(9308, 367, 'Catandaan'),
(9309, 367, 'Kaylaway'),
(9310, 367, 'Kayrilaw'),
(9311, 367, 'Cogunan'),
(9312, 367, 'Dayap'),
(9313, 367, 'Latag'),
(9314, 367, 'Looc'),
(9315, 367, 'Lumbangan'),
(9316, 367, 'Malapad Na Bato'),
(9317, 367, 'Mataas Na Pulo'),
(9318, 367, 'Maugat'),
(9319, 367, 'Munting Indan'),
(9320, 367, 'Natipuan'),
(9321, 367, 'Pantalan'),
(9322, 367, 'Papaya'),
(9323, 367, 'Putat'),
(9324, 367, 'Reparo'),
(9325, 367, 'Talangan'),
(9326, 367, 'Tumalim'),
(9327, 367, 'Utod'),
(9328, 367, 'Wawa'),
(9329, 367, 'Barangay 1 (Pob.)'),
(9330, 368, 'Banaba'),
(9331, 368, 'Banaybanay'),
(9332, 368, 'Bawi'),
(9333, 368, 'Bukal'),
(9334, 368, 'Castillo'),
(9335, 368, 'Cawongan'),
(9336, 368, 'Manggas'),
(9337, 368, 'Maugat East'),
(9338, 368, 'Maugat West'),
(9339, 368, 'Pansol'),
(9340, 368, 'Payapa'),
(9341, 368, 'Poblacion'),
(9342, 368, 'Quilo-quilo North'),
(9343, 368, 'Quilo-quilo South'),
(9344, 368, 'San Felipe'),
(9345, 368, 'San Miguel'),
(9346, 368, 'Tamak'),
(9347, 368, 'Tangob'),
(9348, 369, 'Alupay'),
(9349, 369, 'Antipolo'),
(9350, 369, 'Bagong Pook'),
(9351, 369, 'Balibago'),
(9352, 369, 'Bayawang'),
(9353, 369, 'Baybayin'),
(9354, 369, 'Bulihan'),
(9355, 369, 'Cahigam'),
(9356, 369, 'Calantas'),
(9357, 369, 'Colongan'),
(9358, 369, 'Itlugan'),
(9359, 369, 'Lumbangan'),
(9360, 369, 'Maalas-As'),
(9361, 369, 'Mabato'),
(9362, 369, 'Mabunga'),
(9363, 369, 'Macalamcam A'),
(9364, 369, 'Macalamcam B'),
(9365, 369, 'Malaya'),
(9366, 369, 'Maligaya'),
(9367, 369, 'Marilag'),
(9368, 369, 'Masaya'),
(9369, 369, 'Matamis'),
(9370, 369, 'Mavalor'),
(9371, 369, 'Mayuro'),
(9372, 369, 'Namuco'),
(9373, 369, 'Namunga'),
(9374, 369, 'Natu'),
(9375, 369, 'Nasi'),
(9376, 369, 'Palakpak'),
(9377, 369, 'Pinagsibaan'),
(9378, 369, 'Barangay A (Pob.)'),
(9379, 369, 'Barangay B (Pob.)'),
(9380, 369, 'Barangay C (Pob.)'),
(9381, 369, 'Barangay D (Pob.)'),
(9382, 369, 'Barangay E (Pob.)'),
(9383, 369, 'Putingkahoy'),
(9384, 369, 'Quilib'),
(9385, 369, 'Salao'),
(9386, 369, 'San Carlos'),
(9387, 369, 'San Ignacio'),
(9388, 369, 'San Isidro'),
(9389, 369, 'San Jose'),
(9390, 369, 'San Roque'),
(9391, 369, 'Santa Cruz'),
(9392, 369, 'Timbugan'),
(9393, 369, 'Tiquiwan'),
(9394, 369, 'Leviste'),
(9395, 369, 'Tulos'),
(9396, 370, 'Aguila'),
(9397, 370, 'Anus'),
(9398, 370, 'Aya'),
(9399, 370, 'Bagong Pook'),
(9400, 370, 'Balagtasin'),
(9401, 370, 'Balagtasin I'),
(9402, 370, 'Banaybanay I'),
(9403, 370, 'Banaybanay II'),
(9404, 370, 'Bigain I'),
(9405, 370, 'Bigain II'),
(9406, 370, 'Calansayan'),
(9407, 370, 'Dagatan'),
(9408, 370, 'Don Luis'),
(9409, 370, 'Galamay-Amo'),
(9410, 370, 'Lalayat'),
(9411, 370, 'Lapolapo I'),
(9412, 370, 'Lapolapo II'),
(9413, 370, 'Lepute'),
(9414, 370, 'Lumil'),
(9415, 370, 'Natunuan'),
(9416, 370, 'Palanca'),
(9417, 370, 'Pinagtung-Ulan'),
(9418, 370, 'Poblacion Barangay I'),
(9419, 370, 'Poblacion Barangay II'),
(9420, 370, 'Poblacion Barangay III'),
(9421, 370, 'Poblacion Barangay IV'),
(9422, 370, 'Sabang'),
(9423, 370, 'Salaban'),
(9424, 370, 'Santo Cristo'),
(9425, 370, 'Mojon-Tampoy'),
(9426, 370, 'Taysan'),
(9427, 370, 'Tugtug'),
(9428, 370, 'Bigain South'),
(9429, 371, 'Abung'),
(9430, 371, 'Balagbag'),
(9431, 371, 'Barualte'),
(9432, 371, 'Bataan'),
(9433, 371, 'Buhay Na Sapa'),
(9434, 371, 'Bulsa'),
(9435, 371, 'Calicanto'),
(9436, 371, 'Calitcalit'),
(9437, 371, 'Calubcub I'),
(9438, 371, 'Calubcub II'),
(9439, 371, 'Catmon'),
(9440, 371, 'Coloconto'),
(9441, 371, 'Escribano'),
(9442, 371, 'Hugom'),
(9443, 371, 'Imelda'),
(9444, 371, 'Janaojanao'),
(9445, 371, 'Laiya-Ibabao'),
(9446, 371, 'Laiya-Aplaya'),
(9447, 371, 'Libato'),
(9448, 371, 'Lipahan'),
(9449, 371, 'Mabalanoy'),
(9450, 371, 'Nagsaulay'),
(9451, 371, 'Maraykit'),
(9452, 371, 'Muzon'),
(9453, 371, 'Palahanan I'),
(9454, 371, 'Palahanan II'),
(9455, 371, 'Palingowak'),
(9456, 371, 'Pinagbayanan'),
(9457, 371, 'Poblacion'),
(9458, 371, 'Poctol'),
(9459, 371, 'Pulangbato'),
(9460, 371, 'Putingbuhangin'),
(9461, 371, 'Quipot'),
(9462, 371, 'Sampiro'),
(9463, 371, 'Sapangan'),
(9464, 371, 'Sico I'),
(9465, 371, 'Sico II'),
(9466, 371, 'Subukin'),
(9467, 371, 'Talahiban I'),
(9468, 371, 'Talahiban II'),
(9469, 371, 'Ticalan'),
(9470, 371, 'Tipaz'),
(9471, 372, 'Abiacao'),
(9472, 372, 'Bagong Tubig'),
(9473, 372, 'Balagtasin'),
(9474, 372, 'Balite'),
(9475, 372, 'Banoyo'),
(9476, 372, 'Boboy'),
(9477, 372, 'Bonliw'),
(9478, 372, 'Calumpang West'),
(9479, 372, 'Calumpang East'),
(9480, 372, 'Dulangan'),
(9481, 372, 'Durungao'),
(9482, 372, 'Locloc'),
(9483, 372, 'Luya'),
(9484, 372, 'Mahabang Parang'),
(9485, 372, 'Manggahan'),
(9486, 372, 'Muzon'),
(9487, 372, 'San Antonio'),
(9488, 372, 'San Isidro'),
(9489, 372, 'San Jose'),
(9490, 372, 'San Martin'),
(9491, 372, 'Santa Monica'),
(9492, 372, 'Taliba'),
(9493, 372, 'Talon'),
(9494, 372, 'Tejero'),
(9495, 372, 'Tungal'),
(9496, 372, 'Poblacion'),
(9497, 373, 'Abelo'),
(9498, 373, 'Balete'),
(9499, 373, 'Baluk-baluk'),
(9500, 373, 'Bancoro'),
(9501, 373, 'Bangin'),
(9502, 373, 'Calangay'),
(9503, 373, 'Hipit'),
(9504, 373, 'Maabud North'),
(9505, 373, 'Maabud South'),
(9506, 373, 'Munlawin'),
(9507, 373, 'Pansipit'),
(9508, 373, 'Poblacion'),
(9509, 373, 'Santo Niño'),
(9510, 373, 'Sinturisan'),
(9511, 373, 'Tagudtod'),
(9512, 373, 'Talang'),
(9513, 373, 'Alas-as'),
(9514, 373, 'Pulang-Bato'),
(9515, 374, 'Alalum'),
(9516, 374, 'Antipolo'),
(9517, 374, 'Balimbing'),
(9518, 374, 'Banaba'),
(9519, 374, 'Bayanan'),
(9520, 374, 'Danglayan'),
(9521, 374, 'Del Pilar'),
(9522, 374, 'Gelerang Kawayan'),
(9523, 374, 'Ilat North'),
(9524, 374, 'Ilat South'),
(9525, 374, 'Kaingin'),
(9526, 374, 'Laurel'),
(9527, 374, 'Malaking Pook'),
(9528, 374, 'Mataas Na Lupa'),
(9529, 374, 'Natunuan North'),
(9530, 374, 'Natunuan South'),
(9531, 374, 'Padre Castillo'),
(9532, 374, 'Palsahingin'),
(9533, 374, 'Pila'),
(9534, 374, 'Poblacion'),
(9535, 374, 'Pook Ni Banal'),
(9536, 374, 'Pook Ni Kapitan'),
(9537, 374, 'Resplandor'),
(9538, 374, 'Sambat'),
(9539, 374, 'San Antonio'),
(9540, 374, 'San Mariano'),
(9541, 374, 'San Mateo'),
(9542, 374, 'Santa Elena'),
(9543, 374, 'Santo Niño'),
(9544, 375, 'Antipolo'),
(9545, 375, 'Bihis'),
(9546, 375, 'Burol'),
(9547, 375, 'Calayaan'),
(9548, 375, 'Calumala'),
(9549, 375, 'Cuta East'),
(9550, 375, 'Cutang Cawayan'),
(9551, 375, 'Irukan'),
(9552, 375, 'Pacifico'),
(9553, 375, 'Poblacion I'),
(9554, 375, 'Saimsim'),
(9555, 375, 'Sampa'),
(9556, 375, 'Sinipian'),
(9557, 375, 'Tambo Ibaba'),
(9558, 375, 'Tambo Ilaya'),
(9559, 375, 'Poblacion II'),
(9560, 375, 'Poblacion III'),
(9561, 376, 'Barangay I (Pob.)'),
(9562, 376, 'Barangay II (Pob.)'),
(9563, 376, 'Barangay III (Pob.)'),
(9564, 376, 'Barangay IV (Pob.)'),
(9565, 376, 'San Agustin'),
(9566, 376, 'San Antonio'),
(9567, 376, 'San Bartolome'),
(9568, 376, 'San Felix'),
(9569, 376, 'San Fernando'),
(9570, 376, 'San Francisco'),
(9571, 376, 'San Isidro Norte'),
(9572, 376, 'San Isidro Sur'),
(9573, 376, 'San Joaquin'),
(9574, 376, 'San Jose'),
(9575, 376, 'San Juan'),
(9576, 376, 'San Luis'),
(9577, 376, 'San Miguel'),
(9578, 376, 'San Pablo'),
(9579, 376, 'San Pedro'),
(9580, 376, 'San Rafael'),
(9581, 376, 'San Roque'),
(9582, 376, 'San Vicente'),
(9583, 376, 'Santa Ana'),
(9584, 376, 'Santa Anastacia'),
(9585, 376, 'Santa Clara'),
(9586, 376, 'Santa Cruz'),
(9587, 376, 'Santa Elena'),
(9588, 376, 'Santa Maria'),
(9589, 376, 'Santiago'),
(9590, 376, 'Santa Teresita'),
(9591, 377, 'Apacay'),
(9592, 377, 'Balisong'),
(9593, 377, 'Bihis'),
(9594, 377, 'Bolbok'),
(9595, 377, 'Buli'),
(9596, 377, 'Butong'),
(9597, 377, 'Carasuche'),
(9598, 377, 'Cawit'),
(9599, 377, 'Caysasay'),
(9600, 377, 'Cubamba'),
(9601, 377, 'Cultihan'),
(9602, 377, 'Gahol'),
(9603, 377, 'Halang'),
(9604, 377, 'Iba'),
(9605, 377, 'Ilog'),
(9606, 377, 'Imamawo'),
(9607, 377, 'Ipil'),
(9608, 377, 'Luntal'),
(9609, 377, 'Mahabang Lodlod'),
(9610, 377, 'Niogan'),
(9611, 377, 'Pansol'),
(9612, 377, 'Poblacion 11'),
(9613, 377, 'Poblacion 1'),
(9614, 377, 'Poblacion 10'),
(9615, 377, 'Poblacion 12'),
(9616, 377, 'Poblacion 2'),
(9617, 377, 'Poblacion 3'),
(9618, 377, 'Poblacion 4'),
(9619, 377, 'Poblacion 5'),
(9620, 377, 'Poblacion 6'),
(9621, 377, 'Poblacion 7'),
(9622, 377, 'Poblacion 8'),
(9623, 377, 'Poblacion 9'),
(9624, 377, 'Pook'),
(9625, 377, 'Seiran'),
(9626, 377, 'Laguile'),
(9627, 377, 'Latag'),
(9628, 377, 'Tierra Alta'),
(9629, 377, 'Tulo'),
(9630, 377, 'Tatlong Maria'),
(9631, 377, 'Poblacion 13'),
(9632, 377, 'Poblacion 14'),
(9633, 378, 'Aya'),
(9634, 378, 'Balas'),
(9635, 378, 'Banga'),
(9636, 378, 'Buco'),
(9637, 378, 'Caloocan'),
(9638, 378, 'Leynes'),
(9639, 378, 'Miranda'),
(9640, 378, 'Poblacion Barangay 1'),
(9641, 378, 'Poblacion Barangay 2'),
(9642, 378, 'Poblacion Barangay 3'),
(9643, 378, 'Poblacion Barangay 4'),
(9644, 378, 'Poblacion Barangay 5'),
(9645, 378, 'Poblacion Barangay 6'),
(9646, 378, 'Poblacion Barangay 7'),
(9647, 378, 'Poblacion Barangay 8'),
(9648, 378, 'Quiling'),
(9649, 378, 'Sampaloc'),
(9650, 378, 'San Guillermo'),
(9651, 378, 'Santa Maria'),
(9652, 378, 'Tranca'),
(9653, 378, 'Tumaway'),
(9654, 379, 'Altura Bata'),
(9655, 379, 'Altura Matanda'),
(9656, 379, 'Altura-South'),
(9657, 379, 'Ambulong'),
(9658, 379, 'Banadero'),
(9659, 379, 'Bagbag'),
(9660, 379, 'Bagumbayan'),
(9661, 379, 'Balele'),
(9662, 379, 'Banjo East'),
(9663, 379, 'Banjo Laurel'),
(9664, 379, 'Bilog-bilog'),
(9665, 379, 'Boot'),
(9666, 379, 'Cale'),
(9667, 379, 'Darasa'),
(9668, 379, 'Pagaspas'),
(9669, 379, 'Gonzales'),
(9670, 379, 'Hidalgo'),
(9671, 379, 'Janopol'),
(9672, 379, 'Janopol Oriental'),
(9673, 379, 'Laurel'),
(9674, 379, 'Luyos'),
(9675, 379, 'Mabini'),
(9676, 379, 'Malaking Pulo'),
(9677, 379, 'Maria Paz'),
(9678, 379, 'Maugat'),
(9679, 379, 'Montaña'),
(9680, 379, 'Natatas'),
(9681, 379, 'Pantay Matanda'),
(9682, 379, 'Pantay Bata'),
(9683, 379, 'Poblacion Barangay 1'),
(9684, 379, 'Poblacion Barangay 2'),
(9685, 379, 'Poblacion Barangay 3'),
(9686, 379, 'Poblacion Barangay 4'),
(9687, 379, 'Poblacion Barangay 5'),
(9688, 379, 'Poblacion Barangay 6'),
(9689, 379, 'Poblacion Barangay 7'),
(9690, 379, 'Sala'),
(9691, 379, 'Sambat'),
(9692, 379, 'San Jose'),
(9693, 379, 'Santol'),
(9694, 379, 'Santor'),
(9695, 379, 'Sulpoc'),
(9696, 379, 'Suplang'),
(9697, 379, 'Talaga'),
(9698, 379, 'Tinurik'),
(9699, 379, 'Trapiche'),
(9700, 379, 'Ulango'),
(9701, 379, 'Wawa'),
(9702, 380, 'Bacao'),
(9703, 380, 'Bilogo'),
(9704, 380, 'Bukal'),
(9705, 380, 'Dagatan'),
(9706, 380, 'Guinhawa'),
(9707, 380, 'Laurel'),
(9708, 380, 'Mabayabas'),
(9709, 380, 'Mahanadiong'),
(9710, 380, 'Mapulo'),
(9711, 380, 'Mataas Na Lupa'),
(9712, 380, 'Pag-Asa'),
(9713, 380, 'Panghayaan'),
(9714, 380, 'Piña'),
(9715, 380, 'Pinagbayanan'),
(9716, 380, 'Poblacion East'),
(9717, 380, 'Poblacion West'),
(9718, 380, 'San Isidro'),
(9719, 380, 'San Marcelino'),
(9720, 380, 'Santo Niño'),
(9721, 380, 'Tilambo'),
(9722, 381, 'Corona'),
(9723, 381, 'Gamao'),
(9724, 381, 'Makawayan'),
(9725, 381, 'Marikaban'),
(9726, 381, 'Papaya'),
(9727, 381, 'Pisa'),
(9728, 381, 'Barangay 13'),
(9729, 381, 'Barangay 14'),
(9730, 381, 'Barangay 15'),
(9731, 381, 'San Isidro'),
(9732, 381, 'San Jose'),
(9733, 381, 'San Juan'),
(9734, 381, 'San Pedro'),
(9735, 381, 'Santo Tomas'),
(9736, 381, 'Talahib'),
(9737, 382, 'Acle'),
(9738, 382, 'Bayudbud'),
(9739, 382, 'Bolboc'),
(9740, 382, 'Dalima'),
(9741, 382, 'Dao'),
(9742, 382, 'Guinhawa'),
(9743, 382, 'Lumbangan'),
(9744, 382, 'Luntal'),
(9745, 382, 'Magahis'),
(9746, 382, 'Malibu'),
(9747, 382, 'Mataywanac'),
(9748, 382, 'Palincaro'),
(9749, 382, 'Luna (Pob.)'),
(9750, 382, 'Burgos (Pob.)'),
(9751, 382, 'Rizal (Pob.)'),
(9752, 382, 'Rillo (Pob.)'),
(9753, 382, 'Putol'),
(9754, 382, 'Sabang'),
(9755, 382, 'San Jose'),
(9756, 382, 'Talon'),
(9757, 382, 'Toong'),
(9758, 382, 'Tuyon-tuyon'),
(9759, 383, 'Amuyong'),
(9760, 383, 'Barangay I (Pob.)'),
(9761, 383, 'Barangay II (Pob.)'),
(9762, 383, 'Barangay III (Pob.)'),
(9763, 383, 'Barangay IV (Pob.)'),
(9764, 383, 'Barangay V (Pob.)'),
(9765, 383, 'Buck Estate'),
(9766, 383, 'Esperanza Ibaba'),
(9767, 383, 'Kaytitinga I'),
(9768, 383, 'Luksuhin'),
(9769, 383, 'Mangas I'),
(9770, 383, 'Marahan I'),
(9771, 383, 'Matagbak I'),
(9772, 383, 'Pajo'),
(9773, 383, 'Sikat'),
(9774, 383, 'Sinaliw Malaki'),
(9775, 383, 'Sinaliw na Munti'),
(9776, 383, 'Sulsugin'),
(9777, 383, 'Taywanak Ibaba'),
(9778, 383, 'Taywanak Ilaya'),
(9779, 383, 'Upli'),
(9780, 383, 'Kaysuyo'),
(9781, 383, 'Luksuhin Ilaya'),
(9782, 383, 'Palumlum'),
(9783, 383, 'Bilog'),
(9784, 383, 'Esperanza Ilaya'),
(9785, 383, 'Kaytitinga II'),
(9786, 383, 'Kaytitinga III'),
(9787, 383, 'Mangas II'),
(9788, 383, 'Marahan II'),
(9789, 383, 'Matagbak II'),
(9790, 383, 'Santa Teresa'),
(9791, 384, 'Banaybanay'),
(9792, 384, 'Bucal'),
(9793, 384, 'Dagatan'),
(9794, 384, 'Halang'),
(9795, 384, 'Loma'),
(9796, 384, 'Maitim I'),
(9797, 384, 'Maymangga'),
(9798, 384, 'Minantok Kanluran'),
(9799, 384, 'Pangil'),
(9800, 384, 'Barangay I (Pob.)'),
(9801, 384, 'Barangay X (Pob.)'),
(9802, 384, 'Barangay XI (Pob.)'),
(9803, 384, 'Barangay XII (Pob.)'),
(9804, 384, 'Barangay II (Pob.)'),
(9805, 384, 'Barangay III (Pob.)'),
(9806, 384, 'Barangay IV (Pob.)'),
(9807, 384, 'Barangay V (Pob.)'),
(9808, 384, 'Barangay VI (Pob.)'),
(9809, 384, 'Barangay VII (Pob.)'),
(9810, 384, 'Barangay VIII (Pob.)'),
(9811, 384, 'Barangay IX (Pob.)'),
(9812, 384, 'Salaban'),
(9813, 384, 'Talon'),
(9814, 384, 'Tamacan'),
(9815, 384, 'Buho'),
(9816, 384, 'Minantok Silangan'),
(9817, 385, 'Alima'),
(9818, 385, 'Aniban I'),
(9819, 385, 'Banalo'),
(9820, 385, 'Bayanan'),
(9821, 385, 'Daang Bukid'),
(9822, 385, 'Digman'),
(9823, 385, 'Dulong Bayan'),
(9824, 385, 'Habay I'),
(9825, 385, 'Kaingin (Pob.)'),
(9826, 385, 'Ligas I'),
(9827, 385, 'Mabolo I'),
(9828, 385, 'Maliksi I'),
(9829, 385, 'Mambog I'),
(9830, 385, 'Molino I'),
(9831, 385, 'Niog I'),
(9832, 385, 'P.F. Espiritu I'),
(9833, 385, 'Real I'),
(9834, 385, 'Salinas I'),
(9835, 385, 'San Nicolas I'),
(9836, 385, 'Sineguelasan'),
(9837, 385, 'Tabing Dagat'),
(9838, 385, 'Talaba I'),
(9839, 385, 'Zapote I'),
(9840, 385, 'Queens Row Central'),
(9841, 385, 'Queens Row East'),
(9842, 385, 'Queens Row West'),
(9843, 385, 'Aniban II'),
(9844, 385, 'Aniban III'),
(9845, 385, 'Aniban IV'),
(9846, 385, 'Aniban V'),
(9847, 385, 'Campo Santo'),
(9848, 385, 'Habay II'),
(9849, 385, 'Ligas II'),
(9850, 385, 'Ligas III'),
(9851, 385, 'Mabolo II'),
(9852, 385, 'Mabolo III'),
(9853, 385, 'Maliksi II'),
(9854, 385, 'Maliksi III'),
(9855, 385, 'Mambog II'),
(9856, 385, 'Mambog III'),
(9857, 385, 'Mambog IV'),
(9858, 385, 'Mambog V'),
(9859, 385, 'Molino II'),
(9860, 385, 'Molino III'),
(9861, 385, 'Molino IV'),
(9862, 385, 'Molino V'),
(9863, 385, 'Molino VI'),
(9864, 385, 'Molino VII'),
(9865, 385, 'Niog II'),
(9866, 385, 'Niog III'),
(9867, 385, 'P.F. Espiritu II'),
(9868, 385, 'P.F. Espiritu III'),
(9869, 385, 'P.F. Espiritu IV'),
(9870, 385, 'P.F. Espiritu V'),
(9871, 385, 'P.F. Espiritu VI'),
(9872, 385, 'P.F. Espiritu VII'),
(9873, 385, 'P.F. Espiritu VIII'),
(9874, 385, 'Real II'),
(9875, 385, 'Salinas II'),
(9876, 385, 'Salinas III'),
(9877, 385, 'Salinas IV'),
(9878, 385, 'San Nicolas II'),
(9879, 385, 'San Nicolas III'),
(9880, 385, 'Talaba II'),
(9881, 385, 'Talaba III'),
(9882, 385, 'Talaba IV'),
(9883, 385, 'Talaba V'),
(9884, 385, 'Talaba VI'),
(9885, 385, 'Talaba VII'),
(9886, 385, 'Zapote II'),
(9887, 385, 'Zapote III'),
(9888, 385, 'Zapote IV'),
(9889, 385, 'Zapote V'),
(9890, 386, 'Bancal'),
(9891, 386, 'Cabilang Baybay'),
(9892, 386, 'Lantic'),
(9893, 386, 'Mabuhay'),
(9894, 386, 'Maduya'),
(9895, 386, 'Milagrosa'),
(9896, 386, 'Barangay 1 (Pob.)'),
(9897, 386, 'Barangay 2 (Pob.)'),
(9898, 386, 'Barangay 3 (Pob.)'),
(9899, 386, 'Barangay 4 (Pob.)'),
(9900, 386, 'Barangay 5 (Pob.)'),
(9901, 386, 'Barangay 6 (Pob.)'),
(9902, 386, 'Barangay 7 (Pob.)'),
(9903, 386, 'Barangay 8 (Pob.)'),
(9904, 387, 'Barangay 1'),
(9905, 387, 'Barangay 10'),
(9906, 387, 'Barangay 2'),
(9907, 387, 'Barangay 11'),
(9908, 387, 'Barangay 12'),
(9909, 387, 'Barangay 13'),
(9910, 387, 'Barangay 14'),
(9911, 387, 'Barangay 15'),
(9912, 387, 'Barangay 16'),
(9913, 387, 'Barangay 17'),
(9914, 387, 'Barangay 18'),
(9915, 387, 'Barangay 19'),
(9916, 387, 'Barangay 20'),
(9917, 387, 'Barangay 21'),
(9918, 387, 'Barangay 22'),
(9919, 387, 'Barangay 23'),
(9920, 387, 'Barangay 24'),
(9921, 387, 'Barangay 25'),
(9922, 387, 'Barangay 26'),
(9923, 387, 'Barangay 27'),
(9924, 387, 'Barangay 28'),
(9925, 387, 'Barangay 29'),
(9926, 387, 'Barangay 3'),
(9927, 387, 'Barangay 30'),
(9928, 387, 'Barangay 31'),
(9929, 387, 'Barangay 32'),
(9930, 387, 'Barangay 33'),
(9931, 387, 'Barangay 34'),
(9932, 387, 'Barangay 35'),
(9933, 387, 'Barangay 36'),
(9934, 387, 'Barangay 37'),
(9935, 387, 'Barangay 38'),
(9936, 387, 'Barangay 39'),
(9937, 387, 'Barangay 4'),
(9938, 387, 'Barangay 40'),
(9939, 387, 'Barangay 41'),
(9940, 387, 'Barangay 42'),
(9941, 387, 'Barangay 43'),
(9942, 387, 'Barangay 44'),
(9943, 387, 'Barangay 45'),
(9944, 387, 'Barangay 46'),
(9945, 387, 'Barangay 47'),
(9946, 387, 'Barangay 48'),
(9947, 387, 'Barangay 49'),
(9948, 387, 'Barangay 5'),
(9949, 387, 'Barangay 50'),
(9950, 387, 'Barangay 51'),
(9951, 387, 'Barangay 52'),
(9952, 387, 'Barangay 53'),
(9953, 387, 'Barangay 54'),
(9954, 387, 'Barangay 55'),
(9955, 387, 'Barangay 56'),
(9956, 387, 'Barangay 57'),
(9957, 387, 'Barangay 58'),
(9958, 387, 'Barangay 59'),
(9959, 387, 'Barangay 6'),
(9960, 387, 'Barangay 60'),
(9961, 387, 'Barangay 61'),
(9962, 387, 'Barangay 62'),
(9963, 387, 'Barangay 7'),
(9964, 387, 'Barangay 8'),
(9965, 387, 'Barangay 9'),
(9966, 387, 'Barangay 10-A'),
(9967, 387, 'Barangay 10-B'),
(9968, 387, 'Barangay 22-A'),
(9969, 387, 'Barangay 29-A'),
(9970, 387, 'Barangay 36-A'),
(9971, 387, 'Barangay 37-A'),
(9972, 387, 'Barangay 38-A'),
(9973, 387, 'Barangay 42-A'),
(9974, 387, 'Barangay 42-B'),
(9975, 387, 'Barangay 42-C'),
(9976, 387, 'Barangay 45-A'),
(9977, 387, 'Barangay 47-A'),
(9978, 387, 'Barangay 47-B'),
(9979, 387, 'Barangay 48-A'),
(9980, 387, 'Barangay 49-A'),
(9981, 387, 'Barangay 53-A'),
(9982, 387, 'Barangay 53-B'),
(9983, 387, 'Barangay 54-A'),
(9984, 387, 'Barangay 58-A'),
(9985, 387, 'Barangay 61-A'),
(9986, 387, 'Barangay 62-A'),
(9987, 387, 'Barangay 62-B'),
(9988, 388, 'Burol'),
(9989, 388, 'Langkaan I'),
(9990, 388, 'Paliparan I'),
(9991, 388, 'Sabang'),
(9992, 388, 'Salawag'),
(9993, 388, 'Salitran I'),
(9994, 388, 'Sampaloc I'),
(9995, 388, 'San Agustin I'),
(9996, 388, 'San Jose'),
(9997, 388, 'Zone I (Pob.)'),
(9998, 388, 'Zone II (Pob.)'),
(9999, 388, 'Zone III (Pob.)'),
(10000, 388, 'Zone IV (Pob.)'),
(10001, 388, 'Datu Esmael'),
(10002, 388, 'Emmanuel Bergado I'),
(10003, 388, 'Fatima I'),
(10004, 388, 'Luzviminda I'),
(10005, 388, 'Saint Peter I'),
(10006, 388, 'San Andres I'),
(10007, 388, 'San Antonio De Padua I'),
(10008, 388, 'San Dionisio'),
(10009, 388, 'San Esteban'),
(10010, 388, 'San Francisco I'),
(10011, 388, 'San Isidro Labrador I'),
(10012, 388, 'San Juan'),
(10013, 388, 'San Lorenzo Ruiz I'),
(10014, 388, 'San Luis I'),
(10015, 388, 'San Manuel I'),
(10016, 388, 'San Mateo'),
(10017, 388, 'San Miguel'),
(10018, 388, 'San Nicolas I'),
(10019, 388, 'San Roque'),
(10020, 388, 'San Simon'),
(10021, 388, 'Santa Cristina I'),
(10022, 388, 'Santa Cruz I'),
(10023, 388, 'Santa Fe'),
(10024, 388, 'Santa Lucia'),
(10025, 388, 'Santa Maria'),
(10026, 388, 'Santo Cristo'),
(10027, 388, 'Santo Niño I'),
(10028, 388, 'Burol I'),
(10029, 388, 'Burol II'),
(10030, 388, 'Burol III'),
(10031, 388, 'Emmanuel Bergado II'),
(10032, 388, 'Fatima II'),
(10033, 388, 'Fatima III'),
(10034, 388, 'Langkaan II'),
(10035, 388, 'Luzviminda II'),
(10036, 388, 'Paliparan II'),
(10037, 388, 'Paliparan III'),
(10038, 388, 'Saint Peter II'),
(10039, 388, 'Salitran II'),
(10040, 388, 'Salitran III'),
(10041, 388, 'Salitran IV'),
(10042, 388, 'Sampaloc II'),
(10043, 388, 'Sampaloc III'),
(10044, 388, 'Sampaloc IV'),
(10045, 388, 'Sampaloc V'),
(10046, 388, 'San Agustin II'),
(10047, 388, 'San Agustin III'),
(10048, 388, 'San Andres II'),
(10049, 388, 'San Antonio De Padua II'),
(10050, 388, 'San Francisco II'),
(10051, 388, 'San Isidro Labrador II'),
(10052, 388, 'San Lorenzo Ruiz II'),
(10053, 388, 'San Luis II'),
(10054, 388, 'San Manuel II'),
(10055, 388, 'San Miguel II'),
(10056, 388, 'San Nicolas II'),
(10057, 388, 'Santa Cristina II'),
(10058, 388, 'Santa Cruz II'),
(10059, 388, 'Santo Niño II'),
(10060, 388, 'Zone I-B'),
(10061, 388, 'H-2'),
(10062, 388, 'Victoria Reyes'),
(10063, 389, 'A. Dalusag'),
(10064, 389, 'Batas Dao'),
(10065, 389, 'Castaños Cerca'),
(10066, 389, 'Castaños Lejos'),
(10067, 389, 'Kabulusan'),
(10068, 389, 'Kaymisas'),
(10069, 389, 'Kaypaaba'),
(10070, 389, 'Lumipa'),
(10071, 389, 'Narvaez'),
(10072, 389, 'Poblacion I'),
(10073, 389, 'Tabora'),
(10074, 389, 'Poblacion II'),
(10075, 389, 'Poblacion III'),
(10076, 389, 'Poblacion IV'),
(10077, 390, 'Alingaro'),
(10078, 390, 'Bacao I'),
(10079, 390, 'Gov. Ferrer Pob.'),
(10080, 390, 'Sampalucan Pob.'),
(10081, 390, 'Dulong Bayan Pob.'),
(10082, 390, 'San Gabriel Pob.'),
(10083, 390, 'Bagumbayan Pob.'),
(10084, 390, 'Vibora Pob.'),
(10085, 390, 'Ninety Sixth Pob.'),
(10086, 390, 'Prinza Pob.'),
(10087, 390, 'Biclatan'),
(10088, 390, 'Buenavista I'),
(10089, 390, 'Corregidor Pob.'),
(10090, 390, 'Javalera'),
(10091, 390, 'Manggahan'),
(10092, 390, 'Navarro'),
(10093, 390, 'Panungyanan'),
(10094, 390, 'Pasong Camachile I'),
(10095, 390, 'Pasong Kawayan I'),
(10096, 390, 'Pasong Kawayan II'),
(10097, 390, 'Pinagtipunan'),
(10098, 390, 'San Francisco'),
(10099, 390, 'San Juan I'),
(10100, 390, 'Santa Clara'),
(10101, 390, 'Santiago'),
(10102, 390, 'Tapia'),
(10103, 390, 'Tejero'),
(10104, 390, 'Arnaldo Pob.'),
(10105, 390, 'Bacao II'),
(10106, 390, 'Buenavista II'),
(10107, 390, 'Buenavista III'),
(10108, 390, 'Pasong Camachile II'),
(10109, 390, 'San Juan II'),
(10110, 391, 'Alapan I-A'),
(10111, 391, 'Alapan II-A'),
(10112, 391, 'Anabu I-A'),
(10113, 391, 'Anabu II-A'),
(10114, 391, 'Poblacion I-A (Pob.)'),
(10115, 391, 'Poblacion II-A (Pob.)'),
(10116, 391, 'Poblacion III-A (Pob.)'),
(10117, 391, 'Poblacion IV-A (Pob.)'),
(10118, 391, 'Bayan Luma I'),
(10119, 391, 'Bucandala I'),
(10120, 391, 'Carsadang Bago I'),
(10121, 391, 'Malagasang I-A'),
(10122, 391, 'Malagasang II-A'),
(10123, 391, 'Medicion I-A'),
(10124, 391, 'Medicion II-A'),
(10125, 391, 'Pag-Asa I'),
(10126, 391, 'Palico I'),
(10127, 391, 'Pasong Buaya I'),
(10128, 391, 'Tanzang Luma I'),
(10129, 391, 'Toclong I-A'),
(10130, 391, 'Toclong II-A'),
(10131, 391, 'Alapan I-B'),
(10132, 391, 'Alapan I-C'),
(10133, 391, 'Alapan II-B'),
(10134, 391, 'Anabu I-B'),
(10135, 391, 'Anabu I-C'),
(10136, 391, 'Anabu I-D'),
(10137, 391, 'Anabu I-E'),
(10138, 391, 'Anabu I-F'),
(10139, 391, 'Anabu I-G'),
(10140, 391, 'Anabu II-B'),
(10141, 391, 'Anabu II-C'),
(10142, 391, 'Anabu II-D'),
(10143, 391, 'Anabu II-E'),
(10144, 391, 'Anabu II-F'),
(10145, 391, 'Bagong Silang'),
(10146, 391, 'Bayan Luma II'),
(10147, 391, 'Bayan Luma III'),
(10148, 391, 'Bayan Luma IV'),
(10149, 391, 'Bayan Luma V'),
(10150, 391, 'Bayan Luma VI'),
(10151, 391, 'Bayan Luma VII'),
(10152, 391, 'Bayan Luma VIII'),
(10153, 391, 'Bayan Luma IX'),
(10154, 391, 'Bucandala II'),
(10155, 391, 'Bucandala III'),
(10156, 391, 'Bucandala IV'),
(10157, 391, 'Bucandala V'),
(10158, 391, 'Buhay na Tubig'),
(10159, 391, 'Carsadang Bago II'),
(10160, 391, 'Magdalo'),
(10161, 391, 'Maharlika'),
(10162, 391, 'Malagasang I-B'),
(10163, 391, 'Malagasang I-C'),
(10164, 391, 'Malagasang I-D'),
(10165, 391, 'Malagasang I-E'),
(10166, 391, 'Malagasang I-F'),
(10167, 391, 'Malagasang I-G'),
(10168, 391, 'Malagasang II-B'),
(10169, 391, 'Malagasang II-C'),
(10170, 391, 'Malagasang II-D'),
(10171, 391, 'Malagasang II-E'),
(10172, 391, 'Malagasang II-F'),
(10173, 391, 'Malagasang II-G');
INSERT INTO `table_barangay` (`barangay_id`, `municipality_id`, `barangay_name`) VALUES
(10174, 391, 'Mariano Espeleta I'),
(10175, 391, 'Mariano Espeleta II'),
(10176, 391, 'Mariano Espeleta III'),
(10177, 391, 'Medicion I-B'),
(10178, 391, 'Medicion I-C'),
(10179, 391, 'Medicion I-D'),
(10180, 391, 'Medicion II-B'),
(10181, 391, 'Medicion II-C'),
(10182, 391, 'Medicion II-D'),
(10183, 391, 'Medicion II-E'),
(10184, 391, 'Medicion II-F'),
(10185, 391, 'Pag-Asa II'),
(10186, 391, 'Pag-Asa III'),
(10187, 391, 'Palico II'),
(10188, 391, 'Palico III'),
(10189, 391, 'Palico IV'),
(10190, 391, 'Pasong Buaya II'),
(10191, 391, 'Pinagbuklod'),
(10192, 391, 'Poblacion I-B'),
(10193, 391, 'Poblacion I-C'),
(10194, 391, 'Poblacion II-B'),
(10195, 391, 'Poblacion III-B'),
(10196, 391, 'Poblacion IV-B'),
(10197, 391, 'Poblacion IV-C'),
(10198, 391, 'Poblacion IV-D'),
(10199, 391, 'Tanzang Luma II'),
(10200, 391, 'Tanzang Luma III'),
(10201, 391, 'Tanzang Luma IV'),
(10202, 391, 'Tanzang Luma V'),
(10203, 391, 'Tanzang Luma VI'),
(10204, 391, 'Toclong I-B'),
(10205, 391, 'Toclong I-C'),
(10206, 391, 'Toclong II-B'),
(10207, 392, 'Agus-us'),
(10208, 392, 'Alulod'),
(10209, 392, 'Banaba Cerca'),
(10210, 392, 'Banaba Lejos'),
(10211, 392, 'Bancod'),
(10212, 392, 'Buna Cerca'),
(10213, 392, 'Buna Lejos I'),
(10214, 392, 'Calumpang Cerca'),
(10215, 392, 'Calumpang Lejos I'),
(10216, 392, 'Carasuchi'),
(10217, 392, 'Kayquit I'),
(10218, 392, 'Daine I'),
(10219, 392, 'Guyam Malaki'),
(10220, 392, 'Guyam Munti'),
(10221, 392, 'Harasan'),
(10222, 392, 'Kaytambog'),
(10223, 392, 'Limbon'),
(10224, 392, 'Lumampong Balagbag'),
(10225, 392, 'Lumampong Halayhay'),
(10226, 392, 'Mahabangkahoy Lejos'),
(10227, 392, 'Mahabangkahoy Cerca'),
(10228, 392, 'Barangay 1 (Pob.)'),
(10229, 392, 'Barangay 2 (Pob.)'),
(10230, 392, 'Barangay 3 (Pob.)'),
(10231, 392, 'Barangay 4 (Pob.)'),
(10232, 392, 'Pulo'),
(10233, 392, 'Tambo Balagbag'),
(10234, 392, 'Tambo Ilaya'),
(10235, 392, 'Tambo Malaki'),
(10236, 392, 'Tambo Kulit'),
(10237, 392, 'Buna Lejos II'),
(10238, 392, 'Daine II'),
(10239, 392, 'Kayquit II'),
(10240, 392, 'Kayquit III'),
(10241, 392, 'Kaytapos'),
(10242, 392, 'Mataas na Lupa'),
(10243, 393, 'Binakayan-Kanluran'),
(10244, 393, 'Gahak'),
(10245, 393, 'Kaingen'),
(10246, 393, 'Marulas'),
(10247, 393, 'Panamitan'),
(10248, 393, 'Poblacion'),
(10249, 393, 'Magdalo'),
(10250, 393, 'San Sebastian'),
(10251, 393, 'Santa Isabel'),
(10252, 393, 'Tabon I'),
(10253, 393, 'Toclong'),
(10254, 393, 'Wakas I'),
(10255, 393, 'Batong Dalig'),
(10256, 393, 'Balsahan-Bisita'),
(10257, 393, 'Binakayan-Aplaya'),
(10258, 393, 'Congbalay-Legaspi'),
(10259, 393, 'Manggahan-Lawin'),
(10260, 393, 'Pulvorista'),
(10261, 393, 'Samala-Marquez'),
(10262, 393, 'Tabon II'),
(10263, 393, 'Tabon III'),
(10264, 393, 'Tramo-Bantayan'),
(10265, 393, 'Wakas II'),
(10266, 394, 'Baliwag'),
(10267, 394, 'Bendita I'),
(10268, 394, 'Caluangan'),
(10269, 394, 'Medina'),
(10270, 394, 'Pacheco'),
(10271, 394, 'Barangay 1 (Pob.)'),
(10272, 394, 'Barangay 2 (Pob.)'),
(10273, 394, 'Barangay 3 (Pob.)'),
(10274, 394, 'Barangay 4 (Pob.)'),
(10275, 394, 'Barangay 5 (Pob.)'),
(10276, 394, 'Ramirez'),
(10277, 394, 'Tua'),
(10278, 394, 'Urdaneta'),
(10279, 394, 'Kabulusan'),
(10280, 394, 'Bendita II'),
(10281, 394, 'San Agustin'),
(10282, 395, 'Caingin Pob.'),
(10283, 395, 'Bucal I'),
(10284, 395, 'Bucal II'),
(10285, 395, 'Bucal III A'),
(10286, 395, 'Bucal IV A'),
(10287, 395, 'San Miguel I A'),
(10288, 395, 'Garita I A'),
(10289, 395, 'Mabato'),
(10290, 395, 'Talipusngo'),
(10291, 395, 'Pantihan I'),
(10292, 395, 'Pantihan II'),
(10293, 395, 'Pantihan III'),
(10294, 395, 'Pantihan IV'),
(10295, 395, 'Patungan'),
(10296, 395, 'Pinagsanhan I A'),
(10297, 395, 'Poblacion I A'),
(10298, 395, 'Poblacion II A'),
(10299, 395, 'Tulay Silangan'),
(10300, 395, 'Layong Mabilog'),
(10301, 395, 'Bucal III B'),
(10302, 395, 'Bucal IV B'),
(10303, 395, 'Garita I B'),
(10304, 395, 'Pinagsanhan I B'),
(10305, 395, 'Poblacion I B'),
(10306, 395, 'Poblacion II B'),
(10307, 395, 'San Miguel I B'),
(10308, 395, 'Tulay Kanluran'),
(10309, 396, 'Anuling Lejos I'),
(10310, 396, 'Asis I'),
(10311, 396, 'Galicia I'),
(10312, 396, 'Palocpoc I'),
(10313, 396, 'Panungyan I'),
(10314, 396, 'Poblacion I'),
(10315, 396, 'Poblacion II'),
(10316, 396, 'Poblacion III'),
(10317, 396, 'Poblacion IV'),
(10318, 396, 'Poblacion V'),
(10319, 396, 'Poblacion VI'),
(10320, 396, 'Poblacion VII'),
(10321, 396, 'Anuling Cerca I'),
(10322, 396, 'Anuling Cerca II'),
(10323, 396, 'Anuling Lejos II'),
(10324, 396, 'Asis II'),
(10325, 396, 'Asis III'),
(10326, 396, 'Banayad'),
(10327, 396, 'Bukal'),
(10328, 396, 'Galicia II'),
(10329, 396, 'Galicia III'),
(10330, 396, 'Miguel Mojica'),
(10331, 396, 'Palocpoc II'),
(10332, 396, 'Panungyan II'),
(10333, 397, 'Bagong Karsada'),
(10334, 397, 'Balsahan'),
(10335, 397, 'Bancaan'),
(10336, 397, 'Bucana Malaki'),
(10337, 397, 'Bucana Sasahan'),
(10338, 397, 'Capt. C. Nazareno (Pob.)'),
(10339, 397, 'Calubcob'),
(10340, 397, 'Palangue 2 & 3'),
(10341, 397, 'Gomez-Zamora (Pob.)'),
(10342, 397, 'Halang'),
(10343, 397, 'Humbac'),
(10344, 397, 'Ibayo Estacion'),
(10345, 397, 'Ibayo Silangan'),
(10346, 397, 'Kanluran'),
(10347, 397, 'Labac'),
(10348, 397, 'Latoria'),
(10349, 397, 'Mabolo'),
(10350, 397, 'Makina'),
(10351, 397, 'Malainen Bago'),
(10352, 397, 'Malainen Luma'),
(10353, 397, 'Molino'),
(10354, 397, 'Munting Mapino'),
(10355, 397, 'Muzon'),
(10356, 397, 'Palangue 1'),
(10357, 397, 'Sabang'),
(10358, 397, 'San Roque'),
(10359, 397, 'Santulan'),
(10360, 397, 'Sapa'),
(10361, 397, 'Timalan Balsahan'),
(10362, 397, 'Timalan Concepcion'),
(10363, 398, 'Magdiwang'),
(10364, 398, 'Poblacion'),
(10365, 398, 'Salcedo I'),
(10366, 398, 'San Antonio I'),
(10367, 398, 'San Juan I'),
(10368, 398, 'San Rafael I'),
(10369, 398, 'San Rafael II'),
(10370, 398, 'San Jose I'),
(10371, 398, 'Santa Rosa I'),
(10372, 398, 'Salcedo II'),
(10373, 398, 'San Antonio II'),
(10374, 398, 'San Jose II'),
(10375, 398, 'San Juan II'),
(10376, 398, 'San Rafael III'),
(10377, 398, 'San Rafael IV'),
(10378, 398, 'Santa Rosa II'),
(10379, 399, 'Silangan I'),
(10380, 399, 'Bagbag I'),
(10381, 399, 'Kanluran'),
(10382, 399, 'Ligtong I'),
(10383, 399, 'Ligtong II'),
(10384, 399, 'Muzon I'),
(10385, 399, 'Poblacion'),
(10386, 399, 'Sapa I'),
(10387, 399, 'Tejeros Convention'),
(10388, 399, 'Wawa I'),
(10389, 399, 'Ligtong III'),
(10390, 399, 'Bagbag II'),
(10391, 399, 'Ligtong IV'),
(10392, 399, 'Muzon II'),
(10393, 399, 'Sapa II'),
(10394, 399, 'Sapa III'),
(10395, 399, 'Sapa IV'),
(10396, 399, 'Silangan II'),
(10397, 399, 'Wawa II'),
(10398, 399, 'Wawa III'),
(10399, 400, 'Adlas'),
(10400, 400, 'Balite I'),
(10401, 400, 'Balite II'),
(10402, 400, 'Balubad'),
(10403, 400, 'Batas'),
(10404, 400, 'Biga I'),
(10405, 400, 'Biluso'),
(10406, 400, 'Buho'),
(10407, 400, 'Bucal'),
(10408, 400, 'Bulihan'),
(10409, 400, 'Cabangaan'),
(10410, 400, 'Carmen'),
(10411, 400, 'Hukay'),
(10412, 400, 'Iba'),
(10413, 400, 'Inchican'),
(10414, 400, 'Kalubkob'),
(10415, 400, 'Kaong'),
(10416, 400, 'Lalaan I'),
(10417, 400, 'Lalaan II'),
(10418, 400, 'Litlit'),
(10419, 400, 'Lucsuhin'),
(10420, 400, 'Lumil'),
(10421, 400, 'Maguyam'),
(10422, 400, 'Malabag'),
(10423, 400, 'Mataas Na Burol'),
(10424, 400, 'Munting Ilog'),
(10425, 400, 'Paligawan'),
(10426, 400, 'Pasong Langka'),
(10427, 400, 'Barangay I (Pob.)'),
(10428, 400, 'Barangay II (Pob.)'),
(10429, 400, 'Barangay III (Pob.)'),
(10430, 400, 'Barangay IV (Pob.)'),
(10431, 400, 'Barangay V (Pob.)'),
(10432, 400, 'Pooc I'),
(10433, 400, 'Pulong Bunga'),
(10434, 400, 'Pulong Saging'),
(10435, 400, 'Puting Kahoy'),
(10436, 400, 'Sabutan'),
(10437, 400, 'San Miguel I'),
(10438, 400, 'San Vicente I'),
(10439, 400, 'Santol'),
(10440, 400, 'Tartaria'),
(10441, 400, 'Tibig'),
(10442, 400, 'Tubuan I'),
(10443, 400, 'Ulat'),
(10444, 400, 'Acacia'),
(10445, 400, 'Anahaw I'),
(10446, 400, 'Ipil I'),
(10447, 400, 'Narra I'),
(10448, 400, 'Yakal'),
(10449, 400, 'Anahaw II'),
(10450, 400, 'Banaba'),
(10451, 400, 'Biga II'),
(10452, 400, 'Hoyo'),
(10453, 400, 'Ipil II'),
(10454, 400, 'Malaking Tatyao'),
(10455, 400, 'Narra II'),
(10456, 400, 'Narra III'),
(10457, 400, 'Pooc II'),
(10458, 400, 'San Miguel II'),
(10459, 400, 'San Vicente II'),
(10460, 400, 'Toledo'),
(10461, 400, 'Tubuan II'),
(10462, 400, 'Tubuan III'),
(10463, 401, 'Asisan'),
(10464, 401, 'Bagong Tubig'),
(10465, 401, 'Dapdap West'),
(10466, 401, 'Francisco'),
(10467, 401, 'Guinhawa South'),
(10468, 401, 'Iruhin West'),
(10469, 401, 'Calabuso'),
(10470, 401, 'Kaybagal South (Pob.)'),
(10471, 401, 'Mag-Asawang Ilat'),
(10472, 401, 'Maharlika West'),
(10473, 401, 'Maitim 2nd East'),
(10474, 401, 'Mendez Crossing West'),
(10475, 401, 'Neogan'),
(10476, 401, 'Patutong Malaki South'),
(10477, 401, 'Sambong'),
(10478, 401, 'San Jose'),
(10479, 401, 'Silang Junction South'),
(10480, 401, 'Sungay South'),
(10481, 401, 'Tolentino West'),
(10482, 401, 'Zambal'),
(10483, 401, 'Iruhin East'),
(10484, 401, 'Kaybagal North'),
(10485, 401, 'Maitim 2nd West'),
(10486, 401, 'Dapdap East'),
(10487, 401, 'Guinhawa North'),
(10488, 401, 'Iruhin South'),
(10489, 401, 'Kaybagal East'),
(10490, 401, 'Maharlika East'),
(10491, 401, 'Maitim 2nd Central'),
(10492, 401, 'Mendez Crossing East'),
(10493, 401, 'Patutong Malaki North'),
(10494, 401, 'Silang Junction North'),
(10495, 401, 'Sungay North'),
(10496, 401, 'Tolentino East'),
(10497, 402, 'Amaya I'),
(10498, 402, 'Bagtas'),
(10499, 402, 'Biga'),
(10500, 402, 'Biwas'),
(10501, 402, 'Bucal'),
(10502, 402, 'Bunga'),
(10503, 402, 'Calibuyo'),
(10504, 402, 'Capipisa'),
(10505, 402, 'Daang Amaya I'),
(10506, 402, 'Halayhay'),
(10507, 402, 'Julugan I'),
(10508, 402, 'Mulawin'),
(10509, 402, 'Paradahan I'),
(10510, 402, 'Barangay I (Pob.)'),
(10511, 402, 'Barangay II (Pob.)'),
(10512, 402, 'Barangay III (Pob.)'),
(10513, 402, 'Barangay IV (Pob.)'),
(10514, 402, 'Punta I'),
(10515, 402, 'Sahud Ulan'),
(10516, 402, 'Sanja Mayor'),
(10517, 402, 'Santol'),
(10518, 402, 'Tanauan'),
(10519, 402, 'Tres Cruses'),
(10520, 402, 'Lambingan'),
(10521, 402, 'Amaya II'),
(10522, 402, 'Amaya III'),
(10523, 402, 'Amaya IV'),
(10524, 402, 'Amaya V'),
(10525, 402, 'Amaya VI'),
(10526, 402, 'Amaya VII'),
(10527, 402, 'Daang Amaya II'),
(10528, 402, 'Daang Amaya III'),
(10529, 402, 'Julugan II'),
(10530, 402, 'Julugan III'),
(10531, 402, 'Julugan IV'),
(10532, 402, 'Julugan V'),
(10533, 402, 'Julugan VI'),
(10534, 402, 'Julugan VII'),
(10535, 402, 'Julugan VIII'),
(10536, 402, 'Paradahan II'),
(10537, 402, 'Punta II'),
(10538, 403, 'Poblacion I'),
(10539, 403, 'Poblacion II'),
(10540, 403, 'Bucana'),
(10541, 403, 'Poblacion III'),
(10542, 403, 'San Jose'),
(10543, 403, 'San Juan I'),
(10544, 403, 'Sapang I'),
(10545, 403, 'Poblacion I A'),
(10546, 403, 'San Juan II'),
(10547, 403, 'Sapang II'),
(10548, 404, 'Cabezas'),
(10549, 404, 'Cabuco'),
(10550, 404, 'De Ocampo'),
(10551, 404, 'Lallana'),
(10552, 404, 'San Agustin (Pob.)'),
(10553, 404, 'Osorio'),
(10554, 404, 'Conchu'),
(10555, 404, 'Perez'),
(10556, 404, 'Aguado'),
(10557, 404, 'Gregorio'),
(10558, 404, 'Inocencio'),
(10559, 404, 'Lapidario'),
(10560, 404, 'Luciano'),
(10561, 405, 'Aldiano Olaes'),
(10562, 405, 'Barangay 1 Poblacion'),
(10563, 405, 'Barangay 2 Poblacion'),
(10564, 405, 'Barangay 3 Poblacion'),
(10565, 405, 'Barangay 4 Poblacion'),
(10566, 405, 'Barangay 5 Poblacion'),
(10567, 405, 'Benjamin Tirona'),
(10568, 405, 'Bernardo Pulido'),
(10569, 405, 'Epifanio Malia'),
(10570, 405, 'Francisco De Castro'),
(10571, 405, 'Francisco Reyes'),
(10572, 405, 'Fiorello Calimag'),
(10573, 405, 'Gavino Maderan'),
(10574, 405, 'Gregoria De Jesus'),
(10575, 405, 'Inocencio Salud'),
(10576, 405, 'Jacinto Lumbreras'),
(10577, 405, 'Kapitan Kua'),
(10578, 405, 'Koronel Jose P. Elises'),
(10579, 405, 'Macario Dacon'),
(10580, 405, 'Marcelino Memije'),
(10581, 405, 'Nicolasa Virata'),
(10582, 405, 'Pantaleon Granados'),
(10583, 405, 'Ramon Cruz'),
(10584, 405, 'San Gabriel'),
(10585, 405, 'San Jose'),
(10586, 405, 'Severino De Las Alas'),
(10587, 405, 'Tiniente Tiago'),
(10588, 406, 'Del Carmen'),
(10589, 406, 'Palma'),
(10590, 406, 'Barangay I (Pob.)'),
(10591, 406, 'Barangay II (Pob.)'),
(10592, 406, 'Barangay III (Pob.)'),
(10593, 406, 'Barangay IV (Pob.)'),
(10594, 406, 'San Agustin'),
(10595, 406, 'San Andres'),
(10596, 406, 'San Benito'),
(10597, 406, 'San Gregorio'),
(10598, 406, 'San Ildefonso'),
(10599, 406, 'San Juan'),
(10600, 406, 'San Miguel'),
(10601, 406, 'San Roque'),
(10602, 406, 'Santa Rosa'),
(10603, 407, 'Bitin'),
(10604, 407, 'Calo'),
(10605, 407, 'Dila'),
(10606, 407, 'Maitim'),
(10607, 407, 'Masaya'),
(10608, 407, 'Paciano Rizal'),
(10609, 407, 'Puypuy'),
(10610, 407, 'San Antonio'),
(10611, 407, 'San Isidro'),
(10612, 407, 'Santa Cruz'),
(10613, 407, 'Santo Domingo'),
(10614, 407, 'Tagumpay'),
(10615, 407, 'Tranca'),
(10616, 407, 'San Agustin (Pob.)'),
(10617, 407, 'San Nicolas (Pob.)'),
(10618, 408, 'Biñan'),
(10619, 408, 'Bungahan'),
(10620, 408, 'Santo Tomas'),
(10621, 408, 'Canlalay'),
(10622, 408, 'Casile'),
(10623, 408, 'De La Paz'),
(10624, 408, 'Ganado'),
(10625, 408, 'San Francisco'),
(10626, 408, 'Langkiwa'),
(10627, 408, 'Loma'),
(10628, 408, 'Malaban'),
(10629, 408, 'Malamig'),
(10630, 408, 'Mampalasan'),
(10631, 408, 'Platero'),
(10632, 408, 'Poblacion'),
(10633, 408, 'Santo Niño'),
(10634, 408, 'San Antonio'),
(10635, 408, 'San Jose'),
(10636, 408, 'San Vicente'),
(10637, 408, 'Soro-soro'),
(10638, 408, 'Santo Domingo'),
(10639, 408, 'Timbao'),
(10640, 408, 'Tubigan'),
(10641, 408, 'Zapote'),
(10642, 409, 'Baclaran'),
(10643, 409, 'Banaybanay'),
(10644, 409, 'Banlic'),
(10645, 409, 'Butong'),
(10646, 409, 'Bigaa'),
(10647, 409, 'Casile'),
(10648, 409, 'Gulod'),
(10649, 409, 'Mamatid'),
(10650, 409, 'Marinig'),
(10651, 409, 'Niugan'),
(10652, 409, 'Pittland'),
(10653, 409, 'Pulo'),
(10654, 409, 'Sala'),
(10655, 409, 'San Isidro'),
(10656, 409, 'Diezmo'),
(10657, 409, 'Barangay Uno (Pob.)'),
(10658, 409, 'Barangay Dos (Pob.)'),
(10659, 409, 'Barangay Tres (Pob.)'),
(10660, 410, 'Bagong Kalsada'),
(10661, 410, 'Banadero'),
(10662, 410, 'Banlic'),
(10663, 410, 'Barandal'),
(10664, 410, 'Bubuyan'),
(10665, 410, 'Bucal'),
(10666, 410, 'Bunggo'),
(10667, 410, 'Burol'),
(10668, 410, 'Camaligan'),
(10669, 410, 'Canlubang'),
(10670, 410, 'Halang'),
(10671, 410, 'Hornalan'),
(10672, 410, 'Kay-Anlog'),
(10673, 410, 'Laguerta'),
(10674, 410, 'La Mesa'),
(10675, 410, 'Lawa'),
(10676, 410, 'Lecheria'),
(10677, 410, 'Lingga'),
(10678, 410, 'Looc'),
(10679, 410, 'Mabato'),
(10680, 410, 'Makiling'),
(10681, 410, 'Mapagong'),
(10682, 410, 'Masili'),
(10683, 410, 'Maunong'),
(10684, 410, 'Mayapa'),
(10685, 410, 'Paciano Rizal'),
(10686, 410, 'Palingon'),
(10687, 410, 'Palo-Alto'),
(10688, 410, 'Pansol'),
(10689, 410, 'Parian'),
(10690, 410, 'Barangay 1 (Pob.)'),
(10691, 410, 'Barangay 2 (Pob.)'),
(10692, 410, 'Barangay 3 (Pob.)'),
(10693, 410, 'Barangay 4 (Pob.)'),
(10694, 410, 'Barangay 5 (Pob.)'),
(10695, 410, 'Barangay 6 (Pob.)'),
(10696, 410, 'Barangay 7 (Pob.)'),
(10697, 410, 'Prinza'),
(10698, 410, 'Punta'),
(10699, 410, 'Puting Lupa'),
(10700, 410, 'Real'),
(10701, 410, 'Sucol'),
(10702, 410, 'Saimsim'),
(10703, 410, 'Sampiruhan'),
(10704, 410, 'San Cristobal'),
(10705, 410, 'San Jose'),
(10706, 410, 'San Juan'),
(10707, 410, 'Sirang Lupa'),
(10708, 410, 'Milagrosa'),
(10709, 410, 'Turbina'),
(10710, 410, 'Ulango'),
(10711, 410, 'Uwisan'),
(10712, 410, 'Batino'),
(10713, 410, 'Majada Labas'),
(10714, 411, 'Balayhangin'),
(10715, 411, 'Bangyas'),
(10716, 411, 'Dayap'),
(10717, 411, 'Hanggan'),
(10718, 411, 'Imok'),
(10719, 411, 'Lamot 1'),
(10720, 411, 'Lamot 2'),
(10721, 411, 'Limao'),
(10722, 411, 'Mabacan'),
(10723, 411, 'Masiit'),
(10724, 411, 'Paliparan'),
(10725, 411, 'Perez'),
(10726, 411, 'Kanluran (Pob.)'),
(10727, 411, 'Silangan (Pob.)'),
(10728, 411, 'Prinza'),
(10729, 411, 'San Isidro'),
(10730, 411, 'Santo Tomas'),
(10731, 412, 'Anglas'),
(10732, 412, 'Bangco'),
(10733, 412, 'Bukal'),
(10734, 412, 'Bulajo'),
(10735, 412, 'Cansuso'),
(10736, 412, 'Duhat'),
(10737, 412, 'Inao-Awan'),
(10738, 412, 'Kanluran Talaongan'),
(10739, 412, 'Labayo'),
(10740, 412, 'Layasin'),
(10741, 412, 'Layug'),
(10742, 412, 'Mahipon'),
(10743, 412, 'Paowin'),
(10744, 412, 'Poblacion'),
(10745, 412, 'Sisilmin'),
(10746, 412, 'Silangan Talaongan'),
(10747, 412, 'Sumucab'),
(10748, 412, 'Tibatib'),
(10749, 412, 'Udia'),
(10750, 413, 'Asana (Pob.)'),
(10751, 413, 'Bacong-Sigsigan'),
(10752, 413, 'Bagong Pag-Asa (Pob.)'),
(10753, 413, 'Balitoc'),
(10754, 413, 'Banaba (Pob.)'),
(10755, 413, 'Batuhan'),
(10756, 413, 'Bulihan'),
(10757, 413, 'Caballero (Pob.)'),
(10758, 413, 'Calumpang (Pob.)'),
(10759, 413, 'Kapatalan'),
(10760, 413, 'Cuebang Bato'),
(10761, 413, 'Damayan (Pob.)'),
(10762, 413, 'Kataypuanan'),
(10763, 413, 'Liyang'),
(10764, 413, 'Maate'),
(10765, 413, 'Magdalo (Pob.)'),
(10766, 413, 'Mayatba'),
(10767, 413, 'Minayutan'),
(10768, 413, 'Salangbato'),
(10769, 413, 'Tunhac'),
(10770, 414, 'Longos'),
(10771, 414, 'San Antonio'),
(10772, 414, 'San Juan (Pob.)'),
(10773, 415, 'Bagong Anyo (Pob.)'),
(10774, 415, 'Bayate'),
(10775, 415, 'Bubukal'),
(10776, 415, 'Bongkol'),
(10777, 415, 'Cabuyao'),
(10778, 415, 'Calumpang'),
(10779, 415, 'Culoy'),
(10780, 415, 'Dagatan'),
(10781, 415, 'Daniw'),
(10782, 415, 'Dita'),
(10783, 415, 'Ibabang Palina'),
(10784, 415, 'Ibabang San Roque'),
(10785, 415, 'Ibabang Sungi'),
(10786, 415, 'Ibabang Taykin'),
(10787, 415, 'Ilayang Palina'),
(10788, 415, 'Ilayang San Roque'),
(10789, 415, 'Ilayang Sungi'),
(10790, 415, 'Ilayang Taykin'),
(10791, 415, 'Kanlurang Bukal'),
(10792, 415, 'Laguan'),
(10793, 415, 'Rizal (Pob.)'),
(10794, 415, 'Luquin'),
(10795, 415, 'Malabo-Kalantukan'),
(10796, 415, 'Masikap (Pob.)'),
(10797, 415, 'Maslun (Pob.)'),
(10798, 415, 'Mojon'),
(10799, 415, 'Novaliches'),
(10800, 415, 'Oples'),
(10801, 415, 'Pag-Asa (Pob.)'),
(10802, 415, 'Palayan'),
(10803, 415, 'San Isidro'),
(10804, 415, 'Silangang Bukal'),
(10805, 415, 'Tuy-Baanan'),
(10806, 416, 'Anos'),
(10807, 416, 'Bagong Silang'),
(10808, 416, 'Bambang'),
(10809, 416, 'Batong Malake'),
(10810, 416, 'Baybayin (Pob.)'),
(10811, 416, 'Bayog'),
(10812, 416, 'Lalakay'),
(10813, 416, 'Maahas'),
(10814, 416, 'Mayondon'),
(10815, 416, 'Putho Tuntungin'),
(10816, 416, 'San Antonio'),
(10817, 416, 'Tadlak'),
(10818, 416, 'Timugan (Pob.)'),
(10819, 416, 'Malinta'),
(10820, 417, 'De La Paz'),
(10821, 417, 'Barangay Zone I (Pob.)'),
(10822, 417, 'Barangay Zone II (Pob.)'),
(10823, 417, 'Barangay Zone III (Pob.)'),
(10824, 417, 'Barangay Zone IV (Pob.)'),
(10825, 417, 'Barangay Zone V (Pob.)'),
(10826, 417, 'Barangay Zone VI (Pob.)'),
(10827, 417, 'Barangay Zone VII (Pob.)'),
(10828, 417, 'Barangay Zone VIII (Pob.)'),
(10829, 417, 'San Antonio'),
(10830, 417, 'San Buenaventura'),
(10831, 417, 'San Diego'),
(10832, 417, 'San Isidro'),
(10833, 417, 'San Jose'),
(10834, 417, 'San Juan'),
(10835, 417, 'San Luis'),
(10836, 417, 'San Pablo'),
(10837, 417, 'San Pedro'),
(10838, 417, 'San Rafael'),
(10839, 417, 'San Roque'),
(10840, 417, 'San Salvador'),
(10841, 417, 'Santo Domingo'),
(10842, 417, 'Santo Tomas'),
(10843, 418, 'Bagong Silang'),
(10844, 418, 'Balimbingan (Pob.)'),
(10845, 418, 'Balubad'),
(10846, 418, 'Caliraya'),
(10847, 418, 'Concepcion'),
(10848, 418, 'Lewin'),
(10849, 418, 'Maracta (Pob.)'),
(10850, 418, 'Maytalang I'),
(10851, 418, 'Maytalang II'),
(10852, 418, 'Primera Parang (Pob.)'),
(10853, 418, 'Primera Pulo (Pob.)'),
(10854, 418, 'Salac (Pob.)'),
(10855, 418, 'Segunda Parang (Pob.)'),
(10856, 418, 'Segunda Pulo (Pob.)'),
(10857, 418, 'Santo Niño (Pob.)'),
(10858, 418, 'Wawa'),
(10859, 419, 'Amuyong'),
(10860, 419, 'Lambac (Pob.)'),
(10861, 419, 'Lucong'),
(10862, 419, 'Matalatala'),
(10863, 419, 'Nanguma'),
(10864, 419, 'Numero'),
(10865, 419, 'Paagahan'),
(10866, 419, 'Bayanihan (Pob.)'),
(10867, 419, 'Libis ng Nayon (Pob.)'),
(10868, 419, 'Maligaya (Pob.)'),
(10869, 419, 'Masikap (Pob.)'),
(10870, 419, 'Pag-Asa (Pob.)'),
(10871, 419, 'Sinagtala (Pob.)'),
(10872, 419, 'San Antonio'),
(10873, 419, 'San Miguel'),
(10874, 420, 'Alipit'),
(10875, 420, 'Malaking Ambling'),
(10876, 420, 'Munting Ambling'),
(10877, 420, 'Baanan'),
(10878, 420, 'Balanac'),
(10879, 420, 'Bucal'),
(10880, 420, 'Buenavista'),
(10881, 420, 'Bungkol'),
(10882, 420, 'Buo'),
(10883, 420, 'Burlungan'),
(10884, 420, 'Cigaras'),
(10885, 420, 'Ibabang Atingay'),
(10886, 420, 'Ibabang Butnong'),
(10887, 420, 'Ilayang Atingay'),
(10888, 420, 'Ilayang Butnong'),
(10889, 420, 'Ilog'),
(10890, 420, 'Malinao'),
(10891, 420, 'Maravilla'),
(10892, 420, 'Poblacion'),
(10893, 420, 'Sabang'),
(10894, 420, 'Salasad'),
(10895, 420, 'Tanawan'),
(10896, 420, 'Tipunan'),
(10897, 420, 'Halayhayin'),
(10898, 421, 'Amonoy'),
(10899, 421, 'Bakia'),
(10900, 421, 'Bukal'),
(10901, 421, 'Balanac'),
(10902, 421, 'Balayong'),
(10903, 421, 'Banilad'),
(10904, 421, 'Banti'),
(10905, 421, 'Bitaoy'),
(10906, 421, 'Botocan'),
(10907, 421, 'Burgos'),
(10908, 421, 'Burol'),
(10909, 421, 'Coralao'),
(10910, 421, 'Gagalot'),
(10911, 421, 'Ibabang Banga'),
(10912, 421, 'Ibabang Bayucain'),
(10913, 421, 'Ilayang Banga'),
(10914, 421, 'Ilayang Bayucain'),
(10915, 421, 'Isabang'),
(10916, 421, 'Malinao'),
(10917, 421, 'May-It'),
(10918, 421, 'Munting Kawayan'),
(10919, 421, 'Oobi'),
(10920, 421, 'Olla'),
(10921, 421, 'Origuel (Pob.)'),
(10922, 421, 'Panalaban'),
(10923, 421, 'Panglan'),
(10924, 421, 'Pangil'),
(10925, 421, 'Piit'),
(10926, 421, 'Pook'),
(10927, 421, 'Rizal'),
(10928, 421, 'San Francisco (Pob.)'),
(10929, 421, 'San Isidro'),
(10930, 421, 'San Miguel (Pob.)'),
(10931, 421, 'San Roque'),
(10932, 421, 'Santa Catalina (Pob.)'),
(10933, 421, 'Suba'),
(10934, 421, 'Tanawan'),
(10935, 421, 'Taytay'),
(10936, 421, 'Talortor'),
(10937, 421, 'Villa Nogales'),
(10938, 422, 'Abo'),
(10939, 422, 'Alibungbungan'),
(10940, 422, 'Alumbrado'),
(10941, 422, 'Balayong'),
(10942, 422, 'Balimbing'),
(10943, 422, 'Balinacon'),
(10944, 422, 'Bambang'),
(10945, 422, 'Banago'),
(10946, 422, 'Banca-banca'),
(10947, 422, 'Bangcuro'),
(10948, 422, 'Banilad'),
(10949, 422, 'Bayaquitos'),
(10950, 422, 'Buboy'),
(10951, 422, 'Buenavista'),
(10952, 422, 'Buhanginan'),
(10953, 422, 'Bukal'),
(10954, 422, 'Bunga'),
(10955, 422, 'Cabuyew'),
(10956, 422, 'Calumpang'),
(10957, 422, 'Kanluran Kabubuhayan'),
(10958, 422, 'Silangan Kabubuhayan'),
(10959, 422, 'Labangan'),
(10960, 422, 'Lawaguin'),
(10961, 422, 'Kanluran Lazaan'),
(10962, 422, 'Silangan Lazaan'),
(10963, 422, 'Lagulo'),
(10964, 422, 'Maiit'),
(10965, 422, 'Malaya'),
(10966, 422, 'Malinao'),
(10967, 422, 'Manaol'),
(10968, 422, 'Maravilla'),
(10969, 422, 'Nagcalbang'),
(10970, 422, 'Poblacion I (Pob.)'),
(10971, 422, 'Poblacion II (Pob.)'),
(10972, 422, 'Poblacion III (Pob.)'),
(10973, 422, 'Oples'),
(10974, 422, 'Palayan'),
(10975, 422, 'Palina'),
(10976, 422, 'Sabang'),
(10977, 422, 'San Francisco'),
(10978, 422, 'Sibulan'),
(10979, 422, 'Silangan Napapatid'),
(10980, 422, 'Silangan Ilaya'),
(10981, 422, 'Sinipian'),
(10982, 422, 'Santa Lucia'),
(10983, 422, 'Sulsuguin'),
(10984, 422, 'Talahib'),
(10985, 422, 'Talangan'),
(10986, 422, 'Taytay'),
(10987, 422, 'Tipacan'),
(10988, 422, 'Wakat'),
(10989, 422, 'Yukos'),
(10990, 423, 'Bagumbayan (Pob.)'),
(10991, 423, 'Bangkusay (Pob.)'),
(10992, 423, 'Ermita (Pob.)'),
(10993, 423, 'Ibaba del Norte (Pob.)'),
(10994, 423, 'Ibaba del Sur (Pob.)'),
(10995, 423, 'Ilaya del Norte (Pob.)'),
(10996, 423, 'Ilaya del Sur (Pob.)'),
(10997, 423, 'Maytoong (Pob.)'),
(10998, 423, 'Quinale (Pob.)'),
(10999, 424, 'Anibong'),
(11000, 424, 'Biñan'),
(11001, 424, 'Buboy'),
(11002, 424, 'Cabanbanan'),
(11003, 424, 'Calusiche'),
(11004, 424, 'Dingin'),
(11005, 424, 'Lambac'),
(11006, 424, 'Layugan'),
(11007, 424, 'Magdapio'),
(11008, 424, 'Maulawin'),
(11009, 424, 'Pinagsanjan'),
(11010, 424, 'Barangay I (Pob.)'),
(11011, 424, 'Barangay II (Pob.)'),
(11012, 424, 'Sabang'),
(11013, 424, 'Sampaloc'),
(11014, 424, 'San Isidro'),
(11015, 425, 'Baño (Pob.)'),
(11016, 425, 'Banilan'),
(11017, 425, 'Burgos (Pob.)'),
(11018, 425, 'Casa Real'),
(11019, 425, 'Casinsin'),
(11020, 425, 'Dorado'),
(11021, 425, 'Gonzales (Pob.)'),
(11022, 425, 'Kabulusan'),
(11023, 425, 'Matikiw'),
(11024, 425, 'Rizal (Pob.)'),
(11025, 425, 'Saray'),
(11026, 425, 'Taft (Pob.)'),
(11027, 425, 'Tavera (Pob.)'),
(11028, 426, 'Balian'),
(11029, 426, 'Dambo'),
(11030, 426, 'Galalan'),
(11031, 426, 'Isla (Pob.)'),
(11032, 426, 'Mabato-Azufre'),
(11033, 426, 'Natividad (Pob.)'),
(11034, 426, 'San Jose (Pob.)'),
(11035, 426, 'Sulib'),
(11036, 427, 'Aplaya'),
(11037, 427, 'Bagong Pook'),
(11038, 427, 'Bukal'),
(11039, 427, 'Bulilan Norte (Pob.)'),
(11040, 427, 'Bulilan Sur (Pob.)'),
(11041, 427, 'Concepcion'),
(11042, 427, 'Labuin'),
(11043, 427, 'Linga'),
(11044, 427, 'Masico'),
(11045, 427, 'Mojon'),
(11046, 427, 'Pansol'),
(11047, 427, 'Pinagbayanan'),
(11048, 427, 'San Antonio'),
(11049, 427, 'San Miguel'),
(11050, 427, 'Santa Clara Norte (Pob.)'),
(11051, 427, 'Santa Clara Sur (Pob.)'),
(11052, 427, 'Tubuan'),
(11053, 428, 'Antipolo'),
(11054, 428, 'Entablado'),
(11055, 428, 'Laguan'),
(11056, 428, 'Paule 1'),
(11057, 428, 'Paule 2'),
(11058, 428, 'East Poblacion'),
(11059, 428, 'West Poblacion'),
(11060, 428, 'Pook'),
(11061, 428, 'Tala'),
(11062, 428, 'Talaga'),
(11063, 428, 'Tuy'),
(11064, 429, 'Bagong Bayan II-A (Pob.)'),
(11065, 429, 'Bagong Pook VI-C (Pob.)'),
(11066, 429, 'Barangay I-A (Pob.)'),
(11067, 429, 'Barangay I-B (Pob.)'),
(11068, 429, 'Barangay II-A (Pob.)'),
(11069, 429, 'Barangay II-B (Pob.)'),
(11070, 429, 'Barangay II-C (Pob.)'),
(11071, 429, 'Barangay II-D (Pob.)'),
(11072, 429, 'Barangay II-E (Pob.)'),
(11073, 429, 'Barangay II-F (Pob.)'),
(11074, 429, 'Barangay III-A (Pob.)'),
(11075, 429, 'Barangay III-B (Pob.)'),
(11076, 429, 'Barangay III-C (Pob.)'),
(11077, 429, 'Barangay III-D (Pob.)'),
(11078, 429, 'Barangay III-E (Pob.)'),
(11079, 429, 'Barangay III-F (Pob.)'),
(11080, 429, 'Barangay IV-A (Pob.)'),
(11081, 429, 'Barangay IV-B (Pob.)'),
(11082, 429, 'Barangay IV-C (Pob.)'),
(11083, 429, 'Barangay V-A (Pob.)'),
(11084, 429, 'Barangay V-B (Pob.)'),
(11085, 429, 'Barangay V-C (Pob.)'),
(11086, 429, 'Barangay V-D (Pob.)'),
(11087, 429, 'Barangay VI-A (Pob.)'),
(11088, 429, 'Barangay VI-B (Pob.)'),
(11089, 429, 'Barangay VI-D (Pob.)'),
(11090, 429, 'Barangay VI-E (Pob.)'),
(11091, 429, 'Barangay VII-A (Pob.)'),
(11092, 429, 'Barangay VII-B (Pob.)'),
(11093, 429, 'Barangay VII-C (Pob.)'),
(11094, 429, 'Barangay VII-D (Pob.)'),
(11095, 429, 'Barangay VII-E (Pob.)'),
(11096, 429, 'Bautista'),
(11097, 429, 'Concepcion'),
(11098, 429, 'Del Remedio'),
(11099, 429, 'Dolores'),
(11100, 429, 'San Antonio 1'),
(11101, 429, 'San Antonio 2'),
(11102, 429, 'San Bartolome'),
(11103, 429, 'San Buenaventura'),
(11104, 429, 'San Crispin'),
(11105, 429, 'San Cristobal'),
(11106, 429, 'San Diego'),
(11107, 429, 'San Francisco'),
(11108, 429, 'San Gabriel'),
(11109, 429, 'San Gregorio'),
(11110, 429, 'San Ignacio'),
(11111, 429, 'San Isidro'),
(11112, 429, 'San Joaquin'),
(11113, 429, 'San Jose'),
(11114, 429, 'San Juan'),
(11115, 429, 'San Lorenzo'),
(11116, 429, 'San Lucas 1'),
(11117, 429, 'San Lucas 2'),
(11118, 429, 'San Marcos'),
(11119, 429, 'San Mateo'),
(11120, 429, 'San Miguel'),
(11121, 429, 'San Nicolas'),
(11122, 429, 'San Pedro'),
(11123, 429, 'San Rafael'),
(11124, 429, 'San Roque'),
(11125, 429, 'San Vicente'),
(11126, 429, 'Santa Ana'),
(11127, 429, 'Santa Catalina'),
(11128, 429, 'Santa Cruz'),
(11129, 429, 'Santa Felomina'),
(11130, 429, 'Santa Isabel'),
(11131, 429, 'Santa Maria Magdalena'),
(11132, 429, 'Santa Veronica'),
(11133, 429, 'Santiago I'),
(11134, 429, 'Santiago II'),
(11135, 429, 'Santisimo Rosario'),
(11136, 429, 'Santo Angel'),
(11137, 429, 'Santo Cristo'),
(11138, 429, 'Santo Niño'),
(11139, 429, 'Soledad'),
(11140, 429, 'Atisan'),
(11141, 429, 'Santa Elena'),
(11142, 429, 'Santa Maria'),
(11143, 429, 'Santa Monica'),
(11144, 430, 'Bagong Silang'),
(11145, 430, 'Cuyab'),
(11146, 430, 'Estrella'),
(11147, 430, 'G.S.I.S.'),
(11148, 430, 'Landayan'),
(11149, 430, 'Langgam'),
(11150, 430, 'Laram'),
(11151, 430, 'Magsaysay'),
(11152, 430, 'Nueva'),
(11153, 430, 'Poblacion'),
(11154, 430, 'Riverside'),
(11155, 430, 'San Antonio'),
(11156, 430, 'San Roque'),
(11157, 430, 'San Vicente'),
(11158, 430, 'Santo Niño'),
(11159, 430, 'United Bayanihan'),
(11160, 430, 'United Better Living'),
(11161, 430, 'Sampaguita Village'),
(11162, 430, 'Calendola'),
(11163, 430, 'Narra'),
(11164, 430, 'Chrysanthemum'),
(11165, 430, 'Fatima'),
(11166, 430, 'Maharlika'),
(11167, 430, 'Pacita 1'),
(11168, 430, 'Pacita 2'),
(11169, 430, 'Rosario'),
(11170, 430, 'San Lorenzo Ruiz'),
(11171, 431, 'Alipit'),
(11172, 431, 'Bagumbayan'),
(11173, 431, 'Bubukal'),
(11174, 431, 'Calios'),
(11175, 431, 'Duhat'),
(11176, 431, 'Gatid'),
(11177, 431, 'Jasaan'),
(11178, 431, 'Labuin'),
(11179, 431, 'Malinao'),
(11180, 431, 'Oogong'),
(11181, 431, 'Pagsawitan'),
(11182, 431, 'Palasan'),
(11183, 431, 'Patimbao'),
(11184, 431, 'Barangay I (Pob.)'),
(11185, 431, 'Barangay II (Pob.)'),
(11186, 431, 'Barangay III (Pob.)'),
(11187, 431, 'Barangay IV (Pob.)'),
(11188, 431, 'Barangay V (Pob.)'),
(11189, 431, 'San Jose'),
(11190, 431, 'San Juan'),
(11191, 431, 'San Pablo Norte'),
(11192, 431, 'San Pablo Sur'),
(11193, 431, 'Santisima Cruz'),
(11194, 431, 'Santo Angel Central'),
(11195, 431, 'Santo Angel Norte'),
(11196, 431, 'Santo Angel Sur'),
(11197, 432, 'Adia'),
(11198, 432, 'Bagong Pook'),
(11199, 432, 'Bagumbayan'),
(11200, 432, 'Bubukal'),
(11201, 432, 'Cabooan'),
(11202, 432, 'Calangay'),
(11203, 432, 'Cambuja'),
(11204, 432, 'Coralan'),
(11205, 432, 'Cueva'),
(11206, 432, 'Inayapan'),
(11207, 432, 'Jose Laurel, Sr.'),
(11208, 432, 'Kayhakat'),
(11209, 432, 'Macasipac'),
(11210, 432, 'Masinao'),
(11211, 432, 'Mataling-Ting'),
(11212, 432, 'Pao-o'),
(11213, 432, 'Parang Ng Buho'),
(11214, 432, 'Barangay I (Pob.)'),
(11215, 432, 'Barangay II (Pob.)'),
(11216, 432, 'Barangay III (Pob.)'),
(11217, 432, 'Barangay IV (Pob.)'),
(11218, 432, 'Jose Rizal'),
(11219, 432, 'Santiago'),
(11220, 432, 'Talangka'),
(11221, 432, 'Tungkod'),
(11222, 433, 'Aplaya'),
(11223, 433, 'Balibago'),
(11224, 433, 'Caingin'),
(11225, 433, 'Dila'),
(11226, 433, 'Dita'),
(11227, 433, 'Don Jose'),
(11228, 433, 'Ibaba'),
(11229, 433, 'Labas'),
(11230, 433, 'Macabling'),
(11231, 433, 'Malitlit'),
(11232, 433, 'Malusak (Pob.)'),
(11233, 433, 'Market Area (Pob.)'),
(11234, 433, 'Kanluran (Pob.)'),
(11235, 433, 'Pook'),
(11236, 433, 'Pulong Santa Cruz'),
(11237, 433, 'Santo Domingo'),
(11238, 433, 'Sinalhan'),
(11239, 433, 'Tagapo'),
(11240, 434, 'Acevida'),
(11241, 434, 'Bagong Pag-Asa (Pob.)'),
(11242, 434, 'Bagumbarangay (Pob.)'),
(11243, 434, 'Buhay'),
(11244, 434, 'Gen. Luna'),
(11245, 434, 'Halayhayin'),
(11246, 434, 'Mendiola'),
(11247, 434, 'Kapatalan'),
(11248, 434, 'Laguio'),
(11249, 434, 'Liyang'),
(11250, 434, 'Llavac'),
(11251, 434, 'Pandeno'),
(11252, 434, 'Magsaysay'),
(11253, 434, 'Macatad'),
(11254, 434, 'Mayatba'),
(11255, 434, 'P. Burgos'),
(11256, 434, 'G. Redor (Pob.)'),
(11257, 434, 'Salubungan'),
(11258, 434, 'Wawa'),
(11259, 434, 'J. Rizal (Pob.)'),
(11260, 435, 'Banca-banca'),
(11261, 435, 'Daniw'),
(11262, 435, 'Masapang'),
(11263, 435, 'Nanhaya (Pob.)'),
(11264, 435, 'Pagalangan'),
(11265, 435, 'San Benito'),
(11266, 435, 'San Felix'),
(11267, 435, 'San Francisco'),
(11268, 435, 'San Roque (Pob.)'),
(11269, 436, 'Binagbag'),
(11270, 436, 'Dayap'),
(11271, 436, 'Ibabang Kinagunan'),
(11272, 436, 'Ilayang Kinagunan'),
(11273, 436, 'Kanlurang Calutan'),
(11274, 436, 'Kanlurang Maligaya'),
(11275, 436, 'Salvacion'),
(11276, 436, 'Silangang Calutan'),
(11277, 436, 'Silangang Maligaya'),
(11278, 436, 'Sildora'),
(11279, 436, 'Poblacion I'),
(11280, 436, 'Poblacion II'),
(11281, 437, 'Angeles'),
(11282, 437, 'Bacong'),
(11283, 437, 'Balungay'),
(11284, 437, 'Buenavista'),
(11285, 437, 'Caglate'),
(11286, 437, 'Camagong'),
(11287, 437, 'Gordon'),
(11288, 437, 'Pambilan Norte'),
(11289, 437, 'Pambilan Sur'),
(11290, 437, 'Barangay 1 (Pob.)'),
(11291, 437, 'Barangay 2 (Pob.)'),
(11292, 437, 'Barangay 3 (Pob.)'),
(11293, 437, 'Barangay 4 (Pob.)'),
(11294, 437, 'Barangay 5 (Pob.)'),
(11295, 437, 'Villa Esperanza'),
(11296, 437, 'Villa Jesus Este'),
(11297, 437, 'Villa Jesus Weste'),
(11298, 437, 'Villa Norte'),
(11299, 437, 'Villa Victoria'),
(11300, 438, 'Angeles'),
(11301, 438, 'Balubad'),
(11302, 438, 'Balugohin'),
(11303, 438, 'Barangay Zone 1 (Pob.)'),
(11304, 438, 'Barangay Zone 2 (Pob.)'),
(11305, 438, 'Barangay Zone 3 (Pob.)'),
(11306, 438, 'Barangay Zone 4 (Pob.)'),
(11307, 438, 'Buhangin'),
(11308, 438, 'Caridad Ibaba'),
(11309, 438, 'Caridad Ilaya'),
(11310, 438, 'Habingan'),
(11311, 438, 'Inaclagan'),
(11312, 438, 'Inalig'),
(11313, 438, 'Kilait'),
(11314, 438, 'Kulawit'),
(11315, 438, 'Lakip'),
(11316, 438, 'Lubi'),
(11317, 438, 'Lumutan'),
(11318, 438, 'Magsaysay'),
(11319, 438, 'Malinao Ibaba'),
(11320, 438, 'Malinao Ilaya'),
(11321, 438, 'Malusak'),
(11322, 438, 'Manggalayan Bundok'),
(11323, 438, 'Manggalayan Labak'),
(11324, 438, 'Matanag'),
(11325, 438, 'Montes Balaon'),
(11326, 438, 'Montes Kallagan'),
(11327, 438, 'Ponon'),
(11328, 438, 'Rizal'),
(11329, 438, 'San Andres Bundok'),
(11330, 438, 'San Andres Labak'),
(11331, 438, 'San Isidro'),
(11332, 438, 'San Jose Balatok'),
(11333, 438, 'San Rafael'),
(11334, 438, 'Santa Catalina'),
(11335, 438, 'Sapaan'),
(11336, 438, 'Sokol'),
(11337, 438, 'Tagbakin'),
(11338, 438, 'Talaba'),
(11339, 438, 'Tinandog'),
(11340, 438, 'Villa Ibaba'),
(11341, 438, 'Villa Ilaya'),
(11342, 439, 'Bagong Silang'),
(11343, 439, 'Batabat Norte'),
(11344, 439, 'Batabat Sur'),
(11345, 439, 'Buenavista'),
(11346, 439, 'Bukal'),
(11347, 439, 'Bulo'),
(11348, 439, 'Cabong'),
(11349, 439, 'Cadlit'),
(11350, 439, 'Catulin'),
(11351, 439, 'Cawa'),
(11352, 439, 'De La Paz'),
(11353, 439, 'Del Rosario'),
(11354, 439, 'Hagonghong'),
(11355, 439, 'Ibabang Wasay'),
(11356, 439, 'Ilayang Wasay'),
(11357, 439, 'Lilukin'),
(11358, 439, 'Mabini'),
(11359, 439, 'Mabutag'),
(11360, 439, 'Magallanes'),
(11361, 439, 'Maligaya'),
(11362, 439, 'Manlana'),
(11363, 439, 'Masaya'),
(11364, 439, 'Poblacion'),
(11365, 439, 'Rizal'),
(11366, 439, 'Sabang Pinamasagan'),
(11367, 439, 'Sabang Piris'),
(11368, 439, 'San Diego'),
(11369, 439, 'San Isidro Ibaba'),
(11370, 439, 'San Isidro Ilaya'),
(11371, 439, 'San Pablo'),
(11372, 439, 'San Pedro'),
(11373, 439, 'San Vicente'),
(11374, 439, 'Siain'),
(11375, 439, 'Villa Aurora'),
(11376, 439, 'Villa Batabat'),
(11377, 439, 'Villa Magsaysay'),
(11378, 439, 'Villa Veronica'),
(11379, 440, 'Aluyon'),
(11380, 440, 'Amot'),
(11381, 440, 'Anibawan'),
(11382, 440, 'Bonifacio'),
(11383, 440, 'Cabugao'),
(11384, 440, 'Cabungalunan'),
(11385, 440, 'Calutcot'),
(11386, 440, 'Caniwan'),
(11387, 440, 'Carlagan'),
(11388, 440, 'Mabini'),
(11389, 440, 'Palasan'),
(11390, 440, 'Poblacion'),
(11391, 440, 'San Rafael'),
(11392, 441, 'Agoho'),
(11393, 441, 'Anahawan'),
(11394, 441, 'Anas'),
(11395, 441, 'Apad Lutao'),
(11396, 441, 'Apad Quezon'),
(11397, 441, 'Apad Taisan'),
(11398, 441, 'Atulayan'),
(11399, 441, 'Baclaran'),
(11400, 441, 'Bagong Silang'),
(11401, 441, 'Balibago'),
(11402, 441, 'Bangkuruhan'),
(11403, 441, 'Bantolinao'),
(11404, 441, 'Barangay I (Pob.)'),
(11405, 441, 'Barangay II (Pob.)'),
(11406, 441, 'Barangay III (Pob.)'),
(11407, 441, 'Barangay IV (Pob.)'),
(11408, 441, 'Barangay V (Pob.)'),
(11409, 441, 'Bigaan'),
(11410, 441, 'Binutas'),
(11411, 441, 'Biyan'),
(11412, 441, 'Bukal'),
(11413, 441, 'Buli'),
(11414, 441, 'Dapdap'),
(11415, 441, 'Dominlog'),
(11416, 441, 'Doña Aurora'),
(11417, 441, 'Guinosayan'),
(11418, 441, 'Ipil'),
(11419, 441, 'Kalibo'),
(11420, 441, 'Kapaluhan'),
(11421, 441, 'Katangtang'),
(11422, 441, 'Kigtan'),
(11423, 441, 'Kinamaligan'),
(11424, 441, 'Kinalin Ibaba'),
(11425, 441, 'Kinalin Ilaya'),
(11426, 441, 'Kumaludkud'),
(11427, 441, 'Kunalum'),
(11428, 441, 'Kuyaoyao'),
(11429, 441, 'Lagay'),
(11430, 441, 'Lainglaingan'),
(11431, 441, 'Lungib'),
(11432, 441, 'Mabini'),
(11433, 441, 'Madlangdungan'),
(11434, 441, 'Maglipad'),
(11435, 441, 'Maligaya'),
(11436, 441, 'Mambaling'),
(11437, 441, 'Manhulugin'),
(11438, 441, 'Marilag'),
(11439, 441, 'Mulay'),
(11440, 441, 'Pandanan'),
(11441, 441, 'Pansol'),
(11442, 441, 'Patihan'),
(11443, 441, 'Pinagbayanan'),
(11444, 441, 'Pinagkamaligan'),
(11445, 441, 'Pinagsakahan'),
(11446, 441, 'Pinagtalleran'),
(11447, 441, 'Rizal Ibaba'),
(11448, 441, 'Rizal Ilaya'),
(11449, 441, 'Sabang I'),
(11450, 441, 'Sabang II'),
(11451, 441, 'Salvacion'),
(11452, 441, 'San Quintin'),
(11453, 441, 'San Roque Ibaba'),
(11454, 441, 'San Roque Ilaya'),
(11455, 441, 'Santa Cecilia'),
(11456, 441, 'Santa Maria'),
(11457, 441, 'Santa Milagrosa'),
(11458, 441, 'Santa Rosa'),
(11459, 441, 'Santo Angel'),
(11460, 441, 'Santo Domingo'),
(11461, 441, 'Sinag'),
(11462, 441, 'Sumilang'),
(11463, 441, 'Sumulong'),
(11464, 441, 'Tabansak'),
(11465, 441, 'Talingting'),
(11466, 441, 'Tamis'),
(11467, 441, 'Tikiwan'),
(11468, 441, 'Tiniguiban'),
(11469, 441, 'Villa Magsino'),
(11470, 441, 'Villa San Isidro'),
(11471, 441, 'Viñas'),
(11472, 441, 'Yaganak'),
(11473, 442, 'Poblacion'),
(11474, 442, 'Buenavista East'),
(11475, 442, 'Buenavista West'),
(11476, 442, 'Bukal Norte'),
(11477, 442, 'Bukal Sur'),
(11478, 442, 'Kinatihan I'),
(11479, 442, 'Kinatihan II'),
(11480, 442, 'Malabanban Norte'),
(11481, 442, 'Malabanban Sur'),
(11482, 442, 'Mangilag Norte'),
(11483, 442, 'Mangilag Sur'),
(11484, 442, 'Masalukot I'),
(11485, 442, 'Masalukot II'),
(11486, 442, 'Masalukot III'),
(11487, 442, 'Masalukot IV'),
(11488, 442, 'Masin Norte'),
(11489, 442, 'Masin Sur'),
(11490, 442, 'Mayabobo'),
(11491, 442, 'Pahinga Norte'),
(11492, 442, 'Pahinga Sur'),
(11493, 442, 'San Andres'),
(11494, 442, 'San Isidro'),
(11495, 442, 'Santa Catalina Norte'),
(11496, 442, 'Santa Catalina Sur'),
(11497, 442, 'Masalukot V'),
(11498, 443, 'Ajos'),
(11499, 443, 'Anusan'),
(11500, 443, 'Barangay 1 (Pob.)'),
(11501, 443, 'Barangay 2 (Pob.)'),
(11502, 443, 'Barangay 3 (Pob.)'),
(11503, 443, 'Barangay 4 (Pob.)'),
(11504, 443, 'Barangay 5 (Pob.)'),
(11505, 443, 'Barangay 6 (Pob.)'),
(11506, 443, 'Barangay 7 (Pob.)'),
(11507, 443, 'Barangay 8 (Pob.)'),
(11508, 443, 'Barangay 9 (Pob.)'),
(11509, 443, 'Bolo'),
(11510, 443, 'Bulagsong'),
(11511, 443, 'Camandiison'),
(11512, 443, 'Canculajao'),
(11513, 443, 'Catumbo'),
(11514, 443, 'Cawayanin Ibaba'),
(11515, 443, 'Cawayanin Ilaya'),
(11516, 443, 'Cutcutan'),
(11517, 443, 'Dahican'),
(11518, 443, 'Doongan Ibaba'),
(11519, 443, 'Doongan Ilaya'),
(11520, 443, 'Gatasan'),
(11521, 443, 'Macpac'),
(11522, 443, 'Madulao'),
(11523, 443, 'Matandang Sabang Kanluran'),
(11524, 443, 'Matandang Sabang Silangan'),
(11525, 443, 'Milagrosa'),
(11526, 443, 'Navitas'),
(11527, 443, 'Pacabit'),
(11528, 443, 'San Antonio Magkupa'),
(11529, 443, 'San Antonio Pala'),
(11530, 443, 'San Isidro'),
(11531, 443, 'San Jose'),
(11532, 443, 'San Pablo'),
(11533, 443, 'San Roque'),
(11534, 443, 'San Vicente Kanluran'),
(11535, 443, 'San Vicente Silangan'),
(11536, 443, 'Santa Maria'),
(11537, 443, 'Tagabas Ibaba'),
(11538, 443, 'Tagabas Ilaya'),
(11539, 443, 'Tagbacan Ibaba'),
(11540, 443, 'Tagbacan Ilaya'),
(11541, 443, 'Tagbacan Silangan'),
(11542, 443, 'Tuhian'),
(11543, 443, 'Barangay 10 (Pob.)'),
(11544, 444, 'Antonino'),
(11545, 444, 'Bagong Anyo (Pob.)'),
(11546, 444, 'Bayanihan (Pob.)'),
(11547, 444, 'Bulakin I'),
(11548, 444, 'Bungoy'),
(11549, 444, 'Cabatang'),
(11550, 444, 'Dagatan'),
(11551, 444, 'Kinabuhayan'),
(11552, 444, 'Maligaya (Pob.)'),
(11553, 444, 'Manggahan'),
(11554, 444, 'Pinagdanlayan'),
(11555, 444, 'Putol'),
(11556, 444, 'San Mateo'),
(11557, 444, 'Santa Lucia'),
(11558, 444, 'Silanganan (Pob.)'),
(11559, 444, 'Bulakin II'),
(11560, 445, 'Bacong Ibaba'),
(11561, 445, 'Bacong Ilaya'),
(11562, 445, 'Barangay 1 (Pob.)'),
(11563, 445, 'Barangay 2 (Pob.)'),
(11564, 445, 'Barangay 3 (Pob.)'),
(11565, 445, 'Barangay 4 (Pob.)'),
(11566, 445, 'Barangay 5 (Pob.)'),
(11567, 445, 'Barangay 6 (Pob.)'),
(11568, 445, 'Barangay 7 (Pob.)'),
(11569, 445, 'Barangay 8 (Pob.)'),
(11570, 445, 'Barangay 9 (Pob.)'),
(11571, 445, 'Lavides'),
(11572, 445, 'Magsaysay'),
(11573, 445, 'Malaya'),
(11574, 445, 'Nieva'),
(11575, 445, 'Recto'),
(11576, 445, 'San Ignacio Ibaba'),
(11577, 445, 'San Ignacio Ilaya'),
(11578, 445, 'San Isidro Ibaba'),
(11579, 445, 'San Isidro Ilaya'),
(11580, 445, 'San Jose'),
(11581, 445, 'San Nicolas'),
(11582, 445, 'San Vicente'),
(11583, 445, 'Santa Maria Ibaba'),
(11584, 445, 'Santa Maria Ilaya'),
(11585, 445, 'Sumilang'),
(11586, 445, 'Villarica'),
(11587, 446, 'Anoling'),
(11588, 446, 'Banglos'),
(11589, 446, 'Batangan'),
(11590, 446, 'Catablingan'),
(11591, 446, 'Canaway'),
(11592, 446, 'Lumutan'),
(11593, 446, 'Mahabang Lalim'),
(11594, 446, 'Maigang'),
(11595, 446, 'Maligaya'),
(11596, 446, 'Magsikap'),
(11597, 446, 'Minahan Norte'),
(11598, 446, 'Minahan Sur'),
(11599, 446, 'Pagsangahan'),
(11600, 446, 'Pamplona'),
(11601, 446, 'Pisa'),
(11602, 446, 'Poblacion'),
(11603, 446, 'Sablang'),
(11604, 446, 'San Marcelino'),
(11605, 446, 'Umiray'),
(11606, 447, 'A. Mabini'),
(11607, 447, 'Aloneros'),
(11608, 447, 'Arbismen'),
(11609, 447, 'Bagong Silang'),
(11610, 447, 'Balinarin'),
(11611, 447, 'Bukal Maligaya'),
(11612, 447, 'Cabibihan'),
(11613, 447, 'Cabong Norte'),
(11614, 447, 'Cabong Sur'),
(11615, 447, 'Calimpak'),
(11616, 447, 'Capuluan Central'),
(11617, 447, 'Capuluan Tulon'),
(11618, 447, 'Dancalan Caimawan'),
(11619, 447, 'Dancalan Central'),
(11620, 447, 'Danlagan Batis'),
(11621, 447, 'Danlagan Cabayao'),
(11622, 447, 'Danlagan Central'),
(11623, 447, 'Danlagan Reserva'),
(11624, 447, 'Del Rosario'),
(11625, 447, 'Dungawan Central'),
(11626, 447, 'Dungawan Paalyunan'),
(11627, 447, 'Dungawan Pantay'),
(11628, 447, 'Ermita'),
(11629, 447, 'Gapas'),
(11630, 447, 'Himbubulo Este'),
(11631, 447, 'Himbubulo Weste'),
(11632, 447, 'Hinabaan'),
(11633, 447, 'Ligpit Bantayan'),
(11634, 447, 'Lubigan'),
(11635, 447, 'Magallanes'),
(11636, 447, 'Magsaysay'),
(11637, 447, 'Manggagawa'),
(11638, 447, 'Manggalang'),
(11639, 447, 'Manlayo'),
(11640, 447, 'Poblacion'),
(11641, 447, 'Salakan'),
(11642, 447, 'San Antonio'),
(11643, 447, 'San Isidro'),
(11644, 447, 'San Jose'),
(11645, 447, 'San Lorenzo'),
(11646, 447, 'San Luis I'),
(11647, 447, 'San Luis II'),
(11648, 447, 'San Miguel'),
(11649, 447, 'San Pedro I'),
(11650, 447, 'San Pedro II'),
(11651, 447, 'San Roque'),
(11652, 447, 'Santa Cruz'),
(11653, 447, 'Santa Maria'),
(11654, 447, 'Santa Teresita'),
(11655, 447, 'Sintones'),
(11656, 447, 'Sisi'),
(11657, 447, 'Tikay'),
(11658, 447, 'Triumpo'),
(11659, 447, 'Villa Hiwasayan'),
(11660, 448, 'Adia Bitaog'),
(11661, 448, 'Anonangin'),
(11662, 448, 'Bagong Buhay (Pob.)'),
(11663, 448, 'Bamban'),
(11664, 448, 'Bantad'),
(11665, 448, 'Batong Dalig'),
(11666, 448, 'Biga'),
(11667, 448, 'Binambang'),
(11668, 448, 'Buensuceso'),
(11669, 448, 'Bungahan'),
(11670, 448, 'Butaguin'),
(11671, 448, 'Calumangin'),
(11672, 448, 'Camohaguin'),
(11673, 448, 'Casasahan Ibaba'),
(11674, 448, 'Casasahan Ilaya'),
(11675, 448, 'Cawayan'),
(11676, 448, 'Gayagayaan'),
(11677, 448, 'Gitnang Barrio'),
(11678, 448, 'Hardinan'),
(11679, 448, 'Inaclagan'),
(11680, 448, 'Inagbuhan Ilaya'),
(11681, 448, 'Hagakhakin'),
(11682, 448, 'Labnig'),
(11683, 448, 'Laguna'),
(11684, 448, 'Mabini (Pob.)'),
(11685, 448, 'Mabunga'),
(11686, 448, 'Malabtog'),
(11687, 448, 'Manlayaan'),
(11688, 448, 'Marcelo H. Del Pilar'),
(11689, 448, 'Mataas Na Bundok'),
(11690, 448, 'Maunlad (Pob.)'),
(11691, 448, 'Pagsabangan'),
(11692, 448, 'Panikihan'),
(11693, 448, 'Peñafrancia (Pob.)'),
(11694, 448, 'Pipisik (Pob.)'),
(11695, 448, 'Progreso'),
(11696, 448, 'Rizal (Pob.)'),
(11697, 448, 'Rosario'),
(11698, 448, 'San Agustin'),
(11699, 448, 'San Diego Poblacion'),
(11700, 448, 'San Isidro Kanluran'),
(11701, 448, 'San Isidro Silangan'),
(11702, 448, 'San Juan De Jesus'),
(11703, 448, 'San Vicente'),
(11704, 448, 'Sastre'),
(11705, 448, 'Tabing Dagat (Pob.)'),
(11706, 448, 'Tumayan'),
(11707, 448, 'Villa Arcaya'),
(11708, 448, 'Villa Bota'),
(11709, 448, 'Villa Fuerte'),
(11710, 448, 'Villa Mendoza'),
(11711, 448, 'Villa Padua'),
(11712, 448, 'Villa Perez'),
(11713, 448, 'Villa M. Principe'),
(11714, 448, 'Villa Tañada'),
(11715, 448, 'Villa Victoria'),
(11716, 448, 'San Diego'),
(11717, 448, 'Villa Nava'),
(11718, 448, 'Lagyo'),
(11719, 449, 'Abiawin'),
(11720, 449, 'Agos-agos'),
(11721, 449, 'Alitas'),
(11722, 449, 'Amolongin'),
(11723, 449, 'Anibong'),
(11724, 449, 'Antikin'),
(11725, 449, 'Bacong'),
(11726, 449, 'Balobo'),
(11727, 449, 'Bantilan'),
(11728, 449, 'Banugao'),
(11729, 449, 'Poblacion 1'),
(11730, 449, 'Poblacion 38'),
(11731, 449, 'Poblacion 39'),
(11732, 449, 'Batican'),
(11733, 449, 'Binonoan'),
(11734, 449, 'Binulasan'),
(11735, 449, 'Boboin'),
(11736, 449, 'Comon'),
(11737, 449, 'Dinahican'),
(11738, 449, 'Gumian'),
(11739, 449, 'Ilog'),
(11740, 449, 'Ingas'),
(11741, 449, 'Catambungan'),
(11742, 449, 'Cawaynin'),
(11743, 449, 'Langgas'),
(11744, 449, 'Libjo'),
(11745, 449, 'Lual'),
(11746, 449, 'Magsaysay'),
(11747, 449, 'Maypulot'),
(11748, 449, 'Miswa'),
(11749, 449, 'Pilaway'),
(11750, 449, 'Pinaglapatan'),
(11751, 449, 'Pulo'),
(11752, 449, 'Silangan'),
(11753, 449, 'Tongohin'),
(11754, 449, 'Tudturan'),
(11755, 450, 'Bukal'),
(11756, 450, 'Casuguran'),
(11757, 450, 'Gango'),
(11758, 450, 'Talisoy (Pob.)'),
(11759, 450, 'Apad'),
(11760, 451, 'Bacungan'),
(11761, 451, 'Bagacay'),
(11762, 451, 'Banabahin Ibaba'),
(11763, 451, 'Banabahin Ilaya'),
(11764, 451, 'Burgos (Pob.)'),
(11765, 451, 'Gomez (Pob.)'),
(11766, 451, 'Magsaysay (Pob.)'),
(11767, 451, 'Talolong (Pob.)'),
(11768, 451, 'Bayabas'),
(11769, 451, 'Bebito'),
(11770, 451, 'Bigajo'),
(11771, 451, 'Binahian A'),
(11772, 451, 'Binahian B'),
(11773, 451, 'Binahian C'),
(11774, 451, 'Bocboc'),
(11775, 451, 'Buenavista'),
(11776, 451, 'Buyacanin'),
(11777, 451, 'Cagacag'),
(11778, 451, 'Calantipayan'),
(11779, 451, 'Canda Ibaba'),
(11780, 451, 'Canda Ilaya'),
(11781, 451, 'Cawayan'),
(11782, 451, 'Cawayanin'),
(11783, 451, 'Cogorin Ibaba'),
(11784, 451, 'Cogorin Ilaya'),
(11785, 451, 'Concepcion'),
(11786, 451, 'Danlagan'),
(11787, 451, 'De La Paz'),
(11788, 451, 'Del Pilar'),
(11789, 451, 'Del Rosario'),
(11790, 451, 'Esperanza Ibaba'),
(11791, 451, 'Esperanza Ilaya'),
(11792, 451, 'Guihay'),
(11793, 451, 'Guinuangan'),
(11794, 451, 'Guites'),
(11795, 451, 'Hondagua'),
(11796, 451, 'Ilayang Ilog A'),
(11797, 451, 'Ilayang Ilog B'),
(11798, 451, 'Inalusan'),
(11799, 451, 'Jongo'),
(11800, 451, 'Lalaguna'),
(11801, 451, 'Lourdes'),
(11802, 451, 'Mabanban'),
(11803, 451, 'Mabini'),
(11804, 451, 'Magallanes'),
(11805, 451, 'Maguilayan'),
(11806, 451, 'Mahayod-Hayod'),
(11807, 451, 'Mal-ay'),
(11808, 451, 'Mandoog'),
(11809, 451, 'Manguisian'),
(11810, 451, 'Matinik'),
(11811, 451, 'Monteclaro'),
(11812, 451, 'Pamampangin'),
(11813, 451, 'Pansol'),
(11814, 451, 'Peñafrancia'),
(11815, 451, 'Pisipis'),
(11816, 451, 'Rizal (Pob.)'),
(11817, 451, 'Roma'),
(11818, 451, 'Rosario'),
(11819, 451, 'Samat'),
(11820, 451, 'San Andres'),
(11821, 451, 'San Antonio'),
(11822, 451, 'San Francisco A'),
(11823, 451, 'San Francisco B'),
(11824, 451, 'San Isidro'),
(11825, 451, 'San Jose'),
(11826, 451, 'San Miguel'),
(11827, 451, 'San Pedro'),
(11828, 451, 'San Rafael'),
(11829, 451, 'San Roque'),
(11830, 451, 'Santa Catalina'),
(11831, 451, 'Santa Elena'),
(11832, 451, 'Santa Jacobe'),
(11833, 451, 'Santa Lucia'),
(11834, 451, 'Santa Maria'),
(11835, 451, 'Santa Rosa'),
(11836, 451, 'Santo Niño Ibaba'),
(11837, 451, 'Santo Niño Ilaya'),
(11838, 451, 'Silang'),
(11839, 451, 'Sugod'),
(11840, 451, 'Sumalang'),
(11841, 451, 'Tan-ag Ibaba'),
(11842, 451, 'Tan-ag Ilaya'),
(11843, 451, 'Tocalin'),
(11844, 451, 'Vegaflor'),
(11845, 451, 'Vergaña'),
(11846, 451, 'Veronica'),
(11847, 451, 'Villa Aurora'),
(11848, 451, 'Villa Espina'),
(11849, 451, 'Villa Hermosa'),
(11850, 451, 'Villa Geda'),
(11851, 451, 'Villamonte'),
(11852, 451, 'Villanacaob'),
(11853, 451, 'Rizal (Rural)'),
(11854, 451, 'Santa Teresa'),
(11855, 452, 'Abang'),
(11856, 452, 'Aliliw'),
(11857, 452, 'Atulinao'),
(11858, 452, 'Ayuti'),
(11859, 452, 'Barangay 2 (Pob.)'),
(11860, 452, 'Barangay 3 (Pob.)'),
(11861, 452, 'Barangay 4 (Pob.)'),
(11862, 452, 'Barangay 5 (Pob.)'),
(11863, 452, 'Barangay 6 (Pob.)'),
(11864, 452, 'Barangay 7 (Pob.)'),
(11865, 452, 'Barangay 8 (Pob.)'),
(11866, 452, 'Barangay 9 (Pob.)'),
(11867, 452, 'Barangay 10 (Pob.)'),
(11868, 452, 'Igang'),
(11869, 452, 'Kabatete'),
(11870, 452, 'Kakawit'),
(11871, 452, 'Kalangay'),
(11872, 452, 'Kalyaat'),
(11873, 452, 'Kilib'),
(11874, 452, 'Kulapi'),
(11875, 452, 'Mahabang Parang'),
(11876, 452, 'Malupak'),
(11877, 452, 'Manasa'),
(11878, 452, 'May-It'),
(11879, 452, 'Nagsinamo'),
(11880, 452, 'Nalunao'),
(11881, 452, 'Palola'),
(11882, 452, 'Piis'),
(11883, 452, 'Barangay 1 (Pob.)'),
(11884, 452, 'Samil'),
(11885, 452, 'Tiawe'),
(11886, 452, 'Tinamnan'),
(11887, 453, 'Barangay 1 (Pob.)'),
(11888, 453, 'Barangay 10 (Pob.)'),
(11889, 453, 'Barangay 11 (Pob.)'),
(11890, 453, 'Barangay 2 (Pob.)'),
(11891, 453, 'Barangay 3 (Pob.)'),
(11892, 453, 'Barangay 4 (Pob.)'),
(11893, 453, 'Barangay 5 (Pob.)'),
(11894, 453, 'Barangay 6 (Pob.)'),
(11895, 453, 'Barangay 7 (Pob.)'),
(11896, 453, 'Barangay 8 (Pob.)'),
(11897, 453, 'Barangay 9 (Pob.)'),
(11898, 453, 'Barra'),
(11899, 453, 'Bocohan'),
(11900, 453, 'Mayao Castillo'),
(11901, 453, 'Cotta'),
(11902, 453, 'Gulang-gulang'),
(11903, 453, 'Dalahican'),
(11904, 453, 'Domoit'),
(11905, 453, 'Ibabang Dupay'),
(11906, 453, 'Ibabang Iyam'),
(11907, 453, 'Ibabang Talim'),
(11908, 453, 'Ilayang Dupay'),
(11909, 453, 'Ilayang Iyam'),
(11910, 453, 'Ilayang Talim'),
(11911, 453, 'Isabang'),
(11912, 453, 'Mayao Crossing'),
(11913, 453, 'Mayao Kanluran'),
(11914, 453, 'Mayao Parada'),
(11915, 453, 'Mayao Silangan'),
(11916, 453, 'Ransohan'),
(11917, 453, 'Salinas'),
(11918, 453, 'Talao-talao'),
(11919, 453, 'Market View'),
(11920, 454, 'Amontay'),
(11921, 454, 'Anos'),
(11922, 454, 'Buyao'),
(11923, 454, 'Candangal'),
(11924, 454, 'Calantas'),
(11925, 454, 'Lahing'),
(11926, 454, 'Luctob'),
(11927, 454, 'Mabini Ibaba'),
(11928, 454, 'Mabini Ilaya'),
(11929, 454, 'Malabahay'),
(11930, 454, 'Mambog'),
(11931, 454, 'Olongtao Ibaba'),
(11932, 454, 'Olongtao Ilaya'),
(11933, 454, 'Padre Herrera'),
(11934, 454, 'Pajarillo'),
(11935, 454, 'Pinagbayanan'),
(11936, 454, 'Rodriquez (Pob.)'),
(11937, 454, 'Rizal (Pob.)'),
(11938, 454, 'Castillo (Pob.)'),
(11939, 454, 'Pag-Asa (Pob.)'),
(11940, 454, 'Masipag (Pob.)'),
(11941, 454, 'Damayan (Pob.)'),
(11942, 454, 'San Isidro'),
(11943, 454, 'San Jose'),
(11944, 454, 'San Nicolas'),
(11945, 454, 'San Vicente'),
(11946, 454, 'Taguin'),
(11947, 454, 'Tubigan Ibaba'),
(11948, 454, 'Tubigan Ilaya'),
(11949, 454, 'Vista Hermosa'),
(11950, 455, 'Abo-abo'),
(11951, 455, 'Alitap'),
(11952, 455, 'Baao'),
(11953, 455, 'Balaybalay'),
(11954, 455, 'Bato'),
(11955, 455, 'Cagbalete I'),
(11956, 455, 'Cagbalete II'),
(11957, 455, 'Cagsiay I'),
(11958, 455, 'Cagsiay II'),
(11959, 455, 'Cagsiay III'),
(11960, 455, 'Concepcion'),
(11961, 455, 'Liwayway'),
(11962, 455, 'Lucutan'),
(11963, 455, 'Luya-luya'),
(11964, 455, 'Macasin'),
(11965, 455, 'Lual (Pob.)'),
(11966, 455, 'Mabato (Pob.)'),
(11967, 455, 'Daungan (Pob.)'),
(11968, 455, 'Bagong Bayan (Pob.)'),
(11969, 455, 'Sadsaran (Pob.)'),
(11970, 455, 'Rizaliana (Pob.)'),
(11971, 455, 'Polo'),
(11972, 455, 'Remedios I'),
(11973, 455, 'Remedios II'),
(11974, 455, 'Rosario'),
(11975, 455, 'San Gabriel'),
(11976, 455, 'San Isidro'),
(11977, 455, 'San Jose'),
(11978, 455, 'San Lorenzo'),
(11979, 455, 'San Miguel'),
(11980, 455, 'San Rafael'),
(11981, 455, 'San Roque'),
(11982, 455, 'San Vicente'),
(11983, 455, 'Santa Lucia'),
(11984, 455, 'Santo Angel'),
(11985, 455, 'Santo Niño'),
(11986, 455, 'Santol'),
(11987, 455, 'Soledad'),
(11988, 455, 'Tapucan'),
(11989, 455, 'Lual Rural'),
(11990, 456, 'Ajos'),
(11991, 456, 'Amuguis'),
(11992, 456, 'Anonang'),
(11993, 456, 'Bagong Silang'),
(11994, 456, 'Bagupaye'),
(11995, 456, 'Barangay 1 (Pob.)'),
(11996, 456, 'Barangay 2 (Pob.)'),
(11997, 456, 'Barangay 3 (Pob.)'),
(11998, 456, 'Barangay 4 (Pob.)'),
(11999, 456, 'Bolo'),
(12000, 456, 'Buenavista'),
(12001, 456, 'Burgos'),
(12002, 456, 'Butanyog'),
(12003, 456, 'Canuyep'),
(12004, 456, 'F. Nanadiego'),
(12005, 456, 'Ibabang Cambuga'),
(12006, 456, 'Ibabang Yuni'),
(12007, 456, 'Ilayang Cambuga'),
(12008, 456, 'Ilayang Yuni'),
(12009, 456, 'Latangan'),
(12010, 456, 'Magsaysay'),
(12011, 456, 'Matataja'),
(12012, 456, 'Pakiing'),
(12013, 456, 'Patabog'),
(12014, 456, 'Sagongon'),
(12015, 456, 'San Isidro'),
(12016, 456, 'San Pedro'),
(12017, 456, 'Santa Rosa'),
(12018, 457, 'Cabuyao Norte'),
(12019, 457, 'Cabuyao Sur'),
(12020, 457, 'Danlagan'),
(12021, 457, 'Duhat'),
(12022, 457, 'Hinguiwin'),
(12023, 457, 'Kinagunan Ibaba'),
(12024, 457, 'Kinagunan Ilaya'),
(12025, 457, 'Lipata'),
(12026, 457, 'Marao'),
(12027, 457, 'Marquez'),
(12028, 457, 'Burgos (Pob.)'),
(12029, 457, 'Campo (Pob.)'),
(12030, 457, 'Basiao (Pob.)'),
(12031, 457, 'Punta (Pob.)'),
(12032, 457, 'Rizal'),
(12033, 457, 'San Isidro'),
(12034, 457, 'San Vicente'),
(12035, 457, 'Sipa'),
(12036, 457, 'Tulay Buhangin'),
(12037, 457, 'Villapaz'),
(12038, 457, 'Walay'),
(12039, 457, 'Yawe'),
(12040, 458, 'Alupaye'),
(12041, 458, 'Añato'),
(12042, 458, 'Antipolo'),
(12043, 458, 'Bantigue'),
(12044, 458, 'Bigo'),
(12045, 458, 'Binahaan'),
(12046, 458, 'Bukal'),
(12047, 458, 'Ibabang Bagumbungan');
INSERT INTO `table_barangay` (`barangay_id`, `municipality_id`, `barangay_name`) VALUES
(12048, 458, 'Ibabang Palsabangon'),
(12049, 458, 'Ibabang Polo'),
(12050, 458, 'Ikirin'),
(12051, 458, 'Ilayang Bagumbungan'),
(12052, 458, 'Ilayang Palsabangon'),
(12053, 458, 'Ilayang Polo'),
(12054, 458, 'Kanluran Malicboy'),
(12055, 458, 'Mapagong'),
(12056, 458, 'Mayhay'),
(12057, 458, 'Pinagbayanan'),
(12058, 458, 'Barangay 1 Castillo (Pob.)'),
(12059, 458, 'Barangay 2 Daungan (Pob.)'),
(12060, 458, 'Barangay 3 Del Carmen (Pob.)'),
(12061, 458, 'Barangay 4 Parang (Pob.)'),
(12062, 458, 'Barangay 5 Santa Catalina (Pob.)'),
(12063, 458, 'Barangay 6 Tambak (Pob.)'),
(12064, 458, 'Silangan Malicboy'),
(12065, 458, 'Talipan'),
(12066, 458, 'Tukalan'),
(12067, 459, 'Balungay'),
(12068, 459, 'Bato'),
(12069, 459, 'Bonbon'),
(12070, 459, 'Calasumanga'),
(12071, 459, 'Kinalagti'),
(12072, 459, 'Libo'),
(12073, 459, 'Lipata'),
(12074, 459, 'Matangkap'),
(12075, 459, 'Milawid'),
(12076, 459, 'Pagitan'),
(12077, 459, 'Pandan'),
(12078, 459, 'San Juan (Pob.)'),
(12079, 459, 'Rizal'),
(12080, 460, 'Amaga'),
(12081, 460, 'Busdak'),
(12082, 460, 'Kilogan'),
(12083, 460, 'Luod'),
(12084, 460, 'Patnanungan Norte'),
(12085, 460, 'Patnanungan Sur (Pob.)'),
(12086, 461, 'Maabot'),
(12087, 461, 'Mainit Norte'),
(12088, 461, 'Mainit Sur'),
(12089, 461, 'Pambuhan'),
(12090, 461, 'Pinagtubigan Este'),
(12091, 461, 'Pinagtubigan Weste'),
(12092, 461, 'Pagkakaisa Pob.'),
(12093, 461, 'Mapagmahal Pob.'),
(12094, 461, 'Bagong Pag-Asa Pob.'),
(12095, 461, 'Bagong Silang Pob.'),
(12096, 461, 'Rizal'),
(12097, 461, 'Sangirin'),
(12098, 461, 'Villamanzano Norte'),
(12099, 461, 'Villamanzano Sur'),
(12100, 462, 'Amontay'),
(12101, 462, 'Cometa'),
(12102, 462, 'Biga'),
(12103, 462, 'Bilucao'),
(12104, 462, 'Cabulihan'),
(12105, 462, 'Cawayanin'),
(12106, 462, 'Gangahin'),
(12107, 462, 'Ibabang Burgos'),
(12108, 462, 'Ibabang Pacatin'),
(12109, 462, 'Ibabang Piña'),
(12110, 462, 'Ibabang Soliyao'),
(12111, 462, 'Ilayang Burgos'),
(12112, 462, 'Ilayang Pacatin'),
(12113, 462, 'Ilayang Piña'),
(12114, 462, 'Ilayang Soliyao'),
(12115, 462, 'Nag-Cruz'),
(12116, 462, 'Osmeña'),
(12117, 462, 'Payte'),
(12118, 462, 'Pinagbayanan'),
(12119, 462, 'Masaya (Pob.)'),
(12120, 462, 'Manggahan (Pob.)'),
(12121, 462, 'Dulong Bayan (Pob.)'),
(12122, 462, 'Pag-Asa (Pob.)'),
(12123, 462, 'Castillo (Pob.)'),
(12124, 462, 'Maaliw (Pob.)'),
(12125, 462, 'Mayubok (Pob.)'),
(12126, 462, 'Pamilihan (Pob.)'),
(12127, 462, 'Dalampasigan (Pob.)'),
(12128, 462, 'Poctol'),
(12129, 462, 'Quezon'),
(12130, 462, 'Quinagasan'),
(12131, 462, 'Rizalino'),
(12132, 462, 'Saguinsinan'),
(12133, 462, 'Sampaloc'),
(12134, 462, 'San Roque'),
(12135, 462, 'Sisirin'),
(12136, 462, 'Sumag Este'),
(12137, 462, 'Sumag Norte'),
(12138, 462, 'Sumag Weste'),
(12139, 463, 'Concepcion'),
(12140, 463, 'Duhat'),
(12141, 463, 'Ilaya'),
(12142, 463, 'Ilosong'),
(12143, 463, 'Tanauan'),
(12144, 463, 'Central (Pob.)'),
(12145, 463, 'Paang Bundok (Pob.)'),
(12146, 463, 'Pampaaralan (Pob.)'),
(12147, 463, 'M. L. Tumagay Pob.'),
(12148, 464, 'Anawan'),
(12149, 464, 'Atulayan'),
(12150, 464, 'Balesin'),
(12151, 464, 'Bañadero'),
(12152, 464, 'Binibitinan'),
(12153, 464, 'Bislian'),
(12154, 464, 'Bucao'),
(12155, 464, 'Canicanian'),
(12156, 464, 'Kalubakis'),
(12157, 464, 'Languyin'),
(12158, 464, 'Libjo'),
(12159, 464, 'Pamatdan'),
(12160, 464, 'Pilion'),
(12161, 464, 'Pinaglubayan'),
(12162, 464, 'Poblacion'),
(12163, 464, 'Sabang'),
(12164, 464, 'Salipsip'),
(12165, 464, 'Sibulan'),
(12166, 464, 'Taluong'),
(12167, 464, 'Tamulaya-Anitong'),
(12168, 465, 'Apad'),
(12169, 465, 'Argosino'),
(12170, 465, 'Cagbalogo'),
(12171, 465, 'Caridad'),
(12172, 465, 'Cometa'),
(12173, 465, 'Del Pilar'),
(12174, 465, 'Guinhawa'),
(12175, 465, 'Gumubat'),
(12176, 465, 'Magsino'),
(12177, 465, 'Mascariña'),
(12178, 465, 'Montaña'),
(12179, 465, 'Barangay I (Pob.)'),
(12180, 465, 'Barangay II (Pob.)'),
(12181, 465, 'Barangay III (Pob.)'),
(12182, 465, 'Barangay IV (Pob.)'),
(12183, 465, 'Barangay V (Pob.)'),
(12184, 465, 'Barangay VI (Pob.)'),
(12185, 465, 'Sabang'),
(12186, 465, 'Silangan'),
(12187, 465, 'Tagkawa'),
(12188, 465, 'Villa Belen'),
(12189, 465, 'Villa Francia'),
(12190, 465, 'Villa Gomez'),
(12191, 465, 'Villa Mercedes'),
(12192, 466, 'Poblacion I'),
(12193, 466, 'Capalong'),
(12194, 466, 'Cawayan'),
(12195, 466, 'Kiloloran'),
(12196, 466, 'Llavac'),
(12197, 466, 'Lubayat'),
(12198, 466, 'Malapad'),
(12199, 466, 'Maragondon'),
(12200, 466, 'Pandan'),
(12201, 466, 'Tanauan'),
(12202, 466, 'Tignoan'),
(12203, 466, 'Ungos'),
(12204, 466, 'Poblacion 61'),
(12205, 466, 'Maunlad'),
(12206, 466, 'Bagong Silang'),
(12207, 466, 'Masikap'),
(12208, 466, 'Tagumpay'),
(12209, 467, 'Alupay'),
(12210, 467, 'Apasan'),
(12211, 467, 'Banot'),
(12212, 467, 'Bataan'),
(12213, 467, 'Bayongon'),
(12214, 467, 'Bilucao'),
(12215, 467, 'Caldong'),
(12216, 467, 'Ibabang Owain'),
(12217, 467, 'Ilayang Owain'),
(12218, 467, 'Mamala'),
(12219, 467, 'San Bueno'),
(12220, 467, 'San Isidro (Pob.)'),
(12221, 467, 'San Roque (Pob.)'),
(12222, 467, 'Taquico'),
(12223, 468, 'Alibihaban'),
(12224, 468, 'Camflora'),
(12225, 468, 'Mangero'),
(12226, 468, 'Pansoy'),
(12227, 468, 'Tala'),
(12228, 468, 'Talisay'),
(12229, 468, 'Poblacion'),
(12230, 469, 'Arawan'),
(12231, 469, 'Bagong Niing'),
(12232, 469, 'Balat Atis'),
(12233, 469, 'Briones'),
(12234, 469, 'Bulihan'),
(12235, 469, 'Buliran'),
(12236, 469, 'Callejon'),
(12237, 469, 'Corazon'),
(12238, 469, 'Manuel del Valle, Sr.'),
(12239, 469, 'Loob'),
(12240, 469, 'Magsaysay'),
(12241, 469, 'Matipunso'),
(12242, 469, 'Niing'),
(12243, 469, 'Poblacion'),
(12244, 469, 'Pulo'),
(12245, 469, 'Pury'),
(12246, 469, 'Sampaga'),
(12247, 469, 'Sampaguita'),
(12248, 469, 'San Jose'),
(12249, 469, 'Sinturisan'),
(12250, 470, 'Butanguiad'),
(12251, 470, 'Casay'),
(12252, 470, 'Cawayan I'),
(12253, 470, 'Cawayan II'),
(12254, 470, 'Huyon-Uyon'),
(12255, 470, 'Ibabang Tayuman'),
(12256, 470, 'Ilayang Tayuman'),
(12257, 470, 'Inabuan'),
(12258, 470, 'Nasalaan'),
(12259, 470, 'Pagsangahan'),
(12260, 470, 'Poblacion'),
(12261, 470, 'Pugon'),
(12262, 470, 'Silongin'),
(12263, 470, 'Don Juan Vercelos'),
(12264, 470, 'Mabuñga'),
(12265, 470, 'Santo Niño'),
(12266, 471, 'Abuyon'),
(12267, 471, 'Andres Bonifacio'),
(12268, 471, 'Bani'),
(12269, 471, 'Binay'),
(12270, 471, 'Buenavista'),
(12271, 471, 'Busokbusokan'),
(12272, 471, 'Calwit'),
(12273, 471, 'Guinhalinan'),
(12274, 471, 'Lacdayan'),
(12275, 471, 'Maguiting'),
(12276, 471, 'Manlampong'),
(12277, 471, 'Pagkakaisa (Pob.)'),
(12278, 471, 'Maligaya (Pob.)'),
(12279, 471, 'Bayanihan (Pob.)'),
(12280, 471, 'Pagdadamayan (Pob.)'),
(12281, 471, 'Punta'),
(12282, 471, 'Rizal'),
(12283, 471, 'San Isidro'),
(12284, 471, 'San Juan'),
(12285, 471, 'San Vicente'),
(12286, 471, 'Vigo Central'),
(12287, 471, 'Villa Aurin'),
(12288, 471, 'Villa Reyes'),
(12289, 471, 'White Cliff'),
(12290, 472, 'Antipolo'),
(12291, 472, 'Balubal'),
(12292, 472, 'Concepcion Pinagbakuran'),
(12293, 472, 'Bignay 1'),
(12294, 472, 'Bignay 2'),
(12295, 472, 'Bucal'),
(12296, 472, 'Canda'),
(12297, 472, 'Castañas'),
(12298, 472, 'Concepcion Banahaw'),
(12299, 472, 'Concepcion No. 1'),
(12300, 472, 'Concepcion Palasan'),
(12301, 472, 'Gibanga'),
(12302, 472, 'Guisguis-San Roque'),
(12303, 472, 'Guisguis-Talon'),
(12304, 472, 'Janagdong 1'),
(12305, 472, 'Janagdong 2'),
(12306, 472, 'Limbon'),
(12307, 472, 'Lutucan Bata'),
(12308, 472, 'Lutucan Malabag'),
(12309, 472, 'Lutucan 1'),
(12310, 472, 'Mamala I'),
(12311, 472, 'Manggalang 1'),
(12312, 472, 'Manggalang Tulo-tulo'),
(12313, 472, 'Manggalang-Bantilan'),
(12314, 472, 'Manggalang-Kiling'),
(12315, 472, 'Montecillo'),
(12316, 472, 'Morong'),
(12317, 472, 'Pili'),
(12318, 472, 'Barangay 2 (Pob.)'),
(12319, 472, 'Barangay 3 (Pob.)'),
(12320, 472, 'Barangay 4 (Pob.)'),
(12321, 472, 'Barangay 5 (Pob.)'),
(12322, 472, 'Barangay 6 (Pob.)'),
(12323, 472, 'Sampaloc Bogon'),
(12324, 472, 'Sampaloc 1'),
(12325, 472, 'Sampaloc 2'),
(12326, 472, 'Sampaloc Santo Cristo'),
(12327, 472, 'Talaan Aplaya'),
(12328, 472, 'Talaanpantoc'),
(12329, 472, 'Tumbaga 1'),
(12330, 472, 'Tumbaga 2'),
(12331, 472, 'Barangay 1 (Pob.)'),
(12332, 472, 'Mamala II'),
(12333, 473, 'Aldavoc'),
(12334, 473, 'Aliji'),
(12335, 473, 'Bagong Silang'),
(12336, 473, 'Bamban'),
(12337, 473, 'Bosigon'),
(12338, 473, 'Bukal'),
(12339, 473, 'Cabugwang'),
(12340, 473, 'Cagascas'),
(12341, 473, 'Casispalan'),
(12342, 473, 'Colong-colong'),
(12343, 473, 'Del Rosario'),
(12344, 473, 'Cabibihan'),
(12345, 473, 'Candalapdap'),
(12346, 473, 'Katimo'),
(12347, 473, 'Kinatakutan'),
(12348, 473, 'Landing'),
(12349, 473, 'Laurel'),
(12350, 473, 'Magsaysay'),
(12351, 473, 'Maguibuay'),
(12352, 473, 'Mahinta'),
(12353, 473, 'Malbog'),
(12354, 473, 'Manato Central'),
(12355, 473, 'Manato Station'),
(12356, 473, 'Mangayao'),
(12357, 473, 'Mansilay'),
(12358, 473, 'Mapulot'),
(12359, 473, 'Munting Parang'),
(12360, 473, 'Payapa'),
(12361, 473, 'Poblacion'),
(12362, 473, 'Rizal'),
(12363, 473, 'Sabang'),
(12364, 473, 'San Diego'),
(12365, 473, 'San Francisco'),
(12366, 473, 'San Isidro'),
(12367, 473, 'San Roque'),
(12368, 473, 'San Vicente'),
(12369, 473, 'Santa Cecilia'),
(12370, 473, 'Santa Monica'),
(12371, 473, 'Santo Niño I'),
(12372, 473, 'Santo Niño II'),
(12373, 473, 'Santo Tomas'),
(12374, 473, 'Seguiwan'),
(12375, 473, 'Tabason'),
(12376, 473, 'Tunton'),
(12377, 473, 'Victoria'),
(12378, 474, 'Alitao'),
(12379, 474, 'Alupay'),
(12380, 474, 'Angeles Zone I (Pob.)'),
(12381, 474, 'Angeles Zone II'),
(12382, 474, 'Angeles Zone III'),
(12383, 474, 'Angeles Zone IV'),
(12384, 474, 'Angustias Zone I (Pob.)'),
(12385, 474, 'Angustias Zone II'),
(12386, 474, 'Angustias Zone III'),
(12387, 474, 'Angustias Zone IV'),
(12388, 474, 'Anos'),
(12389, 474, 'Ayaas'),
(12390, 474, 'Baguio'),
(12391, 474, 'Banilad'),
(12392, 474, 'Calantas'),
(12393, 474, 'Camaysa'),
(12394, 474, 'Dapdap'),
(12395, 474, 'Gibanga'),
(12396, 474, 'Alsam Ibaba'),
(12397, 474, 'Bukal Ibaba'),
(12398, 474, 'Ilasan Ibaba'),
(12399, 474, 'Nangka Ibaba'),
(12400, 474, 'Palale Ibaba'),
(12401, 474, 'Ibas'),
(12402, 474, 'Alsam Ilaya'),
(12403, 474, 'Bukal Ilaya'),
(12404, 474, 'Ilasan Ilaya'),
(12405, 474, 'Nangka Ilaya'),
(12406, 474, 'Palale Ilaya'),
(12407, 474, 'Ipilan'),
(12408, 474, 'Isabang'),
(12409, 474, 'Calumpang'),
(12410, 474, 'Domoit Kanluran'),
(12411, 474, 'Katigan Kanluran'),
(12412, 474, 'Palale Kanluran'),
(12413, 474, 'Lakawan'),
(12414, 474, 'Lalo'),
(12415, 474, 'Lawigue'),
(12416, 474, 'Lita (Pob.)'),
(12417, 474, 'Malaoa'),
(12418, 474, 'Masin'),
(12419, 474, 'Mate'),
(12420, 474, 'Mateuna'),
(12421, 474, 'Mayowe'),
(12422, 474, 'Opias'),
(12423, 474, 'Pandakaki'),
(12424, 474, 'Pook'),
(12425, 474, 'Potol'),
(12426, 474, 'San Diego Zone I (Pob.)'),
(12427, 474, 'San Diego Zone II'),
(12428, 474, 'San Diego Zone III'),
(12429, 474, 'San Diego Zone IV'),
(12430, 474, 'San Isidro Zone I (Pob.)'),
(12431, 474, 'San Isidro Zone II'),
(12432, 474, 'San Isidro Zone III'),
(12433, 474, 'San Isidro Zone IV'),
(12434, 474, 'San Roque Zone I (Pob.)'),
(12435, 474, 'San Roque Zone II'),
(12436, 474, 'Domoit Silangan'),
(12437, 474, 'Katigan Silangan'),
(12438, 474, 'Palale Silangan'),
(12439, 474, 'Talolong'),
(12440, 474, 'Tamlong'),
(12441, 474, 'Tongko'),
(12442, 474, 'Valencia'),
(12443, 474, 'Wakas'),
(12444, 475, 'Anastacia'),
(12445, 475, 'Ayusan I'),
(12446, 475, 'Barangay I (Pob.)'),
(12447, 475, 'Barangay II (Pob.)'),
(12448, 475, 'Barangay III (Pob.)'),
(12449, 475, 'Barangay IV (Pob.)'),
(12450, 475, 'Behia'),
(12451, 475, 'Bukal'),
(12452, 475, 'Bula'),
(12453, 475, 'Bulakin'),
(12454, 475, 'Cabatang'),
(12455, 475, 'Cabay'),
(12456, 475, 'Del Rosario'),
(12457, 475, 'Lagalag'),
(12458, 475, 'Lalig'),
(12459, 475, 'Lumingon'),
(12460, 475, 'Lusacan'),
(12461, 475, 'Paiisa'),
(12462, 475, 'Palagaran'),
(12463, 475, 'Quipot'),
(12464, 475, 'San Agustin'),
(12465, 475, 'San Isidro'),
(12466, 475, 'San Jose'),
(12467, 475, 'San Juan'),
(12468, 475, 'San Pedro'),
(12469, 475, 'Tagbakin'),
(12470, 475, 'Talisay'),
(12471, 475, 'Tamisian'),
(12472, 475, 'San Francisco'),
(12473, 475, 'Aquino'),
(12474, 475, 'Ayusan II'),
(12475, 476, 'Almacen'),
(12476, 476, 'Balagtas'),
(12477, 476, 'Balanacan'),
(12478, 476, 'Bulo Ibaba'),
(12479, 476, 'Bulo Ilaya'),
(12480, 476, 'Bonifacio'),
(12481, 476, 'Burgos'),
(12482, 476, 'Caigdal'),
(12483, 476, 'General Luna'),
(12484, 476, 'Kalilayan Ibaba'),
(12485, 476, 'Cabulihan Ibaba'),
(12486, 476, 'Mairok Ibaba'),
(12487, 476, 'Kalilayan Ilaya'),
(12488, 476, 'Cabulihan Ilaya'),
(12489, 476, 'Mabini'),
(12490, 476, 'Mairok Ilaya'),
(12491, 476, 'Malvar'),
(12492, 476, 'Maputat'),
(12493, 476, 'Muliguin'),
(12494, 476, 'Pagaguasan'),
(12495, 476, 'Panaon Ibaba'),
(12496, 476, 'Panaon Ilaya'),
(12497, 476, 'Plaridel'),
(12498, 476, 'F. De Jesus (Pob.)'),
(12499, 476, 'R. Lapu-lapu (Pob.)'),
(12500, 476, 'Raja Soliman (Pob.)'),
(12501, 476, 'R. Magsaysay (Pob.)'),
(12502, 476, 'Poctol'),
(12503, 476, 'Punta'),
(12504, 476, 'Rizal Ibaba'),
(12505, 476, 'Rizal Ilaya'),
(12506, 476, 'San Roque'),
(12507, 476, 'Socorro'),
(12508, 476, 'Tagumpay'),
(12509, 476, 'Tubas'),
(12510, 476, 'Tubigan'),
(12511, 477, 'Bagumbayan'),
(12512, 477, 'Kalayaan'),
(12513, 477, 'Poblacion Ibaba'),
(12514, 477, 'Poblacion Itaas'),
(12515, 477, 'San Isidro'),
(12516, 477, 'San Pedro'),
(12517, 477, 'San Roque'),
(12518, 477, 'San Vicente'),
(12519, 477, 'Santo Niño'),
(12520, 477, 'Mahabang Parang'),
(12521, 478, 'Calawis'),
(12522, 478, 'Cupang'),
(12523, 478, 'Dela Paz (Pob.)'),
(12524, 478, 'Mayamot'),
(12525, 478, 'San Isidro (Pob.)'),
(12526, 478, 'San Jose (Pob.)'),
(12527, 478, 'San Roque (Pob.)'),
(12528, 478, 'Mambugan'),
(12529, 478, 'Bagong Nayon'),
(12530, 478, 'Beverly Hills'),
(12531, 478, 'Dalig'),
(12532, 478, 'Inarawan'),
(12533, 478, 'San Juan'),
(12534, 478, 'San Luis'),
(12535, 478, 'Santa Cruz'),
(12536, 478, 'Muntingdilaw'),
(12537, 479, 'Evangelista'),
(12538, 479, 'Rizal (Pob.)'),
(12539, 479, 'San Jose'),
(12540, 479, 'San Salvador'),
(12541, 479, 'Santiago'),
(12542, 479, 'Concepcion'),
(12543, 479, 'San Juan'),
(12544, 479, 'San Miguel'),
(12545, 479, 'Mabini'),
(12546, 479, 'Pinugay'),
(12547, 480, 'Bangad'),
(12548, 480, 'Batingan'),
(12549, 480, 'Bilibiran'),
(12550, 480, 'Binitagan'),
(12551, 480, 'Bombong'),
(12552, 480, 'Buhangin'),
(12553, 480, 'Calumpang'),
(12554, 480, 'Ginoong Sanay'),
(12555, 480, 'Gulod'),
(12556, 480, 'Habagatan'),
(12557, 480, 'Ithan'),
(12558, 480, 'Janosa'),
(12559, 480, 'Kalawaan'),
(12560, 480, 'Kalinawan'),
(12561, 480, 'Kasile'),
(12562, 480, 'Kaytome'),
(12563, 480, 'Kinaboogan'),
(12564, 480, 'Kinagatan'),
(12565, 480, 'Libis (Pob.)'),
(12566, 480, 'Limbon-limbon'),
(12567, 480, 'Lunsad'),
(12568, 480, 'Mahabang Parang'),
(12569, 480, 'Macamot'),
(12570, 480, 'Mambog'),
(12571, 480, 'Palangoy'),
(12572, 480, 'Pantok'),
(12573, 480, 'Pila Pila'),
(12574, 480, 'Pinagdilawan'),
(12575, 480, 'Pipindan'),
(12576, 480, 'Rayap'),
(12577, 480, 'Sapang'),
(12578, 480, 'Tabon'),
(12579, 480, 'Tagpos'),
(12580, 480, 'Tatala'),
(12581, 480, 'Tayuman'),
(12582, 480, 'Layunan (Pob.)'),
(12583, 480, 'Libid (Pob.)'),
(12584, 480, 'Malakaban'),
(12585, 480, 'Pag-Asa'),
(12586, 480, 'San Carlos'),
(12587, 481, 'San Andres (Pob.)'),
(12588, 481, 'San Isidro'),
(12589, 481, 'San Juan'),
(12590, 481, 'San Roque'),
(12591, 481, 'Santa Rosa'),
(12592, 481, 'Santo Niño'),
(12593, 481, 'Santo Domingo'),
(12594, 482, 'Balibago'),
(12595, 482, 'Boor'),
(12596, 482, 'Calahan'),
(12597, 482, 'Dalig'),
(12598, 482, 'Del Remedio (Pob.)'),
(12599, 482, 'Iglesia (Pob.)'),
(12600, 482, 'Lambac'),
(12601, 482, 'Looc'),
(12602, 482, 'Malanggam-Calubacan'),
(12603, 482, 'Nagsulo'),
(12604, 482, 'Navotas'),
(12605, 482, 'Patunhay'),
(12606, 482, 'Real (Pob.)'),
(12607, 482, 'Sampad'),
(12608, 482, 'San Roque (Pob.)'),
(12609, 482, 'Subay'),
(12610, 482, 'Ticulio'),
(12611, 482, 'Tuna'),
(12612, 483, 'Bagumbong'),
(12613, 483, 'Bayugo'),
(12614, 483, 'Second District (Pob.)'),
(12615, 483, 'Third District (Pob.)'),
(12616, 483, 'Lubo'),
(12617, 483, 'Pagkalinawan'),
(12618, 483, 'Palaypalay'),
(12619, 483, 'Punta'),
(12620, 483, 'Sipsipin'),
(12621, 483, 'Special District (Pob.)'),
(12622, 483, 'Paalaman'),
(12623, 484, 'Balite (Pob.)'),
(12624, 484, 'Burgos'),
(12625, 484, 'Geronimo'),
(12626, 484, 'Macabud'),
(12627, 484, 'Manggahan'),
(12628, 484, 'Mascap'),
(12629, 484, 'Puray'),
(12630, 484, 'Rosario'),
(12631, 484, 'San Isidro'),
(12632, 484, 'San Jose'),
(12633, 484, 'San Rafael'),
(12634, 485, 'Bombongan'),
(12635, 485, 'Can-Cal-Lan'),
(12636, 485, 'Lagundi'),
(12637, 485, 'Maybancal'),
(12638, 485, 'San Guillermo'),
(12639, 485, 'San Jose (Pob.)'),
(12640, 485, 'San Juan (Pob.)'),
(12641, 485, 'San Pedro (Pob.)'),
(12642, 486, 'Bagumbayan (Pob.)'),
(12643, 486, 'Halayhayin'),
(12644, 486, 'Hulo (Pob.)'),
(12645, 486, 'Imatong (Pob.)'),
(12646, 486, 'Malaya'),
(12647, 486, 'Niogan'),
(12648, 486, 'Quisao'),
(12649, 486, 'Wawa (Pob.)'),
(12650, 486, 'Takungan (Pob.)'),
(12651, 487, 'Ampid I'),
(12652, 487, 'Dulong Bayan 1'),
(12653, 487, 'Dulong Bayan 2'),
(12654, 487, 'Guinayang'),
(12655, 487, 'Guitnang Bayan I (Pob.)'),
(12656, 487, 'Guitnang Bayan II (Pob.)'),
(12657, 487, 'Malanday'),
(12658, 487, 'Maly'),
(12659, 487, 'Santa Ana'),
(12660, 487, 'Ampid II'),
(12661, 487, 'Banaba'),
(12662, 487, 'Gulod Malaya'),
(12663, 487, 'Pintong Bocawe'),
(12664, 487, 'Santo Niño'),
(12665, 487, 'Silangan'),
(12666, 488, 'Cayabu'),
(12667, 488, 'Cuyambay'),
(12668, 488, 'Daraitan'),
(12669, 488, 'Katipunan-Bayan (Pob.)'),
(12670, 488, 'Kaybuto (Pob.)'),
(12671, 488, 'Laiban'),
(12672, 488, 'Mag-Ampon (Pob.)'),
(12673, 488, 'Mamuyao'),
(12674, 488, 'Pinagkamaligan (Pob.)'),
(12675, 488, 'Plaza Aldea (Pob.)'),
(12676, 488, 'Sampaloc'),
(12677, 488, 'San Andres'),
(12678, 488, 'San Isidro (Pob.)'),
(12679, 488, 'Santa Inez'),
(12680, 488, 'Santo Niño'),
(12681, 488, 'Tabing Ilog (Pob.)'),
(12682, 488, 'Tandang Kutyo (Pob.)'),
(12683, 488, 'Tinucan'),
(12684, 488, 'Wawa (Pob.)'),
(12685, 488, 'Madilay-dilay'),
(12686, 489, 'Dolores (Pob.)'),
(12687, 489, 'Muzon'),
(12688, 489, 'San Isidro'),
(12689, 489, 'San Juan'),
(12690, 489, 'Santa Ana'),
(12691, 490, 'Bagumbayan'),
(12692, 490, 'Dalig'),
(12693, 490, 'Dulumbayan'),
(12694, 490, 'May-Iba'),
(12695, 490, 'Poblacion'),
(12696, 490, 'Prinza'),
(12697, 490, 'San Gabriel'),
(12698, 490, 'San Roque'),
(12699, 490, 'Calumpang Santo Cristo'),
(12700, 491, 'Agot'),
(12701, 491, 'Agumaymayan'),
(12702, 491, 'Amoingon'),
(12703, 491, 'Apitong'),
(12704, 491, 'Balagasan'),
(12705, 491, 'Balaring'),
(12706, 491, 'Balimbing'),
(12707, 491, 'Balogo'),
(12708, 491, 'Bangbangalon'),
(12709, 491, 'Bamban'),
(12710, 491, 'Bantad'),
(12711, 491, 'Bantay'),
(12712, 491, 'Bayuti'),
(12713, 491, 'Binunga'),
(12714, 491, 'Boi'),
(12715, 491, 'Boton'),
(12716, 491, 'Buliasnin'),
(12717, 491, 'Bunganay'),
(12718, 491, 'Maligaya'),
(12719, 491, 'Caganhao'),
(12720, 491, 'Canat'),
(12721, 491, 'Catubugan'),
(12722, 491, 'Cawit'),
(12723, 491, 'Daig'),
(12724, 491, 'Daypay'),
(12725, 491, 'Duyay'),
(12726, 491, 'Ihatub'),
(12727, 491, 'Isok II Pob.'),
(12728, 491, 'Hinapulan'),
(12729, 491, 'Laylay'),
(12730, 491, 'Lupac'),
(12731, 491, 'Mahinhin'),
(12732, 491, 'Mainit'),
(12733, 491, 'Malbog'),
(12734, 491, 'Malusak (Pob.)'),
(12735, 491, 'Mansiwat'),
(12736, 491, 'Mataas Na Bayan (Pob.)'),
(12737, 491, 'Maybo'),
(12738, 491, 'Mercado (Pob.)'),
(12739, 491, 'Murallon (Pob.)'),
(12740, 491, 'Ogbac'),
(12741, 491, 'Pawa'),
(12742, 491, 'Pili'),
(12743, 491, 'Poctoy'),
(12744, 491, 'Poras'),
(12745, 491, 'Puting Buhangin'),
(12746, 491, 'Puyog'),
(12747, 491, 'Sabong'),
(12748, 491, 'San Miguel (Pob.)'),
(12749, 491, 'Santol'),
(12750, 491, 'Sawi'),
(12751, 491, 'Tabi'),
(12752, 491, 'Tabigue'),
(12753, 491, 'Tagwak'),
(12754, 491, 'Tambunan'),
(12755, 491, 'Tampus (Pob.)'),
(12756, 491, 'Tanza'),
(12757, 491, 'Tugos'),
(12758, 491, 'Tumagabok'),
(12759, 491, 'Tumapon'),
(12760, 491, 'Isok I (Pob.)'),
(12761, 492, 'Bagacay'),
(12762, 492, 'Bagtingon'),
(12763, 492, 'Bicas-bicas'),
(12764, 492, 'Caigangan'),
(12765, 492, 'Daykitin'),
(12766, 492, 'Libas'),
(12767, 492, 'Malbog'),
(12768, 492, 'Sihi'),
(12769, 492, 'Timbo'),
(12770, 492, 'Tungib-Lipata'),
(12771, 492, 'Yook'),
(12772, 492, 'Barangay I (Pob.)'),
(12773, 492, 'Barangay II (Pob.)'),
(12774, 492, 'Barangay III (Pob.)'),
(12775, 492, 'Barangay IV (Pob.)'),
(12776, 493, 'Antipolo'),
(12777, 493, 'Bachao Ibaba'),
(12778, 493, 'Bachao Ilaya'),
(12779, 493, 'Bacongbacong'),
(12780, 493, 'Bahi'),
(12781, 493, 'Bangbang'),
(12782, 493, 'Banot'),
(12783, 493, 'Banuyo'),
(12784, 493, 'Bognuyan'),
(12785, 493, 'Cabugao'),
(12786, 493, 'Dawis'),
(12787, 493, 'Dili'),
(12788, 493, 'Libtangin'),
(12789, 493, 'Mahunig'),
(12790, 493, 'Mangiliol'),
(12791, 493, 'Masiga'),
(12792, 493, 'Matandang Gasan'),
(12793, 493, 'Pangi'),
(12794, 493, 'Pingan'),
(12795, 493, 'Tabionan'),
(12796, 493, 'Tapuyan'),
(12797, 493, 'Tiguion'),
(12798, 493, 'Barangay I (Pob.)'),
(12799, 493, 'Barangay II (Pob.)'),
(12800, 493, 'Barangay III (Pob.)'),
(12801, 494, 'Anapog-Sibucao'),
(12802, 494, 'Argao'),
(12803, 494, 'Balanacan'),
(12804, 494, 'Banto'),
(12805, 494, 'Bintakay'),
(12806, 494, 'Bocboc'),
(12807, 494, 'Butansapa'),
(12808, 494, 'Candahon'),
(12809, 494, 'Capayang'),
(12810, 494, 'Danao'),
(12811, 494, 'Dulong Bayan (Pob.)'),
(12812, 494, 'Gitnang Bayan (Pob.)'),
(12813, 494, 'Guisian'),
(12814, 494, 'Hinadharan'),
(12815, 494, 'Hinanggayon'),
(12816, 494, 'Ino'),
(12817, 494, 'Janagdong'),
(12818, 494, 'Lamesa'),
(12819, 494, 'Laon'),
(12820, 494, 'Magapua'),
(12821, 494, 'Malayak'),
(12822, 494, 'Malusak'),
(12823, 494, 'Mampaitan'),
(12824, 494, 'Mangyan-Mababad'),
(12825, 494, 'Market Site (Pob.)'),
(12826, 494, 'Mataas Na Bayan'),
(12827, 494, 'Mendez'),
(12828, 494, 'Nangka I'),
(12829, 494, 'Nangka II'),
(12830, 494, 'Paye'),
(12831, 494, 'Pili'),
(12832, 494, 'Puting Buhangin'),
(12833, 494, 'Sayao'),
(12834, 494, 'Silangan'),
(12835, 494, 'Sumangga'),
(12836, 494, 'Tarug'),
(12837, 494, 'Villa Mendez (Pob.)'),
(12838, 495, 'Alobo'),
(12839, 495, 'Angas'),
(12840, 495, 'Aturan'),
(12841, 495, 'Bagong Silang Pob.'),
(12842, 495, 'Baguidbirin'),
(12843, 495, 'Baliis'),
(12844, 495, 'Balogo'),
(12845, 495, 'Banahaw Pob.'),
(12846, 495, 'Bangcuangan'),
(12847, 495, 'Banogbog'),
(12848, 495, 'Biga'),
(12849, 495, 'Botilao'),
(12850, 495, 'Buyabod'),
(12851, 495, 'Dating Bayan'),
(12852, 495, 'Devilla'),
(12853, 495, 'Dolores'),
(12854, 495, 'Haguimit'),
(12855, 495, 'Hupi'),
(12856, 495, 'Ipil'),
(12857, 495, 'Jolo'),
(12858, 495, 'Kaganhao'),
(12859, 495, 'Kalangkang'),
(12860, 495, 'Kamandugan'),
(12861, 495, 'Kasily'),
(12862, 495, 'Kilo-kilo'),
(12863, 495, 'Kiñaman'),
(12864, 495, 'Labo'),
(12865, 495, 'Lamesa'),
(12866, 495, 'Landy'),
(12867, 495, 'Lapu-lapu Pob.'),
(12868, 495, 'Libjo'),
(12869, 495, 'Lipa'),
(12870, 495, 'Lusok'),
(12871, 495, 'Maharlika Pob.'),
(12872, 495, 'Makulapnit'),
(12873, 495, 'Maniwaya'),
(12874, 495, 'Manlibunan'),
(12875, 495, 'Masaguisi'),
(12876, 495, 'Masalukot'),
(12877, 495, 'Matalaba'),
(12878, 495, 'Mongpong'),
(12879, 495, 'Morales'),
(12880, 495, 'Napo'),
(12881, 495, 'Pag-Asa Pob.'),
(12882, 495, 'Pantayin'),
(12883, 495, 'Polo'),
(12884, 495, 'Pulong-Parang'),
(12885, 495, 'Punong'),
(12886, 495, 'San Antonio'),
(12887, 495, 'San Isidro'),
(12888, 495, 'Tagum'),
(12889, 495, 'Tamayo'),
(12890, 495, 'Tambangan'),
(12891, 495, 'Tawiran'),
(12892, 495, 'Taytay'),
(12893, 496, 'Bangwayin'),
(12894, 496, 'Bayakbakin'),
(12895, 496, 'Bolo'),
(12896, 496, 'Bonliw'),
(12897, 496, 'Buangan'),
(12898, 496, 'Cabuyo'),
(12899, 496, 'Cagpo'),
(12900, 496, 'Dampulan'),
(12901, 496, 'Kay Duke'),
(12902, 496, 'Mabuhay'),
(12903, 496, 'Makawayan'),
(12904, 496, 'Malibago'),
(12905, 496, 'Malinao'),
(12906, 496, 'Maranlig'),
(12907, 496, 'Marlangga'),
(12908, 496, 'Matuyatuya'),
(12909, 496, 'Nangka'),
(12910, 496, 'Pakaskasan'),
(12911, 496, 'Payanas'),
(12912, 496, 'Poblacion'),
(12913, 496, 'Poctoy'),
(12914, 496, 'Sibuyao'),
(12915, 496, 'Suha'),
(12916, 496, 'Talawan'),
(12917, 496, 'Tigwi'),
(12918, 497, 'Balao'),
(12919, 497, 'Cabacao'),
(12920, 497, 'Lumangbayan'),
(12921, 497, 'Poblacion'),
(12922, 497, 'San Vicente'),
(12923, 497, 'Tibag'),
(12924, 497, 'Udalo'),
(12925, 497, 'Wawa'),
(12926, 497, 'Armado'),
(12927, 497, 'Santa Maria'),
(12928, 498, 'Concepcion'),
(12929, 498, 'Iriron'),
(12930, 498, 'Malpalon'),
(12931, 498, 'New Dagupan'),
(12932, 498, 'Poblacion'),
(12933, 498, 'Poypoy'),
(12934, 498, 'Tanyag'),
(12935, 499, 'Agkawayan'),
(12936, 499, 'Ambil'),
(12937, 499, 'Balikyas'),
(12938, 499, 'Bonbon (Pob.)'),
(12939, 499, 'Bulacan'),
(12940, 499, 'Burol'),
(12941, 499, 'Guitna (Pob.)'),
(12942, 499, 'Kanluran (Pob.)'),
(12943, 499, 'Talaotao'),
(12944, 500, 'Binakas'),
(12945, 500, 'Cabra'),
(12946, 500, 'Maligaya'),
(12947, 500, 'Maliig'),
(12948, 500, 'Tagbac'),
(12949, 500, 'Tangal'),
(12950, 500, 'Tilik'),
(12951, 500, 'Vigo'),
(12952, 500, 'Surville (Pob.)'),
(12953, 500, 'Araw At Bituin (Pob.)'),
(12954, 500, 'Bagong Sikat (Pob.)'),
(12955, 500, 'Banaag At Pag-Asa (Pob.)'),
(12956, 500, 'Likas Ng Silangan (Pob.)'),
(12957, 500, 'Maginhawa (Pob.)'),
(12958, 500, 'Ninikat Ng Pag-Asa (Pob.)'),
(12959, 500, 'Paraiso (Pob.)'),
(12960, 501, 'Alibog'),
(12961, 501, 'Caguray'),
(12962, 501, 'Calawag'),
(12963, 501, 'Gapasan'),
(12964, 501, 'Laste'),
(12965, 501, 'Lourdes'),
(12966, 501, 'Nicolas'),
(12967, 501, 'Paclolo'),
(12968, 501, 'Poblacion'),
(12969, 501, 'Purnaga'),
(12970, 501, 'Santa Teresa'),
(12971, 501, 'Sibalat'),
(12972, 502, 'Balansay'),
(12973, 502, 'Fatima'),
(12974, 502, 'Payompon'),
(12975, 502, 'San Luis'),
(12976, 502, 'Talabaan'),
(12977, 502, 'Tangkalan'),
(12978, 502, 'Tayamaan'),
(12979, 502, 'Poblacion 1'),
(12980, 502, 'Poblacion 2'),
(12981, 502, 'Poblacion 3'),
(12982, 502, 'Poblacion 4'),
(12983, 502, 'Poblacion 5'),
(12984, 502, 'Poblacion 6'),
(12985, 502, 'Poblacion 7'),
(12986, 502, 'Poblacion 8'),
(12987, 503, 'Alipaoy'),
(12988, 503, 'Harrison'),
(12989, 503, 'Lumangbayan'),
(12990, 503, 'Mananao'),
(12991, 503, 'Marikit'),
(12992, 503, 'Mapalad Pob.'),
(12993, 503, 'Handang Tumulong Pob.'),
(12994, 503, 'Silahis Ng Pag-Asa Pob.'),
(12995, 503, 'Pag-Asa Ng Bayan Pob.'),
(12996, 503, 'Bagong Silang Pob.'),
(12997, 503, 'San Jose Pob.'),
(12998, 503, 'Tubili'),
(12999, 504, 'Adela'),
(13000, 504, 'Aguas'),
(13001, 504, 'Magsikap'),
(13002, 504, 'Malawaan'),
(13003, 504, 'Pitogo'),
(13004, 504, 'Rizal'),
(13005, 504, 'Rumbang'),
(13006, 504, 'Salvacion'),
(13007, 504, 'San Pedro'),
(13008, 504, 'Santo Niño'),
(13009, 504, 'Manoot'),
(13010, 505, 'Batong Buhay'),
(13011, 505, 'Buenavista'),
(13012, 505, 'Burgos'),
(13013, 505, 'Claudio Salgado'),
(13014, 505, 'General Emilio Aguinaldo'),
(13015, 505, 'Ibud'),
(13016, 505, 'Ilvita'),
(13017, 505, 'Ligaya'),
(13018, 505, 'Poblacion'),
(13019, 505, 'Paetan'),
(13020, 505, 'Pag-Asa'),
(13021, 505, 'San Agustin'),
(13022, 505, 'San Francisco'),
(13023, 505, 'San Nicolas'),
(13024, 505, 'San Vicente'),
(13025, 505, 'Santa Lucia'),
(13026, 505, 'Santo Niño'),
(13027, 505, 'Tagumpay'),
(13028, 505, 'Victoria'),
(13029, 505, 'Lagnas'),
(13030, 505, 'Malisbong'),
(13031, 505, 'Tuban'),
(13032, 506, 'Ambulong'),
(13033, 506, 'Ansiray'),
(13034, 506, 'Bagong Sikat'),
(13035, 506, 'Bangkal'),
(13036, 506, 'Barangay 1 (Pob.)'),
(13037, 506, 'Barangay 2 (Pob.)'),
(13038, 506, 'Barangay 3 (Pob.)'),
(13039, 506, 'Barangay 4 (Pob.)'),
(13040, 506, 'Barangay 5 (Pob.)'),
(13041, 506, 'Barangay 6 (Pob.)'),
(13042, 506, 'Barangay 7 (Pob.)'),
(13043, 506, 'Barangay 8 (Pob.)'),
(13044, 506, 'Batasan'),
(13045, 506, 'Bayotbot'),
(13046, 506, 'Bubog'),
(13047, 506, 'Buri'),
(13048, 506, 'Camburay'),
(13049, 506, 'Caminawit'),
(13050, 506, 'Catayungan'),
(13051, 506, 'Central'),
(13052, 506, 'Iling Proper'),
(13053, 506, 'Inasakan'),
(13054, 506, 'Ipil'),
(13055, 506, 'La Curva'),
(13056, 506, 'Labangan Iling'),
(13057, 506, 'Labangan Poblacion'),
(13058, 506, 'Mabini'),
(13059, 506, 'Magbay'),
(13060, 506, 'Mangarin'),
(13061, 506, 'Mapaya'),
(13062, 506, 'Murtha'),
(13063, 506, 'Monte Claro'),
(13064, 506, 'Natandol'),
(13065, 506, 'Pag-Asa'),
(13066, 506, 'Pawican'),
(13067, 506, 'San Agustin'),
(13068, 506, 'San Isidro'),
(13069, 506, 'San Roque'),
(13070, 506, 'Naibuan'),
(13071, 507, 'Alacaak'),
(13072, 507, 'Barahan'),
(13073, 507, 'Casague'),
(13074, 507, 'Dayap'),
(13075, 507, 'Lumangbayan'),
(13076, 507, 'Mulawin'),
(13077, 507, 'Pinagturilan'),
(13078, 507, 'Poblacion I'),
(13079, 507, 'San Vicente'),
(13080, 507, 'Poblacion II'),
(13081, 507, 'Kurtinganan'),
(13082, 508, 'Alag'),
(13083, 508, 'Bangkatan'),
(13084, 508, 'Burbuli'),
(13085, 508, 'Catwiran I'),
(13086, 508, 'Catwiran II'),
(13087, 508, 'Dulangan I'),
(13088, 508, 'Dulangan II'),
(13089, 508, 'Lumang Bayan'),
(13090, 508, 'Malapad'),
(13091, 508, 'Mangangan I'),
(13092, 508, 'Mangangan II'),
(13093, 508, 'Mayabig'),
(13094, 508, 'Pambisan'),
(13095, 508, 'Pulang-Tubig'),
(13096, 508, 'Putican-Cabulo'),
(13097, 508, 'San Andres'),
(13098, 508, 'San Ignacio'),
(13099, 508, 'Santa Cruz'),
(13100, 508, 'Santa Rosa I'),
(13101, 508, 'Santa Rosa II'),
(13102, 508, 'Tabon-tabon'),
(13103, 508, 'Tagumpay'),
(13104, 508, 'Water'),
(13105, 508, 'Baras'),
(13106, 508, 'Bayanan'),
(13107, 508, 'Lantuyang'),
(13108, 508, 'Poblacion'),
(13109, 509, 'Alcadesma'),
(13110, 509, 'Bato'),
(13111, 509, 'Conrazon'),
(13112, 509, 'Malo'),
(13113, 509, 'Manihala'),
(13114, 509, 'Pag-Asa'),
(13115, 509, 'Poblacion'),
(13116, 509, 'Proper Bansud'),
(13117, 509, 'Rosacara'),
(13118, 509, 'Salcedo'),
(13119, 509, 'Sumagui'),
(13120, 509, 'Proper Tiguisan'),
(13121, 509, 'Villa Pag-Asa'),
(13122, 510, 'Anilao'),
(13123, 510, 'Batangan'),
(13124, 510, 'Bukal'),
(13125, 510, 'Camantigue'),
(13126, 510, 'Carmundo'),
(13127, 510, 'Cawayan'),
(13128, 510, 'Dayhagan'),
(13129, 510, 'Formon'),
(13130, 510, 'Hagan'),
(13131, 510, 'Hagupit'),
(13132, 510, 'Kaligtasan'),
(13133, 510, 'Labasan'),
(13134, 510, 'Labonan'),
(13135, 510, 'Libertad'),
(13136, 510, 'Lisap'),
(13137, 510, 'Luna'),
(13138, 510, 'Malitbog'),
(13139, 510, 'Mapang'),
(13140, 510, 'Masaguisi'),
(13141, 510, 'Morente'),
(13142, 510, 'Ogbot'),
(13143, 510, 'Orconuma'),
(13144, 510, 'Polusahi'),
(13145, 510, 'Sagana'),
(13146, 510, 'San Isidro'),
(13147, 510, 'San Jose'),
(13148, 510, 'San Juan'),
(13149, 510, 'Santa Cruz'),
(13150, 510, 'Sigange'),
(13151, 510, 'Tawas'),
(13152, 510, 'Poblacion'),
(13153, 510, 'Aplaya'),
(13154, 510, 'Bagumbayan I'),
(13155, 510, 'Bagumbayan II'),
(13156, 510, 'Ipil'),
(13157, 510, 'Mina de Oro'),
(13158, 511, 'Bagong Sikat'),
(13159, 511, 'Balatasan'),
(13160, 511, 'Benli'),
(13161, 511, 'Cabugao'),
(13162, 511, 'Cambunang (Pob.)'),
(13163, 511, 'Campaasan (Pob.)'),
(13164, 511, 'Maasin'),
(13165, 511, 'Maujao'),
(13166, 511, 'Milagrosa'),
(13167, 511, 'Nasukob (Pob.)'),
(13168, 511, 'Poblacion'),
(13169, 511, 'San Francisco'),
(13170, 511, 'San Isidro'),
(13171, 511, 'San Juan'),
(13172, 511, 'San Roque '),
(13173, 512, 'Balingayan'),
(13174, 512, 'Balite'),
(13175, 512, 'Baruyan'),
(13176, 512, 'Batino'),
(13177, 512, 'Bayanan I'),
(13178, 512, 'Bayanan II'),
(13179, 512, 'Biga'),
(13180, 512, 'Bondoc'),
(13181, 512, 'Bucayao'),
(13182, 512, 'Buhuan'),
(13183, 512, 'Bulusan'),
(13184, 512, 'Santa Rita'),
(13185, 512, 'Calero (Pob.)'),
(13186, 512, 'Camansihan'),
(13187, 512, 'Camilmil'),
(13188, 512, 'Canubing I'),
(13189, 512, 'Canubing II'),
(13190, 512, 'Comunal'),
(13191, 512, 'Guinobatan'),
(13192, 512, 'Gulod'),
(13193, 512, 'Gutad'),
(13194, 512, 'Ibaba East (Pob.)'),
(13195, 512, 'Ibaba West (Pob.)'),
(13196, 512, 'Ilaya (Pob.)'),
(13197, 512, 'Lalud'),
(13198, 512, 'Lazareto'),
(13199, 512, 'Libis (Pob.)'),
(13200, 512, 'Lumang Bayan'),
(13201, 512, 'Mahal Na Pangalan'),
(13202, 512, 'Maidlang'),
(13203, 512, 'Malad'),
(13204, 512, 'Malamig'),
(13205, 512, 'Managpi'),
(13206, 512, 'Masipit'),
(13207, 512, 'Nag-Iba I'),
(13208, 512, 'Navotas'),
(13209, 512, 'Pachoca'),
(13210, 512, 'Palhi'),
(13211, 512, 'Panggalaan'),
(13212, 512, 'Parang'),
(13213, 512, 'Patas'),
(13214, 512, 'Personas'),
(13215, 512, 'Putingtubig'),
(13216, 512, 'Salong'),
(13217, 512, 'San Antonio'),
(13218, 512, 'San Vicente Central (Pob.)'),
(13219, 512, 'San Vicente East (Pob.)'),
(13220, 512, 'San Vicente North (Pob.)'),
(13221, 512, 'San Vicente South (Pob.)'),
(13222, 512, 'San Vicente West (Pob.)'),
(13223, 512, 'Santa Cruz'),
(13224, 512, 'Santa Isabel'),
(13225, 512, 'Santo Niño'),
(13226, 512, 'Sapul'),
(13227, 512, 'Silonay'),
(13228, 512, 'Santa Maria Village'),
(13229, 512, 'Suqui'),
(13230, 512, 'Tawagan'),
(13231, 512, 'Tawiran'),
(13232, 512, 'Tibag'),
(13233, 512, 'Wawa'),
(13234, 512, 'Nag-Iba II'),
(13235, 513, 'Agsalin'),
(13236, 513, 'Agos'),
(13237, 513, 'Andres Bonifacio'),
(13238, 513, 'Balete'),
(13239, 513, 'Banus'),
(13240, 513, 'Banutan'),
(13241, 513, 'Buong Lupa'),
(13242, 513, 'Bulaklakan'),
(13243, 513, 'Gaudencio Antonino'),
(13244, 513, 'Guimbonan'),
(13245, 513, 'Kawit'),
(13246, 513, 'Lucio Laurel'),
(13247, 513, 'Macario Adriatico'),
(13248, 513, 'Malamig'),
(13249, 513, 'Malayong'),
(13250, 513, 'Maligaya (Pob.)'),
(13251, 513, 'Malubay'),
(13252, 513, 'Manguyang'),
(13253, 513, 'Maragooc'),
(13254, 513, 'Mirayan'),
(13255, 513, 'Narra'),
(13256, 513, 'Papandungin'),
(13257, 513, 'San Antonio'),
(13258, 513, 'Santa Maria'),
(13259, 513, 'Santa Theresa'),
(13260, 513, 'Tambong'),
(13261, 513, 'Alma Villa'),
(13262, 514, 'B. Del Mundo'),
(13263, 514, 'Balugo'),
(13264, 514, 'Bonbon'),
(13265, 514, 'Budburan'),
(13266, 514, 'Cabalwa'),
(13267, 514, 'Don Pedro'),
(13268, 514, 'Maliwanag'),
(13269, 514, 'Manaul'),
(13270, 514, 'Panaytayan'),
(13271, 514, 'Poblacion'),
(13272, 514, 'Roma'),
(13273, 514, 'Santa Brigida'),
(13274, 514, 'Santa Maria'),
(13275, 514, 'Villa Celestial'),
(13276, 514, 'Wasig'),
(13277, 514, 'Santa Teresita'),
(13278, 514, 'Waygan'),
(13279, 515, 'Adrialuna'),
(13280, 515, 'Antipolo'),
(13281, 515, 'Apitong'),
(13282, 515, 'Arangin'),
(13283, 515, 'Aurora'),
(13284, 515, 'Bacungan'),
(13285, 515, 'Bagong Buhay'),
(13286, 515, 'Bancuro'),
(13287, 515, 'Barcenaga'),
(13288, 515, 'Bayani'),
(13289, 515, 'Buhangin'),
(13290, 515, 'Concepcion'),
(13291, 515, 'Dao'),
(13292, 515, 'Del Pilar'),
(13293, 515, 'Estrella'),
(13294, 515, 'Evangelista'),
(13295, 515, 'Gamao'),
(13296, 515, 'General Esco'),
(13297, 515, 'Herrera'),
(13298, 515, 'Inarawan'),
(13299, 515, 'Kalinisan'),
(13300, 515, 'Laguna'),
(13301, 515, 'Mabini'),
(13302, 515, 'Andres Ilagan'),
(13303, 515, 'Mahabang Parang'),
(13304, 515, 'Malaya'),
(13305, 515, 'Malinao'),
(13306, 515, 'Malvar'),
(13307, 515, 'Masagana'),
(13308, 515, 'Masaguing'),
(13309, 515, 'Melgar A'),
(13310, 515, 'Metolza'),
(13311, 515, 'Montelago'),
(13312, 515, 'Montemayor'),
(13313, 515, 'Motoderazo'),
(13314, 515, 'Mulawin'),
(13315, 515, 'Nag-Iba I'),
(13316, 515, 'Nag-Iba II'),
(13317, 515, 'Pagkakaisa'),
(13318, 515, 'Paniquian'),
(13319, 515, 'Pinagsabangan I'),
(13320, 515, 'Pinagsabangan II'),
(13321, 515, 'Piñahan'),
(13322, 515, 'Poblacion I'),
(13323, 515, 'Poblacion II'),
(13324, 515, 'Poblacion III'),
(13325, 515, 'Sampaguita'),
(13326, 515, 'San Agustin I'),
(13327, 515, 'San Agustin II'),
(13328, 515, 'San Andres'),
(13329, 515, 'San Antonio'),
(13330, 515, 'San Carlos'),
(13331, 515, 'San Isidro'),
(13332, 515, 'San Jose'),
(13333, 515, 'San Luis'),
(13334, 515, 'San Nicolas'),
(13335, 515, 'San Pedro'),
(13336, 515, 'Santa Isabel'),
(13337, 515, 'Santa Maria'),
(13338, 515, 'Santiago'),
(13339, 515, 'Santo Niño'),
(13340, 515, 'Tagumpay'),
(13341, 515, 'Tigkan'),
(13342, 515, 'Melgar B'),
(13343, 515, 'Santa Cruz'),
(13344, 515, 'Balite'),
(13345, 515, 'Banuton'),
(13346, 515, 'Caburo'),
(13347, 515, 'Magtibay'),
(13348, 515, 'Paitan'),
(13349, 516, 'Anoling'),
(13350, 516, 'Bacungan'),
(13351, 516, 'Bangbang'),
(13352, 516, 'Banilad'),
(13353, 516, 'Buli'),
(13354, 516, 'Cacawan'),
(13355, 516, 'Calingag'),
(13356, 516, 'Del Razon'),
(13357, 516, 'Inclanay'),
(13358, 516, 'Lumangbayan'),
(13359, 516, 'Malaya'),
(13360, 516, 'Maliangcog'),
(13361, 516, 'Maningcol'),
(13362, 516, 'Marayos'),
(13363, 516, 'Marfrancisco'),
(13364, 516, 'Nabuslot'),
(13365, 516, 'Pagalagala'),
(13366, 516, 'Palayan'),
(13367, 516, 'Pambisan Malaki'),
(13368, 516, 'Pambisan Munti'),
(13369, 516, 'Panggulayan'),
(13370, 516, 'Papandayan'),
(13371, 516, 'Pili'),
(13372, 516, 'Zone II (Pob.)'),
(13373, 516, 'Zone III (Pob.)'),
(13374, 516, 'Zone IV (Pob.)'),
(13375, 516, 'Quinabigan'),
(13376, 516, 'Ranzo'),
(13377, 516, 'Rosario'),
(13378, 516, 'Sabang'),
(13379, 516, 'Santa Isabel'),
(13380, 516, 'Santa Maria'),
(13381, 516, 'Santa Rita'),
(13382, 516, 'Wawa'),
(13383, 516, 'Zone I (Pob.)'),
(13384, 516, 'Santo Niño'),
(13385, 516, 'Guinhawa'),
(13386, 517, 'Bacawan'),
(13387, 517, 'Bacungan'),
(13388, 517, 'Batuhan'),
(13389, 517, 'Bayanan'),
(13390, 517, 'Biga'),
(13391, 517, 'Buhay Na Tubig'),
(13392, 517, 'Calubasanhon'),
(13393, 517, 'Calima'),
(13394, 517, 'Casiligan'),
(13395, 517, 'Malibago'),
(13396, 517, 'Maluanluan'),
(13397, 517, 'Matulatula'),
(13398, 517, 'Pahilahan'),
(13399, 517, 'Panikihan'),
(13400, 517, 'Zone I (Pob.)'),
(13401, 517, 'Zone II (Pob.)'),
(13402, 517, 'Pula'),
(13403, 517, 'Puting Cacao'),
(13404, 517, 'Tagbakin'),
(13405, 517, 'Tagumpay'),
(13406, 517, 'Tiguihan'),
(13407, 517, 'Campamento'),
(13408, 517, 'Misong'),
(13409, 518, 'Aninuan'),
(13410, 518, 'Balatero'),
(13411, 518, 'Dulangan'),
(13412, 518, 'Palangan'),
(13413, 518, 'Sabang'),
(13414, 518, 'San Antonio'),
(13415, 518, 'San Isidro'),
(13416, 518, 'Santo Niño'),
(13417, 518, 'Sinandigan'),
(13418, 518, 'Tabinay'),
(13419, 518, 'Villaflor'),
(13420, 518, 'Poblacion'),
(13421, 518, 'Baclayan'),
(13422, 519, 'Bagumbayan (Pob.)'),
(13423, 519, 'Cantil'),
(13424, 519, 'Dangay'),
(13425, 519, 'Happy Valley'),
(13426, 519, 'Libertad'),
(13427, 519, 'Libtong'),
(13428, 519, 'Mabuhay'),
(13429, 519, 'Maraska'),
(13430, 519, 'Odiong'),
(13431, 519, 'Paclasan (Pob.)'),
(13432, 519, 'San Aquilino'),
(13433, 519, 'San Isidro'),
(13434, 519, 'San Jose'),
(13435, 519, 'San Mariano'),
(13436, 519, 'San Miguel'),
(13437, 519, 'San Rafael'),
(13438, 519, 'San Vicente'),
(13439, 519, 'Uyao'),
(13440, 519, 'Victoria'),
(13441, 519, 'Little Tanauan'),
(13442, 520, 'Bigaan'),
(13443, 520, 'Calangatan'),
(13444, 520, 'Calsapa'),
(13445, 520, 'Ilag'),
(13446, 520, 'Lumangbayan'),
(13447, 520, 'Tacligan'),
(13448, 520, 'Poblacion'),
(13449, 520, 'Caagutayan'),
(13450, 521, 'Bagsok'),
(13451, 521, 'Batong Dalig'),
(13452, 521, 'Bayuin'),
(13453, 521, 'Calocmoy'),
(13454, 521, 'Catiningan'),
(13455, 521, 'Villareal'),
(13456, 521, 'Fortuna'),
(13457, 521, 'Happy Valley'),
(13458, 521, 'Calubayan'),
(13459, 521, 'Leuteboro I'),
(13460, 521, 'Leuteboro II'),
(13461, 521, 'Mabuhay I'),
(13462, 521, 'Malugay'),
(13463, 521, 'Matungao'),
(13464, 521, 'Monteverde'),
(13465, 521, 'Pasi I'),
(13466, 521, 'Pasi II'),
(13467, 521, 'Zone I (Pob.)'),
(13468, 521, 'Zone II (Pob.)'),
(13469, 521, 'Zone III (Pob.)'),
(13470, 521, 'Zone IV (Pob.)'),
(13471, 521, 'Santo Domingo'),
(13472, 521, 'Subaan'),
(13473, 521, 'Bugtong Na Tuog'),
(13474, 521, 'Mabuhay II'),
(13475, 521, 'Ma. Concepcion'),
(13476, 522, 'Alcate'),
(13477, 522, 'Babangonan'),
(13478, 522, 'Bagong Silang'),
(13479, 522, 'Bagong Buhay'),
(13480, 522, 'Bambanin'),
(13481, 522, 'Bethel'),
(13482, 522, 'Canaan'),
(13483, 522, 'Concepcion'),
(13484, 522, 'Duongan'),
(13485, 522, 'Loyal'),
(13486, 522, 'Mabini'),
(13487, 522, 'Macatoc'),
(13488, 522, 'Malabo'),
(13489, 522, 'Merit'),
(13490, 522, 'Ordovilla'),
(13491, 522, 'Pakyas'),
(13492, 522, 'Poblacion I'),
(13493, 522, 'Poblacion II'),
(13494, 522, 'Poblacion III'),
(13495, 522, 'Poblacion IV'),
(13496, 522, 'Sampaguita'),
(13497, 522, 'San Antonio'),
(13498, 522, 'San Gabriel'),
(13499, 522, 'San Gelacio'),
(13500, 522, 'San Isidro'),
(13501, 522, 'San Juan'),
(13502, 522, 'San Narciso'),
(13503, 522, 'Urdaneta'),
(13504, 522, 'Villa Cerveza'),
(13505, 522, 'Jose Leido Jr.'),
(13506, 522, 'San Cristobal'),
(13507, 522, 'Antonino'),
(13508, 523, 'Apo-Aporawan'),
(13509, 523, 'Apoc-apoc'),
(13510, 523, 'Aporawan'),
(13511, 523, 'Barake'),
(13512, 523, 'Cabigaan'),
(13513, 523, 'Gogognan'),
(13514, 523, 'Iraan'),
(13515, 523, 'Isaub'),
(13516, 523, 'Jose Rizal'),
(13517, 523, 'Mabini'),
(13518, 523, 'Magbabadil'),
(13519, 523, 'Plaridel'),
(13520, 523, 'Ramon Magsaysay'),
(13521, 523, 'Sagpangan'),
(13522, 523, 'San Juan'),
(13523, 523, 'Tagpait'),
(13524, 523, 'Tigman'),
(13525, 523, 'Poblacion'),
(13526, 523, 'Culandanum'),
(13527, 524, 'Algeciras'),
(13528, 524, 'Concepcion'),
(13529, 524, 'Diit'),
(13530, 524, 'Maracanao'),
(13531, 524, 'Matarawis'),
(13532, 524, 'Abagat (Pob.)'),
(13533, 524, 'Bangcal (Pob.)'),
(13534, 524, 'Cambian (Pob.)'),
(13535, 524, 'Villafria'),
(13536, 524, 'Villasol'),
(13537, 525, 'Balogo'),
(13538, 525, 'Dagman'),
(13539, 525, 'Dalayawon'),
(13540, 525, 'Lumacad'),
(13541, 525, 'Madoldolon'),
(13542, 525, 'Mauringuen'),
(13543, 525, 'Osmeña'),
(13544, 525, 'San Jose De Oro'),
(13545, 525, 'Santo Niño'),
(13546, 525, 'Taloto'),
(13547, 525, 'Tinintinan'),
(13548, 525, 'Tudela'),
(13549, 525, 'Poblacion'),
(13550, 526, 'Agutayan'),
(13551, 526, 'Bugsuk'),
(13552, 526, 'Bancalaan'),
(13553, 526, 'Indalawan'),
(13554, 526, 'Catagupan'),
(13555, 526, 'Malaking Ilog'),
(13556, 526, 'Mangsee'),
(13557, 526, 'Melville'),
(13558, 526, 'Pandanan'),
(13559, 526, 'Pasig'),
(13560, 526, 'Rabor'),
(13561, 526, 'Ramos'),
(13562, 526, 'Salang'),
(13563, 526, 'Sebaring'),
(13564, 526, 'Poblacion I'),
(13565, 526, 'Poblacion II'),
(13566, 526, 'Poblacion III'),
(13567, 526, 'Poblacion IV'),
(13568, 526, 'Poblacion V'),
(13569, 526, 'Poblacion VI'),
(13570, 527, 'Bono-bono'),
(13571, 527, 'Bulalacao'),
(13572, 527, 'Buliluyan'),
(13573, 527, 'Culandanum'),
(13574, 527, 'Igang-igang'),
(13575, 527, 'Inogbong'),
(13576, 527, 'Iwahig'),
(13577, 527, 'Malihud'),
(13578, 527, 'Malitub'),
(13579, 527, 'Marangas (Pob.)'),
(13580, 527, 'Ocayan'),
(13581, 527, 'Puring'),
(13582, 527, 'Rio Tuba'),
(13583, 527, 'Sandoval'),
(13584, 527, 'Sapa'),
(13585, 527, 'Sarong'),
(13586, 527, 'Sumbiling'),
(13587, 527, 'Tabud'),
(13588, 527, 'Tagnato'),
(13589, 527, 'Tagolango'),
(13590, 527, 'Taratak'),
(13591, 527, 'Tarusan'),
(13592, 528, 'Amas'),
(13593, 528, 'Aribungos'),
(13594, 528, 'Barong-barong'),
(13595, 528, 'Calasaguen'),
(13596, 528, 'Imulnod'),
(13597, 528, 'Ipilan'),
(13598, 528, 'Maasin'),
(13599, 528, 'Mainit'),
(13600, 528, 'Malis'),
(13601, 528, 'Mambalot'),
(13602, 528, 'Oring-oring'),
(13603, 528, 'Pangobilian'),
(13604, 528, 'Poblacion I'),
(13605, 528, 'Poblacion II'),
(13606, 528, 'Salogon'),
(13607, 528, 'Samareñana'),
(13608, 528, 'Saraza'),
(13609, 528, 'Tubtub'),
(13610, 529, 'Bogtong'),
(13611, 529, 'Buluang'),
(13612, 529, 'Cheey'),
(13613, 529, 'Concepcion'),
(13614, 529, 'Maglalambay'),
(13615, 529, 'New Busuanga (Pob.)'),
(13616, 529, 'Old Busuanga'),
(13617, 529, 'Panlaitan'),
(13618, 529, 'Quezon'),
(13619, 529, 'Sagrada'),
(13620, 529, 'Salvacion'),
(13621, 529, 'San Isidro'),
(13622, 529, 'San Rafael'),
(13623, 529, 'Santo Niño'),
(13624, 530, 'Bantayan (Pob.)'),
(13625, 530, 'Calsada (Pob.)'),
(13626, 530, 'Convento (Pob.)'),
(13627, 530, 'Lipot North (Pob.)'),
(13628, 530, 'Lipot South (Pob.)'),
(13629, 530, 'Magsaysay'),
(13630, 530, 'Mampio'),
(13631, 530, 'Nusa'),
(13632, 530, 'Santa Cruz'),
(13633, 530, 'Tacas (Pob.)'),
(13634, 530, 'Talaga'),
(13635, 530, 'Wahig (Pob.)'),
(13636, 531, 'Banuang Daan'),
(13637, 531, 'Bintuan'),
(13638, 531, 'Borac'),
(13639, 531, 'Buenavista'),
(13640, 531, 'Bulalacao'),
(13641, 531, 'Cabugao'),
(13642, 531, 'Decabobo'),
(13643, 531, 'Decalachao'),
(13644, 531, 'Guadalupe'),
(13645, 531, 'Lajala'),
(13646, 531, 'Malawig'),
(13647, 531, 'Marcilla'),
(13648, 531, 'Barangay I (Pob.)'),
(13649, 531, 'Barangay II (Pob.)'),
(13650, 531, 'Barangay III (Pob.)'),
(13651, 531, 'Barangay IV (Pob.)'),
(13652, 531, 'Barangay V (Pob.)'),
(13653, 531, 'San Jose'),
(13654, 531, 'San Nicolas'),
(13655, 531, 'Tagumpay'),
(13656, 531, 'Tara'),
(13657, 531, 'Turda'),
(13658, 531, 'Barangay VI (Pob.)'),
(13659, 532, 'Balading'),
(13660, 532, 'Bangcal (Pob.)'),
(13661, 532, 'Cabigsing (Pob.)'),
(13662, 532, 'Caburian'),
(13663, 532, 'Caponayan'),
(13664, 532, 'Catadman (Pob.)'),
(13665, 532, 'Funda'),
(13666, 532, 'Lagaoriao (Pob.)'),
(13667, 532, 'Lubid'),
(13668, 532, 'Manamoc'),
(13669, 532, 'Maringian'),
(13670, 532, 'Lungsod (Pob.)'),
(13671, 532, 'Pawa'),
(13672, 532, 'San Carlos'),
(13673, 532, 'Suba'),
(13674, 532, 'Tenga-tenga (Pob.)'),
(13675, 532, 'Tocadan (Pob.)'),
(13676, 533, 'Bacao'),
(13677, 533, 'Bohol'),
(13678, 533, 'Calasag'),
(13679, 533, 'Capayas'),
(13680, 533, 'Catep'),
(13681, 533, 'Culasian'),
(13682, 533, 'Danleg'),
(13683, 533, 'Dumaran (Pob.)'),
(13684, 533, 'Itangil'),
(13685, 533, 'Ilian'),
(13686, 533, 'Magsaysay'),
(13687, 533, 'San Juan'),
(13688, 533, 'Santa Teresita'),
(13689, 533, 'Santo Tomas'),
(13690, 533, 'Tanatanaon'),
(13691, 533, 'Santa Maria'),
(13692, 534, 'Bagong Bayan'),
(13693, 534, 'Buena Suerte Pob.'),
(13694, 534, 'Barotuan'),
(13695, 534, 'Bebeladan'),
(13696, 534, 'Corong-corong Pob.'),
(13697, 534, 'Mabini'),
(13698, 534, 'Manlag'),
(13699, 534, 'Masagana Pob.'),
(13700, 534, 'New Ibajay'),
(13701, 534, 'Pasadeña'),
(13702, 534, 'Maligaya Pob.'),
(13703, 534, 'San Fernando'),
(13704, 534, 'Sibaltan'),
(13705, 534, 'Teneguiban'),
(13706, 534, 'Villa Libertad'),
(13707, 534, 'Villa Paz'),
(13708, 534, 'Bucana'),
(13709, 534, 'Aberawan'),
(13710, 535, 'Barangonan'),
(13711, 535, 'Cabunlawan'),
(13712, 535, 'Calibangbangan'),
(13713, 535, 'Decabaitot'),
(13714, 535, 'Maroyogroyog'),
(13715, 535, 'Nangalao'),
(13716, 535, 'New Culaylayan'),
(13717, 535, 'Pical'),
(13718, 535, 'San Miguel (Pob.)'),
(13719, 535, 'San Nicolas'),
(13720, 536, 'Alcoba'),
(13721, 536, 'Balaguen'),
(13722, 536, 'Canipo'),
(13723, 536, 'Cocoro'),
(13724, 536, 'Danawan (Pob.)'),
(13725, 536, 'Emilod'),
(13726, 536, 'Igabas'),
(13727, 536, 'Lacaren'),
(13728, 536, 'Los Angeles'),
(13729, 536, 'Lucbuan'),
(13730, 536, 'Rizal'),
(13731, 537, 'Antipuluan'),
(13732, 537, 'Aramaywan'),
(13733, 537, 'Batang-batang'),
(13734, 537, 'Bato-bato'),
(13735, 537, 'Burirao'),
(13736, 537, 'Caguisan'),
(13737, 537, 'Calategas'),
(13738, 537, 'Dumagueña'),
(13739, 537, 'Elvita'),
(13740, 537, 'Estrella Village'),
(13741, 537, 'Ipilan'),
(13742, 537, 'Malatgao'),
(13743, 537, 'Malinao'),
(13744, 537, 'Narra (Pob.)'),
(13745, 537, 'Panacan'),
(13746, 537, 'Princess Urduja'),
(13747, 537, 'Sandoval'),
(13748, 537, 'Tacras'),
(13749, 537, 'Taritien'),
(13750, 537, 'Teresa'),
(13751, 537, 'Tinagong Dagat'),
(13752, 537, 'Bagong Sikat'),
(13753, 537, 'Panacan 2'),
(13754, 538, 'Babuyan'),
(13755, 538, 'Bacungan'),
(13756, 538, 'Bagong Bayan'),
(13757, 538, 'Bagong Pag-Asa (Pob.)'),
(13758, 538, 'Bagong Sikat (Pob.)'),
(13759, 538, 'Bagong Silang (Pob.)'),
(13760, 538, 'Bahile'),
(13761, 538, 'Bancao-bancao'),
(13762, 538, 'Binduyan'),
(13763, 538, 'Buenavista'),
(13764, 538, 'Cabayugan'),
(13765, 538, 'Concepcion'),
(13766, 538, 'Inagawan'),
(13767, 538, 'Irawan'),
(13768, 538, 'Iwahig (Pob.)'),
(13769, 538, 'Kalipay (Pob.)'),
(13770, 538, 'Kamuning'),
(13771, 538, 'Langogan'),
(13772, 538, 'Liwanag (Pob.)'),
(13773, 538, 'Lucbuan'),
(13774, 538, 'Mabuhay (Pob.)'),
(13775, 538, 'Macarascas'),
(13776, 538, 'Magkakaibigan (Pob.)'),
(13777, 538, 'Maligaya (Pob.)'),
(13778, 538, 'Manalo'),
(13779, 538, 'Manggahan (Pob.)'),
(13780, 538, 'Maningning (Pob.)'),
(13781, 538, 'Maoyon'),
(13782, 538, 'Marufinas'),
(13783, 538, 'Maruyogon'),
(13784, 538, 'Masigla (Pob.)'),
(13785, 538, 'Masikap (Pob.)'),
(13786, 538, 'Masipag (Pob.)'),
(13787, 538, 'Matahimik (Pob.)'),
(13788, 538, 'Matiyaga (Pob.)'),
(13789, 538, 'Maunlad (Pob.)'),
(13790, 538, 'Milagrosa (Pob.)'),
(13791, 538, 'Model (Pob.)'),
(13792, 538, 'Montible (Pob.)'),
(13793, 538, 'Napsan'),
(13794, 538, 'New Panggangan'),
(13795, 538, 'Pagkakaisa (Pob.)'),
(13796, 538, 'Princesa (Pob.)'),
(13797, 538, 'Salvacion'),
(13798, 538, 'San Jose'),
(13799, 538, 'San Miguel'),
(13800, 538, 'San Pedro'),
(13801, 538, 'San Rafael'),
(13802, 538, 'Santa Cruz'),
(13803, 538, 'Santa Lourdes'),
(13804, 538, 'Santa Lucia (Pob.)'),
(13805, 538, 'Santa Monica'),
(13806, 538, 'Seaside (Pob.)'),
(13807, 538, 'Sicsican'),
(13808, 538, 'Simpocan'),
(13809, 538, 'Tagabinit'),
(13810, 538, 'Tagburos'),
(13811, 538, 'Tagumpay (Pob.)'),
(13812, 538, 'Tanabag'),
(13813, 538, 'Tanglaw (Pob.)'),
(13814, 538, 'Barangay ng mga Mangingisda'),
(13815, 538, 'Inagawan Sub-Colony'),
(13816, 538, 'Luzviminda'),
(13817, 538, 'Mandaragat'),
(13818, 538, 'San Manuel'),
(13819, 538, 'Tiniguiban'),
(13820, 539, 'Alfonso XIII (Pob.)'),
(13821, 539, 'Aramaywan'),
(13822, 539, 'Berong'),
(13823, 539, 'Calumpang'),
(13824, 539, 'Isugod'),
(13825, 539, 'Quinlogan'),
(13826, 539, 'Maasin'),
(13827, 539, 'Panitian'),
(13828, 539, 'Pinaglabanan'),
(13829, 539, 'Sowangan'),
(13830, 539, 'Tabon'),
(13831, 539, 'Calatagbak'),
(13832, 539, 'Malatgao'),
(13833, 539, 'Tagusao'),
(13834, 540, 'Abaroan'),
(13835, 540, 'Antonino'),
(13836, 540, 'Bagong Bayan'),
(13837, 540, 'Caramay'),
(13838, 540, 'Dumarao'),
(13839, 540, 'Iraan'),
(13840, 540, 'Jolo'),
(13841, 540, 'Magara'),
(13842, 540, 'Malcampo'),
(13843, 540, 'Mendoza'),
(13844, 540, 'Narra'),
(13845, 540, 'New Barbacan'),
(13846, 540, 'New Cuyo'),
(13847, 540, 'Barangay 1 (Pob.)'),
(13848, 540, 'Rizal'),
(13849, 540, 'Salvacion'),
(13850, 540, 'San Isidro'),
(13851, 540, 'San Jose'),
(13852, 540, 'San Miguel'),
(13853, 540, 'San Nicolas'),
(13854, 540, 'Sandoval'),
(13855, 540, 'Tagumpay'),
(13856, 540, 'Taradungan'),
(13857, 540, 'Tinitian'),
(13858, 540, 'Tumarbong'),
(13859, 540, 'Barangay II (Pob.)'),
(13860, 540, 'Barangay III (Pob.)'),
(13861, 540, 'Barangay IV (Pob.)'),
(13862, 540, 'Barangay V Pob.'),
(13863, 540, 'Barangay VI Pob.'),
(13864, 540, 'Nicanor Zabala'),
(13865, 541, 'Alimanguan'),
(13866, 541, 'Binga'),
(13867, 541, 'Caruray'),
(13868, 541, 'Kemdeng'),
(13869, 541, 'New Agutaya'),
(13870, 541, 'New Canipo'),
(13871, 541, 'Port Barton'),
(13872, 541, 'Poblacion'),
(13873, 541, 'San Isidro'),
(13874, 541, 'Santo Niño'),
(13875, 542, 'Abongan'),
(13876, 542, 'Banbanan'),
(13877, 542, 'Bantulan'),
(13878, 542, 'Batas'),
(13879, 542, 'Bato'),
(13880, 542, 'Beton'),
(13881, 542, 'Busy Bees'),
(13882, 542, 'Calawag'),
(13883, 542, 'Casian'),
(13884, 542, 'Cataban'),
(13885, 542, 'Debangan'),
(13886, 542, 'Depla'),
(13887, 542, 'Liminangcong'),
(13888, 542, 'Meytegued'),
(13889, 542, 'New Guinlo'),
(13890, 542, 'Old Guinlo'),
(13891, 542, 'Pamantolon'),
(13892, 542, 'Pancol'),
(13893, 542, 'Paly'),
(13894, 542, 'Poblacion'),
(13895, 542, 'Pularaquen'),
(13896, 542, 'San Jose'),
(13897, 542, 'Sandoval'),
(13898, 542, 'Silanga'),
(13899, 542, 'Alacalian'),
(13900, 542, 'Baras'),
(13901, 542, 'Libertad'),
(13902, 542, 'Minapla'),
(13903, 542, 'Talog'),
(13904, 542, 'Tumbod'),
(13905, 542, 'Paglaum'),
(13906, 543, 'Pag-Asa (Pob.)'),
(13907, 544, 'Balala'),
(13908, 544, 'Baldat'),
(13909, 544, 'Binudac'),
(13910, 544, 'Culango'),
(13911, 544, 'Galoc'),
(13912, 544, 'Jardin'),
(13913, 544, 'Libis'),
(13914, 544, 'Luac'),
(13915, 544, 'Malaking Patag'),
(13916, 544, 'Osmeña'),
(13917, 544, 'Tiza'),
(13918, 544, 'Burabod'),
(13919, 544, 'Halsey'),
(13920, 544, 'De Carabao'),
(13921, 545, 'Bunog'),
(13922, 545, 'Campong Ulay'),
(13923, 545, 'Candawaga'),
(13924, 545, 'Canipaan'),
(13925, 545, 'Culasian'),
(13926, 545, 'Iraan'),
(13927, 545, 'Latud'),
(13928, 545, 'Panalingaan'),
(13929, 545, 'Punta Baja'),
(13930, 545, 'Ransang'),
(13931, 545, 'Taburi'),
(13932, 546, 'Abo-abo'),
(13933, 546, 'Iraray'),
(13934, 546, 'Isumbo'),
(13935, 546, 'Labog'),
(13936, 546, 'Panitian'),
(13937, 546, 'Pulot Center'),
(13938, 546, 'Pulot Interior'),
(13939, 546, 'Pulot Shore'),
(13940, 546, 'Punang'),
(13941, 547, 'Bonlao'),
(13942, 547, 'Calagonsao'),
(13943, 547, 'Camili'),
(13944, 547, 'Camod-Om'),
(13945, 547, 'Madalag'),
(13946, 547, 'Poblacion'),
(13947, 547, 'San Isidro'),
(13948, 547, 'Tugdan'),
(13949, 547, 'Bagsik'),
(13950, 547, 'Gui-ob'),
(13951, 547, 'Lawan'),
(13952, 547, 'San Roque'),
(13953, 548, 'Balogo'),
(13954, 548, 'Banice'),
(13955, 548, 'Hambi-an'),
(13956, 548, 'Lagang'),
(13957, 548, 'Libtong'),
(13958, 548, 'Mainit'),
(13959, 548, 'Nabalay'),
(13960, 548, 'Nasunogan'),
(13961, 548, 'Poblacion'),
(13962, 548, 'Sibay'),
(13963, 548, 'Tan-Ag'),
(13964, 548, 'Toctoc'),
(13965, 548, 'Togbongan'),
(13966, 548, 'Togong'),
(13967, 548, 'Tungonan'),
(13968, 548, 'Tumalum'),
(13969, 548, 'Yabawon'),
(13970, 549, 'Alibagon'),
(13971, 549, 'Cambajao'),
(13972, 549, 'Cambalo'),
(13973, 549, 'Cambijang'),
(13974, 549, 'Cantagda'),
(13975, 549, 'Danao'),
(13976, 549, 'Gutivan'),
(13977, 549, 'Lico'),
(13978, 549, 'Lumbang Este'),
(13979, 549, 'Lumbang Weste'),
(13980, 549, 'Marigondon'),
(13981, 549, 'Poblacion'),
(13982, 549, 'Sugod'),
(13983, 549, 'Taguilos'),
(13984, 550, 'Balogo'),
(13985, 550, 'Linao'),
(13986, 550, 'Poblacion'),
(13987, 550, 'Pagsangahan'),
(13988, 550, 'Pangulo'),
(13989, 550, 'San Roque'),
(13990, 550, 'Talisay'),
(13991, 551, 'Bachawan'),
(13992, 551, 'Calabasahan'),
(13993, 551, 'Dalajican'),
(13994, 551, 'Masudsud'),
(13995, 551, 'Poblacion'),
(13996, 551, 'Sampong'),
(13997, 551, 'San Pedro'),
(13998, 551, 'San Vicente'),
(13999, 551, 'Masadya'),
(14000, 552, 'Alegria'),
(14001, 552, 'Ambulong'),
(14002, 552, 'Colongcolong'),
(14003, 552, 'Gobon'),
(14004, 552, 'Guintiguiban');
INSERT INTO `table_barangay` (`barangay_id`, `municipality_id`, `barangay_name`) VALUES
(14005, 552, 'Ilijan'),
(14006, 552, 'Labnig'),
(14007, 552, 'Mabini'),
(14008, 552, 'Mahaba'),
(14009, 552, 'Mangansag'),
(14010, 552, 'Poblacion'),
(14011, 552, 'San Agustin'),
(14012, 552, 'San Roque'),
(14013, 552, 'San Vicente'),
(14014, 552, 'Tacasan'),
(14015, 553, 'Agojo'),
(14016, 553, 'Balatucan'),
(14017, 553, 'Buenavista'),
(14018, 553, 'Camandao'),
(14019, 553, 'Guinhayaan'),
(14020, 553, 'Limon Norte'),
(14021, 553, 'Limon Sur'),
(14022, 553, 'Manhac'),
(14023, 553, 'Pili'),
(14024, 553, 'Poblacion'),
(14025, 553, 'Punta'),
(14026, 553, 'Tuguis'),
(14027, 554, 'Agsao'),
(14028, 554, 'Agutay'),
(14029, 554, 'Ambulong'),
(14030, 554, 'Dulangan'),
(14031, 554, 'Ipil'),
(14032, 554, 'Jao-asan'),
(14033, 554, 'Poblacion'),
(14034, 554, 'Silum'),
(14035, 554, 'Tampayan'),
(14036, 555, 'Amatong'),
(14037, 555, 'Anahao'),
(14038, 555, 'Bangon'),
(14039, 555, 'Batiano'),
(14040, 555, 'Budiong'),
(14041, 555, 'Canduyong'),
(14042, 555, 'Dapawan'),
(14043, 555, 'Gabawan'),
(14044, 555, 'Libertad'),
(14045, 555, 'Malilico'),
(14046, 555, 'Mayha'),
(14047, 555, 'Panique'),
(14048, 555, 'Pato-o'),
(14049, 555, 'Ligaya (Pob.)'),
(14050, 555, 'Liwanag (Pob.)'),
(14051, 555, 'Poctoy'),
(14052, 555, 'Progreso Este'),
(14053, 555, 'Progreso Weste'),
(14054, 555, 'Rizal'),
(14055, 555, 'Tabing Dagat (Pob.)'),
(14056, 555, 'Tabobo-an'),
(14057, 555, 'Tulay'),
(14058, 555, 'Tumingad'),
(14059, 555, 'Liwayway (Pob.)'),
(14060, 555, 'Tuburan'),
(14061, 556, 'Agbaluto'),
(14062, 556, 'Agpanabat'),
(14063, 556, 'Agbudia'),
(14064, 556, 'Agnaga'),
(14065, 556, 'Agnay'),
(14066, 556, 'Agnipa'),
(14067, 556, 'Agtongo'),
(14068, 556, 'Alad'),
(14069, 556, 'Bagacay'),
(14070, 556, 'Cajimos'),
(14071, 556, 'Calabogo'),
(14072, 556, 'Capaclan'),
(14073, 556, 'Ginablan'),
(14074, 556, 'Guimpingan'),
(14075, 556, 'Ilauran'),
(14076, 556, 'Lamao'),
(14077, 556, 'Li-o'),
(14078, 556, 'Logbon'),
(14079, 556, 'Lunas'),
(14080, 556, 'Lonos'),
(14081, 556, 'Macalas'),
(14082, 556, 'Mapula'),
(14083, 556, 'Cobrador'),
(14084, 556, 'Palje'),
(14085, 556, 'Barangay I (Pob.)'),
(14086, 556, 'Barangay II (Pob.)'),
(14087, 556, 'Barangay III (Pob.)'),
(14088, 556, 'Barangay IV (Pob.)'),
(14089, 556, 'Sablayan'),
(14090, 556, 'Sawang'),
(14091, 556, 'Tambac'),
(14092, 557, 'Bachawan'),
(14093, 557, 'Binongahan'),
(14094, 557, 'Buli'),
(14095, 557, 'Cabolutan'),
(14096, 557, 'Cagbuaya'),
(14097, 557, 'Carmen'),
(14098, 557, 'Cawayan'),
(14099, 557, 'Doña Juana'),
(14100, 557, 'Dubduban'),
(14101, 557, 'Binugusan'),
(14102, 557, 'Lusong'),
(14103, 557, 'Mahabang Baybay'),
(14104, 557, 'Poblacion'),
(14105, 557, 'Sugod'),
(14106, 557, 'Camantaya'),
(14107, 558, 'Agpudlos'),
(14108, 558, 'Calunacon'),
(14109, 558, 'Doña Trinidad'),
(14110, 558, 'Linawan'),
(14111, 558, 'Mabini'),
(14112, 558, 'Marigondon Norte'),
(14113, 558, 'Marigondon Sur'),
(14114, 558, 'Matutuna'),
(14115, 558, 'Pag-Alad'),
(14116, 558, 'Poblacion'),
(14117, 558, 'Tan-Agan'),
(14118, 558, 'Victoria'),
(14119, 558, 'Juncarlo'),
(14120, 559, 'Agtiwa'),
(14121, 559, 'Azarga'),
(14122, 559, 'Campalingo'),
(14123, 559, 'Canjalon'),
(14124, 559, 'España'),
(14125, 559, 'Mabini'),
(14126, 559, 'Mabulo'),
(14127, 559, 'Otod'),
(14128, 559, 'Panangcalan'),
(14129, 559, 'Pili'),
(14130, 559, 'Poblacion'),
(14131, 559, 'Taclobo'),
(14132, 560, 'Busay'),
(14133, 560, 'Combot'),
(14134, 560, 'Lanas'),
(14135, 560, 'Pinamihagan'),
(14136, 560, 'Poblacion'),
(14137, 561, 'Agmanic'),
(14138, 561, 'Canyayo'),
(14139, 561, 'Danao Norte'),
(14140, 561, 'Danao Sur'),
(14141, 561, 'Guinbirayan'),
(14142, 561, 'Guintigbasan'),
(14143, 561, 'Magsaysay'),
(14144, 561, 'Mat-i'),
(14145, 561, 'Pandan'),
(14146, 561, 'Poblacion'),
(14147, 561, 'Tabugon'),
(14148, 562, 'Agnonoc'),
(14149, 562, 'Bunsoran'),
(14150, 562, 'Claro M. Recto'),
(14151, 562, 'Poblacion'),
(14152, 562, 'Hinaguman'),
(14153, 562, 'Tubigon'),
(14154, 563, 'Bonga'),
(14155, 563, 'Concepcion Norte (Pob.)'),
(14156, 563, 'Concepcion Sur'),
(14157, 563, 'Paroyhog'),
(14158, 563, 'Santo Niño'),
(14159, 563, 'San Isidro'),
(14160, 564, 'Baclayon'),
(14161, 564, 'Banao'),
(14162, 564, 'Bariw'),
(14163, 564, 'Basud'),
(14164, 564, 'Bayandong'),
(14165, 564, 'Bonga'),
(14166, 564, 'Buang'),
(14167, 564, 'Cabasan'),
(14168, 564, 'Cagbulacao'),
(14169, 564, 'Cagraray'),
(14170, 564, 'Cajogutan'),
(14171, 564, 'Cawayan'),
(14172, 564, 'Damacan'),
(14173, 564, 'Gubat Ilawod'),
(14174, 564, 'Gubat Iraya'),
(14175, 564, 'Hindi'),
(14176, 564, 'Igang'),
(14177, 564, 'Langaton'),
(14178, 564, 'Manaet'),
(14179, 564, 'Mapulang Daga'),
(14180, 564, 'Mataas'),
(14181, 564, 'Misibis'),
(14182, 564, 'Nahapunan'),
(14183, 564, 'Namanday'),
(14184, 564, 'Namantao'),
(14185, 564, 'Napao'),
(14186, 564, 'Panarayon'),
(14187, 564, 'Pigcobohan'),
(14188, 564, 'Pili Ilawod'),
(14189, 564, 'Pili Iraya'),
(14190, 564, 'Barangay 1 (Pob.)'),
(14191, 564, 'Barangay 10 (Pob.)'),
(14192, 564, 'Barangay 11 (Pob.)'),
(14193, 564, 'Barangay 12 (Pob.)'),
(14194, 564, 'Barangay 13 (Pob.)'),
(14195, 564, 'Barangay 14 (Pob.)'),
(14196, 564, 'Barangay 2 (Pob.)'),
(14197, 564, 'Barangay 3 (Pob.)'),
(14198, 564, 'Barangay 4 (Pob.)'),
(14199, 564, 'Barangay 5 (Pob.)'),
(14200, 564, 'Barangay 6 (Pob.)'),
(14201, 564, 'Barangay 7 (Pob.)'),
(14202, 564, 'Barangay 8 (Pob.)'),
(14203, 564, 'Barangay 9 (Pob.)'),
(14204, 564, 'Pongco'),
(14205, 564, 'Busdac'),
(14206, 564, 'San Pablo'),
(14207, 564, 'San Pedro'),
(14208, 564, 'Sogod'),
(14209, 564, 'Sula'),
(14210, 564, 'Tambilagao'),
(14211, 564, 'Tambongon'),
(14212, 564, 'Tanagan'),
(14213, 564, 'Uson'),
(14214, 564, 'Vinisitahan-Basud'),
(14215, 564, 'Vinisitahan-Napao'),
(14216, 565, 'Anoling'),
(14217, 565, 'Baligang'),
(14218, 565, 'Bantonan'),
(14219, 565, 'Bariw'),
(14220, 565, 'Binanderahan'),
(14221, 565, 'Binitayan'),
(14222, 565, 'Bongabong'),
(14223, 565, 'Cabagñan'),
(14224, 565, 'Cabraran Pequeño'),
(14225, 565, 'Calabidongan'),
(14226, 565, 'Comun'),
(14227, 565, 'Cotmon'),
(14228, 565, 'Del Rosario'),
(14229, 565, 'Gapo'),
(14230, 565, 'Gotob'),
(14231, 565, 'Ilawod'),
(14232, 565, 'Iluluan'),
(14233, 565, 'Libod'),
(14234, 565, 'Ligban'),
(14235, 565, 'Mabunga'),
(14236, 565, 'Magogon'),
(14237, 565, 'Manawan'),
(14238, 565, 'Maninila'),
(14239, 565, 'Mina'),
(14240, 565, 'Miti'),
(14241, 565, 'Palanog'),
(14242, 565, 'Panoypoy'),
(14243, 565, 'Pariaan'),
(14244, 565, 'Quinartilan'),
(14245, 565, 'Quirangay'),
(14246, 565, 'Quitinday'),
(14247, 565, 'Salugan'),
(14248, 565, 'Solong'),
(14249, 565, 'Sua'),
(14250, 565, 'Sumlang'),
(14251, 565, 'Tagaytay'),
(14252, 565, 'Tagoytoy'),
(14253, 565, 'Taladong'),
(14254, 565, 'Taloto'),
(14255, 565, 'Taplacon'),
(14256, 565, 'Tinago'),
(14257, 565, 'Tumpa'),
(14258, 565, 'Barangay 1 (Pob.)'),
(14259, 565, 'Barangay 2 (Pob.)'),
(14260, 565, 'Barangay 3 (Pob.)'),
(14261, 565, 'Barangay 4 (Pob.)'),
(14262, 565, 'Barangay 5 (Pob.)'),
(14263, 565, 'Barangay 6 (Pob.)'),
(14264, 565, 'Barangay 7 (Pob.)'),
(14265, 565, 'Caguiba'),
(14266, 566, 'Alcala'),
(14267, 566, 'Alobo'),
(14268, 566, 'Anislag'),
(14269, 566, 'Bagumbayan'),
(14270, 566, 'Balinad'),
(14271, 566, 'Bañadero'),
(14272, 566, 'Bañag'),
(14273, 566, 'Bascaran'),
(14274, 566, 'Bigao'),
(14275, 566, 'Binitayan'),
(14276, 566, 'Bongalon'),
(14277, 566, 'Budiao'),
(14278, 566, 'Burgos'),
(14279, 566, 'Busay'),
(14280, 566, 'Cullat'),
(14281, 566, 'Canarom'),
(14282, 566, 'Dela Paz'),
(14283, 566, 'Dinoronan'),
(14284, 566, 'Gabawan'),
(14285, 566, 'Gapo'),
(14286, 566, 'Ibaugan'),
(14287, 566, 'Ilawod Area Pob.'),
(14288, 566, 'Inarado'),
(14289, 566, 'Kidaco'),
(14290, 566, 'Kilicao'),
(14291, 566, 'Kimantong'),
(14292, 566, 'Kinawitan'),
(14293, 566, 'Kiwalo'),
(14294, 566, 'Lacag'),
(14295, 566, 'Mabini'),
(14296, 566, 'Malabog'),
(14297, 566, 'Malobago'),
(14298, 566, 'Maopi'),
(14299, 566, 'Market Area Pob. '),
(14300, 566, 'Maroroy'),
(14301, 566, 'Matnog'),
(14302, 566, 'Mayon'),
(14303, 566, 'Mi-isi'),
(14304, 566, 'Nabasan'),
(14305, 566, 'Namantao'),
(14306, 566, 'Pandan'),
(14307, 566, 'Peñafrancia'),
(14308, 566, 'Sagpon'),
(14309, 566, 'Salvacion'),
(14310, 566, 'San Rafael'),
(14311, 566, 'San Ramon'),
(14312, 566, 'San Roque'),
(14313, 566, 'San Vicente Grande'),
(14314, 566, 'San Vicente Pequeño'),
(14315, 566, 'Sipi'),
(14316, 566, 'Tabon-tabon'),
(14317, 566, 'Tagas'),
(14318, 566, 'Talahib'),
(14319, 566, 'Villahermosa'),
(14320, 567, 'Agpay'),
(14321, 567, 'Balite'),
(14322, 567, 'Banao'),
(14323, 567, 'Batbat'),
(14324, 567, 'Binogsacan Lower'),
(14325, 567, 'Bololo'),
(14326, 567, 'Bubulusan'),
(14327, 567, 'Marcial O. Rañola'),
(14328, 567, 'Calzada'),
(14329, 567, 'Catomag'),
(14330, 567, 'Doña Mercedes'),
(14331, 567, 'Doña Tomasa'),
(14332, 567, 'Ilawod'),
(14333, 567, 'Inamnan Pequeño'),
(14334, 567, 'Inamnan Grande'),
(14335, 567, 'Inascan'),
(14336, 567, 'Iraya'),
(14337, 567, 'Lomacao'),
(14338, 567, 'Maguiron'),
(14339, 567, 'Maipon'),
(14340, 567, 'Malabnig'),
(14341, 567, 'Malipo'),
(14342, 567, 'Malobago'),
(14343, 567, 'Maninila'),
(14344, 567, 'Mapaco'),
(14345, 567, 'Masarawag'),
(14346, 567, 'Mauraro'),
(14347, 567, 'Minto'),
(14348, 567, 'Morera'),
(14349, 567, 'Muladbucad Pequeño'),
(14350, 567, 'Muladbucad Grande'),
(14351, 567, 'Ongo'),
(14352, 567, 'Palanas'),
(14353, 567, 'Poblacion'),
(14354, 567, 'Pood'),
(14355, 567, 'Quitago'),
(14356, 567, 'Quibongbongan'),
(14357, 567, 'San Francisco'),
(14358, 567, 'San Jose'),
(14359, 567, 'San Rafael'),
(14360, 567, 'Sinungtan'),
(14361, 567, 'Tandarora'),
(14362, 567, 'Travesia'),
(14363, 567, 'Binogsacan Upper'),
(14364, 568, 'Bagacay'),
(14365, 568, 'Rizal Pob.'),
(14366, 568, 'Mabini Pob.'),
(14367, 568, 'Plaza Pob.'),
(14368, 568, 'Magsaysay Pob'),
(14369, 568, 'Calzada Pob.'),
(14370, 568, 'Quitinday Pob.'),
(14371, 568, 'White Deer Pob.'),
(14372, 568, 'Bautista'),
(14373, 568, 'Cabraran'),
(14374, 568, 'Del Rosario'),
(14375, 568, 'Estrella'),
(14376, 568, 'Florista'),
(14377, 568, 'Mamlad'),
(14378, 568, 'Maogog'),
(14379, 568, 'Mercado Pob.'),
(14380, 568, 'Salvacion'),
(14381, 568, 'San Isidro'),
(14382, 568, 'San Roque'),
(14383, 568, 'San Vicente'),
(14384, 568, 'Sinagaran'),
(14385, 568, 'Villa Paz'),
(14386, 568, 'Aurora Pob.'),
(14387, 569, 'Bgy. 47 - Arimbay'),
(14388, 569, 'Bgy. 64 - Bagacay'),
(14389, 569, 'Bgy. 48 - Bagong Abre'),
(14390, 569, 'Bgy. 66 - Banquerohan'),
(14391, 569, 'Bgy. 1 - Em\'s Barrio (Pob.)'),
(14392, 569, 'Bgy. 11 - Maoyod Pob.'),
(14393, 569, 'Bgy. 12 - Tula-tula (Pob.)'),
(14394, 569, 'Bgy. 13 - Ilawod West Pob.'),
(14395, 569, 'Bgy. 14 - Ilawod Pob.'),
(14396, 569, 'Bgy. 15 - Ilawod East Pob.'),
(14397, 569, 'Bgy. 16 - Kawit-East Washington Drive (Pob.)'),
(14398, 569, 'Bgy. 17 - Rizal Street., Ilawod (Pob.)'),
(14399, 569, 'Bgy. 19 - Cabagñan'),
(14400, 569, 'Bgy. 2 - Em\'s Barrio South (Pob.)'),
(14401, 569, 'Bgy. 18 - Cabagñan West (Pob.)'),
(14402, 569, 'Bgy. 21 - Binanuahan West (Pob.)'),
(14403, 569, 'Bgy. 22 - Binanuahan East (Pob.)'),
(14404, 569, 'Bgy. 23 - Imperial Court Subd. (Pob.)'),
(14405, 569, 'Bgy. 20 - Cabagñan East (Pob.)'),
(14406, 569, 'Bgy. 25 - Lapu-lapu (Pob.)'),
(14407, 569, 'Bgy. 26 - Dinagaan (Pob.)'),
(14408, 569, 'Bgy. 27 - Victory Village South (Pob.)'),
(14409, 569, 'Bgy. 28 - Victory Village North (Pob.)'),
(14410, 569, 'Bgy. 29 - Sabang (Pob.)'),
(14411, 569, 'Bgy. 3 - Em\'s Barrio East (Pob.)'),
(14412, 569, 'Bgy. 36 - Kapantawan (Pob.)'),
(14413, 569, 'Bgy. 30 - Pigcale (Pob.)'),
(14414, 569, 'Bgy. 31 - Centro-Baybay (Pob.)'),
(14415, 569, 'Bgy. 33 - PNR-Peñaranda St.-Iraya (Pob.)'),
(14416, 569, 'Bgy. 34 - Oro Site-Magallanes St. (Pob.)'),
(14417, 569, 'Bgy. 35 - Tinago (Pob.)'),
(14418, 569, 'Bgy. 37 - Bitano (Pob.)'),
(14419, 569, 'Bgy. 39 - Bonot (Pob.)'),
(14420, 569, 'Bgy. 4 - Sagpon Pob.'),
(14421, 569, 'Bgy. 5 - Sagmin Pob.'),
(14422, 569, 'Bgy. 6 - Bañadero Pob.'),
(14423, 569, 'Bgy. 7 - Baño (Pob.)'),
(14424, 569, 'Bgy. 8 - Bagumbayan (Pob.)'),
(14425, 569, 'Bgy. 9 - Pinaric (Pob.)'),
(14426, 569, 'Bgy. 67 - Bariis'),
(14427, 569, 'Bgy. 49 - Bigaa'),
(14428, 569, 'Bgy. 41 - Bogtong'),
(14429, 569, 'Bgy. 53 - Bonga'),
(14430, 569, 'Bgy. 69 - Buenavista'),
(14431, 569, 'Bgy. 51 - Buyuan'),
(14432, 569, 'Bgy. 70 - Cagbacong'),
(14433, 569, 'Bgy. 40 - Cruzada'),
(14434, 569, 'Bgy. 57 - Dap-dap'),
(14435, 569, 'Bgy. 45 - Dita'),
(14436, 569, 'Bgy. 55 - Estanza'),
(14437, 569, 'Bgy. 38 - Gogon'),
(14438, 569, 'Bgy. 62 - Homapon'),
(14439, 569, 'Bgy. 65 - Imalnod'),
(14440, 569, 'Bgy. 54 - Mabinit'),
(14441, 569, 'Bgy. 63 - Mariawa'),
(14442, 569, 'Bgy. 61 - Maslog'),
(14443, 569, 'Bgy. 50 - Padang'),
(14444, 569, 'Bgy. 44 - Pawa'),
(14445, 569, 'Bgy. 59 - Puro'),
(14446, 569, 'Bgy. 42 - Rawis'),
(14447, 569, 'Bgy. 68 - San Francisco'),
(14448, 569, 'Bgy. 46 - San Joaquin'),
(14449, 569, 'Bgy. 32 - San Roque'),
(14450, 569, 'Bgy. 43 - Tamaoyan'),
(14451, 569, 'Bgy. 56 - Taysan'),
(14452, 569, 'Bgy. 52 - Matanag'),
(14453, 569, 'Bgy. 10 - Cabugao'),
(14454, 569, 'Bgy. 24 - Rizal Street'),
(14455, 569, 'Bgy. 58 - Buragwis'),
(14456, 569, 'Bgy. 60 - Lamba'),
(14457, 570, 'Alongong'),
(14458, 570, 'Apud'),
(14459, 570, 'Bacolod'),
(14460, 570, 'Zone I (Pob.)'),
(14461, 570, 'Zone II (Pob.)'),
(14462, 570, 'Zone III (Pob.)'),
(14463, 570, 'Zone IV (Pob.)'),
(14464, 570, 'Zone V (Pob.)'),
(14465, 570, 'Zone VI (Pob.)'),
(14466, 570, 'Zone VII (Pob.)'),
(14467, 570, 'Bariw'),
(14468, 570, 'Bonbon'),
(14469, 570, 'Buga'),
(14470, 570, 'Bulusan'),
(14471, 570, 'Burabod'),
(14472, 570, 'Caguscos'),
(14473, 570, 'East Carisac'),
(14474, 570, 'West Carisac'),
(14475, 570, 'Harigue'),
(14476, 570, 'Libtong'),
(14477, 570, 'Linao'),
(14478, 570, 'Mabayawas'),
(14479, 570, 'Macabugos'),
(14480, 570, 'Magallang'),
(14481, 570, 'Malabiga'),
(14482, 570, 'Marayag'),
(14483, 570, 'Matara'),
(14484, 570, 'Molosbolos'),
(14485, 570, 'Natasan'),
(14486, 570, 'Nogpo'),
(14487, 570, 'Pantao'),
(14488, 570, 'Rawis'),
(14489, 570, 'Sagrada Familia'),
(14490, 570, 'Salvacion'),
(14491, 570, 'Sampongan'),
(14492, 570, 'San Agustin'),
(14493, 570, 'San Antonio'),
(14494, 570, 'San Isidro'),
(14495, 570, 'San Jose'),
(14496, 570, 'San Pascual'),
(14497, 570, 'San Ramon'),
(14498, 570, 'San Vicente'),
(14499, 570, 'Santa Cruz'),
(14500, 570, 'Niño Jesus'),
(14501, 570, 'Talin-talin'),
(14502, 570, 'Tambo'),
(14503, 570, 'Villa Petrona'),
(14504, 571, 'Abella'),
(14505, 571, 'Allang'),
(14506, 571, 'Amtic'),
(14507, 571, 'Bacong'),
(14508, 571, 'Bagumbayan'),
(14509, 571, 'Balanac'),
(14510, 571, 'Baligang'),
(14511, 571, 'Barayong'),
(14512, 571, 'Basag'),
(14513, 571, 'Batang'),
(14514, 571, 'Bay'),
(14515, 571, 'Binanowan'),
(14516, 571, 'Binatagan (Pob.)'),
(14517, 571, 'Bobonsuran'),
(14518, 571, 'Bonga'),
(14519, 571, 'Busac'),
(14520, 571, 'Busay'),
(14521, 571, 'Cabarian'),
(14522, 571, 'Calzada (Pob.)'),
(14523, 571, 'Catburawan'),
(14524, 571, 'Cavasi'),
(14525, 571, 'Culliat'),
(14526, 571, 'Dunao'),
(14527, 571, 'Francia'),
(14528, 571, 'Guilid'),
(14529, 571, 'Herrera'),
(14530, 571, 'Layon'),
(14531, 571, 'Macalidong'),
(14532, 571, 'Mahaba'),
(14533, 571, 'Malama'),
(14534, 571, 'Maonon'),
(14535, 571, 'Nasisi'),
(14536, 571, 'Nabonton'),
(14537, 571, 'Oma-oma'),
(14538, 571, 'Palapas'),
(14539, 571, 'Pandan'),
(14540, 571, 'Paulba'),
(14541, 571, 'Paulog'),
(14542, 571, 'Pinamaniquian'),
(14543, 571, 'Pinit'),
(14544, 571, 'Ranao-ranao'),
(14545, 571, 'San Vicente'),
(14546, 571, 'Santa Cruz (Pob.)'),
(14547, 571, 'Tagpo'),
(14548, 571, 'Tambo'),
(14549, 571, 'Tandarura'),
(14550, 571, 'Tastas'),
(14551, 571, 'Tinago'),
(14552, 571, 'Tinampo'),
(14553, 571, 'Tiongson'),
(14554, 571, 'Tomolin'),
(14555, 571, 'Tuburan'),
(14556, 571, 'Tula-tula Grande'),
(14557, 571, 'Tula-tula Pequeño'),
(14558, 571, 'Tupas'),
(14559, 572, 'Binitayan'),
(14560, 572, 'Calbayog'),
(14561, 572, 'Canaway'),
(14562, 572, 'Barangay I (Pob.)'),
(14563, 572, 'Barangay II (Pob.)'),
(14564, 572, 'Barangay III (Pob.)'),
(14565, 572, 'Barangay IV (Pob.)'),
(14566, 572, 'Barangay V (Pob.)'),
(14567, 572, 'Salvacion'),
(14568, 572, 'San Antonio Santicon (Pob.)'),
(14569, 572, 'San Antonio Sulong'),
(14570, 572, 'San Francisco'),
(14571, 572, 'San Isidro Ilawod'),
(14572, 572, 'San Isidro Iraya'),
(14573, 572, 'San Jose'),
(14574, 572, 'San Roque'),
(14575, 572, 'Santa Cruz'),
(14576, 572, 'Santa Teresa'),
(14577, 573, 'Awang'),
(14578, 573, 'Bagatangki'),
(14579, 573, 'Balading'),
(14580, 573, 'Balza'),
(14581, 573, 'Bariw'),
(14582, 573, 'Baybay'),
(14583, 573, 'Bulang'),
(14584, 573, 'Burabod'),
(14585, 573, 'Cabunturan'),
(14586, 573, 'Comun'),
(14587, 573, 'Diaro'),
(14588, 573, 'Estancia'),
(14589, 573, 'Jonop'),
(14590, 573, 'Labnig'),
(14591, 573, 'Libod'),
(14592, 573, 'Malolos'),
(14593, 573, 'Matalipni'),
(14594, 573, 'Ogob'),
(14595, 573, 'Pawa'),
(14596, 573, 'Payahan'),
(14597, 573, 'Poblacion'),
(14598, 573, 'Bagumbayan'),
(14599, 573, 'Quinarabasahan'),
(14600, 573, 'Santa Elena'),
(14601, 573, 'Soa'),
(14602, 573, 'Sugcad'),
(14603, 573, 'Tagoytoy'),
(14604, 573, 'Tanawan'),
(14605, 573, 'Tuliw'),
(14606, 574, 'Balabagon'),
(14607, 574, 'Balasbas'),
(14608, 574, 'Bamban'),
(14609, 574, 'Buyo'),
(14610, 574, 'Cabacongan'),
(14611, 574, 'Cabit'),
(14612, 574, 'Cawayan'),
(14613, 574, 'Cawit'),
(14614, 574, 'Holugan'),
(14615, 574, 'It-Ba (Pob.)'),
(14616, 574, 'Malobago'),
(14617, 574, 'Manumbalay'),
(14618, 574, 'Nagotgot'),
(14619, 574, 'Pawa'),
(14620, 574, 'Tinapian'),
(14621, 575, 'Badbad'),
(14622, 575, 'Badian'),
(14623, 575, 'Bagsa'),
(14624, 575, 'Bagumbayan'),
(14625, 575, 'Balogo'),
(14626, 575, 'Banao'),
(14627, 575, 'Bangiawon'),
(14628, 575, 'Bongoran'),
(14629, 575, 'Bogtong'),
(14630, 575, 'Busac'),
(14631, 575, 'Cadawag'),
(14632, 575, 'Cagmanaba'),
(14633, 575, 'Calaguimit'),
(14634, 575, 'Calpi'),
(14635, 575, 'Calzada'),
(14636, 575, 'Camagong'),
(14637, 575, 'Casinagan'),
(14638, 575, 'Centro Poblacion'),
(14639, 575, 'Coliat'),
(14640, 575, 'Del Rosario'),
(14641, 575, 'Gumabao'),
(14642, 575, 'Ilaor Norte'),
(14643, 575, 'Ilaor Sur'),
(14644, 575, 'Iraya Norte'),
(14645, 575, 'Iraya Sur'),
(14646, 575, 'Manga'),
(14647, 575, 'Maporong'),
(14648, 575, 'Maramba'),
(14649, 575, 'Moroponros'),
(14650, 575, 'Matambo'),
(14651, 575, 'Mayag'),
(14652, 575, 'Mayao'),
(14653, 575, 'Nagas'),
(14654, 575, 'San Pascual'),
(14655, 575, 'Obaliw-Rinas'),
(14656, 575, 'Pistola'),
(14657, 575, 'Ramay'),
(14658, 575, 'Rizal'),
(14659, 575, 'Saban'),
(14660, 575, 'San Agustin'),
(14661, 575, 'San Antonio'),
(14662, 575, 'San Isidro'),
(14663, 575, 'San Jose'),
(14664, 575, 'San Juan'),
(14665, 575, 'San Miguel'),
(14666, 575, 'San Ramon'),
(14667, 575, 'San Vicente'),
(14668, 575, 'Talisay'),
(14669, 575, 'Talongog'),
(14670, 575, 'Tapel'),
(14671, 575, 'Tobgon'),
(14672, 575, 'Tobog'),
(14673, 575, 'Tablon'),
(14674, 576, 'Agol'),
(14675, 576, 'Alabangpuro'),
(14676, 576, 'Basicao Coastal'),
(14677, 576, 'Basicao Interior'),
(14678, 576, 'Banawan'),
(14679, 576, 'Binodegahan'),
(14680, 576, 'Buenavista'),
(14681, 576, 'Buyo'),
(14682, 576, 'Caratagan'),
(14683, 576, 'Cuyaoyao'),
(14684, 576, 'Flores'),
(14685, 576, 'Lawinon'),
(14686, 576, 'Macasitas'),
(14687, 576, 'Malapay'),
(14688, 576, 'Malidong'),
(14689, 576, 'Mamlad'),
(14690, 576, 'Marigondon'),
(14691, 576, 'Matanglad'),
(14692, 576, 'Nablangbulod'),
(14693, 576, 'Oringon'),
(14694, 576, 'Palapas'),
(14695, 576, 'Panganiran'),
(14696, 576, 'Barangay I (Pob.)'),
(14697, 576, 'Barangay II (Pob.)'),
(14698, 576, 'Barangay III (Pob.)'),
(14699, 576, 'Barangay IV (Pob.)'),
(14700, 576, 'Barangay V (Pob.)'),
(14701, 576, 'Rawis'),
(14702, 576, 'Salvacion'),
(14703, 576, 'Santo Cristo'),
(14704, 576, 'Sukip'),
(14705, 576, 'Tibabo'),
(14706, 576, 'La Medalla'),
(14707, 577, 'Agos'),
(14708, 577, 'Alnay'),
(14709, 577, 'Alomon'),
(14710, 577, 'Amoguis'),
(14711, 577, 'Anopol'),
(14712, 577, 'Apad'),
(14713, 577, 'Balaba'),
(14714, 577, 'Balangibang'),
(14715, 577, 'Balinad'),
(14716, 577, 'Basud'),
(14717, 577, 'Binagbangan'),
(14718, 577, 'Buyo'),
(14719, 577, 'Centro Occidental (Pob.)'),
(14720, 577, 'Centro Oriental (Pob.)'),
(14721, 577, 'Cepres'),
(14722, 577, 'Cotmon'),
(14723, 577, 'Cotnogan'),
(14724, 577, 'Danao'),
(14725, 577, 'Gabon'),
(14726, 577, 'Gamot'),
(14727, 577, 'Itaran'),
(14728, 577, 'Kinale'),
(14729, 577, 'Kinuartilan'),
(14730, 577, 'La Medalla'),
(14731, 577, 'La Purisima'),
(14732, 577, 'Lanigay'),
(14733, 577, 'Lidong'),
(14734, 577, 'Lourdes'),
(14735, 577, 'Magpanambo'),
(14736, 577, 'Magurang'),
(14737, 577, 'Matacon'),
(14738, 577, 'Maynaga'),
(14739, 577, 'Maysua'),
(14740, 577, 'Mendez'),
(14741, 577, 'Napo'),
(14742, 577, 'Pinagdapugan'),
(14743, 577, 'Ponso'),
(14744, 577, 'Salvacion'),
(14745, 577, 'San Roque'),
(14746, 577, 'Santicon'),
(14747, 577, 'Santa Cruz'),
(14748, 577, 'Santa Teresita'),
(14749, 577, 'Sugcad'),
(14750, 577, 'Ubaliw'),
(14751, 578, 'Bagaobawan'),
(14752, 578, 'Batan'),
(14753, 578, 'Bilbao'),
(14754, 578, 'Binosawan'),
(14755, 578, 'Bogtong'),
(14756, 578, 'Buenavista'),
(14757, 578, 'Buhatan'),
(14758, 578, 'Calanaga'),
(14759, 578, 'Caracaran'),
(14760, 578, 'Carogcog'),
(14761, 578, 'Dap-dap'),
(14762, 578, 'Gaba'),
(14763, 578, 'Galicia'),
(14764, 578, 'Guadalupe'),
(14765, 578, 'Hamorawon'),
(14766, 578, 'Lagundi'),
(14767, 578, 'Liguan'),
(14768, 578, 'Linao'),
(14769, 578, 'Malobago'),
(14770, 578, 'Mananao'),
(14771, 578, 'Mancao'),
(14772, 578, 'Manila'),
(14773, 578, 'Masaga'),
(14774, 578, 'Morocborocan'),
(14775, 578, 'Nagcalsot'),
(14776, 578, 'Pagcolbon'),
(14777, 578, 'Poblacion'),
(14778, 578, 'Sagrada'),
(14779, 578, 'San Ramon'),
(14780, 578, 'Santa Barbara'),
(14781, 578, 'Tinocawan'),
(14782, 578, 'Tinopan'),
(14783, 578, 'Viga'),
(14784, 578, 'Villahermosa'),
(14785, 579, 'Alimsog'),
(14786, 579, 'Buhatan'),
(14787, 579, 'Calayucay'),
(14788, 579, 'Fidel Surtida'),
(14789, 579, 'Lidong'),
(14790, 579, 'Bagong San Roque'),
(14791, 579, 'San Juan Pob.'),
(14792, 579, 'Santo Domingo Pob.'),
(14793, 579, 'San Pedro Pob.'),
(14794, 579, 'San Vicente Pob.'),
(14795, 579, 'San Rafael Pob.'),
(14796, 579, 'Del Rosario Pob.'),
(14797, 579, 'San Francisco Pob.'),
(14798, 579, 'Nagsiya Pob.'),
(14799, 579, 'Salvacion'),
(14800, 579, 'San Andres'),
(14801, 579, 'San Fernando'),
(14802, 579, 'San Isidro'),
(14803, 579, 'San Roque'),
(14804, 579, 'Santa Misericordia'),
(14805, 579, 'Santo Niño'),
(14806, 579, 'Market Site Pob.'),
(14807, 579, 'Pandayan Pob.'),
(14808, 580, 'Agnas'),
(14809, 580, 'Bacolod'),
(14810, 580, 'Bangkilingan'),
(14811, 580, 'Bantayan'),
(14812, 580, 'Baranghawon'),
(14813, 580, 'Basagan'),
(14814, 580, 'Basud (Pob.)'),
(14815, 580, 'Bogñabong'),
(14816, 580, 'Bombon (Pob.)'),
(14817, 580, 'Bonot'),
(14818, 580, 'San Isidro'),
(14819, 580, 'Buang'),
(14820, 580, 'Buhian'),
(14821, 580, 'Cabagñan'),
(14822, 580, 'Cobo'),
(14823, 580, 'Comon'),
(14824, 580, 'Cormidal'),
(14825, 580, 'Divino Rostro (Pob.)'),
(14826, 580, 'Fatima'),
(14827, 580, 'Guinobat'),
(14828, 580, 'Hacienda'),
(14829, 580, 'Magapo'),
(14830, 580, 'Mariroc'),
(14831, 580, 'Matagbac'),
(14832, 580, 'Oras'),
(14833, 580, 'Oson'),
(14834, 580, 'Panal'),
(14835, 580, 'Pawa'),
(14836, 580, 'Pinagbobong'),
(14837, 580, 'Quinale Cabasan (Pob.)'),
(14838, 580, 'Quinastillojan'),
(14839, 580, 'Rawis'),
(14840, 580, 'Sagurong'),
(14841, 580, 'Salvacion'),
(14842, 580, 'San Antonio'),
(14843, 580, 'San Carlos'),
(14844, 580, 'San Juan (Pob.)'),
(14845, 580, 'San Lorenzo'),
(14846, 580, 'San Ramon'),
(14847, 580, 'San Roque'),
(14848, 580, 'San Vicente'),
(14849, 580, 'Santo Cristo (Pob.)'),
(14850, 580, 'Sua-Igot'),
(14851, 580, 'Tabiguian'),
(14852, 580, 'Tagas'),
(14853, 580, 'Tayhi (Pob.)'),
(14854, 580, 'Visita'),
(14855, 581, 'Bagumbayan'),
(14856, 581, 'Bariis'),
(14857, 581, 'Baybay'),
(14858, 581, 'Belen'),
(14859, 581, 'Biyong'),
(14860, 581, 'Bolo'),
(14861, 581, 'Cale'),
(14862, 581, 'Cararayan'),
(14863, 581, 'Coro-coro'),
(14864, 581, 'Dap-dap'),
(14865, 581, 'Gajo'),
(14866, 581, 'Joroan'),
(14867, 581, 'Libjo'),
(14868, 581, 'Libtong'),
(14869, 581, 'Matalibong'),
(14870, 581, 'Maynonong'),
(14871, 581, 'Mayong'),
(14872, 581, 'Misibis'),
(14873, 581, 'Naga'),
(14874, 581, 'Nagas'),
(14875, 581, 'Oyama'),
(14876, 581, 'Putsan'),
(14877, 581, 'San Bernardo'),
(14878, 581, 'Sogod'),
(14879, 581, 'Tigbi (Pob.)'),
(14880, 582, 'Angas'),
(14881, 582, 'Bactas'),
(14882, 582, 'Binatagan'),
(14883, 582, 'Caayunan'),
(14884, 582, 'Guinatungan'),
(14885, 582, 'Hinampacan'),
(14886, 582, 'Langa'),
(14887, 582, 'Laniton'),
(14888, 582, 'Lidong'),
(14889, 582, 'Mampili'),
(14890, 582, 'Mandazo'),
(14891, 582, 'Mangcamagong'),
(14892, 582, 'Manmuntay'),
(14893, 582, 'Mantugawe'),
(14894, 582, 'Matnog'),
(14895, 582, 'Mocong'),
(14896, 582, 'Oliva'),
(14897, 582, 'Pagsangahan'),
(14898, 582, 'Pinagwarasan'),
(14899, 582, 'Plaridel'),
(14900, 582, 'Poblacion 1'),
(14901, 582, 'San Felipe'),
(14902, 582, 'San Jose'),
(14903, 582, 'San Pascual'),
(14904, 582, 'Taba-taba'),
(14905, 582, 'Tacad'),
(14906, 582, 'Taisan'),
(14907, 582, 'Tuaca'),
(14908, 582, 'Poblacion 2'),
(14909, 583, 'Alayao'),
(14910, 583, 'Binawangan'),
(14911, 583, 'Calabaca'),
(14912, 583, 'Camagsaan'),
(14913, 583, 'Catabaguangan'),
(14914, 583, 'Catioan'),
(14915, 583, 'Del Pilar'),
(14916, 583, 'Itok'),
(14917, 583, 'Lucbanan'),
(14918, 583, 'Mabini'),
(14919, 583, 'Mactang'),
(14920, 583, 'Mataque'),
(14921, 583, 'Old Camp'),
(14922, 583, 'Poblacion'),
(14923, 583, 'Magsaysay'),
(14924, 583, 'San Antonio'),
(14925, 583, 'San Isidro'),
(14926, 583, 'San Roque'),
(14927, 583, 'Tanawan'),
(14928, 583, 'Ubang'),
(14929, 583, 'Villa Aurora'),
(14930, 583, 'Villa Belen'),
(14931, 584, 'Alawihao'),
(14932, 584, 'Awitan'),
(14933, 584, 'Bagasbas'),
(14934, 584, 'Bibirao'),
(14935, 584, 'Borabod'),
(14936, 584, 'Calasgasan'),
(14937, 584, 'Camambugan'),
(14938, 584, 'Cobangbang'),
(14939, 584, 'Dogongan'),
(14940, 584, 'Gahonon'),
(14941, 584, 'Gubat'),
(14942, 584, 'Lag-On'),
(14943, 584, 'Magang'),
(14944, 584, 'Mambalite'),
(14945, 584, 'Mancruz'),
(14946, 584, 'Pamorangon'),
(14947, 584, 'Barangay I (Pob.)'),
(14948, 584, 'Barangay II (Pob.)'),
(14949, 584, 'Barangay III (Pob.)'),
(14950, 584, 'Barangay IV (Pob.)'),
(14951, 584, 'Barangay V (Pob.)'),
(14952, 584, 'Barangay VI (Pob.)'),
(14953, 584, 'Barangay VII (Pob.)'),
(14954, 584, 'Barangay VIII (Pob.)'),
(14955, 584, 'San Isidro'),
(14956, 585, 'Daculang Bolo'),
(14957, 585, 'Dagotdotan'),
(14958, 585, 'Langga'),
(14959, 585, 'Laniton'),
(14960, 585, 'Maisog'),
(14961, 585, 'Mampurog'),
(14962, 585, 'Manlimonsito'),
(14963, 585, 'Matacong (Pob.)'),
(14964, 585, 'Salvacion'),
(14965, 585, 'San Antonio'),
(14966, 585, 'San Isidro'),
(14967, 585, 'San Ramon'),
(14968, 586, 'Bagong Bayan'),
(14969, 586, 'Calero'),
(14970, 586, 'Dahican'),
(14971, 586, 'Dayhagan'),
(14972, 586, 'Larap'),
(14973, 586, 'Luklukan Norte'),
(14974, 586, 'Luklukan Sur'),
(14975, 586, 'Motherlode'),
(14976, 586, 'Nakalaya'),
(14977, 586, 'Osmeña'),
(14978, 586, 'Pag-Asa'),
(14979, 586, 'Parang'),
(14980, 586, 'Plaridel'),
(14981, 586, 'North Poblacion'),
(14982, 586, 'South Poblacion'),
(14983, 586, 'Salvacion'),
(14984, 586, 'San Isidro'),
(14985, 586, 'San Jose'),
(14986, 586, 'San Martin'),
(14987, 586, 'San Pedro'),
(14988, 586, 'San Rafael'),
(14989, 586, 'Santa Cruz'),
(14990, 586, 'Santa Elena'),
(14991, 586, 'Santa Milagrosa'),
(14992, 586, 'Santa Rosa Norte'),
(14993, 586, 'Santa Rosa Sur'),
(14994, 586, 'Tamisan'),
(14995, 587, 'Anameam'),
(14996, 587, 'Awitan'),
(14997, 587, 'Baay'),
(14998, 587, 'Bagacay'),
(14999, 587, 'Bagong Silang I'),
(15000, 587, 'Bagong Silang II'),
(15001, 587, 'Bakiad'),
(15002, 587, 'Bautista'),
(15003, 587, 'Bayabas'),
(15004, 587, 'Bayan-bayan'),
(15005, 587, 'Benit'),
(15006, 587, 'Anahaw (Pob.)'),
(15007, 587, 'Gumamela (Pob.)'),
(15008, 587, 'San Francisco (Pob.)'),
(15009, 587, 'Kalamunding (Pob.)'),
(15010, 587, 'Bulhao'),
(15011, 587, 'Cabatuhan'),
(15012, 587, 'Cabusay'),
(15013, 587, 'Calabasa'),
(15014, 587, 'Canapawan'),
(15015, 587, 'Daguit'),
(15016, 587, 'Dalas'),
(15017, 587, 'Dumagmang'),
(15018, 587, 'Exciban'),
(15019, 587, 'Fundado'),
(15020, 587, 'Guinacutan'),
(15021, 587, 'Guisican'),
(15022, 587, 'Iberica'),
(15023, 587, 'Lugui'),
(15024, 587, 'Mabilo I'),
(15025, 587, 'Mabilo II'),
(15026, 587, 'Macogon'),
(15027, 587, 'Mahawan-hawan'),
(15028, 587, 'Malangcao-Basud'),
(15029, 587, 'Malasugui'),
(15030, 587, 'Malatap'),
(15031, 587, 'Malaya'),
(15032, 587, 'Malibago'),
(15033, 587, 'Maot'),
(15034, 587, 'Masalong'),
(15035, 587, 'Matanlang'),
(15036, 587, 'Napaod'),
(15037, 587, 'Pag-Asa'),
(15038, 587, 'Pangpang'),
(15039, 587, 'Pinya (Pob.)'),
(15040, 587, 'San Antonio'),
(15041, 587, 'Santa Cruz'),
(15042, 587, 'Bagong Silang III'),
(15043, 587, 'Submakin'),
(15044, 587, 'Talobatib'),
(15045, 587, 'Tigbinan'),
(15046, 587, 'Tulay Na Lupa'),
(15047, 588, 'Apuao'),
(15048, 588, 'Barangay I (Pob.)'),
(15049, 588, 'Barangay II (Pob.)'),
(15050, 588, 'Barangay III (Pob.)'),
(15051, 588, 'Barangay IV (Pob.)'),
(15052, 588, 'Barangay V (Pob.)'),
(15053, 588, 'Barangay VI (Pob.)'),
(15054, 588, 'Barangay VII (Pob.)'),
(15055, 588, 'Caringo'),
(15056, 588, 'Catandunganon'),
(15057, 588, 'Cayucyucan'),
(15058, 588, 'Colasi'),
(15059, 588, 'Del Rosario'),
(15060, 588, 'Gaboc'),
(15061, 588, 'Hamoraon'),
(15062, 588, 'Hinipaan'),
(15063, 588, 'Lalawigan'),
(15064, 588, 'Lanot'),
(15065, 588, 'Mambungalon'),
(15066, 588, 'Manguisoc'),
(15067, 588, 'Masalongsalong'),
(15068, 588, 'Matoogtoog'),
(15069, 588, 'Pambuhan'),
(15070, 588, 'Quinapaguian'),
(15071, 588, 'San Roque'),
(15072, 588, 'Tarum'),
(15073, 589, 'Awitan'),
(15074, 589, 'Bagumbayan'),
(15075, 589, 'Bakal'),
(15076, 589, 'Batobalani'),
(15077, 589, 'Calaburnay'),
(15078, 589, 'Capacuan'),
(15079, 589, 'Casalugan'),
(15080, 589, 'Dagang'),
(15081, 589, 'Dalnac'),
(15082, 589, 'Dancalan'),
(15083, 589, 'Gumaus'),
(15084, 589, 'Labnig'),
(15085, 589, 'Macolabo Island'),
(15086, 589, 'Malacbang'),
(15087, 589, 'Malaguit'),
(15088, 589, 'Mampungo'),
(15089, 589, 'Mangkasay'),
(15090, 589, 'Maybato'),
(15091, 589, 'Palanas'),
(15092, 589, 'Pinagbirayan Malaki'),
(15093, 589, 'Pinagbirayan Munti'),
(15094, 589, 'Poblacion Norte'),
(15095, 589, 'Poblacion Sur'),
(15096, 589, 'Tabas'),
(15097, 589, 'Talusan'),
(15098, 589, 'Tawig'),
(15099, 589, 'Tugos'),
(15100, 590, 'Asdum'),
(15101, 590, 'Cabanbanan'),
(15102, 590, 'Calabagas'),
(15103, 590, 'Fabrica'),
(15104, 590, 'Iraya Sur'),
(15105, 590, 'Man-Ogob'),
(15106, 590, 'Poblacion District I'),
(15107, 590, 'Poblacion District II'),
(15108, 590, 'San Jose'),
(15109, 591, 'Basiad'),
(15110, 591, 'Bulala'),
(15111, 591, 'Polungguitguit'),
(15112, 591, 'Rizal'),
(15113, 591, 'Salvacion'),
(15114, 591, 'San Lorenzo'),
(15115, 591, 'San Pedro'),
(15116, 591, 'San Vicente'),
(15117, 591, 'Santa Elena (Pob.)'),
(15118, 591, 'Villa San Isidro'),
(15119, 591, 'Don Tomas'),
(15120, 591, 'Guitol'),
(15121, 591, 'Kabuluan'),
(15122, 591, 'Kagtalaba'),
(15123, 591, 'Maulawin'),
(15124, 591, 'Patag Ibaba'),
(15125, 591, 'Patag Iraya'),
(15126, 591, 'Plaridel'),
(15127, 591, 'Tabugon'),
(15128, 592, 'Binanuaan'),
(15129, 592, 'Caawigan'),
(15130, 592, 'Cahabaan'),
(15131, 592, 'Calintaan'),
(15132, 592, 'Del Carmen'),
(15133, 592, 'Gabon'),
(15134, 592, 'Itomang'),
(15135, 592, 'Poblacion'),
(15136, 592, 'San Francisco'),
(15137, 592, 'San Isidro'),
(15138, 592, 'San Jose'),
(15139, 592, 'San Nicolas'),
(15140, 592, 'Santa Cruz'),
(15141, 592, 'Santa Elena'),
(15142, 592, 'Santo Niño'),
(15143, 593, 'Aguit-It'),
(15144, 593, 'Banocboc'),
(15145, 593, 'Cagbalogo'),
(15146, 593, 'Calangcawan Norte'),
(15147, 593, 'Calangcawan Sur'),
(15148, 593, 'Guinacutan'),
(15149, 593, 'Mangcayo'),
(15150, 593, 'Mangcawayan'),
(15151, 593, 'Manlucugan'),
(15152, 593, 'Matango'),
(15153, 593, 'Napilihan'),
(15154, 593, 'Pinagtigasan'),
(15155, 593, 'Barangay I (Pob.)'),
(15156, 593, 'Barangay II (Pob.)'),
(15157, 593, 'Barangay III (Pob.)'),
(15158, 593, 'Sabang'),
(15159, 593, 'Santo Domingo'),
(15160, 593, 'Singi'),
(15161, 593, 'Sula'),
(15162, 594, 'Agdangan Pob.'),
(15163, 594, 'Antipolo'),
(15164, 594, 'Bagumbayan'),
(15165, 594, 'Caranday'),
(15166, 594, 'Cristo Rey'),
(15167, 594, 'Del Pilar'),
(15168, 594, 'Del Rosario (Pob.)'),
(15169, 594, 'Iyagan'),
(15170, 594, 'La Medalla'),
(15171, 594, 'Lourdes'),
(15172, 594, 'Nababarera'),
(15173, 594, 'Sagrada'),
(15174, 594, 'Salvacion'),
(15175, 594, 'Buluang'),
(15176, 594, 'San Francisco (Pob.)'),
(15177, 594, 'San Isidro'),
(15178, 594, 'San Jose (Pob.)'),
(15179, 594, 'San Juan'),
(15180, 594, 'San Nicolas (Pob.)'),
(15181, 594, 'San Rafael'),
(15182, 594, 'Pugay'),
(15183, 594, 'San Ramon (Pob.)'),
(15184, 594, 'San Roque (Pob.)'),
(15185, 594, 'San Vicente'),
(15186, 594, 'Santa Cruz (Pob.)'),
(15187, 594, 'Santa Eulalia'),
(15188, 594, 'Santa Isabel'),
(15189, 594, 'Santa Teresa'),
(15190, 594, 'Santa Teresita'),
(15191, 594, 'Tapol'),
(15192, 595, 'Cabanbanan'),
(15193, 595, 'Cabungan'),
(15194, 595, 'Camangahan'),
(15195, 595, 'Cayogcog'),
(15196, 595, 'Coguit'),
(15197, 595, 'Duran'),
(15198, 595, 'Laganac'),
(15199, 595, 'Luluasan'),
(15200, 595, 'Montenegro'),
(15201, 595, 'Pararao'),
(15202, 595, 'Siramag (Pob.)'),
(15203, 595, 'Pulang Daga'),
(15204, 595, 'Sagrada Nacacale'),
(15205, 595, 'San Francisco'),
(15206, 595, 'Santiago Nacacale'),
(15207, 595, 'Tapayas'),
(15208, 595, 'Tomatarayo'),
(15209, 596, 'Agos'),
(15210, 596, 'Bacolod'),
(15211, 596, 'Buluang'),
(15212, 596, 'Caricot'),
(15213, 596, 'Cawacagan'),
(15214, 596, 'Cotmon'),
(15215, 596, 'Cristo Rey'),
(15216, 596, 'Del Rosario'),
(15217, 596, 'Divina Pastora (Pob.)'),
(15218, 596, 'Goyudan'),
(15219, 596, 'Lobong'),
(15220, 596, 'Lubigan'),
(15221, 596, 'Mainit'),
(15222, 596, 'Manga'),
(15223, 596, 'Masoli'),
(15224, 596, 'Neighborhood'),
(15225, 596, 'Niño Jesus'),
(15226, 596, 'Pagatpatan'),
(15227, 596, 'Palo'),
(15228, 596, 'Payak'),
(15229, 596, 'Sagrada'),
(15230, 596, 'Salvacion'),
(15231, 596, 'San Isidro (Pob.)'),
(15232, 596, 'San Juan'),
(15233, 596, 'San Miguel'),
(15234, 596, 'San Rafael (Pob.)'),
(15235, 596, 'San Roque'),
(15236, 596, 'San Vicente'),
(15237, 596, 'Santa Cruz (Pob.)'),
(15238, 596, 'Santiago (Pob.)'),
(15239, 596, 'Sooc'),
(15240, 596, 'Tagpolo'),
(15241, 596, 'Tres Reyes (Pob.)'),
(15242, 597, 'San Antonio'),
(15243, 597, 'San Francisco'),
(15244, 597, 'San Isidro (Pob.)'),
(15245, 597, 'San Jose (Pob.)'),
(15246, 597, 'Pagao'),
(15247, 597, 'San Roque (Pob.)'),
(15248, 597, 'Siembre'),
(15249, 597, 'Santo Domingo'),
(15250, 598, 'Antipolo'),
(15251, 598, 'Burocbusoc'),
(15252, 598, 'Cabatuan'),
(15253, 598, 'Cagmaslog'),
(15254, 598, 'Amlongan'),
(15255, 598, 'De La Fe'),
(15256, 598, 'Divino Rostro'),
(15257, 598, 'Ipil'),
(15258, 598, 'Gabas'),
(15259, 598, 'Ibayugan'),
(15260, 598, 'Igbac'),
(15261, 598, 'Iraya'),
(15262, 598, 'Labawon'),
(15263, 598, 'Delos Angeles'),
(15264, 598, 'Monte Calvario'),
(15265, 598, 'Namurabod'),
(15266, 598, 'Sagrada Familia'),
(15267, 598, 'Salvacion'),
(15268, 598, 'San Antonio'),
(15269, 598, 'San Buenaventura (Pob.)'),
(15270, 598, 'San Francisco'),
(15271, 598, 'San Isidro'),
(15272, 598, 'San Jose Baybayon'),
(15273, 598, 'San Jose Salay'),
(15274, 598, 'Macaangay'),
(15275, 598, 'San Pascual (Pob.)'),
(15276, 598, 'San Pedro (Pob.)'),
(15277, 598, 'San Rafael'),
(15278, 598, 'San Ramon'),
(15279, 598, 'San Roque (Pob.)'),
(15280, 598, 'San Vicente'),
(15281, 598, 'Santa Clara (Pob.)'),
(15282, 598, 'Santa Cruz'),
(15283, 598, 'Santa Elena (Pob.)'),
(15284, 598, 'Santa Isabel'),
(15285, 598, 'Santa Justina'),
(15286, 598, 'Lourdes'),
(15287, 598, 'Tambo'),
(15288, 599, 'Bagoladio'),
(15289, 599, 'Bagumbayan'),
(15290, 599, 'Balaogan'),
(15291, 599, 'Caorasan'),
(15292, 599, 'Casugad'),
(15293, 599, 'Causip'),
(15294, 599, 'Fabrica'),
(15295, 599, 'Inoyonan'),
(15296, 599, 'Itangon'),
(15297, 599, 'Kinalabasahan'),
(15298, 599, 'La Purisima'),
(15299, 599, 'La Victoria'),
(15300, 599, 'Lanipga'),
(15301, 599, 'Lubgan'),
(15302, 599, 'Ombao Heights'),
(15303, 599, 'Ombao Polpog'),
(15304, 599, 'Palsong'),
(15305, 599, 'Panoypoyan'),
(15306, 599, 'Pawili'),
(15307, 599, 'Sagrada'),
(15308, 599, 'Salvacion (Pob.)'),
(15309, 599, 'San Agustin'),
(15310, 599, 'San Francisco'),
(15311, 599, 'San Isidro'),
(15312, 599, 'San Jose'),
(15313, 599, 'San Miguel'),
(15314, 599, 'San Ramon'),
(15315, 599, 'San Roque (Pob.)'),
(15316, 599, 'San Roque Heights'),
(15317, 599, 'Santa Elena'),
(15318, 599, 'Santo Domingo'),
(15319, 599, 'Santo Niño'),
(15320, 599, 'Taisan'),
(15321, 600, 'Barcelonita'),
(15322, 600, 'Biong'),
(15323, 600, 'Camagong'),
(15324, 600, 'Castillo'),
(15325, 600, 'New Poblacion'),
(15326, 600, 'Pandan'),
(15327, 600, 'San Pedro'),
(15328, 600, 'Santa Cruz'),
(15329, 600, 'Santa Lutgarda (Pob.)'),
(15330, 601, 'Balatasan'),
(15331, 601, 'Balombon'),
(15332, 601, 'Balongay'),
(15333, 601, 'Belen'),
(15334, 601, 'Bigaas'),
(15335, 601, 'Binanuaanan Grande'),
(15336, 601, 'Binanuaanan Pequeño'),
(15337, 601, 'Binaliw'),
(15338, 601, 'Bonot-Santa Rosa'),
(15339, 601, 'Burabod'),
(15340, 601, 'Cabanbanan'),
(15341, 601, 'Cagsao'),
(15342, 601, 'Camuning'),
(15343, 601, 'Comaguingking'),
(15344, 601, 'Del Carmen (Pob.)'),
(15345, 601, 'Dominorog'),
(15346, 601, 'Fabrica'),
(15347, 601, 'Harobay'),
(15348, 601, 'La Purisima'),
(15349, 601, 'Lugsad'),
(15350, 601, 'Manguiring'),
(15351, 601, 'Pagatpat'),
(15352, 601, 'Paolbo'),
(15353, 601, 'Pinada'),
(15354, 601, 'Punta Tarawal'),
(15355, 601, 'Quinale'),
(15356, 601, 'Sabang'),
(15357, 601, 'Salvacion-Baybay'),
(15358, 601, 'San Antonio Poblacion'),
(15359, 601, 'San Antonio'),
(15360, 601, 'San Bernardino'),
(15361, 601, 'San Francisco (Pob.)'),
(15362, 601, 'San Isidro'),
(15363, 601, 'San Lucas'),
(15364, 601, 'San Miguel (Pob.)'),
(15365, 601, 'San Pablo (Pob.)'),
(15366, 601, 'San Roque'),
(15367, 601, 'San Vicente (Pob.)'),
(15368, 601, 'Santa Cruz Ratay'),
(15369, 601, 'Santa Cruz Poblacion'),
(15370, 601, 'Santa Isabel (Pob.)'),
(15371, 601, 'Santa Salud (Pob.)'),
(15372, 601, 'Santo Domingo'),
(15373, 601, 'Santo Niño'),
(15374, 601, 'Siba-o'),
(15375, 601, 'Sibobo'),
(15376, 601, 'Sogod'),
(15377, 601, 'Tomagodtod'),
(15378, 602, 'Dugcal'),
(15379, 602, 'Marupit'),
(15380, 602, 'San Francisco'),
(15381, 602, 'San Juan-San Ramon (Pob.)'),
(15382, 602, 'San Lucas (Pob.)'),
(15383, 602, 'San Marcos (Pob.)'),
(15384, 602, 'San Mateo (Pob.)'),
(15385, 602, 'San Jose-San Pablo (Pob.)'),
(15386, 602, 'San Roque'),
(15387, 602, 'Santo Domingo (Pob.)'),
(15388, 602, 'Santo Tomas (Pob.)'),
(15389, 602, 'Sua'),
(15390, 602, 'Tarosanan'),
(15391, 603, 'Baras (Pob.)'),
(15392, 603, 'Del Rosario'),
(15393, 603, 'Dinaga (Pob.)'),
(15394, 603, 'Fundado'),
(15395, 603, 'Haring'),
(15396, 603, 'Iquin'),
(15397, 603, 'Linaga'),
(15398, 603, 'Mangayawan'),
(15399, 603, 'Palo'),
(15400, 603, 'Pangpang (Pob.)'),
(15401, 603, 'Poro'),
(15402, 603, 'San Agustin'),
(15403, 603, 'San Francisco'),
(15404, 603, 'San Jose East'),
(15405, 603, 'San Jose West'),
(15406, 603, 'San Juan'),
(15407, 603, 'San Nicolas'),
(15408, 603, 'San Roque'),
(15409, 603, 'San Vicente'),
(15410, 603, 'Santa Cruz (Pob.)'),
(15411, 603, 'Santa Teresita'),
(15412, 603, 'Sua'),
(15413, 603, 'Talidtid'),
(15414, 603, 'Tibgao (Pob.)'),
(15415, 604, 'Agaas'),
(15416, 604, 'Antolon'),
(15417, 604, 'Bacgong'),
(15418, 604, 'Bahay'),
(15419, 604, 'Bikal'),
(15420, 604, 'Binanuahan (Pob.)'),
(15421, 604, 'Cabacongan'),
(15422, 604, 'Cadong'),
(15423, 604, 'Colongcogong'),
(15424, 604, 'Canatuan'),
(15425, 604, 'Caputatan'),
(15426, 604, 'Gogon'),
(15427, 604, 'Daraga'),
(15428, 604, 'Gata'),
(15429, 604, 'Gibgos'),
(15430, 604, 'Guijalo'),
(15431, 604, 'Hanopol'),
(15432, 604, 'Hanoy'),
(15433, 604, 'Haponan'),
(15434, 604, 'Ilawod'),
(15435, 604, 'Ili-Centro (Pob.)'),
(15436, 604, 'Lidong'),
(15437, 604, 'Lubas'),
(15438, 604, 'Malabog'),
(15439, 604, 'Maligaya'),
(15440, 604, 'Mampirao'),
(15441, 604, 'Mandiclum'),
(15442, 604, 'Maqueda'),
(15443, 604, 'Minalaba'),
(15444, 604, 'Oring'),
(15445, 604, 'Oroc-Osoc'),
(15446, 604, 'Pagolinan'),
(15447, 604, 'Pandanan'),
(15448, 604, 'Paniman'),
(15449, 604, 'Patag-Belen'),
(15450, 604, 'Pili-Centro'),
(15451, 604, 'Pili-Tabiguian'),
(15452, 604, 'Poloan'),
(15453, 604, 'Salvacion'),
(15454, 604, 'San Roque'),
(15455, 604, 'San Vicente'),
(15456, 604, 'Santa Cruz'),
(15457, 604, 'Solnopan'),
(15458, 604, 'Tabgon'),
(15459, 604, 'Tabiguian'),
(15460, 604, 'Tabog'),
(15461, 604, 'Tawog (Pob.)'),
(15462, 604, 'Toboan'),
(15463, 604, 'Terogo'),
(15464, 605, 'Bagong Silang'),
(15465, 605, 'Bucal'),
(15466, 605, 'Cabasag'),
(15467, 605, 'Comadaycaday'),
(15468, 605, 'Domagondong'),
(15469, 605, 'Kinalangan'),
(15470, 605, 'Comadogcadog'),
(15471, 605, 'Mabini'),
(15472, 605, 'Magais I'),
(15473, 605, 'Magais II'),
(15474, 605, 'Mansalaya'),
(15475, 605, 'Nagkalit'),
(15476, 605, 'Palaspas'),
(15477, 605, 'Pamplona'),
(15478, 605, 'Pasay'),
(15479, 605, 'Pinagdapian'),
(15480, 605, 'Pinugusan'),
(15481, 605, 'Zone I Fatima (Pob.)'),
(15482, 605, 'Zone II San Antonio (Pob.)'),
(15483, 605, 'Poblacion Zone III'),
(15484, 605, 'Sabang'),
(15485, 605, 'Salvacion'),
(15486, 605, 'San Juan'),
(15487, 605, 'San Pablo'),
(15488, 605, 'Santa Rita I'),
(15489, 605, 'Santa Rita II'),
(15490, 605, 'Sinagawsawan'),
(15491, 605, 'Sinuknipan I'),
(15492, 605, 'Sinuknipan II'),
(15493, 605, 'Sugsugin'),
(15494, 605, 'Tabion'),
(15495, 605, 'Tomagoktok'),
(15496, 606, 'Cagbunga'),
(15497, 606, 'Dahilig'),
(15498, 606, 'Loob'),
(15499, 606, 'Malbong'),
(15500, 606, 'Namuat'),
(15501, 606, 'Sampaloc'),
(15502, 606, 'District I (Pob.)'),
(15503, 606, 'District II (Pob.)'),
(15504, 607, 'Ason'),
(15505, 607, 'Bahi'),
(15506, 607, 'Binagasbasan'),
(15507, 607, 'Burabod'),
(15508, 607, 'Cagamutan'),
(15509, 607, 'Cagnipa'),
(15510, 607, 'Canlong'),
(15511, 607, 'Dangla'),
(15512, 607, 'Del Pilar'),
(15513, 607, 'Denrica'),
(15514, 607, 'Harrison'),
(15515, 607, 'Mansangat'),
(15516, 607, 'Pambuhan'),
(15517, 607, 'Barangay I (Pob.)'),
(15518, 607, 'Barangay II (Pob.)'),
(15519, 607, 'Barangay III (Pob.)'),
(15520, 607, 'Barangay IV (Pob.)'),
(15521, 607, 'Sagrada'),
(15522, 607, 'Salvacion'),
(15523, 607, 'San Vicente'),
(15524, 607, 'Sumaoy'),
(15525, 607, 'Tamiawon'),
(15526, 607, 'Toytoy'),
(15527, 608, 'Abucayan'),
(15528, 608, 'Bagumbayan Grande (Pob.)'),
(15529, 608, 'Bagumbayan Pequeño (Pob.)'),
(15530, 608, 'Balaynan'),
(15531, 608, 'Belen (Pob.)'),
(15532, 608, 'Buyo'),
(15533, 608, 'Cagaycay'),
(15534, 608, 'Catagbacan'),
(15535, 608, 'Digdigon'),
(15536, 608, 'Gimaga'),
(15537, 608, 'Halawig-Gogon'),
(15538, 608, 'Hiwacloy'),
(15539, 608, 'La Purisima (Pob.)'),
(15540, 608, 'Lamon'),
(15541, 608, 'Matacla'),
(15542, 608, 'Maymatan'),
(15543, 608, 'Maysalay'),
(15544, 608, 'Napawon'),
(15545, 608, 'Panday (Pob.)'),
(15546, 608, 'Payatan'),
(15547, 608, 'Pinaglabanan'),
(15548, 608, 'Salog'),
(15549, 608, 'San Benito (Pob.)'),
(15550, 608, 'San Isidro West'),
(15551, 608, 'San Isidro (Pob.)'),
(15552, 608, 'San Jose (Pob.)'),
(15553, 608, 'San Juan Bautista (Pob.)'),
(15554, 608, 'San Juan Evangelista (Pob.)'),
(15555, 608, 'San Pedro'),
(15556, 608, 'Scout Fuentebella'),
(15557, 608, 'Tabgon'),
(15558, 608, 'Tagongtong'),
(15559, 608, 'Tamban'),
(15560, 608, 'Taytay'),
(15561, 609, 'Antipolo'),
(15562, 609, 'Cristo Rey'),
(15563, 609, 'Del Rosario'),
(15564, 609, 'Francia'),
(15565, 609, 'La Anunciacion'),
(15566, 609, 'La Medalla'),
(15567, 609, 'La Purisima'),
(15568, 609, 'La Trinidad'),
(15569, 609, 'Niño Jesus'),
(15570, 609, 'Perpetual Help'),
(15571, 609, 'Sagrada'),
(15572, 609, 'Salvacion'),
(15573, 609, 'San Agustin'),
(15574, 609, 'San Andres'),
(15575, 609, 'San Antonio'),
(15576, 609, 'San Francisco (Pob.)'),
(15577, 609, 'San Isidro'),
(15578, 609, 'San Jose'),
(15579, 609, 'San Juan'),
(15580, 609, 'San Miguel'),
(15581, 609, 'San Nicolas'),
(15582, 609, 'San Pedro'),
(15583, 609, 'San Rafael'),
(15584, 609, 'San Ramon'),
(15585, 609, 'San Roque (Pob.)'),
(15586, 609, 'San Vicente Norte'),
(15587, 609, 'San Vicente Sur'),
(15588, 609, 'Santa Cruz Norte'),
(15589, 609, 'Santa Cruz Sur'),
(15590, 609, 'Santa Elena'),
(15591, 609, 'Santa Isabel'),
(15592, 609, 'Santa Maria'),
(15593, 609, 'Santa Teresita'),
(15594, 609, 'Santiago'),
(15595, 609, 'Santo Domingo'),
(15596, 609, 'Santo Niño'),
(15597, 610, 'Agosais'),
(15598, 610, 'Agpo-Camagong-Tabog'),
(15599, 610, 'Amoguis'),
(15600, 610, 'Bocogan'),
(15601, 610, 'Balaton'),
(15602, 610, 'Binanuahan'),
(15603, 610, 'Burabod'),
(15604, 610, 'Cabotonan'),
(15605, 610, 'Dahat'),
(15606, 610, 'Del Carmen'),
(15607, 610, 'Ginorangan'),
(15608, 610, 'Gimagtocon'),
(15609, 610, 'Gubat'),
(15610, 610, 'Guibahoy'),
(15611, 610, 'Himanag'),
(15612, 610, 'Kinahologan'),
(15613, 610, 'Loho'),
(15614, 610, 'Manamoc'),
(15615, 610, 'Mangogon'),
(15616, 610, 'Mapid'),
(15617, 610, 'Olas'),
(15618, 610, 'Omalo'),
(15619, 610, 'Panagan'),
(15620, 610, 'Panicuan'),
(15621, 610, 'Pinamihagan'),
(15622, 610, 'San Francisco (Pob.)'),
(15623, 610, 'San Isidro'),
(15624, 610, 'San Isidro Sur (Pob.)'),
(15625, 610, 'San Isidro Norte (Pob.)'),
(15626, 610, 'San Rafael'),
(15627, 610, 'San Ramon'),
(15628, 610, 'San Roque'),
(15629, 610, 'San Sebastian'),
(15630, 610, 'San Vicente (Pob.)'),
(15631, 610, 'Santa Cruz (Pob.)'),
(15632, 610, 'Santa Maria (Pob.)'),
(15633, 610, 'Saripongpong (Pob.)'),
(15634, 610, 'Sipaco'),
(15635, 611, 'Aslong'),
(15636, 611, 'Awayan'),
(15637, 611, 'Bagacay'),
(15638, 611, 'Bagadion'),
(15639, 611, 'Bagamelon'),
(15640, 611, 'Bagumbayan'),
(15641, 611, 'Bahao'),
(15642, 611, 'Bahay'),
(15643, 611, 'Beguito Nuevo'),
(15644, 611, 'Beguito Viejo'),
(15645, 611, 'Begajo Norte'),
(15646, 611, 'Begajo Sur'),
(15647, 611, 'Bikal'),
(15648, 611, 'Busak'),
(15649, 611, 'Caima'),
(15650, 611, 'Calabnigan'),
(15651, 611, 'Camambugan'),
(15652, 611, 'Cambalidio'),
(15653, 611, 'Candami'),
(15654, 611, 'Candato'),
(15655, 611, 'Cawayan'),
(15656, 611, 'Concepcion'),
(15657, 611, 'Cuyapi'),
(15658, 611, 'Danawan'),
(15659, 611, 'Duang Niog'),
(15660, 611, 'Handong'),
(15661, 611, 'Ibid'),
(15662, 611, 'Inalahan'),
(15663, 611, 'Labao'),
(15664, 611, 'Libod I'),
(15665, 611, 'Libod II'),
(15666, 611, 'Loba-loba'),
(15667, 611, 'Mabini'),
(15668, 611, 'Malansad Nuevo'),
(15669, 611, 'Malansad Viejo'),
(15670, 611, 'Malbogon'),
(15671, 611, 'Malinao'),
(15672, 611, 'Mambalite'),
(15673, 611, 'Mambayawas'),
(15674, 611, 'Mambulo Nuevo'),
(15675, 611, 'Mambulo Viejo'),
(15676, 611, 'Mancawayan'),
(15677, 611, 'Mandacanan'),
(15678, 611, 'Mantalisay'),
(15679, 611, 'Padlos'),
(15680, 611, 'Pag-Oring Nuevo'),
(15681, 611, 'Pag-Oring Viejo'),
(15682, 611, 'Palangon'),
(15683, 611, 'Palong'),
(15684, 611, 'Patag'),
(15685, 611, 'Planza'),
(15686, 611, 'Poblacion'),
(15687, 611, 'Potot'),
(15688, 611, 'Puro-Batia'),
(15689, 611, 'Rongos'),
(15690, 611, 'Salvacion'),
(15691, 611, 'San Isidro'),
(15692, 611, 'San Juan'),
(15693, 611, 'San Pablo'),
(15694, 611, 'San Vicente'),
(15695, 611, 'Sibujo'),
(15696, 611, 'Sigamot'),
(15697, 611, 'Station-Church Site'),
(15698, 611, 'Taban-Fundado'),
(15699, 611, 'Tampuhan'),
(15700, 611, 'Tanag'),
(15701, 611, 'Tarum'),
(15702, 611, 'Tinalmud Nuevo'),
(15703, 611, 'Tinalmud Viejo'),
(15704, 611, 'Tinangkihan'),
(15705, 611, 'Udoc'),
(15706, 611, 'Umalo'),
(15707, 611, 'Uson'),
(15708, 611, 'Villasocorro'),
(15709, 611, 'Villadima'),
(15710, 612, 'Alleomar'),
(15711, 612, 'Bagangan Sr.'),
(15712, 612, 'Bagong Sikat'),
(15713, 612, 'Bel-Cruz'),
(15714, 612, 'Bangon'),
(15715, 612, 'Barrera Jr.'),
(15716, 612, 'Barrera Sr.'),
(15717, 612, 'Belwang'),
(15718, 612, 'Buenasuerte'),
(15719, 612, 'Bulawan Jr.'),
(15720, 612, 'Bulawan Sr.'),
(15721, 612, 'Cabutagan'),
(15722, 612, 'Kaibigan'),
(15723, 612, 'Casay'),
(15724, 612, 'Colacling'),
(15725, 612, 'Cristo Rey'),
(15726, 612, 'Del Carmen'),
(15727, 612, 'Haguimit'),
(15728, 612, 'Haluban'),
(15729, 612, 'La Purisima'),
(15730, 612, 'Lourdes'),
(15731, 612, 'Mangcawayan'),
(15732, 612, 'Napolidan'),
(15733, 612, 'Poblacion'),
(15734, 612, 'Polantuna'),
(15735, 612, 'Sagrada'),
(15736, 612, 'Salvacion'),
(15737, 612, 'San Isidro'),
(15738, 612, 'San Jose'),
(15739, 612, 'San Pedro'),
(15740, 612, 'San Rafael Norte'),
(15741, 612, 'San Rafael Sur'),
(15742, 612, 'San Ramon'),
(15743, 612, 'San Vicente'),
(15744, 612, 'Sooc'),
(15745, 612, 'Tanawan'),
(15746, 612, 'Tible'),
(15747, 612, 'Tapi'),
(15748, 613, 'Barobaybay'),
(15749, 613, 'Bell (Pob.)'),
(15750, 613, 'Carangcang'),
(15751, 613, 'Carigsa'),
(15752, 613, 'Casuray'),
(15753, 613, 'Monserrat (Pob.)'),
(15754, 613, 'Ponong'),
(15755, 613, 'San Francisco (Pob.)'),
(15756, 613, 'San Isidro (Pob.)'),
(15757, 613, 'San Juan (Pob.)'),
(15758, 613, 'San Miguel'),
(15759, 613, 'San Pantaleon (Pob.)'),
(15760, 613, 'Santa Lucia (Pob.)'),
(15761, 613, 'Santa Rosa'),
(15762, 613, 'Santo Tomas (Pob.)'),
(15763, 614, 'Alimbuyog'),
(15764, 614, 'Amparado (Pob.)'),
(15765, 614, 'Balagbag'),
(15766, 614, 'Borongborongan'),
(15767, 614, 'Cabugao'),
(15768, 614, 'Capucnasan'),
(15769, 614, 'Dalipay'),
(15770, 614, 'Del Rosario (Pob.)'),
(15771, 614, 'Flordeliz'),
(15772, 614, 'Lipot'),
(15773, 614, 'Mayaopayawan'),
(15774, 614, 'Maycatmon'),
(15775, 614, 'Maydaso'),
(15776, 614, 'San Antonio'),
(15777, 614, 'San Jose (Pob.)'),
(15778, 614, 'San Miguel (Pob.)'),
(15779, 614, 'San Roque (Pob.)'),
(15780, 614, 'San Vicente (Pob.)'),
(15781, 614, 'Santo Domingo (Pob.)'),
(15782, 614, 'Tarusanan'),
(15783, 615, 'Antipolo'),
(15784, 615, 'Bagolatao'),
(15785, 615, 'Bagongbong'),
(15786, 615, 'Baliuag Nuevo'),
(15787, 615, 'Baliuag Viejo'),
(15788, 615, 'Catanusan'),
(15789, 615, 'Del Carmen-Del Rosario (Pob.)'),
(15790, 615, 'Del Socorro'),
(15791, 615, 'Hamoraon'),
(15792, 615, 'Hobo'),
(15793, 615, 'Irayang Solong'),
(15794, 615, 'Magadap'),
(15795, 615, 'Malitbog'),
(15796, 615, 'Manapao'),
(15797, 615, 'Mataoroc'),
(15798, 615, 'Sagrada'),
(15799, 615, 'Salingogon'),
(15800, 615, 'San Antonio'),
(15801, 615, 'San Felipe-Santiago (Pob.)'),
(15802, 615, 'San Francisco (Pob.)'),
(15803, 615, 'San Jose'),
(15804, 615, 'San Juan-San Lorenzo (Pob.)'),
(15805, 615, 'Taban'),
(15806, 615, 'Tariric'),
(15807, 615, 'Timbang'),
(15808, 616, 'Angustia'),
(15809, 616, 'Antipolo Old'),
(15810, 616, 'Antipolo Young'),
(15811, 616, 'Aro-aldao'),
(15812, 616, 'Bustrac'),
(15813, 616, 'Inapatan'),
(15814, 616, 'Dolorosa'),
(15815, 616, 'Duran'),
(15816, 616, 'La Purisima'),
(15817, 616, 'Lourdes Old'),
(15818, 616, 'Lourdes Young'),
(15819, 616, 'La Opinion'),
(15820, 616, 'Paloyon Proper'),
(15821, 616, 'Salvacion Que Gatos'),
(15822, 616, 'San Antonio (Pob.)'),
(15823, 616, 'San Antonio Ogbon'),
(15824, 616, 'San Esteban (Pob.)'),
(15825, 616, 'San Francisco (Pob.)'),
(15826, 616, 'San Isidro (Pob.)'),
(15827, 616, 'San Isidro Inapatan'),
(15828, 616, 'Malawag'),
(15829, 616, 'San Jose'),
(15830, 616, 'San Juan (Pob.)'),
(15831, 616, 'San Luis (Pob.)'),
(15832, 616, 'San Miguel (Pob.)'),
(15833, 616, 'San Nicolas (Pob.)'),
(15834, 616, 'San Roque (Pob.)'),
(15835, 616, 'San Roque Madawon'),
(15836, 616, 'San Roque Sagumay'),
(15837, 616, 'San Vicente Gorong-Gorong'),
(15838, 616, 'San Vicente Ogbon'),
(15839, 616, 'Santa Barbara'),
(15840, 616, 'Santa Cruz'),
(15841, 616, 'Santa Elena Baras'),
(15842, 616, 'Santa Lucia Baras'),
(15843, 616, 'Santiago Old'),
(15844, 616, 'Santiago Young'),
(15845, 616, 'Santo Domingo'),
(15846, 616, 'Tandaay'),
(15847, 616, 'Topas Proper'),
(15848, 616, 'Topas Sogod'),
(15849, 616, 'Paloyon Oriental'),
(15850, 617, 'Abella'),
(15851, 617, 'Bagumbayan Norte'),
(15852, 617, 'Bagumbayan Sur'),
(15853, 617, 'Balatas'),
(15854, 617, 'Calauag'),
(15855, 617, 'Cararayan'),
(15856, 617, 'Carolina'),
(15857, 617, 'Concepcion Grande'),
(15858, 617, 'Concepcion Pequeña'),
(15859, 617, 'Dayangdang'),
(15860, 617, 'Del Rosario'),
(15861, 617, 'Dinaga'),
(15862, 617, 'Igualdad Interior'),
(15863, 617, 'Lerma'),
(15864, 617, 'Liboton'),
(15865, 617, 'Mabolo'),
(15866, 617, 'Pacol'),
(15867, 617, 'Panicuason'),
(15868, 617, 'Peñafrancia'),
(15869, 617, 'Sabang'),
(15870, 617, 'San Felipe'),
(15871, 617, 'San Francisco (Pob.)'),
(15872, 617, 'San Isidro'),
(15873, 617, 'Santa Cruz'),
(15874, 617, 'Tabuco'),
(15875, 617, 'Tinago'),
(15876, 617, 'Triangulo'),
(15877, 618, 'Ayugan'),
(15878, 618, 'Cabariwan'),
(15879, 618, 'Cagmanaba'),
(15880, 618, 'Del Rosario'),
(15881, 618, 'Gatbo'),
(15882, 618, 'Guinaban'),
(15883, 618, 'Hanawan'),
(15884, 618, 'Hibago'),
(15885, 618, 'La Purisima Nuevo'),
(15886, 618, 'May-Ogob'),
(15887, 618, 'New Moriones'),
(15888, 618, 'Old Moriones'),
(15889, 618, 'Pinit'),
(15890, 618, 'Poblacion Central'),
(15891, 618, 'Poblacion East'),
(15892, 618, 'Poblacion West'),
(15893, 618, 'Salvacion'),
(15894, 618, 'San Antonio'),
(15895, 618, 'San Francisco'),
(15896, 618, 'San Jose Oras'),
(15897, 618, 'San Roque Commonal'),
(15898, 618, 'San Vicente'),
(15899, 618, 'Santa Cruz'),
(15900, 618, 'Santo Niño'),
(15901, 618, 'Villaflorida'),
(15902, 619, 'Batang'),
(15903, 619, 'Burabod'),
(15904, 619, 'Cagbibi'),
(15905, 619, 'Cagbunga'),
(15906, 619, 'Calawat'),
(15907, 619, 'Del Rosario'),
(15908, 619, 'Patong'),
(15909, 619, 'Poblacion'),
(15910, 619, 'Salvacion'),
(15911, 619, 'San Gabriel'),
(15912, 619, 'San Isidro'),
(15913, 619, 'San Rafael'),
(15914, 619, 'San Ramon'),
(15915, 619, 'San Vicente'),
(15916, 619, 'Veneracion'),
(15917, 619, 'Tambo'),
(15918, 619, 'Tampadong'),
(15919, 620, 'Antipolo'),
(15920, 620, 'Bagong Silang'),
(15921, 620, 'Bahay'),
(15922, 620, 'Balogo'),
(15923, 620, 'Caranan');
INSERT INTO `table_barangay` (`barangay_id`, `municipality_id`, `barangay_name`) VALUES
(15924, 620, 'Cuco'),
(15925, 620, 'Dalupaon'),
(15926, 620, 'Macad'),
(15927, 620, 'Hubo'),
(15928, 620, 'Itulan'),
(15929, 620, 'Odicon'),
(15930, 620, 'Quitang'),
(15931, 620, 'Salvacion'),
(15932, 620, 'San Antonio'),
(15933, 620, 'San Cirilo (Pob.)'),
(15934, 620, 'Santa Rosa Del Norte (Pob.)'),
(15935, 620, 'Santa Rosa Del Sur (Pob.)'),
(15936, 620, 'Tilnac'),
(15937, 620, 'Tinalmud'),
(15938, 621, 'Anayan'),
(15939, 621, 'Bagong Sirang'),
(15940, 621, 'Binanwaanan'),
(15941, 621, 'Binobong'),
(15942, 621, 'Cadlan'),
(15943, 621, 'Caroyroyan'),
(15944, 621, 'Curry'),
(15945, 621, 'Del Rosario'),
(15946, 621, 'Himaao'),
(15947, 621, 'La Purisima'),
(15948, 621, 'New San Roque'),
(15949, 621, 'Old San Roque (Pob.)'),
(15950, 621, 'Palestina'),
(15951, 621, 'Pawili'),
(15952, 621, 'Sagurong'),
(15953, 621, 'Sagrada'),
(15954, 621, 'San Agustin'),
(15955, 621, 'San Antonio (Pob.)'),
(15956, 621, 'San Isidro (Pob.)'),
(15957, 621, 'San Jose'),
(15958, 621, 'San Juan (Pob.)'),
(15959, 621, 'San Vicente (Pob.)'),
(15960, 621, 'Santiago (Pob.)'),
(15961, 621, 'Santo Niño'),
(15962, 621, 'Tagbong'),
(15963, 621, 'Tinangis'),
(15964, 622, 'Ayugao'),
(15965, 622, 'Bagong Sirang'),
(15966, 622, 'Baliguian'),
(15967, 622, 'Bantugan'),
(15968, 622, 'Bicalen'),
(15969, 622, 'Bitaogan'),
(15970, 622, 'Buenavista'),
(15971, 622, 'Bulalacao'),
(15972, 622, 'Cagnipa'),
(15973, 622, 'Lagha'),
(15974, 622, 'Lidong'),
(15975, 622, 'Liwacsa'),
(15976, 622, 'Maangas'),
(15977, 622, 'Pagsangahan'),
(15978, 622, 'Patrocinio'),
(15979, 622, 'Pili'),
(15980, 622, 'Santa Maria (Pob.)'),
(15981, 622, 'Tanawan'),
(15982, 623, 'Agao-ao'),
(15983, 623, 'Agrupacion'),
(15984, 623, 'Amomokpok'),
(15985, 623, 'Apad'),
(15986, 623, 'Apale'),
(15987, 623, 'Banga Caves'),
(15988, 623, 'Baya'),
(15989, 623, 'Binahan Proper'),
(15990, 623, 'Binahan Upper'),
(15991, 623, 'Buenasuerte'),
(15992, 623, 'Cabadisan'),
(15993, 623, 'Cabinitan'),
(15994, 623, 'Cabugao'),
(15995, 623, 'Caditaan'),
(15996, 623, 'Cale'),
(15997, 623, 'Godofredo Reyes Sr.'),
(15998, 623, 'Catabangan Proper'),
(15999, 623, 'Inandawa'),
(16000, 623, 'Laguio'),
(16001, 623, 'Lanipga-Cawayan'),
(16002, 623, 'Liboro'),
(16003, 623, 'Lohong'),
(16004, 623, 'Lower Omon'),
(16005, 623, 'Lower Santa Cruz'),
(16006, 623, 'Panaytayan'),
(16007, 623, 'Panaytayan Nuevo'),
(16008, 623, 'Patalunan'),
(16009, 623, 'Poblacion Ilaod'),
(16010, 623, 'Poblacion Iraya'),
(16011, 623, 'Port Junction Norte'),
(16012, 623, 'Port Junction Sur'),
(16013, 623, 'Salvacion'),
(16014, 623, 'Samay'),
(16015, 623, 'San Rafael'),
(16016, 623, 'F. Simeon'),
(16017, 623, 'Tagbac'),
(16018, 623, 'Upper Omon'),
(16019, 623, 'Upper Santa Cruz'),
(16020, 624, 'Aniog'),
(16021, 624, 'Atulayan'),
(16022, 624, 'Bongalon'),
(16023, 624, 'Buracan'),
(16024, 624, 'Catalotoan'),
(16025, 624, 'Del Carmen (Pob.)'),
(16026, 624, 'Kilantaao'),
(16027, 624, 'Kilomaon'),
(16028, 624, 'Mabca'),
(16029, 624, 'Minadongjol'),
(16030, 624, 'Nato'),
(16031, 624, 'Patitinan'),
(16032, 624, 'San Antonio (Pob.)'),
(16033, 624, 'San Isidro (Pob.)'),
(16034, 624, 'San Roque (Pob.)'),
(16035, 624, 'Santo Niño'),
(16036, 624, 'Sibaguan'),
(16037, 624, 'Tinorongan'),
(16038, 624, 'Turague'),
(16039, 625, 'Alianza'),
(16040, 625, 'Beberon'),
(16041, 625, 'Bical'),
(16042, 625, 'Bocal'),
(16043, 625, 'Bonifacio (Pob.)'),
(16044, 625, 'Buenavista (Pob.)'),
(16045, 625, 'Calascagas'),
(16046, 625, 'Cotmo'),
(16047, 625, 'Daculang Tubig'),
(16048, 625, 'Del Pilar (Pob.)'),
(16049, 625, 'Gñaran'),
(16050, 625, 'Grijalvo'),
(16051, 625, 'Lupi'),
(16052, 625, 'Maragñi'),
(16053, 625, 'Pamukid'),
(16054, 625, 'Pinamasagan'),
(16055, 625, 'Pipian'),
(16056, 625, 'Planza'),
(16057, 625, 'Rizal (Pob.)'),
(16058, 625, 'San Joaquin'),
(16059, 625, 'Santa Cruz'),
(16060, 625, 'Tagpocol'),
(16061, 626, 'Adiangao'),
(16062, 626, 'Bagacay'),
(16063, 626, 'Bahay'),
(16064, 626, 'Boclod'),
(16065, 626, 'Calalahan'),
(16066, 626, 'Calawit'),
(16067, 626, 'Camagong'),
(16068, 626, 'Catalotoan'),
(16069, 626, 'Danlog'),
(16070, 626, 'Del Carmen (Pob.)'),
(16071, 626, 'Dolo'),
(16072, 626, 'Kinalansan'),
(16073, 626, 'Mampirao'),
(16074, 626, 'Manzana'),
(16075, 626, 'Minoro'),
(16076, 626, 'Palale'),
(16077, 626, 'Ponglon'),
(16078, 626, 'Pugay'),
(16079, 626, 'Sabang'),
(16080, 626, 'Salogon'),
(16081, 626, 'San Antonio (Pob.)'),
(16082, 626, 'San Juan (Pob.)'),
(16083, 626, 'San Vicente (Pob.)'),
(16084, 626, 'Santa Cruz (Pob.)'),
(16085, 626, 'Soledad (Pob.)'),
(16086, 626, 'Tagas'),
(16087, 626, 'Tambangan'),
(16088, 626, 'Telegrafo'),
(16089, 626, 'Tominawog'),
(16090, 627, 'Aldezar'),
(16091, 627, 'Alteza'),
(16092, 627, 'Anib'),
(16093, 627, 'Awayan'),
(16094, 627, 'Azucena'),
(16095, 627, 'Bagong Sirang'),
(16096, 627, 'Binahian'),
(16097, 627, 'Bolo Sur'),
(16098, 627, 'Bolo Norte'),
(16099, 627, 'Bulan'),
(16100, 627, 'Bulawan'),
(16101, 627, 'Cabuyao'),
(16102, 627, 'Caima'),
(16103, 627, 'Calagbangan'),
(16104, 627, 'Calampinay'),
(16105, 627, 'Carayrayan'),
(16106, 627, 'Cotmo'),
(16107, 627, 'Gabi'),
(16108, 627, 'Gaongan'),
(16109, 627, 'Impig'),
(16110, 627, 'Lipilip'),
(16111, 627, 'Lubigan Jr.'),
(16112, 627, 'Lubigan Sr.'),
(16113, 627, 'Malaguico'),
(16114, 627, 'Malubago'),
(16115, 627, 'Manangle'),
(16116, 627, 'Mangga'),
(16117, 627, 'Mangapo'),
(16118, 627, 'Manlubang'),
(16119, 627, 'Mantila'),
(16120, 627, 'North Centro (Pob.)'),
(16121, 627, 'North Villazar'),
(16122, 627, 'Sagrada Familia'),
(16123, 627, 'Salanda'),
(16124, 627, 'Salvacion'),
(16125, 627, 'San Isidro'),
(16126, 627, 'San Vicente'),
(16127, 627, 'Serranzana'),
(16128, 627, 'South Centro (Pob.)'),
(16129, 627, 'South Villazar'),
(16130, 627, 'Taisan'),
(16131, 627, 'Tara'),
(16132, 627, 'Tible'),
(16133, 627, 'Tula-tula'),
(16134, 627, 'Vigaan'),
(16135, 627, 'Yabo'),
(16136, 628, 'Bagong Sirang'),
(16137, 628, 'Bahao'),
(16138, 628, 'Boboan'),
(16139, 628, 'Butawanan'),
(16140, 628, 'Cabugao'),
(16141, 628, 'Fundado'),
(16142, 628, 'Homestead'),
(16143, 628, 'La Purisima'),
(16144, 628, 'Mabuhay'),
(16145, 628, 'Malaconini'),
(16146, 628, 'Nalayahan'),
(16147, 628, 'Matandang Siruma'),
(16148, 628, 'Pinitan'),
(16149, 628, 'Poblacion'),
(16150, 628, 'Pamintan-Bantilan'),
(16151, 628, 'Salvacion'),
(16152, 628, 'San Andres'),
(16153, 628, 'San Ramon'),
(16154, 628, 'Sulpa'),
(16155, 628, 'Tandoc'),
(16156, 628, 'Tongo-Bantigue'),
(16157, 628, 'Vito'),
(16158, 629, 'Abo'),
(16159, 629, 'Cabalinadan'),
(16160, 629, 'Caraycayon'),
(16161, 629, 'Casuna'),
(16162, 629, 'Consocep'),
(16163, 629, 'Coyaoyao'),
(16164, 629, 'Gaao'),
(16165, 629, 'Gingaroy'),
(16166, 629, 'Gubat'),
(16167, 629, 'Huyonhuyon'),
(16168, 629, 'Libod'),
(16169, 629, 'Mabalodbalod'),
(16170, 629, 'May-Anao'),
(16171, 629, 'Panagan'),
(16172, 629, 'Poblacion'),
(16173, 629, 'Salvacion'),
(16174, 629, 'San Antonio'),
(16175, 629, 'San Francisco'),
(16176, 629, 'San Miguel'),
(16177, 629, 'San Rafael'),
(16178, 629, 'Talojongon'),
(16179, 629, 'Tinawagan'),
(16180, 629, 'Vinagre'),
(16181, 630, 'Agay-Ayan'),
(16182, 630, 'Antipolo'),
(16183, 630, 'Bagacay'),
(16184, 630, 'Banga'),
(16185, 630, 'Bolaobalite'),
(16186, 630, 'Bani'),
(16187, 630, 'Bataan'),
(16188, 630, 'Binalay'),
(16189, 630, 'Buenavista'),
(16190, 630, 'Buyo'),
(16191, 630, 'Cagliliog'),
(16192, 630, 'Caloco'),
(16193, 630, 'Camagong'),
(16194, 630, 'Canayonan'),
(16195, 630, 'Cawaynan'),
(16196, 630, 'Daligan'),
(16197, 630, 'Filarca (Pob.)'),
(16198, 630, 'La Purisima (Pob.)'),
(16199, 630, 'Lupi'),
(16200, 630, 'Magsaysay'),
(16201, 630, 'Magtang'),
(16202, 630, 'Mananao'),
(16203, 630, 'La Medalla'),
(16204, 630, 'New Caaluan'),
(16205, 630, 'Olag Grande'),
(16206, 630, 'Olag Pequeño'),
(16207, 630, 'Old Caaluan'),
(16208, 630, 'Pag-Asa'),
(16209, 630, 'Pantat'),
(16210, 630, 'Sagrada'),
(16211, 630, 'Salvacion'),
(16212, 630, 'San Antonio'),
(16213, 630, 'San Isidro (Pob.)'),
(16214, 630, 'San Jose'),
(16215, 630, 'San Pascual (Pob.)'),
(16216, 630, 'San Ramon'),
(16217, 630, 'San Roque'),
(16218, 630, 'San Vicente'),
(16219, 630, 'Santa Cruz (Pob.)'),
(16220, 630, 'Sogod'),
(16221, 630, 'Tambang'),
(16222, 630, 'Tierra Nevada'),
(16223, 630, 'Union'),
(16224, 630, 'Salvacion Poblacion'),
(16225, 631, 'Antipolo'),
(16226, 631, 'Bacak'),
(16227, 631, 'Bagatabao'),
(16228, 631, 'Bugao'),
(16229, 631, 'Cahan'),
(16230, 631, 'Hinipaan'),
(16231, 631, 'Magsaysay'),
(16232, 631, 'Poblacion'),
(16233, 631, 'Quigaray'),
(16234, 631, 'Quezon'),
(16235, 631, 'Sagrada'),
(16236, 631, 'Salvacion'),
(16237, 631, 'San Isidro'),
(16238, 631, 'San Rafael'),
(16239, 631, 'San Vicente'),
(16240, 631, 'Santa Mesa'),
(16241, 631, 'Santa Teresa'),
(16242, 631, 'Suchan'),
(16243, 632, 'Abihao'),
(16244, 632, 'Agban'),
(16245, 632, 'Bagong Sirang'),
(16246, 632, 'Benticayan'),
(16247, 632, 'Buenavista'),
(16248, 632, 'Caragumihan'),
(16249, 632, 'Batolinao'),
(16250, 632, 'Danao'),
(16251, 632, 'Sagrada'),
(16252, 632, 'Ginitligan'),
(16253, 632, 'Guinsaanan'),
(16254, 632, 'J. M. Alberto'),
(16255, 632, 'Macutal'),
(16256, 632, 'Moning'),
(16257, 632, 'Nagbarorong'),
(16258, 632, 'Osmeña'),
(16259, 632, 'P. Teston'),
(16260, 632, 'Paniquihan'),
(16261, 632, 'Eastern Poblacion'),
(16262, 632, 'Puraran'),
(16263, 632, 'Putsan'),
(16264, 632, 'Quezon'),
(16265, 632, 'Rizal'),
(16266, 632, 'Salvacion'),
(16267, 632, 'San Lorenzo'),
(16268, 632, 'San Miguel'),
(16269, 632, 'Santa Maria'),
(16270, 632, 'Tilod'),
(16271, 632, 'Western Poblacion'),
(16272, 633, 'Aroyao Pequeño'),
(16273, 633, 'Bagumbayan'),
(16274, 633, 'Banawang'),
(16275, 633, 'Batalay'),
(16276, 633, 'Binanuahan'),
(16277, 633, 'Bote'),
(16278, 633, 'Buenavista'),
(16279, 633, 'Cabugao'),
(16280, 633, 'Cagraray'),
(16281, 633, 'Carorian'),
(16282, 633, 'Guinobatan'),
(16283, 633, 'Libjo'),
(16284, 633, 'Marinawa'),
(16285, 633, 'Mintay'),
(16286, 633, 'Oguis'),
(16287, 633, 'Pananaogan'),
(16288, 633, 'Libod Poblacion'),
(16289, 633, 'San Andres'),
(16290, 633, 'San Pedro'),
(16291, 633, 'San Roque'),
(16292, 633, 'Santa Isabel'),
(16293, 633, 'Sibacungan'),
(16294, 633, 'Sipi'),
(16295, 633, 'Talisay'),
(16296, 633, 'Tamburan'),
(16297, 633, 'Tilis'),
(16298, 633, 'Ilawod (Pob.)'),
(16299, 634, 'Baybay (Pob.)'),
(16300, 634, 'Bocon'),
(16301, 634, 'Bothoan (Pob.)'),
(16302, 634, 'Buenavista'),
(16303, 634, 'Bulalacao'),
(16304, 634, 'Camburo'),
(16305, 634, 'Dariao'),
(16306, 634, 'Datag East'),
(16307, 634, 'Datag West'),
(16308, 634, 'Guiamlong'),
(16309, 634, 'Hitoma'),
(16310, 634, 'Icanbato (Pob.)'),
(16311, 634, 'Inalmasinan'),
(16312, 634, 'Iyao'),
(16313, 634, 'Mabini'),
(16314, 634, 'Maui'),
(16315, 634, 'Maysuran'),
(16316, 634, 'Milaviga'),
(16317, 634, 'Panique'),
(16318, 634, 'Sabangan'),
(16319, 634, 'Sabloyon'),
(16320, 634, 'Salvacion'),
(16321, 634, 'Supang'),
(16322, 634, 'Toytoy (Pob.)'),
(16323, 634, 'Tubli'),
(16324, 634, 'Tucao'),
(16325, 634, 'Obi'),
(16326, 635, 'Biong'),
(16327, 635, 'Dororian'),
(16328, 635, 'Poblacion District I'),
(16329, 635, 'Poblacion District II'),
(16330, 635, 'Poblacion District III'),
(16331, 635, 'San Pedro'),
(16332, 635, 'San Vicente'),
(16333, 635, 'Sicmil'),
(16334, 635, 'Sioron'),
(16335, 636, 'Bagawang'),
(16336, 636, 'Balagñonan'),
(16337, 636, 'Baldoc'),
(16338, 636, 'Canlubi'),
(16339, 636, 'Santa Cruz'),
(16340, 636, 'Catamban'),
(16341, 636, 'Cobo'),
(16342, 636, 'Hiyop'),
(16343, 636, 'Libod (Pob.)'),
(16344, 636, 'Lourdes'),
(16345, 636, 'Lumabao'),
(16346, 636, 'Marambong'),
(16347, 636, 'Napo (Pob.)'),
(16348, 636, 'Oga'),
(16349, 636, 'Pandan Del Norte (Pob.)'),
(16350, 636, 'Pandan Del Sur (Pob.)'),
(16351, 636, 'Panuto'),
(16352, 636, 'Salvacion'),
(16353, 636, 'San Andres'),
(16354, 636, 'San Isidro'),
(16355, 636, 'Porot'),
(16356, 636, 'San Rafael'),
(16357, 636, 'San Roque'),
(16358, 636, 'Tabugoc'),
(16359, 636, 'Tokio'),
(16360, 636, 'Wagdas'),
(16361, 637, 'Alinawan'),
(16362, 637, 'Babaguan'),
(16363, 637, 'Bagong Bayan'),
(16364, 637, 'Burabod'),
(16365, 637, 'Cabuyoan'),
(16366, 637, 'Cagdarao'),
(16367, 637, 'Mabini'),
(16368, 637, 'Maculiw'),
(16369, 637, 'Panay'),
(16370, 637, 'Taopon'),
(16371, 637, 'Salvacion (Pob.)'),
(16372, 637, 'San Antonio'),
(16373, 637, 'San Joaquin (Pob.)'),
(16374, 637, 'San Jose (Pob.)'),
(16375, 637, 'San Juan (Pob.)'),
(16376, 637, 'San Miguel'),
(16377, 637, 'San Nicolas (Pob.)'),
(16378, 637, 'San Pedro (Pob.)'),
(16379, 637, 'San Vicente (Pob.)'),
(16380, 637, 'Santa Ana (Pob.)'),
(16381, 637, 'Santa Maria (Pob.)'),
(16382, 637, 'Santo Santiago (Pob.)'),
(16383, 637, 'Tibo'),
(16384, 638, 'Agojo'),
(16385, 638, 'Alibuag'),
(16386, 638, 'Asgad'),
(16387, 638, 'Bagong Sirang'),
(16388, 638, 'Barihay'),
(16389, 638, 'Batong Paloway'),
(16390, 638, 'Belmonte (Pob.)'),
(16391, 638, 'Bislig'),
(16392, 638, 'Bon-ot'),
(16393, 638, 'Cabungahan'),
(16394, 638, 'Cabcab'),
(16395, 638, 'Carangag'),
(16396, 638, 'Catagbacan'),
(16397, 638, 'Codon'),
(16398, 638, 'Comagaycay'),
(16399, 638, 'Datag'),
(16400, 638, 'Divino Rostro (Pob.)'),
(16401, 638, 'Esperanza (Pob.)'),
(16402, 638, 'Hilawan'),
(16403, 638, 'Lictin'),
(16404, 638, 'Lubas'),
(16405, 638, 'Manambrag'),
(16406, 638, 'Mayngaway'),
(16407, 638, 'Palawig'),
(16408, 638, 'Puting Baybay'),
(16409, 638, 'Rizal'),
(16410, 638, 'Salvacion (Pob.)'),
(16411, 638, 'San Isidro'),
(16412, 638, 'San Jose'),
(16413, 638, 'San Roque (Pob.)'),
(16414, 638, 'San Vicente'),
(16415, 638, 'Santa Cruz (Pob.)'),
(16416, 638, 'Sapang Palay (Pob.)'),
(16417, 638, 'Tibang'),
(16418, 638, 'Timbaan'),
(16419, 638, 'Tominawog'),
(16420, 638, 'Wagdas (Pob.)'),
(16421, 638, 'Yocti'),
(16422, 639, 'Balatohan'),
(16423, 639, 'Salvacion'),
(16424, 639, 'Boton'),
(16425, 639, 'Buhi'),
(16426, 639, 'Dayawa'),
(16427, 639, 'Atsan'),
(16428, 639, 'Poblacion District II'),
(16429, 639, 'Poblacion District III'),
(16430, 639, 'J. M. Alberto'),
(16431, 639, 'Katipunan'),
(16432, 639, 'Kilikilihan'),
(16433, 639, 'Mabato'),
(16434, 639, 'Obo'),
(16435, 639, 'Pacogon'),
(16436, 639, 'Pagsangahan'),
(16437, 639, 'Pangilao'),
(16438, 639, 'Paraiso'),
(16439, 639, 'Santa Elena'),
(16440, 639, 'Progreso'),
(16441, 639, 'San Juan'),
(16442, 639, 'San Marcos'),
(16443, 639, 'Siay'),
(16444, 639, 'Solong'),
(16445, 639, 'Tobrehon'),
(16446, 640, 'Almojuela'),
(16447, 640, 'Ananong'),
(16448, 640, 'Asuncion (Pob.)'),
(16449, 640, 'Batohonan'),
(16450, 640, 'Begonia'),
(16451, 640, 'Botinagan'),
(16452, 640, 'Buenavista'),
(16453, 640, 'Burgos'),
(16454, 640, 'Del Pilar'),
(16455, 640, 'Mabini'),
(16456, 640, 'Magsaysay'),
(16457, 640, 'Ogbong'),
(16458, 640, 'Osmeña'),
(16459, 640, 'Pedro Vera'),
(16460, 640, 'Peñafrancia (Pob.)'),
(16461, 640, 'Quezon'),
(16462, 640, 'Quirino'),
(16463, 640, 'Rizal'),
(16464, 640, 'Roxas'),
(16465, 640, 'Sagrada'),
(16466, 640, 'San Isidro (Pob.)'),
(16467, 640, 'San Jose Poblacion'),
(16468, 640, 'San Jose Oco'),
(16469, 640, 'San Pedro (Pob.)'),
(16470, 640, 'San Roque (Pob.)'),
(16471, 640, 'San Vicente (Pob.)'),
(16472, 640, 'Santa Rosa'),
(16473, 640, 'Soboc'),
(16474, 640, 'Tambongon'),
(16475, 640, 'Tinago'),
(16476, 640, 'Villa Aurora'),
(16477, 641, 'Antipolo Del Norte'),
(16478, 641, 'Antipolo Del Sur'),
(16479, 641, 'Balite'),
(16480, 641, 'Batag'),
(16481, 641, 'Bigaa'),
(16482, 641, 'Buenavista'),
(16483, 641, 'Buyo'),
(16484, 641, 'Cabihian'),
(16485, 641, 'Calabnigan'),
(16486, 641, 'Calampong'),
(16487, 641, 'Calatagan Proper'),
(16488, 641, 'Calatagan Tibang'),
(16489, 641, 'Capilihan'),
(16490, 641, 'Casoocan'),
(16491, 641, 'Cavinitan'),
(16492, 641, 'Gogon Sirangan'),
(16493, 641, 'Concepcion (Pob.)'),
(16494, 641, 'Constantino (Pob.)'),
(16495, 641, 'Danicop'),
(16496, 641, 'Dugui San Vicente'),
(16497, 641, 'Dugui San Isidro'),
(16498, 641, 'Dugui Too'),
(16499, 641, 'F. Tacorda Village'),
(16500, 641, 'Francia (Pob.)'),
(16501, 641, 'Gogon Centro'),
(16502, 641, 'Hawan Grande'),
(16503, 641, 'Hawan Ilaya'),
(16504, 641, 'Hicming'),
(16505, 641, 'Igang'),
(16506, 641, 'Juan M. Alberto'),
(16507, 641, 'Lanao (Pob.)'),
(16508, 641, 'Magnesia Del Norte'),
(16509, 641, 'Magnesia Del Sur'),
(16510, 641, 'Marcelo Alberto (Pob.)'),
(16511, 641, 'Marilima'),
(16512, 641, 'Pajo Baguio'),
(16513, 641, 'Pajo San Isidro'),
(16514, 641, 'Palnab Del Norte'),
(16515, 641, 'Palnab Del Sur'),
(16516, 641, 'Palta Big'),
(16517, 641, 'Palta Salvacion'),
(16518, 641, 'Palta Small'),
(16519, 641, 'Rawis (Pob.)'),
(16520, 641, 'Salvacion'),
(16521, 641, 'San Isidro Village'),
(16522, 641, 'San Jose (Pob.)'),
(16523, 641, 'San Juan (Pob.)'),
(16524, 641, 'San Pablo (Pob.)'),
(16525, 641, 'San Pedro (Pob.)'),
(16526, 641, 'San Roque (Pob.)'),
(16527, 641, 'San Vicente'),
(16528, 641, 'Ibong Sapa'),
(16529, 641, 'Santa Cruz'),
(16530, 641, 'Santa Elena (Pob.)'),
(16531, 641, 'Santo Cristo'),
(16532, 641, 'Santo Domingo'),
(16533, 641, 'Santo Niño'),
(16534, 641, 'Simamla'),
(16535, 641, 'Sogod-Simamla'),
(16536, 641, 'Talisoy'),
(16537, 641, 'Sogod-Tibgao'),
(16538, 641, 'Tubaon'),
(16539, 641, 'Valencia'),
(16540, 642, 'Ambolong'),
(16541, 642, 'Amoroy'),
(16542, 642, 'Amotag'),
(16543, 642, 'Bagauma'),
(16544, 642, 'Balawing'),
(16545, 642, 'Balete'),
(16546, 642, 'Bangon'),
(16547, 642, 'Cabangcalan'),
(16548, 642, 'Cabas-An'),
(16549, 642, 'Calanay'),
(16550, 642, 'Capsay'),
(16551, 642, 'Concepcion'),
(16552, 642, 'Dayhagan'),
(16553, 642, 'Don Pablo Dela Rosa'),
(16554, 642, 'Gumahang'),
(16555, 642, 'Jaboyoan'),
(16556, 642, 'Lanang'),
(16557, 642, 'Luy-a'),
(16558, 642, 'Macabug'),
(16559, 642, 'Malubi'),
(16560, 642, 'Managanaga'),
(16561, 642, 'Manamoc'),
(16562, 642, 'Mariposa'),
(16563, 642, 'Mataba'),
(16564, 642, 'Matalangtalang'),
(16565, 642, 'Matongog'),
(16566, 642, 'Nabongsoran'),
(16567, 642, 'Pangle'),
(16568, 642, 'Panique'),
(16569, 642, 'Pinanaan'),
(16570, 642, 'Poblacion'),
(16571, 642, 'Puro'),
(16572, 642, 'San Agustin'),
(16573, 642, 'San Isidro'),
(16574, 642, 'Sawang'),
(16575, 642, 'Syndicate'),
(16576, 642, 'Talabaan'),
(16577, 642, 'Talib'),
(16578, 642, 'Tigbao'),
(16579, 642, 'Tinago'),
(16580, 642, 'Tinigban'),
(16581, 643, 'Baao'),
(16582, 643, 'Banase'),
(16583, 643, 'Batuila'),
(16584, 643, 'Cagara'),
(16585, 643, 'Cagpandan'),
(16586, 643, 'Cancahorao'),
(16587, 643, 'Canjunday'),
(16588, 643, 'Docol'),
(16589, 643, 'Eastern Capsay'),
(16590, 643, 'Gabi'),
(16591, 643, 'Gangao'),
(16592, 643, 'Lagta'),
(16593, 643, 'Lahong Proper'),
(16594, 643, 'Lahong Interior'),
(16595, 643, 'Lipata'),
(16596, 643, 'Madangcalan'),
(16597, 643, 'Magdalena'),
(16598, 643, 'Manoboc'),
(16599, 643, 'Obongon Diot'),
(16600, 643, 'Poblacion'),
(16601, 643, 'Polot'),
(16602, 643, 'Potoson'),
(16603, 643, 'Sog-Ong'),
(16604, 643, 'Tinapian'),
(16605, 644, 'Baybay'),
(16606, 644, 'Bongcanaway'),
(16607, 644, 'Mabuhay'),
(16608, 644, 'Calumpang'),
(16609, 644, 'Cantil'),
(16610, 644, 'Casamongan'),
(16611, 644, 'Dao'),
(16612, 644, 'Danao'),
(16613, 644, 'Guinbanwahan'),
(16614, 644, 'Ilaya'),
(16615, 644, 'Jangan'),
(16616, 644, 'Jintotolo'),
(16617, 644, 'Mapili'),
(16618, 644, 'Mapitogo'),
(16619, 644, 'Pajo'),
(16620, 644, 'Palane'),
(16621, 644, 'Panguiranan'),
(16622, 644, 'Panubigan'),
(16623, 644, 'Poblacion'),
(16624, 644, 'Pulanduta'),
(16625, 644, 'Quinayangan Diotay'),
(16626, 644, 'Quinayangan Tonga'),
(16627, 644, 'Salvacion'),
(16628, 644, 'Sampad'),
(16629, 644, 'San Andres'),
(16630, 644, 'San Antonio'),
(16631, 644, 'Sapatos'),
(16632, 644, 'Talisay'),
(16633, 644, 'Tonga'),
(16634, 644, 'Ubo'),
(16635, 644, 'Victory'),
(16636, 644, 'Villa Alvarez'),
(16637, 645, 'Burgos'),
(16638, 645, 'Canares'),
(16639, 645, 'Cambañez'),
(16640, 645, 'Costa Rica'),
(16641, 645, 'Danao'),
(16642, 645, 'Gibraltar'),
(16643, 645, 'Mabuhay'),
(16644, 645, 'Matabao'),
(16645, 645, 'Nasandig'),
(16646, 645, 'Panisihan'),
(16647, 645, 'Poblacion'),
(16648, 645, 'Rizal'),
(16649, 645, 'Royroy'),
(16650, 645, 'Sawang'),
(16651, 646, 'Abaca'),
(16652, 646, 'Aguada'),
(16653, 646, 'Badiang'),
(16654, 646, 'Bagumbayan'),
(16655, 646, 'Cadulawan'),
(16656, 646, 'Cagbatang'),
(16657, 646, 'Chimenea'),
(16658, 646, 'Concepcion'),
(16659, 646, 'Curvada'),
(16660, 646, 'Divisoria'),
(16661, 646, 'Domorog'),
(16662, 646, 'Estampar'),
(16663, 646, 'Gahit'),
(16664, 646, 'Libtong'),
(16665, 646, 'Liong'),
(16666, 646, 'Maanahao'),
(16667, 646, 'Madamba'),
(16668, 646, 'Malobago'),
(16669, 646, 'Matayum'),
(16670, 646, 'Matubinao'),
(16671, 646, 'Mintac'),
(16672, 646, 'Nadawisan'),
(16673, 646, 'Osmeña'),
(16674, 646, 'Pawican'),
(16675, 646, 'Pitogo'),
(16676, 646, 'Poblacion'),
(16677, 646, 'Quezon'),
(16678, 646, 'San Isidro'),
(16679, 646, 'San Jose'),
(16680, 646, 'San Pedro'),
(16681, 646, 'San Rafael'),
(16682, 646, 'Santa Teresita'),
(16683, 646, 'Santo Niño'),
(16684, 646, 'Tagboan'),
(16685, 646, 'Tuybo'),
(16686, 646, 'Villa Pogado'),
(16687, 647, 'Begia'),
(16688, 647, 'Cabayugan'),
(16689, 647, 'Cabungahan'),
(16690, 647, 'Calapayan'),
(16691, 647, 'Calumpang'),
(16692, 647, 'Dalipe'),
(16693, 647, 'Divisoria'),
(16694, 647, 'Guiom'),
(16695, 647, 'Gilotongan'),
(16696, 647, 'Itombato'),
(16697, 647, 'Libertad'),
(16698, 647, 'Looc'),
(16699, 647, 'Mactan'),
(16700, 647, 'Madbad'),
(16701, 647, 'R.M. Magbalon'),
(16702, 647, 'Mahayahay'),
(16703, 647, 'Maihao'),
(16704, 647, 'Malbug'),
(16705, 647, 'Naro'),
(16706, 647, 'Pananawan'),
(16707, 647, 'Poblacion'),
(16708, 647, 'Pulot'),
(16709, 647, 'Recodo'),
(16710, 647, 'San Jose'),
(16711, 647, 'San Vicente'),
(16712, 647, 'Taberna'),
(16713, 647, 'Talisay'),
(16714, 647, 'Tuburan'),
(16715, 647, 'Villahermosa'),
(16716, 647, 'Chico Island'),
(16717, 647, 'Lague-lague'),
(16718, 647, 'Palobandera'),
(16719, 647, 'Peña Island'),
(16720, 647, 'Pin-As'),
(16721, 647, 'Iraya'),
(16722, 647, 'Punta Batsan'),
(16723, 647, 'Tubog'),
(16724, 648, 'Albasan'),
(16725, 648, 'Boca Engaño'),
(16726, 648, 'Buyo'),
(16727, 648, 'Calpi'),
(16728, 648, 'Canomay'),
(16729, 648, 'Cawayan'),
(16730, 648, 'Poblacion District I'),
(16731, 648, 'Poblacion District II'),
(16732, 648, 'Mababang Baybay'),
(16733, 648, 'Mabiton'),
(16734, 648, 'Manapao'),
(16735, 648, 'Nabasagan'),
(16736, 648, 'Nonoc'),
(16737, 648, 'Osmeña'),
(16738, 648, 'Pasig'),
(16739, 648, 'Peñafrancia'),
(16740, 648, 'Quezon'),
(16741, 648, 'San Isidro'),
(16742, 648, 'San Ramon'),
(16743, 648, 'San Vicente'),
(16744, 648, 'Taguilid'),
(16745, 648, 'Imelda'),
(16746, 649, 'Balantay'),
(16747, 649, 'Balocawe'),
(16748, 649, 'Banahao'),
(16749, 649, 'Buenaflor'),
(16750, 649, 'Buracan'),
(16751, 649, 'Cabanoyoan'),
(16752, 649, 'Cabrera'),
(16753, 649, 'Cadulan'),
(16754, 649, 'Calabad'),
(16755, 649, 'Canomay'),
(16756, 649, 'Divisoria'),
(16757, 649, 'Gaid'),
(16758, 649, 'Gregorio Alino'),
(16759, 649, 'Magcaraguit'),
(16760, 649, 'Mambog'),
(16761, 649, 'Poblacion'),
(16762, 649, 'Rizal'),
(16763, 649, 'San Vicente'),
(16764, 649, 'Suba'),
(16765, 649, 'T.R. Yangco'),
(16766, 650, 'Agoho'),
(16767, 650, 'Almero'),
(16768, 650, 'Baras'),
(16769, 650, 'Domorog'),
(16770, 650, 'Guadalupe'),
(16771, 650, 'Iligan'),
(16772, 650, 'Labangtaytay'),
(16773, 650, 'Labrador'),
(16774, 650, 'Libertad'),
(16775, 650, 'Magsaysay'),
(16776, 650, 'Masbaranon'),
(16777, 650, 'Poblacion'),
(16778, 650, 'Potingbato'),
(16779, 650, 'Rizal'),
(16780, 650, 'San Roque'),
(16781, 650, 'Santiago'),
(16782, 650, 'Sorosimbajan'),
(16783, 650, 'Tawad'),
(16784, 650, 'Tunga'),
(16785, 650, 'Villa'),
(16786, 651, 'Alas'),
(16787, 651, 'Ayat'),
(16788, 651, 'Bat-Ongan'),
(16789, 651, 'Bugtong'),
(16790, 651, 'Buri'),
(16791, 651, 'Cabitan'),
(16792, 651, 'Cagmasoso'),
(16793, 651, 'Canomoy'),
(16794, 651, 'Centro'),
(16795, 651, 'Dayao'),
(16796, 651, 'Guincaiptan'),
(16797, 651, 'Lantangan'),
(16798, 651, 'Looc'),
(16799, 651, 'Mabatobato'),
(16800, 651, 'Maolingon'),
(16801, 651, 'Nailaban'),
(16802, 651, 'Nanipsan'),
(16803, 651, 'Pinamangcaan'),
(16804, 651, 'Poblacion'),
(16805, 651, 'Polo Dacu'),
(16806, 651, 'San Juan'),
(16807, 651, 'San Pablo'),
(16808, 651, 'Santa Fe'),
(16809, 651, 'Tagpu'),
(16810, 651, 'Tumalaytay'),
(16811, 651, 'Laguinbanwa'),
(16812, 652, 'Anas'),
(16813, 652, 'Asid'),
(16814, 652, 'B. Titong'),
(16815, 652, 'Bagumbayan'),
(16816, 652, 'Bantigue'),
(16817, 652, 'Bapor (Pob.)'),
(16818, 652, 'Batuhan'),
(16819, 652, 'Bayombon'),
(16820, 652, 'Biyong'),
(16821, 652, 'Bolo'),
(16822, 652, 'Cagay'),
(16823, 652, 'Cawayan Exterior'),
(16824, 652, 'Cawayan Interior'),
(16825, 652, 'Centro (Pob.)'),
(16826, 652, 'Espinosa'),
(16827, 652, 'F. Magallanes'),
(16828, 652, 'Ibingay'),
(16829, 652, 'Igang'),
(16830, 652, 'Kalipay (Pob.)'),
(16831, 652, 'Kinamaligan'),
(16832, 652, 'Malinta'),
(16833, 652, 'Mapiña'),
(16834, 652, 'Mayngaran'),
(16835, 652, 'Nursery'),
(16836, 652, 'Pating (Pob.)'),
(16837, 652, 'Pawa'),
(16838, 652, 'Sinalongan'),
(16839, 652, 'Tugbo'),
(16840, 652, 'Ubongan Dacu'),
(16841, 652, 'Usab'),
(16842, 653, 'Bacolod'),
(16843, 653, 'Bangad'),
(16844, 653, 'Bara'),
(16845, 653, 'Bonbon'),
(16846, 653, 'Calasuche'),
(16847, 653, 'Calumpang'),
(16848, 653, 'Capaculan'),
(16849, 653, 'Cayabon'),
(16850, 653, 'Guinluthangan'),
(16851, 653, 'Jamorawon'),
(16852, 653, 'Magsalangi'),
(16853, 653, 'Matagbac'),
(16854, 653, 'Matanglad'),
(16855, 653, 'Matiporon'),
(16856, 653, 'Moises R. Espinosa'),
(16857, 653, 'Narangasan'),
(16858, 653, 'Pamangpangon'),
(16859, 653, 'Poblacion East'),
(16860, 653, 'Poblacion West'),
(16861, 653, 'Paraiso'),
(16862, 653, 'San Antonio'),
(16863, 653, 'San Carlos'),
(16864, 653, 'Sawmill'),
(16865, 653, 'Tagbon'),
(16866, 653, 'Tawad'),
(16867, 653, 'Tigbao'),
(16868, 653, 'Tinaclipan'),
(16869, 654, 'Baang'),
(16870, 654, 'Bagacay'),
(16871, 654, 'Balatucan'),
(16872, 654, 'Barag'),
(16873, 654, 'Dacu'),
(16874, 654, 'Fabrica'),
(16875, 654, 'Guintorelan'),
(16876, 654, 'Holjogon'),
(16877, 654, 'Lalaguna'),
(16878, 654, 'Lomocloc'),
(16879, 654, 'Luyong Catungan'),
(16880, 654, 'Mabuhay'),
(16881, 654, 'Mandali'),
(16882, 654, 'Mapuyo'),
(16883, 654, 'Marintoc'),
(16884, 654, 'Nasunduan'),
(16885, 654, 'Pinamalatican'),
(16886, 654, 'Pinamarbuhan'),
(16887, 654, 'Poblacion Dist. I'),
(16888, 654, 'Poblacion Dist. II'),
(16889, 654, 'Polot'),
(16890, 654, 'Sambulawan'),
(16891, 654, 'Santa Maria'),
(16892, 654, 'Sawmill'),
(16893, 654, 'Tabuc'),
(16894, 654, 'Tugawe'),
(16895, 654, 'Tugbo'),
(16896, 654, 'Umabay Exterior'),
(16897, 654, 'Umabay Interior'),
(16898, 655, 'Cantorna'),
(16899, 655, 'Famosa'),
(16900, 655, 'Macarthur'),
(16901, 655, 'Maglambong'),
(16902, 655, 'Morocborocan'),
(16903, 655, 'Poblacion'),
(16904, 655, 'Guinhadap'),
(16905, 655, 'Real'),
(16906, 655, 'Rizal'),
(16907, 655, 'Santo Niño'),
(16908, 655, 'Togoron'),
(16909, 656, 'Antipolo'),
(16910, 656, 'Banco'),
(16911, 656, 'Biga-a'),
(16912, 656, 'Bontod'),
(16913, 656, 'Buenasuerte'),
(16914, 656, 'Intusan'),
(16915, 656, 'Jose A. Abenir Sr.'),
(16916, 656, 'Maanahao'),
(16917, 656, 'Mabini'),
(16918, 656, 'Malibas'),
(16919, 656, 'Maravilla'),
(16920, 656, 'Matugnao'),
(16921, 656, 'Miabas'),
(16922, 656, 'Nabangig'),
(16923, 656, 'Nipa'),
(16924, 656, 'Parina'),
(16925, 656, 'Piña'),
(16926, 656, 'Poblacion'),
(16927, 656, 'Salvacion'),
(16928, 656, 'San Antonio'),
(16929, 656, 'San Carlos'),
(16930, 656, 'San Isidro'),
(16931, 656, 'Santa Cruz'),
(16932, 656, 'Malatawan'),
(16933, 657, 'Alegria'),
(16934, 657, 'Buenasuerte'),
(16935, 657, 'Bugang'),
(16936, 657, 'Bugtong'),
(16937, 657, 'Bunducan'),
(16938, 657, 'Cabangrayan'),
(16939, 657, 'Calongongan'),
(16940, 657, 'Casabangan'),
(16941, 657, 'Guindawahan'),
(16942, 657, 'Labigan'),
(16943, 657, 'Lampuyang'),
(16944, 657, 'Mabuhay'),
(16945, 657, 'Palho'),
(16946, 657, 'Poblacion'),
(16947, 657, 'Salvacion'),
(16948, 657, 'Tanque'),
(16949, 657, 'Tubigan'),
(16950, 658, 'Tubog'),
(16951, 658, 'Aguada'),
(16952, 658, 'Ban-Ao'),
(16953, 658, 'Burabod'),
(16954, 658, 'Cabangcalan'),
(16955, 658, 'Calumpang'),
(16956, 658, 'Camayabsan'),
(16957, 658, 'Daanlungsod'),
(16958, 658, 'Dangpanan'),
(16959, 658, 'Daraga'),
(16960, 658, 'Guin-Awayan'),
(16961, 658, 'Guinhan-Ayan'),
(16962, 658, 'Katipunan'),
(16963, 658, 'Libas'),
(16964, 658, 'Locso-An'),
(16965, 658, 'Luna'),
(16966, 658, 'Mahayag'),
(16967, 658, 'Mahayahay'),
(16968, 658, 'Manlut-Od'),
(16969, 658, 'Matagantang'),
(16970, 658, 'Naboctot'),
(16971, 658, 'Nagarao'),
(16972, 658, 'Nainday'),
(16973, 658, 'Naocondiot'),
(16974, 658, 'Pasiagon'),
(16975, 658, 'Pili'),
(16976, 658, 'Poblacion'),
(16977, 658, 'Puro'),
(16978, 658, 'Quibrada'),
(16979, 658, 'San Marcos'),
(16980, 658, 'Santa Cruz'),
(16981, 658, 'Taboc'),
(16982, 658, 'Tan-Awan'),
(16983, 658, 'Taverna'),
(16984, 658, 'Tubod'),
(16985, 658, 'Villa Inocencio'),
(16986, 659, 'Altavista'),
(16987, 659, 'Benitinan'),
(16988, 659, 'Buenasuerte'),
(16989, 659, 'Buenavista'),
(16990, 659, 'Buenos Aires'),
(16991, 659, 'Buyo'),
(16992, 659, 'Cañelas'),
(16993, 659, 'Corbada'),
(16994, 659, 'Daplian'),
(16995, 659, 'Del Rosario'),
(16996, 659, 'Ipil'),
(16997, 659, 'Lahong'),
(16998, 659, 'Lumbia'),
(16999, 659, 'Magkaipit'),
(17000, 659, 'Minio'),
(17001, 659, 'Pinamoghaan'),
(17002, 659, 'Baybaydagat Pob.'),
(17003, 659, 'Silangan Pob.'),
(17004, 659, 'Magsasaka Pob.'),
(17005, 659, 'Bayanihan Pob.'),
(17006, 659, 'Progreso'),
(17007, 659, 'Resurreccion'),
(17008, 659, 'Salvacion'),
(17009, 659, 'Sowa'),
(17010, 659, 'Talisay'),
(17011, 659, 'Valparaiso'),
(17012, 660, 'Almiñe'),
(17013, 660, 'Bagacay'),
(17014, 660, 'Bagahanglad'),
(17015, 660, 'Bartolabac'),
(17016, 660, 'Burgos'),
(17017, 660, 'Calipat-An'),
(17018, 660, 'Danao'),
(17019, 660, 'Dorong-an Daplian'),
(17020, 660, 'Interior'),
(17021, 660, 'Jagna-an'),
(17022, 660, 'Luna'),
(17023, 660, 'Mabini'),
(17024, 660, 'Piña'),
(17025, 660, 'District I (Pob.)'),
(17026, 660, 'District II (Pob.)'),
(17027, 660, 'District III (Pob.)'),
(17028, 660, 'District IV (Pob.)'),
(17029, 660, 'Roosevelt'),
(17030, 660, 'San Isidro'),
(17031, 660, 'Santa Rosa'),
(17032, 660, 'Washington'),
(17033, 661, 'Boca Chica'),
(17034, 661, 'Bolod (Pob.)'),
(17035, 661, 'Busing'),
(17036, 661, 'Dangcalan'),
(17037, 661, 'Halabangbaybay'),
(17038, 661, 'Iniwaran'),
(17039, 661, 'Ki-Buaya'),
(17040, 661, 'Ki-Romero'),
(17041, 661, 'Laurente'),
(17042, 661, 'Mabini'),
(17043, 661, 'Mabuhay'),
(17044, 661, 'Mapanique'),
(17045, 661, 'Nazareno'),
(17046, 661, 'Pinamasingan'),
(17047, 661, 'Quintina'),
(17048, 661, 'San Jose'),
(17049, 661, 'San Pedro'),
(17050, 661, 'San Rafael'),
(17051, 661, 'Santa Cruz'),
(17052, 661, 'Terraplin (Pob.)'),
(17053, 661, 'Cueva'),
(17054, 661, 'Malaking Ilog'),
(17055, 662, 'Arado'),
(17056, 662, 'Armenia'),
(17057, 662, 'Aurora'),
(17058, 662, 'Badling'),
(17059, 662, 'Bonifacio'),
(17060, 662, 'Buenasuerte'),
(17061, 662, 'Buenavista'),
(17062, 662, 'Campana'),
(17063, 662, 'Candelaria'),
(17064, 662, 'Centro'),
(17065, 662, 'Crossing'),
(17066, 662, 'Dapdap'),
(17067, 662, 'Del Carmen'),
(17068, 662, 'Del Rosario'),
(17069, 662, 'Libertad'),
(17070, 662, 'Madao'),
(17071, 662, 'Mabini'),
(17072, 662, 'Magsaysay'),
(17073, 662, 'Marcella'),
(17074, 662, 'Miaga'),
(17075, 662, 'Mongahay'),
(17076, 662, 'Morocborocan'),
(17077, 662, 'Mabuhay'),
(17078, 662, 'Paguihaman'),
(17079, 662, 'Panicijan'),
(17080, 662, 'Poblacion'),
(17081, 662, 'Quezon'),
(17082, 662, 'San Isidro'),
(17083, 662, 'San Jose'),
(17084, 662, 'San Mateo'),
(17085, 662, 'San Ramon'),
(17086, 662, 'San Vicente'),
(17087, 662, 'Santo Cristo'),
(17088, 662, 'Sawang'),
(17089, 662, 'Simawa'),
(17090, 663, 'Alegria'),
(17091, 663, 'Bagacay'),
(17092, 663, 'Bangate'),
(17093, 663, 'Bugtong'),
(17094, 663, 'Cagang'),
(17095, 663, 'Fabrica'),
(17096, 663, 'Jibong'),
(17097, 663, 'Lago'),
(17098, 663, 'Layog'),
(17099, 663, 'Luneta'),
(17100, 663, 'Macabari'),
(17101, 663, 'Mapapac'),
(17102, 663, 'Olandia'),
(17103, 663, 'Paghaluban'),
(17104, 663, 'Poblacion Central'),
(17105, 663, 'Poblacion Norte'),
(17106, 663, 'Poblacion Sur'),
(17107, 663, 'Putiao'),
(17108, 663, 'San Antonio'),
(17109, 663, 'San Isidro'),
(17110, 663, 'San Ramon'),
(17111, 663, 'San Vicente'),
(17112, 663, 'Santa Cruz'),
(17113, 663, 'Santa Lourdes'),
(17114, 663, 'Tagdon'),
(17115, 664, 'A. Bonifacio'),
(17116, 664, 'Abad Santos'),
(17117, 664, 'Aguinaldo'),
(17118, 664, 'Antipolo'),
(17119, 664, 'Zone I Pob.'),
(17120, 664, 'Zone II Pob.'),
(17121, 664, 'Zone III Pob.'),
(17122, 664, 'Zone IV Pob.'),
(17123, 664, 'Zone V Pob.'),
(17124, 664, 'Zone VI Pob.'),
(17125, 664, 'Bical'),
(17126, 664, 'Beguin'),
(17127, 664, 'Bonga'),
(17128, 664, 'Butag'),
(17129, 664, 'Cadandanan'),
(17130, 664, 'Calomagon'),
(17131, 664, 'Calpi'),
(17132, 664, 'Cocok-Cabitan'),
(17133, 664, 'Daganas'),
(17134, 664, 'Danao'),
(17135, 664, 'Dolos'),
(17136, 664, 'E. Quirino'),
(17137, 664, 'Fabrica'),
(17138, 664, 'Gate'),
(17139, 664, 'Benigno S. Aquino'),
(17140, 664, 'Inararan'),
(17141, 664, 'J. Gerona'),
(17142, 664, 'Jamorawon'),
(17143, 664, 'Libertad'),
(17144, 664, 'Lajong'),
(17145, 664, 'Magsaysay'),
(17146, 664, 'Managanaga'),
(17147, 664, 'Marinab'),
(17148, 664, 'Nasuje'),
(17149, 664, 'Montecalvario'),
(17150, 664, 'N. Roque'),
(17151, 664, 'Namo'),
(17152, 664, 'Obrero'),
(17153, 664, 'Osmeña'),
(17154, 664, 'Otavi'),
(17155, 664, 'Padre Diaz'),
(17156, 664, 'Palale'),
(17157, 664, 'J.P. Laurel'),
(17158, 664, 'Quezon'),
(17159, 664, 'R. Gerona'),
(17160, 664, 'Recto'),
(17161, 664, 'M. Roxas'),
(17162, 664, 'Sagrada'),
(17163, 664, 'San Francisco'),
(17164, 664, 'San Isidro'),
(17165, 664, 'San Juan Bag-o'),
(17166, 664, 'San Juan Daan'),
(17167, 664, 'San Rafael'),
(17168, 664, 'San Ramon'),
(17169, 664, 'San Vicente'),
(17170, 664, 'Santa Remedios'),
(17171, 664, 'Santa Teresita'),
(17172, 664, 'Sigad'),
(17173, 664, 'Somagongsong'),
(17174, 664, 'G. Del Pilar'),
(17175, 664, 'Taromata'),
(17176, 664, 'Zone VII Pob.'),
(17177, 664, 'Zone VIII Pob.'),
(17178, 665, 'Bagacay'),
(17179, 665, 'Central (Pob.)'),
(17180, 665, 'Cogon'),
(17181, 665, 'Dancalan'),
(17182, 665, 'Dapdap (Pob.)'),
(17183, 665, 'Lalud'),
(17184, 665, 'Looban (Pob.)'),
(17185, 665, 'Mabuhay (Pob.)'),
(17186, 665, 'Madlawon (Pob.)'),
(17187, 665, 'Poctol (Pob.)'),
(17188, 665, 'Porog'),
(17189, 665, 'Sabang (Pob.)'),
(17190, 665, 'Salvacion'),
(17191, 665, 'San Antonio'),
(17192, 665, 'San Bernardo'),
(17193, 665, 'San Francisco'),
(17194, 665, 'San Isidro'),
(17195, 665, 'San Jose'),
(17196, 665, 'San Rafael'),
(17197, 665, 'San Roque'),
(17198, 665, 'San Vicente'),
(17199, 665, 'Santa Barbara'),
(17200, 665, 'Sapngan (Pob.)'),
(17201, 665, 'Tinampo'),
(17202, 666, 'Adovis (Pob.)'),
(17203, 666, 'Boton'),
(17204, 666, 'Burgos'),
(17205, 666, 'Casay'),
(17206, 666, 'Cawit'),
(17207, 666, 'Central (Pob.)'),
(17208, 666, 'Colambis'),
(17209, 666, 'Escuala'),
(17210, 666, 'Cogon'),
(17211, 666, 'Inlagadian'),
(17212, 666, 'Lungib'),
(17213, 666, 'Mabini'),
(17214, 666, 'Ponong'),
(17215, 666, 'Rizal'),
(17216, 666, 'San Antonio'),
(17217, 666, 'San Isidro'),
(17218, 666, 'San Juan'),
(17219, 666, 'San Pascual'),
(17220, 666, 'Santa Cruz'),
(17221, 666, 'Somal-ot (Pob.)'),
(17222, 666, 'Tigbao'),
(17223, 666, 'Timbayog (Pob.)'),
(17224, 666, 'Tiris'),
(17225, 666, 'Trece Martirez'),
(17226, 666, 'Tulay'),
(17227, 667, 'Amomonting'),
(17228, 667, 'Bagalayag'),
(17229, 667, 'Bagong Sirang'),
(17230, 667, 'Bonga'),
(17231, 667, 'Buenavista'),
(17232, 667, 'Burabod'),
(17233, 667, 'Caburacan'),
(17234, 667, 'Canjela'),
(17235, 667, 'Cogon'),
(17236, 667, 'Cumadcad'),
(17237, 667, 'Dangcalan'),
(17238, 667, 'Dinapa'),
(17239, 667, 'La Union'),
(17240, 667, 'Libtong'),
(17241, 667, 'Loreto'),
(17242, 667, 'Macalaya'),
(17243, 667, 'Maracabac'),
(17244, 667, 'Mayon'),
(17245, 667, 'Milagrosa'),
(17246, 667, 'Miluya'),
(17247, 667, 'Maypangi'),
(17248, 667, 'Monte Carmelo'),
(17249, 667, 'Oras'),
(17250, 667, 'Pandan'),
(17251, 667, 'Poblacion'),
(17252, 667, 'Quirapi'),
(17253, 667, 'Saclayan'),
(17254, 667, 'Salvacion'),
(17255, 667, 'San Isidro'),
(17256, 667, 'San Rafael'),
(17257, 667, 'San Roque'),
(17258, 667, 'San Vicente'),
(17259, 667, 'Sogoy'),
(17260, 667, 'Tomalaytay'),
(17261, 668, 'Alin'),
(17262, 668, 'Awai'),
(17263, 668, 'Banban'),
(17264, 668, 'Bandi'),
(17265, 668, 'Banuang Gurang'),
(17266, 668, 'Baras'),
(17267, 668, 'Bayawas'),
(17268, 668, 'Bororan Barangay 1 (Pob.)'),
(17269, 668, 'Cabugao'),
(17270, 668, 'Central Barangay 2 (Pob.)'),
(17271, 668, 'Cristo'),
(17272, 668, 'Dancalan'),
(17273, 668, 'De Vera'),
(17274, 668, 'Gimagaan'),
(17275, 668, 'Girawan'),
(17276, 668, 'Gogon'),
(17277, 668, 'Gura'),
(17278, 668, 'Juan Adre'),
(17279, 668, 'Lourdes'),
(17280, 668, 'Mabini'),
(17281, 668, 'Malapoc'),
(17282, 668, 'Malinao'),
(17283, 668, 'Market Site Barangay 3 (Pob.)'),
(17284, 668, 'New Maguisa'),
(17285, 668, 'Ogod'),
(17286, 668, 'Old Maguisa'),
(17287, 668, 'Orange'),
(17288, 668, 'Pangpang'),
(17289, 668, 'Parina'),
(17290, 668, 'Pawala'),
(17291, 668, 'Pinamanaan'),
(17292, 668, 'Poso Pob.'),
(17293, 668, 'Punta Waling-Waling Pob.'),
(17294, 668, 'Rawis'),
(17295, 668, 'San Antonio'),
(17296, 668, 'San Isidro'),
(17297, 668, 'San Jose'),
(17298, 668, 'San Rafael'),
(17299, 668, 'San Ramon'),
(17300, 668, 'San Vicente'),
(17301, 668, 'Santa Cruz'),
(17302, 668, 'Sevilla'),
(17303, 668, 'Sibago'),
(17304, 668, 'Suguian'),
(17305, 668, 'Tagbac'),
(17306, 668, 'Tinanogan'),
(17307, 668, 'Tongdol'),
(17308, 668, 'Tres Marias'),
(17309, 668, 'Tuba'),
(17310, 668, 'Tupas'),
(17311, 668, 'Vinisitahan'),
(17312, 669, 'Ariman'),
(17313, 669, 'Bagacay'),
(17314, 669, 'Balud Del Norte (Pob.)'),
(17315, 669, 'Balud Del Sur (Pob.)'),
(17316, 669, 'Benguet'),
(17317, 669, 'Bentuco'),
(17318, 669, 'Beriran'),
(17319, 669, 'Buenavista'),
(17320, 669, 'Bulacao'),
(17321, 669, 'Cabigaan'),
(17322, 669, 'Cabiguhan'),
(17323, 669, 'Carriedo'),
(17324, 669, 'Casili'),
(17325, 669, 'Cogon'),
(17326, 669, 'Cota Na Daco (Pob.)'),
(17327, 669, 'Dita'),
(17328, 669, 'Jupi'),
(17329, 669, 'Lapinig'),
(17330, 669, 'Luna-Candol (Pob.)'),
(17331, 669, 'Manapao'),
(17332, 669, 'Manook (Pob.)'),
(17333, 669, 'Naagtan'),
(17334, 669, 'Nato'),
(17335, 669, 'Nazareno'),
(17336, 669, 'Ogao'),
(17337, 669, 'Paco'),
(17338, 669, 'Panganiban (Pob.)'),
(17339, 669, 'Paradijon (Pob.)'),
(17340, 669, 'Patag'),
(17341, 669, 'Payawin'),
(17342, 669, 'Pinontingan (Pob.)'),
(17343, 669, 'Rizal'),
(17344, 669, 'San Ignacio'),
(17345, 669, 'Sangat'),
(17346, 669, 'Santa Ana'),
(17347, 669, 'Tabi'),
(17348, 669, 'Tagaytay'),
(17349, 669, 'Tigkiw'),
(17350, 669, 'Tiris'),
(17351, 669, 'Togawe'),
(17352, 669, 'Union'),
(17353, 669, 'Villareal'),
(17354, 670, 'Bagsangan'),
(17355, 670, 'Bacolod (Pob.)'),
(17356, 670, 'Batang'),
(17357, 670, 'Bolos'),
(17358, 670, 'Buenavista'),
(17359, 670, 'Bulawan'),
(17360, 670, 'Carriedo'),
(17361, 670, 'Casini'),
(17362, 670, 'Cawayan'),
(17363, 670, 'Cogon'),
(17364, 670, 'Gabao'),
(17365, 670, 'Gulang-Gulang'),
(17366, 670, 'Gumapia'),
(17367, 670, 'Santo Domingo'),
(17368, 670, 'Liang'),
(17369, 670, 'Macawayan'),
(17370, 670, 'Mapaso'),
(17371, 670, 'Monbon'),
(17372, 670, 'Patag'),
(17373, 670, 'Salvacion'),
(17374, 670, 'San Agustin (Pob.)'),
(17375, 670, 'San Isidro'),
(17376, 670, 'San Juan (Pob.)'),
(17377, 670, 'San Julian (Pob.)'),
(17378, 670, 'San Pedro'),
(17379, 670, 'Tabon-Tabon'),
(17380, 670, 'Tinampo'),
(17381, 670, 'Tongdol'),
(17382, 671, 'Anog'),
(17383, 671, 'Aroroy'),
(17384, 671, 'Bacolod'),
(17385, 671, 'Binanuahan'),
(17386, 671, 'Biriran'),
(17387, 671, 'Buraburan'),
(17388, 671, 'Calateo'),
(17389, 671, 'Calmayon'),
(17390, 671, 'Carohayon'),
(17391, 671, 'Catanagan'),
(17392, 671, 'Catanusan'),
(17393, 671, 'Cogon'),
(17394, 671, 'Embarcadero'),
(17395, 671, 'Guruyan'),
(17396, 671, 'Lajong'),
(17397, 671, 'Maalo'),
(17398, 671, 'North Poblacion'),
(17399, 671, 'South Poblacion'),
(17400, 671, 'Puting Sapa'),
(17401, 671, 'Rangas'),
(17402, 671, 'Sablayan'),
(17403, 671, 'Sipaya'),
(17404, 671, 'Taboc'),
(17405, 671, 'Tinago'),
(17406, 671, 'Tughan'),
(17407, 672, 'Aguada Norte'),
(17408, 672, 'Aguada Sur'),
(17409, 672, 'Anibong'),
(17410, 672, 'Bacalon'),
(17411, 672, 'Bacolod'),
(17412, 672, 'Banacud'),
(17413, 672, 'Biga'),
(17414, 672, 'Behia'),
(17415, 672, 'Binisitahan del Norte'),
(17416, 672, 'Binisitahan del Sur'),
(17417, 672, 'Biton'),
(17418, 672, 'Bulala'),
(17419, 672, 'Busay'),
(17420, 672, 'Caditaan'),
(17421, 672, 'Cagbolo'),
(17422, 672, 'Cagtalaba'),
(17423, 672, 'Cawit Extension'),
(17424, 672, 'Cawit Proper'),
(17425, 672, 'Ginangra'),
(17426, 672, 'Hubo'),
(17427, 672, 'Incarizan'),
(17428, 672, 'Lapinig'),
(17429, 672, 'Magsaysay'),
(17430, 672, 'Malbog'),
(17431, 672, 'Pantalan'),
(17432, 672, 'Pawik'),
(17433, 672, 'Pili'),
(17434, 672, 'Poblacion'),
(17435, 672, 'Salvacion'),
(17436, 672, 'Santa Elena'),
(17437, 672, 'Siuton'),
(17438, 672, 'Tagas'),
(17439, 672, 'Tulatula Norte'),
(17440, 672, 'Tulatula Sur'),
(17441, 673, 'Balocawe'),
(17442, 673, 'Banogao'),
(17443, 673, 'Banuangdaan'),
(17444, 673, 'Bariis'),
(17445, 673, 'Bolo'),
(17446, 673, 'Bon-Ot Big'),
(17447, 673, 'Bon-Ot Small'),
(17448, 673, 'Cabagahan'),
(17449, 673, 'Calayuan'),
(17450, 673, 'Calintaan'),
(17451, 673, 'Caloocan (Pob.)'),
(17452, 673, 'Calpi'),
(17453, 673, 'Camachiles (Pob.)'),
(17454, 673, 'Camcaman (Pob.)'),
(17455, 673, 'Coron-coron'),
(17456, 673, 'Culasi'),
(17457, 673, 'Gadgaron'),
(17458, 673, 'Genablan Occidental'),
(17459, 673, 'Genablan Oriental'),
(17460, 673, 'Hidhid'),
(17461, 673, 'Laboy'),
(17462, 673, 'Lajong'),
(17463, 673, 'Mambajog'),
(17464, 673, 'Manjunlad'),
(17465, 673, 'Manurabi'),
(17466, 673, 'Naburacan'),
(17467, 673, 'Paghuliran'),
(17468, 673, 'Pangi'),
(17469, 673, 'Pawa'),
(17470, 673, 'Poropandan'),
(17471, 673, 'Santa Isabel'),
(17472, 673, 'Sinalmacan'),
(17473, 673, 'Sinang-Atan'),
(17474, 673, 'Sinibaran'),
(17475, 673, 'Sisigon'),
(17476, 673, 'Sua'),
(17477, 673, 'Sulangan'),
(17478, 673, 'Tablac (Pob.)'),
(17479, 673, 'Tabunan (Pob.)'),
(17480, 673, 'Tugas'),
(17481, 674, 'Abas'),
(17482, 674, 'Abucay'),
(17483, 674, 'Bantayan'),
(17484, 674, 'Banuyo (Pob.)'),
(17485, 674, 'Bayasong'),
(17486, 674, 'Bayawas'),
(17487, 674, 'Binanuahan (Pob.)'),
(17488, 674, 'Cabiguan'),
(17489, 674, 'Cagdongon'),
(17490, 674, 'Calongay'),
(17491, 674, 'Calpi'),
(17492, 674, 'Catamlangan'),
(17493, 674, 'Comapo-capo'),
(17494, 674, 'Danlog'),
(17495, 674, 'Dao (Pob.)'),
(17496, 674, 'Dapdap'),
(17497, 674, 'Del Rosario'),
(17498, 674, 'Esmerada'),
(17499, 674, 'Esperanza'),
(17500, 674, 'Guiron'),
(17501, 674, 'Ginablan'),
(17502, 674, 'Inang'),
(17503, 674, 'Inapugan'),
(17504, 674, 'Lubiano'),
(17505, 674, 'Leona'),
(17506, 674, 'Lipason'),
(17507, 674, 'Lourdes'),
(17508, 674, 'Lungib'),
(17509, 674, 'Lumbang'),
(17510, 674, 'Mabanate'),
(17511, 674, 'Malbog'),
(17512, 674, 'Marifosque (Pob.)'),
(17513, 674, 'Mercedes'),
(17514, 674, 'Migabod'),
(17515, 674, 'Naspi'),
(17516, 674, 'Palanas'),
(17517, 674, 'Pangpang'),
(17518, 674, 'Pinagsalog'),
(17519, 674, 'Pineda'),
(17520, 674, 'Poctol'),
(17521, 674, 'Pudo'),
(17522, 674, 'Putiao'),
(17523, 674, 'Sacnangan'),
(17524, 674, 'Salvacion'),
(17525, 674, 'San Antonio (Millabas)'),
(17526, 674, 'San Antonio (Sapa)'),
(17527, 674, 'San Jose'),
(17528, 674, 'San Rafael'),
(17529, 674, 'Santa Fe'),
(17530, 675, 'Brillante (Pob.)'),
(17531, 675, 'Bulawan'),
(17532, 675, 'Calao'),
(17533, 675, 'Carayat'),
(17534, 675, 'Diamante'),
(17535, 675, 'Gogon'),
(17536, 675, 'Lupi'),
(17537, 675, 'Manlabong'),
(17538, 675, 'Maningcay De Oro'),
(17539, 675, 'Perlas'),
(17540, 675, 'Quidolog'),
(17541, 675, 'Rizal'),
(17542, 675, 'San Antonio'),
(17543, 675, 'San Fernando'),
(17544, 675, 'San Isidro'),
(17545, 675, 'San Juan'),
(17546, 675, 'San Rafael'),
(17547, 675, 'San Ramon'),
(17548, 675, 'Santa Lourdes'),
(17549, 675, 'Santo Domingo'),
(17550, 675, 'Talisayan'),
(17551, 675, 'Tupaz'),
(17552, 675, 'Ulag'),
(17553, 676, 'La Esperanza'),
(17554, 676, 'Peñafrancia'),
(17555, 676, 'Barangay Poblacion I'),
(17556, 676, 'Barangay Poblacion II'),
(17557, 676, 'Barangay Poblacion III'),
(17558, 676, 'Barangay Poblacion IV'),
(17559, 676, 'Salvacion'),
(17560, 676, 'San Antonio'),
(17561, 676, 'San Bartolome'),
(17562, 676, 'San Eugenio'),
(17563, 676, 'San Isidro'),
(17564, 676, 'San Rafael'),
(17565, 676, 'San Roque'),
(17566, 676, 'San Sebastian'),
(17567, 677, 'Abuyog'),
(17568, 677, 'Almendras-Cogon (Pob.)'),
(17569, 677, 'Balogo (East District)'),
(17570, 677, 'Barayong'),
(17571, 677, 'Basud'),
(17572, 677, 'Bibincahan'),
(17573, 677, 'Bitan-o/Dalipay (Pob.)'),
(17574, 677, 'Bucalbucalan'),
(17575, 677, 'Buenavista (West District)'),
(17576, 677, 'Buhatan'),
(17577, 677, 'Bulabog'),
(17578, 677, 'Burabod (Pob.)'),
(17579, 677, 'Cabid-An'),
(17580, 677, 'Cambulaga'),
(17581, 677, 'Capuy'),
(17582, 677, 'Gimaloto'),
(17583, 677, 'Guinlajon'),
(17584, 677, 'Macabog'),
(17585, 677, 'Marinas'),
(17586, 677, 'Pamurayan'),
(17587, 677, 'Pangpang'),
(17588, 677, 'Panlayaan'),
(17589, 677, 'Peñafrancia'),
(17590, 677, 'Piot (Pob.)'),
(17591, 677, 'Polvorista (Pob.)'),
(17592, 677, 'Rizal'),
(17593, 677, 'Salog (Pob.)'),
(17594, 677, 'Salvacion (West District)'),
(17595, 677, 'Sampaloc (Pob.)'),
(17596, 677, 'San Isidro (West District)'),
(17597, 677, 'San Juan (Roro)'),
(17598, 677, 'Sirangan (Pob.)'),
(17599, 677, 'Sulucan (Pob.)'),
(17600, 677, 'Talisay (Pob.)'),
(17601, 677, 'Ticol'),
(17602, 677, 'Tugos'),
(17603, 677, 'Balete'),
(17604, 677, 'Balogo'),
(17605, 677, 'Bato'),
(17606, 677, 'Bon-Ot'),
(17607, 677, 'Bogña'),
(17608, 677, 'Buenavista (Bacon District)'),
(17609, 677, 'Cabarbuhan'),
(17610, 677, 'Caricaran'),
(17611, 677, 'Del Rosario'),
(17612, 677, 'Gatbo'),
(17613, 677, 'Jamislagan'),
(17614, 677, 'Maricrum'),
(17615, 677, 'Osiao'),
(17616, 677, 'Poblacion'),
(17617, 677, 'Rawis'),
(17618, 677, 'Salvacion (Bacon District)'),
(17619, 677, 'San Isidro (Bacon District)'),
(17620, 677, 'San Juan'),
(17621, 677, 'San Pascual'),
(17622, 677, 'San Ramon'),
(17623, 677, 'San Roque'),
(17624, 677, 'San Vicente'),
(17625, 677, 'Santa Cruz'),
(17626, 677, 'Santa Lucia'),
(17627, 677, 'Santo Domingo'),
(17628, 677, 'Santo Niño'),
(17629, 677, 'Sawanga'),
(17630, 677, 'Sugod'),
(17631, 678, 'Cabangila'),
(17632, 678, 'Cabugao'),
(17633, 678, 'Catmon'),
(17634, 678, 'Dalipdip'),
(17635, 678, 'Ginictan'),
(17636, 678, 'Linayasan'),
(17637, 678, 'Lumaynay'),
(17638, 678, 'Lupo'),
(17639, 678, 'Man-up'),
(17640, 678, 'Odiong'),
(17641, 678, 'Poblacion'),
(17642, 678, 'Quinasay-an'),
(17643, 678, 'Talon'),
(17644, 678, 'Tibiao'),
(17645, 679, 'Aranas'),
(17646, 679, 'Arcangel'),
(17647, 679, 'Calizo'),
(17648, 679, 'Cortes'),
(17649, 679, 'Feliciano'),
(17650, 679, 'Fulgencio'),
(17651, 679, 'Guanko'),
(17652, 679, 'Morales'),
(17653, 679, 'Oquendo'),
(17654, 679, 'Poblacion'),
(17655, 680, 'Agbanawan'),
(17656, 680, 'Bacan'),
(17657, 680, 'Badiangan'),
(17658, 680, 'Cerrudo'),
(17659, 680, 'Cupang'),
(17660, 680, 'Daguitan'),
(17661, 680, 'Daja Norte'),
(17662, 680, 'Daja Sur'),
(17663, 680, 'Dingle'),
(17664, 680, 'Jumarap'),
(17665, 680, 'Lapnag'),
(17666, 680, 'Libas'),
(17667, 680, 'Linabuan Sur'),
(17668, 680, 'Mambog'),
(17669, 680, 'Mangan'),
(17670, 680, 'Muguing'),
(17671, 680, 'Pagsanghan'),
(17672, 680, 'Palale'),
(17673, 680, 'Poblacion'),
(17674, 680, 'Polo'),
(17675, 680, 'Polocate'),
(17676, 680, 'San Isidro'),
(17677, 680, 'Sibalew'),
(17678, 680, 'Sigcay'),
(17679, 680, 'Taba-ao'),
(17680, 680, 'Tabayon'),
(17681, 680, 'Tinapuay'),
(17682, 680, 'Torralba'),
(17683, 680, 'Ugsod'),
(17684, 680, 'Venturanza'),
(17685, 681, 'Ambolong'),
(17686, 681, 'Angas'),
(17687, 681, 'Bay-ang'),
(17688, 681, 'Caiyang'),
(17689, 681, 'Cabugao'),
(17690, 681, 'Camaligan'),
(17691, 681, 'Camanci'),
(17692, 681, 'Ipil'),
(17693, 681, 'Lalab'),
(17694, 681, 'Lupit'),
(17695, 681, 'Magpag-ong'),
(17696, 681, 'Magubahay'),
(17697, 681, 'Mambuquiao'),
(17698, 681, 'Man-up'),
(17699, 681, 'Mandong'),
(17700, 681, 'Napti'),
(17701, 681, 'Palay'),
(17702, 681, 'Poblacion'),
(17703, 681, 'Songcolan'),
(17704, 681, 'Tabon'),
(17705, 682, 'Alegria'),
(17706, 682, 'Bagongbayan'),
(17707, 682, 'Balusbos'),
(17708, 682, 'Bel-is'),
(17709, 682, 'Cabugan'),
(17710, 682, 'El Progreso'),
(17711, 682, 'Habana'),
(17712, 682, 'Katipunan'),
(17713, 682, 'Mayapay'),
(17714, 682, 'Nazareth'),
(17715, 682, 'Panilongan'),
(17716, 682, 'Poblacion'),
(17717, 682, 'Santander'),
(17718, 682, 'Tag-osip'),
(17719, 682, 'Tigum'),
(17720, 683, 'Agbago'),
(17721, 683, 'Agdugayan'),
(17722, 683, 'Antipolo'),
(17723, 683, 'Aparicio'),
(17724, 683, 'Aquino'),
(17725, 683, 'Aslum'),
(17726, 683, 'Bagacay'),
(17727, 683, 'Batuan'),
(17728, 683, 'Buenavista'),
(17729, 683, 'Bugtongbato'),
(17730, 683, 'Cabugao'),
(17731, 683, 'Capilijan'),
(17732, 683, 'Colongcolong'),
(17733, 683, 'Laguinbanua'),
(17734, 683, 'Mabusao'),
(17735, 683, 'Malindog'),
(17736, 683, 'Maloco'),
(17737, 683, 'Mina-a'),
(17738, 683, 'Monlaque'),
(17739, 683, 'Naile'),
(17740, 683, 'Naisud'),
(17741, 683, 'Naligusan'),
(17742, 683, 'Ondoy'),
(17743, 683, 'Poblacion'),
(17744, 683, 'Polo'),
(17745, 683, 'Regador'),
(17746, 683, 'Rivera'),
(17747, 683, 'Rizal'),
(17748, 683, 'San Isidro'),
(17749, 683, 'San Jose'),
(17750, 683, 'Santa Cruz'),
(17751, 683, 'Tagbaya'),
(17752, 683, 'Tul-ang'),
(17753, 683, 'Unat'),
(17754, 683, 'Yawan'),
(17755, 684, 'Andagaw'),
(17756, 684, 'Bachaw Norte'),
(17757, 684, 'Bachaw Sur'),
(17758, 684, 'Briones'),
(17759, 684, 'Buswang New'),
(17760, 684, 'Buswang Old'),
(17761, 684, 'Caano'),
(17762, 684, 'Estancia'),
(17763, 684, 'Linabuan Norte'),
(17764, 684, 'Mabilo'),
(17765, 684, 'Mobo'),
(17766, 684, 'Nalook'),
(17767, 684, 'Poblacion'),
(17768, 684, 'Pook'),
(17769, 684, 'Tigayon'),
(17770, 684, 'Tinigaw'),
(17771, 685, 'Agcawilan'),
(17772, 685, 'Bagto'),
(17773, 685, 'Bugasongan'),
(17774, 685, 'Carugdog'),
(17775, 685, 'Cogon'),
(17776, 685, 'Ibao'),
(17777, 685, 'Mina'),
(17778, 685, 'Poblacion'),
(17779, 685, 'Santa Cruz'),
(17780, 685, 'Santa Cruz Bigaa'),
(17781, 685, 'Silakat-Nonok'),
(17782, 685, 'Tayhawan'),
(17783, 686, 'Agmailig'),
(17784, 686, 'Alfonso XII'),
(17785, 686, 'Batobato'),
(17786, 686, 'Bonza'),
(17787, 686, 'Calacabian'),
(17788, 686, 'Calamcan'),
(17789, 686, 'Can-Awan'),
(17790, 686, 'Casit-an'),
(17791, 686, 'Dalagsa-an'),
(17792, 686, 'Guadalupe'),
(17793, 686, 'Janlud'),
(17794, 686, 'Julita'),
(17795, 686, 'Luctoga'),
(17796, 686, 'Magugba'),
(17797, 686, 'Manika'),
(17798, 686, 'Ogsip'),
(17799, 686, 'Ortega'),
(17800, 686, 'Oyang'),
(17801, 686, 'Pampango'),
(17802, 686, 'Pinonoy'),
(17803, 686, 'Poblacion'),
(17804, 686, 'Rivera'),
(17805, 686, 'Rosal'),
(17806, 686, 'Sibalew'),
(17807, 687, 'Alaminos'),
(17808, 687, 'Alas-as'),
(17809, 687, 'Bacyang'),
(17810, 687, 'Balactasan'),
(17811, 687, 'Cabangahan'),
(17812, 687, 'Cabilawan'),
(17813, 687, 'Catabana'),
(17814, 687, 'Dit-Ana'),
(17815, 687, 'Galicia'),
(17816, 687, 'Guinatu-an'),
(17817, 687, 'Logohon'),
(17818, 687, 'Mamba'),
(17819, 687, 'Maria Cristina'),
(17820, 687, 'Medina'),
(17821, 687, 'Mercedes'),
(17822, 687, 'Napnot'),
(17823, 687, 'Pang-Itan'),
(17824, 687, 'Paningayan'),
(17825, 687, 'Panipiason'),
(17826, 687, 'Poblacion'),
(17827, 687, 'San Jose'),
(17828, 687, 'Singay'),
(17829, 687, 'Talangban'),
(17830, 687, 'Talimagao'),
(17831, 687, 'Tigbawan'),
(17832, 688, 'Agbalogo'),
(17833, 688, 'Aglucay'),
(17834, 688, 'Alibagon'),
(17835, 688, 'Bagong Barrio'),
(17836, 688, 'Baybay'),
(17837, 688, 'Cabatanga'),
(17838, 688, 'Cajilo'),
(17839, 688, 'Calangcang'),
(17840, 688, 'Calimbajan'),
(17841, 688, 'Castillo'),
(17842, 688, 'Cayangwan'),
(17843, 688, 'Dumga'),
(17844, 688, 'Libang'),
(17845, 688, 'Mantiguib'),
(17846, 688, 'Poblacion'),
(17847, 688, 'Tibiawan'),
(17848, 688, 'Tina'),
(17849, 688, 'Tugas'),
(17850, 689, 'Argao'),
(17851, 689, 'Balabag'),
(17852, 689, 'Balusbus'),
(17853, 689, 'Cabulihan'),
(17854, 689, 'Caticlan'),
(17855, 689, 'Cogon'),
(17856, 689, 'Cubay Norte'),
(17857, 689, 'Cubay Sur'),
(17858, 689, 'Dumlog'),
(17859, 689, 'Manoc-Manoc'),
(17860, 689, 'Naasug'),
(17861, 689, 'Nabaoy'),
(17862, 689, 'Napaan'),
(17863, 689, 'Poblacion'),
(17864, 689, 'San Viray'),
(17865, 689, 'Yapak'),
(17866, 689, 'Motag'),
(17867, 690, 'Banaybanay'),
(17868, 690, 'Biga-a'),
(17869, 690, 'Bulabud'),
(17870, 690, 'Cabayugan'),
(17871, 690, 'Capataga'),
(17872, 690, 'Cogon'),
(17873, 690, 'Dangcalan'),
(17874, 690, 'Kinalangay Nuevo'),
(17875, 690, 'Kinalangay Viejo'),
(17876, 690, 'Lilo-an'),
(17877, 690, 'Malandayon'),
(17878, 690, 'Manhanip'),
(17879, 690, 'Navitas'),
(17880, 690, 'Osman'),
(17881, 690, 'Poblacion'),
(17882, 690, 'Rosario'),
(17883, 690, 'San Dimas'),
(17884, 690, 'San Ramon'),
(17885, 690, 'San Roque'),
(17886, 690, 'Sipac'),
(17887, 690, 'Sugnod'),
(17888, 690, 'Tambuan'),
(17889, 690, 'Tigpalas'),
(17890, 691, 'Alimbo-Baybay'),
(17891, 691, 'Buenasuerte'),
(17892, 691, 'Buenafortuna'),
(17893, 691, 'Buenavista'),
(17894, 691, 'Gibon'),
(17895, 691, 'Habana'),
(17896, 691, 'Laserna'),
(17897, 691, 'Libertad'),
(17898, 691, 'Magallanes'),
(17899, 691, 'Matabana'),
(17900, 691, 'Nagustan'),
(17901, 691, 'Pawa'),
(17902, 691, 'Pinatuad'),
(17903, 691, 'Poblacion'),
(17904, 691, 'Rizal'),
(17905, 691, 'Solido'),
(17906, 691, 'Tagororoc'),
(17907, 691, 'Toledo'),
(17908, 691, 'Unidos'),
(17909, 691, 'Union'),
(17910, 692, 'Candelaria'),
(17911, 692, 'Cawayan'),
(17912, 692, 'Dumaguit'),
(17913, 692, 'Fatima'),
(17914, 692, 'Guinbaliwan'),
(17915, 692, 'Jalas'),
(17916, 692, 'Jugas'),
(17917, 692, 'Lawa-an'),
(17918, 692, 'Mabilo'),
(17919, 692, 'Mataphao'),
(17920, 692, 'Ochando'),
(17921, 692, 'Pinamuk-an'),
(17922, 692, 'Poblacion'),
(17923, 692, 'Polo'),
(17924, 692, 'Puis'),
(17925, 692, 'Tambak'),
(17926, 693, 'Albasan'),
(17927, 693, 'Aliputos'),
(17928, 693, 'Badio'),
(17929, 693, 'Bubog'),
(17930, 693, 'Bulwang'),
(17931, 693, 'Camanci Norte');
INSERT INTO `table_barangay` (`barangay_id`, `municipality_id`, `barangay_name`) VALUES
(17932, 693, 'Camanci Sur'),
(17933, 693, 'Dongon East'),
(17934, 693, 'Dongon West'),
(17935, 693, 'Joyao-joyao'),
(17936, 693, 'Laguinbanua East'),
(17937, 693, 'Laguinbanua West'),
(17938, 693, 'Marianos'),
(17939, 693, 'Navitas'),
(17940, 693, 'Poblacion'),
(17941, 693, 'Pusiw'),
(17942, 693, 'Tabangka'),
(17943, 694, 'Afga'),
(17944, 694, 'Baybay'),
(17945, 694, 'Dapdap'),
(17946, 694, 'Dumatad'),
(17947, 694, 'Jawili'),
(17948, 694, 'Lanipga'),
(17949, 694, 'Napatag'),
(17950, 694, 'Panayakan'),
(17951, 694, 'Poblacion'),
(17952, 694, 'Pudiot'),
(17953, 694, 'Tagas'),
(17954, 694, 'Tamalagon'),
(17955, 694, 'Tamokoe'),
(17956, 694, 'Tondog'),
(17957, 694, 'Vivo'),
(17958, 695, 'Bayo Grande'),
(17959, 695, 'Bayo Pequeño'),
(17960, 695, 'Butuan'),
(17961, 695, 'Casay'),
(17962, 695, 'Casay Viejo'),
(17963, 695, 'Iba'),
(17964, 695, 'Igbarabatuan'),
(17965, 695, 'Igpalge'),
(17966, 695, 'Igtumarom'),
(17967, 695, 'Lisub A'),
(17968, 695, 'Lisub B'),
(17969, 695, 'Mabuyong'),
(17970, 695, 'Magdalena'),
(17971, 695, 'Nasuli C'),
(17972, 695, 'Nato'),
(17973, 695, 'Poblacion'),
(17974, 695, 'Sagua'),
(17975, 695, 'Salvacion'),
(17976, 695, 'San Francisco'),
(17977, 695, 'San Ramon'),
(17978, 695, 'San Roque'),
(17979, 695, 'Tagaytay'),
(17980, 695, 'Talisayan'),
(17981, 696, 'Baghari'),
(17982, 696, 'Bahuyan'),
(17983, 696, 'Beri'),
(17984, 696, 'Biga-a'),
(17985, 696, 'Binangbang'),
(17986, 696, 'Binangbang Centro'),
(17987, 696, 'Binanu-an'),
(17988, 696, 'Cadiao'),
(17989, 696, 'Calapadan'),
(17990, 696, 'Capoyuan'),
(17991, 696, 'Cubay'),
(17992, 696, 'Esparar'),
(17993, 696, 'Gua'),
(17994, 696, 'Idao'),
(17995, 696, 'Igpalge'),
(17996, 696, 'Igtunarum'),
(17997, 696, 'Embrangga-an'),
(17998, 696, 'Integasan'),
(17999, 696, 'Ipil'),
(18000, 696, 'Jinalinan'),
(18001, 696, 'Lanas'),
(18002, 696, 'Langcaon'),
(18003, 696, 'Lisub'),
(18004, 696, 'Lombuyan'),
(18005, 696, 'Mablad'),
(18006, 696, 'Magtulis'),
(18007, 696, 'Marigne'),
(18008, 696, 'Mayabay'),
(18009, 696, 'Mayos'),
(18010, 696, 'Nalusdan'),
(18011, 696, 'Narirong'),
(18012, 696, 'Palma'),
(18013, 696, 'Poblacion'),
(18014, 696, 'San Antonio'),
(18015, 696, 'San Ramon'),
(18016, 696, 'Soligao'),
(18017, 696, 'Tabongtabong'),
(18018, 696, 'Tig-Alaran'),
(18019, 696, 'Yapo'),
(18020, 697, 'Borocboroc'),
(18021, 697, 'Buenavista'),
(18022, 697, 'Concepcion'),
(18023, 697, 'Delima'),
(18024, 697, 'Ipil'),
(18025, 697, 'Maradiona'),
(18026, 697, 'Mojon'),
(18027, 697, 'Poblacion'),
(18028, 697, 'Rombang'),
(18029, 697, 'Salvacion'),
(18030, 697, 'Sinaja'),
(18031, 698, 'Anilawan'),
(18032, 698, 'Arangote'),
(18033, 698, 'Bagtason'),
(18034, 698, 'Camangahan'),
(18035, 698, 'Cubay North'),
(18036, 698, 'Cubay South'),
(18037, 698, 'Guija'),
(18038, 698, 'Igbalangao'),
(18039, 698, 'Igsoro'),
(18040, 698, 'Ilaures'),
(18041, 698, 'Jinalinan'),
(18042, 698, 'Lacayon'),
(18043, 698, 'Maray'),
(18044, 698, 'Paliwan'),
(18045, 698, 'Pangalcagan'),
(18046, 698, 'Centro Ilawod (Pob.)'),
(18047, 698, 'Centro Ilaya (Pob.)'),
(18048, 698, 'Centro Pojo (Pob.)'),
(18049, 698, 'Sabang East'),
(18050, 698, 'Sabang West'),
(18051, 698, 'Tagudtud North'),
(18052, 698, 'Tagudtud South'),
(18053, 698, 'Talisay'),
(18054, 698, 'Tica'),
(18055, 698, 'Tono-an'),
(18056, 698, 'Yapu'),
(18057, 698, 'Zaragoza'),
(18058, 699, 'Alegria'),
(18059, 699, 'Bacong'),
(18060, 699, 'Banago'),
(18061, 699, 'Bonbon'),
(18062, 699, 'Dawis'),
(18063, 699, 'Dionela'),
(18064, 699, 'Harigue'),
(18065, 699, 'Hininga-an'),
(18066, 699, 'Imba'),
(18067, 699, 'Masanag'),
(18068, 699, 'Poblacion'),
(18069, 699, 'Sabang'),
(18070, 699, 'Salamento'),
(18071, 699, 'Semirara'),
(18072, 699, 'Sibato'),
(18073, 699, 'Sibay'),
(18074, 699, 'Sibolo'),
(18075, 699, 'Tinogboc'),
(18076, 700, 'Alojipan'),
(18077, 700, 'Bagacay'),
(18078, 700, 'Balac-balac'),
(18079, 700, 'Magsaysay'),
(18080, 700, 'Batbatan Island'),
(18081, 700, 'Batonan Norte'),
(18082, 700, 'Batonan Sur'),
(18083, 700, 'Bita'),
(18084, 700, 'Bitadton Norte'),
(18085, 700, 'Bitadton Sur'),
(18086, 700, 'Buenavista'),
(18087, 700, 'Buhi'),
(18088, 700, 'Camancijan'),
(18089, 700, 'Caridad'),
(18090, 700, 'Carit-an'),
(18091, 700, 'Condes'),
(18092, 700, 'Esperanza'),
(18093, 700, 'Fe'),
(18094, 700, 'Flores'),
(18095, 700, 'Jalandoni'),
(18096, 700, 'Janlagasi'),
(18097, 700, 'Lamputong'),
(18098, 700, 'Lipata'),
(18099, 700, 'Malacañang'),
(18100, 700, 'Malalison Island'),
(18101, 700, 'Maniguin'),
(18102, 700, 'Naba'),
(18103, 700, 'Osorio'),
(18104, 700, 'Paningayan'),
(18105, 700, 'Centro Poblacion'),
(18106, 700, 'Centro Norte (Pob.)'),
(18107, 700, 'Centro Sur (Pob.)'),
(18108, 700, 'Salde'),
(18109, 700, 'San Antonio'),
(18110, 700, 'San Gregorio'),
(18111, 700, 'San Juan'),
(18112, 700, 'San Luis'),
(18113, 700, 'San Pascual'),
(18114, 700, 'San Vicente'),
(18115, 700, 'Simbola'),
(18116, 700, 'Tigbobolo'),
(18117, 700, 'Tinabusan'),
(18118, 700, 'Tomao'),
(18119, 700, 'Valderama'),
(18120, 701, 'Abaca'),
(18121, 701, 'Aras-Asan'),
(18122, 701, 'Arobo'),
(18123, 701, 'Atabay'),
(18124, 701, 'Atiotes'),
(18125, 701, 'Bagumbayan'),
(18126, 701, 'Balloscas'),
(18127, 701, 'Balud'),
(18128, 701, 'Barasanan A'),
(18129, 701, 'Barasanan B'),
(18130, 701, 'Barasanan C'),
(18131, 701, 'Bariri'),
(18132, 701, 'Camandagan'),
(18133, 701, 'Cato-ogan'),
(18134, 701, 'Danawan'),
(18135, 701, 'Diclum'),
(18136, 701, 'Fatima'),
(18137, 701, 'Gamad'),
(18138, 701, 'Igbalogo'),
(18139, 701, 'Igbangcal-A'),
(18140, 701, 'Igbangcal-B'),
(18141, 701, 'Igbangcal-C'),
(18142, 701, 'Igcabuad'),
(18143, 701, 'Igcado'),
(18144, 701, 'Igcalawagan'),
(18145, 701, 'Igcapuyas'),
(18146, 701, 'Igcasicad'),
(18147, 701, 'Igdalaguit'),
(18148, 701, 'Igdanlog'),
(18149, 701, 'Igdurarog'),
(18150, 701, 'Igtugas'),
(18151, 701, 'Lawigan'),
(18152, 701, 'Manaling'),
(18153, 701, 'Masayo'),
(18154, 701, 'Nagsubuan'),
(18155, 701, 'Paciencia'),
(18156, 701, 'Poblacion Norte'),
(18157, 701, 'Poblacion Sur'),
(18158, 701, 'Portillo'),
(18159, 701, 'Quezon'),
(18160, 701, 'Opsan'),
(18161, 701, 'Nasuli-A'),
(18162, 701, 'Salamague'),
(18163, 701, 'Santo Tomas'),
(18164, 701, 'Tacbuyan'),
(18165, 701, 'Tene'),
(18166, 701, 'Villaflor'),
(18167, 701, 'Ysulat'),
(18168, 701, 'Igcadac'),
(18169, 701, 'Lindero'),
(18170, 702, 'Apdo'),
(18171, 702, 'Asluman'),
(18172, 702, 'Banawon'),
(18173, 702, 'Bia-an'),
(18174, 702, 'Bongbongan I-II'),
(18175, 702, 'Bongbongan III'),
(18176, 702, 'Botbot'),
(18177, 702, 'Budbudan'),
(18178, 702, 'Buhang'),
(18179, 702, 'Calacja I'),
(18180, 702, 'Calacja II'),
(18181, 702, 'Calala'),
(18182, 702, 'Cantulan'),
(18183, 702, 'Caridad'),
(18184, 702, 'Caromangay'),
(18185, 702, 'Casalngan'),
(18186, 702, 'Dangcalan'),
(18187, 702, 'Del Pilar'),
(18188, 702, 'Fabrica'),
(18189, 702, 'Funda'),
(18190, 702, 'General Fullon'),
(18191, 702, 'Guintas'),
(18192, 702, 'Igbical'),
(18193, 702, 'Igbucagay'),
(18194, 702, 'Inabasan'),
(18195, 702, 'Ingwan-Batangan'),
(18196, 702, 'La Paz'),
(18197, 702, 'Gov. Evelio B. Javier'),
(18198, 702, 'Linaban'),
(18199, 702, 'Malandog'),
(18200, 702, 'Mapatag'),
(18201, 702, 'Masanag'),
(18202, 702, 'Nalihawan'),
(18203, 702, 'Pamandayan'),
(18204, 702, 'Pasu-Jungao'),
(18205, 702, 'Piape I'),
(18206, 702, 'Piape II'),
(18207, 702, 'Piape III'),
(18208, 702, 'Pili 1, 2, 3'),
(18209, 702, 'Poblacion 1'),
(18210, 702, 'Poblacion 2'),
(18211, 702, 'Poblacion 3'),
(18212, 702, 'Poblacion 4'),
(18213, 702, 'Poblacion 5'),
(18214, 702, 'Pu-ao'),
(18215, 702, 'Suloc'),
(18216, 702, 'Villavert-Jimenez'),
(18217, 703, 'Banban'),
(18218, 703, 'Bongbongan'),
(18219, 703, 'Cabariwan'),
(18220, 703, 'Cadajug'),
(18221, 703, 'Canituan'),
(18222, 703, 'Capnayan'),
(18223, 703, 'Casit-an'),
(18224, 703, 'Guinbanga-an'),
(18225, 703, 'Guiamon'),
(18226, 703, 'Guisijan'),
(18227, 703, 'Igtadiao'),
(18228, 703, 'Intao'),
(18229, 703, 'Jaguikican'),
(18230, 703, 'Jinalinan'),
(18231, 703, 'Lactudan'),
(18232, 703, 'Latazon'),
(18233, 703, 'Laua-an'),
(18234, 703, 'Loon'),
(18235, 703, 'Liberato'),
(18236, 703, 'Lindero'),
(18237, 703, 'Liya-liya'),
(18238, 703, 'Lugta'),
(18239, 703, 'Lupa-an'),
(18240, 703, 'Magyapo'),
(18241, 703, 'Maria'),
(18242, 703, 'Mauno'),
(18243, 703, 'Maybunga'),
(18244, 703, 'Necesito'),
(18245, 703, 'Oloc'),
(18246, 703, 'Omlot'),
(18247, 703, 'Pandanan'),
(18248, 703, 'Paningayan'),
(18249, 703, 'Pascuala'),
(18250, 703, 'Poblacion'),
(18251, 703, 'San Ramon'),
(18252, 703, 'Santiago'),
(18253, 703, 'Tibacan'),
(18254, 703, 'Tigunhao'),
(18255, 703, 'Virginia'),
(18256, 703, 'Bagongbayan'),
(18257, 704, 'Barusbus'),
(18258, 704, 'Bulanao'),
(18259, 704, 'Cubay'),
(18260, 704, 'Codiong'),
(18261, 704, 'Igcagay'),
(18262, 704, 'Inyawan'),
(18263, 704, 'Lindero'),
(18264, 704, 'Maramig'),
(18265, 704, 'Pucio'),
(18266, 704, 'Pajo'),
(18267, 704, 'Panangkilon'),
(18268, 704, 'Paz'),
(18269, 704, 'Centro Este (Pob.)'),
(18270, 704, 'Centro Weste (Pob.)'),
(18271, 704, 'San Roque'),
(18272, 704, 'Tinigbas'),
(18273, 704, 'Tinindugan'),
(18274, 704, 'Taboc'),
(18275, 704, 'Union'),
(18276, 705, 'Aracay'),
(18277, 705, 'Badiangan'),
(18278, 705, 'Bagumbayan'),
(18279, 705, 'Baybay'),
(18280, 705, 'Botbot'),
(18281, 705, 'Buang'),
(18282, 705, 'Cabugao'),
(18283, 705, 'Candari'),
(18284, 705, 'Carmen'),
(18285, 705, 'Centro Sur (Pob.)'),
(18286, 705, 'Dionela'),
(18287, 705, 'Dumrog'),
(18288, 705, 'Duyong'),
(18289, 705, 'Fragante'),
(18290, 705, 'Guia'),
(18291, 705, 'Idiacacan'),
(18292, 705, 'Jinalinan'),
(18293, 705, 'Luhod-Bayang'),
(18294, 705, 'Maadios'),
(18295, 705, 'Mag-aba'),
(18296, 705, 'Napuid'),
(18297, 705, 'Nauring'),
(18298, 705, 'Patria'),
(18299, 705, 'Perfecta'),
(18300, 705, 'Centro Norte (Pob.)'),
(18301, 705, 'San Andres'),
(18302, 705, 'San Joaquin'),
(18303, 705, 'Santa Ana'),
(18304, 705, 'Santa Cruz'),
(18305, 705, 'Santa Fe'),
(18306, 705, 'Santo Rosario'),
(18307, 705, 'Talisay'),
(18308, 705, 'Tingib'),
(18309, 705, 'Zaldivar'),
(18310, 706, 'Alvañiz'),
(18311, 706, 'Amparo'),
(18312, 706, 'Apgahan'),
(18313, 706, 'Aureliana'),
(18314, 706, 'Badiangan'),
(18315, 706, 'Bernaldo A. Julagting'),
(18316, 706, 'Carit-an'),
(18317, 706, 'Cuyapiao'),
(18318, 706, 'Villa Elio'),
(18319, 706, 'Gella'),
(18320, 706, 'Igbarawan'),
(18321, 706, 'Igbobon'),
(18322, 706, 'Igburi'),
(18323, 706, 'La Rioja'),
(18324, 706, 'Mabasa'),
(18325, 706, 'Macarina'),
(18326, 706, 'Magarang'),
(18327, 706, 'Magsaysay'),
(18328, 706, 'Padang'),
(18329, 706, 'Pandanan'),
(18330, 706, 'Patlabawon'),
(18331, 706, 'Poblacion'),
(18332, 706, 'Quezon'),
(18333, 706, 'Salaguiawan'),
(18334, 706, 'Samalague'),
(18335, 706, 'San Rafael'),
(18336, 706, 'Tobias Fornier'),
(18337, 706, 'Tamayoc'),
(18338, 706, 'Tigbalogo'),
(18339, 706, 'Villa Crespo'),
(18340, 706, 'Villa Cruz'),
(18341, 706, 'Villa Flores'),
(18342, 706, 'Villa Laua-an'),
(18343, 706, 'Villa Sal'),
(18344, 706, 'Villa Salomon'),
(18345, 706, 'Vista Alegre'),
(18346, 707, 'Atabay'),
(18347, 707, 'Badiang'),
(18348, 707, 'Barangay 1 (Pob.)'),
(18349, 707, 'Barangay 2 (Pob.)'),
(18350, 707, 'Barangay 3 (Pob.)'),
(18351, 707, 'Barangay 4 (Pob.)'),
(18352, 707, 'Barangay 5 (Pob.)'),
(18353, 707, 'Barangay 6 (Pob.)'),
(18354, 707, 'Barangay 7 (Pob.)'),
(18355, 707, 'Barangay 8 (Pob.)'),
(18356, 707, 'Bariri'),
(18357, 707, 'Bugarot'),
(18358, 707, 'Cansadan'),
(18359, 707, 'Durog'),
(18360, 707, 'Funda-Dalipe'),
(18361, 707, 'Igbonglo'),
(18362, 707, 'Inabasan'),
(18363, 707, 'Madrangca'),
(18364, 707, 'Magcalon'),
(18365, 707, 'Malaiba'),
(18366, 707, 'Maybato Norte'),
(18367, 707, 'Maybato Sur'),
(18368, 707, 'Mojon'),
(18369, 707, 'Pantao'),
(18370, 707, 'San Angel'),
(18371, 707, 'San Fernando'),
(18372, 707, 'San Pedro'),
(18373, 707, 'Supa'),
(18374, 708, 'Agricula'),
(18375, 708, 'Alegria'),
(18376, 708, 'Aningalan'),
(18377, 708, 'Atabay'),
(18378, 708, 'Bagumbayan'),
(18379, 708, 'Baladjay'),
(18380, 708, 'Banbanan'),
(18381, 708, 'Barangbang'),
(18382, 708, 'Bawang'),
(18383, 708, 'Bugo'),
(18384, 708, 'Bulan-bulan'),
(18385, 708, 'Cabiawan'),
(18386, 708, 'Cabunga-an'),
(18387, 708, 'Cadolonan'),
(18388, 708, 'Poblacion'),
(18389, 708, 'Carawisan I'),
(18390, 708, 'Carawisan II'),
(18391, 708, 'Carmelo I'),
(18392, 708, 'Carmelo II'),
(18393, 708, 'General Fullon'),
(18394, 708, 'General Luna'),
(18395, 708, 'Orquia'),
(18396, 708, 'Iguirindon'),
(18397, 708, 'Insubuan'),
(18398, 708, 'La Union'),
(18399, 708, 'Lapak'),
(18400, 708, 'Lumpatan'),
(18401, 708, 'Magdalena'),
(18402, 708, 'Maragubdub'),
(18403, 708, 'Nagbangi I'),
(18404, 708, 'Nagbangi II'),
(18405, 708, 'Nasuli'),
(18406, 708, 'Osorio I'),
(18407, 708, 'Osorio II'),
(18408, 708, 'Panpanan I'),
(18409, 708, 'Panpanan II'),
(18410, 708, 'Ramon Magsaysay'),
(18411, 708, 'Rizal'),
(18412, 708, 'San Rafael'),
(18413, 708, 'Sinundolan'),
(18414, 708, 'Sumaray'),
(18415, 708, 'Trinidad'),
(18416, 708, 'Tubudan'),
(18417, 708, 'Vilvar'),
(18418, 708, 'Walker'),
(18419, 709, 'Abiera'),
(18420, 709, 'Aguila'),
(18421, 709, 'Alegre'),
(18422, 709, 'Aras-Asan'),
(18423, 709, 'Bacalan'),
(18424, 709, 'Callan'),
(18425, 709, 'Nauhon'),
(18426, 709, 'P. Javier'),
(18427, 709, 'Poblacion'),
(18428, 709, 'Idio'),
(18429, 710, 'Alangan'),
(18430, 710, 'Valentin Grasparil'),
(18431, 710, 'Bari'),
(18432, 710, 'Biga-a'),
(18433, 710, 'Bongbongan I'),
(18434, 710, 'Bongbongan II'),
(18435, 710, 'Bongsod'),
(18436, 710, 'Bontol'),
(18437, 710, 'Bugnay'),
(18438, 710, 'Bulalacao'),
(18439, 710, 'Cabanbanan'),
(18440, 710, 'Cabariuan'),
(18441, 710, 'Cabladan'),
(18442, 710, 'Cadoldolan'),
(18443, 710, 'Calo-oy'),
(18444, 710, 'Calog'),
(18445, 710, 'Catmon'),
(18446, 710, 'Catungan I'),
(18447, 710, 'Catungan II'),
(18448, 710, 'Catungan III'),
(18449, 710, 'Catungan IV'),
(18450, 710, 'Cubay-Sermon'),
(18451, 710, 'Egaña'),
(18452, 710, 'Esperanza I'),
(18453, 710, 'Esperanza II'),
(18454, 710, 'Esperanza III'),
(18455, 710, 'Igcococ'),
(18456, 710, 'Igdalaquit'),
(18457, 710, 'Igdagmay'),
(18458, 710, 'Iglanot'),
(18459, 710, 'Igpanolong'),
(18460, 710, 'Igparas'),
(18461, 710, 'Igsuming'),
(18462, 710, 'Ilabas'),
(18463, 710, 'Imparayan'),
(18464, 710, 'Inabasan'),
(18465, 710, 'Indag-an'),
(18466, 710, 'Initan'),
(18467, 710, 'Insarayan'),
(18468, 710, 'Lacaron'),
(18469, 710, 'Lagdo'),
(18470, 710, 'Lambayagan'),
(18471, 710, 'Luna'),
(18472, 710, 'Luyang'),
(18473, 710, 'Maasin'),
(18474, 710, 'Mabini'),
(18475, 710, 'Millamena'),
(18476, 710, 'Mojon'),
(18477, 710, 'Nagdayao'),
(18478, 710, 'Cubay-Napultan'),
(18479, 710, 'Nazareth'),
(18480, 710, 'Odiong'),
(18481, 710, 'Olaga'),
(18482, 710, 'Pangpang'),
(18483, 710, 'Panlagangan'),
(18484, 710, 'Pantao'),
(18485, 710, 'Pasong'),
(18486, 710, 'Pis-Anan'),
(18487, 710, 'District I (Pob.)'),
(18488, 710, 'District II (Pob.)'),
(18489, 710, 'District III (Pob.)'),
(18490, 710, 'District IV (Pob.)'),
(18491, 710, 'Rombang'),
(18492, 710, 'Salvacion'),
(18493, 710, 'San Juan'),
(18494, 710, 'Sido'),
(18495, 710, 'Solong'),
(18496, 710, 'Tabongtabong'),
(18497, 710, 'Tig-Ohot'),
(18498, 710, 'Tigbalua I'),
(18499, 710, 'Tordesillas'),
(18500, 710, 'Tulatula'),
(18501, 710, 'Villafont'),
(18502, 710, 'Villahermosa'),
(18503, 710, 'Villar'),
(18504, 710, 'Tigbalua II'),
(18505, 711, 'Alegre'),
(18506, 711, 'Amar'),
(18507, 711, 'Bandoja'),
(18508, 711, 'Castillo'),
(18509, 711, 'Esparagoza'),
(18510, 711, 'Importante'),
(18511, 711, 'La Paz'),
(18512, 711, 'Malabor'),
(18513, 711, 'Martinez'),
(18514, 711, 'Natividad'),
(18515, 711, 'Pitac'),
(18516, 711, 'Poblacion'),
(18517, 711, 'Salazar'),
(18518, 711, 'San Francisco Norte'),
(18519, 711, 'San Francisco Sur'),
(18520, 711, 'San Isidro'),
(18521, 711, 'Santa Ana'),
(18522, 711, 'Santa Justa'),
(18523, 711, 'Santo Rosario'),
(18524, 711, 'Tigbaboy'),
(18525, 711, 'Tuno'),
(18526, 712, 'Bakiang'),
(18527, 712, 'Binanogan'),
(18528, 712, 'Borocboroc'),
(18529, 712, 'Bugnay'),
(18530, 712, 'Buluangan I'),
(18531, 712, 'Buluangan II'),
(18532, 712, 'Bunsod'),
(18533, 712, 'Busog'),
(18534, 712, 'Cananghan'),
(18535, 712, 'Canipayan'),
(18536, 712, 'Cansilayan'),
(18537, 712, 'Culyat'),
(18538, 712, 'Iglinab'),
(18539, 712, 'Igmasandig'),
(18540, 712, 'Lublub'),
(18541, 712, 'Manlacbo'),
(18542, 712, 'Pandanan'),
(18543, 712, 'San Agustin'),
(18544, 712, 'Takas (Pob.)'),
(18545, 712, 'Tigmamale'),
(18546, 712, 'Ubos (Pob.)'),
(18547, 712, 'Alon'),
(18548, 713, 'Agcabugao'),
(18549, 713, 'Agdahon'),
(18550, 713, 'Agnaga'),
(18551, 713, 'Angub'),
(18552, 713, 'Balingasag'),
(18553, 713, 'Bito-on Ilawod'),
(18554, 713, 'Bito-on Ilaya'),
(18555, 713, 'Bun-od'),
(18556, 713, 'Carataya'),
(18557, 713, 'Lunayan'),
(18558, 713, 'Mahunodhunod'),
(18559, 713, 'Maindang'),
(18560, 713, 'Mainit'),
(18561, 713, 'Malagab-i'),
(18562, 713, 'Nagba'),
(18563, 713, 'Poblacion Ilawod'),
(18564, 713, 'Poblacion Ilaya'),
(18565, 713, 'Poblacion Takas'),
(18566, 713, 'Puti-an'),
(18567, 713, 'San Antonio'),
(18568, 713, 'Sinabsaban'),
(18569, 713, 'Mahabang Sapa'),
(18570, 714, 'Aganan'),
(18571, 714, 'Agtambi'),
(18572, 714, 'Agtanguay'),
(18573, 714, 'Balucuan'),
(18574, 714, 'Bita'),
(18575, 714, 'Centro'),
(18576, 714, 'Daplas'),
(18577, 714, 'Duyoc'),
(18578, 714, 'Ilas Sur'),
(18579, 714, 'Lacaron'),
(18580, 714, 'Malonoy'),
(18581, 714, 'Manhoy'),
(18582, 714, 'Mapulang Bato'),
(18583, 714, 'Matagnop'),
(18584, 714, 'Nasunogan'),
(18585, 714, 'Poblacion Ilawod'),
(18586, 714, 'Poblacion Ilaya'),
(18587, 714, 'Quinabcaban'),
(18588, 714, 'Quinayuya'),
(18589, 714, 'San Agustin'),
(18590, 715, 'Concepcion'),
(18591, 715, 'Consolacion'),
(18592, 715, 'Dolores'),
(18593, 715, 'Duran'),
(18594, 715, 'San Agustin'),
(18595, 715, 'San Jose'),
(18596, 715, 'San Martin'),
(18597, 715, 'San Miguel'),
(18598, 715, 'San Rafael'),
(18599, 715, 'San Roque'),
(18600, 715, 'Santa Carmen'),
(18601, 715, 'Santa Cruz'),
(18602, 715, 'Santa Monica'),
(18603, 715, 'Santa Rita'),
(18604, 715, 'Santa Teresa'),
(18605, 715, 'Santo Angel'),
(18606, 715, 'Santo Niño'),
(18607, 715, 'Santo Rosario'),
(18608, 715, 'Poblacion'),
(18609, 716, 'Agbatuan'),
(18610, 716, 'Aglalana'),
(18611, 716, 'Aglanot'),
(18612, 716, 'Agsirab'),
(18613, 716, 'Alipasiawan'),
(18614, 716, 'Astorga'),
(18615, 716, 'Bayog'),
(18616, 716, 'Bungsuan'),
(18617, 716, 'Calapawan'),
(18618, 716, 'Cubi'),
(18619, 716, 'Dacuton'),
(18620, 716, 'Dangula'),
(18621, 716, 'Gibato'),
(18622, 716, 'Codingle'),
(18623, 716, 'Guinotos'),
(18624, 716, 'Jambad'),
(18625, 716, 'Janguslob'),
(18626, 716, 'Lawaan'),
(18627, 716, 'Malonoy'),
(18628, 716, 'Nagsulang'),
(18629, 716, 'Ongol Ilawod'),
(18630, 716, 'Ongol Ilaya'),
(18631, 716, 'Poblacion Ilawod'),
(18632, 716, 'Poblacion Ilaya'),
(18633, 716, 'Sagrada Familia'),
(18634, 716, 'Salcedo'),
(18635, 716, 'San Juan'),
(18636, 716, 'Sibariwan'),
(18637, 716, 'Tamulalod'),
(18638, 716, 'Taslan'),
(18639, 716, 'Tina'),
(18640, 716, 'Tinaytayan'),
(18641, 716, 'Traciano'),
(18642, 717, 'Agmalobo'),
(18643, 717, 'Agustin Navarra'),
(18644, 717, 'Balaring'),
(18645, 717, 'Basiao'),
(18646, 717, 'Cabugao'),
(18647, 717, 'Cudian'),
(18648, 717, 'Ilaya-Ivisan'),
(18649, 717, 'Malocloc Norte'),
(18650, 717, 'Malocloc Sur'),
(18651, 717, 'Matnog'),
(18652, 717, 'Mianay'),
(18653, 717, 'Ondoy'),
(18654, 717, 'Poblacion Norte'),
(18655, 717, 'Poblacion Sur'),
(18656, 717, 'Santa Cruz'),
(18657, 718, 'Agambulong'),
(18658, 718, 'Agbun-od'),
(18659, 718, 'Agcagay'),
(18660, 718, 'Aglibacao'),
(18661, 718, 'Agloloway'),
(18662, 718, 'Bayebaye'),
(18663, 718, 'Caridad'),
(18664, 718, 'Esperanza'),
(18665, 718, 'Fe'),
(18666, 718, 'Ganzon'),
(18667, 718, 'Guintas'),
(18668, 718, 'Igang'),
(18669, 718, 'Jaena Norte'),
(18670, 718, 'Jaena Sur'),
(18671, 718, 'Jagnaya'),
(18672, 718, 'Lapaz'),
(18673, 718, 'Linambasan'),
(18674, 718, 'Lucero'),
(18675, 718, 'Maantol'),
(18676, 718, 'Masgrau'),
(18677, 718, 'Milan'),
(18678, 718, 'Molet'),
(18679, 718, 'Pangabat'),
(18680, 718, 'Pangabuan'),
(18681, 718, 'Pasol-o'),
(18682, 718, 'Poblacion'),
(18683, 718, 'San Jose'),
(18684, 718, 'San Juan'),
(18685, 718, 'San Vicente'),
(18686, 718, 'Santo Rosario'),
(18687, 719, 'Aglimocon'),
(18688, 719, 'Alasaging'),
(18689, 719, 'Alayunan'),
(18690, 719, 'Balighot'),
(18691, 719, 'Batabat'),
(18692, 719, 'Bongbongan'),
(18693, 719, 'Cabungahan'),
(18694, 719, 'Canapian'),
(18695, 719, 'Carataya'),
(18696, 719, 'Duluan'),
(18697, 719, 'East Villaflores'),
(18698, 719, 'Fernandez'),
(18699, 719, 'Guinbi-alan'),
(18700, 719, 'Indayagan'),
(18701, 719, 'Jebaca'),
(18702, 719, 'Maalan'),
(18703, 719, 'Manayupit'),
(18704, 719, 'New Guia'),
(18705, 719, 'Quevedo'),
(18706, 719, 'Old Guia'),
(18707, 719, 'Palaguian'),
(18708, 719, 'Parallan'),
(18709, 719, 'Piña'),
(18710, 719, 'Poblacion Ilawod'),
(18711, 719, 'Poblacion Ilaya'),
(18712, 719, 'Poblacion Tabuc'),
(18713, 719, 'Quinabonglan'),
(18714, 719, 'Quinat-uyan'),
(18715, 719, 'Salgan'),
(18716, 719, 'Tapulang'),
(18717, 719, 'Tuburan'),
(18718, 719, 'West Villaflores'),
(18719, 720, 'Atiplo'),
(18720, 720, 'Balat-an'),
(18721, 720, 'Balit'),
(18722, 720, 'Batiano'),
(18723, 720, 'Bating'),
(18724, 720, 'Bato Bato'),
(18725, 720, 'Baye'),
(18726, 720, 'Bergante'),
(18727, 720, 'Bunga'),
(18728, 720, 'Bula'),
(18729, 720, 'Bungsi'),
(18730, 720, 'Burias'),
(18731, 720, 'Caidquid'),
(18732, 720, 'Cala-agus'),
(18733, 720, 'Libo-o'),
(18734, 720, 'Manibad'),
(18735, 720, 'Maralag'),
(18736, 720, 'Najus-an'),
(18737, 720, 'Pangpang Norte'),
(18738, 720, 'Pangpang Sur'),
(18739, 720, 'Pinay'),
(18740, 720, 'Poblacion Proper'),
(18741, 720, 'Poblacion Tabuc'),
(18742, 720, 'Sinondojan'),
(18743, 720, 'Tugas'),
(18744, 720, 'Tumalalud'),
(18745, 721, 'Agbalo'),
(18746, 721, 'Agbanban'),
(18747, 721, 'Agojo'),
(18748, 721, 'Anhawon'),
(18749, 721, 'Bagacay'),
(18750, 721, 'Bago Chiquito'),
(18751, 721, 'Bago Grande'),
(18752, 721, 'Bahit'),
(18753, 721, 'Bantique'),
(18754, 721, 'Bato'),
(18755, 721, 'Binangig'),
(18756, 721, 'Binantuan'),
(18757, 721, 'Bonga'),
(18758, 721, 'Buntod'),
(18759, 721, 'Butacal'),
(18760, 721, 'Cabugao Este'),
(18761, 721, 'Cabugao Oeste'),
(18762, 721, 'Calapawan'),
(18763, 721, 'Calitan'),
(18764, 721, 'Candual'),
(18765, 721, 'Cogon'),
(18766, 721, 'Daga'),
(18767, 721, 'Ilamnay'),
(18768, 721, 'Jamul-awon'),
(18769, 721, 'Lanipga'),
(18770, 721, 'Lat-Asan'),
(18771, 721, 'Libon'),
(18772, 721, 'Linao'),
(18773, 721, 'Linateran'),
(18774, 721, 'Lomboy'),
(18775, 721, 'Lus-Onan'),
(18776, 721, 'Magubilan'),
(18777, 721, 'Navitas'),
(18778, 721, 'Pawa'),
(18779, 721, 'Pili'),
(18780, 721, 'Poblacion Ilawod'),
(18781, 721, 'Poblacion Ilaya'),
(18782, 721, 'Poblacion Tabuc'),
(18783, 721, 'Talasa'),
(18784, 721, 'Tanza Norte'),
(18785, 721, 'Tanza Sur'),
(18786, 721, 'Tico'),
(18787, 722, 'Agbabadiang'),
(18788, 722, 'Agkilo'),
(18789, 722, 'Agloway'),
(18790, 722, 'Ambilay'),
(18791, 722, 'Bahit'),
(18792, 722, 'Balatucan'),
(18793, 722, 'Banga-an'),
(18794, 722, 'Cabugao'),
(18795, 722, 'Cabangahan'),
(18796, 722, 'Cadio'),
(18797, 722, 'Cala-an'),
(18798, 722, 'Capagao'),
(18799, 722, 'Cogon'),
(18800, 722, 'Conciencia'),
(18801, 722, 'Ensenagan'),
(18802, 722, 'Intampilan'),
(18803, 722, 'Pasugue'),
(18804, 722, 'Poblacion Ilawod'),
(18805, 722, 'Poblacion Ilaya'),
(18806, 722, 'Quios'),
(18807, 722, 'Salocon'),
(18808, 722, 'Tabuc Norte'),
(18809, 722, 'Tabuc Sur'),
(18810, 722, 'Timpas'),
(18811, 722, 'Tincupon'),
(18812, 722, 'Tinigban'),
(18813, 723, 'Balogo'),
(18814, 723, 'Binaobawan'),
(18815, 723, 'Blasco'),
(18816, 723, 'Casanayan'),
(18817, 723, 'Cayus'),
(18818, 723, 'Dayhagan'),
(18819, 723, 'Dulangan'),
(18820, 723, 'Monteflor'),
(18821, 723, 'Natividad'),
(18822, 723, 'Olalo'),
(18823, 723, 'Poblacion'),
(18824, 723, 'Rosario'),
(18825, 723, 'San Antonio'),
(18826, 723, 'San Blas'),
(18827, 723, 'San Esteban'),
(18828, 723, 'San Fernando'),
(18829, 723, 'San Nicolas'),
(18830, 723, 'San Pedro'),
(18831, 723, 'San Ramon'),
(18832, 723, 'San Silvestre'),
(18833, 723, 'Sinamongan'),
(18834, 723, 'Santa Fe'),
(18835, 723, 'Tabun-acan'),
(18836, 723, 'Yating'),
(18837, 724, 'Agbanog'),
(18838, 724, 'Agdalipe'),
(18839, 724, 'Ameligan'),
(18840, 724, 'Bailan'),
(18841, 724, 'Banate'),
(18842, 724, 'Bantigue'),
(18843, 724, 'Binuntucan'),
(18844, 724, 'Cabugao'),
(18845, 724, 'Gabuc'),
(18846, 724, 'Guba'),
(18847, 724, 'Hipona'),
(18848, 724, 'Intungcan'),
(18849, 724, 'Jolongajog'),
(18850, 724, 'Lantangan'),
(18851, 724, 'Linampongan'),
(18852, 724, 'Malag-it'),
(18853, 724, 'Manapao'),
(18854, 724, 'Ilawod (Pob.)'),
(18855, 724, 'Ilaya (Pob.)'),
(18856, 724, 'Rizal'),
(18857, 724, 'San Pedro'),
(18858, 724, 'Solo'),
(18859, 724, 'Sublangon'),
(18860, 724, 'Tabuc'),
(18861, 724, 'Tacas'),
(18862, 724, 'Yatingan'),
(18863, 725, 'Aranguel'),
(18864, 725, 'Badiangon'),
(18865, 725, 'Bayuyan'),
(18866, 725, 'Cabugcabug'),
(18867, 725, 'Carmencita'),
(18868, 725, 'Cubay'),
(18869, 725, 'Culilang'),
(18870, 725, 'Goce'),
(18871, 725, 'Hanglid'),
(18872, 725, 'Ibaca'),
(18873, 725, 'Madulano'),
(18874, 725, 'Manoling'),
(18875, 725, 'Marita'),
(18876, 725, 'Pandan'),
(18877, 725, 'Pantalan Cabugcabug'),
(18878, 725, 'Pinamihagan'),
(18879, 725, 'Poblacion'),
(18880, 725, 'Pondol'),
(18881, 725, 'Quiajo'),
(18882, 725, 'Sangkal'),
(18883, 725, 'Santo Niño'),
(18884, 725, 'Vizcaya'),
(18885, 726, 'Adlawan'),
(18886, 726, 'Bago'),
(18887, 726, 'Balijuagan'),
(18888, 726, 'Banica'),
(18889, 726, 'Poblacion I'),
(18890, 726, 'Poblacion X'),
(18891, 726, 'Poblacion XI'),
(18892, 726, 'Poblacion II'),
(18893, 726, 'Poblacion III'),
(18894, 726, 'Poblacion IV'),
(18895, 726, 'Poblacion V'),
(18896, 726, 'Poblacion VI'),
(18897, 726, 'Poblacion VII'),
(18898, 726, 'Poblacion VIII'),
(18899, 726, 'Poblacion IX'),
(18900, 726, 'Barra'),
(18901, 726, 'Bato'),
(18902, 726, 'Baybay'),
(18903, 726, 'Bolo'),
(18904, 726, 'Cabugao'),
(18905, 726, 'Cagay'),
(18906, 726, 'Cogon'),
(18907, 726, 'Culajao'),
(18908, 726, 'Culasi'),
(18909, 726, 'Dumolog'),
(18910, 726, 'Dayao'),
(18911, 726, 'Dinginan'),
(18912, 726, 'Gabu-an'),
(18913, 726, 'Inzo Arnaldo Village'),
(18914, 726, 'Jumaguicjic'),
(18915, 726, 'Lanot'),
(18916, 726, 'Lawa-an'),
(18917, 726, 'Liong'),
(18918, 726, 'Libas'),
(18919, 726, 'Loctugan'),
(18920, 726, 'Lonoy'),
(18921, 726, 'Milibili'),
(18922, 726, 'Mongpong'),
(18923, 726, 'Olotayan'),
(18924, 726, 'Punta Cogon'),
(18925, 726, 'Punta Tabuc'),
(18926, 726, 'San Jose'),
(18927, 726, 'Sibaguan'),
(18928, 726, 'Talon'),
(18929, 726, 'Tanque'),
(18930, 726, 'Tanza'),
(18931, 726, 'Tiza'),
(18932, 727, 'Agsilab'),
(18933, 727, 'Agtatacay Norte'),
(18934, 727, 'Agtatacay Sur'),
(18935, 727, 'Bilao'),
(18936, 727, 'Damayan'),
(18937, 727, 'Dapdapan'),
(18938, 727, 'Lonoy'),
(18939, 727, 'Majanlud'),
(18940, 727, 'Maninang'),
(18941, 727, 'Poblacion'),
(18942, 728, 'Acbo'),
(18943, 728, 'Amaga'),
(18944, 728, 'Balucuan'),
(18945, 728, 'Bangonbangon'),
(18946, 728, 'Capuyhan'),
(18947, 728, 'Cogon'),
(18948, 728, 'Dayhagon'),
(18949, 728, 'Guintas'),
(18950, 728, 'Malapad Cogon'),
(18951, 728, 'Mangoso'),
(18952, 728, 'Mansacul'),
(18953, 728, 'Matangcong'),
(18954, 728, 'Matinabus'),
(18955, 728, 'Mianay'),
(18956, 728, 'Oyong'),
(18957, 728, 'Pagbunitan'),
(18958, 728, 'Parian'),
(18959, 728, 'Pinamalatican'),
(18960, 728, 'Poblacion Norte'),
(18961, 728, 'Poblacion Sur'),
(18962, 728, 'Tawog'),
(18963, 729, 'Abangay'),
(18964, 729, 'Acuña'),
(18965, 729, 'Agcococ'),
(18966, 729, 'Aglinab'),
(18967, 729, 'Aglupacan'),
(18968, 729, 'Agpalali'),
(18969, 729, 'Apero'),
(18970, 729, 'Artuz'),
(18971, 729, 'Bag-Ong Barrio'),
(18972, 729, 'Bato-bato'),
(18973, 729, 'Buri'),
(18974, 729, 'Camburanan'),
(18975, 729, 'Candelaria'),
(18976, 729, 'Carida'),
(18977, 729, 'Cristina'),
(18978, 729, 'Da-an Banwa'),
(18979, 729, 'Da-an Norte'),
(18980, 729, 'Da-an Sur'),
(18981, 729, 'Garcia'),
(18982, 729, 'Gebio-an'),
(18983, 729, 'Hilwan'),
(18984, 729, 'Initan'),
(18985, 729, 'Katipunan'),
(18986, 729, 'Lagdungan'),
(18987, 729, 'Lahug'),
(18988, 729, 'Libertad'),
(18989, 729, 'Mabini'),
(18990, 729, 'Maliao'),
(18991, 729, 'Malitbog'),
(18992, 729, 'Minan'),
(18993, 729, 'Nayawan'),
(18994, 729, 'Poblacion'),
(18995, 729, 'Rizal Norte'),
(18996, 729, 'Rizal Sur'),
(18997, 729, 'Roosevelt'),
(18998, 729, 'Roxas'),
(18999, 729, 'Salong'),
(19000, 729, 'San Antonio'),
(19001, 729, 'San Francisco'),
(19002, 729, 'San Jose'),
(19003, 729, 'San Julian'),
(19004, 729, 'San Miguel Ilawod'),
(19005, 729, 'San Miguel Ilaya'),
(19006, 729, 'San Nicolas'),
(19007, 729, 'San Pedro'),
(19008, 729, 'San Roque'),
(19009, 729, 'San Vicente'),
(19010, 729, 'Santa Ana'),
(19011, 729, 'Santa Petronila'),
(19012, 729, 'Senonod'),
(19013, 729, 'Siya'),
(19014, 729, 'Switch'),
(19015, 729, 'Tabon'),
(19016, 729, 'Tacayan'),
(19017, 729, 'Taft'),
(19018, 729, 'Taganghin'),
(19019, 729, 'Taslan'),
(19020, 729, 'Wright'),
(19021, 730, 'Adcadarao'),
(19022, 730, 'Agbobolo'),
(19023, 730, 'Badiangan'),
(19024, 730, 'Barrido'),
(19025, 730, 'Bato Biasong'),
(19026, 730, 'Bay-ang'),
(19027, 730, 'Bucana Bunglas'),
(19028, 730, 'Central'),
(19029, 730, 'Culasi'),
(19030, 730, 'Lanjagan'),
(19031, 730, 'Luca'),
(19032, 730, 'Malayu-an'),
(19033, 730, 'Mangorocoro'),
(19034, 730, 'Nasidman'),
(19035, 730, 'Pantalan Nabaye'),
(19036, 730, 'Pantalan Navarro'),
(19037, 730, 'Pedada'),
(19038, 730, 'Pili'),
(19039, 730, 'Pinantan Diel'),
(19040, 730, 'Pinantan Elizalde'),
(19041, 730, 'Pinay Espinosa'),
(19042, 730, 'Poblacion'),
(19043, 730, 'Progreso'),
(19044, 730, 'Puente Bunglas'),
(19045, 730, 'Punta Buri'),
(19046, 730, 'Rojas'),
(19047, 730, 'San Antonio'),
(19048, 730, 'Silagon'),
(19049, 730, 'Santo Rosario'),
(19050, 730, 'Tagubanhan'),
(19051, 730, 'Taguhangin'),
(19052, 730, 'Tanduyan'),
(19053, 730, 'Tipacla'),
(19054, 730, 'Tubogan'),
(19055, 731, 'Abang-abang'),
(19056, 731, 'Agsing'),
(19057, 731, 'Atabay'),
(19058, 731, 'Ba-ong'),
(19059, 731, 'Baguingin-Lanot'),
(19060, 731, 'Bagsakan'),
(19061, 731, 'Bagumbayan-Ilajas'),
(19062, 731, 'Balabago'),
(19063, 731, 'Ban-ag'),
(19064, 731, 'Bancal'),
(19065, 731, 'Binalud'),
(19066, 731, 'Bugang'),
(19067, 731, 'Buhay'),
(19068, 731, 'Bulod'),
(19069, 731, 'Cabacanan Proper'),
(19070, 731, 'Cabacanan Rizal'),
(19071, 731, 'Cagay'),
(19072, 731, 'Coline'),
(19073, 731, 'Coline-Dalag'),
(19074, 731, 'Cunsad'),
(19075, 731, 'Cuyad'),
(19076, 731, 'Dalid'),
(19077, 731, 'Dao'),
(19078, 731, 'Gines'),
(19079, 731, 'Ginomoy'),
(19080, 731, 'Ingwan'),
(19081, 731, 'Laylayan'),
(19082, 731, 'Lico'),
(19083, 731, 'Luan-luan'),
(19084, 731, 'Malamhay'),
(19085, 731, 'Malamboy-Bondolan'),
(19086, 731, 'Mambawi'),
(19087, 731, 'Manasa'),
(19088, 731, 'Manduyog'),
(19089, 731, 'Pajo'),
(19090, 731, 'Pianda-an Norte'),
(19091, 731, 'Pianda-an Sur'),
(19092, 731, 'Punong'),
(19093, 731, 'Quinaspan'),
(19094, 731, 'Sinamay'),
(19095, 731, 'Sulong'),
(19096, 731, 'Taban-Manguining'),
(19097, 731, 'Tabug'),
(19098, 731, 'Tarug'),
(19099, 731, 'Tugaslon'),
(19100, 731, 'Ubodan'),
(19101, 731, 'Ugbo'),
(19102, 731, 'Ulay-Bugang'),
(19103, 731, 'Ulay-Hinablan'),
(19104, 731, 'Umingan'),
(19105, 731, 'Poblacion'),
(19106, 732, 'Agbatuan'),
(19107, 732, 'Badiang'),
(19108, 732, 'Balabag'),
(19109, 732, 'Balunos'),
(19110, 732, 'Cag-an'),
(19111, 732, 'Camiros'),
(19112, 732, 'Sambag Culob'),
(19113, 732, 'Dangula-an'),
(19114, 732, 'Guipis'),
(19115, 732, 'Manganese'),
(19116, 732, 'Medina'),
(19117, 732, 'Mostro'),
(19118, 732, 'Palaypay'),
(19119, 732, 'Pantalan'),
(19120, 732, 'Poblacion'),
(19121, 732, 'San Carlos'),
(19122, 732, 'San Juan Crisostomo'),
(19123, 732, 'Santa Rita'),
(19124, 732, 'Santo Rosario'),
(19125, 732, 'Serallo'),
(19126, 732, 'Vista Alegre'),
(19127, 733, 'Agusipan'),
(19128, 733, 'Astorga'),
(19129, 733, 'Bita-oyan'),
(19130, 733, 'Botong'),
(19131, 733, 'Budiawe'),
(19132, 733, 'Cabanga-an'),
(19133, 733, 'Cabayogan'),
(19134, 733, 'Calansanan'),
(19135, 733, 'Catubig'),
(19136, 733, 'Guinawahan'),
(19137, 733, 'Ilongbukid'),
(19138, 733, 'Indorohan'),
(19139, 733, 'Iniligan'),
(19140, 733, 'Latawan'),
(19141, 733, 'Linayuan'),
(19142, 733, 'Mainguit'),
(19143, 733, 'Malublub'),
(19144, 733, 'Manaolan'),
(19145, 733, 'Mapili Grande'),
(19146, 733, 'Mapili Sanjo'),
(19147, 733, 'Odiongan'),
(19148, 733, 'Poblacion'),
(19149, 733, 'San Julian'),
(19150, 733, 'Sariri'),
(19151, 733, 'Sianon'),
(19152, 733, 'Sinuagan'),
(19153, 733, 'Talaba'),
(19154, 733, 'Tamocol'),
(19155, 733, 'Teneclan'),
(19156, 733, 'Tina'),
(19157, 733, 'Bingauan'),
(19158, 734, 'Aranjuez'),
(19159, 734, 'Bacolod'),
(19160, 734, 'Balanti-an'),
(19161, 734, 'Batuan'),
(19162, 734, 'Cabalic'),
(19163, 734, 'Camambugan'),
(19164, 734, 'Dolores'),
(19165, 734, 'Gimamanay'),
(19166, 734, 'Ipil'),
(19167, 734, 'Kinalkalan'),
(19168, 734, 'Lawis'),
(19169, 734, 'Malapoc'),
(19170, 734, 'Mamhut Norte'),
(19171, 734, 'Mamhut Sur'),
(19172, 734, 'Maya'),
(19173, 734, 'Pani-an'),
(19174, 734, 'Poblacion Norte'),
(19175, 734, 'Poblacion Sur'),
(19176, 734, 'Quiasan'),
(19177, 734, 'Salong'),
(19178, 734, 'Salvacion'),
(19179, 734, 'Tingui-an'),
(19180, 734, 'Zaragosa'),
(19181, 735, 'Alacaygan'),
(19182, 735, 'Bariga'),
(19183, 735, 'Belen'),
(19184, 735, 'Bobon'),
(19185, 735, 'Bularan'),
(19186, 735, 'Carmelo'),
(19187, 735, 'De La Paz'),
(19188, 735, 'Dugwakan'),
(19189, 735, 'Juanico'),
(19190, 735, 'Libertad'),
(19191, 735, 'Magdalo'),
(19192, 735, 'Managopaya'),
(19193, 735, 'Merced'),
(19194, 735, 'Poblacion'),
(19195, 735, 'San Salvador'),
(19196, 735, 'Talokgangan'),
(19197, 735, 'Zona Sur'),
(19198, 735, 'Fuentes*'),
(19199, 736, 'Acuit'),
(19200, 736, 'Agcuyawan Calsada'),
(19201, 736, 'Agcuyawan Pulo'),
(19202, 736, 'Bagongbong'),
(19203, 736, 'Baras'),
(19204, 736, 'Bungca'),
(19205, 736, 'Cabilauan'),
(19206, 736, 'Cruz'),
(19207, 736, 'Guintas'),
(19208, 736, 'Igbong'),
(19209, 736, 'Ilaud Poblacion'),
(19210, 736, 'Ilaya Poblacion'),
(19211, 736, 'Jalaud'),
(19212, 736, 'Lagubang'),
(19213, 736, 'Lanas'),
(19214, 736, 'Lico-an'),
(19215, 736, 'Linao'),
(19216, 736, 'Monpon'),
(19217, 736, 'Palaciawan'),
(19218, 736, 'Patag'),
(19219, 736, 'Salihid'),
(19220, 736, 'So-ol'),
(19221, 736, 'Sohoton'),
(19222, 736, 'Tabuc-Suba'),
(19223, 736, 'Tabucan'),
(19224, 736, 'Talisay'),
(19225, 736, 'Tinorian'),
(19226, 736, 'Tiwi'),
(19227, 736, 'Tubungan'),
(19228, 737, 'Bugnay'),
(19229, 737, 'California'),
(19230, 737, 'Del Pilar'),
(19231, 737, 'De la Peña'),
(19232, 737, 'General Luna'),
(19233, 737, 'La Fortuna'),
(19234, 737, 'Lipata'),
(19235, 737, 'Natividad'),
(19236, 737, 'Nueva Invencion'),
(19237, 737, 'Nueva Sevilla'),
(19238, 737, 'Poblacion'),
(19239, 737, 'Puerto Princesa'),
(19240, 737, 'Rizal'),
(19241, 737, 'San Antonio'),
(19242, 737, 'San Fernando'),
(19243, 737, 'San Francisco'),
(19244, 737, 'San Geronimo'),
(19245, 737, 'San Juan'),
(19246, 737, 'San Lucas'),
(19247, 737, 'San Miguel'),
(19248, 737, 'San Roque'),
(19249, 737, 'Santiago'),
(19250, 737, 'Santo Domingo'),
(19251, 737, 'Santo Tomas'),
(19252, 737, 'Ugasan'),
(19253, 737, 'Vista Alegre'),
(19254, 738, 'Alapasco'),
(19255, 738, 'Alinsolong'),
(19256, 738, 'Banban'),
(19257, 738, 'Batad Viejo'),
(19258, 738, 'Binon-an'),
(19259, 738, 'Bolhog'),
(19260, 738, 'Bulak Norte'),
(19261, 738, 'Bulak Sur'),
(19262, 738, 'Cabagohan'),
(19263, 738, 'Calangag'),
(19264, 738, 'Caw-i'),
(19265, 738, 'Drancalan'),
(19266, 738, 'Embarcadero'),
(19267, 738, 'Hamod'),
(19268, 738, 'Malico'),
(19269, 738, 'Nangka'),
(19270, 738, 'Pasayan'),
(19271, 738, 'Poblacion'),
(19272, 738, 'Quiazan Florete'),
(19273, 738, 'Quiazan Lopez'),
(19274, 738, 'Salong'),
(19275, 738, 'Santa Ana'),
(19276, 738, 'Tanao'),
(19277, 738, 'Tapi-an'),
(19278, 739, 'Agba-o'),
(19279, 739, 'Alabidhan'),
(19280, 739, 'Bulabog'),
(19281, 739, 'Cairohan'),
(19282, 739, 'Guinhulacan'),
(19283, 739, 'Inamyungan'),
(19284, 739, 'Malitbog Ilawod'),
(19285, 739, 'Malitbog Ilaya'),
(19286, 739, 'Ngingi-an'),
(19287, 739, 'Poblacion'),
(19288, 739, 'Quinangyana'),
(19289, 739, 'Quinar-Upan'),
(19290, 739, 'Tapacon'),
(19291, 739, 'Tubod'),
(19292, 740, 'Acao'),
(19293, 740, 'Amerang'),
(19294, 740, 'Amurao'),
(19295, 740, 'Anuang'),
(19296, 740, 'Ayaman'),
(19297, 740, 'Ayong'),
(19298, 740, 'Bacan'),
(19299, 740, 'Balabag'),
(19300, 740, 'Baluyan'),
(19301, 740, 'Banguit'),
(19302, 740, 'Bulay'),
(19303, 740, 'Cadoldolan'),
(19304, 740, 'Cagban'),
(19305, 740, 'Calawagan'),
(19306, 740, 'Calayo'),
(19307, 740, 'Duyanduyan'),
(19308, 740, 'Gaub'),
(19309, 740, 'Gines Interior'),
(19310, 740, 'Gines Patag'),
(19311, 740, 'Guibuangan Tigbauan'),
(19312, 740, 'Inabasan'),
(19313, 740, 'Inaca'),
(19314, 740, 'Inaladan'),
(19315, 740, 'Ingas'),
(19316, 740, 'Ito Norte'),
(19317, 740, 'Ito Sur'),
(19318, 740, 'Janipaan Central'),
(19319, 740, 'Janipaan Este'),
(19320, 740, 'Janipaan Oeste'),
(19321, 740, 'Janipaan Olo'),
(19322, 740, 'Jelicuon Lusaya'),
(19323, 740, 'Jelicuon Montinola'),
(19324, 740, 'Lag-an'),
(19325, 740, 'Leong'),
(19326, 740, 'Lutac'),
(19327, 740, 'Manguna'),
(19328, 740, 'Maraguit'),
(19329, 740, 'Morubuan'),
(19330, 740, 'Pacatin'),
(19331, 740, 'Pagotpot'),
(19332, 740, 'Pamul-Ogan'),
(19333, 740, 'Pamuringao Proper'),
(19334, 740, 'Pamuringao Garrido'),
(19335, 740, 'Zone I Pob.'),
(19336, 740, 'Zone X Pob.'),
(19337, 740, 'Zone XI Pob.'),
(19338, 740, 'Zone II Pob.'),
(19339, 740, 'Zone III Pob.'),
(19340, 740, 'Zone IV Pob.'),
(19341, 740, 'Zone V Pob.'),
(19342, 740, 'Zone VI Pob.'),
(19343, 740, 'Zone VII Pob.'),
(19344, 740, 'Zone VIII Pob.'),
(19345, 740, 'Zone IX Pob.'),
(19346, 740, 'Pungtod'),
(19347, 740, 'Puyas'),
(19348, 740, 'Salacay'),
(19349, 740, 'Sulanga'),
(19350, 740, 'Tabucan'),
(19351, 740, 'Tacdangan'),
(19352, 740, 'Talanghauan'),
(19353, 740, 'Tigbauan Road'),
(19354, 740, 'Tinio-an'),
(19355, 740, 'Tiring'),
(19356, 740, 'Tupol Central'),
(19357, 740, 'Tupol Este'),
(19358, 740, 'Tupol Oeste'),
(19359, 740, 'Tuy-an'),
(19360, 741, 'Agcalaga'),
(19361, 741, 'Aglibacao'),
(19362, 741, 'Aglonok'),
(19363, 741, 'Alibunan'),
(19364, 741, 'Badlan Grande'),
(19365, 741, 'Badlan Pequeño'),
(19366, 741, 'Badu'),
(19367, 741, 'Balaticon'),
(19368, 741, 'Banban Grande'),
(19369, 741, 'Banban Pequeño'),
(19370, 741, 'Binolosan Grande'),
(19371, 741, 'Binolosan Pequeño'),
(19372, 741, 'Cabagiao'),
(19373, 741, 'Cabugao'),
(19374, 741, 'Cahigon'),
(19375, 741, 'Barrio Calinog'),
(19376, 741, 'Camalongo'),
(19377, 741, 'Canabajan'),
(19378, 741, 'Caratagan'),
(19379, 741, 'Carvasana'),
(19380, 741, 'Dalid'),
(19381, 741, 'Datagan'),
(19382, 741, 'Gama Grande'),
(19383, 741, 'Gama Pequeño'),
(19384, 741, 'Garangan'),
(19385, 741, 'Guinbonyugan'),
(19386, 741, 'Guiso'),
(19387, 741, 'Hilwan'),
(19388, 741, 'Impalidan'),
(19389, 741, 'Ipil'),
(19390, 741, 'Jamin-ay'),
(19391, 741, 'Lampaya'),
(19392, 741, 'Libot'),
(19393, 741, 'Lonoy'),
(19394, 741, 'Malaguinabot'),
(19395, 741, 'Malapawe'),
(19396, 741, 'Malitbog Centro'),
(19397, 741, 'Mambiranan'),
(19398, 741, 'Manaripay'),
(19399, 741, 'Marandig'),
(19400, 741, 'Masaroy'),
(19401, 741, 'Maspasan'),
(19402, 741, 'Nalbugan'),
(19403, 741, 'Owak'),
(19404, 741, 'Poblacion Centro'),
(19405, 741, 'Poblacion Delgado'),
(19406, 741, 'Poblacion Rizal Ilaud'),
(19407, 741, 'Poblacion Ilaya'),
(19408, 741, 'Baje San Julian'),
(19409, 741, 'San Nicolas'),
(19410, 741, 'Simsiman'),
(19411, 741, 'Tabucan'),
(19412, 741, 'Tahing'),
(19413, 741, 'Tibiao'),
(19414, 741, 'Tigbayog'),
(19415, 741, 'Toyungan'),
(19416, 741, 'Ulayan'),
(19417, 741, 'Malag-it'),
(19418, 741, 'Supanga'),
(19419, 742, 'Abong'),
(19420, 742, 'Alipata'),
(19421, 742, 'Asluman'),
(19422, 742, 'Bancal'),
(19423, 742, 'Barangcalan'),
(19424, 742, 'Barosbos'),
(19425, 742, 'Punta Batuanan'),
(19426, 742, 'Binuluangan'),
(19427, 742, 'Bito-on'),
(19428, 742, 'Bolo'),
(19429, 742, 'Buaya'),
(19430, 742, 'Buenavista'),
(19431, 742, 'Isla De Cana'),
(19432, 742, 'Cabilao Grande'),
(19433, 742, 'Cabilao Pequeño'),
(19434, 742, 'Cabuguana'),
(19435, 742, 'Cawayan'),
(19436, 742, 'Dayhagan'),
(19437, 742, 'Gabi'),
(19438, 742, 'Granada'),
(19439, 742, 'Guinticgan'),
(19440, 742, 'Lantangan'),
(19441, 742, 'Manlot'),
(19442, 742, 'Nalumsan'),
(19443, 742, 'Pantalan'),
(19444, 742, 'Poblacion'),
(19445, 742, 'Punta'),
(19446, 742, 'San Fernando'),
(19447, 742, 'Tabugon'),
(19448, 742, 'Talingting'),
(19449, 742, 'Tarong'),
(19450, 742, 'Tinigban'),
(19451, 742, 'Tupaz'),
(19452, 743, 'Aglosong'),
(19453, 743, 'Agnaga'),
(19454, 743, 'Bacjawan Norte'),
(19455, 743, 'Bacjawan Sur'),
(19456, 743, 'Bagongon'),
(19457, 743, 'Batiti'),
(19458, 743, 'Botlog'),
(19459, 743, 'Calamigan'),
(19460, 743, 'Dungon'),
(19461, 743, 'Igbon'),
(19462, 743, 'Jamul-Awon'),
(19463, 743, 'Lo-ong'),
(19464, 743, 'Macalbang'),
(19465, 743, 'Macatunao'),
(19466, 743, 'Malangabang'),
(19467, 743, 'Maliogliog'),
(19468, 743, 'Niño'),
(19469, 743, 'Nipa'),
(19470, 743, 'Plandico'),
(19471, 743, 'Poblacion'),
(19472, 743, 'Polopina'),
(19473, 743, 'Salvacion'),
(19474, 743, 'Talotu-an'),
(19475, 743, 'Tambaliza'),
(19476, 743, 'Tamis-ac'),
(19477, 744, 'Abangay'),
(19478, 744, 'Agsalanan'),
(19479, 744, 'Agtatacay'),
(19480, 744, 'Alegria'),
(19481, 744, 'Bongloy'),
(19482, 744, 'Buenavista'),
(19483, 744, 'Caguyuman'),
(19484, 744, 'Calicuang'),
(19485, 744, 'Camambugan'),
(19486, 744, 'Dawis'),
(19487, 744, 'Ginalinan Nuevo'),
(19488, 744, 'Ginalinan Viejo'),
(19489, 744, 'Gutao'),
(19490, 744, 'Ilajas'),
(19491, 744, 'Libo-o'),
(19492, 744, 'Licu-an'),
(19493, 744, 'Lincud'),
(19494, 744, 'Matangharon'),
(19495, 744, 'Moroboro'),
(19496, 744, 'Namatay'),
(19497, 744, 'Nazuni'),
(19498, 744, 'Pandan'),
(19499, 744, 'Poblacion'),
(19500, 744, 'Potolan'),
(19501, 744, 'San Jose'),
(19502, 744, 'San Matias'),
(19503, 744, 'Siniba-an'),
(19504, 744, 'Tabugon'),
(19505, 744, 'Tambunac'),
(19506, 744, 'Tanghawan'),
(19507, 744, 'Tiguib'),
(19508, 744, 'Tinocuan'),
(19509, 744, 'Tulatula-an'),
(19510, 745, 'Agutayan'),
(19511, 745, 'Angare'),
(19512, 745, 'Anjawan'),
(19513, 745, 'Baac'),
(19514, 745, 'Bagongbong'),
(19515, 745, 'Balangigan'),
(19516, 745, 'Balingasag'),
(19517, 745, 'Banugan'),
(19518, 745, 'Batuan'),
(19519, 745, 'Bita'),
(19520, 745, 'Buenavista'),
(19521, 745, 'Bugtongan'),
(19522, 745, 'Cabudian'),
(19523, 745, 'Calaca-an'),
(19524, 745, 'Calang'),
(19525, 745, 'Calawinan'),
(19526, 745, 'Capaycapay'),
(19527, 745, 'Capuling'),
(19528, 745, 'Catig'),
(19529, 745, 'Dila-an'),
(19530, 745, 'Fundacion'),
(19531, 745, 'Inadlawan'),
(19532, 745, 'Jagdong'),
(19533, 745, 'Jaguimit'),
(19534, 745, 'Lacadon'),
(19535, 745, 'Luag'),
(19536, 745, 'Malusgod'),
(19537, 745, 'Maribuyong'),
(19538, 745, 'Minanga'),
(19539, 745, 'Monpon'),
(19540, 745, 'Navalas'),
(19541, 745, 'Pader'),
(19542, 745, 'Pandan'),
(19543, 745, 'Ponong Grande'),
(19544, 745, 'Ponong Pequeño'),
(19545, 745, 'Purog'),
(19546, 745, 'Romblon'),
(19547, 745, 'San Isidro'),
(19548, 745, 'Santo Niño'),
(19549, 745, 'Sawe'),
(19550, 745, 'Taminla'),
(19551, 745, 'Tinocuan'),
(19552, 745, 'Tipolo'),
(19553, 745, 'Poblacion A'),
(19554, 745, 'Poblacion B'),
(19555, 745, 'Poblacion C'),
(19556, 745, 'Poblacion D'),
(19557, 746, 'Bacay'),
(19558, 746, 'Bacong'),
(19559, 746, 'Balabag'),
(19560, 746, 'Balud'),
(19561, 746, 'Bantud'),
(19562, 746, 'Bantud Fabrica'),
(19563, 746, 'Baras'),
(19564, 746, 'Barasan'),
(19565, 746, 'Bolilao'),
(19566, 746, 'Calao'),
(19567, 746, 'Cali'),
(19568, 746, 'Cansilayan'),
(19569, 746, 'Capaliz'),
(19570, 746, 'Cayos'),
(19571, 746, 'Compayan'),
(19572, 746, 'Dacutan'),
(19573, 746, 'Ermita'),
(19574, 746, 'Pd Monfort South'),
(19575, 746, 'Ilaya 1st'),
(19576, 746, 'Ilaya 2nd'),
(19577, 746, 'Ilaya 3rd'),
(19578, 746, 'Jardin'),
(19579, 746, 'Lacturan'),
(19580, 746, 'Pd Monfort North'),
(19581, 746, 'Managuit'),
(19582, 746, 'Maquina'),
(19583, 746, 'Nanding Lopez'),
(19584, 746, 'Pagdugue'),
(19585, 746, 'Paloc Bigque'),
(19586, 746, 'Paloc Sool'),
(19587, 746, 'Patlad'),
(19588, 746, 'Pulao'),
(19589, 746, 'Rosario'),
(19590, 746, 'Sapao'),
(19591, 746, 'Sulangan'),
(19592, 746, 'Tabucan'),
(19593, 746, 'Talusan'),
(19594, 746, 'Tambobo'),
(19595, 746, 'Tamboilan'),
(19596, 746, 'Victorias'),
(19597, 746, 'Burgos-Regidor (Pob.)'),
(19598, 746, 'Aurora-del Pilar (Pob.)'),
(19599, 746, 'Buenaflor Embarkadero (Pob.)'),
(19600, 746, 'Lopez Jaena - Rizal (Pob.)'),
(19601, 746, 'Basa-Mabini Bonifacio (Pob.)'),
(19602, 747, 'Lumbia'),
(19603, 747, 'Bayas'),
(19604, 747, 'Bayuyan'),
(19605, 747, 'Botongon'),
(19606, 747, 'Bulaqueña'),
(19607, 747, 'Calapdan'),
(19608, 747, 'Cano-an'),
(19609, 747, 'Daan Banua'),
(19610, 747, 'Daculan'),
(19611, 747, 'Gogo'),
(19612, 747, 'Jolog'),
(19613, 747, 'Loguingot'),
(19614, 747, 'Malbog'),
(19615, 747, 'Manipulon'),
(19616, 747, 'Pa-on'),
(19617, 747, 'Villa Pani-an'),
(19618, 747, 'Poblacion Zone 1'),
(19619, 747, 'Lonoy'),
(19620, 747, 'San Roque'),
(19621, 747, 'Santa Ana'),
(19622, 747, 'Tabu-an'),
(19623, 747, 'Tacbuyan'),
(19624, 747, 'Tanza'),
(19625, 747, 'Poblacion Zone II'),
(19626, 747, 'Poblacion Zone III'),
(19627, 748, 'Anono-o'),
(19628, 748, 'Bacong'),
(19629, 748, 'Bagumbayan Pob.'),
(19630, 748, 'Balantad-Carlos Fruto (Pob.)'),
(19631, 748, 'Baras'),
(19632, 748, 'Binanua-an'),
(19633, 748, 'Torreblanca-Blumentritt (Pob.)'),
(19634, 748, 'Bongol San Miguel'),
(19635, 748, 'Bongol San Vicente'),
(19636, 748, 'Bulad'),
(19637, 748, 'Buluangan'),
(19638, 748, 'Burgos-Gengos (Pob.)'),
(19639, 748, 'Cabasi'),
(19640, 748, 'Cabubugan'),
(19641, 748, 'Calampitao'),
(19642, 748, 'Camangahan'),
(19643, 748, 'Generosa-Cristobal Colon (Pob.)'),
(19644, 748, 'Gerona-Gimeno (Pob.)'),
(19645, 748, 'Girado-Magsaysay (Pob.)'),
(19646, 748, 'Gotera (Pob.)'),
(19647, 748, 'Igcocolo'),
(19648, 748, 'Libo-on Gonzales (Pob.)'),
(19649, 748, 'Lubacan'),
(19650, 748, 'Nahapay'),
(19651, 748, 'Nalundan'),
(19652, 748, 'Nanga'),
(19653, 748, 'Nito-an Lupsag'),
(19654, 748, 'Particion'),
(19655, 748, 'Pescadores (Pob.)'),
(19656, 748, 'Rizal-Tuguisan (Pob.)'),
(19657, 748, 'Sipitan-Badiang'),
(19658, 748, 'Iyasan'),
(19659, 748, 'Santa Rosa-Laguna'),
(19660, 749, 'Alameda'),
(19661, 749, 'Amorogtong'),
(19662, 749, 'Anilawan'),
(19663, 749, 'Bagacay'),
(19664, 749, 'Bagacayan'),
(19665, 749, 'Bagay'),
(19666, 749, 'Balibagan'),
(19667, 749, 'Barasan'),
(19668, 749, 'Binanua-an'),
(19669, 749, 'Boclod'),
(19670, 749, 'Buenavista'),
(19671, 749, 'Buga'),
(19672, 749, 'Bugnay'),
(19673, 749, 'Calampitao'),
(19674, 749, 'Cale'),
(19675, 749, 'Corucuan'),
(19676, 749, 'Catiringan'),
(19677, 749, 'Igcabugao'),
(19678, 749, 'Igpigus'),
(19679, 749, 'Igtalongon'),
(19680, 749, 'Indaluyon'),
(19681, 749, 'Jovellar'),
(19682, 749, 'Kinagdan'),
(19683, 749, 'Lab-on'),
(19684, 749, 'Lacay Dol-Dol'),
(19685, 749, 'Lumangan'),
(19686, 749, 'Lutungan'),
(19687, 749, 'Mantangon'),
(19688, 749, 'Mulangan'),
(19689, 749, 'Pasong'),
(19690, 749, 'Passi'),
(19691, 749, 'Pinaopawan'),
(19692, 749, 'Barangay 1 Poblacion'),
(19693, 749, 'Barangay 2 Poblacion'),
(19694, 749, 'Barangay 3 Poblacion'),
(19695, 749, 'Barangay 4 Poblacion'),
(19696, 749, 'Barangay 5 Poblacion'),
(19697, 749, 'Barangay 6 Poblacion'),
(19698, 749, 'Riro-an'),
(19699, 749, 'San Ambrosio'),
(19700, 749, 'Santa Barbara'),
(19701, 749, 'Signe'),
(19702, 749, 'Tabiac'),
(19703, 749, 'Talayatay'),
(19704, 749, 'Taytay'),
(19705, 749, 'Tigbanaba'),
(19706, 750, 'Santa Cruz'),
(19707, 750, 'Aguinaldo'),
(19708, 750, 'Airport'),
(19709, 750, 'Alalasan Lapuz'),
(19710, 750, 'Arguelles'),
(19711, 750, 'Arsenal Aduana'),
(19712, 750, 'North Avanceña'),
(19713, 750, 'Bakhaw'),
(19714, 750, 'Balabago'),
(19715, 750, 'Balantang'),
(19716, 750, 'Baldoza'),
(19717, 750, 'Sinikway'),
(19718, 750, 'Bantud'),
(19719, 750, 'Banuyao'),
(19720, 750, 'Baybay Tanza'),
(19721, 750, 'Benedicto'),
(19722, 750, 'Bito-on'),
(19723, 750, 'Monica Blumentritt'),
(19724, 750, 'Bolilao'),
(19725, 750, 'Bonifacio Tanza'),
(19726, 750, 'Bonifacio'),
(19727, 750, 'Buhang'),
(19728, 750, 'Buhang Taft North'),
(19729, 750, 'Buntatala'),
(19730, 750, 'Seminario'),
(19731, 750, 'Caingin'),
(19732, 750, 'Calahunan'),
(19733, 750, 'Calaparan'),
(19734, 750, 'Calumpang'),
(19735, 750, 'Camalig'),
(19736, 750, 'El 98 Castilla'),
(19737, 750, 'Cochero'),
(19738, 750, 'Compania'),
(19739, 750, 'Concepcion-Montes'),
(19740, 750, 'Cuartero'),
(19741, 750, 'Cubay'),
(19742, 750, 'Danao'),
(19743, 750, 'Mabolo-Delgado'),
(19744, 750, 'Democracia'),
(19745, 750, 'Desamparados'),
(19746, 750, 'Divinagracia'),
(19747, 750, 'Don Esteban-Lapuz'),
(19748, 750, 'Dulonan'),
(19749, 750, 'Dungon'),
(19750, 750, 'Dungon A'),
(19751, 750, 'Dungon B'),
(19752, 750, 'East Baluarte'),
(19753, 750, 'East Timawa'),
(19754, 750, 'Edganzon'),
(19755, 750, 'Tanza-Esperanza'),
(19756, 750, 'Fajardo'),
(19757, 750, 'Flores'),
(19758, 750, 'South Fundidor'),
(19759, 750, 'General Hughes-Montes'),
(19760, 750, 'Gloria'),
(19761, 750, 'Gustilo'),
(19762, 750, 'Guzman-Jesena'),
(19763, 750, 'Habog-habog Salvacion'),
(19764, 750, 'Hibao-an Sur'),
(19765, 750, 'Hinactacan'),
(19766, 750, 'Hipodromo'),
(19767, 750, 'Inday'),
(19768, 750, 'Infante'),
(19769, 750, 'Ingore'),
(19770, 750, 'Jalandoni Estate-Lapuz'),
(19771, 750, 'Jalandoni-Wilson'),
(19772, 750, 'Delgado-Jalandoni-Bagumbayan'),
(19773, 750, 'Javellana'),
(19774, 750, 'Jereos'),
(19775, 750, 'Calubihan'),
(19776, 750, 'Kasingkasing'),
(19777, 750, 'Katilingban'),
(19778, 750, 'Kauswagan'),
(19779, 750, 'Our Lady Of Fatima'),
(19780, 750, 'Laguda'),
(19781, 750, 'Lanit'),
(19782, 750, 'Lapuz Norte'),
(19783, 750, 'Lapuz Sur'),
(19784, 750, 'Legaspi dela Rama'),
(19785, 750, 'Liberation'),
(19786, 750, 'Libertad, Santa Isabel'),
(19787, 750, 'Libertad-Lapuz'),
(19788, 750, 'Lopez Jaena'),
(19789, 750, 'Loboc-Lapuz'),
(19790, 750, 'Lopez Jaena Norte'),
(19791, 750, 'Lopez Jaena Sur'),
(19792, 750, 'Luna (Jaro)'),
(19793, 750, 'M. V. Hechanova'),
(19794, 750, 'Burgos-Mabini-Plaza'),
(19795, 750, 'Macarthur'),
(19796, 750, 'Magdalo'),
(19797, 750, 'Magsaysay'),
(19798, 750, 'Magsaysay Village'),
(19799, 750, 'Malipayon-Delgado'),
(19800, 750, 'Mansaya-Lapuz'),
(19801, 750, 'Marcelo H. del Pilar'),
(19802, 750, 'Maria Clara'),
(19803, 750, 'Maria Cristina'),
(19804, 750, 'Mohon'),
(19805, 750, 'Molo Boulevard'),
(19806, 750, 'Montinola'),
(19807, 750, 'Muelle Loney-Montes'),
(19808, 750, 'Nabitasan'),
(19809, 750, 'Navais'),
(19810, 750, 'Nonoy'),
(19811, 750, 'North Fundidor'),
(19812, 750, 'North Baluarte'),
(19813, 750, 'North San Jose'),
(19814, 750, 'Oñate de Leon'),
(19815, 750, 'Obrero-Lapuz'),
(19816, 750, 'Ortiz'),
(19817, 750, 'Osmeña'),
(19818, 750, 'Our Lady Of Lourdes'),
(19819, 750, 'Rizal Palapala I'),
(19820, 750, 'Rizal Palapala II'),
(19821, 750, 'PHHC Block 17'),
(19822, 750, 'PHHC Block 22 NHA'),
(19823, 750, 'Poblacion Molo'),
(19824, 750, 'President Roxas'),
(19825, 750, 'Progreso-Lapuz'),
(19826, 750, 'Punong-Lapuz'),
(19827, 750, 'Quezon'),
(19828, 750, 'Quintin Salas'),
(19829, 750, 'Rima-Rizal'),
(19830, 750, 'Rizal Estanzuela'),
(19831, 750, 'Rizal Ibarra'),
(19832, 750, 'Railway'),
(19833, 750, 'Roxas Village'),
(19834, 750, 'Sambag'),
(19835, 750, 'Sampaguita'),
(19836, 750, 'San Agustin'),
(19837, 750, 'San Antonio'),
(19838, 750, 'San Felix'),
(19839, 750, 'San Isidro (Jaro)'),
(19840, 750, 'Hibao-an Norte'),
(19841, 750, 'San Jose (Jaro)'),
(19842, 750, 'San Jose (Arevalo)'),
(19843, 750, 'San Juan'),
(19844, 750, 'San Nicolas'),
(19845, 750, 'San Pedro (Molo)'),
(19846, 750, 'San Pedro (Jaro)'),
(19847, 750, 'San Rafael'),
(19848, 750, 'San Roque'),
(19849, 750, 'San Vicente'),
(19850, 750, 'Santa Filomena'),
(19851, 750, 'Santa Rosa'),
(19852, 750, 'Santo Domingo'),
(19853, 750, 'Santo Niño Norte'),
(19854, 750, 'Santo Niño Sur'),
(19855, 750, 'Santo Rosario-Duran'),
(19856, 750, 'Simon Ledesma'),
(19857, 750, 'So-oc'),
(19858, 750, 'South Baluarte'),
(19859, 750, 'South San Jose'),
(19860, 750, 'Taal'),
(19861, 750, 'Tabuc Suba (Jaro)'),
(19862, 750, 'Tabucan'),
(19863, 750, 'Tacas'),
(19864, 750, 'Abeto Mirasol Taft South'),
(19865, 750, 'Tagbac'),
(19866, 750, 'Tap-oc'),
(19867, 750, 'Taytay Zone II'),
(19868, 750, 'Ticud'),
(19869, 750, 'Timawa Tanza I'),
(19870, 750, 'Timawa Tanza II'),
(19871, 750, 'Ungka'),
(19872, 750, 'Veterans Village'),
(19873, 750, 'Villa Anita'),
(19874, 750, 'West Habog-habog'),
(19875, 750, 'West Timawa'),
(19876, 750, 'Yulo-Arroyo'),
(19877, 750, 'Yulo Drive'),
(19878, 750, 'Zamora-Melliza'),
(19879, 750, 'Pale Benedicto Rizal'),
(19880, 750, 'Kahirupan'),
(19881, 750, 'Luna (La Paz)'),
(19882, 750, 'San Isidro (La Paz)'),
(19883, 750, 'San Jose'),
(19884, 750, 'Tabuc Suba (La Paz)'),
(19885, 750, 'Rizal'),
(19886, 751, 'Abangay'),
(19887, 751, 'Agcarope'),
(19888, 751, 'Aglobong'),
(19889, 751, 'Aguingay'),
(19890, 751, 'Anhawan'),
(19891, 751, 'Atimonan'),
(19892, 751, 'Balanac'),
(19893, 751, 'Barasalon'),
(19894, 751, 'Bongol'),
(19895, 751, 'Cabantog'),
(19896, 751, 'Calmay'),
(19897, 751, 'Canawili'),
(19898, 751, 'Canawillian'),
(19899, 751, 'Caranas'),
(19900, 751, 'Caraudan'),
(19901, 751, 'Carigangan'),
(19902, 751, 'Cunsad'),
(19903, 751, 'Dabong'),
(19904, 751, 'Damires'),
(19905, 751, 'Damo-ong'),
(19906, 751, 'Danao'),
(19907, 751, 'Gines'),
(19908, 751, 'Guadalupe'),
(19909, 751, 'Jibolo'),
(19910, 751, 'Kuyot'),
(19911, 751, 'Madong'),
(19912, 751, 'Manacabac'),
(19913, 751, 'Mangil'),
(19914, 751, 'Matag-ub'),
(19915, 751, 'Monte-Magapa'),
(19916, 751, 'Pangilihan'),
(19917, 751, 'Panuran'),
(19918, 751, 'Pararinga'),
(19919, 751, 'Patong-patong'),
(19920, 751, 'Quipot'),
(19921, 751, 'Santo Tomas'),
(19922, 751, 'Sarawag'),
(19923, 751, 'Tambal'),
(19924, 751, 'Tamu-an'),
(19925, 751, 'Tiringanan'),
(19926, 751, 'Tolarucan'),
(19927, 751, 'Tuburan'),
(19928, 751, 'Ubian'),
(19929, 751, 'Yabon'),
(19930, 751, 'Aquino Nobleza East (Pob.)');
INSERT INTO `table_barangay` (`barangay_id`, `municipality_id`, `barangay_name`) VALUES
(19931, 751, 'Aquino Nobleza West (Pob.)'),
(19932, 751, 'R. Armada (Pob.)'),
(19933, 751, 'Concepcion Pob.'),
(19934, 751, 'Golgota (Pob.)'),
(19935, 751, 'Locsin (Pob.)'),
(19936, 751, 'Don T. Lutero Center (Pob.)'),
(19937, 751, 'Don T. Lutero East (Pob.)'),
(19938, 751, 'Don T. Lutero West Pob.'),
(19939, 751, 'Crispin Salazar North (Pob.)'),
(19940, 751, 'Crispin Salazar South (Pob.)'),
(19941, 751, 'San Julian (Pob.)'),
(19942, 751, 'San Pedro (Pob.)'),
(19943, 751, 'Santa Rita (Pob.)'),
(19944, 751, 'Capt. A. Tirador (Pob.)'),
(19945, 751, 'S. M. Villa (Pob.)'),
(19946, 752, 'Agsirab'),
(19947, 752, 'Agtuman'),
(19948, 752, 'Alugmawa'),
(19949, 752, 'Badiangan'),
(19950, 752, 'Bogongbong'),
(19951, 752, 'Balagiao'),
(19952, 752, 'Banban'),
(19953, 752, 'Bansag'),
(19954, 752, 'Bayuco'),
(19955, 752, 'Binaba-an Armada'),
(19956, 752, 'Binaba-an Labayno'),
(19957, 752, 'Binaba-an Limoso'),
(19958, 752, 'Binaba-an Portigo'),
(19959, 752, 'Binaba-an Tirador'),
(19960, 752, 'Bonbon'),
(19961, 752, 'Bontoc'),
(19962, 752, 'Buri'),
(19963, 752, 'Burirao'),
(19964, 752, 'Buwang'),
(19965, 752, 'Cabatangan'),
(19966, 752, 'Cabugao'),
(19967, 752, 'Cabunlawan'),
(19968, 752, 'Caguisanan'),
(19969, 752, 'Caloy-Ahan'),
(19970, 752, 'Caninguan'),
(19971, 752, 'Capangyan'),
(19972, 752, 'Cayan Este'),
(19973, 752, 'Cayan Oeste'),
(19974, 752, 'Corot-on'),
(19975, 752, 'Coto'),
(19976, 752, 'Cubay'),
(19977, 752, 'Cunarum'),
(19978, 752, 'Daanbanwa'),
(19979, 752, 'Gines'),
(19980, 752, 'Hipgos'),
(19981, 752, 'Jayubo'),
(19982, 752, 'Jorog'),
(19983, 752, 'Lanot Grande'),
(19984, 752, 'Lanot Pequeño'),
(19985, 752, 'Legayada'),
(19986, 752, 'Lumanay'),
(19987, 752, 'Madarag'),
(19988, 752, 'Magbato'),
(19989, 752, 'Maite Grande'),
(19990, 752, 'Maite Pequeño'),
(19991, 752, 'Malag-it'),
(19992, 752, 'Manaulan'),
(19993, 752, 'Maribong'),
(19994, 752, 'Marong'),
(19995, 752, 'Misi'),
(19996, 752, 'Natividad'),
(19997, 752, 'Pajo'),
(19998, 752, 'Pandan'),
(19999, 752, 'Panuran'),
(20000, 752, 'Pasig'),
(20001, 752, 'Patag'),
(20002, 752, 'Poblacion Ilawod'),
(20003, 752, 'Poblacion Ilaya'),
(20004, 752, 'Poong'),
(20005, 752, 'Pughanan'),
(20006, 752, 'Pungsod'),
(20007, 752, 'Quiling'),
(20008, 752, 'Sagcup'),
(20009, 752, 'San Gregorio'),
(20010, 752, 'Sibacungan'),
(20011, 752, 'Sibaguan'),
(20012, 752, 'Simsiman'),
(20013, 752, 'Supoc'),
(20014, 752, 'Tampucao'),
(20015, 752, 'Tranghawan'),
(20016, 752, 'Tubungan'),
(20017, 752, 'Tuburan'),
(20018, 752, 'Walang'),
(20019, 753, 'M.V. Hechanova'),
(20020, 753, 'Bigke'),
(20021, 753, 'Buntatala'),
(20022, 753, 'Cagamutan Norte'),
(20023, 753, 'Cagamutan Sur'),
(20024, 753, 'Calaboa'),
(20025, 753, 'Camangay'),
(20026, 753, 'Cari Mayor'),
(20027, 753, 'Cari Minor'),
(20028, 753, 'Gua-an'),
(20029, 753, 'Guihaman'),
(20030, 753, 'Guinobatan'),
(20031, 753, 'Guintas'),
(20032, 753, 'Lapayon'),
(20033, 753, 'Nabitasan'),
(20034, 753, 'Napnud'),
(20035, 753, 'Poblacion'),
(20036, 753, 'San Vicente'),
(20037, 754, 'Agpipili'),
(20038, 754, 'Alcantara'),
(20039, 754, 'Almeñana'),
(20040, 754, 'Anabo'),
(20041, 754, 'Bankal'),
(20042, 754, 'Buenavista'),
(20043, 754, 'Cabantohan'),
(20044, 754, 'Capiñahan'),
(20045, 754, 'Dalipe'),
(20046, 754, 'Dapdapan'),
(20047, 754, 'Gerongan'),
(20048, 754, 'Imbaulan'),
(20049, 754, 'Layogbato'),
(20050, 754, 'Marapal'),
(20051, 754, 'Milan'),
(20052, 754, 'Nagsulang'),
(20053, 754, 'Nasapahan'),
(20054, 754, 'Omio'),
(20055, 754, 'Pacuan'),
(20056, 754, 'Poblacion NW Zone'),
(20057, 754, 'Poblacion SE Zone'),
(20058, 754, 'Pontoc'),
(20059, 754, 'San Antonio'),
(20060, 754, 'San Diego'),
(20061, 754, 'San Jose Moto'),
(20062, 754, 'Sepanton'),
(20063, 754, 'Sincua'),
(20064, 754, 'Tabunan'),
(20065, 754, 'Tugas'),
(20066, 754, 'Velasco'),
(20067, 754, 'Yawyawan'),
(20068, 755, 'Agboy Norte'),
(20069, 755, 'Agboy Sur'),
(20070, 755, 'Agta'),
(20071, 755, 'Ambulong'),
(20072, 755, 'Anonang'),
(20073, 755, 'Apian'),
(20074, 755, 'Avanzada'),
(20075, 755, 'Awis'),
(20076, 755, 'Ayabang'),
(20077, 755, 'Ayubo'),
(20078, 755, 'Bacolod'),
(20079, 755, 'Baje'),
(20080, 755, 'Banagan'),
(20081, 755, 'Barangbang'),
(20082, 755, 'Barasan'),
(20083, 755, 'Bayag Norte'),
(20084, 755, 'Bayag Sur'),
(20085, 755, 'Binolbog'),
(20086, 755, 'Biri Norte'),
(20087, 755, 'Biri Sur'),
(20088, 755, 'Bobon'),
(20089, 755, 'Bucari'),
(20090, 755, 'Buenavista'),
(20091, 755, 'Buga'),
(20092, 755, 'Bulad'),
(20093, 755, 'Bulwang'),
(20094, 755, 'Cabolo-an'),
(20095, 755, 'Cabunga-an'),
(20096, 755, 'Cabutongan'),
(20097, 755, 'Cagay'),
(20098, 755, 'Camandag'),
(20099, 755, 'Camando'),
(20100, 755, 'Cananaman'),
(20101, 755, 'Capt. Fernando'),
(20102, 755, 'Carara-an'),
(20103, 755, 'Carolina'),
(20104, 755, 'Cawilihan'),
(20105, 755, 'Coyugan Norte'),
(20106, 755, 'Coyugan Sur'),
(20107, 755, 'Danao'),
(20108, 755, 'Dorog'),
(20109, 755, 'Dusacan'),
(20110, 755, 'Gines'),
(20111, 755, 'Gumboc'),
(20112, 755, 'Igcadios'),
(20113, 755, 'Ingay'),
(20114, 755, 'Isian Norte'),
(20115, 755, 'Isian Victoria'),
(20116, 755, 'Jamog Gines'),
(20117, 755, 'Lanag'),
(20118, 755, 'Lang-og'),
(20119, 755, 'Ligtos'),
(20120, 755, 'Lonoc'),
(20121, 755, 'Lampaya'),
(20122, 755, 'Magcapay'),
(20123, 755, 'Maliao'),
(20124, 755, 'Malublub'),
(20125, 755, 'Manampunay'),
(20126, 755, 'Marirong'),
(20127, 755, 'Mina'),
(20128, 755, 'Mocol'),
(20129, 755, 'Nagbangi'),
(20130, 755, 'Nalbang'),
(20131, 755, 'Odong-odong'),
(20132, 755, 'Oluangan'),
(20133, 755, 'Omambong'),
(20134, 755, 'Paoy'),
(20135, 755, 'Pandan'),
(20136, 755, 'Panginman'),
(20137, 755, 'Pepe'),
(20138, 755, 'Poblacion'),
(20139, 755, 'Paga'),
(20140, 755, 'Salngan'),
(20141, 755, 'Samlague'),
(20142, 755, 'Siol Norte'),
(20143, 755, 'Siol Sur'),
(20144, 755, 'Tacuyong Norte'),
(20145, 755, 'Tacuyong Sur'),
(20146, 755, 'Tagsing'),
(20147, 755, 'Talacuan'),
(20148, 755, 'Ticuan'),
(20149, 755, 'Tina-an Norte'),
(20150, 755, 'Tina-an Sur'),
(20151, 755, 'Tunguan'),
(20152, 755, 'Tu-og'),
(20153, 756, 'Abay'),
(20154, 756, 'Abilay'),
(20155, 756, 'AGROCEL Pob.'),
(20156, 756, 'Amerang'),
(20157, 756, 'Bagacay East'),
(20158, 756, 'Bagacay West'),
(20159, 756, 'Bug-ot'),
(20160, 756, 'Bolo'),
(20161, 756, 'Bulay'),
(20162, 756, 'Buntalan'),
(20163, 756, 'Burak'),
(20164, 756, 'Cabangcalan'),
(20165, 756, 'Cabatac'),
(20166, 756, 'Caigon'),
(20167, 756, 'Cananghan'),
(20168, 756, 'Canawili'),
(20169, 756, 'Dagami'),
(20170, 756, 'Daja'),
(20171, 756, 'Dalusan'),
(20172, 756, 'DELCAR Pob.'),
(20173, 756, 'Inabasan'),
(20174, 756, 'Layog'),
(20175, 756, 'Liñagan Calsada'),
(20176, 756, 'Liñagan Tacas'),
(20177, 756, 'Linab'),
(20178, 756, 'MARI Pob.'),
(20179, 756, 'Magsaysay'),
(20180, 756, 'Mandog'),
(20181, 756, 'Miapa'),
(20182, 756, 'Nagba'),
(20183, 756, 'Nasaka'),
(20184, 756, 'Naslo-Bucao'),
(20185, 756, 'Nasuli'),
(20186, 756, 'Panalian'),
(20187, 756, 'Piandaan East'),
(20188, 756, 'Piandaan West'),
(20189, 756, 'Pispis'),
(20190, 756, 'Punong'),
(20191, 756, 'Sinubsuban'),
(20192, 756, 'Siwalo'),
(20193, 756, 'Santa Rita'),
(20194, 756, 'Subog'),
(20195, 756, 'THTP Pob.'),
(20196, 756, 'Tigbauan'),
(20197, 756, 'Trangka'),
(20198, 756, 'Tubang'),
(20199, 756, 'Tulahong'),
(20200, 756, 'Tuy-an East'),
(20201, 756, 'Tuy-an West'),
(20202, 756, 'Ubian'),
(20203, 757, 'Agdum'),
(20204, 757, 'Aguiauan'),
(20205, 757, 'Alimodias'),
(20206, 757, 'Awang'),
(20207, 757, 'Oya-oy'),
(20208, 757, 'Bacauan'),
(20209, 757, 'Bacolod'),
(20210, 757, 'Bagumbayan'),
(20211, 757, 'Banbanan'),
(20212, 757, 'Banga'),
(20213, 757, 'Bangladan'),
(20214, 757, 'Banuyao'),
(20215, 757, 'Baraclayan'),
(20216, 757, 'Bariri'),
(20217, 757, 'Baybay Norte (Pob.)'),
(20218, 757, 'Baybay Sur (Pob.)'),
(20219, 757, 'Belen'),
(20220, 757, 'Bolho (Pob.)'),
(20221, 757, 'Bolocaue'),
(20222, 757, 'Buenavista Norte'),
(20223, 757, 'Buenavista Sur'),
(20224, 757, 'Bugtong Lumangan'),
(20225, 757, 'Bugtong Naulid'),
(20226, 757, 'Cabalaunan'),
(20227, 757, 'Cabangcalan'),
(20228, 757, 'Cabunotan'),
(20229, 757, 'Cadoldolan'),
(20230, 757, 'Cagbang'),
(20231, 757, 'Caitib'),
(20232, 757, 'Calagtangan'),
(20233, 757, 'Calampitao'),
(20234, 757, 'Cavite'),
(20235, 757, 'Cawayanan'),
(20236, 757, 'Cubay'),
(20237, 757, 'Cubay Ubos'),
(20238, 757, 'Dalije'),
(20239, 757, 'Damilisan'),
(20240, 757, 'Dawog'),
(20241, 757, 'Diday'),
(20242, 757, 'Dingle'),
(20243, 757, 'Durog'),
(20244, 757, 'Frantilla'),
(20245, 757, 'Fundacion'),
(20246, 757, 'Gines'),
(20247, 757, 'Guibongan'),
(20248, 757, 'Igbita'),
(20249, 757, 'Igbugo'),
(20250, 757, 'Igcabidio'),
(20251, 757, 'Igcabito-on'),
(20252, 757, 'Igcatambor'),
(20253, 757, 'Igdalaquit'),
(20254, 757, 'Igdulaca'),
(20255, 757, 'Igpajo'),
(20256, 757, 'Igpandan'),
(20257, 757, 'Igpuro'),
(20258, 757, 'Igpuro-Bariri'),
(20259, 757, 'Igsoligue'),
(20260, 757, 'Igtuba'),
(20261, 757, 'Ilog-ilog'),
(20262, 757, 'Indag-an'),
(20263, 757, 'Kirayan Norte'),
(20264, 757, 'Kirayan Sur'),
(20265, 757, 'Kirayan Tacas'),
(20266, 757, 'La Consolacion'),
(20267, 757, 'Lacadon'),
(20268, 757, 'Lanutan'),
(20269, 757, 'Lumangan'),
(20270, 757, 'Mabayan'),
(20271, 757, 'Maduyo'),
(20272, 757, 'Malagyan'),
(20273, 757, 'Mambatad'),
(20274, 757, 'Maninila'),
(20275, 757, 'Maricolcol'),
(20276, 757, 'Maringyan'),
(20277, 757, 'Mat-y (Pob.)'),
(20278, 757, 'Matalngon'),
(20279, 757, 'Naclub'),
(20280, 757, 'Nam-o Sur'),
(20281, 757, 'Nam-o Norte'),
(20282, 757, 'Narat-an'),
(20283, 757, 'Narorogan'),
(20284, 757, 'Naulid'),
(20285, 757, 'Olango'),
(20286, 757, 'Ongyod'),
(20287, 757, 'Onop'),
(20288, 757, 'Oyungan'),
(20289, 757, 'Palaca'),
(20290, 757, 'Paro-on'),
(20291, 757, 'Potrido'),
(20292, 757, 'Pudpud'),
(20293, 757, 'Pungtod Monteclaro'),
(20294, 757, 'Pungtod Naulid'),
(20295, 757, 'Sag-on'),
(20296, 757, 'San Fernando'),
(20297, 757, 'San Jose'),
(20298, 757, 'San Rafael'),
(20299, 757, 'Sapa'),
(20300, 757, 'Saring'),
(20301, 757, 'Sibucao'),
(20302, 757, 'Taal'),
(20303, 757, 'Tabunacan'),
(20304, 757, 'Tacas (Pob.)'),
(20305, 757, 'Tambong'),
(20306, 757, 'Tan-agan'),
(20307, 757, 'Tatoy'),
(20308, 757, 'Ticdalan'),
(20309, 757, 'Tig-amaga'),
(20310, 757, 'Tig-Apog-Apog'),
(20311, 757, 'Tigbagacay'),
(20312, 757, 'Tiglawa'),
(20313, 757, 'Tigmalapad'),
(20314, 757, 'Tigmarabo'),
(20315, 757, 'To-og'),
(20316, 757, 'Tugura-ao'),
(20317, 757, 'Tumagboc'),
(20318, 757, 'Ubos Ilawod (Pob.)'),
(20319, 757, 'Ubos Ilaya (Pob.)'),
(20320, 757, 'Valencia'),
(20321, 757, 'Wayang'),
(20322, 758, 'Abat'),
(20323, 758, 'Agmanaphao'),
(20324, 758, 'Amiroy'),
(20325, 758, 'Badiangan'),
(20326, 758, 'Bangac'),
(20327, 758, 'Cabalabaguan'),
(20328, 758, 'Capul-an'),
(20329, 758, 'Dala'),
(20330, 758, 'Guibuangan'),
(20331, 758, 'Janipa-an West'),
(20332, 758, 'Janipa-an East'),
(20333, 758, 'Mina East (Pob.)'),
(20334, 758, 'Mina West (Pob.)'),
(20335, 758, 'Nasirum'),
(20336, 758, 'Naumuan'),
(20337, 758, 'Singay'),
(20338, 758, 'Talibong Grande'),
(20339, 758, 'Talibong Pequeño'),
(20340, 758, 'Tipolo'),
(20341, 758, 'Tolarucan'),
(20342, 758, 'Tumay'),
(20343, 758, 'Yugot'),
(20344, 759, 'Baclayan'),
(20345, 759, 'Badiang'),
(20346, 759, 'Balabag'),
(20347, 759, 'Bilidan'),
(20348, 759, 'Bita-og Gaja'),
(20349, 759, 'Bololacao'),
(20350, 759, 'Burot'),
(20351, 759, 'Cabilauan'),
(20352, 759, 'Cabugao'),
(20353, 759, 'Cagban'),
(20354, 759, 'Calumbuyan'),
(20355, 759, 'Damires'),
(20356, 759, 'Dawis'),
(20357, 759, 'General Delgado'),
(20358, 759, 'Guinobatan'),
(20359, 759, 'Janipa-an Oeste'),
(20360, 759, 'Jelicuon Este'),
(20361, 759, 'Jelicuon Oeste'),
(20362, 759, 'Pasil'),
(20363, 759, 'Poblacion'),
(20364, 759, 'Wari-wari'),
(20365, 760, 'Abilay Norte'),
(20366, 760, 'Abilay Sur'),
(20367, 760, 'Alegre'),
(20368, 760, 'Batuan Ilaud'),
(20369, 760, 'Batuan Ilaya'),
(20370, 760, 'Bita Norte'),
(20371, 760, 'Bita Sur'),
(20372, 760, 'Botong'),
(20373, 760, 'Buray'),
(20374, 760, 'Cabanbanan'),
(20375, 760, 'Caboloan Norte'),
(20376, 760, 'Caboloan Sur'),
(20377, 760, 'Cadinglian'),
(20378, 760, 'Cagbang'),
(20379, 760, 'Calam-isan'),
(20380, 760, 'Galang'),
(20381, 760, 'Lambuyao'),
(20382, 760, 'Mambog'),
(20383, 760, 'Pakiad'),
(20384, 760, 'Poblacion East'),
(20385, 760, 'Poblacion North'),
(20386, 760, 'Poblacion South'),
(20387, 760, 'Poblacion West'),
(20388, 760, 'Polo Maestra Bita'),
(20389, 760, 'Rizal'),
(20390, 760, 'Salngan'),
(20391, 760, 'Sambaludan'),
(20392, 760, 'San Antonio'),
(20393, 760, 'San Nicolas'),
(20394, 760, 'Santa Clara'),
(20395, 760, 'Santa Monica'),
(20396, 760, 'Santa Rita'),
(20397, 760, 'Tagbac Norte'),
(20398, 760, 'Tagbac Sur'),
(20399, 760, 'Trapiche'),
(20400, 760, 'Tuburan'),
(20401, 760, 'Turog-Turog'),
(20402, 761, 'Agdahon'),
(20403, 761, 'Agdayao'),
(20404, 761, 'Aglalana'),
(20405, 761, 'Agtabo'),
(20406, 761, 'Agtambo'),
(20407, 761, 'Alimono'),
(20408, 761, 'Arac'),
(20409, 761, 'Ayuyan'),
(20410, 761, 'Bacuranan'),
(20411, 761, 'Bagacay'),
(20412, 761, 'Batu'),
(20413, 761, 'Bayan'),
(20414, 761, 'Bitaogan'),
(20415, 761, 'Buenavista'),
(20416, 761, 'Buyo'),
(20417, 761, 'Cabunga'),
(20418, 761, 'Cadilang'),
(20419, 761, 'Cairohan'),
(20420, 761, 'Dalicanan'),
(20421, 761, 'Gemat-y'),
(20422, 761, 'Gemumua-agahon'),
(20423, 761, 'Gegachac'),
(20424, 761, 'Gines Viejo'),
(20425, 761, 'Imbang Grande'),
(20426, 761, 'Jaguimitan'),
(20427, 761, 'Libo-o'),
(20428, 761, 'Maasin'),
(20429, 761, 'Magdungao'),
(20430, 761, 'Malag-it Grande'),
(20431, 761, 'Malag-it Pequeño'),
(20432, 761, 'Mambiranan Grande'),
(20433, 761, 'Mambiranan Pequeño'),
(20434, 761, 'Man-it'),
(20435, 761, 'Mantulang'),
(20436, 761, 'Mulapula'),
(20437, 761, 'Nueva Union'),
(20438, 761, 'Pangi'),
(20439, 761, 'Pagaypay'),
(20440, 761, 'Poblacion Ilawod'),
(20441, 761, 'Poblacion Ilaya'),
(20442, 761, 'Punong'),
(20443, 761, 'Quinagaringan Grande'),
(20444, 761, 'Quinagaringan Pequeño'),
(20445, 761, 'Sablogon'),
(20446, 761, 'Salngan'),
(20447, 761, 'Santo Tomas'),
(20448, 761, 'Sarapan'),
(20449, 761, 'Tagubong'),
(20450, 761, 'Talongonan'),
(20451, 761, 'Tubod'),
(20452, 761, 'Tuburan'),
(20453, 762, 'Aganan'),
(20454, 762, 'Amparo'),
(20455, 762, 'Anilao'),
(20456, 762, 'Balabag'),
(20457, 762, 'Purok I (Pob.)'),
(20458, 762, 'Purok II (Pob.)'),
(20459, 762, 'Purok III (Pob.)'),
(20460, 762, 'Purok IV (Pob.)'),
(20461, 762, 'Cabugao Norte'),
(20462, 762, 'Cabugao Sur'),
(20463, 762, 'Jibao-an'),
(20464, 762, 'Mali-ao'),
(20465, 762, 'Pagsanga-an'),
(20466, 762, 'Pandac'),
(20467, 762, 'Tigum'),
(20468, 762, 'Ungka I'),
(20469, 762, 'Ungka II'),
(20470, 762, 'Pal-agon'),
(20471, 763, 'Abangay'),
(20472, 763, 'Amamaros'),
(20473, 763, 'Bagacay'),
(20474, 763, 'Barasan'),
(20475, 763, 'Batuan'),
(20476, 763, 'Bongco'),
(20477, 763, 'Cahaguichican'),
(20478, 763, 'Callan'),
(20479, 763, 'Cansilayan'),
(20480, 763, 'Casalsagan'),
(20481, 763, 'Cato-ogan'),
(20482, 763, 'Cau-ayan'),
(20483, 763, 'Culob'),
(20484, 763, 'Danao'),
(20485, 763, 'Dapitan'),
(20486, 763, 'Dawis'),
(20487, 763, 'Dongsol'),
(20488, 763, 'Fundacion'),
(20489, 763, 'Guinacas'),
(20490, 763, 'Guibuangan'),
(20491, 763, 'Igang'),
(20492, 763, 'Intaluan'),
(20493, 763, 'Iwa Ilaud'),
(20494, 763, 'Iwa Ilaya'),
(20495, 763, 'Jamabalud'),
(20496, 763, 'Jebioc'),
(20497, 763, 'Lay-Ahan'),
(20498, 763, 'Primitivo Ledesma Ward (Pob.)'),
(20499, 763, 'Lopez Jaena Ward (Pob.)'),
(20500, 763, 'Lumbo'),
(20501, 763, 'Macatol'),
(20502, 763, 'Malusgod'),
(20503, 763, 'Naslo'),
(20504, 763, 'Nabitasan'),
(20505, 763, 'Naga'),
(20506, 763, 'Nanga'),
(20507, 763, 'Pajo'),
(20508, 763, 'Palanguia'),
(20509, 763, 'Fernando Parcon Ward (Pob.)'),
(20510, 763, 'Pitogo'),
(20511, 763, 'Polot-an'),
(20512, 763, 'Purog'),
(20513, 763, 'Rumbang'),
(20514, 763, 'San Jose Ward (Pob.)'),
(20515, 763, 'Sinuagan'),
(20516, 763, 'Tuburan'),
(20517, 763, 'Tumcon Ilaya'),
(20518, 763, 'Tumcon Ilaud'),
(20519, 763, 'Ubang'),
(20520, 763, 'Zarrague'),
(20521, 764, 'Agdaliran'),
(20522, 764, 'Amayong'),
(20523, 764, 'Bagacay'),
(20524, 764, 'Batuan'),
(20525, 764, 'Bondulan'),
(20526, 764, 'Boroñgon'),
(20527, 764, 'Canas'),
(20528, 764, 'Capinang'),
(20529, 764, 'Cubay'),
(20530, 764, 'Cudionan'),
(20531, 764, 'Dugman'),
(20532, 764, 'Hacienda Conchita'),
(20533, 764, 'Madanlog'),
(20534, 764, 'Mandu-awak'),
(20535, 764, 'Moto'),
(20536, 764, 'Naborot'),
(20537, 764, 'Nipa'),
(20538, 764, 'Odiongan'),
(20539, 764, 'Pangi'),
(20540, 764, 'Pase'),
(20541, 764, 'Poblacion'),
(20542, 764, 'San Nicolas'),
(20543, 764, 'Santol'),
(20544, 764, 'Siempreviva'),
(20545, 764, 'Sua'),
(20546, 764, 'Talo-ato'),
(20547, 764, 'Tamangi'),
(20548, 764, 'Tiabas'),
(20549, 764, 'Tuble'),
(20550, 765, 'Abaca'),
(20551, 765, 'Asisig'),
(20552, 765, 'Bantayan'),
(20553, 765, 'Braulan'),
(20554, 765, 'Cabugao Nuevo'),
(20555, 765, 'Cabugao Viejo'),
(20556, 765, 'Camiri'),
(20557, 765, 'Compo'),
(20558, 765, 'Catan-Agan'),
(20559, 765, 'Cubay'),
(20560, 765, 'Dacal'),
(20561, 765, 'Dumiles'),
(20562, 765, 'Garita'),
(20563, 765, 'Gines Nuevo'),
(20564, 765, 'Imbang Pequeño'),
(20565, 765, 'Imbesad-an'),
(20566, 765, 'Iprog'),
(20567, 765, 'Lip-ac'),
(20568, 765, 'Madarag'),
(20569, 765, 'Mapili'),
(20570, 765, 'Paga'),
(20571, 765, 'Palje'),
(20572, 765, 'Poblacion Ilawod'),
(20573, 765, 'Poblacion Ilaya'),
(20574, 765, 'Quinolpan'),
(20575, 765, 'Rumagayray'),
(20576, 765, 'San Antonio'),
(20577, 765, 'Tambunac'),
(20578, 766, 'Amboyu-an'),
(20579, 766, 'Andres Bonifacio'),
(20580, 766, 'Antalon'),
(20581, 766, 'Bad-as'),
(20582, 766, 'Bagumbayan'),
(20583, 766, 'Balabago'),
(20584, 766, 'Baybay'),
(20585, 766, 'Bayunan'),
(20586, 766, 'Bolbogan'),
(20587, 766, 'Bulho'),
(20588, 766, 'Bucaya'),
(20589, 766, 'Cadluman'),
(20590, 766, 'Cadoldolan'),
(20591, 766, 'Camia'),
(20592, 766, 'Camaba-an'),
(20593, 766, 'Cata-an'),
(20594, 766, 'Crossing Dapuyan'),
(20595, 766, 'Cubay'),
(20596, 766, 'Cumarascas'),
(20597, 766, 'Dacdacanan'),
(20598, 766, 'Danawan'),
(20599, 766, 'Doldol'),
(20600, 766, 'Dongoc'),
(20601, 766, 'Escalantera'),
(20602, 766, 'Ginot-an'),
(20603, 766, 'Huna'),
(20604, 766, 'Igbaje'),
(20605, 766, 'Igbangcal'),
(20606, 766, 'Igbinangon'),
(20607, 766, 'Igburi'),
(20608, 766, 'Igcabutong'),
(20609, 766, 'Igcadlum'),
(20610, 766, 'Igcaphang'),
(20611, 766, 'Igcaratong'),
(20612, 766, 'Igcondao'),
(20613, 766, 'Igcores'),
(20614, 766, 'Igdagmay'),
(20615, 766, 'Igdomingding'),
(20616, 766, 'Iglilico'),
(20617, 766, 'Igpayong'),
(20618, 766, 'Jawod'),
(20619, 766, 'Langca'),
(20620, 766, 'Languanan'),
(20621, 766, 'Lawigan'),
(20622, 766, 'Lomboy'),
(20623, 766, 'Lopez Vito'),
(20624, 766, 'Mabini Norte'),
(20625, 766, 'Mabini Sur'),
(20626, 766, 'Manhara'),
(20627, 766, 'Maninila'),
(20628, 766, 'Masagud'),
(20629, 766, 'Matambog'),
(20630, 766, 'Mayunoc'),
(20631, 766, 'Montinola'),
(20632, 766, 'Nagquirisan'),
(20633, 766, 'Nadsadan'),
(20634, 766, 'Nagsipit'),
(20635, 766, 'New Gumawan'),
(20636, 766, 'Panatan'),
(20637, 766, 'Pitogo'),
(20638, 766, 'Purok 1 (Pob.)'),
(20639, 766, 'Purok 2 (Pob.)'),
(20640, 766, 'Purok 3 (Pob.)'),
(20641, 766, 'Purok 4 (Pob.)'),
(20642, 766, 'Purok 5 (Pob.)'),
(20643, 766, 'Qui-anan'),
(20644, 766, 'Roma'),
(20645, 766, 'San Luis'),
(20646, 766, 'San Mateo Norte'),
(20647, 766, 'San Mateo Sur'),
(20648, 766, 'Santiago'),
(20649, 766, 'Sinogbuhan'),
(20650, 766, 'Siwaragan'),
(20651, 766, 'Lomboyan'),
(20652, 766, 'Santa Rita'),
(20653, 766, 'Talagutac'),
(20654, 766, 'Tapikan'),
(20655, 766, 'Taslan'),
(20656, 766, 'Tiglawa'),
(20657, 766, 'Tiolas'),
(20658, 766, 'To-og'),
(20659, 766, 'Torocadan'),
(20660, 766, 'Ulay'),
(20661, 766, 'Bonga'),
(20662, 766, 'Guibongan Bayunan'),
(20663, 767, 'Bgy. 1 Pob.'),
(20664, 767, 'Bgy. 10'),
(20665, 767, 'Bgy. 11 Pob.'),
(20666, 767, 'Bgy. 12 Pob.'),
(20667, 767, 'Bgy. 13 Pob.'),
(20668, 767, 'Bgy. 14 Pob.'),
(20669, 767, 'Bgy. 15 Pob.'),
(20670, 767, 'Bgy. 16 Pob.'),
(20671, 767, 'Bgy. 2 Pob.'),
(20672, 767, 'Bgy. 3 Pob.'),
(20673, 767, 'Bgy. 4 Pob.'),
(20674, 767, 'Bgy. 5 Pob.'),
(20675, 767, 'Bgy. 6 Pob.'),
(20676, 767, 'Bgy. 7 Pob.'),
(20677, 767, 'Bgy. 8 Pob.'),
(20678, 767, 'Bgy. 9 Pob.'),
(20679, 767, 'Consolacion'),
(20680, 767, 'Igtambo'),
(20681, 767, 'San Antonio'),
(20682, 767, 'San Jose'),
(20683, 767, 'Santa Cruz'),
(20684, 767, 'Santa Teresa'),
(20685, 767, 'Santo Angel'),
(20686, 767, 'Santo Niño'),
(20687, 768, 'Aripdip'),
(20688, 768, 'Bagacay'),
(20689, 768, 'Calaigang'),
(20690, 768, 'Ilongbukid'),
(20691, 768, 'Poscolon'),
(20692, 768, 'San Andres'),
(20693, 768, 'San Dionisio'),
(20694, 768, 'San Florentino'),
(20695, 768, 'Poblacion'),
(20696, 769, 'Agusipan'),
(20697, 769, 'Agutayan'),
(20698, 769, 'Bagumbayan'),
(20699, 769, 'Balabag'),
(20700, 769, 'Balibagan Este'),
(20701, 769, 'Balibagan Oeste'),
(20702, 769, 'Ban-ag'),
(20703, 769, 'Bantay'),
(20704, 769, 'Barangay Zone I (Pob.)'),
(20705, 769, 'Barangay Zone II (Pob.)'),
(20706, 769, 'Barangay Zone III (Pob.)'),
(20707, 769, 'Barangay Zone IV (Pob.)'),
(20708, 769, 'Barangay Zone V (Pob.)'),
(20709, 769, 'Barasan Este'),
(20710, 769, 'Barasan Oeste'),
(20711, 769, 'Binangkilan'),
(20712, 769, 'Bitaog-Taytay'),
(20713, 769, 'Bolong Este'),
(20714, 769, 'Bolong Oeste'),
(20715, 769, 'Buayahon'),
(20716, 769, 'Buyo'),
(20717, 769, 'Cabugao Norte'),
(20718, 769, 'Cabugao Sur'),
(20719, 769, 'Cadagmayan Norte'),
(20720, 769, 'Cadagmayan Sur'),
(20721, 769, 'Cafe'),
(20722, 769, 'Calaboa Este'),
(20723, 769, 'Calaboa Oeste'),
(20724, 769, 'Camambugan'),
(20725, 769, 'Canipayan'),
(20726, 769, 'Conaynay'),
(20727, 769, 'Daga'),
(20728, 769, 'Dalid'),
(20729, 769, 'Duyanduyan'),
(20730, 769, 'Gen. Martin T. Delgado'),
(20731, 769, 'Guno'),
(20732, 769, 'Inangayan'),
(20733, 769, 'Jibao-an'),
(20734, 769, 'Lacadon'),
(20735, 769, 'Lanag'),
(20736, 769, 'Lupa'),
(20737, 769, 'Magancina'),
(20738, 769, 'Malawog'),
(20739, 769, 'Mambuyo'),
(20740, 769, 'Manhayang'),
(20741, 769, 'Miraga-Guibuangan'),
(20742, 769, 'Nasugban'),
(20743, 769, 'Omambog'),
(20744, 769, 'Pal-Agon'),
(20745, 769, 'Pungsod'),
(20746, 769, 'San Sebastian'),
(20747, 769, 'Sangcate'),
(20748, 769, 'Tagsing'),
(20749, 769, 'Talanghauan'),
(20750, 769, 'Talongadian'),
(20751, 769, 'Tigtig'),
(20752, 769, 'Tungay'),
(20753, 769, 'Tuburan'),
(20754, 769, 'Tugas'),
(20755, 769, 'Barangay Zone VI (Pob.)'),
(20756, 770, 'Aguirre'),
(20757, 770, 'Aldeguer'),
(20758, 770, 'Alibayog'),
(20759, 770, 'Anoring'),
(20760, 770, 'Apelo'),
(20761, 770, 'Apologista'),
(20762, 770, 'Aposaga'),
(20763, 770, 'Arante'),
(20764, 770, 'Ardemil'),
(20765, 770, 'Aspera'),
(20766, 770, 'Aswe-Pabriaga'),
(20767, 770, 'Bagaygay'),
(20768, 770, 'Bakabak'),
(20769, 770, 'Batitao'),
(20770, 770, 'Bato'),
(20771, 770, 'Del Castillo'),
(20772, 770, 'Castor'),
(20773, 770, 'Crespo'),
(20774, 770, 'Devera'),
(20775, 770, 'Domingo'),
(20776, 770, 'Ferraris'),
(20777, 770, 'Gildore'),
(20778, 770, 'Improgo'),
(20779, 770, 'Juaneza'),
(20780, 770, 'Labigan'),
(20781, 770, 'Lanciola'),
(20782, 770, 'Latawan'),
(20783, 770, 'Malapaya'),
(20784, 770, 'Muyco'),
(20785, 770, 'Padios'),
(20786, 770, 'Pasig'),
(20787, 770, 'Poblacion Ilawod'),
(20788, 770, 'Poblacion Ilaya'),
(20789, 770, 'Poblacion Market'),
(20790, 770, 'Posadas'),
(20791, 770, 'Preciosa'),
(20792, 770, 'Salcedo'),
(20793, 770, 'San Luis'),
(20794, 770, 'Tady'),
(20795, 770, 'Tentay'),
(20796, 770, 'Villahermosa'),
(20797, 770, 'Zerrudo'),
(20798, 771, 'Alupidian'),
(20799, 771, 'Atabayan'),
(20800, 771, 'Bagacay'),
(20801, 771, 'Baguingin'),
(20802, 771, 'Bagumbayan'),
(20803, 771, 'Bangkal'),
(20804, 771, 'Bantud'),
(20805, 771, 'Barangay 1 (Pob.)'),
(20806, 771, 'Barangay 2 (Pob.)'),
(20807, 771, 'Barangay 3 (Pob.)'),
(20808, 771, 'Barangay 4 (Pob.)'),
(20809, 771, 'Barangay 5 (Pob.)'),
(20810, 771, 'Barangay 6 (Pob.)'),
(20811, 771, 'Barangay 7 (Pob.)'),
(20812, 771, 'Barangay 8 (Pob.)'),
(20813, 771, 'Barangay 9 (Pob.)'),
(20814, 771, 'Barosong'),
(20815, 771, 'Barroc'),
(20816, 771, 'Bayuco'),
(20817, 771, 'Binaliuan Mayor'),
(20818, 771, 'Binaliuan Menor'),
(20819, 771, 'Bitas'),
(20820, 771, 'Buenavista'),
(20821, 771, 'Bugasongan'),
(20822, 771, 'Buyu-an'),
(20823, 771, 'Canabuan'),
(20824, 771, 'Cansilayan'),
(20825, 771, 'Cordova Norte'),
(20826, 771, 'Cordova Sur'),
(20827, 771, 'Danao'),
(20828, 771, 'Dapdap'),
(20829, 771, 'Dorong-an'),
(20830, 771, 'Guisian'),
(20831, 771, 'Isauan'),
(20832, 771, 'Isian'),
(20833, 771, 'Jamog'),
(20834, 771, 'Lanag'),
(20835, 771, 'Linobayan'),
(20836, 771, 'Lubog'),
(20837, 771, 'Nagba'),
(20838, 771, 'Namocon'),
(20839, 771, 'Napnapan Norte'),
(20840, 771, 'Napnapan Sur'),
(20841, 771, 'Olo Barroc'),
(20842, 771, 'Parara Norte'),
(20843, 771, 'Parara Sur'),
(20844, 771, 'San Rafael'),
(20845, 771, 'Sermon'),
(20846, 771, 'Sipitan'),
(20847, 771, 'Supa'),
(20848, 771, 'Tan Pael'),
(20849, 771, 'Taro'),
(20850, 772, 'Adgao'),
(20851, 772, 'Ago'),
(20852, 772, 'Ambarihon'),
(20853, 772, 'Ayubo'),
(20854, 772, 'Bacan'),
(20855, 772, 'Bagunanay'),
(20856, 772, 'Badiang'),
(20857, 772, 'Balicua'),
(20858, 772, 'Bantayanan'),
(20859, 772, 'Zone I (Pob.)'),
(20860, 772, 'Zone II (Pob.)'),
(20861, 772, 'Zone III (Pob.)'),
(20862, 772, 'Batga'),
(20863, 772, 'Bato'),
(20864, 772, 'Bikil'),
(20865, 772, 'Boloc'),
(20866, 772, 'Bondoc'),
(20867, 772, 'Borong'),
(20868, 772, 'Buenavista'),
(20869, 772, 'Cadabdab'),
(20870, 772, 'Daga-ay'),
(20871, 772, 'Desposorio'),
(20872, 772, 'Igdampog Norte'),
(20873, 772, 'Igdampog Sur'),
(20874, 772, 'Igpaho'),
(20875, 772, 'Igtuble'),
(20876, 772, 'Ingay'),
(20877, 772, 'Isauan'),
(20878, 772, 'Jolason'),
(20879, 772, 'Jona'),
(20880, 772, 'La-ag'),
(20881, 772, 'Lanag Norte'),
(20882, 772, 'Lanag Sur'),
(20883, 772, 'Male'),
(20884, 772, 'Mayang'),
(20885, 772, 'Molina'),
(20886, 772, 'Morcillas'),
(20887, 772, 'Nagba'),
(20888, 772, 'Navillan'),
(20889, 772, 'Pinamacalan'),
(20890, 772, 'San Jose'),
(20891, 772, 'Sibucauan'),
(20892, 772, 'Singon'),
(20893, 772, 'Tabat'),
(20894, 772, 'Tagpu-an'),
(20895, 772, 'Talento'),
(20896, 772, 'Teniente Benito'),
(20897, 772, 'Victoria'),
(20898, 773, 'Balud Lilo-an'),
(20899, 773, 'Balud I'),
(20900, 773, 'Balud II'),
(20901, 773, 'Dawis Centro'),
(20902, 773, 'Dawis Norte'),
(20903, 773, 'Dawis Sur'),
(20904, 773, 'Gines'),
(20905, 773, 'Inagdangan Centro'),
(20906, 773, 'Inagdangan Norte'),
(20907, 773, 'Inagdangan Sur'),
(20908, 773, 'Jalaud Norte'),
(20909, 773, 'Jalaud Sur'),
(20910, 773, 'Libongcogon'),
(20911, 773, 'Malunang'),
(20912, 773, 'Pajo'),
(20913, 773, 'Ilawod Poblacion'),
(20914, 773, 'Ilaya Poblacion'),
(20915, 773, 'Sambag'),
(20916, 773, 'Sigangao'),
(20917, 773, 'Talauguis'),
(20918, 773, 'Talibong'),
(20919, 773, 'Tubigan'),
(20920, 773, 'Tuburan'),
(20921, 773, 'Tuburan Sulbod'),
(20922, 774, 'Alangilan'),
(20923, 774, 'Alijis'),
(20924, 774, 'Banago'),
(20925, 774, 'Barangay 1 (Pob.)'),
(20926, 774, 'Barangay 10 (Pob.)'),
(20927, 774, 'Barangay 11 (Pob.)'),
(20928, 774, 'Barangay 12 (Pob.)'),
(20929, 774, 'Barangay 13 (Pob.)'),
(20930, 774, 'Barangay 14 (Pob.)'),
(20931, 774, 'Barangay 15 (Pob.)'),
(20932, 774, 'Barangay 16 (Pob.)'),
(20933, 774, 'Barangay 17 (Pob.)'),
(20934, 774, 'Barangay 18 (Pob.)'),
(20935, 774, 'Barangay 19 (Pob.)'),
(20936, 774, 'Barangay 2 (Pob.)'),
(20937, 774, 'Barangay 20 (Pob.)'),
(20938, 774, 'Barangay 21 (Pob.)'),
(20939, 774, 'Barangay 22 (Pob.)'),
(20940, 774, 'Barangay 23 (Pob.)'),
(20941, 774, 'Barangay 24 (Pob.)'),
(20942, 774, 'Barangay 25 (Pob.)'),
(20943, 774, 'Barangay 26 (Pob.)'),
(20944, 774, 'Barangay 27 (Pob.)'),
(20945, 774, 'Barangay 28 (Pob.)'),
(20946, 774, 'Barangay 29 (Pob.)'),
(20947, 774, 'Barangay 3 (Pob.)'),
(20948, 774, 'Barangay 30 (Pob.)'),
(20949, 774, 'Barangay 31 (Pob.)'),
(20950, 774, 'Barangay 32 (Pob.)'),
(20951, 774, 'Barangay 33 (Pob.)'),
(20952, 774, 'Barangay 34 (Pob.)'),
(20953, 774, 'Barangay 35 (Pob.)'),
(20954, 774, 'Barangay 36 (Pob.)'),
(20955, 774, 'Barangay 37 (Pob.)'),
(20956, 774, 'Barangay 38 (Pob.)'),
(20957, 774, 'Barangay 39 (Pob.)'),
(20958, 774, 'Barangay 4 (Pob.)'),
(20959, 774, 'Barangay 40 (Pob.)'),
(20960, 774, 'Barangay 41 (Pob.)'),
(20961, 774, 'Barangay 5 (Pob.)'),
(20962, 774, 'Barangay 6 (Pob.)'),
(20963, 774, 'Barangay 7 (Pob.)'),
(20964, 774, 'Barangay 8 (Pob.)'),
(20965, 774, 'Barangay 9 (Pob.)'),
(20966, 774, 'Bata'),
(20967, 774, 'Cabug'),
(20968, 774, 'Estefania'),
(20969, 774, 'Felisa'),
(20970, 774, 'Granada'),
(20971, 774, 'Mandalagan'),
(20972, 774, 'Mansilingan'),
(20973, 774, 'Montevista'),
(20974, 774, 'Pahanocoy'),
(20975, 774, 'Punta Taytay'),
(20976, 774, 'Singcang-Airport'),
(20977, 774, 'Sum-ag'),
(20978, 774, 'Taculing'),
(20979, 774, 'Tangub'),
(20980, 774, 'Villamonte'),
(20981, 774, 'Vista Alegre'),
(20982, 774, 'Handumanan'),
(20983, 775, 'Abuanan'),
(20984, 775, 'Alianza'),
(20985, 775, 'Atipuluan'),
(20986, 775, 'Bacong-Montilla'),
(20987, 775, 'Bagroy'),
(20988, 775, 'Balingasag'),
(20989, 775, 'Binubuhan'),
(20990, 775, 'Busay'),
(20991, 775, 'Calumangan'),
(20992, 775, 'Caridad'),
(20993, 775, 'Dulao'),
(20994, 775, 'Ilijan'),
(20995, 775, 'Lag-Asan'),
(20996, 775, 'Ma-ao Barrio'),
(20997, 775, 'Jorge L. Araneta'),
(20998, 775, 'Mailum'),
(20999, 775, 'Malingin'),
(21000, 775, 'Napoles'),
(21001, 775, 'Pacol'),
(21002, 775, 'Poblacion'),
(21003, 775, 'Sagasa'),
(21004, 775, 'Tabunan'),
(21005, 775, 'Taloc'),
(21006, 775, 'Sampinit'),
(21007, 776, 'Amontay'),
(21008, 776, 'Bagroy'),
(21009, 776, 'Bi-ao'),
(21010, 776, 'Canmoros (Pob.)'),
(21011, 776, 'Enclaro'),
(21012, 776, 'Marina (Pob.)'),
(21013, 776, 'Paglaum (Pob.)'),
(21014, 776, 'Payao'),
(21015, 776, 'Progreso (Pob.)'),
(21016, 776, 'San Jose'),
(21017, 776, 'San Juan (Pob.)'),
(21018, 776, 'San Pedro (Pob.)'),
(21019, 776, 'San Teodoro (Pob.)'),
(21020, 776, 'San Vicente (Pob.)'),
(21021, 776, 'Santo Rosario (Pob.)'),
(21022, 776, 'Santol'),
(21023, 777, 'Andres Bonifacio'),
(21024, 777, 'Banquerohan'),
(21025, 777, 'Barangay 1 Pob.'),
(21026, 777, 'Barangay 2 Pob.'),
(21027, 777, 'Barangay 3 Pob.'),
(21028, 777, 'Barangay 4 Pob.'),
(21029, 777, 'Barangay 5 Pob.'),
(21030, 777, 'Barangay 6 Pob.'),
(21031, 777, 'Burgos'),
(21032, 777, 'Cabahug'),
(21033, 777, 'Cadiz Viejo'),
(21034, 777, 'Caduha-an'),
(21035, 777, 'Celestino Villacin'),
(21036, 777, 'Daga'),
(21037, 777, 'V. F. Gustilo'),
(21038, 777, 'Jerusalem'),
(21039, 777, 'Luna'),
(21040, 777, 'Mabini'),
(21041, 777, 'Magsaysay'),
(21042, 777, 'Sicaba'),
(21043, 777, 'Tiglawigan'),
(21044, 777, 'Tinampa-an'),
(21045, 778, 'Agpangi'),
(21046, 778, 'Ani-e'),
(21047, 778, 'Bagacay'),
(21048, 778, 'Bantayanon'),
(21049, 778, 'Buenavista'),
(21050, 778, 'Cabungahan'),
(21051, 778, 'Calampisawan'),
(21052, 778, 'Cambayobo'),
(21053, 778, 'Castellano'),
(21054, 778, 'Cruz'),
(21055, 778, 'Dolis'),
(21056, 778, 'Hilub-Ang'),
(21057, 778, 'Hinab-Ongan'),
(21058, 778, 'Ilaya'),
(21059, 778, 'Laga-an'),
(21060, 778, 'Lalong'),
(21061, 778, 'Lemery'),
(21062, 778, 'Lipat-on'),
(21063, 778, 'Lo-ok (Pob.)'),
(21064, 778, 'Ma-aslob'),
(21065, 778, 'Macasilao'),
(21066, 778, 'Malanog'),
(21067, 778, 'Malatas'),
(21068, 778, 'Marcelo'),
(21069, 778, 'Mina-utok'),
(21070, 778, 'Menchaca'),
(21071, 778, 'Minapasuk'),
(21072, 778, 'Mahilum'),
(21073, 778, 'Paghumayan'),
(21074, 778, 'Pantao'),
(21075, 778, 'Patun-an'),
(21076, 778, 'Pinocutan'),
(21077, 778, 'Refugio'),
(21078, 778, 'San Benito'),
(21079, 778, 'San Isidro'),
(21080, 778, 'Suba (Pob.)'),
(21081, 778, 'Telim'),
(21082, 778, 'Tigbao'),
(21083, 778, 'Tigbon'),
(21084, 778, 'Winaswasan'),
(21085, 779, 'Agboy'),
(21086, 779, 'Banga'),
(21087, 779, 'Cabia-an'),
(21088, 779, 'Caningay'),
(21089, 779, 'Gatuslao'),
(21090, 779, 'Haba'),
(21091, 779, 'Payauan'),
(21092, 779, 'Poblacion East'),
(21093, 779, 'Poblacion West'),
(21094, 780, 'Abaca'),
(21095, 780, 'Baclao'),
(21096, 780, 'Poblacion'),
(21097, 780, 'Basak'),
(21098, 780, 'Bulata'),
(21099, 780, 'Caliling'),
(21100, 780, 'Camalanda-an'),
(21101, 780, 'Camindangan'),
(21102, 780, 'Elihan'),
(21103, 780, 'Guiljungan'),
(21104, 780, 'Inayawan'),
(21105, 780, 'Isio'),
(21106, 780, 'Linaon'),
(21107, 780, 'Lumbia'),
(21108, 780, 'Mambugsay'),
(21109, 780, 'Man-Uling'),
(21110, 780, 'Masaling'),
(21111, 780, 'Molobolo'),
(21112, 780, 'Sura'),
(21113, 780, 'Talacdan'),
(21114, 780, 'Tambad'),
(21115, 780, 'Tiling'),
(21116, 780, 'Tomina'),
(21117, 780, 'Tuyom'),
(21118, 780, 'Yao-yao'),
(21119, 781, 'Alacaygan'),
(21120, 781, 'Alicante'),
(21121, 781, 'Poblacion I'),
(21122, 781, 'Poblacion II'),
(21123, 781, 'Poblacion III'),
(21124, 781, 'Batea'),
(21125, 781, 'Consing'),
(21126, 781, 'Cudangdang'),
(21127, 781, 'Damgo'),
(21128, 781, 'Gahit'),
(21129, 781, 'Canlusong'),
(21130, 781, 'Latasan'),
(21131, 781, 'Madalag'),
(21132, 781, 'Manta-angan'),
(21133, 781, 'Nanca'),
(21134, 781, 'Pasil'),
(21135, 781, 'San Isidro'),
(21136, 781, 'San Jose'),
(21137, 781, 'Santo Niño'),
(21138, 781, 'Tabigue'),
(21139, 781, 'Tanza'),
(21140, 781, 'Tuburan'),
(21141, 781, 'Tomongtong'),
(21142, 782, 'Alimango'),
(21143, 782, 'Balintawak (Pob.)'),
(21144, 782, 'Magsaysay'),
(21145, 782, 'Binaguiohan'),
(21146, 782, 'Buenavista'),
(21147, 782, 'Cervantes'),
(21148, 782, 'Dian-ay'),
(21149, 782, 'Hacienda Fe'),
(21150, 782, 'Jonobjonob'),
(21151, 782, 'Japitan'),
(21152, 782, 'Langub'),
(21153, 782, 'Libertad'),
(21154, 782, 'Mabini'),
(21155, 782, 'Malasibog'),
(21156, 782, 'Paitan'),
(21157, 782, 'Pinapugasan'),
(21158, 782, 'Old Poblacion'),
(21159, 782, 'Rizal'),
(21160, 782, 'Tamlang'),
(21161, 782, 'Udtongan'),
(21162, 782, 'Washington'),
(21163, 783, 'Aguisan'),
(21164, 783, 'Buenavista'),
(21165, 783, 'Cabadiangan'),
(21166, 783, 'Cabanbanan'),
(21167, 783, 'Carabalan'),
(21168, 783, 'Caradio-an'),
(21169, 783, 'Libacao'),
(21170, 783, 'Mambagaton'),
(21171, 783, 'Nabali-an'),
(21172, 783, 'Mahalang'),
(21173, 783, 'San Antonio'),
(21174, 783, 'Sara-et'),
(21175, 783, 'Su-ay'),
(21176, 783, 'Talaban'),
(21177, 783, 'To-oy'),
(21178, 783, 'Barangay I (Pob.)'),
(21179, 783, 'Barangay II (Pob.)'),
(21180, 783, 'Barangay III (Pob.)'),
(21181, 783, 'Barangay IV (Pob.)'),
(21182, 784, 'Anahaw'),
(21183, 784, 'Aranda'),
(21184, 784, 'Barangay I (Pob.)'),
(21185, 784, 'Barangay II (Pob.)'),
(21186, 784, 'Barangay III (Pob.)'),
(21187, 784, 'Barangay IV (Pob.)'),
(21188, 784, 'Bato'),
(21189, 784, 'Calapi'),
(21190, 784, 'Camalobalo'),
(21191, 784, 'Camba-og'),
(21192, 784, 'Cambugsa'),
(21193, 784, 'Candumarao'),
(21194, 784, 'Gargato'),
(21195, 784, 'Himaya'),
(21196, 784, 'Miranda'),
(21197, 784, 'Nanunga'),
(21198, 784, 'Narauis'),
(21199, 784, 'Palayog'),
(21200, 784, 'Paticui'),
(21201, 784, 'Pilar'),
(21202, 784, 'Quiwi'),
(21203, 784, 'Tagda'),
(21204, 784, 'Tuguis'),
(21205, 784, 'Baga-as'),
(21206, 785, 'Alim'),
(21207, 785, 'Asia'),
(21208, 785, 'Bacuyangan'),
(21209, 785, 'Barangay I (Pob.)'),
(21210, 785, 'Barangay II (Pob.)'),
(21211, 785, 'Bulwangan'),
(21212, 785, 'Culipapa'),
(21213, 785, 'Damutan'),
(21214, 785, 'Daug'),
(21215, 785, 'Po-ok'),
(21216, 785, 'San Rafael'),
(21217, 785, 'Sangke'),
(21218, 785, 'Talacagay'),
(21219, 786, 'Andulauan'),
(21220, 786, 'Balicotoc'),
(21221, 786, 'Bocana'),
(21222, 786, 'Calubang'),
(21223, 786, 'Canlamay'),
(21224, 786, 'Consuelo'),
(21225, 786, 'Dancalan'),
(21226, 786, 'Delicioso'),
(21227, 786, 'Galicia'),
(21228, 786, 'Manalad'),
(21229, 786, 'Pinggot'),
(21230, 786, 'Barangay I (Pob.)'),
(21231, 786, 'Barangay II (Pob.)'),
(21232, 786, 'Tabu'),
(21233, 786, 'Vista Alegre'),
(21234, 787, 'Amin'),
(21235, 787, 'Banogbanog'),
(21236, 787, 'Bulad'),
(21237, 787, 'Bungahin'),
(21238, 787, 'Cabcab'),
(21239, 787, 'Camangcamang'),
(21240, 787, 'Camp Clark'),
(21241, 787, 'Cansalongon'),
(21242, 787, 'Guintubhan'),
(21243, 787, 'Libas'),
(21244, 787, 'Limalima'),
(21245, 787, 'Makilignit'),
(21246, 787, 'Mansablay'),
(21247, 787, 'Maytubig'),
(21248, 787, 'Panaquiao'),
(21249, 787, 'Barangay 1 (Pob.)'),
(21250, 787, 'Barangay 2 (Pob.)'),
(21251, 787, 'Barangay 3 (Pob.)'),
(21252, 787, 'Barangay 4 (Pob.)'),
(21253, 787, 'Barangay 5 (Pob.)'),
(21254, 787, 'Barangay 6 (Pob.)'),
(21255, 787, 'Barangay 7 (Pob.)'),
(21256, 787, 'Barangay 8 (Pob.)'),
(21257, 787, 'Barangay 9 (Pob.)'),
(21258, 787, 'Riverside'),
(21259, 787, 'Rumirang'),
(21260, 787, 'San Agustin'),
(21261, 787, 'Sebucawan'),
(21262, 787, 'Sikatuna'),
(21263, 787, 'Tinongan'),
(21264, 788, 'Bantayan'),
(21265, 788, 'Binicuil'),
(21266, 788, 'Camansi'),
(21267, 788, 'Camingawan'),
(21268, 788, 'Camugao'),
(21269, 788, 'Carol-an'),
(21270, 788, 'Daan Banua'),
(21271, 788, 'Hilamonan'),
(21272, 788, 'Inapoy'),
(21273, 788, 'Linao'),
(21274, 788, 'Locotan'),
(21275, 788, 'Magballo'),
(21276, 788, 'Oringao'),
(21277, 788, 'Orong'),
(21278, 788, 'Pinaguinpinan'),
(21279, 788, 'Barangay 5 (Pob.)'),
(21280, 788, 'Barangay 6 (Pob.)'),
(21281, 788, 'Barangay 7 (Pob.)'),
(21282, 788, 'Barangay 8 (Pob.)'),
(21283, 788, 'Barangay 9 (Pob.)'),
(21284, 788, 'Barangay 1 (Pob.)'),
(21285, 788, 'Barangay 2 (Pob.)'),
(21286, 788, 'Barangay 3 (Pob.)'),
(21287, 788, 'Barangay 4 (Pob.)'),
(21288, 788, 'Salong'),
(21289, 788, 'Tabugon'),
(21290, 788, 'Tagoc'),
(21291, 788, 'Talubangi'),
(21292, 788, 'Tampalon'),
(21293, 788, 'Tan-Awan'),
(21294, 788, 'Tapi'),
(21295, 788, 'Tagukon'),
(21296, 789, 'Ara-al'),
(21297, 789, 'Ayungon'),
(21298, 789, 'Balabag'),
(21299, 789, 'Batuan'),
(21300, 789, 'Roberto S. Benedicto'),
(21301, 789, 'Cubay'),
(21302, 789, 'Haguimit'),
(21303, 789, 'La Granja'),
(21304, 789, 'Nagasi'),
(21305, 789, 'Barangay I (Pob.)'),
(21306, 789, 'Barangay II (Pob.)'),
(21307, 789, 'Barangay III (Pob.)'),
(21308, 789, 'San Miguel'),
(21309, 789, 'Yubo'),
(21310, 790, 'Biaknabato'),
(21311, 790, 'Cabacungan'),
(21312, 790, 'Cabagnaan'),
(21313, 790, 'Camandag'),
(21314, 790, 'Lalagsan'),
(21315, 790, 'Manghanoy'),
(21316, 790, 'Mansalanao'),
(21317, 790, 'Masulog'),
(21318, 790, 'Nato'),
(21319, 790, 'Puso'),
(21320, 790, 'Robles (Pob.)'),
(21321, 790, 'Sag-Ang'),
(21322, 790, 'Talaptap'),
(21323, 791, 'Chambery'),
(21324, 791, 'Barangay I (Pob.)'),
(21325, 791, 'Barangay I-A (Pob.)'),
(21326, 791, 'Barangay I-B (Pob.)'),
(21327, 791, 'Barangay II (Pob.)'),
(21328, 791, 'Barangay II-A (Pob.)'),
(21329, 791, 'Punta Mesa'),
(21330, 791, 'Punta Salong'),
(21331, 791, 'Purisima'),
(21332, 791, 'San Pablo'),
(21333, 791, 'Santa Teresa'),
(21334, 791, 'Tortosa'),
(21335, 792, 'Barangay 1 (Pob.)'),
(21336, 792, 'Barangay 2 (Pob.)'),
(21337, 792, 'Barangay 3 (Pob.)'),
(21338, 792, 'Barangay 4 (Pob.)'),
(21339, 792, 'Barangay 5 (Pob.)'),
(21340, 792, 'Barangay 6 (Pob.)'),
(21341, 792, 'Barangay 7 (Pob.)'),
(21342, 792, 'Crossing Magallon'),
(21343, 792, 'Guinpana-an'),
(21344, 792, 'Inolingan'),
(21345, 792, 'Macagahay'),
(21346, 792, 'Magallon Cadre'),
(21347, 792, 'Montilla'),
(21348, 792, 'Odiong'),
(21349, 792, 'Quintin Remo'),
(21350, 793, 'Abo-abo'),
(21351, 793, 'Alegria'),
(21352, 793, 'Amayco'),
(21353, 793, 'Zone I (Pob.)'),
(21354, 793, 'Zone II (Pob.)'),
(21355, 793, 'Zone III (Pob.)'),
(21356, 793, 'Zone IV (Pob.)'),
(21357, 793, 'Zone V (Pob.)'),
(21358, 793, 'Blumentritt'),
(21359, 793, 'Buenavista'),
(21360, 793, 'Caliban'),
(21361, 793, 'Canlandog'),
(21362, 793, 'Cansilayan'),
(21363, 793, 'Damsite'),
(21364, 793, 'Iglau-an'),
(21365, 793, 'Lopez Jaena'),
(21366, 793, 'Minoyan'),
(21367, 793, 'Pandanon'),
(21368, 793, 'San Miguel'),
(21369, 793, 'Santa Cruz'),
(21370, 793, 'Santa Rosa'),
(21371, 793, 'Salvacion'),
(21372, 793, 'Talotog'),
(21373, 794, 'Antipolo'),
(21374, 794, 'Barangay I (Pob.)'),
(21375, 794, 'Barangay II (Pob.)'),
(21376, 794, 'Barangay III (Pob.)'),
(21377, 794, 'Buenavista Gibong'),
(21378, 794, 'Buenavista Rizal'),
(21379, 794, 'Burgos'),
(21380, 794, 'Cambarus'),
(21381, 794, 'Canroma'),
(21382, 794, 'Don Salvador Benedicto'),
(21383, 794, 'General Malvar'),
(21384, 794, 'Gomez'),
(21385, 794, 'M. H. Del Pilar'),
(21386, 794, 'Mabini'),
(21387, 794, 'Miranda'),
(21388, 794, 'Pandan'),
(21389, 794, 'Recreo'),
(21390, 794, 'San Isidro'),
(21391, 794, 'San Juan'),
(21392, 794, 'Zamora'),
(21393, 795, 'Barangay Zone 1-A (Pob.)'),
(21394, 795, 'Barangay Zone 4-A (Pob.)'),
(21395, 795, 'Barangay Zone 1 (Pob.)'),
(21396, 795, 'Barangay Zone 2 (Pob.)'),
(21397, 795, 'Barangay Zone 3 (Pob.)'),
(21398, 795, 'Barangay Zone 4 (Pob.)'),
(21399, 795, 'Barangay Zone 5 (Pob.)'),
(21400, 795, 'Barangay Zone 6 (Pob.)'),
(21401, 795, 'Barangay Zone 7 (Pob.)'),
(21402, 795, 'Canjusa'),
(21403, 795, 'Crossing Pulupandan'),
(21404, 795, 'Culo'),
(21405, 795, 'Mabini'),
(21406, 795, 'Pag-ayon'),
(21407, 795, 'Palaka Norte'),
(21408, 795, 'Palaka Sur'),
(21409, 795, 'Patic'),
(21410, 795, 'Tapong'),
(21411, 795, 'Ubay'),
(21412, 795, 'Utod'),
(21413, 796, 'Andres Bonifacio'),
(21414, 796, 'Bato'),
(21415, 796, 'Baviera'),
(21416, 796, 'Bulanon'),
(21417, 796, 'Campo Himoga-an'),
(21418, 796, 'Campo Santiago'),
(21419, 796, 'Colonia Divina'),
(21420, 796, 'Fabrica'),
(21421, 796, 'General Luna'),
(21422, 796, 'Himoga-an Baybay'),
(21423, 796, 'Lopez Jaena'),
(21424, 796, 'Malubon'),
(21425, 796, 'Makiling'),
(21426, 796, 'Molocaboc'),
(21427, 796, 'Old Sagay'),
(21428, 796, 'Paraiso'),
(21429, 796, 'Plaridel'),
(21430, 796, 'Poblacion I'),
(21431, 796, 'Poblacion II'),
(21432, 796, 'Puey'),
(21433, 796, 'Rizal'),
(21434, 796, 'Taba-ao'),
(21435, 796, 'Tadlong'),
(21436, 796, 'Vito'),
(21437, 796, 'Rafaela Barrera'),
(21438, 797, 'Bagonbon'),
(21439, 797, 'Buluangan'),
(21440, 797, 'Codcod'),
(21441, 797, 'Ermita'),
(21442, 797, 'Guadalupe'),
(21443, 797, 'Nataban'),
(21444, 797, 'Palampas'),
(21445, 797, 'Barangay I (Pob.)'),
(21446, 797, 'Barangay II (Pob.)'),
(21447, 797, 'Barangay III (Pob.)'),
(21448, 797, 'Barangay IV (Pob.)'),
(21449, 797, 'Barangay V (Pob.)'),
(21450, 797, 'Barangay VI (Pob.)'),
(21451, 797, 'Prosperidad'),
(21452, 797, 'Punao'),
(21453, 797, 'Quezon'),
(21454, 797, 'Rizal'),
(21455, 797, 'San Juan'),
(21456, 798, 'Bagonawa'),
(21457, 798, 'Baliwagan'),
(21458, 798, 'Batuan'),
(21459, 798, 'Guintorilan'),
(21460, 798, 'Nayon'),
(21461, 798, 'Poblacion'),
(21462, 798, 'Sibucao'),
(21463, 798, 'Tabao Baybay'),
(21464, 798, 'Tabao Rizal'),
(21465, 798, 'Tibsoc'),
(21466, 799, 'Balaring'),
(21467, 799, 'Barangay I (Pob.)'),
(21468, 799, 'Barangay II (Pob.)'),
(21469, 799, 'Barangay III (Pob.)'),
(21470, 799, 'Barangay IV (Pob.)'),
(21471, 799, 'Barangay V (Pob.)'),
(21472, 799, 'Barangay VI Pob.'),
(21473, 799, 'Eustaquio Lopez'),
(21474, 799, 'Guimbala-on'),
(21475, 799, 'Guinhalaran'),
(21476, 799, 'Kapitan Ramon'),
(21477, 799, 'Lantad'),
(21478, 799, 'Mambulac'),
(21479, 799, 'Rizal'),
(21480, 799, 'Bagtic'),
(21481, 799, 'Patag'),
(21482, 800, 'Barangay 1 (Pob.)'),
(21483, 800, 'Barangay 2 (Pob.)'),
(21484, 800, 'Barangay 3 (Pob.)'),
(21485, 800, 'Barangay 4 (Pob.)'),
(21486, 800, 'Barangay 5 (Pob.)'),
(21487, 800, 'Cabadiangan'),
(21488, 800, 'Camindangan'),
(21489, 800, 'Canturay'),
(21490, 800, 'Cartagena'),
(21491, 800, 'Cayhagan'),
(21492, 800, 'Gil Montilla'),
(21493, 800, 'Mambaroto'),
(21494, 800, 'Manlucahoc'),
(21495, 800, 'Maricalum'),
(21496, 800, 'Nabulao'),
(21497, 800, 'Nauhang'),
(21498, 800, 'San Jose'),
(21499, 801, 'Bubog'),
(21500, 801, 'Cabatangan'),
(21501, 801, 'Zone 4-A (Pob.)'),
(21502, 801, 'Zone 4 (Pob.)'),
(21503, 801, 'Concepcion'),
(21504, 801, 'Dos Hermanas'),
(21505, 801, 'Efigenio Lizares'),
(21506, 801, 'Zone 7 (Pob.)'),
(21507, 801, 'Zone 14-B (Pob.)'),
(21508, 801, 'Zone 12-A (Pob.)'),
(21509, 801, 'Zone 10 (Pob.)'),
(21510, 801, 'Zone 5 (Pob.)'),
(21511, 801, 'Zone 16 (Pob.)'),
(21512, 801, 'Matab-ang'),
(21513, 801, 'Zone 9 (Pob.)'),
(21514, 801, 'Zone 6 (Pob.)'),
(21515, 801, 'Zone 14 (Pob.)'),
(21516, 801, 'San Fernando'),
(21517, 801, 'Zone 15 (Pob.)'),
(21518, 801, 'Zone 14-A (Pob.)'),
(21519, 801, 'Zone 11 (Pob.)'),
(21520, 801, 'Zone 8 (Pob.)'),
(21521, 801, 'Zone 12 (Pob.)'),
(21522, 801, 'Zone 1 (Pob.)'),
(21523, 801, 'Zone 2 (Pob.)'),
(21524, 801, 'Zone 3 (Pob.)'),
(21525, 801, 'Katilingban'),
(21526, 802, 'Bandila'),
(21527, 802, 'Bug-ang'),
(21528, 802, 'General Luna'),
(21529, 802, 'Magticol'),
(21530, 802, 'Poblacion'),
(21531, 802, 'Salamanca'),
(21532, 802, 'San Isidro'),
(21533, 802, 'San Jose'),
(21534, 802, 'Tabun-ac'),
(21535, 803, 'Alijis'),
(21536, 803, 'Ayungon'),
(21537, 803, 'Bagumbayan'),
(21538, 803, 'Batuan'),
(21539, 803, 'Bayabas'),
(21540, 803, 'Central Tabao'),
(21541, 803, 'Doldol'),
(21542, 803, 'Guintorilan'),
(21543, 803, 'Lacaron'),
(21544, 803, 'Mabini'),
(21545, 803, 'Pacol'),
(21546, 803, 'Palaka'),
(21547, 803, 'Paloma'),
(21548, 803, 'Poblacion'),
(21549, 803, 'Sagua Banua'),
(21550, 803, 'Tabao Proper'),
(21551, 804, 'Barangay I (Pob.)'),
(21552, 804, 'Barangay II (Pob.)'),
(21553, 804, 'Barangay III (Pob.)'),
(21554, 804, 'Barangay IV (Pob.)'),
(21555, 804, 'Barangay V (Pob.)'),
(21556, 804, 'Barangay VI (Pob.)'),
(21557, 804, 'Barangay VII (Pob.)'),
(21558, 804, 'Barangay VIII (Pob.)'),
(21559, 804, 'Barangay IX'),
(21560, 804, 'Barangay X'),
(21561, 804, 'Barangay XI'),
(21562, 804, 'Barangay XII'),
(21563, 804, 'Barangay XIII'),
(21564, 804, 'Barangay XIV'),
(21565, 804, 'Barangay XV'),
(21566, 804, 'Barangay XV-A'),
(21567, 804, 'Barangay XVI'),
(21568, 804, 'Barangay XVI-A'),
(21569, 804, 'Barangay XVII'),
(21570, 804, 'Barangay XVIII'),
(21571, 804, 'Barangay XVIII-A'),
(21572, 804, 'Barangay XIX'),
(21573, 804, 'Barangay XIX-A'),
(21574, 804, 'Barangay XX'),
(21575, 804, 'Barangay XXI'),
(21576, 804, 'Barangay VI-A'),
(21577, 805, 'Bago'),
(21578, 805, 'Bagong Silang'),
(21579, 805, 'Bunga'),
(21580, 805, 'Igmaya-an'),
(21581, 805, 'Kumaliskis'),
(21582, 805, 'Pandanon'),
(21583, 805, 'Pinowayan'),
(21584, 806, 'Agsanayan'),
(21585, 806, 'Avila'),
(21586, 806, 'Banban'),
(21587, 806, 'Bacjao '),
(21588, 806, 'Cansilayan'),
(21589, 806, 'Dagsa-an'),
(21590, 806, 'Daragan'),
(21591, 806, 'East Valencia'),
(21592, 806, 'Getulio'),
(21593, 806, 'Mabini'),
(21594, 806, 'Magsaysay'),
(21595, 806, 'Mclain'),
(21596, 806, 'Montpiller'),
(21597, 806, 'Navalas'),
(21598, 806, 'Nazaret'),
(21599, 806, 'New Poblacion '),
(21600, 806, 'Old Poblacion'),
(21601, 806, 'Piña'),
(21602, 806, 'Rizal'),
(21603, 806, 'Salvacion'),
(21604, 806, 'San Fernando'),
(21605, 806, 'San Isidro'),
(21606, 806, 'San Miguel'),
(21607, 806, 'San Nicolas'),
(21608, 806, 'San Pedro'),
(21609, 806, 'San Roque'),
(21610, 806, 'Santo Rosario'),
(21611, 806, 'Sawang'),
(21612, 806, 'Supang'),
(21613, 806, 'Tacay'),
(21614, 806, 'Taminla'),
(21615, 806, 'Tanag'),
(21616, 806, 'Tastasan'),
(21617, 806, 'Tinadtaran'),
(21618, 806, 'Umilig'),
(21619, 806, 'Zaldivar'),
(21620, 807, 'Alaguisoc'),
(21621, 807, 'Balcon Maravilla'),
(21622, 807, 'Balcon Melliza'),
(21623, 807, 'Bugnay'),
(21624, 807, 'Buluangan'),
(21625, 807, 'Espinosa'),
(21626, 807, 'Hoskyn'),
(21627, 807, 'Lawi'),
(21628, 807, 'Morobuan'),
(21629, 807, 'Poblacion'),
(21630, 807, 'Rizal'),
(21631, 807, 'San Miguel'),
(21632, 807, 'Sinapsapan'),
(21633, 807, 'Santa Teresa'),
(21634, 808, 'Cabalagnan'),
(21635, 808, 'Calaya'),
(21636, 808, 'Canhawan'),
(21637, 808, 'Concordia Sur'),
(21638, 808, 'Dolores'),
(21639, 808, 'Guiwanon'),
(21640, 808, 'Igang'),
(21641, 808, 'Igdarapdap'),
(21642, 808, 'La Paz'),
(21643, 808, 'Lanipe'),
(21644, 808, 'Lucmayan'),
(21645, 808, 'Magamay'),
(21646, 808, 'Napandong'),
(21647, 808, 'Oracon Sur'),
(21648, 808, 'Pandaraonan'),
(21649, 808, 'Panobolon'),
(21650, 808, 'Poblacion'),
(21651, 808, 'Salvacion'),
(21652, 808, 'San Antonio'),
(21653, 808, 'San Roque'),
(21654, 808, 'Santo Domingo'),
(21655, 808, 'Tando'),
(21656, 809, 'Aguilar'),
(21657, 809, 'Cabano'),
(21658, 809, 'Cabungahan'),
(21659, 809, 'Constancia'),
(21660, 809, 'Gaban'),
(21661, 809, 'Igcawayan'),
(21662, 809, 'M. Chavez'),
(21663, 809, 'San Enrique'),
(21664, 809, 'Sapal'),
(21665, 809, 'Sebario'),
(21666, 809, 'Suclaran'),
(21667, 809, 'Tamborong'),
(21668, 810, 'Alegria'),
(21669, 810, 'Ayangan'),
(21670, 810, 'Bubog'),
(21671, 810, 'Concordia Norte'),
(21672, 810, 'Dasal'),
(21673, 810, 'Inampologan'),
(21674, 810, 'Maabay'),
(21675, 810, 'Millan'),
(21676, 810, 'Oracon Norte'),
(21677, 810, 'Ravina'),
(21678, 810, 'Sabang'),
(21679, 810, 'San Isidro'),
(21680, 810, 'Sebaste'),
(21681, 810, 'Tanglad'),
(21682, 811, 'Bahi'),
(21683, 811, 'Basacdacu'),
(21684, 811, 'Cantiguib'),
(21685, 811, 'Dangay'),
(21686, 811, 'East Poblacion'),
(21687, 811, 'Ponong'),
(21688, 811, 'San Agustin'),
(21689, 811, 'Santa Filomena'),
(21690, 811, 'Tagbuane'),
(21691, 811, 'Toril'),
(21692, 811, 'West Poblacion'),
(21693, 812, 'Cabatang'),
(21694, 812, 'Cagongcagong'),
(21695, 812, 'Cambaol'),
(21696, 812, 'Cayacay'),
(21697, 812, 'Del Monte'),
(21698, 812, 'Katipunan'),
(21699, 812, 'La Hacienda'),
(21700, 812, 'Mahayag'),
(21701, 812, 'Napo'),
(21702, 812, 'Pagahat'),
(21703, 812, 'Poblacion'),
(21704, 812, 'Progreso'),
(21705, 812, 'Putlongcam'),
(21706, 812, 'Sudlon'),
(21707, 812, 'Untaga'),
(21708, 813, 'Almaria'),
(21709, 813, 'Bacong'),
(21710, 813, 'Badiang'),
(21711, 813, 'Buenasuerte'),
(21712, 813, 'Candabong'),
(21713, 813, 'Casica'),
(21714, 813, 'Katipunan'),
(21715, 813, 'Linawan'),
(21716, 813, 'Lundag'),
(21717, 813, 'Poblacion'),
(21718, 813, 'Santa Cruz'),
(21719, 813, 'Suba'),
(21720, 813, 'Talisay'),
(21721, 813, 'Tanod'),
(21722, 813, 'Tawid'),
(21723, 813, 'Virgen'),
(21724, 814, 'Angilan'),
(21725, 814, 'Bantolinao'),
(21726, 814, 'Bicahan'),
(21727, 814, 'Bitaugan'),
(21728, 814, 'Bungahan'),
(21729, 814, 'Canlaas'),
(21730, 814, 'Cansibuan'),
(21731, 814, 'Can-omay'),
(21732, 814, 'Celing'),
(21733, 814, 'Danao'),
(21734, 814, 'Danicop'),
(21735, 814, 'Mag-aso'),
(21736, 814, 'Poblacion'),
(21737, 814, 'Quinapon-an'),
(21738, 814, 'Santo Rosario'),
(21739, 814, 'Tabuan'),
(21740, 814, 'Tagubaas'),
(21741, 814, 'Tupas'),
(21742, 814, 'Ubojan'),
(21743, 814, 'Viga'),
(21744, 814, 'Villa Aurora'),
(21745, 815, 'Cambanac'),
(21746, 815, 'Dasitam'),
(21747, 815, 'Buenaventura'),
(21748, 815, 'Guiwanon'),
(21749, 815, 'Landican'),
(21750, 815, 'Laya'),
(21751, 815, 'Libertad'),
(21752, 815, 'Montana'),
(21753, 815, 'Pamilacan'),
(21754, 815, 'Payahan'),
(21755, 815, 'Poblacion'),
(21756, 815, 'San Isidro'),
(21757, 815, 'San Roque'),
(21758, 815, 'San Vicente'),
(21759, 815, 'Santa Cruz'),
(21760, 815, 'Taguihon'),
(21761, 815, 'Tanday'),
(21762, 816, 'Baucan Norte'),
(21763, 816, 'Baucan Sur'),
(21764, 816, 'Boctol'),
(21765, 816, 'Boyog Norte'),
(21766, 816, 'Boyog Proper'),
(21767, 816, 'Boyog Sur'),
(21768, 816, 'Cabad'),
(21769, 816, 'Candasig'),
(21770, 816, 'Cantalid'),
(21771, 816, 'Cantomimbo'),
(21772, 816, 'Cogon'),
(21773, 816, 'Datag Norte'),
(21774, 816, 'Datag Sur'),
(21775, 816, 'Del Carmen Este (Pob.)'),
(21776, 816, 'Del Carmen Norte (Pob.)'),
(21777, 816, 'Del Carmen Weste (Pob.)'),
(21778, 816, 'Del Carmen Sur (Pob.)'),
(21779, 816, 'Del Rosario'),
(21780, 816, 'Dorol'),
(21781, 816, 'Haguilanan Grande'),
(21782, 816, 'Hanopol Este'),
(21783, 816, 'Hanopol Norte'),
(21784, 816, 'Hanopol Weste'),
(21785, 816, 'Magsija'),
(21786, 816, 'Maslog'),
(21787, 816, 'Sagasa'),
(21788, 816, 'Sal-ing'),
(21789, 816, 'San Isidro'),
(21790, 816, 'San Roque'),
(21791, 816, 'Santo Niño'),
(21792, 816, 'Tagustusan'),
(21793, 817, 'Aloja'),
(21794, 817, 'Cabacnitan'),
(21795, 817, 'Cambacay'),
(21796, 817, 'Cantigdas'),
(21797, 817, 'Garcia'),
(21798, 817, 'Janlud'),
(21799, 817, 'Poblacion Norte'),
(21800, 817, 'Poblacion Sur'),
(21801, 817, 'Poblacion Vieja'),
(21802, 817, 'Quezon'),
(21803, 817, 'Quirino'),
(21804, 817, 'Rizal'),
(21805, 817, 'Rosariohan'),
(21806, 817, 'Behind The Clouds'),
(21807, 817, 'Santa Cruz'),
(21808, 818, 'Bonifacio'),
(21809, 818, 'Bugang Norte'),
(21810, 818, 'Bugang Sur'),
(21811, 818, 'Cabacnitan'),
(21812, 818, 'Cambigsi'),
(21813, 818, 'Campagao'),
(21814, 818, 'Cansumbol'),
(21815, 818, 'Dagohoy'),
(21816, 818, 'Owac'),
(21817, 818, 'Poblacion'),
(21818, 818, 'Quezon'),
(21819, 818, 'Riverside'),
(21820, 818, 'Rizal'),
(21821, 818, 'Roxas'),
(21822, 818, 'Subayon'),
(21823, 818, 'Villa Aurora'),
(21824, 818, 'Villa Suerte'),
(21825, 818, 'Yanaya'),
(21826, 818, 'Zamora'),
(21827, 819, 'Anonang'),
(21828, 819, 'Asinan'),
(21829, 819, 'Bago'),
(21830, 819, 'Baluarte'),
(21831, 819, 'Bantuan'),
(21832, 819, 'Bato'),
(21833, 819, 'Bonotbonot'),
(21834, 819, 'Bugaong'),
(21835, 819, 'Cambuhat'),
(21836, 819, 'Cambus-oc'),
(21837, 819, 'Cangawa'),
(21838, 819, 'Cantomugcad'),
(21839, 819, 'Cantores'),
(21840, 819, 'Cantuba'),
(21841, 819, 'Catigbian'),
(21842, 819, 'Cawag'),
(21843, 819, 'Cruz'),
(21844, 819, 'Dait'),
(21845, 819, 'Eastern Cabul-an'),
(21846, 819, 'Hunan'),
(21847, 819, 'Lapacan Norte'),
(21848, 819, 'Lapacan Sur'),
(21849, 819, 'Lubang'),
(21850, 819, 'Lusong'),
(21851, 819, 'Magkaya'),
(21852, 819, 'Merryland'),
(21853, 819, 'Nueva Granada'),
(21854, 819, 'Nueva Montana'),
(21855, 819, 'Overland'),
(21856, 819, 'Panghagban'),
(21857, 819, 'Poblacion'),
(21858, 819, 'Puting Bato'),
(21859, 819, 'Rufo Hill'),
(21860, 819, 'Sweetland'),
(21861, 819, 'Western Cabul-an'),
(21862, 820, 'Abucayan Norte'),
(21863, 820, 'Abucayan Sur'),
(21864, 820, 'Banlasan'),
(21865, 820, 'Bentig'),
(21866, 820, 'Binogawan'),
(21867, 820, 'Bonbon'),
(21868, 820, 'Cabayugan'),
(21869, 820, 'Cabudburan'),
(21870, 820, 'Calunasan'),
(21871, 820, 'Camias'),
(21872, 820, 'Canguha'),
(21873, 820, 'Catmonan'),
(21874, 820, 'Desamparados (Pob.)'),
(21875, 820, 'Kahayag'),
(21876, 820, 'Kinabag-an'),
(21877, 820, 'Labuon'),
(21878, 820, 'Lawis'),
(21879, 820, 'Liboron'),
(21880, 820, 'Lo-oc'),
(21881, 820, 'Lomboy'),
(21882, 820, 'Lucob'),
(21883, 820, 'Madangog'),
(21884, 820, 'Magtongtong'),
(21885, 820, 'Mandaug'),
(21886, 820, 'Mantatao'),
(21887, 820, 'Sampoangon'),
(21888, 820, 'San Isidro'),
(21889, 820, 'Santa Cruz (Pob.)'),
(21890, 820, 'Sojoton'),
(21891, 820, 'Talisay');
INSERT INTO `table_barangay` (`barangay_id`, `municipality_id`, `barangay_name`) VALUES
(21892, 820, 'Tinibgan'),
(21893, 820, 'Tultugan'),
(21894, 820, 'Ulbujan'),
(21895, 821, 'Abihilan'),
(21896, 821, 'Anoling'),
(21897, 821, 'Boyo-an'),
(21898, 821, 'Cadapdapan'),
(21899, 821, 'Cambane'),
(21900, 821, 'Can-olin'),
(21901, 821, 'Canawa'),
(21902, 821, 'Cogtong'),
(21903, 821, 'La Union'),
(21904, 821, 'Luan'),
(21905, 821, 'Lungsoda-an'),
(21906, 821, 'Mahangin'),
(21907, 821, 'Pagahat'),
(21908, 821, 'Panadtaran'),
(21909, 821, 'Panas'),
(21910, 821, 'Poblacion'),
(21911, 821, 'San Isidro'),
(21912, 821, 'Tambongan'),
(21913, 821, 'Tawid'),
(21914, 821, 'Tugas'),
(21915, 821, 'Tubod'),
(21916, 822, 'Alegria'),
(21917, 822, 'Bicao'),
(21918, 822, 'Buenavista'),
(21919, 822, 'Buenos Aires'),
(21920, 822, 'Calatrava'),
(21921, 822, 'El Progreso'),
(21922, 822, 'El Salvador'),
(21923, 822, 'Guadalupe'),
(21924, 822, 'Katipunan'),
(21925, 822, 'La Libertad'),
(21926, 822, 'La Paz'),
(21927, 822, 'La Salvacion'),
(21928, 822, 'La Victoria'),
(21929, 822, 'Matin-ao'),
(21930, 822, 'Montehermoso'),
(21931, 822, 'Montesuerte'),
(21932, 822, 'Montesunting'),
(21933, 822, 'Montevideo'),
(21934, 822, 'Nueva Fuerza'),
(21935, 822, 'Nueva Vida Este'),
(21936, 822, 'Nueva Vida Sur'),
(21937, 822, 'Nueva Vida Norte'),
(21938, 822, 'Poblacion Norte'),
(21939, 822, 'Poblacion Sur'),
(21940, 822, 'Tambo-an'),
(21941, 822, 'Vallehermoso'),
(21942, 822, 'Villaflor'),
(21943, 822, 'Villafuerte'),
(21944, 822, 'Villarcayo'),
(21945, 823, 'Alegria'),
(21946, 823, 'Ambuan'),
(21947, 823, 'Baang'),
(21948, 823, 'Bagtic'),
(21949, 823, 'Bongbong'),
(21950, 823, 'Cambailan'),
(21951, 823, 'Candumayao'),
(21952, 823, 'Kang-iras'),
(21953, 823, 'Causwagan Norte'),
(21954, 823, 'Hagbuaya'),
(21955, 823, 'Haguilanan'),
(21956, 823, 'Libertad Sur'),
(21957, 823, 'Liboron'),
(21958, 823, 'Mahayag Norte'),
(21959, 823, 'Mahayag Sur'),
(21960, 823, 'Maitum'),
(21961, 823, 'Mantasida'),
(21962, 823, 'Poblacion'),
(21963, 823, 'Rizal'),
(21964, 823, 'Sinakayanan'),
(21965, 823, 'Triple Union'),
(21966, 823, 'Poblacion Weste'),
(21967, 824, 'Bacani'),
(21968, 824, 'Bogtongbod'),
(21969, 824, 'Bonbon'),
(21970, 824, 'Bontud'),
(21971, 824, 'Buacao'),
(21972, 824, 'Buangan'),
(21973, 824, 'Cabog'),
(21974, 824, 'Caboy'),
(21975, 824, 'Caluwasan'),
(21976, 824, 'Candajec'),
(21977, 824, 'Cantoyoc'),
(21978, 824, 'Comaang'),
(21979, 824, 'Danahao'),
(21980, 824, 'Katipunan'),
(21981, 824, 'Lajog'),
(21982, 824, 'Mataub'),
(21983, 824, 'Nahawan'),
(21984, 824, 'Poblacion Centro'),
(21985, 824, 'Poblacion Norte'),
(21986, 824, 'Poblacion Sur'),
(21987, 824, 'Tangaran'),
(21988, 824, 'Tontunan'),
(21989, 824, 'Tubod'),
(21990, 824, 'Villaflor'),
(21991, 825, 'Anislag'),
(21992, 825, 'Canangca-an'),
(21993, 825, 'Canapnapan'),
(21994, 825, 'Cancatac'),
(21995, 825, 'Pandol'),
(21996, 825, 'Poblacion'),
(21997, 825, 'Sambog'),
(21998, 825, 'Tanday'),
(21999, 826, 'De la Paz'),
(22000, 826, 'Fatima'),
(22001, 826, 'Loreto'),
(22002, 826, 'Lourdes'),
(22003, 826, 'Malayo Norte'),
(22004, 826, 'Malayo Sur'),
(22005, 826, 'Monserrat'),
(22006, 826, 'New Lourdes'),
(22007, 826, 'Patrocinio'),
(22008, 826, 'Poblacion'),
(22009, 826, 'Rosario'),
(22010, 826, 'Salvador'),
(22011, 826, 'San Roque'),
(22012, 826, 'Upper de la Paz'),
(22013, 827, 'Babag'),
(22014, 827, 'Can-oling'),
(22015, 827, 'Candelaria'),
(22016, 827, 'Estaca'),
(22017, 827, 'Cagawasan'),
(22018, 827, 'Cagawitan'),
(22019, 827, 'Caluasan'),
(22020, 827, 'La Esperanza'),
(22021, 827, 'Mahayag'),
(22022, 827, 'Malitbog'),
(22023, 827, 'Poblacion'),
(22024, 827, 'San Miguel'),
(22025, 827, 'San Vicente'),
(22026, 827, 'Santa Cruz'),
(22027, 827, 'Villa Aurora'),
(22028, 828, 'Cabatuan'),
(22029, 828, 'Cantubod'),
(22030, 828, 'Carbon'),
(22031, 828, 'Concepcion'),
(22032, 828, 'Dagohoy'),
(22033, 828, 'Hibale'),
(22034, 828, 'Magtangtang'),
(22035, 828, 'Nahud'),
(22036, 828, 'Poblacion'),
(22037, 828, 'Remedios'),
(22038, 828, 'San Carlos'),
(22039, 828, 'San Miguel'),
(22040, 828, 'Santa Fe'),
(22041, 828, 'Santo Niño'),
(22042, 828, 'Tabok'),
(22043, 828, 'Taming'),
(22044, 828, 'Villa Anunciado'),
(22045, 829, 'Biking'),
(22046, 829, 'Bingag'),
(22047, 829, 'San Isidro'),
(22048, 829, 'Catarman'),
(22049, 829, 'Dao'),
(22050, 829, 'Mayacabac'),
(22051, 829, 'Poblacion'),
(22052, 829, 'Songculan'),
(22053, 829, 'Tabalong'),
(22054, 829, 'Tinago'),
(22055, 829, 'Totolan'),
(22056, 829, 'Mariveles'),
(22057, 830, 'Abihid'),
(22058, 830, 'Alemania'),
(22059, 830, 'Baguhan'),
(22060, 830, 'Bakilid'),
(22061, 830, 'Balbalan'),
(22062, 830, 'Banban'),
(22063, 830, 'Bauhugan'),
(22064, 830, 'Bilisan'),
(22065, 830, 'Cabagakian'),
(22066, 830, 'Cabanbanan'),
(22067, 830, 'Cadap-agan'),
(22068, 830, 'Cambacol'),
(22069, 830, 'Cambayaon'),
(22070, 830, 'Canhayupon'),
(22071, 830, 'Canlambong'),
(22072, 830, 'Casingan'),
(22073, 830, 'Catugasan'),
(22074, 830, 'Datag'),
(22075, 830, 'Guindaguitan'),
(22076, 830, 'Guingoyuran'),
(22077, 830, 'Ile'),
(22078, 830, 'Lapsaon'),
(22079, 830, 'Limokon Ilaod'),
(22080, 830, 'Limokon Ilaya'),
(22081, 830, 'Luyo'),
(22082, 830, 'Malijao'),
(22083, 830, 'Oac'),
(22084, 830, 'Pagsa'),
(22085, 830, 'Pangihawan'),
(22086, 830, 'Sawang'),
(22087, 830, 'Puangyuta'),
(22088, 830, 'Tangohay'),
(22089, 830, 'Taongon Cabatuan'),
(22090, 830, 'Tawid Bitaog'),
(22091, 830, 'Taongon Can-andam'),
(22092, 831, 'Alejawan'),
(22093, 831, 'Angilan'),
(22094, 831, 'Anibongan'),
(22095, 831, 'Bangwalog'),
(22096, 831, 'Cansuhay'),
(22097, 831, 'Danao'),
(22098, 831, 'Duay'),
(22099, 831, 'Guinsularan'),
(22100, 831, 'Itum'),
(22101, 831, 'Langkis'),
(22102, 831, 'Lobogon'),
(22103, 831, 'Madua Norte'),
(22104, 831, 'Madua Sur'),
(22105, 831, 'Mambool'),
(22106, 831, 'Mawi'),
(22107, 831, 'Payao'),
(22108, 831, 'San Antonio (Pob.)'),
(22109, 831, 'San Isidro'),
(22110, 831, 'San Pedro'),
(22111, 831, 'Imelda'),
(22112, 831, 'Taytay'),
(22113, 832, 'Abijilan'),
(22114, 832, 'Antipolo'),
(22115, 832, 'Basiao'),
(22116, 832, 'Cagwang'),
(22117, 832, 'Calma'),
(22118, 832, 'Cambuyo'),
(22119, 832, 'Canayaon East'),
(22120, 832, 'Canayaon West'),
(22121, 832, 'Candanas'),
(22122, 832, 'Candulao'),
(22123, 832, 'Catmon'),
(22124, 832, 'Cayam'),
(22125, 832, 'Cupa'),
(22126, 832, 'Datag'),
(22127, 832, 'Estaca'),
(22128, 832, 'Libertad'),
(22129, 832, 'Lungsodaan East'),
(22130, 832, 'Lungsodaan West'),
(22131, 832, 'Malinao'),
(22132, 832, 'Manaba'),
(22133, 832, 'Pasong'),
(22134, 832, 'Poblacion East'),
(22135, 832, 'Poblacion West'),
(22136, 832, 'Sacaon'),
(22137, 832, 'Sampong'),
(22138, 832, 'Tabuan'),
(22139, 832, 'Togbongon'),
(22140, 832, 'Ulbujan East'),
(22141, 832, 'Ulbujan West'),
(22142, 832, 'Victoria'),
(22143, 833, 'Basdio'),
(22144, 833, 'Bato'),
(22145, 833, 'Bayong'),
(22146, 833, 'Biabas'),
(22147, 833, 'Bulawan'),
(22148, 833, 'Cabantian'),
(22149, 833, 'Canhaway'),
(22150, 833, 'Cansiwang'),
(22151, 833, 'Casbu'),
(22152, 833, 'Catungawan Sur'),
(22153, 833, 'Catungawan Norte'),
(22154, 833, 'Guinacot'),
(22155, 833, 'Guio-ang'),
(22156, 833, 'Lombog'),
(22157, 833, 'Mayuga'),
(22158, 833, 'Sawang (Pob.)'),
(22159, 833, 'Tabajan (Pob.)'),
(22160, 833, 'Tabunok'),
(22161, 833, 'Trinidad'),
(22162, 834, 'Anonang'),
(22163, 834, 'Bahan'),
(22164, 834, 'Badiang'),
(22165, 834, 'Baguhan'),
(22166, 834, 'Banahao'),
(22167, 834, 'Baogo'),
(22168, 834, 'Bugang'),
(22169, 834, 'Cagawasan'),
(22170, 834, 'Cagayan'),
(22171, 834, 'Cambitoon'),
(22172, 834, 'Canlinte'),
(22173, 834, 'Cawayan'),
(22174, 834, 'Cogon'),
(22175, 834, 'Cuaming'),
(22176, 834, 'Dagnawan'),
(22177, 834, 'Dagohoy'),
(22178, 834, 'Dait Sur'),
(22179, 834, 'Datag'),
(22180, 834, 'Fatima'),
(22181, 834, 'Hambongan'),
(22182, 834, 'Ilaud (Pob.)'),
(22183, 834, 'Ilaya'),
(22184, 834, 'Ilihan'),
(22185, 834, 'Lapacan Norte'),
(22186, 834, 'Lapacan Sur'),
(22187, 834, 'Lawis'),
(22188, 834, 'Liloan Norte'),
(22189, 834, 'Liloan Sur'),
(22190, 834, 'Lomboy'),
(22191, 834, 'Lonoy Cainsican'),
(22192, 834, 'Lonoy Roma'),
(22193, 834, 'Lutao'),
(22194, 834, 'Luyo'),
(22195, 834, 'Mabuhay'),
(22196, 834, 'Maria Rosario'),
(22197, 834, 'Nabuad'),
(22198, 834, 'Napo'),
(22199, 834, 'Ondol'),
(22200, 834, 'Poblacion'),
(22201, 834, 'Riverside'),
(22202, 834, 'Saa'),
(22203, 834, 'San Isidro'),
(22204, 834, 'San Jose'),
(22205, 834, 'Santo Niño'),
(22206, 834, 'Santo Rosario'),
(22207, 834, 'Sua'),
(22208, 834, 'Tambook'),
(22209, 834, 'Tungod'),
(22210, 834, 'U-og'),
(22211, 834, 'Ubujan'),
(22212, 835, 'Alejawan'),
(22213, 835, 'Balili'),
(22214, 835, 'Boctol'),
(22215, 835, 'Buyog'),
(22216, 835, 'Bunga Ilaya'),
(22217, 835, 'Bunga Mar'),
(22218, 835, 'Cabunga-an'),
(22219, 835, 'Calabacita'),
(22220, 835, 'Cambugason'),
(22221, 835, 'Can-ipol'),
(22222, 835, 'Canjulao'),
(22223, 835, 'Cantagay'),
(22224, 835, 'Cantuyoc'),
(22225, 835, 'Can-uba'),
(22226, 835, 'Can-upao'),
(22227, 835, 'Faraon'),
(22228, 835, 'Ipil'),
(22229, 835, 'Kinagbaan'),
(22230, 835, 'Laca'),
(22231, 835, 'Larapan'),
(22232, 835, 'Lonoy'),
(22233, 835, 'Looc'),
(22234, 835, 'Malbog'),
(22235, 835, 'Mayana'),
(22236, 835, 'Naatang'),
(22237, 835, 'Nausok'),
(22238, 835, 'Odiong'),
(22239, 835, 'Pagina'),
(22240, 835, 'Pangdan'),
(22241, 835, 'Poblacion'),
(22242, 835, 'Tejero'),
(22243, 835, 'Tubod Mar'),
(22244, 835, 'Tubod Monte'),
(22245, 836, 'Alumar'),
(22246, 836, 'Banacon'),
(22247, 836, 'Buyog'),
(22248, 836, 'Cabasakan'),
(22249, 836, 'Campao Occidental'),
(22250, 836, 'Campao Oriental'),
(22251, 836, 'Cangmundo'),
(22252, 836, 'Carlos P. Garcia'),
(22253, 836, 'Corte Baud'),
(22254, 836, 'Handumon'),
(22255, 836, 'Jagoliao'),
(22256, 836, 'Jandayan Norte'),
(22257, 836, 'Jandayan Sur'),
(22258, 836, 'Mahanay'),
(22259, 836, 'Nasingin'),
(22260, 836, 'Pandanon'),
(22261, 836, 'Poblacion'),
(22262, 836, 'Saguise'),
(22263, 836, 'Salog'),
(22264, 836, 'San Jose'),
(22265, 836, 'Santo Niño'),
(22266, 836, 'Taytay'),
(22267, 836, 'Tugas'),
(22268, 836, 'Tulang'),
(22269, 837, 'Banban'),
(22270, 837, 'Bonkokan Ilaya'),
(22271, 837, 'Bonkokan Ubos'),
(22272, 837, 'Calvario'),
(22273, 837, 'Candulang'),
(22274, 837, 'Catugasan'),
(22275, 837, 'Cayupo'),
(22276, 837, 'Cogon'),
(22277, 837, 'Jambawan'),
(22278, 837, 'La Fortuna'),
(22279, 837, 'Lomanoy'),
(22280, 837, 'Macalingan'),
(22281, 837, 'Malinao East'),
(22282, 837, 'Malinao West'),
(22283, 837, 'Nagsulay'),
(22284, 837, 'Poblacion'),
(22285, 837, 'Taug'),
(22286, 837, 'Tiguis'),
(22287, 838, 'Agape'),
(22288, 838, 'Alegria Norte'),
(22289, 838, 'Alegria Sur'),
(22290, 838, 'Bonbon'),
(22291, 838, 'Botoc Occidental'),
(22292, 838, 'Botoc Oriental'),
(22293, 838, 'Calvario'),
(22294, 838, 'Concepcion'),
(22295, 838, 'Hinawanan'),
(22296, 838, 'Las Salinas Norte'),
(22297, 838, 'Las Salinas Sur'),
(22298, 838, 'Palo'),
(22299, 838, 'Poblacion Ibabao'),
(22300, 838, 'Poblacion Ubos'),
(22301, 838, 'Sagnap'),
(22302, 838, 'Tambangan'),
(22303, 838, 'Tangcasan Norte'),
(22304, 838, 'Tangcasan Sur'),
(22305, 838, 'Tayong Occidental'),
(22306, 838, 'Tayong Oriental'),
(22307, 838, 'Tocdog Dacu'),
(22308, 838, 'Tocdog Ilaya'),
(22309, 838, 'Villalimpia'),
(22310, 838, 'Yanangan'),
(22311, 839, 'Agape'),
(22312, 839, 'Alegria'),
(22313, 839, 'Bagumbayan'),
(22314, 839, 'Bahian'),
(22315, 839, 'Bonbon Lower'),
(22316, 839, 'Bonbon Upper'),
(22317, 839, 'Buenavista'),
(22318, 839, 'Bugho'),
(22319, 839, 'Cabadiangan'),
(22320, 839, 'Calunasan Norte'),
(22321, 839, 'Calunasan Sur'),
(22322, 839, 'Camayaan'),
(22323, 839, 'Cambance'),
(22324, 839, 'Candabong'),
(22325, 839, 'Candasag'),
(22326, 839, 'Canlasid'),
(22327, 839, 'Gon-ob'),
(22328, 839, 'Gotozon'),
(22329, 839, 'Jimilian'),
(22330, 839, 'Oy'),
(22331, 839, 'Poblacion Sawang'),
(22332, 839, 'Poblacion Ondol'),
(22333, 839, 'Quinoguitan'),
(22334, 839, 'Taytay'),
(22335, 839, 'Tigbao'),
(22336, 839, 'Ugpong'),
(22337, 839, 'Valladolid'),
(22338, 839, 'Villaflor'),
(22339, 840, 'Agsoso'),
(22340, 840, 'Badbad Occidental'),
(22341, 840, 'Badbad Oriental'),
(22342, 840, 'Bagacay Katipunan'),
(22343, 840, 'Bagacay Kawayan'),
(22344, 840, 'Bagacay Saong'),
(22345, 840, 'Bahi'),
(22346, 840, 'Basac'),
(22347, 840, 'Basdacu'),
(22348, 840, 'Basdio'),
(22349, 840, 'Biasong'),
(22350, 840, 'Bongco'),
(22351, 840, 'Bugho'),
(22352, 840, 'Cabacongan'),
(22353, 840, 'Cabadug'),
(22354, 840, 'Cabug'),
(22355, 840, 'Calayugan Norte'),
(22356, 840, 'Calayugan Sur'),
(22357, 840, 'Canmaag'),
(22358, 840, 'Cambaquiz'),
(22359, 840, 'Campatud'),
(22360, 840, 'Candaigan'),
(22361, 840, 'Canhangdon Occidental'),
(22362, 840, 'Canhangdon Oriental'),
(22363, 840, 'Canigaan'),
(22364, 840, 'Canmanoc'),
(22365, 840, 'Cansuagwit'),
(22366, 840, 'Cansubayon'),
(22367, 840, 'Catagbacan Handig'),
(22368, 840, 'Catagbacan Norte'),
(22369, 840, 'Catagbacan Sur'),
(22370, 840, 'Cantam-is Bago'),
(22371, 840, 'Cantaongon'),
(22372, 840, 'Cantumocad'),
(22373, 840, 'Cantam-is Baslay'),
(22374, 840, 'Cogon Norte (Pob.)'),
(22375, 840, 'Cogon Sur'),
(22376, 840, 'Cuasi'),
(22377, 840, 'Genomoan'),
(22378, 840, 'Lintuan'),
(22379, 840, 'Looc'),
(22380, 840, 'Mocpoc Norte'),
(22381, 840, 'Mocpoc Sur'),
(22382, 840, 'Nagtuang'),
(22383, 840, 'Napo (Pob.)'),
(22384, 840, 'Nueva Vida'),
(22385, 840, 'Panangquilon'),
(22386, 840, 'Pantudlan'),
(22387, 840, 'Pig-ot'),
(22388, 840, 'Moto Norte (Pob.)'),
(22389, 840, 'Moto Sur (Pob.)'),
(22390, 840, 'Pondol'),
(22391, 840, 'Quinobcoban'),
(22392, 840, 'Sondol'),
(22393, 840, 'Song-on'),
(22394, 840, 'Talisay'),
(22395, 840, 'Tan-awan'),
(22396, 840, 'Tangnan'),
(22397, 840, 'Taytay'),
(22398, 840, 'Ticugan'),
(22399, 840, 'Tiwi'),
(22400, 840, 'Tontonan'),
(22401, 840, 'Tubodacu'),
(22402, 840, 'Tubodio'),
(22403, 840, 'Tubuan'),
(22404, 840, 'Ubayon'),
(22405, 840, 'Ubojan'),
(22406, 841, 'Abaca'),
(22407, 841, 'Abad Santos'),
(22408, 841, 'Aguipo'),
(22409, 841, 'Concepcion'),
(22410, 841, 'Baybayon'),
(22411, 841, 'Bulawan'),
(22412, 841, 'Cabidian'),
(22413, 841, 'Cawayanan'),
(22414, 841, 'Del Mar'),
(22415, 841, 'Lungsoda-an'),
(22416, 841, 'Marcelo'),
(22417, 841, 'Minol'),
(22418, 841, 'Paraiso'),
(22419, 841, 'Poblacion I'),
(22420, 841, 'Poblacion II'),
(22421, 841, 'San Isidro'),
(22422, 841, 'San Jose'),
(22423, 841, 'San Rafael'),
(22424, 841, 'San Roque'),
(22425, 841, 'Tambo'),
(22426, 841, 'Tangkigan'),
(22427, 841, 'Valaga'),
(22428, 842, 'San Roque'),
(22429, 842, 'Agahay'),
(22430, 842, 'Aliguay'),
(22431, 842, 'Anislag'),
(22432, 842, 'Bayacabac'),
(22433, 842, 'Bood'),
(22434, 842, 'Busao'),
(22435, 842, 'Cabawan'),
(22436, 842, 'Candavid'),
(22437, 842, 'Dipatlong'),
(22438, 842, 'Guiwanon'),
(22439, 842, 'Jandig'),
(22440, 842, 'Lagtangon'),
(22441, 842, 'Lincod'),
(22442, 842, 'Pagnitoan'),
(22443, 842, 'Poblacion'),
(22444, 842, 'Punsod'),
(22445, 842, 'Punta Cruz'),
(22446, 842, 'San Isidro'),
(22447, 842, 'San Vicente'),
(22448, 842, 'Tinibgan'),
(22449, 842, 'Toril'),
(22450, 843, 'Bil-isan'),
(22451, 843, 'Bolod'),
(22452, 843, 'Danao'),
(22453, 843, 'Doljo'),
(22454, 843, 'Libaong'),
(22455, 843, 'Looc'),
(22456, 843, 'Lourdes'),
(22457, 843, 'Poblacion'),
(22458, 843, 'Tangnan'),
(22459, 843, 'Tawala'),
(22460, 844, 'Aurora'),
(22461, 844, 'Bagacay'),
(22462, 844, 'Bagumbayan'),
(22463, 844, 'Bayong'),
(22464, 844, 'Buenasuerte'),
(22465, 844, 'Cagawasan'),
(22466, 844, 'Cansungay'),
(22467, 844, 'Catagda-an'),
(22468, 844, 'Del Pilar'),
(22469, 844, 'Estaca'),
(22470, 844, 'Ilaud'),
(22471, 844, 'Inaghuban'),
(22472, 844, 'La Suerte'),
(22473, 844, 'Lumbay'),
(22474, 844, 'Lundag'),
(22475, 844, 'Pamacsalan'),
(22476, 844, 'Poblacion'),
(22477, 844, 'Rizal'),
(22478, 844, 'San Carlos'),
(22479, 844, 'San Isidro'),
(22480, 844, 'San Vicente'),
(22481, 845, 'Aguining'),
(22482, 845, 'Basiao'),
(22483, 845, 'Baud'),
(22484, 845, 'Bayog'),
(22485, 845, 'Bogo'),
(22486, 845, 'Bonbonon'),
(22487, 845, 'Canmangao'),
(22488, 845, 'Campamanog'),
(22489, 845, 'Gaus'),
(22490, 845, 'Kabangkalan'),
(22491, 845, 'Lapinig'),
(22492, 845, 'Lipata'),
(22493, 845, 'Poblacion'),
(22494, 845, 'Popoo'),
(22495, 845, 'Saguise'),
(22496, 845, 'San Jose'),
(22497, 845, 'Santo Rosario'),
(22498, 845, 'Tilmobo'),
(22499, 845, 'Tugas'),
(22500, 845, 'Tugnao'),
(22501, 845, 'Villa Milagrosa'),
(22502, 845, 'Butan'),
(22503, 845, 'San Vicente'),
(22504, 846, 'Calangahan'),
(22505, 846, 'Canmano'),
(22506, 846, 'Canmaya Centro'),
(22507, 846, 'Canmaya Diot'),
(22508, 846, 'Dagnawan'),
(22509, 846, 'Kabasacan'),
(22510, 846, 'Kagawasan'),
(22511, 846, 'Katipunan'),
(22512, 846, 'Langtad'),
(22513, 846, 'Libertad Norte'),
(22514, 846, 'Libertad Sur'),
(22515, 846, 'Mantalongon'),
(22516, 846, 'Poblacion'),
(22517, 846, 'Sagbayan Sur'),
(22518, 846, 'San Agustin'),
(22519, 846, 'San Antonio'),
(22520, 846, 'San Isidro'),
(22521, 846, 'San Ramon'),
(22522, 846, 'San Roque'),
(22523, 846, 'San Vicente Norte'),
(22524, 846, 'San Vicente Sur'),
(22525, 846, 'Santa Catalina'),
(22526, 846, 'Santa Cruz'),
(22527, 846, 'Ubojan'),
(22528, 847, 'Abehilan'),
(22529, 847, 'Baunos'),
(22530, 847, 'Cabanugan'),
(22531, 847, 'Caimbang'),
(22532, 847, 'Cambansag'),
(22533, 847, 'Candungao'),
(22534, 847, 'Cansague Norte'),
(22535, 847, 'Cansague Sur'),
(22536, 847, 'Causwagan Sur'),
(22537, 847, 'Masonoy'),
(22538, 847, 'Poblacion'),
(22539, 847, 'Baryong Daan'),
(22540, 848, 'Bayongan'),
(22541, 848, 'Bugang'),
(22542, 848, 'Cabangahan'),
(22543, 848, 'Kagawasan'),
(22544, 848, 'Camanaga'),
(22545, 848, 'Cambangay Norte'),
(22546, 848, 'Capayas'),
(22547, 848, 'Corazon'),
(22548, 848, 'Garcia'),
(22549, 848, 'Hagbuyo'),
(22550, 848, 'Caluasan'),
(22551, 848, 'Mahayag'),
(22552, 848, 'Poblacion'),
(22553, 848, 'San Isidro'),
(22554, 848, 'San Jose'),
(22555, 848, 'San Vicente'),
(22556, 848, 'Santo Niño'),
(22557, 848, 'Tomoc'),
(22558, 849, 'Bayawahan'),
(22559, 849, 'Cabancalan'),
(22560, 849, 'Calinga-an'),
(22561, 849, 'Calinginan Norte'),
(22562, 849, 'Calinginan Sur'),
(22563, 849, 'Cambagui'),
(22564, 849, 'Ewon'),
(22565, 849, 'Guinob-an'),
(22566, 849, 'Lagtangan'),
(22567, 849, 'Licolico'),
(22568, 849, 'Lobgob'),
(22569, 849, 'Magsaysay'),
(22570, 849, 'Poblacion'),
(22571, 850, 'Abachanan'),
(22572, 850, 'Anibongan'),
(22573, 850, 'Bugsoc'),
(22574, 850, 'Canlangit'),
(22575, 850, 'Canta-ub'),
(22576, 850, 'Casilay'),
(22577, 850, 'Danicop'),
(22578, 850, 'Dusita'),
(22579, 850, 'Cahayag'),
(22580, 850, 'La Union'),
(22581, 850, 'Lataban'),
(22582, 850, 'Magsaysay'),
(22583, 850, 'Matin-ao'),
(22584, 850, 'Man-od'),
(22585, 850, 'Poblacion'),
(22586, 850, 'Salvador'),
(22587, 850, 'San Agustin'),
(22588, 850, 'San Isidro'),
(22589, 850, 'San Jose'),
(22590, 850, 'San Juan'),
(22591, 850, 'Santa Cruz'),
(22592, 850, 'Villa Garcia'),
(22593, 851, 'Abucay Norte'),
(22594, 851, 'Abucay Sur'),
(22595, 851, 'Badiang'),
(22596, 851, 'Bahaybahay'),
(22597, 851, 'Cambuac Norte'),
(22598, 851, 'Cambuac Sur'),
(22599, 851, 'Canagong'),
(22600, 851, 'Libjo'),
(22601, 851, 'Poblacion I'),
(22602, 851, 'Poblacion II'),
(22603, 852, 'Bool'),
(22604, 852, 'Booy'),
(22605, 852, 'Cabawan'),
(22606, 852, 'Cogon'),
(22607, 852, 'Dao'),
(22608, 852, 'Dampas'),
(22609, 852, 'Manga'),
(22610, 852, 'Mansasa'),
(22611, 852, 'Poblacion I'),
(22612, 852, 'Poblacion II'),
(22613, 852, 'Poblacion III'),
(22614, 852, 'San Isidro'),
(22615, 852, 'Taloto'),
(22616, 852, 'Tiptip'),
(22617, 852, 'Ubujan'),
(22618, 853, 'Bagacay'),
(22619, 853, 'Balintawak'),
(22620, 853, 'Burgos'),
(22621, 853, 'Busalian'),
(22622, 853, 'Calituban'),
(22623, 853, 'Cataban'),
(22624, 853, 'Guindacpan'),
(22625, 853, 'Magsaysay'),
(22626, 853, 'Mahanay'),
(22627, 853, 'Nocnocan'),
(22628, 853, 'Poblacion'),
(22629, 853, 'Rizal'),
(22630, 853, 'Sag'),
(22631, 853, 'San Agustin'),
(22632, 853, 'San Carlos'),
(22633, 853, 'San Francisco'),
(22634, 853, 'San Isidro'),
(22635, 853, 'San Jose'),
(22636, 853, 'San Pedro'),
(22637, 853, 'San Roque'),
(22638, 853, 'Santo Niño'),
(22639, 853, 'Sikatuna'),
(22640, 853, 'Suba'),
(22641, 853, 'Tanghaligue'),
(22642, 853, 'Zamora'),
(22643, 854, 'Banlasan'),
(22644, 854, 'Bongbong'),
(22645, 854, 'Catoogan'),
(22646, 854, 'Guinobatan'),
(22647, 854, 'Hinlayagan Ilaud'),
(22648, 854, 'Hinlayagan Ilaya'),
(22649, 854, 'Kauswagan'),
(22650, 854, 'Kinan-oan'),
(22651, 854, 'La Union'),
(22652, 854, 'La Victoria'),
(22653, 854, 'Mabuhay Cabigohan'),
(22654, 854, 'Mahagbu'),
(22655, 854, 'Manuel M. Roxas'),
(22656, 854, 'Poblacion'),
(22657, 854, 'San Isidro'),
(22658, 854, 'San Vicente'),
(22659, 854, 'Santo Tomas'),
(22660, 854, 'Soom'),
(22661, 854, 'Tagum Norte'),
(22662, 854, 'Tagum Sur'),
(22663, 855, 'Bagongbanwa'),
(22664, 855, 'Bunacan'),
(22665, 855, 'Banlasan'),
(22666, 855, 'Batasan'),
(22667, 855, 'Bilangbilangan'),
(22668, 855, 'Bosongon'),
(22669, 855, 'Buenos Aires'),
(22670, 855, 'Cabulihan'),
(22671, 855, 'Cahayag'),
(22672, 855, 'Cawayanan'),
(22673, 855, 'Centro (Pob.)'),
(22674, 855, 'Genonocan'),
(22675, 855, 'Guiwanon'),
(22676, 855, 'Ilihan Norte'),
(22677, 855, 'Ilihan Sur'),
(22678, 855, 'Libertad'),
(22679, 855, 'Macaas'),
(22680, 855, 'Mocaboc Island'),
(22681, 855, 'Matabao'),
(22682, 855, 'Panadtaran'),
(22683, 855, 'Panaytayon'),
(22684, 855, 'Pandan'),
(22685, 855, 'Pangapasan'),
(22686, 855, 'Pinayagan Norte'),
(22687, 855, 'Pinayagan Sur'),
(22688, 855, 'Pooc Occidental (Pob.)'),
(22689, 855, 'Pooc Oriental (Pob.)'),
(22690, 855, 'Potohan'),
(22691, 855, 'Talenceras'),
(22692, 855, 'Tan-awan'),
(22693, 855, 'Tinangnan'),
(22694, 855, 'Ubay Island'),
(22695, 855, 'Ubojan'),
(22696, 855, 'Villanueva'),
(22697, 856, 'Achila'),
(22698, 856, 'Bay-ang'),
(22699, 856, 'Biabas'),
(22700, 856, 'Benliw'),
(22701, 856, 'Bongbong'),
(22702, 856, 'Bood'),
(22703, 856, 'Buenavista'),
(22704, 856, 'Cagting'),
(22705, 856, 'Camali-an'),
(22706, 856, 'Camambugan'),
(22707, 856, 'Casate'),
(22708, 856, 'Katarungan'),
(22709, 856, 'Cuya'),
(22710, 856, 'Fatima'),
(22711, 856, 'Gabi'),
(22712, 856, 'Governor Boyles'),
(22713, 856, 'Guintabo-an'),
(22714, 856, 'Hambabauran'),
(22715, 856, 'Humayhumay'),
(22716, 856, 'Ilihan'),
(22717, 856, 'Imelda'),
(22718, 856, 'Juagdan'),
(22719, 856, 'Calanggaman'),
(22720, 856, 'Los Angeles'),
(22721, 856, 'Lomangog'),
(22722, 856, 'Pag-asa'),
(22723, 856, 'Pangpang'),
(22724, 856, 'Poblacion'),
(22725, 856, 'San Francisco'),
(22726, 856, 'San Isidro'),
(22727, 856, 'San Pascual'),
(22728, 856, 'San Vicente'),
(22729, 856, 'Sentinila'),
(22730, 856, 'Sinandigan'),
(22731, 856, 'Tapal'),
(22732, 856, 'Tapon'),
(22733, 856, 'Tintinan'),
(22734, 856, 'Tipolo'),
(22735, 856, 'Tubog'),
(22736, 856, 'Tuboran'),
(22737, 856, 'Union'),
(22738, 856, 'Villa Teresita'),
(22739, 856, 'Bulilis'),
(22740, 856, 'California'),
(22741, 857, 'Adlawan'),
(22742, 857, 'Anas'),
(22743, 857, 'Anonang'),
(22744, 857, 'Anoyon'),
(22745, 857, 'Balingasao'),
(22746, 857, 'Botong'),
(22747, 857, 'Buyog'),
(22748, 857, 'Canduao Occidental'),
(22749, 857, 'Canduao Oriental'),
(22750, 857, 'Canlusong'),
(22751, 857, 'Canmanico'),
(22752, 857, 'Cansibao'),
(22753, 857, 'Catug-a'),
(22754, 857, 'Cutcutan'),
(22755, 857, 'Danao'),
(22756, 857, 'Genoveva'),
(22757, 857, 'Ginopolan'),
(22758, 857, 'La Victoria'),
(22759, 857, 'Lantang'),
(22760, 857, 'Limocon'),
(22761, 857, 'Loctob'),
(22762, 857, 'Magsaysay'),
(22763, 857, 'Marawis'),
(22764, 857, 'Maubo'),
(22765, 857, 'Nailo'),
(22766, 857, 'Omjon'),
(22767, 857, 'Pangi-an'),
(22768, 857, 'Poblacion Occidental'),
(22769, 857, 'Poblacion Oriental'),
(22770, 857, 'Simang'),
(22771, 857, 'Taug'),
(22772, 857, 'Tausion'),
(22773, 857, 'Taytay'),
(22774, 857, 'Ticum'),
(22775, 857, 'Banderahan'),
(22776, 858, 'Bilangbilangan Dako'),
(22777, 858, 'Bilangbilangan Diot'),
(22778, 858, 'Hingotanan East'),
(22779, 858, 'Hingotanan West'),
(22780, 858, 'Liberty'),
(22781, 858, 'Malingin'),
(22782, 858, 'Mandawa'),
(22783, 858, 'Maomawan'),
(22784, 858, 'Nueva Esperanza'),
(22785, 858, 'Nueva Estrella'),
(22786, 858, 'Pinamgo'),
(22787, 858, 'Poblacion'),
(22788, 858, 'Puerto San Pedro'),
(22789, 858, 'Sagasa'),
(22790, 858, 'Tuboran'),
(22791, 859, 'Cabadiangan'),
(22792, 859, 'Cabil-isan'),
(22793, 859, 'Candabong'),
(22794, 859, 'Lawaan'),
(22795, 859, 'Manga'),
(22796, 859, 'Palanas'),
(22797, 859, 'Poblacion'),
(22798, 859, 'Polo'),
(22799, 859, 'Salagmaya'),
(22800, 860, 'Atabay'),
(22801, 860, 'Daan-Lungsod'),
(22802, 860, 'Guiwang'),
(22803, 860, 'Nug-as'),
(22804, 860, 'Pasol'),
(22805, 860, 'Poblacion'),
(22806, 860, 'Pugalo'),
(22807, 861, 'San Agustin'),
(22808, 861, 'Compostela'),
(22809, 861, 'Guadalupe'),
(22810, 861, 'Legaspi'),
(22811, 861, 'Lepanto'),
(22812, 861, 'Madridejos'),
(22813, 861, 'Montpeller'),
(22814, 861, 'Poblacion'),
(22815, 861, 'Santa Filomena'),
(22816, 861, 'Valencia'),
(22817, 862, 'Angilan'),
(22818, 862, 'Bojo'),
(22819, 862, 'Bonbon'),
(22820, 862, 'Esperanza'),
(22821, 862, 'Kandingan'),
(22822, 862, 'Kantabogon'),
(22823, 862, 'Kawasan'),
(22824, 862, 'Olango'),
(22825, 862, 'Poblacion'),
(22826, 862, 'Punay'),
(22827, 862, 'Rosario'),
(22828, 862, 'Saksak'),
(22829, 862, 'Tampa-an'),
(22830, 862, 'Toyokon'),
(22831, 862, 'Zaragosa'),
(22832, 863, 'Alambijud'),
(22833, 863, 'Anajao'),
(22834, 863, 'Apo'),
(22835, 863, 'Balaas'),
(22836, 863, 'Balisong'),
(22837, 863, 'Binlod'),
(22838, 863, 'Bogo'),
(22839, 863, 'Butong'),
(22840, 863, 'Bug-ot'),
(22841, 863, 'Bulasa'),
(22842, 863, 'Calagasan'),
(22843, 863, 'Canbantug'),
(22844, 863, 'Canbanua'),
(22845, 863, 'Cansuje'),
(22846, 863, 'Capio-an'),
(22847, 863, 'Casay'),
(22848, 863, 'Catang'),
(22849, 863, 'Colawin'),
(22850, 863, 'Conalum'),
(22851, 863, 'Guiwanon'),
(22852, 863, 'Gutlang'),
(22853, 863, 'Jampang'),
(22854, 863, 'Jomgao'),
(22855, 863, 'Lamacan'),
(22856, 863, 'Langtad'),
(22857, 863, 'Langub'),
(22858, 863, 'Lapay'),
(22859, 863, 'Lengigon'),
(22860, 863, 'Linut-od'),
(22861, 863, 'Mabasa'),
(22862, 863, 'Mandilikit'),
(22863, 863, 'Mompeller'),
(22864, 863, 'Panadtaran'),
(22865, 863, 'Poblacion'),
(22866, 863, 'Sua'),
(22867, 863, 'Sumaguan'),
(22868, 863, 'Tabayag'),
(22869, 863, 'Talaga'),
(22870, 863, 'Talaytay'),
(22871, 863, 'Talo-ot'),
(22872, 863, 'Tiguib'),
(22873, 863, 'Tulang'),
(22874, 863, 'Tulic'),
(22875, 863, 'Ubaub'),
(22876, 863, 'Usmad'),
(22877, 864, 'Agbanga'),
(22878, 864, 'Agtugop'),
(22879, 864, 'Bago'),
(22880, 864, 'Bairan'),
(22881, 864, 'Banban'),
(22882, 864, 'Baye'),
(22883, 864, 'Bog-o'),
(22884, 864, 'Kaluangan'),
(22885, 864, 'Lanao'),
(22886, 864, 'Langub'),
(22887, 864, 'Looc Norte'),
(22888, 864, 'Lunas'),
(22889, 864, 'Magcalape'),
(22890, 864, 'Manguiao'),
(22891, 864, 'New Bago'),
(22892, 864, 'Owak'),
(22893, 864, 'Poblacion'),
(22894, 864, 'Saksak'),
(22895, 864, 'San Isidro'),
(22896, 864, 'San Roque'),
(22897, 864, 'Santa Lucia'),
(22898, 864, 'Santa Rita'),
(22899, 864, 'Tag-amakan'),
(22900, 864, 'Tagbubonga'),
(22901, 864, 'Tubigagmanok'),
(22902, 864, 'Tubod'),
(22903, 864, 'Ubogon'),
(22904, 865, 'Alawijao'),
(22905, 865, 'Balhaan'),
(22906, 865, 'Banhigan'),
(22907, 865, 'Basak'),
(22908, 865, 'Basiao'),
(22909, 865, 'Bato'),
(22910, 865, 'Bugas'),
(22911, 865, 'Calangcang'),
(22912, 865, 'Candiis'),
(22913, 865, 'Dagatan'),
(22914, 865, 'Dobdob'),
(22915, 865, 'Ginablan'),
(22916, 865, 'Lambug'),
(22917, 865, 'Malabago'),
(22918, 865, 'Malhiao'),
(22919, 865, 'Manduyong'),
(22920, 865, 'Matutinao'),
(22921, 865, 'Patong'),
(22922, 865, 'Poblacion'),
(22923, 865, 'Sanlagan'),
(22924, 865, 'Santicon'),
(22925, 865, 'Sohoton'),
(22926, 865, 'Sulsugan'),
(22927, 865, 'Talayong'),
(22928, 865, 'Taytay'),
(22929, 865, 'Tigbao'),
(22930, 865, 'Tiguib'),
(22931, 865, 'Tubod'),
(22932, 865, 'Zaragosa'),
(22933, 866, 'Abucayan'),
(22934, 866, 'Aliwanay'),
(22935, 866, 'Arpili'),
(22936, 866, 'Bayong'),
(22937, 866, 'Biasong'),
(22938, 866, 'Buanoy'),
(22939, 866, 'Cabagdalan'),
(22940, 866, 'Cabasiangan'),
(22941, 866, 'Cambuhawe'),
(22942, 866, 'Cansomoroy'),
(22943, 866, 'Cantibas'),
(22944, 866, 'Cantuod'),
(22945, 866, 'Duangan'),
(22946, 866, 'Gaas'),
(22947, 866, 'Ginatilan'),
(22948, 866, 'Hingatmonan'),
(22949, 866, 'Lamesa'),
(22950, 866, 'Liki'),
(22951, 866, 'Luca'),
(22952, 866, 'Matun-og'),
(22953, 866, 'Nangka'),
(22954, 866, 'Pondol'),
(22955, 866, 'Prenza'),
(22956, 866, 'Singsing'),
(22957, 866, 'Sunog'),
(22958, 866, 'Vito'),
(22959, 866, 'Baliwagan (Pob.)'),
(22960, 866, 'Santa Cruz-Santo Niño (Pob.)'),
(22961, 867, 'Atop-atop'),
(22962, 867, 'Baigad'),
(22963, 867, 'Baod'),
(22964, 867, 'Binaobao (Pob.)'),
(22965, 867, 'Botigues'),
(22966, 867, 'Kabac'),
(22967, 867, 'Doong'),
(22968, 867, 'Hilotongan'),
(22969, 867, 'Guiwanon'),
(22970, 867, 'Kabangbang'),
(22971, 867, 'Kampingganon'),
(22972, 867, 'Kangkaibe'),
(22973, 867, 'Lipayran'),
(22974, 867, 'Luyongbaybay'),
(22975, 867, 'Mojon'),
(22976, 867, 'Obo-ob'),
(22977, 867, 'Patao'),
(22978, 867, 'Putian'),
(22979, 867, 'Sillon'),
(22980, 867, 'Sungko'),
(22981, 867, 'Suba (Pob.)'),
(22982, 867, 'Sulangan'),
(22983, 867, 'Tamiao'),
(22984, 867, 'Bantigue (Pob.)'),
(22985, 867, 'Ticad (Pob.)'),
(22986, 868, 'Azucena'),
(22987, 868, 'Bagakay'),
(22988, 868, 'Balao'),
(22989, 868, 'Bolocboloc'),
(22990, 868, 'Budbud'),
(22991, 868, 'Bugtong Kawayan'),
(22992, 868, 'Cabcaban'),
(22993, 868, 'Campangga'),
(22994, 868, 'Dakit'),
(22995, 868, 'Giloctog'),
(22996, 868, 'Guibuangan'),
(22997, 868, 'Giwanon'),
(22998, 868, 'Gunting'),
(22999, 868, 'Hilasgasan'),
(23000, 868, 'Japitan'),
(23001, 868, 'Cagay'),
(23002, 868, 'Kalubihan'),
(23003, 868, 'Kangdampas'),
(23004, 868, 'Candugay'),
(23005, 868, 'Luhod'),
(23006, 868, 'Lupo'),
(23007, 868, 'Luyo'),
(23008, 868, 'Maghanoy'),
(23009, 868, 'Maigang'),
(23010, 868, 'Malolos'),
(23011, 868, 'Mantalongon'),
(23012, 868, 'Mantayupan'),
(23013, 868, 'Mayana'),
(23014, 868, 'Minolos'),
(23015, 868, 'Nabunturan'),
(23016, 868, 'Nasipit'),
(23017, 868, 'Pancil'),
(23018, 868, 'Pangpang'),
(23019, 868, 'Paril'),
(23020, 868, 'Patupat'),
(23021, 868, 'Poblacion'),
(23022, 868, 'San Rafael'),
(23023, 868, 'Santa Ana'),
(23024, 868, 'Sayaw'),
(23025, 868, 'Tal-ot'),
(23026, 868, 'Tubod'),
(23027, 868, 'Vito'),
(23028, 869, 'Cogon (Pob.)'),
(23029, 869, 'Anonang Norte'),
(23030, 869, 'Anonang Sur'),
(23031, 869, 'Banban'),
(23032, 869, 'Binabag'),
(23033, 869, 'Bungtod (Pob.)'),
(23034, 869, 'Carbon (Pob.)'),
(23035, 869, 'Cayang'),
(23036, 869, 'Dakit'),
(23037, 869, 'Don Pedro Rodriguez'),
(23038, 869, 'Gairan'),
(23039, 869, 'Guadalupe'),
(23040, 869, 'La Paz'),
(23041, 869, 'La Purisima Concepcion (Pob.)'),
(23042, 869, 'Libertad'),
(23043, 869, 'Lourdes (Pob.)'),
(23044, 869, 'Malingin'),
(23045, 869, 'Marangog'),
(23046, 869, 'Nailon'),
(23047, 869, 'Odlot'),
(23048, 869, 'Pandan'),
(23049, 869, 'Polambato'),
(23050, 869, 'Sambag (Pob.)'),
(23051, 869, 'San Vicente (Pob.)'),
(23052, 869, 'Santo Niño'),
(23053, 869, 'Santo Rosario (Pob.)'),
(23054, 869, 'Siocon'),
(23055, 869, 'Taytayan'),
(23056, 869, 'Sudlonon'),
(23057, 870, 'Baclayan'),
(23058, 870, 'El Pardo'),
(23059, 870, 'Granada'),
(23060, 870, 'Lower Becerril'),
(23061, 870, 'Poblacion'),
(23062, 870, 'San Antonio'),
(23063, 870, 'Upper Becerril'),
(23064, 870, 'Arbor'),
(23065, 870, 'Lunop'),
(23066, 870, 'Nangka'),
(23067, 870, 'South Granada'),
(23068, 871, 'Bagacay'),
(23069, 871, 'Bili'),
(23070, 871, 'Bingay'),
(23071, 871, 'Bongdo'),
(23072, 871, 'Bongdo Gua'),
(23073, 871, 'Bongoyan'),
(23074, 871, 'Cadaruhan'),
(23075, 871, 'Cajel'),
(23076, 871, 'Campusong'),
(23077, 871, 'Clavera'),
(23078, 871, 'Don Gregorio Antigua'),
(23079, 871, 'Laaw'),
(23080, 871, 'Lugo'),
(23081, 871, 'Managase'),
(23082, 871, 'Poblacion'),
(23083, 871, 'Sagay'),
(23084, 871, 'San Jose'),
(23085, 871, 'Tabunan'),
(23086, 871, 'Tagnucan'),
(23087, 872, 'Bolinawan'),
(23088, 872, 'Buenavista'),
(23089, 872, 'Calidngan'),
(23090, 872, 'Can-asujan'),
(23091, 872, 'Guadalupe'),
(23092, 872, 'Liburon'),
(23093, 872, 'Napo'),
(23094, 872, 'Ocana'),
(23095, 872, 'Perrelos'),
(23096, 872, 'Valencia'),
(23097, 872, 'Valladolid'),
(23098, 872, 'Poblacion I'),
(23099, 872, 'Poblacion II'),
(23100, 872, 'Poblacion III'),
(23101, 872, 'Tuyom'),
(23102, 873, 'Baring'),
(23103, 873, 'Cantipay'),
(23104, 873, 'Cantumog'),
(23105, 873, 'Cantukong'),
(23106, 873, 'Caurasan'),
(23107, 873, 'Corte'),
(23108, 873, 'Dawis Norte'),
(23109, 873, 'Dawis Sur'),
(23110, 873, 'Cogon East'),
(23111, 873, 'Hagnaya'),
(23112, 873, 'Ipil'),
(23113, 873, 'Lanipga'),
(23114, 873, 'Liboron'),
(23115, 873, 'Lower Natimao-an'),
(23116, 873, 'Luyang'),
(23117, 873, 'Poblacion'),
(23118, 873, 'Puente'),
(23119, 873, 'Sac-on'),
(23120, 873, 'Triumfo'),
(23121, 873, 'Upper Natimao-an'),
(23122, 873, 'Cogon West'),
(23123, 874, 'Agsuwao'),
(23124, 874, 'Amancion'),
(23125, 874, 'Anapog'),
(23126, 874, 'Bactas'),
(23127, 874, 'Bongyas'),
(23128, 874, 'Basak'),
(23129, 874, 'Binongkalan'),
(23130, 874, 'Cabungaan'),
(23131, 874, 'Cambangkaya'),
(23132, 874, 'Can-ibuang'),
(23133, 874, 'Catmondaan'),
(23134, 874, 'Duyan'),
(23135, 874, 'Ginabucan'),
(23136, 874, 'Macaas'),
(23137, 874, 'Panalipan'),
(23138, 874, 'Tabili'),
(23139, 874, 'Tinabyonan'),
(23140, 874, 'San Jose Pob.'),
(23141, 874, 'Corazon (Pob.)'),
(23142, 874, 'Flores (Pob.)'),
(23143, 875, 'Adlaon'),
(23144, 875, 'Agsungot'),
(23145, 875, 'Apas'),
(23146, 875, 'Babag'),
(23147, 875, 'Basak Pardo'),
(23148, 875, 'Bacayan'),
(23149, 875, 'Banilad'),
(23150, 875, 'Basak San Nicolas'),
(23151, 875, 'Binaliw'),
(23152, 875, 'Bonbon'),
(23153, 875, 'Budla-an (Pob.)'),
(23154, 875, 'Buhisan'),
(23155, 875, 'Bulacao'),
(23156, 875, 'Buot-Taup Pardo'),
(23157, 875, 'Busay (Pob.)'),
(23158, 875, 'Calamba'),
(23159, 875, 'Cambinocot'),
(23160, 875, 'Capitol Site (Pob.)'),
(23161, 875, 'Carreta'),
(23162, 875, 'Central (Pob.)'),
(23163, 875, 'Cogon Ramos (Pob.)'),
(23164, 875, 'Cogon Pardo'),
(23165, 875, 'Day-as'),
(23166, 875, 'Duljo (Pob.)'),
(23167, 875, 'Ermita (Pob.)'),
(23168, 875, 'Guadalupe'),
(23169, 875, 'Guba'),
(23170, 875, 'Hippodromo'),
(23171, 875, 'Inayawan'),
(23172, 875, 'Kalubihan (Pob.)'),
(23173, 875, 'Kalunasan'),
(23174, 875, 'Kamagayan (Pob.)'),
(23175, 875, 'Camputhaw (Pob.)'),
(23176, 875, 'Kasambagan'),
(23177, 875, 'Kinasang-an Pardo'),
(23178, 875, 'Labangon'),
(23179, 875, 'Lahug (Pob.)'),
(23180, 875, 'Lorega'),
(23181, 875, 'Lusaran'),
(23182, 875, 'Luz'),
(23183, 875, 'Mabini'),
(23184, 875, 'Mabolo'),
(23185, 875, 'Malubog'),
(23186, 875, 'Mambaling'),
(23187, 875, 'Pahina Central (Pob.)'),
(23188, 875, 'Pahina San Nicolas'),
(23189, 875, 'Pamutan'),
(23190, 875, 'Pardo (Pob.)'),
(23191, 875, 'Pari-an'),
(23192, 875, 'Paril'),
(23193, 875, 'Pasil'),
(23194, 875, 'Pit-os'),
(23195, 875, 'Pulangbato'),
(23196, 875, 'Pung-ol-Sibugay'),
(23197, 875, 'Punta Princesa'),
(23198, 875, 'Quiot Pardo'),
(23199, 875, 'Sambag I (Pob.)'),
(23200, 875, 'Sambag II (Pob.)'),
(23201, 875, 'San Antonio (Pob.)'),
(23202, 875, 'San Jose'),
(23203, 875, 'San Nicolas Central'),
(23204, 875, 'San Roque'),
(23205, 875, 'Santa Cruz (Pob.)'),
(23206, 875, 'Sawang Calero (Pob.)'),
(23207, 875, 'Sinsin'),
(23208, 875, 'Sirao'),
(23209, 875, 'Suba Pob.'),
(23210, 875, 'Sudlon I'),
(23211, 875, 'Sapangdaku'),
(23212, 875, 'T. Padilla'),
(23213, 875, 'Tabunan'),
(23214, 875, 'Tagbao'),
(23215, 875, 'Talamban'),
(23216, 875, 'Taptap'),
(23217, 875, 'Tejero'),
(23218, 875, 'Tinago'),
(23219, 875, 'Tisa'),
(23220, 875, 'To-ong Pardo'),
(23221, 875, 'Zapatera'),
(23222, 875, 'Sudlon II'),
(23223, 876, 'Bagalnga'),
(23224, 876, 'Basak'),
(23225, 876, 'Buluang'),
(23226, 876, 'Cabadiangan'),
(23227, 876, 'Cambayog'),
(23228, 876, 'Canamucan'),
(23229, 876, 'Cogon'),
(23230, 876, 'Dapdap'),
(23231, 876, 'Estaca'),
(23232, 876, 'Lupa'),
(23233, 876, 'Magay'),
(23234, 876, 'Mulao'),
(23235, 876, 'Panangban'),
(23236, 876, 'Poblacion'),
(23237, 876, 'Tag-ube'),
(23238, 876, 'Tamiao'),
(23239, 876, 'Tubigan'),
(23240, 877, 'Cabangahan'),
(23241, 877, 'Cansaga'),
(23242, 877, 'Casili'),
(23243, 877, 'Danglag'),
(23244, 877, 'Garing'),
(23245, 877, 'Jugan'),
(23246, 877, 'Lamac'),
(23247, 877, 'Lanipga'),
(23248, 877, 'Nangka'),
(23249, 877, 'Panas'),
(23250, 877, 'Panoypoy'),
(23251, 877, 'Pitogo'),
(23252, 877, 'Poblacion Occidental'),
(23253, 877, 'Poblacion Oriental'),
(23254, 877, 'Polog'),
(23255, 877, 'Pulpogan'),
(23256, 877, 'Sacsac'),
(23257, 877, 'Tayud'),
(23258, 877, 'Tilhaong'),
(23259, 877, 'Tolotolo'),
(23260, 877, 'Tugbongan'),
(23261, 878, 'Alegria'),
(23262, 878, 'Bangbang'),
(23263, 878, 'Buagsong'),
(23264, 878, 'Catarman'),
(23265, 878, 'Cogon'),
(23266, 878, 'Dapitan'),
(23267, 878, 'Day-as'),
(23268, 878, 'Gabi'),
(23269, 878, 'Gilutongan'),
(23270, 878, 'Ibabao'),
(23271, 878, 'Pilipog'),
(23272, 878, 'Poblacion'),
(23273, 878, 'San Miguel'),
(23274, 879, 'Aguho'),
(23275, 879, 'Bagay'),
(23276, 879, 'Bakhawan'),
(23277, 879, 'Bateria'),
(23278, 879, 'Bitoon'),
(23279, 879, 'Calape'),
(23280, 879, 'Carnaza'),
(23281, 879, 'Dalingding'),
(23282, 879, 'Lanao'),
(23283, 879, 'Logon'),
(23284, 879, 'Malbago'),
(23285, 879, 'Malingin'),
(23286, 879, 'Maya'),
(23287, 879, 'Pajo'),
(23288, 879, 'Paypay'),
(23289, 879, 'Poblacion'),
(23290, 879, 'Talisay'),
(23291, 879, 'Tapilon'),
(23292, 879, 'Tinubdan'),
(23293, 879, 'Tominjao'),
(23294, 880, 'Ablayan'),
(23295, 880, 'Babayongan'),
(23296, 880, 'Balud'),
(23297, 880, 'Banhigan'),
(23298, 880, 'Bulak'),
(23299, 880, 'Caliongan'),
(23300, 880, 'Caleriohan'),
(23301, 880, 'Casay'),
(23302, 880, 'Catolohan'),
(23303, 880, 'Cawayan'),
(23304, 880, 'Consolacion'),
(23305, 880, 'Coro'),
(23306, 880, 'Dugyan'),
(23307, 880, 'Dumalan'),
(23308, 880, 'Jolomaynon'),
(23309, 880, 'Lanao'),
(23310, 880, 'Langkas'),
(23311, 880, 'Lumbang'),
(23312, 880, 'Malones'),
(23313, 880, 'Maloray'),
(23314, 880, 'Mananggal'),
(23315, 880, 'Manlapay'),
(23316, 880, 'Mantalongon'),
(23317, 880, 'Nalhub'),
(23318, 880, 'Obo'),
(23319, 880, 'Obong'),
(23320, 880, 'Panas'),
(23321, 880, 'Poblacion'),
(23322, 880, 'Sacsac'),
(23323, 880, 'Tapun'),
(23324, 880, 'Tuba'),
(23325, 880, 'Salug'),
(23326, 880, 'Tabon'),
(23327, 881, 'Baliang'),
(23328, 881, 'Bayabas'),
(23329, 881, 'Binaliw'),
(23330, 881, 'Cabungahan'),
(23331, 881, 'Cagat-Lamac'),
(23332, 881, 'Cahumayan'),
(23333, 881, 'Cambanay'),
(23334, 881, 'Cambubho'),
(23335, 881, 'Cogon-Cruz'),
(23336, 881, 'Danasan'),
(23337, 881, 'Dungga'),
(23338, 881, 'Dunggoan'),
(23339, 881, 'Guinacot'),
(23340, 881, 'Guinsay'),
(23341, 881, 'Ibo'),
(23342, 881, 'Langosig'),
(23343, 881, 'Lawaan'),
(23344, 881, 'Licos'),
(23345, 881, 'Looc'),
(23346, 881, 'Magtagobtob'),
(23347, 881, 'Malapoc'),
(23348, 881, 'Manlayag'),
(23349, 881, 'Mantija'),
(23350, 881, 'Masaba'),
(23351, 881, 'Maslog'),
(23352, 881, 'Nangka'),
(23353, 881, 'Oguis'),
(23354, 881, 'Pili'),
(23355, 881, 'Poblacion'),
(23356, 881, 'Quisol'),
(23357, 881, 'Sabang'),
(23358, 881, 'Sacsac'),
(23359, 881, 'Sandayong Norte'),
(23360, 881, 'Sandayong Sur'),
(23361, 881, 'Santa Rosa'),
(23362, 881, 'Santican'),
(23363, 881, 'Sibacan'),
(23364, 881, 'Suba'),
(23365, 881, 'Taboc'),
(23366, 881, 'Taytay'),
(23367, 881, 'Togonon'),
(23368, 881, 'Tuburan Sur'),
(23369, 882, 'Balaygtiki'),
(23370, 882, 'Bitoon'),
(23371, 882, 'Bulak'),
(23372, 882, 'Bullogan'),
(23373, 882, 'Doldol'),
(23374, 882, 'Kabalaasnan'),
(23375, 882, 'Kabatbatan'),
(23376, 882, 'Calaboon'),
(23377, 882, 'Kambanog'),
(23378, 882, 'Camboang'),
(23379, 882, 'Candabong'),
(23380, 882, 'Kang-actol'),
(23381, 882, 'Kanghalo'),
(23382, 882, 'Kanghumaod'),
(23383, 882, 'Kanguha'),
(23384, 882, 'Kantangkas'),
(23385, 882, 'Kanyuko'),
(23386, 882, 'Cogon'),
(23387, 882, 'Kolabtingon'),
(23388, 882, 'Cotcoton'),
(23389, 882, 'Lamak'),
(23390, 882, 'Lawaan'),
(23391, 882, 'Liong'),
(23392, 882, 'Manlapay'),
(23393, 882, 'Masa'),
(23394, 882, 'Matalao'),
(23395, 882, 'Paculob'),
(23396, 882, 'Panlaan'),
(23397, 882, 'Pawa'),
(23398, 882, 'Ilaya (Pob.)'),
(23399, 882, 'Poblacion Looc'),
(23400, 882, 'Poblacion Sima'),
(23401, 882, 'Tangil'),
(23402, 882, 'Tapon'),
(23403, 882, 'Tubod-Bitoon'),
(23404, 882, 'Tubod-Dugoan'),
(23405, 882, 'Poblacion Central'),
(23406, 883, 'Anao'),
(23407, 883, 'Cagsing'),
(23408, 883, 'Calabawan'),
(23409, 883, 'Cambagte'),
(23410, 883, 'Campisong'),
(23411, 883, 'Canorong'),
(23412, 883, 'Guiwanon'),
(23413, 883, 'Looc'),
(23414, 883, 'Malatbo'),
(23415, 883, 'Mangaco'),
(23416, 883, 'Palanas'),
(23417, 883, 'Poblacion'),
(23418, 883, 'Salamanca'),
(23419, 883, 'San Roque'),
(23420, 884, 'Agus'),
(23421, 884, 'Babag'),
(23422, 884, 'Bankal'),
(23423, 884, 'Baring'),
(23424, 884, 'Basak'),
(23425, 884, 'Buaya'),
(23426, 884, 'Calawisan'),
(23427, 884, 'Canjulao'),
(23428, 884, 'Caw-oy'),
(23429, 884, 'Cawhagan'),
(23430, 884, 'Caubian'),
(23431, 884, 'Gun-ob'),
(23432, 884, 'Ibo'),
(23433, 884, 'Looc'),
(23434, 884, 'Mactan'),
(23435, 884, 'Maribago'),
(23436, 884, 'Marigondon'),
(23437, 884, 'Pajac'),
(23438, 884, 'Pajo'),
(23439, 884, 'Pangan-an'),
(23440, 884, 'Poblacion'),
(23441, 884, 'Punta Engaño'),
(23442, 884, 'Pusok'),
(23443, 884, 'Sabang'),
(23444, 884, 'Santa Rosa'),
(23445, 884, 'Subabasbas'),
(23446, 884, 'Talima'),
(23447, 884, 'Tingo'),
(23448, 884, 'Tungasan'),
(23449, 884, 'San Vicente'),
(23450, 885, 'Cabadiangan'),
(23451, 885, 'Calero'),
(23452, 885, 'Catarman'),
(23453, 885, 'Cotcot'),
(23454, 885, 'Jubay'),
(23455, 885, 'Lataban'),
(23456, 885, 'Mulao'),
(23457, 885, 'Poblacion'),
(23458, 885, 'San Roque'),
(23459, 885, 'San Vicente'),
(23460, 885, 'Santa Cruz'),
(23461, 885, 'Tabla'),
(23462, 885, 'Tayud'),
(23463, 885, 'Yati'),
(23464, 886, 'Bunakan'),
(23465, 886, 'Kangwayan'),
(23466, 886, 'Kaongkod'),
(23467, 886, 'Kodia'),
(23468, 886, 'Maalat'),
(23469, 886, 'Malbago'),
(23470, 886, 'Mancilang'),
(23471, 886, 'Pili'),
(23472, 886, 'Poblacion'),
(23473, 886, 'San Agustin'),
(23474, 886, 'Tabagak'),
(23475, 886, 'Talangnan'),
(23476, 886, 'Tarong'),
(23477, 886, 'Tugas'),
(23478, 887, 'Armeña'),
(23479, 887, 'Tolosa'),
(23480, 887, 'Cerdeña'),
(23481, 887, 'Labrador'),
(23482, 887, 'Looc'),
(23483, 887, 'Lombo'),
(23484, 887, 'Mahanlud'),
(23485, 887, 'Mindanao'),
(23486, 887, 'Montañeza'),
(23487, 887, 'Salmeron'),
(23488, 887, 'Santo Niño'),
(23489, 887, 'Sorsogon'),
(23490, 887, 'Barangay I (Pob.)'),
(23491, 887, 'Barangay II (Pob.)'),
(23492, 888, 'Alang-alang'),
(23493, 888, 'Bakilid'),
(23494, 888, 'Banilad'),
(23495, 888, 'Basak'),
(23496, 888, 'Cabancalan'),
(23497, 888, 'Cambaro'),
(23498, 888, 'Canduman'),
(23499, 888, 'Casili'),
(23500, 888, 'Casuntingan'),
(23501, 888, 'Centro (Pob.)'),
(23502, 888, 'Cubacub'),
(23503, 888, 'Guizo'),
(23504, 888, 'Ibabao-Estancia'),
(23505, 888, 'Jagobiao'),
(23506, 888, 'Labogon'),
(23507, 888, 'Looc'),
(23508, 888, 'Maguikay'),
(23509, 888, 'Mantuyong'),
(23510, 888, 'Opao'),
(23511, 888, 'Pakna-an'),
(23512, 888, 'Pagsabungan'),
(23513, 888, 'Subangdaku'),
(23514, 888, 'Tabok'),
(23515, 888, 'Tawason'),
(23516, 888, 'Tingub'),
(23517, 888, 'Tipolo'),
(23518, 888, 'Umapad'),
(23519, 889, 'Antipolo'),
(23520, 889, 'Curva'),
(23521, 889, 'Daanlungsod'),
(23522, 889, 'Dalingding Sur'),
(23523, 889, 'Dayhagon'),
(23524, 889, 'Gibitngil'),
(23525, 889, 'Canhabagat'),
(23526, 889, 'Caputatan Norte'),
(23527, 889, 'Caputatan Sur'),
(23528, 889, 'Kawit'),
(23529, 889, 'Lamintak Norte'),
(23530, 889, 'Luy-a'),
(23531, 889, 'Panugnawan'),
(23532, 889, 'Poblacion'),
(23533, 889, 'Tindog'),
(23534, 889, 'Don Virgilio Gonzales'),
(23535, 889, 'Lamintak Sur'),
(23536, 889, 'Maharuhay'),
(23537, 889, 'Mahawak'),
(23538, 890, 'Cadulawan'),
(23539, 890, 'Calajo-an'),
(23540, 890, 'Camp 7'),
(23541, 890, 'Camp 8'),
(23542, 890, 'Cuanos'),
(23543, 890, 'Guindaruhan'),
(23544, 890, 'Linao'),
(23545, 890, 'Manduang'),
(23546, 890, 'Pakigne'),
(23547, 890, 'Poblacion Ward I'),
(23548, 890, 'Poblacion Ward II'),
(23549, 890, 'Poblacion Ward III'),
(23550, 890, 'Poblacion Ward IV'),
(23551, 890, 'Tubod'),
(23552, 890, 'Tulay'),
(23553, 890, 'Tunghaan'),
(23554, 890, 'Tungkop'),
(23555, 890, 'Vito'),
(23556, 890, 'Tungkil'),
(23557, 891, 'Agbalanga'),
(23558, 891, 'Bala'),
(23559, 891, 'Balabagon'),
(23560, 891, 'Basdiot'),
(23561, 891, 'Batadbatad'),
(23562, 891, 'Bugho'),
(23563, 891, 'Buguil'),
(23564, 891, 'Busay'),
(23565, 891, 'Lanao'),
(23566, 891, 'Poblacion East'),
(23567, 891, 'Poblacion West'),
(23568, 891, 'Saavedra'),
(23569, 891, 'Tomonoy'),
(23570, 891, 'Tuble'),
(23571, 891, 'Tunga'),
(23572, 892, 'Alfaco'),
(23573, 892, 'Bairan'),
(23574, 892, 'Balirong'),
(23575, 892, 'Cabungahan'),
(23576, 892, 'Cantao-an'),
(23577, 892, 'Central Poblacion'),
(23578, 892, 'Cogon'),
(23579, 892, 'Colon'),
(23580, 892, 'East Poblacion'),
(23581, 892, 'Inoburan'),
(23582, 892, 'Inayagan'),
(23583, 892, 'Jaguimit'),
(23584, 892, 'Lanas'),
(23585, 892, 'Langtad'),
(23586, 892, 'Lutac'),
(23587, 892, 'Mainit'),
(23588, 892, 'Mayana'),
(23589, 892, 'Naalad'),
(23590, 892, 'North Poblacion'),
(23591, 892, 'Pangdan'),
(23592, 892, 'Patag'),
(23593, 892, 'South Poblacion'),
(23594, 892, 'Tagjaguimit'),
(23595, 892, 'Tangke'),
(23596, 892, 'Tinaan'),
(23597, 892, 'Tuyan'),
(23598, 892, 'Uling'),
(23599, 892, 'West Poblacion'),
(23600, 893, 'Alo'),
(23601, 893, 'Bangcogon'),
(23602, 893, 'Bonbon'),
(23603, 893, 'Calumpang'),
(23604, 893, 'Canangca-an'),
(23605, 893, 'Cañang'),
(23606, 893, 'Can-ukban'),
(23607, 893, 'Cansalo-ay'),
(23608, 893, 'Daanlungsod'),
(23609, 893, 'Gawi'),
(23610, 893, 'Hagdan'),
(23611, 893, 'Lagunde'),
(23612, 893, 'Looc'),
(23613, 893, 'Luka'),
(23614, 893, 'Mainit'),
(23615, 893, 'Manlum'),
(23616, 893, 'Nueva Caceres'),
(23617, 893, 'Poblacion'),
(23618, 893, 'Pungtod'),
(23619, 893, 'Tan-awan'),
(23620, 893, 'Tumalog'),
(23621, 894, 'Biasong'),
(23622, 894, 'Cawit'),
(23623, 894, 'Dapdap'),
(23624, 894, 'Esperanza'),
(23625, 894, 'Lanao'),
(23626, 894, 'Lower Poblacion'),
(23627, 894, 'Moabog'),
(23628, 894, 'Montserrat'),
(23629, 894, 'San Isidro'),
(23630, 894, 'San Juan'),
(23631, 894, 'Upper Poblacion'),
(23632, 894, 'Villahermosa'),
(23633, 894, 'Imelda'),
(23634, 895, 'Anislag'),
(23635, 895, 'Anopog'),
(23636, 895, 'Binabag'),
(23637, 895, 'Buhingtubig'),
(23638, 895, 'Busay'),
(23639, 895, 'Butong'),
(23640, 895, 'Cabiangon'),
(23641, 895, 'Camugao'),
(23642, 895, 'Duangan'),
(23643, 895, 'Guimbawian'),
(23644, 895, 'Lamac'),
(23645, 895, 'Lut-od'),
(23646, 895, 'Mangoto'),
(23647, 895, 'Opao'),
(23648, 895, 'Pandacan'),
(23649, 895, 'Poblacion'),
(23650, 895, 'Punod'),
(23651, 895, 'Rizal'),
(23652, 895, 'Sacsac'),
(23653, 895, 'Sambagon'),
(23654, 895, 'Sibago'),
(23655, 895, 'Tajao'),
(23656, 895, 'Tangub'),
(23657, 895, 'Tanibag'),
(23658, 895, 'Tupas'),
(23659, 895, 'Tutay'),
(23660, 896, 'Adela'),
(23661, 896, 'Altavista'),
(23662, 896, 'Cagcagan'),
(23663, 896, 'Cansabusab'),
(23664, 896, 'Daan Paz'),
(23665, 896, 'Eastern Poblacion'),
(23666, 896, 'Esperanza'),
(23667, 896, 'Libertad'),
(23668, 896, 'Mabini'),
(23669, 896, 'Mercedes'),
(23670, 896, 'Pagsa'),
(23671, 896, 'Paz'),
(23672, 896, 'Rizal'),
(23673, 896, 'San Jose'),
(23674, 896, 'Santa Rita'),
(23675, 896, 'Teguis'),
(23676, 896, 'Western Poblacion'),
(23677, 897, 'Butong'),
(23678, 897, 'Can-abuhon'),
(23679, 897, 'Canduling'),
(23680, 897, 'Cansalonoy'),
(23681, 897, 'Cansayahon'),
(23682, 897, 'Ilaya'),
(23683, 897, 'Langin'),
(23684, 897, 'Libo-o'),
(23685, 897, 'Malalay'),
(23686, 897, 'Palanas'),
(23687, 897, 'Poblacion'),
(23688, 897, 'Santa Cruz'),
(23689, 897, 'Tupas'),
(23690, 897, 'Vive'),
(23691, 898, 'Basak'),
(23692, 898, 'Bonbon'),
(23693, 898, 'Bulangsuran'),
(23694, 898, 'Calatagan'),
(23695, 898, 'Cambigong'),
(23696, 898, 'Canorong'),
(23697, 898, 'Colase'),
(23698, 898, 'Dalahikan'),
(23699, 898, 'Jumangpas'),
(23700, 898, 'Camburoy'),
(23701, 898, 'Poblacion'),
(23702, 898, 'San Sebastian'),
(23703, 898, 'Suba'),
(23704, 898, 'Tangbo'),
(23705, 898, 'Monteverde'),
(23706, 899, 'Balud'),
(23707, 899, 'Balungag'),
(23708, 899, 'Basak'),
(23709, 899, 'Bugho'),
(23710, 899, 'Cabatbatan'),
(23711, 899, 'Greenhills'),
(23712, 899, 'Lantawan'),
(23713, 899, 'Liburon'),
(23714, 899, 'Magsico'),
(23715, 899, 'Poblacion North'),
(23716, 899, 'Panadtaran'),
(23717, 899, 'Pitalo'),
(23718, 899, 'San Isidro'),
(23719, 899, 'Sangat'),
(23720, 899, 'Poblacion South'),
(23721, 899, 'Tabionan'),
(23722, 899, 'Tananas'),
(23723, 899, 'Tinubdan'),
(23724, 899, 'Tonggo'),
(23725, 899, 'Tubod'),
(23726, 899, 'Ilaya'),
(23727, 900, 'Montealegre'),
(23728, 900, 'Cabunga-an'),
(23729, 900, 'Campo'),
(23730, 900, 'Consuelo'),
(23731, 900, 'Esperanza'),
(23732, 900, 'Himensulan'),
(23733, 900, 'Northern Poblacion'),
(23734, 900, 'San Isidro'),
(23735, 900, 'Santa Cruz'),
(23736, 900, 'Santiago'),
(23737, 900, 'Sonog'),
(23738, 900, 'Southern Poblacion'),
(23739, 900, 'Unidos'),
(23740, 900, 'Union'),
(23741, 900, 'Western Poblacion'),
(23742, 901, 'Anapog'),
(23743, 901, 'Argawanon'),
(23744, 901, 'Bagtic'),
(23745, 901, 'Bancasan'),
(23746, 901, 'Batad'),
(23747, 901, 'Busogon'),
(23748, 901, 'Calambua'),
(23749, 901, 'Canagahan'),
(23750, 901, 'Dapdap'),
(23751, 901, 'Gawaygaway'),
(23752, 901, 'Hagnaya'),
(23753, 901, 'Kayam'),
(23754, 901, 'Kinawahan'),
(23755, 901, 'Lambusan'),
(23756, 901, 'Lawis'),
(23757, 901, 'Libaong'),
(23758, 901, 'Looc'),
(23759, 901, 'Luyang'),
(23760, 901, 'Mano'),
(23761, 901, 'Poblacion'),
(23762, 901, 'Punta'),
(23763, 901, 'Sab-a'),
(23764, 901, 'San Miguel'),
(23765, 901, 'Tacup'),
(23766, 901, 'Tambongon'),
(23767, 901, 'To-ong'),
(23768, 901, 'Victoria'),
(23769, 902, 'Hagdan'),
(23770, 902, 'Hilantagaan'),
(23771, 902, 'Kinatarkan'),
(23772, 902, 'Langub'),
(23773, 902, 'Maricaban'),
(23774, 902, 'Okoy'),
(23775, 902, 'Poblacion'),
(23776, 902, 'Balidbid'),
(23777, 902, 'Pooc'),
(23778, 902, 'Talisay'),
(23779, 903, 'Bunlan'),
(23780, 903, 'Cabutongan'),
(23781, 903, 'Candamiang'),
(23782, 903, 'Liloan'),
(23783, 903, 'Lip-tong'),
(23784, 903, 'Looc'),
(23785, 903, 'Pasil'),
(23786, 903, 'Poblacion'),
(23787, 903, 'Talisay'),
(23788, 903, 'Canlumacad'),
(23789, 904, 'Abugon'),
(23790, 904, 'Bae'),
(23791, 904, 'Bagacay'),
(23792, 904, 'Bahay'),
(23793, 904, 'Banlot'),
(23794, 904, 'Basak'),
(23795, 904, 'Bato'),
(23796, 904, 'Cagay'),
(23797, 904, 'Can-aga'),
(23798, 904, 'Candaguit'),
(23799, 904, 'Cantolaroy'),
(23800, 904, 'Dugoan'),
(23801, 904, 'Guimbangco-an'),
(23802, 904, 'Lamacan'),
(23803, 904, 'Libo'),
(23804, 904, 'Lindogon'),
(23805, 904, 'Magcagong'),
(23806, 904, 'Manatad'),
(23807, 904, 'Mangyan'),
(23808, 904, 'Papan'),
(23809, 904, 'Poblacion'),
(23810, 904, 'Sabang'),
(23811, 904, 'Sayao'),
(23812, 904, 'Simala'),
(23813, 904, 'Tubod'),
(23814, 905, 'Ampongol'),
(23815, 905, 'Bagakay'),
(23816, 905, 'Bagatayam'),
(23817, 905, 'Bawo'),
(23818, 905, 'Cabalawan'),
(23819, 905, 'Cabangahan'),
(23820, 905, 'Calumboyan'),
(23821, 905, 'Dakit'),
(23822, 905, 'Damolog'),
(23823, 905, 'Ibabao'),
(23824, 905, 'Liki'),
(23825, 905, 'Lubo'),
(23826, 905, 'Mohon'),
(23827, 905, 'Nahus-an'),
(23828, 905, 'Poblacion'),
(23829, 905, 'Tabunok'),
(23830, 905, 'Takay'),
(23831, 905, 'Pansoy'),
(23832, 906, 'Alang-alang'),
(23833, 906, 'Caduawan'),
(23834, 906, 'Kal-anan'),
(23835, 906, 'Camoboan'),
(23836, 906, 'Canaocanao'),
(23837, 906, 'Combado'),
(23838, 906, 'Daantabogon'),
(23839, 906, 'Ilihan'),
(23840, 906, 'Labangon'),
(23841, 906, 'Libjo'),
(23842, 906, 'Loong'),
(23843, 906, 'Mabuli'),
(23844, 906, 'Managase'),
(23845, 906, 'Manlagtang'),
(23846, 906, 'Maslog'),
(23847, 906, 'Muabog'),
(23848, 906, 'Pio'),
(23849, 906, 'Poblacion'),
(23850, 906, 'Salag'),
(23851, 906, 'Sambag'),
(23852, 906, 'San Isidro'),
(23853, 906, 'San Vicente'),
(23854, 906, 'Somosa'),
(23855, 906, 'Taba-ao'),
(23856, 906, 'Tapul'),
(23857, 907, 'Bongon'),
(23858, 907, 'Kanlim-ao'),
(23859, 907, 'Kanluhangon'),
(23860, 907, 'Kantubaon'),
(23861, 907, 'Dalid'),
(23862, 907, 'Mabunao'),
(23863, 907, 'Maravilla'),
(23864, 907, 'Olivo'),
(23865, 907, 'Poblacion'),
(23866, 907, 'Tabunok'),
(23867, 907, 'Tigbawan'),
(23868, 907, 'Villahermosa'),
(23869, 908, 'Bulacao'),
(23870, 908, 'Cadulawan'),
(23871, 908, 'Cansojong'),
(23872, 908, 'Dumlog'),
(23873, 908, 'Jaclupan'),
(23874, 908, 'Lagtang'),
(23875, 908, 'Lawaan I'),
(23876, 908, 'Linao'),
(23877, 908, 'Maghaway'),
(23878, 908, 'Manipis'),
(23879, 908, 'Mohon'),
(23880, 908, 'Poblacion'),
(23881, 908, 'Pooc'),
(23882, 908, 'San Isidro'),
(23883, 908, 'San Roque'),
(23884, 908, 'Tabunoc'),
(23885, 908, 'Tangke'),
(23886, 908, 'Tapul'),
(23887, 908, 'Biasong'),
(23888, 908, 'Camp IV'),
(23889, 908, 'Lawaan II'),
(23890, 908, 'Lawaan III'),
(23891, 909, 'Awihao'),
(23892, 909, 'Bagakay'),
(23893, 909, 'Bato'),
(23894, 909, 'Biga'),
(23895, 909, 'Bulongan'),
(23896, 909, 'Bunga'),
(23897, 909, 'Cabitoonan'),
(23898, 909, 'Calongcalong'),
(23899, 909, 'Cambang-ug'),
(23900, 909, 'Camp 8'),
(23901, 909, 'Canlumampao'),
(23902, 909, 'Cantabaco'),
(23903, 909, 'Capitan Claudio'),
(23904, 909, 'Carmen'),
(23905, 909, 'Daanglungsod'),
(23906, 909, 'Don Andres Soriano'),
(23907, 909, 'Dumlog'),
(23908, 909, 'Ibo'),
(23909, 909, 'Ilihan'),
(23910, 909, 'Landahan'),
(23911, 909, 'Loay'),
(23912, 909, 'Luray II'),
(23913, 909, 'Juan Climaco, Sr.'),
(23914, 909, 'Gen. Climaco'),
(23915, 909, 'Matab-ang'),
(23916, 909, 'Media Once'),
(23917, 909, 'Pangamihan'),
(23918, 909, 'Poblacion'),
(23919, 909, 'Poog'),
(23920, 909, 'Putingbato'),
(23921, 909, 'Sagay'),
(23922, 909, 'Sam-ang'),
(23923, 909, 'Sangi'),
(23924, 909, 'Santo Niño'),
(23925, 909, 'Subayon'),
(23926, 909, 'Talavera'),
(23927, 909, 'Tungkay'),
(23928, 909, 'Tubod'),
(23929, 910, 'Alegria'),
(23930, 910, 'Amatugan'),
(23931, 910, 'Antipolo'),
(23932, 910, 'Apalan'),
(23933, 910, 'Bagasawe'),
(23934, 910, 'Bakyawan'),
(23935, 910, 'Bangkito'),
(23936, 910, 'Bulwang'),
(23937, 910, 'Kabangkalan'),
(23938, 910, 'Kalangahan'),
(23939, 910, 'Kamansi'),
(23940, 910, 'Kan-an'),
(23941, 910, 'Kanlunsing'),
(23942, 910, 'Kansi'),
(23943, 910, 'Caridad'),
(23944, 910, 'Carmelo'),
(23945, 910, 'Cogon'),
(23946, 910, 'Colonia');
INSERT INTO `table_barangay` (`barangay_id`, `municipality_id`, `barangay_name`) VALUES
(23947, 910, 'Daan Lungsod'),
(23948, 910, 'Fortaliza'),
(23949, 910, 'Ga-ang'),
(23950, 910, 'Gimama-a'),
(23951, 910, 'Jagbuaya'),
(23952, 910, 'Kabkaban'),
(23953, 910, 'Kagba-o'),
(23954, 910, 'Kampoot'),
(23955, 910, 'Kaorasan'),
(23956, 910, 'Libo'),
(23957, 910, 'Lusong'),
(23958, 910, 'Macupa'),
(23959, 910, 'Mag-alwa'),
(23960, 910, 'Mag-antoy'),
(23961, 910, 'Mag-atubang'),
(23962, 910, 'Maghan-ay'),
(23963, 910, 'Mangga'),
(23964, 910, 'Marmol'),
(23965, 910, 'Molobolo'),
(23966, 910, 'Montealegre'),
(23967, 910, 'Putat'),
(23968, 910, 'San Juan'),
(23969, 910, 'Sandayong'),
(23970, 910, 'Santo Niño'),
(23971, 910, 'Siotes'),
(23972, 910, 'Sumon'),
(23973, 910, 'Tominjao'),
(23974, 910, 'Tomugpa'),
(23975, 910, 'Barangay I (Pob.)'),
(23976, 910, 'Barangay II (Pob.)'),
(23977, 910, 'Barangay III (Pob.)'),
(23978, 910, 'Barangay IV (Pob.)'),
(23979, 910, 'Barangay V (Pob.)'),
(23980, 910, 'Barangay VI (Pob.)'),
(23981, 910, 'Barangay VII (Pob.)'),
(23982, 910, 'Barangay VIII (Pob.)'),
(23983, 911, 'Buenavista'),
(23984, 911, 'Calmante'),
(23985, 911, 'Daan Secante'),
(23986, 911, 'General'),
(23987, 911, 'McArthur'),
(23988, 911, 'Northern Poblacion'),
(23989, 911, 'Puertobello'),
(23990, 911, 'Santander'),
(23991, 911, 'Secante Bag-o'),
(23992, 911, 'Southern Poblacion'),
(23993, 911, 'Villahermosa'),
(23994, 912, 'Bio-os'),
(23995, 912, 'Jantianon'),
(23996, 912, 'Jugno'),
(23997, 912, 'Mag-abo'),
(23998, 912, 'Poblacion'),
(23999, 912, 'Silab'),
(24000, 912, 'Tambojangin'),
(24001, 912, 'Tandayag'),
(24002, 913, 'Amdus'),
(24003, 913, 'Jandalamanon'),
(24004, 913, 'Anibong'),
(24005, 913, 'Atabay'),
(24006, 913, 'Awa-an'),
(24007, 913, 'Ban-ban'),
(24008, 913, 'Calagcalag'),
(24009, 913, 'Candana-ay'),
(24010, 913, 'Carol-an'),
(24011, 913, 'Gomentoc'),
(24012, 913, 'Inacban'),
(24013, 913, 'Iniban'),
(24014, 913, 'Kilaban'),
(24015, 913, 'Lamigan'),
(24016, 913, 'Maaslum'),
(24017, 913, 'Mabato'),
(24018, 913, 'Manogtong'),
(24019, 913, 'Nabhang'),
(24020, 913, 'Tambo'),
(24021, 913, 'Tampocon I'),
(24022, 913, 'Tampocon II'),
(24023, 913, 'Tibyawan'),
(24024, 913, 'Tiguib'),
(24025, 913, 'Poblacion'),
(24026, 914, 'Balayagmanok'),
(24027, 914, 'Banilad'),
(24028, 914, 'Buntis'),
(24029, 914, 'Buntod'),
(24030, 914, 'Calangag'),
(24031, 914, 'Combado'),
(24032, 914, 'Doldol'),
(24033, 914, 'Isugan'),
(24034, 914, 'Liptong'),
(24035, 914, 'Lutao'),
(24036, 914, 'Magsuhot'),
(24037, 914, 'Malabago'),
(24038, 914, 'Mampas'),
(24039, 914, 'North Poblacion'),
(24040, 914, 'Sacsac'),
(24041, 914, 'San Miguel'),
(24042, 914, 'South Poblacion'),
(24043, 914, 'Sulodpan'),
(24044, 914, 'Timbanga'),
(24045, 914, 'Timbao'),
(24046, 914, 'Tubod'),
(24047, 914, 'West Poblacion'),
(24048, 915, 'Barangay I (Pob.)'),
(24049, 915, 'Barangay II (Pob.)'),
(24050, 915, 'Basak'),
(24051, 915, 'Biñohon'),
(24052, 915, 'Cabanlutan'),
(24053, 915, 'Calasga-an'),
(24054, 915, 'Cambagahan'),
(24055, 915, 'Cambaguio'),
(24056, 915, 'Cambanjao'),
(24057, 915, 'Cambuilao'),
(24058, 915, 'Canlargo'),
(24059, 915, 'Capiñahan'),
(24060, 915, 'Consolacion'),
(24061, 915, 'Dansulan'),
(24062, 915, 'Hangyad'),
(24063, 915, 'La Paz'),
(24064, 915, 'Lo-oc'),
(24065, 915, 'Lonoy'),
(24066, 915, 'Mabunao'),
(24067, 915, 'Manlipac'),
(24068, 915, 'Mansangaban'),
(24069, 915, 'Okiot'),
(24070, 915, 'Olympia'),
(24071, 915, 'Panala-an'),
(24072, 915, 'Panam-angan'),
(24073, 915, 'Rosario'),
(24074, 915, 'Sab-ahan'),
(24075, 915, 'San Isidro'),
(24076, 915, 'Katacgahan'),
(24077, 915, 'Tagpo'),
(24078, 915, 'Talungon'),
(24079, 915, 'Tamisu'),
(24080, 915, 'Tamogong'),
(24081, 915, 'Tangculogan'),
(24082, 915, 'Valencia'),
(24083, 916, 'Actin'),
(24084, 916, 'Bal-os'),
(24085, 916, 'Bongalonan'),
(24086, 916, 'Cabalayongan'),
(24087, 916, 'Cabatuanan'),
(24088, 916, 'Linantayan'),
(24089, 916, 'Maglinao'),
(24090, 916, 'Nagbo-alao'),
(24091, 916, 'Olandao'),
(24092, 916, 'Poblacion'),
(24093, 917, 'Ali-is'),
(24094, 917, 'Banaybanay'),
(24095, 917, 'Banga'),
(24096, 917, 'Villasol'),
(24097, 917, 'Boyco'),
(24098, 917, 'Bugay'),
(24099, 917, 'Cansumalig'),
(24100, 917, 'Dawis'),
(24101, 917, 'Kalamtukan'),
(24102, 917, 'Kalumboyan'),
(24103, 917, 'Malabugas'),
(24104, 917, 'Mandu-ao'),
(24105, 917, 'Maninihon'),
(24106, 917, 'Minaba'),
(24107, 917, 'Nangka'),
(24108, 917, 'Narra'),
(24109, 917, 'Pagatban'),
(24110, 917, 'Poblacion'),
(24111, 917, 'San Jose'),
(24112, 917, 'San Miguel'),
(24113, 917, 'San Roque'),
(24114, 917, 'Suba (Pob.)'),
(24115, 917, 'Tabuan'),
(24116, 917, 'Tayawan'),
(24117, 917, 'Tinago (Pob.)'),
(24118, 917, 'Ubos (Pob.)'),
(24119, 917, 'Villareal'),
(24120, 917, 'San Isidro'),
(24121, 918, 'Atotes'),
(24122, 918, 'Batangan'),
(24123, 918, 'Bulod'),
(24124, 918, 'Cabcaban'),
(24125, 918, 'Cabugan'),
(24126, 918, 'Camudlas'),
(24127, 918, 'Canluto'),
(24128, 918, 'Danao'),
(24129, 918, 'Danawan'),
(24130, 918, 'Domolog'),
(24131, 918, 'Malaga'),
(24132, 918, 'Manseje'),
(24133, 918, 'Matobato'),
(24134, 918, 'Nagcasunog'),
(24135, 918, 'Nalundan'),
(24136, 918, 'Pangalaycayan'),
(24137, 918, 'Peñahan'),
(24138, 918, 'Poblacion'),
(24139, 918, 'Salong'),
(24140, 918, 'Tagaytay'),
(24141, 918, 'Tinaogan'),
(24142, 918, 'Tubod'),
(24143, 919, 'Bayog'),
(24144, 919, 'Binalbagan'),
(24145, 919, 'Bucalan'),
(24146, 919, 'Linothangan'),
(24147, 919, 'Lumapao'),
(24148, 919, 'Malaiba'),
(24149, 919, 'Masulog'),
(24150, 919, 'Panubigan'),
(24151, 919, 'Mabigo (Pob.)'),
(24152, 919, 'Pula'),
(24153, 919, 'Budlasan'),
(24154, 919, 'Ninoy Aquino'),
(24155, 920, 'Anahawan'),
(24156, 920, 'Apo Island'),
(24157, 920, 'Bagacay'),
(24158, 920, 'Baslay'),
(24159, 920, 'Batuhon Dacu'),
(24160, 920, 'Boloc-boloc'),
(24161, 920, 'Bulak'),
(24162, 920, 'Bunga'),
(24163, 920, 'Casile'),
(24164, 920, 'Libjo'),
(24165, 920, 'Lipayo'),
(24166, 920, 'Maayongtubig'),
(24167, 920, 'Mag-aso'),
(24168, 920, 'Magsaysay'),
(24169, 920, 'Malongcay Dacu'),
(24170, 920, 'Masaplod Norte'),
(24171, 920, 'Masaplod Sur'),
(24172, 920, 'Panubtuban'),
(24173, 920, 'Poblacion I'),
(24174, 920, 'Poblacion II'),
(24175, 920, 'Poblacion III'),
(24176, 920, 'Tugawe'),
(24177, 920, 'Tunga-tunga'),
(24178, 921, 'Bagacay'),
(24179, 921, 'Bajumpandan'),
(24180, 921, 'Balugo'),
(24181, 921, 'Banilad'),
(24182, 921, 'Bantayan'),
(24183, 921, 'Batinguel'),
(24184, 921, 'Bunao'),
(24185, 921, 'Cadawinonan'),
(24186, 921, 'Calindagan'),
(24187, 921, 'Camanjac'),
(24188, 921, 'Candau-ay'),
(24189, 921, 'Cantil-e'),
(24190, 921, 'Daro'),
(24191, 921, 'Junob'),
(24192, 921, 'Looc'),
(24193, 921, 'Mangnao-Canal'),
(24194, 921, 'Motong'),
(24195, 921, 'Piapi'),
(24196, 921, 'Poblacion No. 1'),
(24197, 921, 'Poblacion No. 2 '),
(24198, 921, 'Poblacion No. 3'),
(24199, 921, 'Poblacion No. 4'),
(24200, 921, 'Poblacion No. 5'),
(24201, 921, 'Poblacion No. 6'),
(24202, 921, 'Poblacion No. 7'),
(24203, 921, 'Poblacion No. 8'),
(24204, 921, 'Pulantubig'),
(24205, 921, 'Tabuctubig'),
(24206, 921, 'Taclobo'),
(24207, 921, 'Talay'),
(24208, 922, 'Bakid'),
(24209, 922, 'Balogo'),
(24210, 922, 'Banwaque'),
(24211, 922, 'Basak'),
(24212, 922, 'Binobohan'),
(24213, 922, 'Buenavista'),
(24214, 922, 'Bulado'),
(24215, 922, 'Calamba'),
(24216, 922, 'Calupa-an'),
(24217, 922, 'Hibaiyo'),
(24218, 922, 'Hilaitan'),
(24219, 922, 'Hinakpan'),
(24220, 922, 'Humayhumay'),
(24221, 922, 'Imelda'),
(24222, 922, 'Kagawasan'),
(24223, 922, 'Linantuyan'),
(24224, 922, 'Luz'),
(24225, 922, 'Mabunga'),
(24226, 922, 'Mckinley'),
(24227, 922, 'Nagsaha'),
(24228, 922, 'Magsaysay'),
(24229, 922, 'Malusay'),
(24230, 922, 'Maniak'),
(24231, 922, 'Padre Zamora'),
(24232, 922, 'Plagatasanon'),
(24233, 922, 'Planas'),
(24234, 922, 'Poblacion'),
(24235, 922, 'Sandayao'),
(24236, 922, 'Tacpao'),
(24237, 922, 'Tinayunan Beach'),
(24238, 922, 'Tinayunan Hill'),
(24239, 922, 'Trinidad'),
(24240, 922, 'Villegas'),
(24241, 923, 'Aglahug'),
(24242, 923, 'Agutayon'),
(24243, 923, 'Apanangon'),
(24244, 923, 'Bae'),
(24245, 923, 'Bala-as'),
(24246, 923, 'Bangcal'),
(24247, 923, 'Banog'),
(24248, 923, 'Buto'),
(24249, 923, 'Cabang'),
(24250, 923, 'Camandayon'),
(24251, 923, 'Cangharay'),
(24252, 923, 'Canlahao'),
(24253, 923, 'Dayoyo'),
(24254, 923, 'Eli'),
(24255, 923, 'Lacaon'),
(24256, 923, 'Mahanlud'),
(24257, 923, 'Malabago'),
(24258, 923, 'Mambaid'),
(24259, 923, 'Mongpong'),
(24260, 923, 'Owacan'),
(24261, 923, 'Pacuan'),
(24262, 923, 'Panglaya-an'),
(24263, 923, 'North Poblacion'),
(24264, 923, 'South Poblacion'),
(24265, 923, 'Polopantao'),
(24266, 923, 'Sampiniton'),
(24267, 923, 'Talamban'),
(24268, 923, 'Tamao'),
(24269, 924, 'Aniniaw'),
(24270, 924, 'Aya'),
(24271, 924, 'Bagtic'),
(24272, 924, 'Biga-a'),
(24273, 924, 'Busilak'),
(24274, 924, 'Cangabo'),
(24275, 924, 'Cantupa'),
(24276, 924, 'Eli'),
(24277, 924, 'Guihob'),
(24278, 924, 'Kansumandig'),
(24279, 924, 'Mambulod'),
(24280, 924, 'Mandapaton'),
(24281, 924, 'Manghulyawon'),
(24282, 924, 'Manluminsag'),
(24283, 924, 'Mapalasan'),
(24284, 924, 'Maragondong'),
(24285, 924, 'Martilo'),
(24286, 924, 'Nasungan'),
(24287, 924, 'Pacuan'),
(24288, 924, 'Pangca'),
(24289, 924, 'Pisong'),
(24290, 924, 'Pitogo'),
(24291, 924, 'Poblacion North'),
(24292, 924, 'Poblacion South'),
(24293, 924, 'San Jose'),
(24294, 924, 'Solongon'),
(24295, 924, 'Tala-on'),
(24296, 924, 'Talayong'),
(24297, 924, 'Elecia'),
(24298, 925, 'Abis'),
(24299, 925, 'Arebasore'),
(24300, 925, 'Bagtic'),
(24301, 925, 'Banban'),
(24302, 925, 'Barras'),
(24303, 925, 'Bato'),
(24304, 925, 'Bugnay'),
(24305, 925, 'Bulibulihan'),
(24306, 925, 'Bulwang'),
(24307, 925, 'Campanun-an'),
(24308, 925, 'Canggohob'),
(24309, 925, 'Cansal-ing'),
(24310, 925, 'Dagbasan'),
(24311, 925, 'Dahile'),
(24312, 925, 'Himocdongon'),
(24313, 925, 'Hagtu'),
(24314, 925, 'Inapoy'),
(24315, 925, 'Lamdas'),
(24316, 925, 'Lumbangan'),
(24317, 925, 'Luyang'),
(24318, 925, 'Manlingay'),
(24319, 925, 'Mayaposi'),
(24320, 925, 'Napasu-an'),
(24321, 925, 'New Namangka'),
(24322, 925, 'Old Namangka'),
(24323, 925, 'Pandanon'),
(24324, 925, 'Paniabonan'),
(24325, 925, 'Pantao'),
(24326, 925, 'Poblacion'),
(24327, 925, 'Samac'),
(24328, 925, 'Tadlong'),
(24329, 925, 'Tara'),
(24330, 926, 'Alangilanan'),
(24331, 926, 'Bagtic'),
(24332, 926, 'Balaas'),
(24333, 926, 'Bantolinao'),
(24334, 926, 'Bolisong'),
(24335, 926, 'Butong'),
(24336, 926, 'Campuyo'),
(24337, 926, 'Candabong'),
(24338, 926, 'Concepcion'),
(24339, 926, 'Dungo-an'),
(24340, 926, 'Kauswagan'),
(24341, 926, 'Libjo'),
(24342, 926, 'Lamogong'),
(24343, 926, 'Maaslum'),
(24344, 926, 'Mandalupang'),
(24345, 926, 'Panciao'),
(24346, 926, 'Poblacion'),
(24347, 926, 'Sac-sac'),
(24348, 926, 'Salvacion'),
(24349, 926, 'San Isidro'),
(24350, 926, 'San Jose'),
(24351, 926, 'Santa Monica'),
(24352, 926, 'Suba'),
(24353, 926, 'Sundo-an'),
(24354, 926, 'Tanglad'),
(24355, 926, 'Tubod'),
(24356, 926, 'Tupas'),
(24357, 927, 'Abante'),
(24358, 927, 'Balayong'),
(24359, 927, 'Banawe'),
(24360, 927, 'Datagon'),
(24361, 927, 'Fatima'),
(24362, 927, 'Inawasan'),
(24363, 927, 'Magsusunog'),
(24364, 927, 'Malalangsi'),
(24365, 927, 'Mamburao'),
(24366, 927, 'Mangoto'),
(24367, 927, 'Poblacion'),
(24368, 927, 'San Isidro'),
(24369, 927, 'Santa Agueda'),
(24370, 927, 'Simborio'),
(24371, 927, 'Yupisan'),
(24372, 927, 'Calicanan'),
(24373, 928, 'Basak'),
(24374, 928, 'Basiao'),
(24375, 928, 'Cambaloctot'),
(24376, 928, 'Cancawas'),
(24377, 928, 'Janayjanay'),
(24378, 928, 'Jilocon'),
(24379, 928, 'Naiba'),
(24380, 928, 'Poblacion'),
(24381, 928, 'San Roque'),
(24382, 928, 'Santo Niño'),
(24383, 928, 'Señora Ascion'),
(24384, 928, 'Siapo'),
(24385, 928, 'Tampi'),
(24386, 928, 'Tapon Norte'),
(24387, 929, 'Alangilan'),
(24388, 929, 'Amio'),
(24389, 929, 'Buenavista'),
(24390, 929, 'Kabulacan'),
(24391, 929, 'Caigangan'),
(24392, 929, 'Caranoche'),
(24393, 929, 'Cawitan'),
(24394, 929, 'Fatima'),
(24395, 929, 'Mabuhay'),
(24396, 929, 'Manalongon'),
(24397, 929, 'Mansagomayon'),
(24398, 929, 'Milagrosa'),
(24399, 929, 'Nagbinlod'),
(24400, 929, 'Nagbalaye'),
(24401, 929, 'Obat'),
(24402, 929, 'Poblacion'),
(24403, 929, 'San Francisco'),
(24404, 929, 'San Jose'),
(24405, 929, 'San Miguel'),
(24406, 929, 'San Pedro'),
(24407, 929, 'Santo Rosario'),
(24408, 929, 'Talalak'),
(24409, 930, 'Albiga'),
(24410, 930, 'Apoloy'),
(24411, 930, 'Bonawon'),
(24412, 930, 'Bonbonon'),
(24413, 930, 'Cabangahan'),
(24414, 930, 'Canaway'),
(24415, 930, 'Casala-an'),
(24416, 930, 'Caticugan'),
(24417, 930, 'Datag'),
(24418, 930, 'Giliga-on'),
(24419, 930, 'Inalad'),
(24420, 930, 'Malabuhan'),
(24421, 930, 'Maloh'),
(24422, 930, 'Mantiquil'),
(24423, 930, 'Mantuyop'),
(24424, 930, 'Napacao'),
(24425, 930, 'Poblacion I'),
(24426, 930, 'Poblacion II'),
(24427, 930, 'Poblacion III'),
(24428, 930, 'Poblacion IV'),
(24429, 930, 'Salag'),
(24430, 930, 'San Jose'),
(24431, 930, 'Sandulot'),
(24432, 930, 'Si-it'),
(24433, 930, 'Sumaliring'),
(24434, 930, 'Tayak'),
(24435, 931, 'Agan-an'),
(24436, 931, 'Ajong'),
(24437, 931, 'Balugo'),
(24438, 931, 'Bolocboloc'),
(24439, 931, 'Calabnugan'),
(24440, 931, 'Cangmating'),
(24441, 931, 'Enrique Villanueva'),
(24442, 931, 'Looc'),
(24443, 931, 'Magatas'),
(24444, 931, 'Maningcao'),
(24445, 931, 'Maslog'),
(24446, 931, 'Poblacion'),
(24447, 931, 'San Antonio'),
(24448, 931, 'Tubigon'),
(24449, 931, 'Tubtubon'),
(24450, 932, 'Azagra'),
(24451, 932, 'Bahi-an'),
(24452, 932, 'Luca'),
(24453, 932, 'Manipis'),
(24454, 932, 'Novallas'),
(24455, 932, 'Obogon'),
(24456, 932, 'Pal-ew'),
(24457, 932, 'Poblacion I'),
(24458, 932, 'Poblacion II'),
(24459, 932, 'Poblacion III'),
(24460, 932, 'Poblacion IV'),
(24461, 932, 'Poblacion V'),
(24462, 932, 'Poblacion VI'),
(24463, 932, 'Poblacion VII'),
(24464, 932, 'Poblacion VIII'),
(24465, 932, 'Poblacion IX'),
(24466, 932, 'Polo'),
(24467, 932, 'San Isidro'),
(24468, 932, 'San Jose'),
(24469, 932, 'San Miguel'),
(24470, 932, 'Santa Cruz Nuevo'),
(24471, 932, 'Santa Cruz Viejo'),
(24472, 932, 'Santo Niño'),
(24473, 932, 'Tugas'),
(24474, 933, 'Bacong'),
(24475, 933, 'Bago'),
(24476, 933, 'Banga'),
(24477, 933, 'Cabulotan'),
(24478, 933, 'Cambaye'),
(24479, 933, 'Dalaupon'),
(24480, 933, 'Guincalaban'),
(24481, 933, 'Ilaya-Tayasan'),
(24482, 933, 'Jilabangan'),
(24483, 933, 'Lag-it'),
(24484, 933, 'Linao'),
(24485, 933, 'Lutay'),
(24486, 933, 'Maglihe'),
(24487, 933, 'Matauta'),
(24488, 933, 'Magtuhao'),
(24489, 933, 'Matuog'),
(24490, 933, 'Numnum'),
(24491, 933, 'Palaslan'),
(24492, 933, 'Pindahan'),
(24493, 933, 'Pinalubngan'),
(24494, 933, 'Pinocawan'),
(24495, 933, 'Poblacion'),
(24496, 933, 'Santa Cruz'),
(24497, 933, 'Saying'),
(24498, 933, 'Suquib'),
(24499, 933, 'Tamao'),
(24500, 933, 'Tambulan'),
(24501, 933, 'Tanlad'),
(24502, 934, 'Apolong'),
(24503, 934, 'Balabag East'),
(24504, 934, 'Balabag West'),
(24505, 934, 'Balayagmanok'),
(24506, 934, 'Balili'),
(24507, 934, 'Balugo'),
(24508, 934, 'Bongbong'),
(24509, 934, 'Bong-ao'),
(24510, 934, 'Calayugan'),
(24511, 934, 'Cambucad'),
(24512, 934, 'Dobdob'),
(24513, 934, 'Jawa'),
(24514, 934, 'Caidiocan'),
(24515, 934, 'Liptong'),
(24516, 934, 'Lunga'),
(24517, 934, 'Malabo'),
(24518, 934, 'Malaunay'),
(24519, 934, 'Mampas'),
(24520, 934, 'Palinpinon'),
(24521, 934, 'North Poblacion'),
(24522, 934, 'South Poblacion'),
(24523, 934, 'Puhagan'),
(24524, 934, 'Pulangbato'),
(24525, 934, 'Sagbang'),
(24526, 935, 'Bagawines'),
(24527, 935, 'Bairan'),
(24528, 935, 'Don Espiridion Villegas'),
(24529, 935, 'Guba'),
(24530, 935, 'Cabulihan'),
(24531, 935, 'Macapso'),
(24532, 935, 'Malangsa'),
(24533, 935, 'Molobolo'),
(24534, 935, 'Maglahos'),
(24535, 935, 'Pinocawan'),
(24536, 935, 'Poblacion'),
(24537, 935, 'Puan'),
(24538, 935, 'Tabon'),
(24539, 935, 'Tagbino'),
(24540, 935, 'Ulay'),
(24541, 936, 'Basac'),
(24542, 936, 'Calango'),
(24543, 936, 'Lotuban'),
(24544, 936, 'Malongcay Diot'),
(24545, 936, 'Maluay'),
(24546, 936, 'Mayabon'),
(24547, 936, 'Nabago'),
(24548, 936, 'Nasig-id'),
(24549, 936, 'Najandig'),
(24550, 936, 'Poblacion'),
(24551, 937, 'Balolong'),
(24552, 937, 'Bino-ongan'),
(24553, 937, 'Bitaug'),
(24554, 937, 'Bolot'),
(24555, 937, 'Camogao'),
(24556, 937, 'Cangmangki'),
(24557, 937, 'Libo'),
(24558, 937, 'Lomangcapan'),
(24559, 937, 'Lotloton'),
(24560, 937, 'Manan-ao'),
(24561, 937, 'Olave'),
(24562, 937, 'Parian'),
(24563, 937, 'Poblacion'),
(24564, 937, 'Tulapos'),
(24565, 938, 'Bagacay'),
(24566, 938, 'Balolang'),
(24567, 938, 'Basac'),
(24568, 938, 'Bintangan'),
(24569, 938, 'Bontod'),
(24570, 938, 'Cabulihan'),
(24571, 938, 'Calunasan'),
(24572, 938, 'Candigum'),
(24573, 938, 'Cang-allas'),
(24574, 938, 'Cang-apa'),
(24575, 938, 'Cangbagsa'),
(24576, 938, 'Cangmalalag'),
(24577, 938, 'Canlambo'),
(24578, 938, 'Canlasog'),
(24579, 938, 'Catamboan'),
(24580, 938, 'Helen'),
(24581, 938, 'Nonoc'),
(24582, 938, 'North Poblacion'),
(24583, 938, 'South Poblacion'),
(24584, 938, 'Ponong'),
(24585, 938, 'Sabang'),
(24586, 938, 'Sandugan'),
(24587, 938, 'Taculing'),
(24588, 939, 'Campalanas'),
(24589, 939, 'Cangclaran'),
(24590, 939, 'Cangomantong'),
(24591, 939, 'Capalasanan'),
(24592, 939, 'Catamboan (Pob.)'),
(24593, 939, 'Gabayan'),
(24594, 939, 'Kimba'),
(24595, 939, 'Kinamandagan'),
(24596, 939, 'Lower Cabangcalan'),
(24597, 939, 'Nagerong'),
(24598, 939, 'Po-o'),
(24599, 939, 'Simacolong'),
(24600, 939, 'Tagmanocan'),
(24601, 939, 'Talayong'),
(24602, 939, 'Tigbawan (Pob.)'),
(24603, 939, 'Tignao'),
(24604, 939, 'Upper Cabangcalan'),
(24605, 939, 'Ytaya'),
(24606, 940, 'Bogo'),
(24607, 940, 'Bonga'),
(24608, 940, 'Cabal-asan'),
(24609, 940, 'Calunasan'),
(24610, 940, 'Candaping A'),
(24611, 940, 'Candaping B'),
(24612, 940, 'Cantaroc A'),
(24613, 940, 'Cantaroc B'),
(24614, 940, 'Cantugbas'),
(24615, 940, 'Lico-an'),
(24616, 940, 'Lilo-an'),
(24617, 940, 'Looc'),
(24618, 940, 'Logucan'),
(24619, 940, 'Minalulan'),
(24620, 940, 'Nabutay'),
(24621, 940, 'Olang'),
(24622, 940, 'Pisong A'),
(24623, 940, 'Pisong B'),
(24624, 940, 'Poblacion Norte'),
(24625, 940, 'Poblacion Sur'),
(24626, 940, 'Saguing'),
(24627, 940, 'Sawang'),
(24628, 941, 'Canasagan'),
(24629, 941, 'Candura'),
(24630, 941, 'Cangmunag'),
(24631, 941, 'Cansayang'),
(24632, 941, 'Catulayan'),
(24633, 941, 'Lala-o'),
(24634, 941, 'Maite'),
(24635, 941, 'Napo'),
(24636, 941, 'Paliton'),
(24637, 941, 'Poblacion'),
(24638, 941, 'Solangon'),
(24639, 941, 'Tag-ibo'),
(24640, 941, 'Tambisan'),
(24641, 941, 'Timbaon'),
(24642, 941, 'Tubod'),
(24643, 942, 'Banban'),
(24644, 942, 'Bolos'),
(24645, 942, 'Caipilan'),
(24646, 942, 'Caitican'),
(24647, 942, 'Calalinan'),
(24648, 942, 'Cang-atuyom'),
(24649, 942, 'Canal'),
(24650, 942, 'Candanay Norte'),
(24651, 942, 'Candanay Sur'),
(24652, 942, 'Cang-adieng'),
(24653, 942, 'Cang-agong'),
(24654, 942, 'Cang-alwang'),
(24655, 942, 'Cang-asa'),
(24656, 942, 'Cang-inte'),
(24657, 942, 'Cang-isad'),
(24658, 942, 'Canghunoghunog'),
(24659, 942, 'Cangmatnog'),
(24660, 942, 'Cangmohao'),
(24661, 942, 'Cantabon'),
(24662, 942, 'Caticugan'),
(24663, 942, 'Dumanhog'),
(24664, 942, 'Ibabao'),
(24665, 942, 'Lambojon'),
(24666, 942, 'Luyang'),
(24667, 942, 'Luzong'),
(24668, 942, 'Olo'),
(24669, 942, 'Pangi'),
(24670, 942, 'Panlautan'),
(24671, 942, 'Pasihagon'),
(24672, 942, 'Pili'),
(24673, 942, 'Poblacion'),
(24674, 942, 'Polangyuta'),
(24675, 942, 'Ponong'),
(24676, 942, 'Sabang'),
(24677, 942, 'San Antonio'),
(24678, 942, 'Songculan'),
(24679, 942, 'Tacdog'),
(24680, 942, 'Tacloban'),
(24681, 942, 'Tambisan'),
(24682, 942, 'Tebjong'),
(24683, 942, 'Tinago'),
(24684, 942, 'Tongo'),
(24685, 943, 'Aguinaldo'),
(24686, 943, 'Balud (Pob.)'),
(24687, 943, 'Bato'),
(24688, 943, 'Beri'),
(24689, 943, 'Bigo'),
(24690, 943, 'Buenavista'),
(24691, 943, 'Cagsalay'),
(24692, 943, 'Campacion'),
(24693, 943, 'Carapdapan'),
(24694, 943, 'Casidman'),
(24695, 943, 'Catumsan'),
(24696, 943, 'Central (Pob.)'),
(24697, 943, 'Concepcion'),
(24698, 943, 'Garden (Pob.)'),
(24699, 943, 'Inayawan'),
(24700, 943, 'Macarthur'),
(24701, 943, 'Rawis (Pob.)'),
(24702, 943, 'Tangbo'),
(24703, 943, 'Tawagan'),
(24704, 943, 'Tebalawon'),
(24705, 944, 'Bacjao'),
(24706, 944, 'Cag-olango'),
(24707, 944, 'Cansumangcay'),
(24708, 944, 'Guinmaayohan'),
(24709, 944, 'Barangay Poblacion I'),
(24710, 944, 'Barangay Poblacion II'),
(24711, 944, 'Barangay Poblacion III'),
(24712, 944, 'Barangay Poblacion IV'),
(24713, 944, 'Barangay Poblacion V'),
(24714, 944, 'Barangay Poblacion VI'),
(24715, 944, 'San Miguel'),
(24716, 944, 'Santa Rosa'),
(24717, 944, 'Maybunga'),
(24718, 945, 'Balogo'),
(24719, 945, 'Bangon'),
(24720, 945, 'Cabay'),
(24721, 945, 'Caisawan'),
(24722, 945, 'Cantubi'),
(24723, 945, 'General Malvar'),
(24724, 945, 'Guinpoliran'),
(24725, 945, 'Julag'),
(24726, 945, 'Magsaysay'),
(24727, 945, 'Maramag'),
(24728, 945, 'Poblacion I'),
(24729, 945, 'Poblacion II'),
(24730, 945, 'Poblacion III'),
(24731, 945, 'Poblacion IV'),
(24732, 945, 'Poblacion V'),
(24733, 946, 'Alang-alang'),
(24734, 946, 'Amantacop'),
(24735, 946, 'Ando'),
(24736, 946, 'Balacdas'),
(24737, 946, 'Balud'),
(24738, 946, 'Banuyo'),
(24739, 946, 'Baras'),
(24740, 946, 'Bato'),
(24741, 946, 'Bayobay'),
(24742, 946, 'Benowangan'),
(24743, 946, 'Bugas'),
(24744, 946, 'Cabalagnan'),
(24745, 946, 'Cabong'),
(24746, 946, 'Cagbonga'),
(24747, 946, 'Calico-an'),
(24748, 946, 'Calingatngan'),
(24749, 946, 'Campesao'),
(24750, 946, 'Can-abong'),
(24751, 946, 'Can-aga'),
(24752, 946, 'Camada'),
(24753, 946, 'Canjaway'),
(24754, 946, 'Canlaray'),
(24755, 946, 'Canyopay'),
(24756, 946, 'Divinubo'),
(24757, 946, 'Hebacong'),
(24758, 946, 'Hindang'),
(24759, 946, 'Lalawigan'),
(24760, 946, 'Libuton'),
(24761, 946, 'Locso-on'),
(24762, 946, 'Maybacong'),
(24763, 946, 'Maypangdan'),
(24764, 946, 'Pepelitan'),
(24765, 946, 'Pinanag-an'),
(24766, 946, 'Purok D1 (Pob.)'),
(24767, 946, 'Purok A (Pob.)'),
(24768, 946, 'Purok B (Pob.)'),
(24769, 946, 'Purok C (Pob.)'),
(24770, 946, 'Purok D2 (Pob.)'),
(24771, 946, 'Purok E (Pob.)'),
(24772, 946, 'Purok F (Pob.)'),
(24773, 946, 'Purok G (Pob.)'),
(24774, 946, 'Purok H (Pob.)'),
(24775, 946, 'Punta Maria'),
(24776, 946, 'Sabang North'),
(24777, 946, 'Sabang South'),
(24778, 946, 'San Andres'),
(24779, 946, 'San Gabriel'),
(24780, 946, 'San Gregorio'),
(24781, 946, 'San Jose'),
(24782, 946, 'San Mateo'),
(24783, 946, 'San Pablo'),
(24784, 946, 'San Saturnino'),
(24785, 946, 'Santa Fe'),
(24786, 946, 'Siha'),
(24787, 946, 'Songco'),
(24788, 946, 'Sohutan'),
(24789, 946, 'Suribao'),
(24790, 946, 'Surok'),
(24791, 946, 'Taboc'),
(24792, 946, 'Tabunan'),
(24793, 946, 'Tamoso'),
(24794, 947, 'Balagon'),
(24795, 947, 'Baruk'),
(24796, 947, 'Boco'),
(24797, 947, 'Caghalong'),
(24798, 947, 'Camantang'),
(24799, 947, 'Can-ilay'),
(24800, 947, 'Cansangaya'),
(24801, 947, 'Canteros'),
(24802, 947, 'Carolina'),
(24803, 947, 'Guibuangan'),
(24804, 947, 'Jepaco'),
(24805, 947, 'Mabuhay'),
(24806, 947, 'Malogo'),
(24807, 947, 'Obong'),
(24808, 947, 'Pandol'),
(24809, 947, 'Barangay 1 Poblacion'),
(24810, 947, 'Barangay 10 Poblacion'),
(24811, 947, 'Barangay 2 Poblacion'),
(24812, 947, 'Barangay 3 Poblacion'),
(24813, 947, 'Barangay 4 Poblacion'),
(24814, 947, 'Barangay 5 Poblacion'),
(24815, 947, 'Barangay 6 Poblacion'),
(24816, 947, 'Barangay 7 Poblacion'),
(24817, 947, 'Barangay 8 Poblacion'),
(24818, 947, 'Barangay 9 Poblacion'),
(24819, 947, 'Salvacion'),
(24820, 947, 'Solong'),
(24821, 947, 'Rawis'),
(24822, 948, 'Aroganga'),
(24823, 948, 'Magongbong'),
(24824, 948, 'Buenavista'),
(24825, 948, 'Cabago-an'),
(24826, 948, 'Caglao-an'),
(24827, 948, 'Cagtabon'),
(24828, 948, 'Dampigan'),
(24829, 948, 'Dapdap'),
(24830, 948, 'Del Pilar'),
(24831, 948, 'Denigpian'),
(24832, 948, 'Gap-ang'),
(24833, 948, 'Japitan'),
(24834, 948, 'Jicontol'),
(24835, 948, 'Hilabaan'),
(24836, 948, 'Hinolaso'),
(24837, 948, 'Libertad'),
(24838, 948, 'Magsaysay'),
(24839, 948, 'Malobago'),
(24840, 948, 'Osmeña'),
(24841, 948, 'Barangay 1 (Pob.)'),
(24842, 948, 'Barangay 10 (Pob.)'),
(24843, 948, 'Barangay 11 (Pob.)'),
(24844, 948, 'Barangay 12 (Pob.)'),
(24845, 948, 'Barangay 13 (Pob.)'),
(24846, 948, 'Barangay 14 (Pob.)'),
(24847, 948, 'Barangay 15 (Pob.)'),
(24848, 948, 'Barangay 2 (Pob.)'),
(24849, 948, 'Barangay 3 (Pob.)'),
(24850, 948, 'Barangay 4 (Pob.)'),
(24851, 948, 'Barangay 5 (Pob.)'),
(24852, 948, 'Barangay 6 (Pob.)'),
(24853, 948, 'Barangay 7 (Pob.)'),
(24854, 948, 'Barangay 8 (Pob.)'),
(24855, 948, 'Barangay 9 (Pob.)'),
(24856, 948, 'Rizal'),
(24857, 948, 'San Isidro'),
(24858, 948, 'San Pascual'),
(24859, 948, 'San Roque'),
(24860, 948, 'San Vicente'),
(24861, 948, 'Santa Cruz'),
(24862, 948, 'Santo Niño'),
(24863, 948, 'Tanauan'),
(24864, 948, 'Villahermosa'),
(24865, 948, 'Bonghon'),
(24866, 948, 'Malaintos'),
(24867, 948, 'Tikling'),
(24868, 949, 'Alang-alang'),
(24869, 949, 'Binalay'),
(24870, 949, 'Calutan'),
(24871, 949, 'Camcuevas'),
(24872, 949, 'Domrog'),
(24873, 949, 'Limbujan'),
(24874, 949, 'Magsaysay'),
(24875, 949, 'Osmeña'),
(24876, 949, 'Pingan'),
(24877, 949, 'Poblacion Barangay 1'),
(24878, 949, 'Poblacion Barangay 2'),
(24879, 949, 'Poblacion Barangay 3'),
(24880, 949, 'Poblacion Barangay 4'),
(24881, 949, 'Poblacion Barangay 5'),
(24882, 949, 'Poblacion Barangay 6'),
(24883, 949, 'Poblacion Barangay 7'),
(24884, 949, 'Poblacion Barangay 8'),
(24885, 949, 'Laurel'),
(24886, 949, 'Roxas'),
(24887, 949, 'Quirino'),
(24888, 949, 'San Isidro'),
(24889, 949, 'San Roque'),
(24890, 949, 'Santa Cruz'),
(24891, 949, 'Santa Fe'),
(24892, 949, 'Tugop'),
(24893, 949, 'Vigan'),
(24894, 949, 'Macapagal'),
(24895, 949, 'Aguinaldo'),
(24896, 949, 'Quezon'),
(24897, 949, 'Tandang Sora'),
(24898, 950, 'Barangay 1 (Pob.)'),
(24899, 950, 'Barangay 2 (Pob.)'),
(24900, 950, 'Barangay 3 (Pob.)'),
(24901, 950, 'Barangay 4 (Pob.)'),
(24902, 950, 'Barangay 5 (Pob.)'),
(24903, 950, 'Barangay 6 (Pob.)'),
(24904, 950, 'Barangay 7 (Pob.)'),
(24905, 950, 'Biga'),
(24906, 950, 'Coticot'),
(24907, 950, 'Gigoso'),
(24908, 950, 'Huknan'),
(24909, 950, 'Parina'),
(24910, 950, 'Paya'),
(24911, 950, 'President Roxas'),
(24912, 950, 'San Miguel'),
(24913, 950, 'Santa Cruz'),
(24914, 950, 'Barangay 8 (Pob.)'),
(24915, 950, 'San Isidro'),
(24916, 951, 'Alingarog'),
(24917, 951, 'Bagua'),
(24918, 951, 'Banaag'),
(24919, 951, 'Banahao'),
(24920, 951, 'Baras'),
(24921, 951, 'Barbo'),
(24922, 951, 'Bitaugan'),
(24923, 951, 'Bungtod'),
(24924, 951, 'Bucao'),
(24925, 951, 'Buenavista'),
(24926, 951, 'Cagdara-o'),
(24927, 951, 'Cagusu-an'),
(24928, 951, 'Camparang'),
(24929, 951, 'Campoyong'),
(24930, 951, 'Cantahay'),
(24931, 951, 'Casuguran'),
(24932, 951, 'Cogon'),
(24933, 951, 'Culasi'),
(24934, 951, 'Poblacion Ward 10'),
(24935, 951, 'Poblacion Ward 9-A'),
(24936, 951, 'Gahoy'),
(24937, 951, 'Habag'),
(24938, 951, 'Hamorawon'),
(24939, 951, 'Inapulangan'),
(24940, 951, 'Poblacion Ward 4-A'),
(24941, 951, 'Lupok (Pob.)'),
(24942, 951, 'Mayana'),
(24943, 951, 'Ngolos'),
(24944, 951, 'Pagbabangnan'),
(24945, 951, 'Pagnamitan'),
(24946, 951, 'Poblacion Ward 1'),
(24947, 951, 'Poblacion Ward 2'),
(24948, 951, 'Poblacion Ward 11'),
(24949, 951, 'Poblacion Ward 12'),
(24950, 951, 'Poblacion Ward 3'),
(24951, 951, 'Poblacion Ward 4'),
(24952, 951, 'Poblacion Ward 5'),
(24953, 951, 'Poblacion Ward 6'),
(24954, 951, 'Poblacion Ward 7'),
(24955, 951, 'Poblacion Ward 8'),
(24956, 951, 'Poblacion Ward 9'),
(24957, 951, 'Salug'),
(24958, 951, 'San Antonio'),
(24959, 951, 'San Jose'),
(24960, 951, 'San Pedro'),
(24961, 951, 'Sapao'),
(24962, 951, 'Sulangan'),
(24963, 951, 'Suluan'),
(24964, 951, 'Surok'),
(24965, 951, 'Taytay'),
(24966, 951, 'Timala'),
(24967, 951, 'Trinidad'),
(24968, 951, 'Victory Island'),
(24969, 951, 'Canawayon'),
(24970, 951, 'Dalaragan'),
(24971, 951, 'Hagna'),
(24972, 951, 'Hollywood'),
(24973, 951, 'San Juan'),
(24974, 951, 'Santo Niño'),
(24975, 951, 'Tagporo'),
(24976, 952, 'Batang'),
(24977, 952, 'Cacatmonan'),
(24978, 952, 'Garawon'),
(24979, 952, 'Canciledes'),
(24980, 952, 'Carmen'),
(24981, 952, 'Nagaja'),
(24982, 952, 'Padang'),
(24983, 952, 'Barangay 1 (Pob.)'),
(24984, 952, 'Barangay 2 (Pob.)'),
(24985, 952, 'Barangay 3 (Pob.)'),
(24986, 952, 'Barangay 4 (Pob.)'),
(24987, 952, 'San Isidro'),
(24988, 952, 'San Miguel'),
(24989, 953, 'Agsaman'),
(24990, 953, 'Cagmanaba'),
(24991, 953, 'Dorillo'),
(24992, 953, 'Jewaran'),
(24993, 953, 'Mabuhay'),
(24994, 953, 'Magsaysay'),
(24995, 953, 'Barangay 1 (Pob.)'),
(24996, 953, 'Barangay 2 (Pob.)'),
(24997, 953, 'Barangay 3 (Pob.)'),
(24998, 953, 'Barangay 4 (Pob.)'),
(24999, 953, 'Recare'),
(25000, 953, 'Roxas'),
(25001, 953, 'San Roque'),
(25002, 954, 'Betaog'),
(25003, 954, 'Bolusao'),
(25004, 954, 'Guinob-an'),
(25005, 954, 'Maslog'),
(25006, 954, 'Barangay Poblacion 1'),
(25007, 954, 'Barangay Poblacion 2'),
(25008, 954, 'Barangay Poblacion 3'),
(25009, 954, 'Barangay Poblacion 4'),
(25010, 954, 'Barangay Poblacion 5'),
(25011, 954, 'Barangay Poblacion 6'),
(25012, 954, 'Barangay Poblacion 7'),
(25013, 954, 'Barangay Poblacion 8'),
(25014, 954, 'Barangay Poblacion 9'),
(25015, 954, 'Barangay Poblacion 10'),
(25016, 954, 'San Isidro'),
(25017, 954, 'Taguite'),
(25018, 955, 'Antipolo'),
(25019, 955, 'Babanikhon'),
(25020, 955, 'Bacayawan'),
(25021, 955, 'Barobo'),
(25022, 955, 'Burak'),
(25023, 955, 'Can-ato'),
(25024, 955, 'Candoros'),
(25025, 955, 'Canliwag'),
(25026, 955, 'Cantomco'),
(25027, 955, 'Hugpa'),
(25028, 955, 'Maca-anga'),
(25029, 955, 'Magtino'),
(25030, 955, 'Mina-anod'),
(25031, 955, 'Naubay'),
(25032, 955, 'Piliw'),
(25033, 955, 'Barangay 1 (Pob.)'),
(25034, 955, 'Barangay 2 (Pob.)'),
(25035, 955, 'Barangay 3 (Pob.)'),
(25036, 955, 'Barangay 4 (Pob.)'),
(25037, 955, 'Barangay 5 (Pob.)'),
(25038, 955, 'Barangay 6 (Pob.)'),
(25039, 955, 'Barangay 7 (Pob.)'),
(25040, 955, 'Barangay 8 (Pob.)'),
(25041, 955, 'Barangay 9 (Pob.)'),
(25042, 955, 'Barangay 10 (Pob.)'),
(25043, 955, 'Barangay 11 (Pob.)'),
(25044, 955, 'Barangay 12 (Pob.)'),
(25045, 955, 'San Jose'),
(25046, 955, 'San Miguel'),
(25047, 955, 'San Roque'),
(25048, 955, 'So-ong'),
(25049, 955, 'Tabok'),
(25050, 955, 'Waso'),
(25051, 956, 'Bulawan'),
(25052, 956, 'Carayacay'),
(25053, 956, 'Libertad'),
(25054, 956, 'Malobago'),
(25055, 956, 'Maputi'),
(25056, 956, 'Barangay 1 (Pob.)'),
(25057, 956, 'Barangay 2 (Pob.)'),
(25058, 956, 'San Miguel'),
(25059, 956, 'San Roque'),
(25060, 956, 'Tangbo'),
(25061, 956, 'Taytay'),
(25062, 956, 'Tugas'),
(25063, 957, 'Camada'),
(25064, 957, 'Campakerit'),
(25065, 957, 'Canloterio'),
(25066, 957, 'Del Pilar'),
(25067, 957, 'Guindalitan'),
(25068, 957, 'Lapgap'),
(25069, 957, 'Malobago'),
(25070, 957, 'Maybocog'),
(25071, 957, 'Maytigbao'),
(25072, 957, 'Omawas'),
(25073, 957, 'Patag'),
(25074, 957, 'Barangay Poblacion 1'),
(25075, 957, 'Barangay Poblacion 2'),
(25076, 957, 'Barangay Poblacion 3'),
(25077, 957, 'Barangay Poblacion 4'),
(25078, 957, 'Barangay Poblacion 5'),
(25079, 957, 'Barangay Poblacion 6'),
(25080, 957, 'Barangay Poblacion 7'),
(25081, 957, 'San Gabriel'),
(25082, 957, 'Tagaslian'),
(25083, 958, 'Anuron'),
(25084, 958, 'Banuyo'),
(25085, 958, 'Bobon'),
(25086, 958, 'Busay'),
(25087, 958, 'Buyayawon'),
(25088, 958, 'Cabunga-an'),
(25089, 958, 'Cambante'),
(25090, 958, 'Barangay 1 Poblacion'),
(25091, 958, 'Barangay 2 Poblacion'),
(25092, 958, 'Barangay 3 Poblacion'),
(25093, 958, 'San Jose'),
(25094, 958, 'Sung-an'),
(25095, 958, 'Palamrag'),
(25096, 958, 'Barangay 4 Poblacion'),
(25097, 958, 'Port Kennedy'),
(25098, 958, 'San Roque'),
(25099, 959, 'Agsam'),
(25100, 959, 'Bagacay'),
(25101, 959, 'Balingasag'),
(25102, 959, 'Balocawe (Pob.)'),
(25103, 959, 'Bantayan'),
(25104, 959, 'Batang'),
(25105, 959, 'Bato'),
(25106, 959, 'Binalayan'),
(25107, 959, 'Buntay'),
(25108, 959, 'Burak'),
(25109, 959, 'Butnga (Pob.)'),
(25110, 959, 'Cadian'),
(25111, 959, 'Cagdine'),
(25112, 959, 'Cagpile'),
(25113, 959, 'Cagtoog'),
(25114, 959, 'Camanga (Pob.)'),
(25115, 959, 'Dalid'),
(25116, 959, 'Dao'),
(25117, 959, 'Factoria'),
(25118, 959, 'Gamot'),
(25119, 959, 'Iwayan'),
(25120, 959, 'Japay'),
(25121, 959, 'Kalaw'),
(25122, 959, 'Mabuhay'),
(25123, 959, 'Malingon'),
(25124, 959, 'Minap-os'),
(25125, 959, 'Nadacpan'),
(25126, 959, 'Naga'),
(25127, 959, 'Pangudtan'),
(25128, 959, 'Paypayon (Pob.)'),
(25129, 959, 'Riverside (Pob.)'),
(25130, 959, 'Rizal'),
(25131, 959, 'Sabang'),
(25132, 959, 'San Eduardo'),
(25133, 959, 'Santa Monica'),
(25134, 959, 'Saugan'),
(25135, 959, 'Saurong'),
(25136, 959, 'Tawagan (Pob.)'),
(25137, 959, 'Tiguib (Pob.)'),
(25138, 959, 'Trinidad'),
(25139, 959, 'Alang-alang'),
(25140, 959, 'San Roque (Pob.)'),
(25141, 960, 'Anislag'),
(25142, 960, 'Bagte'),
(25143, 960, 'Barangay No. 1 (Pob.)'),
(25144, 960, 'Barangay No. 2 (Pob.)'),
(25145, 960, 'Barangay No. 3 (Pob.)'),
(25146, 960, 'Barangay No. 4 (Pob.)'),
(25147, 960, 'Barangay No. 5 (Pob.)'),
(25148, 960, 'Buenavista'),
(25149, 960, 'Caculangan'),
(25150, 960, 'Cagdaja'),
(25151, 960, 'Cambilla'),
(25152, 960, 'Cantenio'),
(25153, 960, 'Naga'),
(25154, 960, 'Paco'),
(25155, 960, 'Rizal'),
(25156, 960, 'San Pedro'),
(25157, 960, 'San Vicente'),
(25158, 960, 'Santa Cruz'),
(25159, 960, 'Santa Margarita'),
(25160, 960, 'Santo Niño'),
(25161, 960, 'Palactad'),
(25162, 960, 'Alang-alang'),
(25163, 960, 'Barangay No. 6 (Pob.)'),
(25164, 960, 'Barangay No. 7 (Pob.)'),
(25165, 960, 'San Isidro'),
(25166, 961, 'Abejao'),
(25167, 961, 'Alog'),
(25168, 961, 'Asgad'),
(25169, 961, 'Bagtong'),
(25170, 961, 'Balud'),
(25171, 961, 'Barangay 1 (Pob.)'),
(25172, 961, 'Barangay 13 (Pob.)'),
(25173, 961, 'Barangay 2 (Pob.)'),
(25174, 961, 'Barangay 3 (Pob.)'),
(25175, 961, 'Barangay 4 (Pob.)'),
(25176, 961, 'Barangay 5 (Pob.)'),
(25177, 961, 'Barangay 6 (Pob.)'),
(25178, 961, 'Barangay 7 (Pob.)'),
(25179, 961, 'Barangay 8 (Pob.)'),
(25180, 961, 'Barangay 9 (Pob.)'),
(25181, 961, 'Barangay 10 (Pob.)'),
(25182, 961, 'Barangay 11 (Pob.)'),
(25183, 961, 'Barangay 12 (Pob.)'),
(25184, 961, 'Buabua'),
(25185, 961, 'Burak'),
(25186, 961, 'Butig'),
(25187, 961, 'Cagaut'),
(25188, 961, 'Camanga'),
(25189, 961, 'Cantomoja'),
(25190, 961, 'Carapdapan'),
(25191, 961, 'Caridad'),
(25192, 961, 'Casili-on'),
(25193, 961, 'Iberan'),
(25194, 961, 'Jagnaya'),
(25195, 961, 'Lusod'),
(25196, 961, 'Malbog'),
(25197, 961, 'Maliwaliw'),
(25198, 961, 'Matarinao'),
(25199, 961, 'Naparaan'),
(25200, 961, 'Seguinon'),
(25201, 961, 'San Roque'),
(25202, 961, 'Santa Cruz'),
(25203, 961, 'Tacla-on'),
(25204, 961, 'Tagbacan'),
(25205, 961, 'Palanas'),
(25206, 961, 'Talangdawan'),
(25207, 962, 'Bunacan'),
(25208, 962, 'Campidhan'),
(25209, 962, 'Casoroy'),
(25210, 962, 'Libas'),
(25211, 962, 'Nena'),
(25212, 962, 'Pagbabangnan'),
(25213, 962, 'Barangay No. 1 Poblacion'),
(25214, 962, 'Barangay No. 2 Poblacion'),
(25215, 962, 'Barangay No. 3 Poblacion'),
(25216, 962, 'Barangay No. 4 Poblacion'),
(25217, 962, 'Barangay No. 5 Poblacion'),
(25218, 962, 'Barangay No. 6 Poblacion'),
(25219, 962, 'Putong'),
(25220, 962, 'San Isidro'),
(25221, 962, 'San Miguel'),
(25222, 962, 'Lunang'),
(25223, 963, 'Alugan'),
(25224, 963, 'Bahay'),
(25225, 963, 'Bangon'),
(25226, 963, 'Baras'),
(25227, 963, 'Binogawan'),
(25228, 963, 'Cajagwayan'),
(25229, 963, 'Japunan'),
(25230, 963, 'Natividad'),
(25231, 963, 'Pangpang'),
(25232, 963, 'Barangay No. 1 (Pob.)'),
(25233, 963, 'Barangay No. 2 (Pob.)'),
(25234, 963, 'Barangay No. 3 (Pob.)'),
(25235, 963, 'Barangay No. 4 (Pob.)'),
(25236, 963, 'Barangay No. 5 (Pob.)'),
(25237, 963, 'Santa Cruz'),
(25238, 963, 'Tabo'),
(25239, 963, 'Tan-awan'),
(25240, 964, 'A-et'),
(25241, 964, 'Baybay (Pob.)'),
(25242, 964, 'Kandalakit'),
(25243, 964, 'Del Remedio'),
(25244, 964, 'Loyola Heights (Pob.)'),
(25245, 964, 'Mabini'),
(25246, 964, 'Maglipay (Pob.)'),
(25247, 964, 'Maramara (Pob.)'),
(25248, 964, 'Riverside (Pob.)'),
(25249, 964, 'San Francisco'),
(25250, 964, 'San Isidro'),
(25251, 964, 'San Juan'),
(25252, 964, 'San Mateo'),
(25253, 964, 'San Vicente'),
(25254, 964, 'Santo Niño'),
(25255, 964, 'Santo Tomas'),
(25256, 964, 'Tabi (Pob.)'),
(25257, 964, 'Abucay (Pob.)'),
(25258, 965, 'Batiawan'),
(25259, 965, 'Beto'),
(25260, 965, 'Binaloan'),
(25261, 965, 'Bongdo'),
(25262, 965, 'Dacul'),
(25263, 965, 'Danao'),
(25264, 965, 'Del Remedios'),
(25265, 965, 'Gayam'),
(25266, 965, 'Lomatud'),
(25267, 965, 'Mabuhay'),
(25268, 965, 'Malinao'),
(25269, 965, 'Mantang'),
(25270, 965, 'Nato'),
(25271, 965, 'Pangabutan'),
(25272, 965, 'Poblacion Barangay 1'),
(25273, 965, 'Poblacion Barangay 2'),
(25274, 965, 'Poblacion Barangay 3'),
(25275, 965, 'Poblacion Barangay 4'),
(25276, 965, 'Poblacion Barangay 5'),
(25277, 965, 'Poblacion Barangay 6'),
(25278, 965, 'Polangi'),
(25279, 965, 'San Luis'),
(25280, 965, 'San Pablo'),
(25281, 965, 'San Rafael'),
(25282, 966, 'Alangilan'),
(25283, 966, 'Anibongan'),
(25284, 966, 'Buaya'),
(25285, 966, 'Bagacay'),
(25286, 966, 'Bahay'),
(25287, 966, 'Balinsasayao'),
(25288, 966, 'Balocawe'),
(25289, 966, 'Balocawehay'),
(25290, 966, 'Barayong'),
(25291, 966, 'Bayabas'),
(25292, 966, 'Bito (Pob.)'),
(25293, 966, 'Buenavista'),
(25294, 966, 'Bulak'),
(25295, 966, 'Bunga'),
(25296, 966, 'Buntay (Pob.)'),
(25297, 966, 'Burubud-an'),
(25298, 966, 'Cagbolo'),
(25299, 966, 'Can-uguib (Pob.)'),
(25300, 966, 'Can-aporong'),
(25301, 966, 'Canmarating'),
(25302, 966, 'Capilian'),
(25303, 966, 'Cadac-an'),
(25304, 966, 'Combis'),
(25305, 966, 'Dingle'),
(25306, 966, 'Guintagbucan (Pob.)'),
(25307, 966, 'Hampipila'),
(25308, 966, 'Katipunan'),
(25309, 966, 'Kikilo'),
(25310, 966, 'Laray'),
(25311, 966, 'Lawa-an'),
(25312, 966, 'Libertad'),
(25313, 966, 'Loyonsawang (Pob.)'),
(25314, 966, 'Mahagna'),
(25315, 966, 'Mag-atubang'),
(25316, 966, 'Mahayahay'),
(25317, 966, 'Maitum'),
(25318, 966, 'Malaguicay'),
(25319, 966, 'Matagnao'),
(25320, 966, 'Nalibunan (Pob.)'),
(25321, 966, 'Nebga'),
(25322, 966, 'Odiongan'),
(25323, 966, 'Pagsang-an'),
(25324, 966, 'Paguite'),
(25325, 966, 'Parasanon'),
(25326, 966, 'Picas Sur'),
(25327, 966, 'Pilar'),
(25328, 966, 'Pinamanagan'),
(25329, 966, 'Salvacion'),
(25330, 966, 'San Francisco'),
(25331, 966, 'San Isidro'),
(25332, 966, 'San Roque'),
(25333, 966, 'Santa Fe (Pob.)'),
(25334, 966, 'Santa Lucia (Pob.)'),
(25335, 966, 'Santo Niño (Pob.)'),
(25336, 966, 'Tabigue'),
(25337, 966, 'Tadoc'),
(25338, 966, 'New Taligue'),
(25339, 966, 'Old Taligue'),
(25340, 966, 'Tib-o'),
(25341, 966, 'Tinalian'),
(25342, 966, 'Tinocolan'),
(25343, 966, 'Tuy-a'),
(25344, 966, 'Victory (Pob.)'),
(25345, 967, 'Aslum'),
(25346, 967, 'Astorga'),
(25347, 967, 'Bato'),
(25348, 967, 'Binongto-an'),
(25349, 967, 'Binotong'),
(25350, 967, 'Bobonon'),
(25351, 967, 'Borseth'),
(25352, 967, 'Buenavista'),
(25353, 967, 'Bugho'),
(25354, 967, 'Buri'),
(25355, 967, 'Cabadsan'),
(25356, 967, 'Calaasan'),
(25357, 967, 'Cambahanon'),
(25358, 967, 'Cambolao'),
(25359, 967, 'Canvertudes'),
(25360, 967, 'Capiz'),
(25361, 967, 'Cavite'),
(25362, 967, 'Cogon'),
(25363, 967, 'Dapdap'),
(25364, 967, 'Divisoria'),
(25365, 967, 'Ekiran'),
(25366, 967, 'Hinapolan'),
(25367, 967, 'Hubang'),
(25368, 967, 'Hupit'),
(25369, 967, 'Langit'),
(25370, 967, 'Lingayon'),
(25371, 967, 'Lourdes'),
(25372, 967, 'Lukay'),
(25373, 967, 'Magsaysay'),
(25374, 967, 'Mudboron'),
(25375, 967, 'P. Barrantes'),
(25376, 967, 'Peñalosa'),
(25377, 967, 'Pepita'),
(25378, 967, 'Salvacion Poblacion'),
(25379, 967, 'San Antonio'),
(25380, 967, 'San Diego'),
(25381, 967, 'San Francisco East'),
(25382, 967, 'San Francisco West'),
(25383, 967, 'San Isidro'),
(25384, 967, 'San Pedro'),
(25385, 967, 'San Vicente'),
(25386, 967, 'Santiago'),
(25387, 967, 'Santo Niño (Pob.)'),
(25388, 967, 'Santol'),
(25389, 967, 'Tabangohay'),
(25390, 967, 'Tombo'),
(25391, 967, 'Veteranos'),
(25392, 967, 'Blumentritt (Pob.)'),
(25393, 967, 'Holy Child I (Pob.)'),
(25394, 967, 'Holy Child II (Pob.)'),
(25395, 967, 'Milagrosa (Pob.)'),
(25396, 967, 'San Antonio Pob.'),
(25397, 967, 'San Roque (Pob.)'),
(25398, 967, 'Salvacion'),
(25399, 968, 'Antipolo'),
(25400, 968, 'Balugo'),
(25401, 968, 'Benolho'),
(25402, 968, 'Cambalading'),
(25403, 968, 'Damula-an'),
(25404, 968, 'Doña Maria'),
(25405, 968, 'Mahayag'),
(25406, 968, 'Mahayahay'),
(25407, 968, 'Poblacion'),
(25408, 968, 'Salvacion'),
(25409, 968, 'San Pedro'),
(25410, 968, 'Seguinon'),
(25411, 968, 'Sherwood'),
(25412, 968, 'Tabgas'),
(25413, 968, 'Talisayan'),
(25414, 968, 'Tinag-an'),
(25415, 969, 'Biasong'),
(25416, 969, 'Gov. E. Jaro'),
(25417, 969, 'Malibago'),
(25418, 969, 'Magcasuang'),
(25419, 969, 'Planza'),
(25420, 969, 'Poblacion District I'),
(25421, 969, 'Poblacion District II'),
(25422, 969, 'Poblacion District III'),
(25423, 969, 'Poblacion District IV'),
(25424, 969, 'Rizal I'),
(25425, 969, 'San Ricardo'),
(25426, 969, 'Sangputan'),
(25427, 969, 'Pagsulhugon'),
(25428, 969, 'Taguite'),
(25429, 969, 'Uban'),
(25430, 969, 'Victory'),
(25431, 969, 'Villa Magsaysay'),
(25432, 969, 'Bacong'),
(25433, 969, 'Bagong Silang'),
(25434, 969, 'Lukay'),
(25435, 969, 'Rizal II'),
(25436, 969, 'San Agustin'),
(25437, 969, 'Guintigui-an'),
(25438, 969, 'Naga-asan'),
(25439, 969, 'San Isidro'),
(25440, 970, 'Abango'),
(25441, 970, 'Amahit'),
(25442, 970, 'Balire'),
(25443, 970, 'Balud'),
(25444, 970, 'Bukid'),
(25445, 970, 'Bulod'),
(25446, 970, 'Busay'),
(25447, 970, 'Cabolo-an'),
(25448, 970, 'Calingcaguing'),
(25449, 970, 'Can-isak'),
(25450, 970, 'Canomantag'),
(25451, 970, 'Duka'),
(25452, 970, 'Guindaohan'),
(25453, 970, 'Hiagsam'),
(25454, 970, 'Hilaba'),
(25455, 970, 'Hinugayan'),
(25456, 970, 'Ibag'),
(25457, 970, 'Minuhang'),
(25458, 970, 'Minuswang'),
(25459, 970, 'Pikas'),
(25460, 970, 'Pitogo'),
(25461, 970, 'Poblacion Dist. I'),
(25462, 970, 'Poblacion Dist. II'),
(25463, 970, 'Poblacion Dist. III'),
(25464, 970, 'Poblacion Dist. IV'),
(25465, 970, 'Poblacion Dist. V'),
(25466, 970, 'Poblacion Dist. VI'),
(25467, 970, 'Pongso'),
(25468, 970, 'Roosevelt'),
(25469, 970, 'San Isidro'),
(25470, 970, 'Santa Rosa'),
(25471, 970, 'Santarin'),
(25472, 970, 'Tutug-an'),
(25473, 970, 'Cabarasan'),
(25474, 970, 'Cuta'),
(25475, 970, 'Domogdog'),
(25476, 970, 'San Roque'),
(25477, 971, 'Alegria'),
(25478, 971, 'Alejos'),
(25479, 971, 'Amagos'),
(25480, 971, 'Anahawan'),
(25481, 971, 'Bago'),
(25482, 971, 'Bagong Bayan District (Pob.)'),
(25483, 971, 'Buli'),
(25484, 971, 'Cebuana'),
(25485, 971, 'Daan Lungsod'),
(25486, 971, 'Dawahon'),
(25487, 971, 'Himamaa'),
(25488, 971, 'Dolho'),
(25489, 971, 'Domagocdoc'),
(25490, 971, 'Guerrero District (Pob.)'),
(25491, 971, 'Iniguihan District (Pob.)'),
(25492, 971, 'Katipunan'),
(25493, 971, 'Liberty'),
(25494, 971, 'Mabini'),
(25495, 971, 'Naga'),
(25496, 971, 'Osmeña'),
(25497, 971, 'Plaridel'),
(25498, 971, 'Kalanggaman District (Pob.)'),
(25499, 971, 'Ponong'),
(25500, 971, 'San Agustin'),
(25501, 971, 'Santo Niño'),
(25502, 971, 'Tabunok'),
(25503, 971, 'Tagaytay'),
(25504, 971, 'Tinago District (Pob.)'),
(25505, 971, 'Tugas'),
(25506, 971, 'Imelda'),
(25507, 971, 'Marcelo'),
(25508, 971, 'Rivilla'),
(25509, 972, 'Altavista'),
(25510, 972, 'Ambacan'),
(25511, 972, 'Amguhan'),
(25512, 972, 'Ampihanon'),
(25513, 972, 'Balao'),
(25514, 972, 'Banahao'),
(25515, 972, 'Biasong'),
(25516, 972, 'Bidlinan'),
(25517, 972, 'Bitanhuan'),
(25518, 972, 'Bubon'),
(25519, 972, 'Buenavista'),
(25520, 972, 'Bunga'),
(25521, 972, 'Butigan'),
(25522, 972, 'Kabatuan'),
(25523, 972, 'Caridad'),
(25524, 972, 'Ga-as'),
(25525, 972, 'Gabas'),
(25526, 972, 'Gakat'),
(25527, 972, 'Guadalupe'),
(25528, 972, 'Gubang'),
(25529, 972, 'Hibunawan'),
(25530, 972, 'Higuloan'),
(25531, 972, 'Hilapnitan'),
(25532, 972, 'Hipusngo'),
(25533, 972, 'Igang'),
(25534, 972, 'Imelda'),
(25535, 972, 'Jaena'),
(25536, 972, 'Kabalasan'),
(25537, 972, 'Kabungaan'),
(25538, 972, 'Kagumay'),
(25539, 972, 'Kambonggan'),
(25540, 972, 'Candadam'),
(25541, 972, 'Kan-ipa'),
(25542, 972, 'Kansungka'),
(25543, 972, 'Kantagnos'),
(25544, 972, 'Kilim'),
(25545, 972, 'Lintaon'),
(25546, 972, 'Maganhan'),
(25547, 972, 'Mahayahay'),
(25548, 972, 'Mailhi'),
(25549, 972, 'Maitum'),
(25550, 972, 'Makinhas'),
(25551, 972, 'Mapgap'),
(25552, 972, 'Marcos'),
(25553, 972, 'Maslug'),
(25554, 972, 'Matam-is'),
(25555, 972, 'Maybog'),
(25556, 972, 'Maypatag'),
(25557, 972, 'Monterico'),
(25558, 972, 'Palhi'),
(25559, 972, 'Pangasungan'),
(25560, 972, 'Pansagan'),
(25561, 972, 'Patag'),
(25562, 972, 'Plaridel'),
(25563, 972, 'Poblacion Zone 2'),
(25564, 972, 'Poblacion Zone 3'),
(25565, 972, 'Poblacion Zone 4'),
(25566, 972, 'Poblacion Zone 5'),
(25567, 972, 'Poblacion Zone 6'),
(25568, 972, 'Poblacion Zone 7'),
(25569, 972, 'Poblacion Zone 8'),
(25570, 972, 'Poblacion Zone 9'),
(25571, 972, 'Poblacion Zone 10'),
(25572, 972, 'Poblacion Zone 11'),
(25573, 972, 'Poblacion Zone 12'),
(25574, 972, 'Poblacion Zone 13'),
(25575, 972, 'Poblacion Zone 14'),
(25576, 972, 'Poblacion Zone 15'),
(25577, 972, 'Poblacion Zone 16'),
(25578, 972, 'Poblacion Zone 17'),
(25579, 972, 'Poblacion Zone 18'),
(25580, 972, 'Poblacion Zone 19'),
(25581, 972, 'Poblacion Zone 20'),
(25582, 972, 'Poblacion Zone 21'),
(25583, 972, 'Poblacion Zone 22'),
(25584, 972, 'Poblacion Zone 23'),
(25585, 972, 'Pomponan'),
(25586, 972, 'Punta'),
(25587, 972, 'Sabang'),
(25588, 972, 'San Agustin'),
(25589, 972, 'San Isidro'),
(25590, 972, 'San Juan'),
(25591, 972, 'Santa Cruz'),
(25592, 972, 'Santo Rosario'),
(25593, 972, 'Sapa'),
(25594, 972, 'Ciabo'),
(25595, 972, 'Villa Solidaridad'),
(25596, 972, 'Zacarito'),
(25597, 972, 'Poblacion Zone 1'),
(25598, 972, 'Cogon'),
(25599, 972, 'Monte Verde'),
(25600, 972, 'Villa Mag-aso'),
(25601, 973, 'Abuyogon'),
(25602, 973, 'Anonang'),
(25603, 973, 'Arado'),
(25604, 973, 'Balao'),
(25605, 973, 'Balatson'),
(25606, 973, 'Balorinay'),
(25607, 973, 'Bobon'),
(25608, 973, 'Buenavista'),
(25609, 973, 'Buri'),
(25610, 973, 'Caanislagan'),
(25611, 973, 'Cadahunan'),
(25612, 973, 'Cagangon'),
(25613, 973, 'Cali'),
(25614, 973, 'Calsadahay'),
(25615, 973, 'Candag-on'),
(25616, 973, 'Cansiboy'),
(25617, 973, 'Catagbacan'),
(25618, 973, 'Poblacion District I'),
(25619, 973, 'Poblacion District II'),
(25620, 973, 'Poblacion District III'),
(25621, 973, 'Poblacion District IV'),
(25622, 973, 'Poblacion District V'),
(25623, 973, 'Poblacion District VI'),
(25624, 973, 'Poblacion District VII'),
(25625, 973, 'Poblacion District VIII'),
(25626, 973, 'Poblacion District IX'),
(25627, 973, 'Dumalag'),
(25628, 973, 'Ilihan'),
(25629, 973, 'Esperanza'),
(25630, 973, 'Gitablan'),
(25631, 973, 'Hapunan'),
(25632, 973, 'Hibonawan'),
(25633, 973, 'Hugpa East'),
(25634, 973, 'Hugpa West'),
(25635, 973, 'Kalao'),
(25636, 973, 'Kaparasanan'),
(25637, 973, 'Laguiwan'),
(25638, 973, 'Libas'),
(25639, 973, 'Limburan'),
(25640, 973, 'Logsongan'),
(25641, 973, 'Maabab'),
(25642, 973, 'Maghubas'),
(25643, 973, 'Mahagnao'),
(25644, 973, 'Malabca'),
(25645, 973, 'Malaguinabot'),
(25646, 973, 'Malaihao'),
(25647, 973, 'Matin-ao'),
(25648, 973, 'Moguing'),
(25649, 973, 'Paghudlan'),
(25650, 973, 'Paitan'),
(25651, 973, 'Pangdan'),
(25652, 973, 'Patag'),
(25653, 973, 'Patong'),
(25654, 973, 'Pawa'),
(25655, 973, 'Roxas'),
(25656, 973, 'Sambel'),
(25657, 973, 'San Esteban'),
(25658, 973, 'San Fernando'),
(25659, 973, 'San Jose East'),
(25660, 973, 'San Jose West'),
(25661, 973, 'San Pablo'),
(25662, 973, 'Tabuanon'),
(25663, 973, 'Tagadtaran'),
(25664, 973, 'Taghuyan'),
(25665, 973, 'Takin'),
(25666, 973, 'Tambis'),
(25667, 973, 'Toloyao'),
(25668, 973, 'Villa Aurora'),
(25669, 973, 'Villa Corazon'),
(25670, 973, 'Villa Patria'),
(25671, 973, 'Villa Rosas'),
(25672, 973, 'Kagbana'),
(25673, 973, 'Damulo-an'),
(25674, 973, 'Dina-ayan'),
(25675, 973, 'Gamay'),
(25676, 973, 'Kalipayan'),
(25677, 973, 'Tambuko'),
(25678, 974, 'Abanilla'),
(25679, 974, 'Agas'),
(25680, 974, 'Anislagan'),
(25681, 974, 'Bunacan'),
(25682, 974, 'Cabalquinto'),
(25683, 974, 'Cabalhin'),
(25684, 974, 'Cabradilla'),
(25685, 974, 'Caneja'),
(25686, 974, 'Cantonghao'),
(25687, 974, 'Caroyocan'),
(25688, 974, 'Casiongan'),
(25689, 974, 'Cristina'),
(25690, 974, 'Dalumpines'),
(25691, 974, 'Don Luis'),
(25692, 974, 'Dulao'),
(25693, 974, 'Efe'),
(25694, 974, 'Enage'),
(25695, 974, 'Espinosa'),
(25696, 974, 'Garganera'),
(25697, 974, 'Ferdinand E. Marcos'),
(25698, 974, 'Garrido'),
(25699, 974, 'Guadalupe'),
(25700, 974, 'Gutosan'),
(25701, 974, 'Igang'),
(25702, 974, 'Inalad'),
(25703, 974, 'Jubay'),
(25704, 974, 'Juson'),
(25705, 974, 'Kawayan Bogtong'),
(25706, 974, 'Kawayanan'),
(25707, 974, 'Kokoy Romualdez'),
(25708, 974, 'Labtic'),
(25709, 974, 'Laray'),
(25710, 974, 'M. Veloso'),
(25711, 974, 'Mahait'),
(25712, 974, 'Malobago'),
(25713, 974, 'Matagok'),
(25714, 974, 'Nipa'),
(25715, 974, 'Obispo'),
(25716, 974, 'Pagatpat'),
(25717, 974, 'Pangpang'),
(25718, 974, 'Patag'),
(25719, 974, 'Pates'),
(25720, 974, 'Paula'),
(25721, 974, 'Padoga'),
(25722, 974, 'Petrolio'),
(25723, 974, 'Poblacion'),
(25724, 974, 'Railes'),
(25725, 974, 'Tabla'),
(25726, 974, 'Tagharigue'),
(25727, 974, 'Tuburan'),
(25728, 974, 'Villahermosa'),
(25729, 974, 'Villalon'),
(25730, 974, 'Villanueva'),
(25731, 975, 'Balucanad'),
(25732, 975, 'Balud'),
(25733, 975, 'Balugo'),
(25734, 975, 'Cabul-an'),
(25735, 975, 'Gayad'),
(25736, 975, 'Culasian'),
(25737, 975, 'Guinadiongan'),
(25738, 975, 'Lemon'),
(25739, 975, 'Libertad'),
(25740, 975, 'Manloy'),
(25741, 975, 'Nauguisan'),
(25742, 975, 'Pinamopoan'),
(25743, 975, 'Poblacion Zone I'),
(25744, 975, 'Poblacion Zone II'),
(25745, 975, 'Potot'),
(25746, 975, 'San Joaquin'),
(25747, 975, 'Santo Niño'),
(25748, 975, 'Talairan'),
(25749, 975, 'Talisay'),
(25750, 975, 'Tolibao'),
(25751, 975, 'Visares'),
(25752, 976, 'Balilit'),
(25753, 976, 'Barayong'),
(25754, 976, 'Barugohay Central'),
(25755, 976, 'Barugohay Norte'),
(25756, 976, 'Barugohay Sur'),
(25757, 976, 'Baybay (Pob.)'),
(25758, 976, 'Binibihan'),
(25759, 976, 'Bislig'),
(25760, 976, 'Caghalo'),
(25761, 976, 'Camansi'),
(25762, 976, 'Canal'),
(25763, 976, 'Candigahub'),
(25764, 976, 'Canlampay'),
(25765, 976, 'Cogon'),
(25766, 976, 'Cutay'),
(25767, 976, 'East Visoria'),
(25768, 976, 'Guindapunan East'),
(25769, 976, 'Guindapunan West'),
(25770, 976, 'Hiluctogan'),
(25771, 976, 'Jugaban (Pob.)'),
(25772, 976, 'Libo'),
(25773, 976, 'Lower Hiraan'),
(25774, 976, 'Lower Sogod'),
(25775, 976, 'Macalpi'),
(25776, 976, 'Manloy'),
(25777, 976, 'Nauguisan'),
(25778, 976, 'Pangna'),
(25779, 976, 'Parag-um'),
(25780, 976, 'Parina'),
(25781, 976, 'Piloro'),
(25782, 976, 'Ponong (Pob.)'),
(25783, 976, 'Sagkahan'),
(25784, 976, 'San Mateo (Pob.)'),
(25785, 976, 'Santa Fe'),
(25786, 976, 'Sawang (Pob.)'),
(25787, 976, 'Tagak'),
(25788, 976, 'Tangnan'),
(25789, 976, 'Tigbao'),
(25790, 976, 'Tinaguban'),
(25791, 976, 'Upper Hiraan'),
(25792, 976, 'Upper Sogod'),
(25793, 976, 'Uyawan'),
(25794, 976, 'West Visoria'),
(25795, 976, 'Paglaum'),
(25796, 976, 'San Juan'),
(25797, 976, 'Bagong Lipunan'),
(25798, 976, 'Canfabi'),
(25799, 976, 'Rizal'),
(25800, 976, 'San Isidro'),
(25801, 977, 'Abaca'),
(25802, 977, 'Abre'),
(25803, 977, 'Balilit'),
(25804, 977, 'Banayon'),
(25805, 977, 'Bayabas'),
(25806, 977, 'Bolirao'),
(25807, 977, 'Buenavista'),
(25808, 977, 'Buntay'),
(25809, 977, 'Caanislagan'),
(25810, 977, 'Cabariwan'),
(25811, 977, 'Cabuloran'),
(25812, 977, 'Cabunga-an'),
(25813, 977, 'Calipayan'),
(25814, 977, 'Calsadahay'),
(25815, 977, 'Caluctogan'),
(25816, 977, 'Calutan'),
(25817, 977, 'Camono-an'),
(25818, 977, 'Candagara'),
(25819, 977, 'Canlingga'),
(25820, 977, 'Cansamada East'),
(25821, 977, 'Digahongan'),
(25822, 977, 'Guinarona'),
(25823, 977, 'Hiabangan'),
(25824, 977, 'Hilabago'),
(25825, 977, 'Hinabuyan'),
(25826, 977, 'Hinologan'),
(25827, 977, 'Hitumnog'),
(25828, 977, 'Katipunan'),
(25829, 977, 'Los Martires'),
(25830, 977, 'Lobe-lobe'),
(25831, 977, 'Macaalang'),
(25832, 977, 'Maliwaliw'),
(25833, 977, 'Maragondong'),
(25834, 977, 'Ormocay'),
(25835, 977, 'Palacio'),
(25836, 977, 'Panda'),
(25837, 977, 'Patoc'),
(25838, 977, 'Plaridel'),
(25839, 977, 'Sampao West Pob.'),
(25840, 977, 'Lapu-lapu Pob.'),
(25841, 977, 'Lusad Pob.'),
(25842, 977, 'Sampao East Pob.'),
(25843, 977, 'San Antonio Pob.'),
(25844, 977, 'San Jose Pob.'),
(25845, 977, 'Sta. Mesa Pob.'),
(25846, 977, 'Tunga Pob.'),
(25847, 977, 'San Roque Pob.'),
(25848, 977, 'Poponton'),
(25849, 977, 'Rizal'),
(25850, 977, 'Salvacion'),
(25851, 977, 'San Benito'),
(25852, 977, 'Santo Domingo'),
(25853, 977, 'Sirab'),
(25854, 977, 'Tagkip'),
(25855, 977, 'Tin-ao'),
(25856, 977, 'Victoria'),
(25857, 977, 'Balugo'),
(25858, 977, 'Cansamada West'),
(25859, 977, 'Capulhan'),
(25860, 977, 'Lobe-lobe East'),
(25861, 977, 'Paraiso'),
(25862, 977, 'Sampaguita'),
(25863, 977, 'Sawahon'),
(25864, 977, 'Talinhugon'),
(25865, 977, 'Tuya'),
(25866, 978, 'Alegre'),
(25867, 978, 'Arado'),
(25868, 978, 'Bulod'),
(25869, 978, 'Batug'),
(25870, 978, 'Bolongtohan'),
(25871, 978, 'Cabacungan'),
(25872, 978, 'Cabarasan'),
(25873, 978, 'Cabato-an'),
(25874, 978, 'Calipayan'),
(25875, 978, 'Calubian'),
(25876, 978, 'Camitoc'),
(25877, 978, 'Camote'),
(25878, 978, 'Dacay'),
(25879, 978, 'Del Carmen'),
(25880, 978, 'Del Pilar'),
(25881, 978, 'Fatima'),
(25882, 978, 'General Roxas'),
(25883, 978, 'Luan'),
(25884, 978, 'Magsaysay'),
(25885, 978, 'Maricum'),
(25886, 978, 'Barbo (Pob.)'),
(25887, 978, 'Buntay (Pob.)'),
(25888, 978, 'Cambula District (Pob.)'),
(25889, 978, 'Candao (Pob.)'),
(25890, 978, 'Catmonan (Pob.)'),
(25891, 978, 'Combis (Pob.)'),
(25892, 978, 'Highway (Pob.)'),
(25893, 978, 'Market Site (Pob.)'),
(25894, 978, 'San Miguel (Pob.)'),
(25895, 978, 'Serrano (Pob.)'),
(25896, 978, 'Sungi (Pob.)'),
(25897, 978, 'Rawis'),
(25898, 978, 'Rizal'),
(25899, 978, 'Romualdez'),
(25900, 978, 'Sabang Daguitan'),
(25901, 978, 'Salvacion'),
(25902, 978, 'San Agustin'),
(25903, 978, 'San Antonio'),
(25904, 978, 'San Isidro'),
(25905, 978, 'San Jose'),
(25906, 978, 'San Rafael'),
(25907, 978, 'San Vicente'),
(25908, 978, 'Tabu'),
(25909, 978, 'Tigbao'),
(25910, 978, 'Victory'),
(25911, 979, 'Agutayan');
INSERT INTO `table_barangay` (`barangay_id`, `municipality_id`, `barangay_name`) VALUES
(25912, 979, 'Atabay'),
(25913, 979, 'Baas'),
(25914, 979, 'Bagumbayan'),
(25915, 979, 'Baliw'),
(25916, 979, 'Bantigue'),
(25917, 979, 'Bung-aw'),
(25918, 979, 'Cacao'),
(25919, 979, 'Campina'),
(25920, 979, 'Catandog 1'),
(25921, 979, 'Catandog 2'),
(25922, 979, 'Concepcion'),
(25923, 979, 'Himo-aw'),
(25924, 979, 'Hitudpan'),
(25925, 979, 'Imelda Marcos'),
(25926, 979, 'Kang-iras'),
(25927, 979, 'Lamak'),
(25928, 979, 'Libertad'),
(25929, 979, 'Liberty'),
(25930, 979, 'Lunang'),
(25931, 979, 'Magnangoy'),
(25932, 979, 'Marangog'),
(25933, 979, 'Matapay'),
(25934, 979, 'Naval'),
(25935, 979, 'Owak'),
(25936, 979, 'Pa-a'),
(25937, 979, 'Central Barangay (Pob.)'),
(25938, 979, 'Eastern Barangay (Pob.)'),
(25939, 979, 'Western Barangay (Pob.)'),
(25940, 979, 'Pontod'),
(25941, 979, 'Proteccion'),
(25942, 979, 'San Agustin'),
(25943, 979, 'San Antonio'),
(25944, 979, 'San Isidro'),
(25945, 979, 'San Juan'),
(25946, 979, 'San Roque'),
(25947, 979, 'Santa Cruz'),
(25948, 979, 'Santa Margarita'),
(25949, 979, 'Santo Niño'),
(25950, 979, 'Tabunok'),
(25951, 979, 'Tagnate'),
(25952, 979, 'Talisay'),
(25953, 979, 'Tambis'),
(25954, 979, 'Tejero'),
(25955, 979, 'Tuguipa'),
(25956, 979, 'Utanan'),
(25957, 979, 'Bagong Lipunan'),
(25958, 979, 'Bon-ot'),
(25959, 979, 'Hampangan'),
(25960, 979, 'Kangha-as'),
(25961, 979, 'Manaul'),
(25962, 980, 'Anahaw'),
(25963, 980, 'Anolon'),
(25964, 980, 'Baldoza'),
(25965, 980, 'Bontoc'),
(25966, 980, 'Bulacan'),
(25967, 980, 'Canha-ayon'),
(25968, 980, 'Capudlosan'),
(25969, 980, 'Himacugo'),
(25970, 980, 'Doos Del Norte'),
(25971, 980, 'Doos Del Sur'),
(25972, 980, 'Himokilan Island'),
(25973, 980, 'Katipunan'),
(25974, 980, 'Maasin'),
(25975, 980, 'Mabagon'),
(25976, 980, 'Mahilum'),
(25977, 980, 'Poblacion 1'),
(25978, 980, 'Poblacion 2'),
(25979, 980, 'San Vicente'),
(25980, 980, 'Tabok'),
(25981, 980, 'Tagbibi'),
(25982, 981, 'Apid'),
(25983, 981, 'Cabulisan'),
(25984, 981, 'Caminto'),
(25985, 981, 'Can-angay'),
(25986, 981, 'Caulisihan'),
(25987, 981, 'Conalum'),
(25988, 981, 'De los Santos'),
(25989, 981, 'Esperanza'),
(25990, 981, 'Guadalupe'),
(25991, 981, 'Guinsanga-an'),
(25992, 981, 'Hinabay'),
(25993, 981, 'Jubasan'),
(25994, 981, 'Linao'),
(25995, 981, 'Macagoco'),
(25996, 981, 'Maljo'),
(25997, 981, 'Marao'),
(25998, 981, 'Poblacion'),
(25999, 981, 'Tahud'),
(26000, 981, 'Taotaon'),
(26001, 981, 'Tinago'),
(26002, 982, 'Anislag'),
(26003, 982, 'Antipolo'),
(26004, 982, 'Apale'),
(26005, 982, 'Bantigue'),
(26006, 982, 'Benog'),
(26007, 982, 'Bilwang'),
(26008, 982, 'Can-andan'),
(26009, 982, 'Cangag'),
(26010, 982, 'Consolacion'),
(26011, 982, 'Honan'),
(26012, 982, 'Libertad'),
(26013, 982, 'Mahayag'),
(26014, 982, 'Marvel (Pob.)'),
(26015, 982, 'Matlang'),
(26016, 982, 'Monte Alegre'),
(26017, 982, 'Puting Bato'),
(26018, 982, 'San Francisco'),
(26019, 982, 'San Roque'),
(26020, 982, 'Santa Cruz'),
(26021, 982, 'Santo Niño (Pob.)'),
(26022, 982, 'Santo Rosario'),
(26023, 982, 'Tabunok'),
(26024, 982, 'Tolingon'),
(26025, 982, 'Tubod'),
(26026, 983, 'Alahag'),
(26027, 983, 'Anibongan'),
(26028, 983, 'Badiang'),
(26029, 983, 'Batug'),
(26030, 983, 'Buenavista'),
(26031, 983, 'Bukid'),
(26032, 983, 'Burabod'),
(26033, 983, 'Buri'),
(26034, 983, 'Kaglawaan'),
(26035, 983, 'Canhandugan'),
(26036, 983, 'Crossing Rubas'),
(26037, 983, 'Daro'),
(26038, 983, 'Hiagsam'),
(26039, 983, 'Hibunawon'),
(26040, 983, 'Hibucawan'),
(26041, 983, 'Kalinawan'),
(26042, 983, 'Likod'),
(26043, 983, 'Macanip'),
(26044, 983, 'Macopa'),
(26045, 983, 'Mag-aso'),
(26046, 983, 'Malobago'),
(26047, 983, 'Olotan'),
(26048, 983, 'Pange'),
(26049, 983, 'Parasan'),
(26050, 983, 'Pitogo'),
(26051, 983, 'District I (Pob.)'),
(26052, 983, 'District II (Pob.)'),
(26053, 983, 'District III (Pob.)'),
(26054, 983, 'District IV (Pob.)'),
(26055, 983, 'Sagkahan'),
(26056, 983, 'San Agustin'),
(26057, 983, 'San Pedro'),
(26058, 983, 'San Roque'),
(26059, 983, 'Santa Cruz'),
(26060, 983, 'Santo Niño'),
(26061, 983, 'Sari-sari'),
(26062, 983, 'Tinambacan'),
(26063, 983, 'Tuba'),
(26064, 983, 'Uguiao'),
(26065, 983, 'Villagonzoilo'),
(26066, 983, 'Villa Paz'),
(26067, 983, 'Bias Zabala'),
(26068, 983, 'Atipolo'),
(26069, 983, 'Canapuan'),
(26070, 983, 'La Paz'),
(26071, 983, 'Palanog'),
(26072, 984, 'Abuyogay'),
(26073, 984, 'Andres Bonifacio'),
(26074, 984, 'Batug'),
(26075, 984, 'Binulho'),
(26076, 984, 'Calzada'),
(26077, 984, 'Cancayang'),
(26078, 984, 'Caranhug'),
(26079, 984, 'Caraye'),
(26080, 984, 'Casalungan'),
(26081, 984, 'Comatin'),
(26082, 984, 'Guindapunan'),
(26083, 984, 'Inayupan'),
(26084, 984, 'Laray'),
(26085, 984, 'Magsaysay'),
(26086, 984, 'Malitbogay'),
(26087, 984, 'Manarug'),
(26088, 984, 'Manlilisid'),
(26089, 984, 'Naliwatan'),
(26090, 984, 'Odiong'),
(26091, 984, 'Picas Norte'),
(26092, 984, 'Pinocawan'),
(26093, 984, 'Poblacion Zone 1'),
(26094, 984, 'Poblacion Zone 2'),
(26095, 984, 'Rizal'),
(26096, 984, 'Santa Cruz'),
(26097, 984, 'Talisayan'),
(26098, 984, 'San Sotero'),
(26099, 984, 'Ulhay'),
(26100, 985, 'Alegria'),
(26101, 985, 'Anibong'),
(26102, 985, 'Aslum'),
(26103, 985, 'Balante'),
(26104, 985, 'Bongdo'),
(26105, 985, 'Bonifacio'),
(26106, 985, 'Bugho'),
(26107, 985, 'Calbasag'),
(26108, 985, 'Caridad'),
(26109, 985, 'Cuya-e'),
(26110, 985, 'Dita'),
(26111, 985, 'Gitabla'),
(26112, 985, 'Hindang'),
(26113, 985, 'Inawangan'),
(26114, 985, 'Jurao'),
(26115, 985, 'Poblacion District I'),
(26116, 985, 'Poblacion District II'),
(26117, 985, 'Poblacion District III'),
(26118, 985, 'Poblacion District IV'),
(26119, 985, 'San Andres'),
(26120, 985, 'San Pablo'),
(26121, 985, 'Santa Cruz'),
(26122, 985, 'Santo Niño'),
(26123, 985, 'Tagkip'),
(26124, 985, 'Tolosahay'),
(26125, 985, 'Villa Hermosa'),
(26126, 986, 'Aguiting'),
(26127, 986, 'Cacao'),
(26128, 986, 'Kawayan'),
(26129, 986, 'Hiluctogan'),
(26130, 986, 'Libertad'),
(26131, 986, 'Libongao'),
(26132, 986, 'Lim-ao'),
(26133, 986, 'Lonoy'),
(26134, 986, 'Mahawan'),
(26135, 986, 'Masarayao'),
(26136, 986, 'Monte Alegre'),
(26137, 986, 'Monte Bello'),
(26138, 986, 'Naghalin'),
(26139, 986, 'Natubgan'),
(26140, 986, 'Poblacion'),
(26141, 986, 'Rizal'),
(26142, 986, 'San Ignacio'),
(26143, 986, 'San Isidro'),
(26144, 986, 'Santo Domingo'),
(26145, 986, 'Santo Niño'),
(26146, 986, 'Tagaytay'),
(26147, 986, 'Tongonan'),
(26148, 986, 'Tugbong'),
(26149, 987, 'Bagacay East'),
(26150, 987, 'Bagacay West'),
(26151, 987, 'Bongtod'),
(26152, 987, 'Bocawon'),
(26153, 987, 'Buracan'),
(26154, 987, 'Caabangan'),
(26155, 987, 'Cacao'),
(26156, 987, 'Cagngaran'),
(26157, 987, 'Calabnian'),
(26158, 987, 'Calaghusan'),
(26159, 987, 'Caltayan'),
(26160, 987, 'Canbañez'),
(26161, 987, 'Cogon'),
(26162, 987, 'Duyog'),
(26163, 987, 'Gimenarat East'),
(26164, 987, 'Gimenarat West'),
(26165, 987, 'Limba'),
(26166, 987, 'Lubi-lubi'),
(26167, 987, 'Luneta'),
(26168, 987, 'Mag-aso'),
(26169, 987, 'Moroboro'),
(26170, 987, 'Pansud'),
(26171, 987, 'Pawa'),
(26172, 987, 'Piliway'),
(26173, 987, 'Poblacion District 1'),
(26174, 987, 'Poblacion District 2'),
(26175, 987, 'Poblacion District 3'),
(26176, 987, 'Poblacion District 4'),
(26177, 987, 'Quiong'),
(26178, 987, 'Rizal'),
(26179, 987, 'San Victoray'),
(26180, 987, 'Santa Ana'),
(26181, 987, 'Santa Elena'),
(26182, 987, 'Tabang'),
(26183, 987, 'Tarugan'),
(26184, 988, 'Bachao'),
(26185, 988, 'Baco'),
(26186, 988, 'Bagaba-o'),
(26187, 988, 'Basud'),
(26188, 988, 'Belen'),
(26189, 988, 'Burabod'),
(26190, 988, 'Calaguise'),
(26191, 988, 'Consuegra'),
(26192, 988, 'Culasi'),
(26193, 988, 'Danus'),
(26194, 988, 'Elizabeth'),
(26195, 988, 'Kawayan'),
(26196, 988, 'Libas'),
(26197, 988, 'Maanda'),
(26198, 988, 'Macupa'),
(26199, 988, 'Mataloto'),
(26200, 988, 'Palarao'),
(26201, 988, 'Palid I'),
(26202, 988, 'Palid II'),
(26203, 988, 'Parasan'),
(26204, 988, 'Poblacion'),
(26205, 988, 'Salog'),
(26206, 988, 'Sambulawan'),
(26207, 988, 'Tag-abaca'),
(26208, 988, 'Tapol'),
(26209, 988, 'Tigbawan'),
(26210, 988, 'Tinocdugan'),
(26211, 988, 'Toctoc'),
(26212, 988, 'Ugbon'),
(26213, 988, 'Wague'),
(26214, 989, 'Batug'),
(26215, 989, 'Burabod'),
(26216, 989, 'Capudlosan'),
(26217, 989, 'Casuntingan'),
(26218, 989, 'Causwagan'),
(26219, 989, 'Danao'),
(26220, 989, 'General Luna'),
(26221, 989, 'Kiling'),
(26222, 989, 'Lanawan'),
(26223, 989, 'Liwayway'),
(26224, 989, 'Maya'),
(26225, 989, 'Oguisan'),
(26226, 989, 'Osmeña'),
(26227, 989, 'Palale 1'),
(26228, 989, 'Palale 2'),
(26229, 989, 'Poblacion District 1'),
(26230, 989, 'Poblacion District 2'),
(26231, 989, 'Poblacion District 3'),
(26232, 989, 'Pongon'),
(26233, 989, 'Quezon'),
(26234, 989, 'Romualdez'),
(26235, 989, 'Salvacion'),
(26236, 989, 'San Antonio'),
(26237, 989, 'San Isidro'),
(26238, 989, 'San Pedro'),
(26239, 989, 'San Vicente'),
(26240, 989, 'Santa Isabel'),
(26241, 989, 'Tinawan'),
(26242, 989, 'Tuyo'),
(26243, 989, 'Doña Josefa'),
(26244, 989, 'Villa Imelda'),
(26245, 990, 'Campin'),
(26246, 990, 'Cuatro De Agosto'),
(26247, 990, 'Hilusig'),
(26248, 990, 'Himamara'),
(26249, 990, 'Hinaguimitan'),
(26250, 990, 'Liberacion'),
(26251, 990, 'Mabuhay'),
(26252, 990, 'Mabunga'),
(26253, 990, 'Magsuganao'),
(26254, 990, 'Mahayag'),
(26255, 990, 'Mahayahay'),
(26256, 990, 'Malinao'),
(26257, 990, 'Malipoon'),
(26258, 990, 'Palañogan'),
(26259, 990, 'Paril'),
(26260, 990, 'Pinamonoan'),
(26261, 990, 'Poblacion'),
(26262, 990, 'Polahongon'),
(26263, 990, 'San Isidro'),
(26264, 990, 'San Juan'),
(26265, 990, 'Santa Cruz'),
(26266, 990, 'Tagaytay'),
(26267, 990, 'Uguis'),
(26268, 990, 'Union'),
(26269, 990, 'Upper Mahaplag'),
(26270, 990, 'Hiluctogan'),
(26271, 990, 'Maligaya'),
(26272, 990, 'Santo Niño'),
(26273, 991, 'Balagtas'),
(26274, 991, 'Bulak'),
(26275, 991, 'Cambadbad'),
(26276, 991, 'Candelaria'),
(26277, 991, 'Cansoso'),
(26278, 991, 'Mansahaon'),
(26279, 991, 'Masaba'),
(26280, 991, 'Naulayan'),
(26281, 991, 'Bonoy (Pob.)'),
(26282, 991, 'Mansalip (Pob.)'),
(26283, 991, 'Riverside (Pob.)'),
(26284, 991, 'Talisay (Pob.)'),
(26285, 991, 'San Dionisio'),
(26286, 991, 'San Marcelino'),
(26287, 991, 'San Sebastian'),
(26288, 991, 'San Vicente'),
(26289, 991, 'Santa Rosa'),
(26290, 991, 'Santo Rosario'),
(26291, 991, 'Imelda'),
(26292, 991, 'Malazarte'),
(26293, 991, 'San Guillermo'),
(26294, 992, 'Agbanga'),
(26295, 992, 'Altavista'),
(26296, 992, 'Cahagnaan'),
(26297, 992, 'Calumpang'),
(26298, 992, 'Caningag'),
(26299, 992, 'Caridad Norte'),
(26300, 992, 'Caridad Sur'),
(26301, 992, 'Elevado'),
(26302, 992, 'Esperanza'),
(26303, 992, 'Hitoog'),
(26304, 992, 'Itum'),
(26305, 992, 'Lowan'),
(26306, 992, 'Monte Alegre'),
(26307, 992, 'San Isidro (Pob.)'),
(26308, 992, 'San Pedro (Pob.)'),
(26309, 992, 'Santo Niño (Pob.)'),
(26310, 992, 'President Garcia'),
(26311, 992, 'Punong'),
(26312, 992, 'San Juan'),
(26313, 992, 'San Salvador'),
(26314, 992, 'San Vicente'),
(26315, 992, 'Santa Fe'),
(26316, 992, 'Santa Paz'),
(26317, 992, 'Tag-os'),
(26318, 992, 'Templanza'),
(26319, 992, 'Tigbao'),
(26320, 992, 'Waterloo'),
(26321, 992, 'Zaragoza'),
(26322, 992, 'Bagong Lipunan'),
(26323, 992, 'Taglibas Imelda'),
(26324, 993, 'A. Bonifacio'),
(26325, 993, 'Mabini'),
(26326, 993, 'Burgos'),
(26327, 993, 'Calipayan'),
(26328, 993, 'Camansi'),
(26329, 993, 'General Antonio Luna'),
(26330, 993, 'Liberty'),
(26331, 993, 'Ormocay'),
(26332, 993, 'Poblacion Zone 1'),
(26333, 993, 'Poblacion Zone 2'),
(26334, 993, 'Poblacion Zone 3'),
(26335, 993, 'San Roque'),
(26336, 993, 'Santa Cruz'),
(26337, 993, 'Talisay'),
(26338, 993, 'Union'),
(26339, 993, 'Wilson'),
(26340, 994, 'Binabaye'),
(26341, 994, 'Cabaliwan'),
(26342, 994, 'Calunangan'),
(26343, 994, 'Calunasan'),
(26344, 994, 'Cambalong'),
(26345, 994, 'Can-unzo'),
(26346, 994, 'Canbantug'),
(26347, 994, 'Casilda'),
(26348, 994, 'Lamanoc'),
(26349, 994, 'Libas'),
(26350, 994, 'Libjo'),
(26351, 994, 'Lundag'),
(26352, 994, 'Mahalit'),
(26353, 994, 'Mahayag'),
(26354, 994, 'Masumbang'),
(26355, 994, 'Poblacion'),
(26356, 994, 'Puerto Bello'),
(26357, 994, 'San Isidro'),
(26358, 994, 'San Jose'),
(26359, 994, 'Macario'),
(26360, 994, 'Tubod'),
(26361, 994, 'Mat-e'),
(26362, 995, 'Alegria'),
(26363, 995, 'Bagong'),
(26364, 995, 'Labrador'),
(26365, 995, 'Bantigue'),
(26366, 995, 'Batuan'),
(26367, 995, 'Biliboy'),
(26368, 995, 'Borok'),
(26369, 995, 'Cabaon-an'),
(26370, 995, 'Cabulihan'),
(26371, 995, 'Cagbuhangin'),
(26372, 995, 'Can-adieng'),
(26373, 995, 'Can-untog'),
(26374, 995, 'Catmon'),
(26375, 995, 'Cogon Combado'),
(26376, 995, 'Concepcion'),
(26377, 995, 'Curva'),
(26378, 995, 'Danao'),
(26379, 995, 'Dayhagan'),
(26380, 995, 'Barangay 1 (Pob.)'),
(26381, 995, 'Barangay 10 (Pob.)'),
(26382, 995, 'Barangay 11 (Pob.)'),
(26383, 995, 'Barangay 12 (Pob.)'),
(26384, 995, 'Barangay 13 (Pob.)'),
(26385, 995, 'Barangay 14 (Pob.)'),
(26386, 995, 'Barangay 15 (Pob.)'),
(26387, 995, 'Barangay 16 (Pob.)'),
(26388, 995, 'Barangay 17 (Pob.)'),
(26389, 995, 'Barangay 18 (Pob.)'),
(26390, 995, 'Barangay 19 (Pob.)'),
(26391, 995, 'Barangay 2 (Pob.)'),
(26392, 995, 'Barangay 20 (Pob.)'),
(26393, 995, 'Barangay 21 (Pob.)'),
(26394, 995, 'Barangay 22 (Pob.)'),
(26395, 995, 'Barangay 23 (Pob.)'),
(26396, 995, 'Barangay 24 (Pob.)'),
(26397, 995, 'Barangay 25 (Pob.)'),
(26398, 995, 'Barangay 26 (Pob.)'),
(26399, 995, 'Barangay 27 (Pob.)'),
(26400, 995, 'Barangay 28 (Pob.)'),
(26401, 995, 'Barangay 3 (Pob.)'),
(26402, 995, 'Barangay 4 (Pob.)'),
(26403, 995, 'Barangay 5 (Pob.)'),
(26404, 995, 'Barangay 6 (Pob.)'),
(26405, 995, 'Barangay 7 (Pob.)'),
(26406, 995, 'Barangay 8 (Pob.)'),
(26407, 995, 'Barangay 9 (Pob.)'),
(26408, 995, 'Dolores'),
(26409, 995, 'Domonar'),
(26410, 995, 'Don Felipe Larrazabal'),
(26411, 995, 'Donghol'),
(26412, 995, 'Esperanza'),
(26413, 995, 'Hibunawon'),
(26414, 995, 'Hugpa'),
(26415, 995, 'Ipil'),
(26416, 995, 'Lao'),
(26417, 995, 'Libertad'),
(26418, 995, 'Liloan'),
(26419, 995, 'Linao'),
(26420, 995, 'Mabini'),
(26421, 995, 'Macabug'),
(26422, 995, 'Magaswi'),
(26423, 995, 'Mahayag'),
(26424, 995, 'Mahayahay'),
(26425, 995, 'Manlilinao'),
(26426, 995, 'Margen'),
(26427, 995, 'Mas-in'),
(26428, 995, 'Matica-a'),
(26429, 995, 'Milagro'),
(26430, 995, 'Monterico'),
(26431, 995, 'Nasunogan'),
(26432, 995, 'Naungan'),
(26433, 995, 'Nueva Vista'),
(26434, 995, 'Patag'),
(26435, 995, 'Punta'),
(26436, 995, 'Quezon, Jr.'),
(26437, 995, 'Rufina M. Tan'),
(26438, 995, 'Sabang Bao'),
(26439, 995, 'Salvacion'),
(26440, 995, 'San Antonio'),
(26441, 995, 'San Isidro'),
(26442, 995, 'San Jose'),
(26443, 995, 'San Juan'),
(26444, 995, 'San Vicente'),
(26445, 995, 'Santo Niño'),
(26446, 995, 'San Pablo'),
(26447, 995, 'Sumangga'),
(26448, 995, 'Valencia'),
(26449, 995, 'Barangay 29 (Pob.)'),
(26450, 995, 'Airport'),
(26451, 995, 'Cabintan'),
(26452, 995, 'Camp Downes'),
(26453, 995, 'Gaas'),
(26454, 995, 'Green Valley'),
(26455, 995, 'Licuma'),
(26456, 995, 'Liberty'),
(26457, 995, 'Leondoni'),
(26458, 995, 'Nueva Sociedad'),
(26459, 995, 'Tambulilid'),
(26460, 995, 'Tongonan'),
(26461, 995, 'Don Potenciano Larrazabal'),
(26462, 995, 'Kadaohan'),
(26463, 995, 'Guintigui-an'),
(26464, 995, 'Danhug'),
(26465, 995, 'Alta Vista'),
(26466, 995, 'Bagong Buhay'),
(26467, 995, 'Bayog'),
(26468, 995, 'Doña Feliza Z. Mejia'),
(26469, 995, 'Juaton'),
(26470, 995, 'Luna'),
(26471, 995, 'Mabato'),
(26472, 996, 'Anahaway'),
(26473, 996, 'Arado'),
(26474, 996, 'Baras'),
(26475, 996, 'Barayong'),
(26476, 996, 'Cabarasan Daku'),
(26477, 996, 'Cabarasan Guti'),
(26478, 996, 'Campetik'),
(26479, 996, 'Candahug'),
(26480, 996, 'Cangumbang'),
(26481, 996, 'Canhidoc'),
(26482, 996, 'Capirawan'),
(26483, 996, 'Castilla'),
(26484, 996, 'Cogon'),
(26485, 996, 'Gacao'),
(26486, 996, 'Guindapunan'),
(26487, 996, 'Libertad'),
(26488, 996, 'Naga-naga'),
(26489, 996, 'Pawing'),
(26490, 996, 'Buri (Pob.)'),
(26491, 996, 'Cavite East (Pob.)'),
(26492, 996, 'Cavite West (Pob.)'),
(26493, 996, 'Luntad (Pob.)'),
(26494, 996, 'Santa Cruz (Pob.)'),
(26495, 996, 'Salvacion'),
(26496, 996, 'San Agustin'),
(26497, 996, 'San Antonio'),
(26498, 996, 'San Isidro'),
(26499, 996, 'San Joaquin'),
(26500, 996, 'San Jose'),
(26501, 996, 'San Miguel (Pob.)'),
(26502, 996, 'Tacuranga'),
(26503, 996, 'Teraza'),
(26504, 996, 'San Fernando'),
(26505, 997, 'Baguinbin'),
(26506, 997, 'Belen'),
(26507, 997, 'Buenavista'),
(26508, 997, 'Caduhaan'),
(26509, 997, 'Cambakbak'),
(26510, 997, 'Cambinoy'),
(26511, 997, 'Cangcosme'),
(26512, 997, 'Cangmuya'),
(26513, 997, 'Canipaan'),
(26514, 997, 'Cantandoy'),
(26515, 997, 'Cantuhaon'),
(26516, 997, 'Catigahan'),
(26517, 997, 'Cruz'),
(26518, 997, 'Duljugan'),
(26519, 997, 'Guiwan 1 (Pob.)'),
(26520, 997, 'Guiwan 2 (Pob.)'),
(26521, 997, 'Himarco'),
(26522, 997, 'Hinagbuan'),
(26523, 997, 'Lat-osan'),
(26524, 997, 'Liberty'),
(26525, 997, 'Mazawalo Pob.'),
(26526, 997, 'Lomonon'),
(26527, 997, 'Mabini'),
(26528, 997, 'Magsaysay'),
(26529, 997, 'Masaba'),
(26530, 997, 'Parilla'),
(26531, 997, 'Plaridel'),
(26532, 997, 'Central 1 (Pob.)'),
(26533, 997, 'Central 2 (Pob.)'),
(26534, 997, 'Hinablayan Pob.'),
(26535, 997, 'Rizal'),
(26536, 997, 'Sabang'),
(26537, 997, 'San Guillermo'),
(26538, 997, 'San Isidro'),
(26539, 997, 'San Joaquin'),
(26540, 997, 'San Juan'),
(26541, 997, 'San Miguel'),
(26542, 997, 'San Pablo'),
(26543, 997, 'San Pedro'),
(26544, 997, 'San Roque'),
(26545, 997, 'Santiago'),
(26546, 997, 'Taberna'),
(26547, 997, 'Tabunok'),
(26548, 997, 'Tambis'),
(26549, 997, 'Tinabilan'),
(26550, 997, 'Tinago'),
(26551, 997, 'Tinubdan'),
(26552, 997, 'Pinagdait Pob.'),
(26553, 997, 'Pinaghi-usa Pob.'),
(26554, 997, 'Bitaog Pob.'),
(26555, 998, 'Arabunog'),
(26556, 998, 'Aringit'),
(26557, 998, 'Bahay'),
(26558, 998, 'Cabaohan'),
(26559, 998, 'Calsadahay'),
(26560, 998, 'Cancaraja'),
(26561, 998, 'Caninoan'),
(26562, 998, 'Capilla'),
(26563, 998, 'Colawen'),
(26564, 998, 'Dumarag'),
(26565, 998, 'Guindapunan'),
(26566, 998, 'Halaba'),
(26567, 998, 'Jones'),
(26568, 998, 'Lanawan'),
(26569, 998, 'Lima'),
(26570, 998, 'Macalpiay'),
(26571, 998, 'Malitbogay'),
(26572, 998, 'Manaybanay'),
(26573, 998, 'Maricum'),
(26574, 998, 'Patong'),
(26575, 998, 'District 1 (Pob.)'),
(26576, 998, 'District 2 (Pob.)'),
(26577, 998, 'District 3 (Pob.)'),
(26578, 998, 'District 4 (Pob.)'),
(26579, 998, 'Sapsap'),
(26580, 998, 'Socsocon'),
(26581, 998, 'Tingib'),
(26582, 998, 'Yapad'),
(26583, 998, 'Lourdes'),
(26584, 999, 'Banat-e'),
(26585, 999, 'Basud'),
(26586, 999, 'Bawod (Pob.)'),
(26587, 999, 'Biasong'),
(26588, 999, 'Bunacan'),
(26589, 999, 'Cabungaan'),
(26590, 999, 'Capiñahan (Pob.)'),
(26591, 999, 'Crossing (Pob.)'),
(26592, 999, 'Daja-daku'),
(26593, 999, 'Daja-diot'),
(26594, 999, 'Hacienda Maria'),
(26595, 999, 'Linao'),
(26596, 999, 'Matungao'),
(26597, 999, 'Paril'),
(26598, 999, 'San Jose'),
(26599, 999, 'Taglawigan'),
(26600, 999, 'Tinago'),
(26601, 999, 'Busay'),
(26602, 999, 'San Miguel'),
(26603, 1000, 'Bagacay'),
(26604, 1000, 'Bahay'),
(26605, 1000, 'Bairan'),
(26606, 1000, 'Cabatianuhan'),
(26607, 1000, 'Canap'),
(26608, 1000, 'Capilihan'),
(26609, 1000, 'Caraycaray'),
(26610, 1000, 'Libtong'),
(26611, 1000, 'Guinciaman'),
(26612, 1000, 'Impo'),
(26613, 1000, 'Kinalumsan'),
(26614, 1000, 'Lukay'),
(26615, 1000, 'Malaguinabot'),
(26616, 1000, 'Malpag'),
(26617, 1000, 'Mawodpawod'),
(26618, 1000, 'Patong'),
(26619, 1000, 'Pinarigusan'),
(26620, 1000, 'San Andres'),
(26621, 1000, 'Santa Cruz'),
(26622, 1000, 'Santol'),
(26623, 1000, 'Cayare'),
(26624, 1001, 'Baculanad'),
(26625, 1001, 'Badiangay'),
(26626, 1001, 'Bulod'),
(26627, 1001, 'Catoogan'),
(26628, 1001, 'Katipunan'),
(26629, 1001, 'Milagrosa'),
(26630, 1001, 'Pilit'),
(26631, 1001, 'Pitogo'),
(26632, 1001, 'Zone 1 (Pob.)'),
(26633, 1001, 'Zone 2 (Pob.)'),
(26634, 1001, 'Zone 3 (Pob.)'),
(26635, 1001, 'San Isidro'),
(26636, 1001, 'San Juan'),
(26637, 1001, 'San Miguelay'),
(26638, 1001, 'San Roque'),
(26639, 1001, 'Tibak'),
(26640, 1001, 'Victoria'),
(26641, 1001, 'Cutay'),
(26642, 1001, 'Gapas'),
(26643, 1001, 'Zone 4 Pob.'),
(26644, 1002, 'Butason I'),
(26645, 1002, 'Butason II'),
(26646, 1002, 'Campokpok'),
(26647, 1002, 'Catmon'),
(26648, 1002, 'Gimarco'),
(26649, 1002, 'Gibacungan'),
(26650, 1002, 'Inangatan'),
(26651, 1002, 'Manlawaan'),
(26652, 1002, 'Omaganhan'),
(26653, 1002, 'Poblacion'),
(26654, 1002, 'Santa Rosa'),
(26655, 1002, 'Tabing'),
(26656, 1002, 'Tugas'),
(26657, 1003, 'Amandangay'),
(26658, 1003, 'Aslum'),
(26659, 1003, 'Balingasag'),
(26660, 1003, 'Belisong'),
(26661, 1003, 'Cambucao'),
(26662, 1003, 'Capahuan'),
(26663, 1003, 'Guingawan'),
(26664, 1003, 'Jabong'),
(26665, 1003, 'Mercadohay'),
(26666, 1003, 'Mering'),
(26667, 1003, 'Mohon'),
(26668, 1003, 'District I Pob.'),
(26669, 1003, 'District II Pob.'),
(26670, 1003, 'District III Pob.'),
(26671, 1003, 'District IV Pob.'),
(26672, 1003, 'San Pablo'),
(26673, 1004, 'Barangay 2'),
(26674, 1004, 'Nula-tula'),
(26675, 1004, 'Libertad'),
(26676, 1004, 'Barangay 5'),
(26677, 1004, 'Barangay 6'),
(26678, 1004, 'Barangay 6-A'),
(26679, 1004, 'Barangay 7'),
(26680, 1004, 'Barangay 8'),
(26681, 1004, 'Barangay 100'),
(26682, 1004, 'Barangay 101'),
(26683, 1004, 'Barangay 102'),
(26684, 1004, 'Barangay 103'),
(26685, 1004, 'Barangay 103-A'),
(26686, 1004, 'Barangay 104'),
(26687, 1004, 'Barangay 105'),
(26688, 1004, 'Barangay 106'),
(26689, 1004, 'Barangay 107'),
(26690, 1004, 'Barangay 108'),
(26691, 1004, 'Barangay 12'),
(26692, 1004, 'Barangay 13'),
(26693, 1004, 'Barangay 14'),
(26694, 1004, 'Barangay 15'),
(26695, 1004, 'Barangay 16'),
(26696, 1004, 'Barangay 17'),
(26697, 1004, 'Barangay 18'),
(26698, 1004, 'Barangay 19'),
(26699, 1004, 'Barangay 20'),
(26700, 1004, 'Barangay 21'),
(26701, 1004, 'Barangay 21-A'),
(26702, 1004, 'Barangay 22'),
(26703, 1004, 'Barangay 23'),
(26704, 1004, 'Barangay 24'),
(26705, 1004, 'Barangay 25'),
(26706, 1004, 'Barangay 26'),
(26707, 1004, 'Barangay 27'),
(26708, 1004, 'Barangay 28'),
(26709, 1004, 'Barangay 29'),
(26710, 1004, 'Barangay 30'),
(26711, 1004, 'Barangay 31'),
(26712, 1004, 'Barangay 32'),
(26713, 1004, 'Barangay 33'),
(26714, 1004, 'Barangay 34'),
(26715, 1004, 'Barangay 35'),
(26716, 1004, 'Barangay 35-A'),
(26717, 1004, 'Barangay 36'),
(26718, 1004, 'Barangay 37'),
(26719, 1004, 'Barangay 37-A'),
(26720, 1004, 'Barangay 38'),
(26721, 1004, 'Barangay 39'),
(26722, 1004, 'Barangay 40'),
(26723, 1004, 'Barangay 41'),
(26724, 1004, 'Barangay 42'),
(26725, 1004, 'Barangay 43'),
(26726, 1004, 'Barangay 43-A'),
(26727, 1004, 'Barangay 43-B'),
(26728, 1004, 'Barangay 44'),
(26729, 1004, 'Barangay 44-A'),
(26730, 1004, 'Barangay 45'),
(26731, 1004, 'Barangay 46'),
(26732, 1004, 'Barangay 47'),
(26733, 1004, 'Barangay 48'),
(26734, 1004, 'Barangay 49'),
(26735, 1004, 'Barangay 50'),
(26736, 1004, 'Barangay 50-A'),
(26737, 1004, 'Barangay 50-B'),
(26738, 1004, 'Barangay 51'),
(26739, 1004, 'Barangay 52'),
(26740, 1004, 'Barangay 53'),
(26741, 1004, 'Barangay 54'),
(26742, 1004, 'El Reposo'),
(26743, 1004, 'Barangay 56'),
(26744, 1004, 'Barangay 57'),
(26745, 1004, 'Barangay 58'),
(26746, 1004, 'Barangay 59'),
(26747, 1004, 'Barangay 60'),
(26748, 1004, 'Barangay 60-A'),
(26749, 1004, 'Barangay 61'),
(26750, 1004, 'Barangay 62'),
(26751, 1004, 'Barangay 63'),
(26752, 1004, 'Barangay 64'),
(26753, 1004, 'Barangay 65'),
(26754, 1004, 'Barangay 66'),
(26755, 1004, 'Barangay 66-A'),
(26756, 1004, 'Barangay 67'),
(26757, 1004, 'Barangay 68'),
(26758, 1004, 'Barangay 69'),
(26759, 1004, 'Barangay 70'),
(26760, 1004, 'Barangay 71'),
(26761, 1004, 'Barangay 72'),
(26762, 1004, 'Barangay 73'),
(26763, 1004, 'Barangay 74'),
(26764, 1004, 'Barangay 75'),
(26765, 1004, 'Barangay 76'),
(26766, 1004, 'Barangay 77'),
(26767, 1004, 'Barangay 78'),
(26768, 1004, 'Barangay 79'),
(26769, 1004, 'Barangay 80'),
(26770, 1004, 'Barangay 81'),
(26771, 1004, 'Barangay 82'),
(26772, 1004, 'Barangay 83'),
(26773, 1004, 'Barangay 83-A'),
(26774, 1004, 'Barangay 84'),
(26775, 1004, 'Barangay 85'),
(26776, 1004, 'Barangay 86'),
(26777, 1004, 'Barangay 87'),
(26778, 1004, 'Barangay 88'),
(26779, 1004, 'Barangay 89'),
(26780, 1004, 'Barangay 90'),
(26781, 1004, 'Barangay 91'),
(26782, 1004, 'Barangay 92'),
(26783, 1004, 'Barangay 93'),
(26784, 1004, 'Barangay 94'),
(26785, 1004, 'Barangay 95'),
(26786, 1004, 'Barangay 96'),
(26787, 1004, 'Barangay 97'),
(26788, 1004, 'Barangay 98'),
(26789, 1004, 'Barangay 99'),
(26790, 1004, 'Barangay 109'),
(26791, 1004, 'Barangay 109-A'),
(26792, 1004, 'Barangay 110'),
(26793, 1004, 'Barangay 5-A'),
(26794, 1004, 'Barangay 36-A'),
(26795, 1004, 'Barangay 42-A'),
(26796, 1004, 'Barangay 48-A'),
(26797, 1004, 'Barangay 48-B'),
(26798, 1004, 'Barangay 51-A'),
(26799, 1004, 'Barangay 54-A'),
(26800, 1004, 'Barangay 56-A'),
(26801, 1004, 'Barangay 59-A'),
(26802, 1004, 'Barangay 59-B'),
(26803, 1004, 'Barangay 62-A'),
(26804, 1004, 'Barangay 62-B'),
(26805, 1004, 'Barangay 83-B'),
(26806, 1004, 'Barangay 83-C'),
(26807, 1004, 'Barangay 95-A'),
(26808, 1004, 'Barangay 8-A'),
(26809, 1004, 'Barangay 23-A'),
(26810, 1004, 'Barangay 94-A'),
(26811, 1005, 'Ada'),
(26812, 1005, 'Amanluran'),
(26813, 1005, 'Arado'),
(26814, 1005, 'Atipolo'),
(26815, 1005, 'Balud'),
(26816, 1005, 'Bangon'),
(26817, 1005, 'Bantagan'),
(26818, 1005, 'Baras'),
(26819, 1005, 'Binolo'),
(26820, 1005, 'Binongto-an'),
(26821, 1005, 'Bislig'),
(26822, 1005, 'Cabalagnan'),
(26823, 1005, 'Cabarasan Guti'),
(26824, 1005, 'Cabonga-an'),
(26825, 1005, 'Cabuynan'),
(26826, 1005, 'Cahumayhumayan'),
(26827, 1005, 'Calogcog'),
(26828, 1005, 'Calsadahay'),
(26829, 1005, 'Camire'),
(26830, 1005, 'Canbalisara'),
(26831, 1005, 'Catigbian'),
(26832, 1005, 'Catmon'),
(26833, 1005, 'Cogon'),
(26834, 1005, 'Guindag-an'),
(26835, 1005, 'Guingawan'),
(26836, 1005, 'Hilagpad'),
(26837, 1005, 'Lapay'),
(26838, 1005, 'Limbuhan Daku'),
(26839, 1005, 'Limbuhan Guti'),
(26840, 1005, 'Linao'),
(26841, 1005, 'Magay'),
(26842, 1005, 'Maghulod'),
(26843, 1005, 'Malaguicay'),
(26844, 1005, 'Maribi'),
(26845, 1005, 'Mohon'),
(26846, 1005, 'Pago'),
(26847, 1005, 'Pasil'),
(26848, 1005, 'Pikas'),
(26849, 1005, 'Buntay (Pob.)'),
(26850, 1005, 'Canramos (Pob.)'),
(26851, 1005, 'Licod (Pob.)'),
(26852, 1005, 'San Miguel (Pob.)'),
(26853, 1005, 'Salvador'),
(26854, 1005, 'San Isidro'),
(26855, 1005, 'San Roque (Pob.)'),
(26856, 1005, 'San Victor'),
(26857, 1005, 'Santa Cruz'),
(26858, 1005, 'Santa Elena'),
(26859, 1005, 'Santo Niño Pob.'),
(26860, 1005, 'Solano'),
(26861, 1005, 'Talolora'),
(26862, 1005, 'Tugop'),
(26863, 1005, 'Kiling'),
(26864, 1005, 'Sacme'),
(26865, 1006, 'Burak'),
(26866, 1006, 'Canmogsay'),
(26867, 1006, 'Cantariwis'),
(26868, 1006, 'Capangihan'),
(26869, 1006, 'Malbog'),
(26870, 1006, 'Olot'),
(26871, 1006, 'Opong'),
(26872, 1006, 'Poblacion'),
(26873, 1006, 'Quilao'),
(26874, 1006, 'San Roque'),
(26875, 1006, 'San Vicente'),
(26876, 1006, 'Tanghas'),
(26877, 1006, 'Telegrafo'),
(26878, 1006, 'Doña Brigida'),
(26879, 1006, 'Imelda'),
(26880, 1007, 'Astorga'),
(26881, 1007, 'Balire'),
(26882, 1007, 'Banawang'),
(26883, 1007, 'San Antonio (Pob.)'),
(26884, 1007, 'San Pedro'),
(26885, 1007, 'San Roque'),
(26886, 1007, 'San Vicente (Pob.)'),
(26887, 1007, 'Santo Niño (Pob.)'),
(26888, 1008, 'Abijao'),
(26889, 1008, 'Balite'),
(26890, 1008, 'Bugabuga'),
(26891, 1008, 'Cabungahan'),
(26892, 1008, 'Cabunga-an'),
(26893, 1008, 'Cagnocot'),
(26894, 1008, 'Cahigan'),
(26895, 1008, 'Calbugos'),
(26896, 1008, 'Camporog'),
(26897, 1008, 'Capinyahan'),
(26898, 1008, 'Casili-on'),
(26899, 1008, 'Catagbacan'),
(26900, 1008, 'Fatima (Pob.)'),
(26901, 1008, 'Hibulangan'),
(26902, 1008, 'Hinabuyan'),
(26903, 1008, 'Iligay'),
(26904, 1008, 'Jalas'),
(26905, 1008, 'Jordan'),
(26906, 1008, 'Libagong'),
(26907, 1008, 'New Balanac'),
(26908, 1008, 'Payao'),
(26909, 1008, 'Poblacion Norte'),
(26910, 1008, 'Poblacion Sur'),
(26911, 1008, 'Sambulawan'),
(26912, 1008, 'San Francisco'),
(26913, 1008, 'Silad'),
(26914, 1008, 'Sulpa'),
(26915, 1008, 'Tabunok'),
(26916, 1008, 'Tagbubunga'),
(26917, 1008, 'Tinghub'),
(26918, 1008, 'Bangcal'),
(26919, 1008, 'Canquiason'),
(26920, 1008, 'San Vicente'),
(26921, 1008, 'Santa Cruz'),
(26922, 1008, 'Suba'),
(26923, 1009, 'Alejandro Village'),
(26924, 1009, 'Bonifacio'),
(26925, 1009, 'Cabacungan'),
(26926, 1009, 'Calarayan'),
(26927, 1009, 'Guin-arawayan'),
(26928, 1009, 'Jubasan'),
(26929, 1009, 'Kinabranan Zone I (Pob.)'),
(26930, 1009, 'Kinaguitman'),
(26931, 1009, 'Lagundi'),
(26932, 1009, 'Lipata'),
(26933, 1009, 'Londres'),
(26934, 1009, 'Sabang Zone I (Pob.)'),
(26935, 1009, 'Santa Rita'),
(26936, 1009, 'Tasvilla'),
(26937, 1009, 'Frederic'),
(26938, 1009, 'Imelda'),
(26939, 1009, 'Lo-oc'),
(26940, 1009, 'Kinabranan Zone II (Pob.)'),
(26941, 1009, 'Sabang Zone II (Pob.)'),
(26942, 1009, 'Victoria'),
(26943, 1010, 'Poblacion'),
(26944, 1010, 'MacArthur'),
(26945, 1010, 'Kauswagan'),
(26946, 1010, 'Pio Del Pilar'),
(26947, 1010, 'Progresso'),
(26948, 1010, 'San Antonio'),
(26949, 1010, 'San Pedro'),
(26950, 1010, 'Santo Niño'),
(26951, 1011, 'Acerida'),
(26952, 1011, 'Arellano'),
(26953, 1011, 'Balat-balud'),
(26954, 1011, 'Dancalan'),
(26955, 1011, 'E. Duran'),
(26956, 1011, 'Gen. Lucban (Pob.)'),
(26957, 1011, 'Jose Abad Santos'),
(26958, 1011, 'Jose P. Laurel'),
(26959, 1011, 'Magsaysay'),
(26960, 1011, 'Calantiao'),
(26961, 1011, 'Quezon'),
(26962, 1011, 'Salvacion'),
(26963, 1011, 'San Isidro'),
(26964, 1011, 'San Juan (Pob.)'),
(26965, 1011, 'Santa Clara (Pob.)'),
(26966, 1011, 'Santander'),
(26967, 1011, 'Somoroy'),
(26968, 1011, 'Trojello'),
(26969, 1012, 'Aguin'),
(26970, 1012, 'Jubang'),
(26971, 1012, 'Landusan'),
(26972, 1012, 'Oson'),
(26973, 1012, 'Poblacion Barangay 1'),
(26974, 1012, 'Poblacion Barangay 2'),
(26975, 1012, 'Poblacion Barangay 3'),
(26976, 1012, 'Poblacion Barangay 4'),
(26977, 1012, 'Poblacion Barangay 5'),
(26978, 1012, 'Sagaosawan'),
(26979, 1012, 'San Luis'),
(26980, 1012, 'Sawang'),
(26981, 1013, 'Aguinaldo'),
(26982, 1013, 'Airport Village'),
(26983, 1013, 'Baybay'),
(26984, 1013, 'Bocsol'),
(26985, 1013, 'Cabayhan'),
(26986, 1013, 'Cag-abaca'),
(26987, 1013, 'Cal-igang'),
(26988, 1013, 'Cawayan'),
(26989, 1013, 'Cervantes'),
(26990, 1013, 'Cularima'),
(26991, 1013, 'Daganas'),
(26992, 1013, 'Galutan'),
(26993, 1013, 'General Malvar'),
(26994, 1013, 'Guba'),
(26995, 1013, 'Gebalagnan'),
(26996, 1013, 'Gebulwangan'),
(26997, 1013, 'Doña Pulqueria'),
(26998, 1013, 'Hinatad'),
(26999, 1013, 'Imelda'),
(27000, 1013, 'Liberty'),
(27001, 1013, 'Libjo'),
(27002, 1013, 'Mabini'),
(27003, 1013, 'Macagtas'),
(27004, 1013, 'Mckinley'),
(27005, 1013, 'New Rizal'),
(27006, 1013, 'Old Rizal'),
(27007, 1013, 'Paticua'),
(27008, 1013, 'Polangi'),
(27009, 1013, 'Quezon'),
(27010, 1013, 'Salvacion'),
(27011, 1013, 'San Julian'),
(27012, 1013, 'Somoge'),
(27013, 1013, 'Tinowaran'),
(27014, 1013, 'Trangue'),
(27015, 1013, 'Washington'),
(27016, 1013, 'UEP I'),
(27017, 1013, 'UEP II'),
(27018, 1013, 'UEP III'),
(27019, 1013, 'Acacia (Pob.)'),
(27020, 1013, 'Talisay (Pob.)'),
(27021, 1013, 'Molave (Pob.)'),
(27022, 1013, 'Yakal (Pob.)'),
(27023, 1013, 'Ipil-ipil (Pob.)'),
(27024, 1013, 'Jose Abad Santos (Pob.)'),
(27025, 1013, 'Kasoy (Pob.)'),
(27026, 1013, 'Lapu-lapu (Pob.)'),
(27027, 1013, 'Santol (Pob.)'),
(27028, 1013, 'Narra (Pob.)'),
(27029, 1013, 'Calachuchi (Pob.)'),
(27030, 1013, 'Sampaguita (Pob.)'),
(27031, 1013, 'Mabolo (Pob.)'),
(27032, 1013, 'Jose P. Rizal (Pob.)'),
(27033, 1013, 'Bangkerohan'),
(27034, 1013, 'Dalakit (Pob.)'),
(27035, 1013, 'San Pascual'),
(27036, 1014, 'Anongo'),
(27037, 1014, 'D. Mercader'),
(27038, 1014, 'Bonifacio'),
(27039, 1014, 'Boring'),
(27040, 1014, 'Cagbugna'),
(27041, 1014, 'Cagmanaba'),
(27042, 1014, 'Cagogobngan'),
(27043, 1014, 'Calingnan'),
(27044, 1014, 'Canuctan'),
(27045, 1014, 'Guibwangan'),
(27046, 1014, 'Hinagonoyan'),
(27047, 1014, 'Hiparayan'),
(27048, 1014, 'Hitapi-an'),
(27049, 1014, 'Inoburan'),
(27050, 1014, 'Irawahan'),
(27051, 1014, 'Libon'),
(27052, 1014, 'Claro M. Recto'),
(27053, 1014, 'Lenoyahan'),
(27054, 1014, 'Magongon'),
(27055, 1014, 'Magtuad'),
(27056, 1014, 'Manering'),
(27057, 1014, 'Nabulo'),
(27058, 1014, 'Nagoocan'),
(27059, 1014, 'Nahulid'),
(27060, 1014, 'Opong'),
(27061, 1014, 'Osang'),
(27062, 1014, 'Osmeña'),
(27063, 1014, 'P. Rebadulla'),
(27064, 1014, 'Roxas'),
(27065, 1014, 'Sagudsuron'),
(27066, 1014, 'San Antonio'),
(27067, 1014, 'San Francisco'),
(27068, 1014, 'San Jose'),
(27069, 1014, 'San Vicente'),
(27070, 1014, 'Santa Fe'),
(27071, 1014, 'Sulitan'),
(27072, 1014, 'Tangbo'),
(27073, 1014, 'Tungodnon'),
(27074, 1014, 'Vienna Maria'),
(27075, 1014, 'Barangay 1 (Pob.)'),
(27076, 1014, 'Barangay 2 (Pob.)'),
(27077, 1014, 'Barangay 3 (Pob.)'),
(27078, 1014, 'Barangay 4 (Pob.)'),
(27079, 1014, 'Barangay 5 (Pob.)'),
(27080, 1014, 'Barangay 6 (Pob.)'),
(27081, 1014, 'Barangay 7 (Pob.)'),
(27082, 1014, 'Barangay 8 (Pob.)'),
(27083, 1015, 'Anito'),
(27084, 1015, 'Bangon'),
(27085, 1015, 'Bato'),
(27086, 1015, 'Bonifacio'),
(27087, 1015, 'Cabarasan'),
(27088, 1015, 'Cadac-an'),
(27089, 1015, 'Cade-an'),
(27090, 1015, 'Cagamutan del Norte'),
(27091, 1015, 'Dao'),
(27092, 1015, 'G. M. Osias'),
(27093, 1015, 'Guibuangan'),
(27094, 1015, 'Henogawe'),
(27095, 1015, 'Lonoy'),
(27096, 1015, 'Luneta'),
(27097, 1015, 'Malidong'),
(27098, 1015, 'Gamay Central (Pob.)'),
(27099, 1015, 'Gamay Occidental I (Pob.)'),
(27100, 1015, 'Gamay Oriental I (Pob.)'),
(27101, 1015, 'Rizal'),
(27102, 1015, 'San Antonio'),
(27103, 1015, 'Baybay District (Pob.)'),
(27104, 1015, 'Burabod (Pob.)'),
(27105, 1015, 'Cagamutan del Sur'),
(27106, 1015, 'Libertad (Pob.)'),
(27107, 1015, 'Occidental II (Pob.)'),
(27108, 1015, 'Oriental II (Pob.)'),
(27109, 1016, 'Abaton'),
(27110, 1016, 'Aguadahan'),
(27111, 1016, 'Aroganga'),
(27112, 1016, 'Atipolo'),
(27113, 1016, 'Bawang'),
(27114, 1016, 'Baybay (Pob.)'),
(27115, 1016, 'Binatiklan'),
(27116, 1016, 'Bobolosan'),
(27117, 1016, 'Bongliw'),
(27118, 1016, 'Burabud'),
(27119, 1016, 'Cabadiangan'),
(27120, 1016, 'Cabagngan'),
(27121, 1016, 'Cabago-an'),
(27122, 1016, 'Cabulaloan'),
(27123, 1016, 'Cagaasan'),
(27124, 1016, 'Cagdara-o'),
(27125, 1016, 'Cahayagan'),
(27126, 1016, 'Calintaan Pob.'),
(27127, 1016, 'Calomotan'),
(27128, 1016, 'Candawid'),
(27129, 1016, 'Cangcahipos'),
(27130, 1016, 'Canyomanao'),
(27131, 1016, 'Catigbian'),
(27132, 1016, 'E. J. Dulay'),
(27133, 1016, 'G. B. Tan'),
(27134, 1016, 'Gibatangan'),
(27135, 1016, 'Guilaoangi (Pob.)'),
(27136, 1016, 'Inamlan'),
(27137, 1016, 'La Perla'),
(27138, 1016, 'Langob'),
(27139, 1016, 'Lawaan'),
(27140, 1016, 'Little Venice (Pob.)'),
(27141, 1016, 'Magsaysay'),
(27142, 1016, 'Marubay'),
(27143, 1016, 'Mualbual'),
(27144, 1016, 'Napotiocan'),
(27145, 1016, 'Oleras'),
(27146, 1016, 'Onay'),
(27147, 1016, 'Palmera'),
(27148, 1016, 'Pangdan'),
(27149, 1016, 'Rawis'),
(27150, 1016, 'Rombang'),
(27151, 1016, 'San Antonio'),
(27152, 1016, 'San Miguel Heights (Pob.)'),
(27153, 1016, 'Sangcol'),
(27154, 1016, 'Sibunot'),
(27155, 1016, 'Simora'),
(27156, 1016, 'Suba'),
(27157, 1016, 'Tan-awan'),
(27158, 1016, 'Tarusan'),
(27159, 1016, 'Tinoblan'),
(27160, 1016, 'Tumaguingting (Pob.)'),
(27161, 1016, 'Vigo'),
(27162, 1016, 'Yabyaban'),
(27163, 1016, 'Yapas'),
(27164, 1016, 'Talisay'),
(27165, 1017, 'Alang-alang'),
(27166, 1017, 'Bagacay'),
(27167, 1017, 'Cahagwayan'),
(27168, 1017, 'Can Maria'),
(27169, 1017, 'Can Omanio'),
(27170, 1017, 'Imelda'),
(27171, 1017, 'Lapinig Del Sur (Pob.)'),
(27172, 1017, 'Lapinig Del Norte (Pob.)'),
(27173, 1017, 'Lo-ok'),
(27174, 1017, 'Mabini'),
(27175, 1017, 'May-igot'),
(27176, 1017, 'Palanas'),
(27177, 1017, 'Pio Del Pilar'),
(27178, 1017, 'Potong'),
(27179, 1017, 'Potong Del Sur'),
(27180, 1018, 'Balugo'),
(27181, 1018, 'Bugay'),
(27182, 1018, 'Bugtosan'),
(27183, 1018, 'Bukid'),
(27184, 1018, 'Bulao'),
(27185, 1018, 'Caputoan'),
(27186, 1018, 'Catoto-ogan'),
(27187, 1018, 'Cuenco'),
(27188, 1018, 'Dapdap'),
(27189, 1018, 'Del Pilar'),
(27190, 1018, 'Dolores'),
(27191, 1018, 'Epaw'),
(27192, 1018, 'Geguinta'),
(27193, 1018, 'Geracdo'),
(27194, 1018, 'Guyo'),
(27195, 1018, 'H. Jolejole District (Pob.)'),
(27196, 1018, 'Hangi'),
(27197, 1018, 'Imelda'),
(27198, 1018, 'L. Empon'),
(27199, 1018, 'Lakandula'),
(27200, 1018, 'Lumala-og'),
(27201, 1018, 'Lourdes'),
(27202, 1018, 'Mabini'),
(27203, 1018, 'Macarthur'),
(27204, 1018, 'Magsaysay'),
(27205, 1018, 'Matelarag'),
(27206, 1018, 'Osmeña'),
(27207, 1018, 'Paco'),
(27208, 1018, 'Palanas'),
(27209, 1018, 'Perez'),
(27210, 1018, 'Poponton'),
(27211, 1018, 'Quezon'),
(27212, 1018, 'Quirino'),
(27213, 1018, 'Quirino District (Pob.)'),
(27214, 1018, 'Rebong'),
(27215, 1018, 'Rizal'),
(27216, 1018, 'Roxas'),
(27217, 1018, 'Rufino'),
(27218, 1018, 'Sag-od'),
(27219, 1018, 'San Andres'),
(27220, 1018, 'San Antonio'),
(27221, 1018, 'San Fernando'),
(27222, 1018, 'San Francisco'),
(27223, 1018, 'San Isidro'),
(27224, 1018, 'San Jorge'),
(27225, 1018, 'San Jose'),
(27226, 1018, 'San Miguel'),
(27227, 1018, 'Santo Tomas'),
(27228, 1018, 'Tagab-iran'),
(27229, 1018, 'Tagan-ayan'),
(27230, 1018, 'Taylor'),
(27231, 1018, 'Victory'),
(27232, 1018, 'H. Jolejole'),
(27233, 1019, 'Balicuatro'),
(27234, 1019, 'Bani'),
(27235, 1019, 'Barobaybay'),
(27236, 1019, 'Caburihan (Pob.)'),
(27237, 1019, 'Caragas (Pob.)'),
(27238, 1019, 'Cataogan (Pob.)'),
(27239, 1019, 'Chansvilla'),
(27240, 1019, 'Datag'),
(27241, 1019, 'Enriqueta'),
(27242, 1019, 'Libas'),
(27243, 1019, 'Libertad'),
(27244, 1019, 'Macarthur'),
(27245, 1019, 'Magsaysay'),
(27246, 1019, 'Maravilla'),
(27247, 1019, 'Ocad (Pob.)'),
(27248, 1019, 'Salvacion'),
(27249, 1019, 'San Agustin'),
(27250, 1019, 'San Isidro'),
(27251, 1019, 'San Jose'),
(27252, 1019, 'San Juan'),
(27253, 1019, 'San Miguel'),
(27254, 1019, 'To-og'),
(27255, 1019, 'Urdaneta'),
(27256, 1019, 'Villa'),
(27257, 1019, 'Villahermosa'),
(27258, 1019, 'Sabong-Tabok'),
(27259, 1020, 'Burgos'),
(27260, 1020, 'Jubasan'),
(27261, 1020, 'Magsaysay'),
(27262, 1020, 'Magtaon'),
(27263, 1020, 'Del Norte (Pob.)'),
(27264, 1020, 'Del Sur (Pob.)'),
(27265, 1020, 'Quezon'),
(27266, 1020, 'San Jose'),
(27267, 1020, 'Siljagon'),
(27268, 1020, 'Naparasan'),
(27269, 1020, 'E. Laodenio'),
(27270, 1020, 'Manaybanay'),
(27271, 1020, 'Santa Potenciana (Pob.)'),
(27272, 1021, 'Bagasbas'),
(27273, 1021, 'Bugko'),
(27274, 1021, 'Cablangan'),
(27275, 1021, 'Cagmanaba'),
(27276, 1021, 'Cahicsan'),
(27277, 1021, 'Chitongco (Pob.)'),
(27278, 1021, 'De Maria'),
(27279, 1021, 'Doña Lucia'),
(27280, 1021, 'Eco (Pob.)'),
(27281, 1021, 'Flormina'),
(27282, 1021, 'Hinabangan'),
(27283, 1021, 'Imelda'),
(27284, 1021, 'La Trinidad'),
(27285, 1021, 'Makiwalo'),
(27286, 1021, 'Mirador'),
(27287, 1021, 'Nenita'),
(27288, 1021, 'Roxas'),
(27289, 1021, 'San Agustin'),
(27290, 1021, 'San Antonio'),
(27291, 1021, 'San Isidro'),
(27292, 1021, 'San Jose'),
(27293, 1021, 'San Juan'),
(27294, 1021, 'Santa Catalina'),
(27295, 1021, 'Talolora'),
(27296, 1022, 'Asum (Pob.)'),
(27297, 1022, 'Bagacay'),
(27298, 1022, 'Bangon'),
(27299, 1022, 'Binay'),
(27300, 1022, 'Cabariwan'),
(27301, 1022, 'Cabatuan'),
(27302, 1022, 'Campedico'),
(27303, 1022, 'Capacujan'),
(27304, 1022, 'Jangtud'),
(27305, 1022, 'Laniwan (Pob.)'),
(27306, 1022, 'Mabaras'),
(27307, 1022, 'Magsaysay'),
(27308, 1022, 'Manajao'),
(27309, 1022, 'Mapno'),
(27310, 1022, 'Maragano'),
(27311, 1022, 'Matambag'),
(27312, 1022, 'Monbon'),
(27313, 1022, 'Nagbobtac'),
(27314, 1022, 'Napo'),
(27315, 1022, 'Natawo'),
(27316, 1022, 'Nipa'),
(27317, 1022, 'Osmeña'),
(27318, 1022, 'Pangpang'),
(27319, 1022, 'Paysud'),
(27320, 1022, 'Sangay'),
(27321, 1022, 'Simora'),
(27322, 1022, 'Sinalaran'),
(27323, 1022, 'Sumoroy'),
(27324, 1022, 'Talolora'),
(27325, 1022, 'Tambangan (Pob.)'),
(27326, 1022, 'Tinampo (Pob.)'),
(27327, 1022, 'Benigno S. Aquino, Jr.'),
(27328, 1023, 'Cababto-an'),
(27329, 1023, 'Cabari-an'),
(27330, 1023, 'Cagbigajo'),
(27331, 1023, 'Canjumadal'),
(27332, 1023, 'Doña Anecita'),
(27333, 1023, 'Camparanga'),
(27334, 1023, 'Ge-adgawan'),
(27335, 1023, 'Ginulgan'),
(27336, 1023, 'Geparayan'),
(27337, 1023, 'Igot'),
(27338, 1023, 'Ynaguingayan'),
(27339, 1023, 'Inanahawan'),
(27340, 1023, 'Manahao'),
(27341, 1023, 'Paninirongan'),
(27342, 1023, 'Poblacion District 1'),
(27343, 1023, 'Poblacion District 2'),
(27344, 1023, 'Poblacion District 3'),
(27345, 1023, 'Poblacion District 4'),
(27346, 1023, 'Poblacion District 5'),
(27347, 1023, 'Poblacion District 6'),
(27348, 1023, 'Poblacion District 7'),
(27349, 1023, 'Poblacion District 8'),
(27350, 1023, 'San Ramon'),
(27351, 1023, 'Senonogan'),
(27352, 1023, 'Sixto T. Balanguit, Sr.'),
(27353, 1023, 'Tula'),
(27354, 1024, 'Aguada'),
(27355, 1024, 'Buenavista'),
(27356, 1024, 'Jamoog'),
(27357, 1024, 'Ligaya'),
(27358, 1024, 'Poblacion'),
(27359, 1024, 'Salhag'),
(27360, 1024, 'San Lorenzo'),
(27361, 1024, 'Bantolinao'),
(27362, 1024, 'Commonwealth'),
(27363, 1024, 'Guindaulan'),
(27364, 1024, 'Kailingan'),
(27365, 1025, 'Burabod'),
(27366, 1025, 'Dalupirit'),
(27367, 1025, 'Manraya'),
(27368, 1025, 'Pilar'),
(27369, 1025, 'Ward I (Pob.)'),
(27370, 1025, 'Rizal'),
(27371, 1025, 'San Nicolas'),
(27372, 1025, 'Vinisitahan'),
(27373, 1025, 'Ward II (Pob.)'),
(27374, 1025, 'Ward III (Pob.)'),
(27375, 1026, 'Alegria'),
(27376, 1026, 'Balite'),
(27377, 1026, 'Buenavista'),
(27378, 1026, 'Caglanipao'),
(27379, 1026, 'Happy Valley'),
(27380, 1026, 'Mabuhay'),
(27381, 1026, 'Palanit'),
(27382, 1026, 'Poblacion Norte'),
(27383, 1026, 'Poblacion Sur'),
(27384, 1026, 'Salvacion'),
(27385, 1026, 'San Juan'),
(27386, 1026, 'San Roque'),
(27387, 1026, 'Seven Hills'),
(27388, 1026, 'Veriato'),
(27389, 1027, 'Aguadahan'),
(27390, 1027, 'Bagong Sabang'),
(27391, 1027, 'Balite'),
(27392, 1027, 'Bonglas'),
(27393, 1027, 'Da-o'),
(27394, 1027, 'Gengarog'),
(27395, 1027, 'Geratag'),
(27396, 1027, 'Layuhan'),
(27397, 1027, 'Mandugang'),
(27398, 1027, 'P. Tingzon'),
(27399, 1027, 'San Lorenzo'),
(27400, 1027, 'Tubigdanao'),
(27401, 1027, 'Barangay North (Pob.)'),
(27402, 1027, 'Barangay South (Pob.)'),
(27403, 1027, 'Barangay East (Pob.)'),
(27404, 1027, 'Barangay West (Pob.)'),
(27405, 1028, 'Balnasan'),
(27406, 1028, 'Balud'),
(27407, 1028, 'Bantayan'),
(27408, 1028, 'Coroconog'),
(27409, 1028, 'Dale'),
(27410, 1028, 'Ginagdanan'),
(27411, 1028, 'Lao-angan'),
(27412, 1028, 'Lawaan'),
(27413, 1028, 'Malobago'),
(27414, 1028, 'Pagsang-an'),
(27415, 1028, 'Zone 1 (Pob.)'),
(27416, 1028, 'Zone 2 (Pob.)'),
(27417, 1028, 'Zone 3 (Pob.)'),
(27418, 1028, 'Zone 4 (Pob.)'),
(27419, 1028, 'Zone 5 (Pob.)'),
(27420, 1028, 'Zone 6 (Pob.)'),
(27421, 1029, 'Maragat'),
(27422, 1029, 'Mongol Bongol Pob.'),
(27423, 1029, 'Sangputan'),
(27424, 1029, 'Sila'),
(27425, 1029, 'Tarnate'),
(27426, 1029, 'Destacado Pob.'),
(27427, 1029, 'Punta Pob.'),
(27428, 1030, 'Balud'),
(27429, 1030, 'Cababayogan'),
(27430, 1030, 'Cabunga-an'),
(27431, 1030, 'Cagda-o'),
(27432, 1030, 'Caghilot'),
(27433, 1030, 'Camanggaran'),
(27434, 1030, 'Camaya-an'),
(27435, 1030, 'Deit De Suba'),
(27436, 1030, 'Deit De Turag'),
(27437, 1030, 'Gebonawan'),
(27438, 1030, 'Gebolwangan'),
(27439, 1030, 'Gecbo-an'),
(27440, 1030, 'Giguimitan'),
(27441, 1030, 'Genagasan'),
(27442, 1030, 'Geparayan De Turag'),
(27443, 1030, 'Gusaran'),
(27444, 1030, 'Imelda'),
(27445, 1030, 'Montalban'),
(27446, 1030, 'Suba (Pob.)'),
(27447, 1030, 'San Isidro'),
(27448, 1030, 'Senonogan de Tubang'),
(27449, 1030, 'Tobgon'),
(27450, 1030, 'Victory'),
(27451, 1030, 'Poblacion I'),
(27452, 1030, 'Poblacion II'),
(27453, 1030, 'San Antonio'),
(27454, 1031, 'Acedillo'),
(27455, 1031, 'Buenasuerte'),
(27456, 1031, 'Buenos Aires'),
(27457, 1031, 'Colab-og'),
(27458, 1031, 'Erenas'),
(27459, 1031, 'Libertad'),
(27460, 1031, 'Luisita'),
(27461, 1031, 'Lungib'),
(27462, 1031, 'Maxvilla'),
(27463, 1031, 'Pasabuena'),
(27464, 1031, 'Zone I (Pob.)'),
(27465, 1031, 'Zone II (Pob.)'),
(27466, 1031, 'Zone III (Pob.)'),
(27467, 1031, 'San Lazaro'),
(27468, 1031, 'San Miguel'),
(27469, 1031, 'San Roman'),
(27470, 1032, 'Bayho'),
(27471, 1032, 'Bonifacio'),
(27472, 1032, 'Cagamesarag'),
(27473, 1032, 'Cag-aguingay'),
(27474, 1032, 'Curry'),
(27475, 1032, 'Gebonawan'),
(27476, 1032, 'Gen. Luna'),
(27477, 1032, 'Getigo'),
(27478, 1032, 'Henaronagan'),
(27479, 1032, 'Lope De Vega (Pob.)'),
(27480, 1032, 'Lower Caynaga'),
(27481, 1032, 'Maghipid'),
(27482, 1032, 'Magsaysay'),
(27483, 1032, 'Osmeña'),
(27484, 1032, 'Paguite'),
(27485, 1032, 'Roxas'),
(27486, 1032, 'Sampaguita'),
(27487, 1032, 'San Francisco'),
(27488, 1032, 'San Jose'),
(27489, 1032, 'San Miguel'),
(27490, 1032, 'Somoroy'),
(27491, 1032, 'Upper Caynaga'),
(27492, 1033, 'Bacjao'),
(27493, 1033, 'Biasong I'),
(27494, 1033, 'Costa Rica'),
(27495, 1033, 'Guin-ansan'),
(27496, 1033, 'Kerikite'),
(27497, 1033, 'Lunang I'),
(27498, 1033, 'Lunang II'),
(27499, 1033, 'Malobago'),
(27500, 1033, 'Marasbaras'),
(27501, 1033, 'Panjobjoban I'),
(27502, 1033, 'Poblacion'),
(27503, 1033, 'Talahid'),
(27504, 1033, 'Tonga-tonga'),
(27505, 1033, 'Imelda'),
(27506, 1033, 'Biasong II'),
(27507, 1033, 'Costa Rica II'),
(27508, 1033, 'Mabuhay'),
(27509, 1033, 'Magsaysay'),
(27510, 1033, 'Panjobjoban II'),
(27511, 1033, 'Roño'),
(27512, 1033, 'San Isidro'),
(27513, 1033, 'San Jose'),
(27514, 1033, 'Veloso'),
(27515, 1034, 'Amandayehan'),
(27516, 1034, 'Anglit'),
(27517, 1034, 'Bacubac'),
(27518, 1034, 'Baloog'),
(27519, 1034, 'Basiao'),
(27520, 1034, 'Buenavista'),
(27521, 1034, 'Burgos'),
(27522, 1034, 'Cambayan'),
(27523, 1034, 'Can-abay'),
(27524, 1034, 'Cancaiyas'),
(27525, 1034, 'Canmanila'),
(27526, 1034, 'Catadman'),
(27527, 1034, 'Cogon'),
(27528, 1034, 'Dolongan'),
(27529, 1034, 'Guintigui-an'),
(27530, 1034, 'Guirang'),
(27531, 1034, 'Balante'),
(27532, 1034, 'Iba'),
(27533, 1034, 'Inuntan'),
(27534, 1034, 'Loog'),
(27535, 1034, 'Mabini'),
(27536, 1034, 'Magallanes'),
(27537, 1034, 'Manlilinab'),
(27538, 1034, 'Del Pilar'),
(27539, 1034, 'May-it'),
(27540, 1034, 'Mongabong'),
(27541, 1034, 'New San Agustin'),
(27542, 1034, 'Nouvelas Occidental'),
(27543, 1034, 'San Fernando'),
(27544, 1034, 'Old San Agustin'),
(27545, 1034, 'Panugmonon'),
(27546, 1034, 'Pelit'),
(27547, 1034, 'Baybay (Pob.)'),
(27548, 1034, 'Buscada (Pob.)'),
(27549, 1034, 'Lawa-an (Pob.)'),
(27550, 1034, 'Loyo (Pob.)'),
(27551, 1034, 'Mercado (Pob.)'),
(27552, 1034, 'Palaypay (Pob.)'),
(27553, 1034, 'Sulod (Pob.)'),
(27554, 1034, 'Roxas'),
(27555, 1034, 'Salvacion'),
(27556, 1034, 'San Antonio'),
(27557, 1034, 'Sawa'),
(27558, 1034, 'Serum'),
(27559, 1034, 'Sugca'),
(27560, 1034, 'Sugponon'),
(27561, 1034, 'Tinaogan'),
(27562, 1034, 'Tingib'),
(27563, 1034, 'Villa Aurora'),
(27564, 1034, 'Binongtu-an'),
(27565, 1034, 'Bulao'),
(27566, 1035, 'Jose A. Roño'),
(27567, 1035, 'Acedillo'),
(27568, 1035, 'Alibaba'),
(27569, 1035, 'Amampacang'),
(27570, 1035, 'Anislag'),
(27571, 1035, 'Ba-ay'),
(27572, 1035, 'Bagacay'),
(27573, 1035, 'Baja'),
(27574, 1035, 'Balud (Pob.)'),
(27575, 1035, 'Bante'),
(27576, 1035, 'Bantian'),
(27577, 1035, 'Basud'),
(27578, 1035, 'Bayo'),
(27579, 1035, 'Begaho'),
(27580, 1035, 'Binaliw'),
(27581, 1035, 'Bugtong'),
(27582, 1035, 'Buenavista'),
(27583, 1035, 'Cabacungan'),
(27584, 1035, 'Cabatuan'),
(27585, 1035, 'Cabicahan'),
(27586, 1035, 'Cabugawan'),
(27587, 1035, 'Cacaransan'),
(27588, 1035, 'Cag-olango'),
(27589, 1035, 'Cag-anahaw'),
(27590, 1035, 'Cagbanayacao'),
(27591, 1035, 'Cagbayang'),
(27592, 1035, 'Cagbilwang'),
(27593, 1035, 'Cagboborac'),
(27594, 1035, 'Caglanipao Sur'),
(27595, 1035, 'Cagmanipes Norte'),
(27596, 1035, 'Cag-anibong'),
(27597, 1035, 'Cagnipa'),
(27598, 1035, 'Cagsalaosao'),
(27599, 1035, 'Cahumpan'),
(27600, 1035, 'Calocnayan'),
(27601, 1035, 'Cangomaod'),
(27602, 1035, 'Canhumadac'),
(27603, 1035, 'Capacuhan'),
(27604, 1035, 'Capoocan'),
(27605, 1035, 'Carayman'),
(27606, 1035, 'Catabunan'),
(27607, 1035, 'Caybago'),
(27608, 1035, 'Central (Pob.)'),
(27609, 1035, 'Cogon'),
(27610, 1035, 'Dagum'),
(27611, 1035, 'Dawo'),
(27612, 1035, 'De Victoria'),
(27613, 1035, 'Dinabongan'),
(27614, 1035, 'Dinagan'),
(27615, 1035, 'Dinawacan'),
(27616, 1035, 'Esperanza'),
(27617, 1035, 'Gadgaran'),
(27618, 1035, 'Gasdo'),
(27619, 1035, 'Helino'),
(27620, 1035, 'Geraga-an'),
(27621, 1035, 'Guin-on'),
(27622, 1035, 'Guimbaoyan Norte'),
(27623, 1035, 'Guimbaoyan Sur'),
(27624, 1035, 'Hamorawon'),
(27625, 1035, 'Hibabngan'),
(27626, 1035, 'Hibatang'),
(27627, 1035, 'Higasaan'),
(27628, 1035, 'Himalandrog'),
(27629, 1035, 'Jimautan'),
(27630, 1035, 'Hugon Rosales'),
(27631, 1035, 'Jacinto'),
(27632, 1035, 'Aguit-itan (Pob.)'),
(27633, 1035, 'Kilikili'),
(27634, 1035, 'La Paz'),
(27635, 1035, 'Langoyon'),
(27636, 1035, 'Lapaan'),
(27637, 1035, 'Libertad'),
(27638, 1035, 'Limarayon'),
(27639, 1035, 'Looc'),
(27640, 1035, 'Longsob'),
(27641, 1035, 'Lonoy'),
(27642, 1035, 'Mabini I'),
(27643, 1035, 'Mabini II'),
(27644, 1035, 'Macatingog'),
(27645, 1035, 'Mag-ubay'),
(27646, 1035, 'Maguino-o'),
(27647, 1035, 'Malaga'),
(27648, 1035, 'Malajog'),
(27649, 1035, 'Malayog'),
(27650, 1035, 'Malopalo'),
(27651, 1035, 'Marcatubig'),
(27652, 1035, 'Mancol'),
(27653, 1035, 'Mantaong'),
(27654, 1035, 'Matobato'),
(27655, 1035, 'Mawacat'),
(27656, 1035, 'Maybog'),
(27657, 1035, 'Maysalong'),
(27658, 1035, 'Migara'),
(27659, 1035, 'Nabang'),
(27660, 1035, 'Naga'),
(27661, 1035, 'Naguma'),
(27662, 1035, 'Navarro'),
(27663, 1035, 'Nijaga'),
(27664, 1035, 'Oboob'),
(27665, 1035, 'Obrero'),
(27666, 1035, 'Olera'),
(27667, 1035, 'Oquendo (Pob.)'),
(27668, 1035, 'Osmeña'),
(27669, 1035, 'Palanas'),
(27670, 1035, 'Palanogan'),
(27671, 1035, 'Panlayahan'),
(27672, 1035, 'Panonongan'),
(27673, 1035, 'Panoypoy'),
(27674, 1035, 'Patong'),
(27675, 1035, 'Peña'),
(27676, 1035, 'Pilar'),
(27677, 1035, 'Pinamorotan'),
(27678, 1035, 'Quezon'),
(27679, 1035, 'Rawis'),
(27680, 1035, 'Rizal I'),
(27681, 1035, 'Rizal II'),
(27682, 1035, 'Roxas I'),
(27683, 1035, 'Roxas II'),
(27684, 1035, 'Saljag'),
(27685, 1035, 'Salvacion'),
(27686, 1035, 'San Antonio'),
(27687, 1035, 'San Isidro'),
(27688, 1035, 'San Joaquin'),
(27689, 1035, 'San Jose'),
(27690, 1035, 'San Policarpio'),
(27691, 1035, 'San Rufino'),
(27692, 1035, 'Saputan'),
(27693, 1035, 'Sigo'),
(27694, 1035, 'Sinantan'),
(27695, 1035, 'Sinidman Occidental'),
(27696, 1035, 'Sinidman Oriental'),
(27697, 1035, 'Tabawan'),
(27698, 1035, 'Talahiban'),
(27699, 1035, 'Tapa-e'),
(27700, 1035, 'Tarabucan'),
(27701, 1035, 'Tigbe'),
(27702, 1035, 'Tinaplacan'),
(27703, 1035, 'Tomaliguez'),
(27704, 1035, 'Trinidad'),
(27705, 1035, 'Victory'),
(27706, 1035, 'Villahermosa'),
(27707, 1035, 'Awang East (Pob.)'),
(27708, 1035, 'Awang West (Pob.)'),
(27709, 1035, 'Bagong Lipunan'),
(27710, 1035, 'Bontay'),
(27711, 1035, 'Kalilihan'),
(27712, 1035, 'Carmen'),
(27713, 1035, 'Danao I'),
(27714, 1035, 'Danao II'),
(27715, 1035, 'Gabay'),
(27716, 1035, 'Pagbalican'),
(27717, 1035, 'Payahan'),
(27718, 1035, 'Tanval'),
(27719, 1035, 'Tinambacan Norte'),
(27720, 1035, 'Tinambacan Sur'),
(27721, 1035, 'Cagmanipes Sur'),
(27722, 1035, 'Manuel Barral, Sr.'),
(27723, 1036, 'Antol'),
(27724, 1036, 'Bacyaran'),
(27725, 1036, 'Beri'),
(27726, 1036, 'Barobaybay'),
(27727, 1036, 'Binanggaran'),
(27728, 1036, 'Borong'),
(27729, 1036, 'Bulao'),
(27730, 1036, 'Buluan'),
(27731, 1036, 'Caamlongan'),
(27732, 1036, 'Calayaan'),
(27733, 1036, 'Calingonan'),
(27734, 1036, 'Canbagtic'),
(27735, 1036, 'Canticum'),
(27736, 1036, 'Daligan'),
(27737, 1036, 'Guinbanga'),
(27738, 1036, 'Hubasan'),
(27739, 1036, 'Literon'),
(27740, 1036, 'Lubang'),
(27741, 1036, 'Mahangcao'),
(27742, 1036, 'Macaalan'),
(27743, 1036, 'Malabal'),
(27744, 1036, 'Minata'),
(27745, 1036, 'Otoc'),
(27746, 1036, 'Panayuran'),
(27747, 1036, 'Pasigay'),
(27748, 1036, 'Patong'),
(27749, 1036, 'Barangay 1 (Pob.)'),
(27750, 1036, 'Barangay 2 (Pob.)'),
(27751, 1036, 'Barangay 3 (Pob.)'),
(27752, 1036, 'Barangay 4 (Pob.)'),
(27753, 1036, 'Barangay 5 (Pob.)'),
(27754, 1036, 'Barangay 6 (Pob.)'),
(27755, 1036, 'Barangay 7 (Pob.)'),
(27756, 1036, 'Polangi'),
(27757, 1036, 'Rawis'),
(27758, 1036, 'San Ignacio'),
(27759, 1036, 'San Mauricio'),
(27760, 1036, 'Sinalangtan'),
(27761, 1036, 'Timbangan'),
(27762, 1036, 'Tinago'),
(27763, 1036, 'Hindang'),
(27764, 1037, 'Albalate'),
(27765, 1037, 'Bagongon'),
(27766, 1037, 'Bangon'),
(27767, 1037, 'Basiao'),
(27768, 1037, 'Buluan'),
(27769, 1037, 'Bunuanan'),
(27770, 1037, 'Cabugawan'),
(27771, 1037, 'Cagudalo'),
(27772, 1037, 'Cagusipan'),
(27773, 1037, 'Cagutian'),
(27774, 1037, 'Cagutsan'),
(27775, 1037, 'Canhawan Gote'),
(27776, 1037, 'Canlapwas (Pob.)'),
(27777, 1037, 'Cawayan'),
(27778, 1037, 'Cinco'),
(27779, 1037, 'Darahuway Daco'),
(27780, 1037, 'Darahuway Gote'),
(27781, 1037, 'Estaka'),
(27782, 1037, 'Guinsorongan'),
(27783, 1037, 'Iguid'),
(27784, 1037, 'Lagundi'),
(27785, 1037, 'Libas'),
(27786, 1037, 'Lobo'),
(27787, 1037, 'Manguehay'),
(27788, 1037, 'Maulong'),
(27789, 1037, 'Mercedes'),
(27790, 1037, 'Mombon'),
(27791, 1037, 'New Mahayag'),
(27792, 1037, 'Old Mahayag'),
(27793, 1037, 'Palanyogon'),
(27794, 1037, 'Pangdan'),
(27795, 1037, 'Payao'),
(27796, 1037, 'Poblacion 1'),
(27797, 1037, 'Poblacion 2'),
(27798, 1037, 'Poblacion 3'),
(27799, 1037, 'Poblacion 4'),
(27800, 1037, 'Poblacion 5'),
(27801, 1037, 'Poblacion 6'),
(27802, 1037, 'Poblacion 7'),
(27803, 1037, 'Poblacion 8'),
(27804, 1037, 'Poblacion 9'),
(27805, 1037, 'Poblacion 10'),
(27806, 1037, 'Poblacion 11'),
(27807, 1037, 'Poblacion 12'),
(27808, 1037, 'Poblacion 13'),
(27809, 1037, 'Muñoz'),
(27810, 1037, 'Pupua'),
(27811, 1037, 'Guindaponan'),
(27812, 1037, 'Rama'),
(27813, 1037, 'San Andres'),
(27814, 1037, 'San Pablo'),
(27815, 1037, 'San Roque'),
(27816, 1037, 'San Vicente'),
(27817, 1037, 'Silanga'),
(27818, 1037, 'Totoringon'),
(27819, 1037, 'Ibol'),
(27820, 1037, 'Socorro'),
(27821, 1038, 'Arawane'),
(27822, 1038, 'Astorga'),
(27823, 1038, 'Bachao');
INSERT INTO `table_barangay` (`barangay_id`, `municipality_id`, `barangay_name`) VALUES
(27824, 1038, 'Baclayan'),
(27825, 1038, 'Bagacay'),
(27826, 1038, 'Bayog'),
(27827, 1038, 'Birawan'),
(27828, 1038, 'Betaug'),
(27829, 1038, 'Bono-anon'),
(27830, 1038, 'Buenavista'),
(27831, 1038, 'Burgos'),
(27832, 1038, 'Cabac'),
(27833, 1038, 'Cabil-isan'),
(27834, 1038, 'Cabiton-an'),
(27835, 1038, 'Cabugao'),
(27836, 1038, 'Calawan-an'),
(27837, 1038, 'Cambuhay'),
(27838, 1038, 'Candugue'),
(27839, 1038, 'Canloloy'),
(27840, 1038, 'Campelipa'),
(27841, 1038, 'Cansaganay'),
(27842, 1038, 'Poblacion 3'),
(27843, 1038, 'Casab-ahan'),
(27844, 1038, 'Guindapunan'),
(27845, 1038, 'Guintampilan'),
(27846, 1038, 'Iquiran'),
(27847, 1038, 'Jacopon'),
(27848, 1038, 'Losa'),
(27849, 1038, 'Mabini'),
(27850, 1038, 'Macalpe'),
(27851, 1038, 'Mandoyucan'),
(27852, 1038, 'Mongolbongol'),
(27853, 1038, 'Marupangdan'),
(27854, 1038, 'Mayabay'),
(27855, 1038, 'Nipa'),
(27856, 1038, 'Parasan'),
(27857, 1038, 'Poblacion 1'),
(27858, 1038, 'Poblacion 2'),
(27859, 1038, 'Pondang'),
(27860, 1038, 'Poso'),
(27861, 1038, 'Real'),
(27862, 1038, 'Rizal'),
(27863, 1038, 'San Antonio'),
(27864, 1038, 'San Jose'),
(27865, 1038, 'San Miguel'),
(27866, 1038, 'San Roque'),
(27867, 1038, 'Saugan'),
(27868, 1038, 'So-ong'),
(27869, 1038, 'Sua'),
(27870, 1038, 'Talisay'),
(27871, 1038, 'Tugas'),
(27872, 1038, 'Ubo'),
(27873, 1038, 'Valles-Bello'),
(27874, 1038, 'Cagboboto'),
(27875, 1038, 'Lucob-lucob'),
(27876, 1038, 'San Vicente'),
(27877, 1038, 'Sugod'),
(27878, 1038, 'Yangta'),
(27879, 1039, 'Balocawe'),
(27880, 1039, 'Beslig'),
(27881, 1039, 'Burabod I (Pob.)'),
(27882, 1039, 'Burabod II (Pob.)'),
(27883, 1039, 'Buao'),
(27884, 1039, 'Bunyagan'),
(27885, 1039, 'Calirocan'),
(27886, 1039, 'Canhumawid'),
(27887, 1039, 'Caparangasan'),
(27888, 1039, 'Caranas'),
(27889, 1039, 'Carmona'),
(27890, 1039, 'Casab-ahan'),
(27891, 1039, 'Casandig'),
(27892, 1039, 'Caugbusan'),
(27893, 1039, 'Concepcion'),
(27894, 1039, 'Dumalo-ong (Pob.)'),
(27895, 1039, 'Elcano'),
(27896, 1039, 'Gerali'),
(27897, 1039, 'Giaboc'),
(27898, 1039, 'Hampton'),
(27899, 1039, 'Hinayagan'),
(27900, 1039, 'Hinugacan'),
(27901, 1039, 'Jasminez'),
(27902, 1039, 'Lungib'),
(27903, 1039, 'Mabuhay'),
(27904, 1039, 'Macugo'),
(27905, 1039, 'Minda (Pob.)'),
(27906, 1039, 'Nacube'),
(27907, 1039, 'Nalihugan'),
(27908, 1039, 'Napalisan'),
(27909, 1039, 'Natimonan'),
(27910, 1039, 'Ngoso'),
(27911, 1039, 'Palambrag'),
(27912, 1039, 'Palanas'),
(27913, 1039, 'Piñaplata'),
(27914, 1039, 'Pizarro'),
(27915, 1039, 'Pologon'),
(27916, 1039, 'Purog'),
(27917, 1039, 'Rawis'),
(27918, 1039, 'Rizal'),
(27919, 1039, 'Samoyao'),
(27920, 1039, 'San Agustin'),
(27921, 1039, 'San Antonio'),
(27922, 1039, 'San Enrique'),
(27923, 1039, 'San Francisco'),
(27924, 1039, 'San Isidro'),
(27925, 1039, 'San Jose'),
(27926, 1039, 'San Miguel'),
(27927, 1039, 'San Pelayo'),
(27928, 1039, 'San Ramon'),
(27929, 1039, 'Santa Elena'),
(27930, 1039, 'Santo Niño'),
(27931, 1039, 'Senibaran'),
(27932, 1039, 'Tagnao'),
(27933, 1039, 'Tambongan'),
(27934, 1039, 'Tawiran'),
(27935, 1039, 'Tigbawon'),
(27936, 1039, 'Marcos'),
(27937, 1039, 'Bangahon'),
(27938, 1039, 'Adela Heights (Pob.)'),
(27939, 1039, 'Arong'),
(27940, 1039, 'Catorse De Agosto'),
(27941, 1039, 'Diaz'),
(27942, 1039, 'Gereganan'),
(27943, 1039, 'Hetebac'),
(27944, 1039, 'Himamaloto'),
(27945, 1039, 'Hiparayan'),
(27946, 1039, 'Malayog'),
(27947, 1039, 'Sidmon'),
(27948, 1040, 'Bagacay'),
(27949, 1040, 'Binobucalan'),
(27950, 1040, 'Bucalan'),
(27951, 1040, 'Cabalagnan'),
(27952, 1040, 'Canano'),
(27953, 1040, 'Consolabao'),
(27954, 1040, 'Concord'),
(27955, 1040, 'Dalosdoson'),
(27956, 1040, 'Lim-ao'),
(27957, 1040, 'Osmeña'),
(27958, 1040, 'Poblacion 1'),
(27959, 1040, 'Poblacion 2'),
(27960, 1040, 'Rawis'),
(27961, 1040, 'San Rafael'),
(27962, 1040, 'Tabay'),
(27963, 1040, 'Yabon'),
(27964, 1040, 'Cabang'),
(27965, 1040, 'Malihao'),
(27966, 1040, 'San Jose'),
(27967, 1040, 'Fatima'),
(27968, 1040, 'Mugdo'),
(27969, 1041, 'Bawang'),
(27970, 1041, 'Bugho'),
(27971, 1041, 'Camarobo-an'),
(27972, 1041, 'Candayao'),
(27973, 1041, 'Cantongtong'),
(27974, 1041, 'Casapa'),
(27975, 1041, 'Catalina'),
(27976, 1041, 'Cristina'),
(27977, 1041, 'Dogongan'),
(27978, 1041, 'Garcia'),
(27979, 1041, 'Hinaga'),
(27980, 1041, 'Jia-an'),
(27981, 1041, 'Jidanao'),
(27982, 1041, 'Lulugayan'),
(27983, 1041, 'Macabetas'),
(27984, 1041, 'Malino'),
(27985, 1041, 'Malobago'),
(27986, 1041, 'Mercedes'),
(27987, 1041, 'Nagbac'),
(27988, 1041, 'Parina'),
(27989, 1041, 'Barangay No. 1 (Pob.)'),
(27990, 1041, 'Barangay No. 2 (Pob.)'),
(27991, 1041, 'Barangay No. 3 (Pob.)'),
(27992, 1041, 'Barangay No. 4 (Pob.)'),
(27993, 1041, 'Barangay No. 5 (Pob.)'),
(27994, 1041, 'Barangay No. 6 (Pob.)'),
(27995, 1041, 'Barangay No. 7 (Pob.)'),
(27996, 1041, 'Barangay No. 8 (Pob.)'),
(27997, 1041, 'Salvacion'),
(27998, 1041, 'San Andres'),
(27999, 1041, 'San Fernando'),
(28000, 1041, 'San Miguel'),
(28001, 1041, 'Tagbayaon'),
(28002, 1041, 'Victory'),
(28003, 1042, 'Amambucale'),
(28004, 1042, 'Caluwayan'),
(28005, 1042, 'Canyoyo'),
(28006, 1042, 'Ferreras'),
(28007, 1042, 'Legaspi'),
(28008, 1042, 'Logero'),
(28009, 1042, 'Osmeña'),
(28010, 1042, 'Pinalanga'),
(28011, 1042, 'Pinamitinan (Pob.)'),
(28012, 1042, 'Catato Pob.'),
(28013, 1042, 'San Roque'),
(28014, 1042, 'Santo Niño Pob.'),
(28015, 1042, 'Tagalag'),
(28016, 1042, 'Tinabanan'),
(28017, 1042, 'Amantillo'),
(28018, 1042, 'Binukyahan'),
(28019, 1042, 'Lipata'),
(28020, 1042, 'Mabuhay'),
(28021, 1042, 'Malobago'),
(28022, 1042, 'Odoc'),
(28023, 1042, 'Panan-awan'),
(28024, 1042, 'Roño'),
(28025, 1042, 'Santa Rita'),
(28026, 1042, 'Veloso'),
(28027, 1043, 'Angyap'),
(28028, 1043, 'Barruz'),
(28029, 1043, 'Camonoan'),
(28030, 1043, 'Carolina'),
(28031, 1043, 'Deit'),
(28032, 1043, 'Del Rosario'),
(28033, 1043, 'Libertad'),
(28034, 1043, 'Ligaya'),
(28035, 1043, 'Mabuligon Pob.'),
(28036, 1043, 'Maduroto Pob.'),
(28037, 1043, 'Mahanud'),
(28038, 1043, 'Mahayag'),
(28039, 1043, 'Nagpapacao'),
(28040, 1043, 'Rizal'),
(28041, 1043, 'Salvacion'),
(28042, 1043, 'San Isidro'),
(28043, 1043, 'Santa Cruz'),
(28044, 1043, 'Bag-otan'),
(28045, 1043, 'Inubod'),
(28046, 1043, 'San Roque'),
(28047, 1044, 'Poblacion I'),
(28048, 1044, 'Poblacion I-A'),
(28049, 1044, 'Angyap'),
(28050, 1044, 'Barayong'),
(28051, 1044, 'Bayog'),
(28052, 1044, 'Beri'),
(28053, 1044, 'Bonga'),
(28054, 1044, 'Calantawan'),
(28055, 1044, 'Calapi'),
(28056, 1044, 'Caluyahan'),
(28057, 1044, 'Canvais'),
(28058, 1044, 'Canatuan'),
(28059, 1044, 'Candomacol'),
(28060, 1044, 'Capaysagan'),
(28061, 1044, 'Caranas'),
(28062, 1044, 'Caulayanan'),
(28063, 1044, 'Hinica-an'),
(28064, 1044, 'Inalad'),
(28065, 1044, 'Linonoban'),
(28066, 1044, 'Malobago'),
(28067, 1044, 'Malonoy'),
(28068, 1044, 'Mararangsi'),
(28069, 1044, 'Maypange'),
(28070, 1044, 'New Minarog'),
(28071, 1044, 'Oyandic'),
(28072, 1044, 'Pamamasan'),
(28073, 1044, 'San Andres'),
(28074, 1044, 'Santo Niño'),
(28075, 1044, 'Sarao'),
(28076, 1044, 'Pusongan'),
(28077, 1045, 'Bangon'),
(28078, 1045, 'Barangay I (Pob.)'),
(28079, 1045, 'Barangay II (Pob.)'),
(28080, 1045, 'Botoc'),
(28081, 1045, 'Bugho'),
(28082, 1045, 'Calampong'),
(28083, 1045, 'Canlobo'),
(28084, 1045, 'Catigawan'),
(28085, 1045, 'Dolores'),
(28086, 1045, 'Lale'),
(28087, 1045, 'Lawaan'),
(28088, 1045, 'Laygayon'),
(28089, 1045, 'Layo'),
(28090, 1045, 'Loctob'),
(28091, 1045, 'Madalunot'),
(28092, 1045, 'Magdawat'),
(28093, 1045, 'Mambog'),
(28094, 1045, 'Manaing'),
(28095, 1045, 'Obayan'),
(28096, 1045, 'Pahug'),
(28097, 1045, 'Parasanon'),
(28098, 1045, 'Pelaon'),
(28099, 1045, 'San Isidro'),
(28100, 1045, 'Nabong'),
(28101, 1046, 'Aguingayan'),
(28102, 1046, 'Babaclayon'),
(28103, 1046, 'Can-aponte'),
(28104, 1046, 'Cataydongan'),
(28105, 1046, 'Gusa'),
(28106, 1046, 'Hagbay'),
(28107, 1046, 'Hiduroma'),
(28108, 1046, 'Hilumot'),
(28109, 1046, 'Barangay 1 (Pob.)'),
(28110, 1046, 'Barangay 2 (Pob.)'),
(28111, 1046, 'Barangay 3 (Pob.)'),
(28112, 1046, 'Barangay 4 (Pob.)'),
(28113, 1046, 'San Nicolas'),
(28114, 1046, 'Hibaca-an'),
(28115, 1047, 'Poblacion Barangay 1'),
(28116, 1047, 'Poblacion Barangay 2'),
(28117, 1047, 'Poblacion Barangay 3'),
(28118, 1047, 'Poblacion Barangay 4'),
(28119, 1047, 'Balogo'),
(28120, 1047, 'Bontod'),
(28121, 1047, 'Camanhagay'),
(28122, 1047, 'Campiyak'),
(28123, 1047, 'Dolores'),
(28124, 1047, 'Hita-asan I'),
(28125, 1047, 'Inobongan'),
(28126, 1047, 'Cabaywa'),
(28127, 1047, 'Canduyucan'),
(28128, 1047, 'Hita-asan II'),
(28129, 1048, 'Agrupacion'),
(28130, 1048, 'Arapison'),
(28131, 1048, 'Avelino'),
(28132, 1048, 'Bahay'),
(28133, 1048, 'Balud'),
(28134, 1048, 'Bana-ao'),
(28135, 1048, 'Burabod'),
(28136, 1048, 'Cautod (Pob.)'),
(28137, 1048, 'Camperito'),
(28138, 1048, 'Campeig'),
(28139, 1048, 'Can-ipulan'),
(28140, 1048, 'Canmoros'),
(28141, 1048, 'Cinco'),
(28142, 1048, 'Curry'),
(28143, 1048, 'Gajo'),
(28144, 1048, 'Hindang'),
(28145, 1048, 'Ilo'),
(28146, 1048, 'Imelda'),
(28147, 1048, 'Inoraguiao'),
(28148, 1048, 'Jolacao'),
(28149, 1048, 'Lambao'),
(28150, 1048, 'Mabuhay'),
(28151, 1048, 'Mahayag'),
(28152, 1048, 'Monbon (Pob.)'),
(28153, 1048, 'Nabulo'),
(28154, 1048, 'Napuro'),
(28155, 1048, 'Palale'),
(28156, 1048, 'Panabatan'),
(28157, 1048, 'Panaruan'),
(28158, 1048, 'Roxas'),
(28159, 1048, 'Salvacion'),
(28160, 1048, 'Solsogon'),
(28161, 1048, 'Sundara'),
(28162, 1048, 'Cagsumji'),
(28163, 1048, 'Matayonas'),
(28164, 1048, 'Napuro II'),
(28165, 1049, 'Alegria'),
(28166, 1049, 'Anibongan'),
(28167, 1049, 'Aslum'),
(28168, 1049, 'Bagolibas'),
(28169, 1049, 'Binanalan'),
(28170, 1049, 'Cabacungan'),
(28171, 1049, 'Cabunga-an'),
(28172, 1049, 'Camayse'),
(28173, 1049, 'Cansadong'),
(28174, 1049, 'Caticugan'),
(28175, 1049, 'Dampigan'),
(28176, 1049, 'Guinbalot-an'),
(28177, 1049, 'Hinangudtan'),
(28178, 1049, 'Igang-igang'),
(28179, 1049, 'La Paz'),
(28180, 1049, 'Lupig'),
(28181, 1049, 'Magsaysay'),
(28182, 1049, 'Maligaya'),
(28183, 1049, 'New Manunca'),
(28184, 1049, 'Old Manunca'),
(28185, 1049, 'Pagsulhogon'),
(28186, 1049, 'Salvacion'),
(28187, 1049, 'San Eduardo'),
(28188, 1049, 'San Isidro'),
(28189, 1049, 'San Juan'),
(28190, 1049, 'San Pascual'),
(28191, 1049, 'San Pedro'),
(28192, 1049, 'San Roque'),
(28193, 1049, 'Santa Elena'),
(28194, 1049, 'Tagacay'),
(28195, 1049, 'Tominamos'),
(28196, 1049, 'Tulay'),
(28197, 1049, 'Union'),
(28198, 1049, 'Bokinggan Pob.'),
(28199, 1049, 'Bougainvilla Pob.'),
(28200, 1049, 'Gumamela Pob.'),
(28201, 1049, 'Rosal Pob. '),
(28202, 1049, 'Santan Pob.'),
(28203, 1050, 'Balatguti'),
(28204, 1050, 'Baras'),
(28205, 1050, 'Basud (Pob.)'),
(28206, 1050, 'Buenavista'),
(28207, 1050, 'Cabunga-an'),
(28208, 1050, 'Corocawayan'),
(28209, 1050, 'Ilijan'),
(28210, 1050, 'Ilo (Pob.)'),
(28211, 1050, 'Lobelobe'),
(28212, 1050, 'Pinanangnan'),
(28213, 1050, 'Sevilla'),
(28214, 1050, 'Takut'),
(28215, 1050, 'Villahermosa'),
(28216, 1051, 'Bo. Independencia'),
(28217, 1051, 'Malaguining'),
(28218, 1051, 'Mallorga'),
(28219, 1051, 'Navatas Daku'),
(28220, 1051, 'Navatas Guti'),
(28221, 1051, 'Placer'),
(28222, 1051, 'Poblacion Barangay 1'),
(28223, 1051, 'Poblacion Barangay 2'),
(28224, 1051, 'San Juan'),
(28225, 1051, 'Tatabunan'),
(28226, 1051, 'Victory'),
(28227, 1052, 'Alcazar'),
(28228, 1052, 'Awang'),
(28229, 1052, 'Bahay'),
(28230, 1052, 'Balonga-as'),
(28231, 1052, 'Balugo'),
(28232, 1052, 'Bangon Gote'),
(28233, 1052, 'Baras'),
(28234, 1052, 'Binalayan'),
(28235, 1052, 'Bisitahan'),
(28236, 1052, 'Bonga'),
(28237, 1052, 'Cabunga-an'),
(28238, 1052, 'Cagtutulo'),
(28239, 1052, 'Cambatutay Nuevo'),
(28240, 1052, 'Cambatutay Viejo'),
(28241, 1052, 'Canunghan'),
(28242, 1052, 'Catan-agan'),
(28243, 1052, 'Dapdap'),
(28244, 1052, 'Gallego'),
(28245, 1052, 'Imelda Pob.'),
(28246, 1052, 'Lucerdoni'),
(28247, 1052, 'Lahong'),
(28248, 1052, 'Libucan Dacu'),
(28249, 1052, 'Libucan Gote'),
(28250, 1052, 'Majacob'),
(28251, 1052, 'Mancares'),
(28252, 1052, 'Marabut'),
(28253, 1052, 'Oeste - A'),
(28254, 1052, 'Oeste - B'),
(28255, 1052, 'Pajo'),
(28256, 1052, 'Palencia'),
(28257, 1052, 'Poblacion A'),
(28258, 1052, 'Poblacion B'),
(28259, 1052, 'Poblacion C'),
(28260, 1052, 'Poblacion D'),
(28261, 1052, 'Poblacion E'),
(28262, 1052, 'San Vicente'),
(28263, 1052, 'Santa Cruz'),
(28264, 1052, 'Sugod'),
(28265, 1052, 'Talinga'),
(28266, 1052, 'Tigdaranao'),
(28267, 1052, 'Tizon'),
(28268, 1053, 'Banquil'),
(28269, 1053, 'Bino-ongan'),
(28270, 1053, 'Burabod'),
(28271, 1053, 'Cambaguio'),
(28272, 1053, 'Canmucat'),
(28273, 1053, 'Villarosa Pob.'),
(28274, 1053, 'Conant'),
(28275, 1053, 'Guintarcan'),
(28276, 1053, 'Himyangan'),
(28277, 1053, 'Igot'),
(28278, 1053, 'Inarumbacan'),
(28279, 1053, 'Inasudlan'),
(28280, 1053, 'Lam-awan'),
(28281, 1053, 'Lamingao'),
(28282, 1053, 'Lawa-an'),
(28283, 1053, 'Macopa'),
(28284, 1053, 'Mahayag'),
(28285, 1053, 'Malonoy'),
(28286, 1053, 'Mercado (Pob.)'),
(28287, 1053, 'Miramar (Pob.)'),
(28288, 1053, 'Nagcaduha'),
(28289, 1053, 'Pacao'),
(28290, 1053, 'Pacoyoy'),
(28291, 1053, 'Pangpang'),
(28292, 1053, 'Plaridel'),
(28293, 1053, 'Central (Pob.)'),
(28294, 1053, 'Polangi'),
(28295, 1053, 'San Andres'),
(28296, 1053, 'San Fernando'),
(28297, 1053, 'San Rafael'),
(28298, 1053, 'San Roque'),
(28299, 1053, 'Santa Rosa'),
(28300, 1053, 'Santo Niño'),
(28301, 1053, 'Soledad (Pob.)'),
(28302, 1053, 'Tayud (Pob.)'),
(28303, 1053, 'Tomabe'),
(28304, 1053, 'Ulayan'),
(28305, 1053, 'Patag'),
(28306, 1054, 'Anagasi'),
(28307, 1054, 'Apolonia'),
(28308, 1054, 'Bagsa'),
(28309, 1054, 'Balbagan'),
(28310, 1054, 'Bato'),
(28311, 1054, 'Buray'),
(28312, 1054, 'Cantaguic'),
(28313, 1054, 'Cantao-an'),
(28314, 1054, 'Cantato'),
(28315, 1054, 'Casandig I'),
(28316, 1054, 'Concepcion'),
(28317, 1054, 'Jose Roño'),
(28318, 1054, 'Cawayan'),
(28319, 1054, 'Lawaan I'),
(28320, 1054, 'Lipata'),
(28321, 1054, 'Lokilokon'),
(28322, 1054, 'Mangcal'),
(28323, 1054, 'Maylobe'),
(28324, 1054, 'Minarog'),
(28325, 1054, 'Nawi'),
(28326, 1054, 'Pabanog'),
(28327, 1054, 'Paco'),
(28328, 1054, 'Pagsa-ogan'),
(28329, 1054, 'Pagsanjan'),
(28330, 1054, 'Patag'),
(28331, 1054, 'Pequit'),
(28332, 1054, 'Poblacion 1'),
(28333, 1054, 'Poblacion 2'),
(28334, 1054, 'Poblacion 3'),
(28335, 1054, 'Poblacion 4'),
(28336, 1054, 'Poblacion 5'),
(28337, 1054, 'Poblacion 6'),
(28338, 1054, 'Salay'),
(28339, 1054, 'San Isidro'),
(28340, 1054, 'Santo Niño'),
(28341, 1054, 'Sulopan'),
(28342, 1054, 'Tabucan'),
(28343, 1054, 'Tapul'),
(28344, 1054, 'Tenani'),
(28345, 1054, 'Tigbawon'),
(28346, 1054, 'Tula'),
(28347, 1054, 'Tutubigan'),
(28348, 1054, 'Casandig II'),
(28349, 1054, 'Lawaan II'),
(28350, 1055, 'Alegria'),
(28351, 1055, 'Arteche'),
(28352, 1055, 'Bioso'),
(28353, 1055, 'Boblaran'),
(28354, 1055, 'Botaera'),
(28355, 1055, 'Buntay'),
(28356, 1055, 'Camayse'),
(28357, 1055, 'Canwarak'),
(28358, 1055, 'Ibarra'),
(28359, 1055, 'Lumalantang'),
(28360, 1055, 'Macalunod'),
(28361, 1055, 'Maga-an'),
(28362, 1055, 'Maputi'),
(28363, 1055, 'Monbon'),
(28364, 1055, 'Mualbual'),
(28365, 1055, 'Pangdan'),
(28366, 1055, 'Poro'),
(28367, 1055, 'San Isidro'),
(28368, 1055, 'Sugod'),
(28369, 1055, 'Tinaugan'),
(28370, 1055, 'Tubigan'),
(28371, 1055, 'Poblacion 1'),
(28372, 1055, 'Poblacion 2'),
(28373, 1055, 'Marapilit'),
(28374, 1055, 'Talib'),
(28375, 1056, 'Baguiw'),
(28376, 1056, 'Balocawe'),
(28377, 1056, 'Guinbarucan'),
(28378, 1056, 'Labangbaybay'),
(28379, 1056, 'Luna'),
(28380, 1056, 'Mataluto'),
(28381, 1056, 'Nipa'),
(28382, 1056, 'Pantalan'),
(28383, 1056, 'Pulangbato'),
(28384, 1056, 'San Vicente'),
(28385, 1056, 'Sugod (Pob.)'),
(28386, 1056, 'Suarez'),
(28387, 1056, 'San Jose (Pob.)'),
(28388, 1056, 'Trinidad'),
(28389, 1057, 'Aurora'),
(28390, 1057, 'Blanca Aurora'),
(28391, 1057, 'Buenavista I'),
(28392, 1057, 'Bulao'),
(28393, 1057, 'Bungliw'),
(28394, 1057, 'Cogtoto-og'),
(28395, 1057, 'Calundan'),
(28396, 1057, 'Cantaguic'),
(28397, 1057, 'Canyaki'),
(28398, 1057, 'Erenas'),
(28399, 1057, 'Guadalupe'),
(28400, 1057, 'Hernandez'),
(28401, 1057, 'Himay'),
(28402, 1057, 'Janipon'),
(28403, 1057, 'La Paz'),
(28404, 1057, 'Libertad'),
(28405, 1057, 'Lincoro'),
(28406, 1057, 'Matalud'),
(28407, 1057, 'Mobo-ob'),
(28408, 1057, 'Quezon'),
(28409, 1057, 'Ranera'),
(28410, 1057, 'Rosalim'),
(28411, 1057, 'San Isidro'),
(28412, 1057, 'San Jorge I (Pob.)'),
(28413, 1057, 'Sapinit'),
(28414, 1057, 'Sinit-an'),
(28415, 1057, 'Tomogbong'),
(28416, 1057, 'Gayondato'),
(28417, 1057, 'Puhagan'),
(28418, 1057, 'Anquiana'),
(28419, 1057, 'Bay-ang'),
(28420, 1057, 'Buenavista II'),
(28421, 1057, 'Cabugao'),
(28422, 1057, 'Cag-olo-olo'),
(28423, 1057, 'Guindapunan'),
(28424, 1057, 'Mabuhay'),
(28425, 1057, 'Mancol (Pob.)'),
(28426, 1057, 'Mombon'),
(28427, 1057, 'Rawis'),
(28428, 1057, 'San Jorge II (Pob.)'),
(28429, 1057, 'San Juan'),
(28430, 1058, 'Bangon'),
(28431, 1058, 'Buenos Aires'),
(28432, 1058, 'Calanyugan'),
(28433, 1058, 'Caloloma'),
(28434, 1058, 'Cambaye'),
(28435, 1058, 'Pañge'),
(28436, 1058, 'San Luis'),
(28437, 1058, 'Villahermosa Occidental'),
(28438, 1058, 'Canlapwas (Pob.)'),
(28439, 1058, 'Libertad'),
(28440, 1058, 'Santo Niño'),
(28441, 1058, 'Viejo'),
(28442, 1058, 'Villahermosa Oriental'),
(28443, 1059, 'Amagusan'),
(28444, 1059, 'Calintaan'),
(28445, 1059, 'Canlabian'),
(28446, 1059, 'Capacuhan'),
(28447, 1059, 'Kagingkingan'),
(28448, 1059, 'Lewing'),
(28449, 1059, 'Lo-ok'),
(28450, 1059, 'Mahalo'),
(28451, 1059, 'Mainit'),
(28452, 1059, 'Manigawong'),
(28453, 1059, 'Poblacion'),
(28454, 1059, 'San Vicente'),
(28455, 1059, 'Tagup-on'),
(28456, 1059, 'Cogon'),
(28457, 1060, 'Banahao'),
(28458, 1060, 'Baugo'),
(28459, 1060, 'Beniton'),
(28460, 1060, 'Buenavista'),
(28461, 1060, 'Bunga'),
(28462, 1060, 'Casao'),
(28463, 1060, 'Catmon'),
(28464, 1060, 'Catoogan'),
(28465, 1060, 'Cawayanan'),
(28466, 1060, 'Dao'),
(28467, 1060, 'Divisoria'),
(28468, 1060, 'Esperanza'),
(28469, 1060, 'Guinsangaan'),
(28470, 1060, 'Hibagwan'),
(28471, 1060, 'Hilaan'),
(28472, 1060, 'Himakilo'),
(28473, 1060, 'Hitawos'),
(28474, 1060, 'Lanao'),
(28475, 1060, 'Lawgawan'),
(28476, 1060, 'Mahayahay'),
(28477, 1060, 'Malbago'),
(28478, 1060, 'Mauylab'),
(28479, 1060, 'Paku'),
(28480, 1060, 'Pamahawan'),
(28481, 1060, 'Pamigsian'),
(28482, 1060, 'Pangi'),
(28483, 1060, 'Poblacion'),
(28484, 1060, 'Sampongon'),
(28485, 1060, 'San Vicente'),
(28486, 1060, 'Santa Cruz'),
(28487, 1060, 'Taa'),
(28488, 1060, 'Talisay'),
(28489, 1060, 'Taytagan'),
(28490, 1060, 'Tuburan'),
(28491, 1060, 'Union'),
(28492, 1060, 'Olisihan'),
(28493, 1060, 'Anahao'),
(28494, 1060, 'Pong-on'),
(28495, 1060, 'San Ramon'),
(28496, 1060, 'Santo Niño'),
(28497, 1061, 'Ambacon'),
(28498, 1061, 'Badiangon'),
(28499, 1061, 'Bangcas A'),
(28500, 1061, 'Bangcas B'),
(28501, 1061, 'Biasong'),
(28502, 1061, 'Bugho'),
(28503, 1061, 'Calag-itan'),
(28504, 1061, 'Calayugan'),
(28505, 1061, 'Calinao'),
(28506, 1061, 'Canipaan'),
(28507, 1061, 'Catublian'),
(28508, 1061, 'Ilaya'),
(28509, 1061, 'Ingan'),
(28510, 1061, 'Labrador'),
(28511, 1061, 'Lumbog'),
(28512, 1061, 'Manalog'),
(28513, 1061, 'Manlico'),
(28514, 1061, 'Matin-ao'),
(28515, 1061, 'Nava'),
(28516, 1061, 'Nueva Esperanza'),
(28517, 1061, 'Otama'),
(28518, 1061, 'Palongpong'),
(28519, 1061, 'Panalaron'),
(28520, 1061, 'Patong'),
(28521, 1061, 'Poblacion'),
(28522, 1061, 'Pondol'),
(28523, 1061, 'Salog'),
(28524, 1061, 'Salvacion'),
(28525, 1061, 'San Pablo Island'),
(28526, 1061, 'San Pedro Island'),
(28527, 1061, 'Santo Niño I'),
(28528, 1061, 'Santo Niño II'),
(28529, 1061, 'Tahusan'),
(28530, 1061, 'Talisay'),
(28531, 1061, 'Tawog'),
(28532, 1061, 'Toptop'),
(28533, 1061, 'Tuburan'),
(28534, 1061, 'Union'),
(28535, 1061, 'Upper Bantawon'),
(28536, 1061, 'Libas'),
(28537, 1062, 'Amaga'),
(28538, 1062, 'Ambao'),
(28539, 1062, 'An-an'),
(28540, 1062, 'Baculod'),
(28541, 1062, 'Biasong'),
(28542, 1062, 'Bugho'),
(28543, 1062, 'Cabulisan'),
(28544, 1062, 'District I (Pob.)'),
(28545, 1062, 'District II (Pob.)'),
(28546, 1062, 'District III (Pob.)'),
(28547, 1062, 'Hubasan'),
(28548, 1062, 'Cat-iwing'),
(28549, 1062, 'Lungsodaan'),
(28550, 1062, 'Navalita'),
(28551, 1062, 'Plaridel'),
(28552, 1062, 'Sabang'),
(28553, 1062, 'Sagbok'),
(28554, 1063, 'Biasong'),
(28555, 1063, 'Bogasong'),
(28556, 1063, 'Cawayan'),
(28557, 1063, 'Gakat'),
(28558, 1063, 'Jubas (Pob.)'),
(28559, 1063, 'Magkasag'),
(28560, 1063, 'Mayuga'),
(28561, 1063, 'Nahaong'),
(28562, 1063, 'Nahulid'),
(28563, 1063, 'Otikon'),
(28564, 1063, 'Pangi'),
(28565, 1063, 'Punta'),
(28566, 1063, 'Talisay (Pob.)'),
(28567, 1063, 'Tigbao'),
(28568, 1064, 'Amaga'),
(28569, 1064, 'Anilao'),
(28570, 1064, 'Bahay'),
(28571, 1064, 'Cagbungalon'),
(28572, 1064, 'Calian'),
(28573, 1064, 'Caligangan'),
(28574, 1064, 'Candayuman'),
(28575, 1064, 'Estela'),
(28576, 1064, 'Gud-an'),
(28577, 1064, 'Guintoylan'),
(28578, 1064, 'Himayangan'),
(28579, 1064, 'Ilag'),
(28580, 1064, 'Magaupas'),
(28581, 1064, 'Malangsa'),
(28582, 1064, 'Pres. Quezon'),
(28583, 1064, 'Molopolo'),
(28584, 1064, 'Pandan'),
(28585, 1064, 'Poblacion'),
(28586, 1064, 'President Roxas'),
(28587, 1064, 'San Isidro'),
(28588, 1064, 'San Roque'),
(28589, 1064, 'Tabugon'),
(28590, 1064, 'Catig'),
(28591, 1064, 'Fatima'),
(28592, 1065, 'Abgao (Pob.)'),
(28593, 1065, 'Asuncion'),
(28594, 1065, 'Bactul II'),
(28595, 1065, 'Bactul I'),
(28596, 1065, 'Badiang'),
(28597, 1065, 'Bagtican'),
(28598, 1065, 'Basak'),
(28599, 1065, 'Bato II'),
(28600, 1065, 'Bato I'),
(28601, 1065, 'Batuan'),
(28602, 1065, 'Baugo'),
(28603, 1065, 'Bilibol'),
(28604, 1065, 'Bogo'),
(28605, 1065, 'Cabadiangan'),
(28606, 1065, 'Cabulihan'),
(28607, 1065, 'Cagnituan'),
(28608, 1065, 'Cambooc'),
(28609, 1065, 'Cansirong'),
(28610, 1065, 'Canturing'),
(28611, 1065, 'Canyuom'),
(28612, 1065, 'Dongon'),
(28613, 1065, 'Gawisan'),
(28614, 1065, 'Guadalupe'),
(28615, 1065, 'Hanginan'),
(28616, 1065, 'Hantag'),
(28617, 1065, 'Hinapu Daku'),
(28618, 1065, 'Hinapu Gamay'),
(28619, 1065, 'Ibarra'),
(28620, 1065, 'Isagani'),
(28621, 1065, 'Laboon'),
(28622, 1065, 'Lanao'),
(28623, 1065, 'Libhu'),
(28624, 1065, 'Lonoy'),
(28625, 1065, 'Lunas'),
(28626, 1065, 'Mahayahay'),
(28627, 1065, 'Malapoc Norte'),
(28628, 1065, 'Malapoc Sur'),
(28629, 1065, 'Mambajao (Pob.)'),
(28630, 1065, 'Manhilo'),
(28631, 1065, 'Mantahan (Pob.)'),
(28632, 1065, 'Maria Clara'),
(28633, 1065, 'Matin-ao'),
(28634, 1065, 'Nasaug'),
(28635, 1065, 'Nati'),
(28636, 1065, 'Nonok Norte'),
(28637, 1065, 'Nonok Sur'),
(28638, 1065, 'Panan-awan'),
(28639, 1065, 'Pansaan'),
(28640, 1065, 'Pinascohan'),
(28641, 1065, 'Rizal'),
(28642, 1065, 'San Isidro'),
(28643, 1065, 'San Jose'),
(28644, 1065, 'San Rafael'),
(28645, 1065, 'Santa Cruz'),
(28646, 1065, 'Santa Rosa'),
(28647, 1065, 'Santo Niño'),
(28648, 1065, 'Santo Rosario'),
(28649, 1065, 'Soro-soro'),
(28650, 1065, 'Tagnipa (Pob.)'),
(28651, 1065, 'Tam-is'),
(28652, 1065, 'Tawid'),
(28653, 1065, 'Tigbawan'),
(28654, 1065, 'Tomoy-tomoy'),
(28655, 1065, 'Tunga-tunga (Pob.)'),
(28656, 1065, 'Acasia'),
(28657, 1065, 'Combado'),
(28658, 1065, 'Libertad'),
(28659, 1065, 'Lib-og'),
(28660, 1065, 'Pasay'),
(28661, 1065, 'San Agustin'),
(28662, 1066, 'Aguinaldo'),
(28663, 1066, 'Amparo'),
(28664, 1066, 'Buscayan'),
(28665, 1066, 'Cambaro'),
(28666, 1066, 'Canlusay'),
(28667, 1066, 'Flordeliz'),
(28668, 1066, 'Ichon'),
(28669, 1066, 'Ilihan'),
(28670, 1066, 'Laray'),
(28671, 1066, 'Lower Villa Jacinta'),
(28672, 1066, 'Mabini'),
(28673, 1066, 'Mohon'),
(28674, 1066, 'Molopolo'),
(28675, 1066, 'Rizal'),
(28676, 1066, 'Salvador'),
(28677, 1066, 'San Isidro'),
(28678, 1066, 'San Joaquin'),
(28679, 1066, 'San Roque'),
(28680, 1066, 'Sindangan'),
(28681, 1066, 'Upper Villa Jacinta'),
(28682, 1066, 'Asuncion'),
(28683, 1066, 'Bagong Silang'),
(28684, 1066, 'Danao'),
(28685, 1066, 'Guadalupe'),
(28686, 1066, 'San Vicente Poblacion'),
(28687, 1066, 'Santo Niño'),
(28688, 1066, 'San Vicente'),
(28689, 1066, 'Santa Cruz (Pob.)'),
(28690, 1066, 'Santo Rosario (Pob.)'),
(28691, 1066, 'Upper Ichon'),
(28692, 1067, 'Abgao'),
(28693, 1067, 'Aurora'),
(28694, 1067, 'Benit'),
(28695, 1067, 'Caaga'),
(28696, 1067, 'Cabul-anonan (Pob.)'),
(28697, 1067, 'Cadaruhan'),
(28698, 1067, 'Candatag'),
(28699, 1067, 'Cantamuac'),
(28700, 1067, 'Caraatan'),
(28701, 1067, 'Concepcion'),
(28702, 1067, 'Guinabonan'),
(28703, 1067, 'Iba'),
(28704, 1067, 'Lambonao'),
(28705, 1067, 'Maningning'),
(28706, 1067, 'Maujo'),
(28707, 1067, 'Pasil (Pob.)'),
(28708, 1067, 'Sabang'),
(28709, 1067, 'San Antonio (Pob.)'),
(28710, 1067, 'San Jose'),
(28711, 1067, 'San Roque'),
(28712, 1067, 'San Vicente'),
(28713, 1067, 'Sangahon'),
(28714, 1067, 'Santa Cruz'),
(28715, 1067, 'Taliwa (Pob.)'),
(28716, 1067, 'Tigbawan I'),
(28717, 1067, 'Tigbawan II'),
(28718, 1067, 'Timba'),
(28719, 1067, 'Asuncion'),
(28720, 1067, 'Cadaruhan Sur'),
(28721, 1067, 'Fatima'),
(28722, 1067, 'Juangon'),
(28723, 1067, 'Kauswagan'),
(28724, 1067, 'Mahayahay'),
(28725, 1067, 'New Katipunan'),
(28726, 1067, 'Pancil'),
(28727, 1067, 'San Isidro'),
(28728, 1067, 'Santo Niño'),
(28729, 1068, 'Buenavista'),
(28730, 1068, 'Bunga'),
(28731, 1068, 'Laca'),
(28732, 1068, 'Lungsodaan'),
(28733, 1068, 'Poblacion'),
(28734, 1068, 'San Juan'),
(28735, 1068, 'Santa Sofia'),
(28736, 1068, 'Santo Rosario'),
(28737, 1068, 'Cantutang'),
(28738, 1068, 'Dinahugan'),
(28739, 1068, 'Tangkaan'),
(28740, 1069, 'Badiang'),
(28741, 1069, 'Balongbalong'),
(28742, 1069, 'Buenavista'),
(28743, 1069, 'Bulawan'),
(28744, 1069, 'Canlawis'),
(28745, 1069, 'Catbawan'),
(28746, 1069, 'Caubang'),
(28747, 1069, 'Cogon'),
(28748, 1069, 'Dan-an'),
(28749, 1069, 'Lobo'),
(28750, 1069, 'Mainit'),
(28751, 1069, 'Manglit'),
(28752, 1069, 'Nueva Estrella Sur'),
(28753, 1069, 'Poblacion Ibabao'),
(28754, 1069, 'Poblacion Ubos'),
(28755, 1069, 'Ponod'),
(28756, 1069, 'Son-ok I'),
(28757, 1069, 'Tautag'),
(28758, 1069, 'Nueva Estrella Norte'),
(28759, 1069, 'Pociano D. Equipilag'),
(28760, 1069, 'San Roque'),
(28761, 1069, 'Santa Cruz'),
(28762, 1069, 'Son-ok II'),
(28763, 1070, 'Atuyan'),
(28764, 1070, 'Ayahag'),
(28765, 1070, 'Bantawon'),
(28766, 1070, 'Bolodbolod'),
(28767, 1070, 'Nueva Esperanza'),
(28768, 1070, 'Cabagawan'),
(28769, 1070, 'Carnaga'),
(28770, 1070, 'Catmon'),
(28771, 1070, 'Guinsaugon'),
(28772, 1070, 'Himatagon (Pob.)'),
(28773, 1070, 'Himbangan'),
(28774, 1070, 'Himos-onan'),
(28775, 1070, 'Hindag-an'),
(28776, 1070, 'Kauswagan'),
(28777, 1070, 'Libas'),
(28778, 1070, 'Lipanto'),
(28779, 1070, 'Magatas'),
(28780, 1070, 'Magbagacay'),
(28781, 1070, 'Mahayag'),
(28782, 1070, 'Mahayahay'),
(28783, 1070, 'Malibago'),
(28784, 1070, 'Malinao'),
(28785, 1070, 'Panian'),
(28786, 1070, 'San Isidro'),
(28787, 1070, 'Santa Cruz'),
(28788, 1070, 'Sug-angon'),
(28789, 1070, 'Tabontabon'),
(28790, 1070, 'Tambis I'),
(28791, 1070, 'Tambis II'),
(28792, 1070, 'Hinabian'),
(28793, 1071, 'Anislagon'),
(28794, 1071, 'Bongbong'),
(28795, 1071, 'Central (Pob.)'),
(28796, 1071, 'Dakit (Pob.)'),
(28797, 1071, 'Habay'),
(28798, 1071, 'Marayag'),
(28799, 1071, 'Napantao'),
(28800, 1071, 'Pinamudlan'),
(28801, 1071, 'Santa Paz Norte'),
(28802, 1071, 'Santa Paz Sur'),
(28803, 1071, 'Sudmon'),
(28804, 1071, 'Tinaan'),
(28805, 1071, 'Tuno'),
(28806, 1071, 'Ubos (Pob.)'),
(28807, 1071, 'Bongawisan'),
(28808, 1071, 'Causi'),
(28809, 1071, 'Gabi'),
(28810, 1071, 'Cahayag'),
(28811, 1071, 'Malico'),
(28812, 1071, 'Pasanon'),
(28813, 1071, 'Punta'),
(28814, 1071, 'Santa Cruz'),
(28815, 1072, 'Agay-ay'),
(28816, 1072, 'Basak'),
(28817, 1072, 'Bobon A'),
(28818, 1072, 'Dayanog'),
(28819, 1072, 'Santa Filomena'),
(28820, 1072, 'Garrido'),
(28821, 1072, 'Minoyho'),
(28822, 1072, 'Pong-oy'),
(28823, 1072, 'San Jose (Pob.)'),
(28824, 1072, 'San Vicente'),
(28825, 1072, 'Santa Cruz (Pob.)'),
(28826, 1072, 'Santo Niño (Pob.)'),
(28827, 1072, 'Somoje'),
(28828, 1072, 'Sua'),
(28829, 1072, 'Timba'),
(28830, 1072, 'Osao'),
(28831, 1072, 'San Roque'),
(28832, 1072, 'Bobon B'),
(28833, 1073, 'Benit'),
(28834, 1073, 'Bitoon'),
(28835, 1073, 'Cabutan'),
(28836, 1073, 'Camang'),
(28837, 1073, 'Esperanza'),
(28838, 1073, 'Pinut-an'),
(28839, 1073, 'Poblacion'),
(28840, 1073, 'San Antonio'),
(28841, 1073, 'San Ramon'),
(28842, 1073, 'Saub'),
(28843, 1073, 'Timba'),
(28844, 1073, 'Esperanza Dos'),
(28845, 1073, 'Kinachawa'),
(28846, 1073, 'Inolinan'),
(28847, 1073, 'Looc'),
(28848, 1074, 'Balagawan'),
(28849, 1074, 'Catmon'),
(28850, 1074, 'Pob. District I'),
(28851, 1074, 'Pob. District II'),
(28852, 1074, 'Hingatungan'),
(28853, 1074, 'Katipunan'),
(28854, 1074, 'Laguma'),
(28855, 1074, 'Mercedes'),
(28856, 1074, 'Puntana'),
(28857, 1074, 'Salvacion'),
(28858, 1074, 'Sap-ang'),
(28859, 1074, 'Sudmon'),
(28860, 1074, 'Tuba-on'),
(28861, 1074, 'Tubod'),
(28862, 1074, 'Imelda'),
(28863, 1075, 'Benit'),
(28864, 1075, 'Buac Daku'),
(28865, 1075, 'Buac Gamay'),
(28866, 1075, 'Cabadbaran'),
(28867, 1075, 'Concepcion'),
(28868, 1075, 'Consolacion'),
(28869, 1075, 'Dagsa'),
(28870, 1075, 'Hibod-hibod'),
(28871, 1075, 'Hindangan'),
(28872, 1075, 'Hipantag'),
(28873, 1075, 'Javier'),
(28874, 1075, 'Kahupian'),
(28875, 1075, 'Kanangkaan'),
(28876, 1075, 'Kauswagan'),
(28877, 1075, 'La Purisima Concepcion'),
(28878, 1075, 'Libas'),
(28879, 1075, 'Lum-an'),
(28880, 1075, 'Mabicay'),
(28881, 1075, 'Mac'),
(28882, 1075, 'Magatas'),
(28883, 1075, 'Mahayahay'),
(28884, 1075, 'Malinao'),
(28885, 1075, 'Maria Plana'),
(28886, 1075, 'Milagroso'),
(28887, 1075, 'Pancho Villa'),
(28888, 1075, 'Pandan'),
(28889, 1075, 'Zone I (Pob.)'),
(28890, 1075, 'Zone II (Pob.)'),
(28891, 1075, 'Zone III (Pob.)'),
(28892, 1075, 'Zone IV (Pob.)'),
(28893, 1075, 'Zone V (Pob.)'),
(28894, 1075, 'Rizal'),
(28895, 1075, 'Salvacion'),
(28896, 1075, 'San Francisco Mabuhay'),
(28897, 1075, 'San Isidro'),
(28898, 1075, 'San Jose'),
(28899, 1075, 'San Juan'),
(28900, 1075, 'San Miguel'),
(28901, 1075, 'San Pedro'),
(28902, 1075, 'San Roque'),
(28903, 1075, 'San Vicente'),
(28904, 1075, 'Santa Maria'),
(28905, 1075, 'Suba'),
(28906, 1075, 'Tampoong'),
(28907, 1075, 'Olisihan'),
(28908, 1076, 'Anahawan'),
(28909, 1076, 'Banday (Pob.)'),
(28910, 1076, 'Bogo (Pob.)'),
(28911, 1076, 'Cabascan'),
(28912, 1076, 'Camansi'),
(28913, 1076, 'Cambite (Pob.)'),
(28914, 1076, 'Canlupao'),
(28915, 1076, 'Carnaga'),
(28916, 1076, 'Cawayan'),
(28917, 1076, 'Hinagtikan'),
(28918, 1076, 'Hinapo'),
(28919, 1076, 'Hugpa'),
(28920, 1076, 'Iniguihan Pob.'),
(28921, 1076, 'Looc'),
(28922, 1076, 'Maanyag'),
(28923, 1076, 'Maslog'),
(28924, 1076, 'Ponong'),
(28925, 1076, 'Rizal'),
(28926, 1076, 'San Isidro'),
(28927, 1076, 'San Miguel'),
(28928, 1076, 'Tinago'),
(28929, 1076, 'Biasong'),
(28930, 1076, 'Higosoan'),
(28931, 1076, 'Mag-ata'),
(28932, 1076, 'San Antonio'),
(28933, 1076, 'San Roque'),
(28934, 1076, 'Luan'),
(28935, 1076, 'Mapgap'),
(28936, 1076, 'San Agustin'),
(28937, 1077, 'Cabulihan'),
(28938, 1077, 'Lugsongan'),
(28939, 1077, 'Magallanes'),
(28940, 1077, 'San Agustin'),
(28941, 1077, 'San Bernardo'),
(28942, 1077, 'Triana'),
(28943, 1078, 'Caucab'),
(28944, 1078, 'Iyosan'),
(28945, 1078, 'Jamorawon'),
(28946, 1078, 'Lo-ok'),
(28947, 1078, 'Matanga'),
(28948, 1078, 'Pili'),
(28949, 1078, 'Poblacion'),
(28950, 1078, 'Pulang Bato'),
(28951, 1078, 'Salangi'),
(28952, 1078, 'Sampao'),
(28953, 1078, 'Tabunan'),
(28954, 1078, 'Talahid'),
(28955, 1078, 'Tamarindo'),
(28956, 1079, 'Bato'),
(28957, 1079, 'Burabod'),
(28958, 1079, 'Busali'),
(28959, 1079, 'Hugpa'),
(28960, 1079, 'Julita'),
(28961, 1079, 'Canila'),
(28962, 1079, 'Pinangumhan'),
(28963, 1079, 'San Isidro (Pob.)'),
(28964, 1079, 'San Roque (Pob.)'),
(28965, 1079, 'Sanggalang'),
(28966, 1079, 'Villa Enage'),
(28967, 1080, 'Balaquid'),
(28968, 1080, 'Baso'),
(28969, 1080, 'Bunga'),
(28970, 1080, 'Caanibongan'),
(28971, 1080, 'Casiawan'),
(28972, 1080, 'Esperanza (Pob.)'),
(28973, 1080, 'Langgao'),
(28974, 1080, 'Libertad'),
(28975, 1080, 'Looc'),
(28976, 1080, 'Magbangon (Pob.)'),
(28977, 1080, 'Pawikan'),
(28978, 1080, 'Salawad'),
(28979, 1080, 'Talibong'),
(28980, 1081, 'Alegria'),
(28981, 1081, 'Asug'),
(28982, 1081, 'Bari-is'),
(28983, 1081, 'Binohangan'),
(28984, 1081, 'Cabibihan'),
(28985, 1081, 'Kawayanon'),
(28986, 1081, 'Looc'),
(28987, 1081, 'Manlabang'),
(28988, 1081, 'Caulangohan'),
(28989, 1081, 'Maurang'),
(28990, 1081, 'Palanay (Pob.)'),
(28991, 1081, 'Palengke (Pob.)'),
(28992, 1081, 'Tomalistis'),
(28993, 1081, 'Union'),
(28994, 1081, 'Uson'),
(28995, 1081, 'Victory (Pob.)'),
(28996, 1081, 'Villa Vicenta'),
(28997, 1082, 'Acaban'),
(28998, 1082, 'Bacolod'),
(28999, 1082, 'Binongtoan'),
(29000, 1082, 'Bool Central (Pob.)'),
(29001, 1082, 'Bool East (Pob.)'),
(29002, 1082, 'Bool West (Pob.)'),
(29003, 1082, 'Calipayan'),
(29004, 1082, 'Guindapunan'),
(29005, 1082, 'Habuhab'),
(29006, 1082, 'Looc'),
(29007, 1082, 'Marvel (Pob.)'),
(29008, 1082, 'Patag'),
(29009, 1082, 'Pinamihagan'),
(29010, 1082, 'Culaba Central (Pob.)'),
(29011, 1082, 'Salvacion'),
(29012, 1082, 'San Roque'),
(29013, 1082, 'Virginia (Pob.)'),
(29014, 1083, 'Baganito'),
(29015, 1083, 'Balacson'),
(29016, 1083, 'Bilwang'),
(29017, 1083, 'Bulalacao'),
(29018, 1083, 'Burabod'),
(29019, 1083, 'Inasuyan'),
(29020, 1083, 'Kansanok'),
(29021, 1083, 'Mada-o'),
(29022, 1083, 'Mapuyo'),
(29023, 1083, 'Masagaosao'),
(29024, 1083, 'Masagongsong'),
(29025, 1083, 'Poblacion'),
(29026, 1083, 'Tabunan North'),
(29027, 1083, 'Tubig Guinoo'),
(29028, 1083, 'Tucdao'),
(29029, 1083, 'Ungale'),
(29030, 1083, 'Balite'),
(29031, 1083, 'Buyo'),
(29032, 1083, 'Villa Cornejo'),
(29033, 1083, 'San Lorenzo'),
(29034, 1084, 'Agutay'),
(29035, 1084, 'Banlas'),
(29036, 1084, 'Bato'),
(29037, 1084, 'Binalayan West'),
(29038, 1084, 'Binalayan East'),
(29039, 1084, 'Burabod'),
(29040, 1084, 'Calbani'),
(29041, 1084, 'Canduhao'),
(29042, 1084, 'Casibang'),
(29043, 1084, 'Danao'),
(29044, 1084, 'Ol-og'),
(29045, 1084, 'Binongto-an'),
(29046, 1084, 'Ermita'),
(29047, 1084, 'Trabugan'),
(29048, 1084, 'Viga'),
(29049, 1085, 'Agpangi'),
(29050, 1085, 'Anislagan'),
(29051, 1085, 'Atipolo'),
(29052, 1085, 'Calumpang'),
(29053, 1085, 'Capiñahan'),
(29054, 1085, 'Caraycaray'),
(29055, 1085, 'Catmon'),
(29056, 1085, 'Haguikhikan'),
(29057, 1085, 'Padre Inocentes Garcia (Pob.)'),
(29058, 1085, 'Libertad'),
(29059, 1085, 'Lico'),
(29060, 1085, 'Lucsoon'),
(29061, 1085, 'Mabini'),
(29062, 1085, 'San Pablo'),
(29063, 1085, 'Santo Niño'),
(29064, 1085, 'Santissimo Rosario Pob.'),
(29065, 1085, 'Talustusan'),
(29066, 1085, 'Villa Caneja'),
(29067, 1085, 'Villa Consuelo'),
(29068, 1085, 'Borac'),
(29069, 1085, 'Cabungaan'),
(29070, 1085, 'Imelda'),
(29071, 1085, 'Larrazabal'),
(29072, 1085, 'Libtong'),
(29073, 1085, 'Padre Sergio Eamiguel'),
(29074, 1085, 'Sabang'),
(29075, 1086, 'Aliguay'),
(29076, 1086, 'Antipolo'),
(29077, 1086, 'Aseniero'),
(29078, 1086, 'Ba-ao'),
(29079, 1086, 'Banbanan'),
(29080, 1086, 'Barcelona'),
(29081, 1086, 'Baylimango'),
(29082, 1086, 'Burgos'),
(29083, 1086, 'Canlucani'),
(29084, 1086, 'Carang'),
(29085, 1086, 'Dampalan'),
(29086, 1086, 'Daro'),
(29087, 1086, 'Diwa-an'),
(29088, 1086, 'Guimputlan'),
(29089, 1086, 'Hilltop'),
(29090, 1086, 'Ilaya'),
(29091, 1086, 'Larayan'),
(29092, 1086, 'Liyang'),
(29093, 1086, 'Maria Cristina'),
(29094, 1086, 'Maria Uray'),
(29095, 1086, 'Masidlakon'),
(29096, 1086, 'Napo'),
(29097, 1086, 'Opao'),
(29098, 1086, 'Oro'),
(29099, 1086, 'Owaon'),
(29100, 1086, 'Oyan'),
(29101, 1086, 'Polo'),
(29102, 1086, 'Potungan'),
(29103, 1086, 'San Francisco'),
(29104, 1086, 'San Nicolas'),
(29105, 1086, 'San Pedro'),
(29106, 1086, 'San Vicente'),
(29107, 1086, 'Sicayab Bocana'),
(29108, 1086, 'Sigayan'),
(29109, 1086, 'Silinog'),
(29110, 1086, 'Sinonoc'),
(29111, 1086, 'Santo Niño'),
(29112, 1086, 'Sulangon'),
(29113, 1086, 'Tag-olo'),
(29114, 1086, 'Taguilon'),
(29115, 1086, 'Kauswagan'),
(29116, 1086, 'Tamion'),
(29117, 1086, 'Bagting (Pob.)'),
(29118, 1086, 'Banonong (Pob.)'),
(29119, 1086, 'Cawa-cawa (Pob.)'),
(29120, 1086, 'Dawo (Pob.)'),
(29121, 1086, 'Matagobtob Pob.'),
(29122, 1086, 'Linabo (Pob.)'),
(29123, 1086, 'Potol (Pob.)'),
(29124, 1086, 'Santa Cruz (Pob.)'),
(29125, 1087, 'Cogon'),
(29126, 1087, 'Dicayas'),
(29127, 1087, 'Diwan'),
(29128, 1087, 'Galas'),
(29129, 1087, 'Gulayon'),
(29130, 1087, 'Lugdungan'),
(29131, 1087, 'Minaog'),
(29132, 1087, 'Olingan'),
(29133, 1087, 'Estaca (Pob.)'),
(29134, 1087, 'Biasong (Pob.)'),
(29135, 1087, 'Barra (Pob.)'),
(29136, 1087, 'Central (Pob.)'),
(29137, 1087, 'Miputak (Pob.)'),
(29138, 1087, 'Punta'),
(29139, 1087, 'San Jose'),
(29140, 1087, 'Sangkol'),
(29141, 1087, 'Santa Filomena'),
(29142, 1087, 'Sicayab'),
(29143, 1087, 'Sinaman'),
(29144, 1087, 'Turno'),
(29145, 1087, 'Santa Isabel'),
(29146, 1088, 'Balok'),
(29147, 1088, 'Basagan'),
(29148, 1088, 'Biniray'),
(29149, 1088, 'Bulawan'),
(29150, 1088, 'Daanglungsod'),
(29151, 1088, 'Dabiak'),
(29152, 1088, 'Dr. Jose Rizal'),
(29153, 1088, 'Fimagas'),
(29154, 1088, 'Malugas'),
(29155, 1088, 'Malasay'),
(29156, 1088, 'Matam'),
(29157, 1088, 'Mias'),
(29158, 1088, 'Miatan'),
(29159, 1088, 'Nanginan'),
(29160, 1088, 'Barangay Uno (Pob.)'),
(29161, 1088, 'Barangay Dos (Pob.)'),
(29162, 1088, 'San Antonio'),
(29163, 1088, 'Seres'),
(29164, 1088, 'Seroan'),
(29165, 1088, 'Singatong'),
(29166, 1088, 'Sinuyak'),
(29167, 1088, 'Sitog'),
(29168, 1088, 'Tuburan'),
(29169, 1088, 'Carupay'),
(29170, 1088, 'Loyuran'),
(29171, 1088, 'New Tambo'),
(29172, 1088, 'Patik'),
(29173, 1088, 'Sanao'),
(29174, 1088, 'San Vicente'),
(29175, 1088, 'Santo Niño'),
(29176, 1089, 'El Paraiso'),
(29177, 1089, 'La Union'),
(29178, 1089, 'La Victoria'),
(29179, 1089, 'Mauswagon'),
(29180, 1089, 'Mercedes'),
(29181, 1089, 'New Argao'),
(29182, 1089, 'New Bataan'),
(29183, 1089, 'New Carcar'),
(29184, 1089, 'Poblacion'),
(29185, 1089, 'San Jose'),
(29186, 1089, 'Santa Catalina'),
(29187, 1089, 'Santa Cruz'),
(29188, 1089, 'Singaran'),
(29189, 1090, 'Antonino (Pob.)'),
(29190, 1090, 'Balas'),
(29191, 1090, 'Bobongan'),
(29192, 1090, 'Dansalan'),
(29193, 1090, 'Gabu'),
(29194, 1090, 'Immaculada'),
(29195, 1090, 'Kipit'),
(29196, 1090, 'La Union'),
(29197, 1090, 'Lapatan'),
(29198, 1090, 'Lawagan'),
(29199, 1090, 'Lawigan'),
(29200, 1090, 'Lopoc (Pob.)'),
(29201, 1090, 'Malintuboan'),
(29202, 1090, 'New Salvacion'),
(29203, 1090, 'Osukan'),
(29204, 1090, 'Patawag'),
(29205, 1090, 'San Isidro'),
(29206, 1090, 'Ubay'),
(29207, 1090, 'Gil Sanchez'),
(29208, 1090, 'Imelda'),
(29209, 1091, 'Banigan'),
(29210, 1091, 'Baybay (Pob.)'),
(29211, 1091, 'Cabangcalan'),
(29212, 1091, 'Candelaria'),
(29213, 1091, 'Causwagan'),
(29214, 1091, 'Communal'),
(29215, 1091, 'Compra'),
(29216, 1091, 'Fatima'),
(29217, 1091, 'Goaw'),
(29218, 1091, 'Goin'),
(29219, 1091, 'Kayok'),
(29220, 1091, 'Lamao'),
(29221, 1091, 'La Libertad'),
(29222, 1091, 'Panabang'),
(29223, 1091, 'Patawag'),
(29224, 1091, 'Punta'),
(29225, 1091, 'San Isidro'),
(29226, 1091, 'San Francisco'),
(29227, 1091, 'San Miguel'),
(29228, 1091, 'Santa Cruz'),
(29229, 1091, 'Santo Niño'),
(29230, 1091, 'Silucap'),
(29231, 1091, 'Tapican'),
(29232, 1091, 'Timan'),
(29233, 1091, 'Villa M. Tejero'),
(29234, 1091, 'Dela Paz'),
(29235, 1091, 'El Paraiso'),
(29236, 1091, 'Ganase'),
(29237, 1091, 'Mabuhay'),
(29238, 1091, 'Maigang'),
(29239, 1091, 'Malila'),
(29240, 1091, 'Mauswagon'),
(29241, 1091, 'New Bethlehem'),
(29242, 1091, 'Overview'),
(29243, 1091, 'San Roque'),
(29244, 1091, 'Villa Calixto Sudiacal'),
(29245, 1091, 'Canaan'),
(29246, 1092, 'Dipane'),
(29247, 1092, 'Disakan'),
(29248, 1092, 'Gupot'),
(29249, 1092, 'Libuton'),
(29250, 1092, 'Linay'),
(29251, 1092, 'Lupasang'),
(29252, 1092, 'Mate'),
(29253, 1092, 'Poblacion'),
(29254, 1092, 'Saluyong'),
(29255, 1092, 'Serongan'),
(29256, 1092, 'Villaramos'),
(29257, 1092, 'Don Jose Aguirre'),
(29258, 1092, 'Lingatongan'),
(29259, 1092, 'Meses'),
(29260, 1092, 'Palaranan'),
(29261, 1092, 'Pangandao'),
(29262, 1092, 'Patagan'),
(29263, 1092, 'San Antonio'),
(29264, 1092, 'Upper Disakan'),
(29265, 1092, 'East Poblacion'),
(29266, 1092, 'Punta Blanca'),
(29267, 1092, 'Suisayan'),
(29268, 1093, 'Alvenda'),
(29269, 1093, 'Buenasuerte'),
(29270, 1093, 'Diland'),
(29271, 1093, 'Diolen'),
(29272, 1093, 'Head Tipan'),
(29273, 1093, 'New Casul'),
(29274, 1093, 'Newland'),
(29275, 1093, 'New Siquijor'),
(29276, 1093, 'Paso Rio'),
(29277, 1093, 'Poblacion'),
(29278, 1093, 'San Miguel'),
(29279, 1093, 'Tinglan'),
(29280, 1093, 'Totongon'),
(29281, 1093, 'Tubac'),
(29282, 1093, 'Unidos'),
(29283, 1093, 'Santo Tomas'),
(29284, 1094, 'Adante'),
(29285, 1094, 'Bacuyong'),
(29286, 1094, 'Bagong Silang'),
(29287, 1094, 'Calican'),
(29288, 1094, 'Ubay'),
(29289, 1094, 'Del Pilar'),
(29290, 1094, 'Dilawa'),
(29291, 1094, 'Desin'),
(29292, 1094, 'Dionum'),
(29293, 1094, 'Lapu-lapu'),
(29294, 1094, 'Lower Gumay'),
(29295, 1094, 'Luzvilla'),
(29296, 1094, 'Poblacion North'),
(29297, 1094, 'Santa Fe'),
(29298, 1094, 'Segabe'),
(29299, 1094, 'Sikitan'),
(29300, 1094, 'Silano'),
(29301, 1094, 'Teresita'),
(29302, 1094, 'Tinaytayan'),
(29303, 1094, 'Upper Gumay'),
(29304, 1094, 'Villarico'),
(29305, 1094, 'Poblacion South'),
(29306, 1095, 'Anastacio'),
(29307, 1095, 'Bandera'),
(29308, 1095, 'Bethlehem'),
(29309, 1095, 'Dangi'),
(29310, 1095, 'Dansullan'),
(29311, 1095, 'De Venta Perla'),
(29312, 1095, 'Guinles'),
(29313, 1095, 'Isis'),
(29314, 1095, 'Labrador'),
(29315, 1095, 'Lapayanbaja'),
(29316, 1095, 'Letapan'),
(29317, 1095, 'Linabo'),
(29318, 1095, 'Lingasad'),
(29319, 1095, 'Macleodes'),
(29320, 1095, 'Magangon'),
(29321, 1095, 'Maligaya'),
(29322, 1095, 'Milad'),
(29323, 1095, 'New Lebangon'),
(29324, 1095, 'New Sicayab'),
(29325, 1095, 'Obay'),
(29326, 1095, 'Pian'),
(29327, 1095, 'Poblacion South'),
(29328, 1095, 'San Antonio'),
(29329, 1095, 'San Miguel'),
(29330, 1095, 'San Pedro'),
(29331, 1095, 'Santo Niño'),
(29332, 1095, 'Silawe'),
(29333, 1095, 'Sianib'),
(29334, 1095, 'Villahermosa'),
(29335, 1095, 'Poblacion North'),
(29336, 1096, 'Balubo'),
(29337, 1096, 'Canibongan'),
(29338, 1096, 'Capase'),
(29339, 1096, 'Denoman'),
(29340, 1096, 'Dohinob'),
(29341, 1096, 'Langatian'),
(29342, 1096, 'Lipakan'),
(29343, 1096, 'Marupay'),
(29344, 1096, 'Moliton'),
(29345, 1096, 'Nabilid'),
(29346, 1096, 'Pangologon'),
(29347, 1096, 'Piñalan'),
(29348, 1096, 'Piñamar'),
(29349, 1096, 'Sebod'),
(29350, 1096, 'Tanayan'),
(29351, 1096, 'Villahermoso'),
(29352, 1096, 'Banbanan'),
(29353, 1096, 'Cape'),
(29354, 1096, 'Galokso'),
(29355, 1096, 'Gubat'),
(29356, 1096, 'Irasan'),
(29357, 1096, 'Labakid'),
(29358, 1096, 'Panampalay'),
(29359, 1096, 'Piao'),
(29360, 1096, 'Pongolan'),
(29361, 1096, 'Salisig'),
(29362, 1096, 'Sibatog'),
(29363, 1096, 'Situbo'),
(29364, 1096, 'Tantingon'),
(29365, 1096, 'Upper Irasan'),
(29366, 1096, 'Upper Minang'),
(29367, 1097, 'Birayan'),
(29368, 1097, 'Damasing'),
(29369, 1097, 'La Esperanza'),
(29370, 1097, 'Mabuhay'),
(29371, 1097, 'Mabunao'),
(29372, 1097, 'North Mapang'),
(29373, 1097, 'Mitimos'),
(29374, 1097, 'Nangca'),
(29375, 1097, 'Nangcaan'),
(29376, 1097, 'Napilan'),
(29377, 1097, 'Nasipang'),
(29378, 1097, 'New Dapitan'),
(29379, 1097, 'Nilabo'),
(29380, 1097, 'East Poblacion'),
(29381, 1097, 'Rizalina'),
(29382, 1097, 'San Roque'),
(29383, 1097, 'Sebaca'),
(29384, 1097, 'Sipaon'),
(29385, 1097, 'Tolon'),
(29386, 1097, 'Balubohan'),
(29387, 1097, 'South Mapang'),
(29388, 1097, 'West Poblacion'),
(29389, 1098, 'Bacong'),
(29390, 1098, 'Balakan'),
(29391, 1098, 'Binoni'),
(29392, 1098, 'Calucap'),
(29393, 1098, 'Canawan'),
(29394, 1098, 'Caracol'),
(29395, 1098, 'Danao'),
(29396, 1098, 'Dinoan'),
(29397, 1098, 'Dipolod'),
(29398, 1098, 'Fatima'),
(29399, 1098, 'Liguac'),
(29400, 1098, 'Lipakan'),
(29401, 1098, 'Mucas'),
(29402, 1098, 'Poblacion'),
(29403, 1098, 'Ramon Magsaysay'),
(29404, 1098, 'Tambalang'),
(29405, 1098, 'Tapalan'),
(29406, 1098, 'Ipilan'),
(29407, 1098, 'Lanawan'),
(29408, 1098, 'Pukay'),
(29409, 1098, 'Santo Niño'),
(29410, 1098, 'Pacuhan'),
(29411, 1098, 'Poblacion East'),
(29412, 1099, 'Antonino'),
(29413, 1099, 'Bagong Baguio'),
(29414, 1099, 'Bagumbayan'),
(29415, 1099, 'Biayon'),
(29416, 1099, 'Buenavista'),
(29417, 1099, 'Dampalan'),
(29418, 1099, 'Danao'),
(29419, 1099, 'Don Eleno'),
(29420, 1099, 'Kauswagan'),
(29421, 1099, 'Labiray'),
(29422, 1099, 'Liwanag'),
(29423, 1099, 'Mabuhay'),
(29424, 1099, 'Macalibre'),
(29425, 1099, 'Mahayahay'),
(29426, 1099, 'Marapong'),
(29427, 1099, 'Nazareth'),
(29428, 1099, 'Nebo'),
(29429, 1099, 'New Rizal'),
(29430, 1099, 'New Tangub'),
(29431, 1099, 'Nuevavista'),
(29432, 1099, 'Pedagan'),
(29433, 1099, 'Penacio'),
(29434, 1099, 'Poblacion Alto'),
(29435, 1099, 'Poblacion Bajo'),
(29436, 1099, 'Princesa Lamaya'),
(29437, 1099, 'Princesa Freshia'),
(29438, 1099, 'San Antonio'),
(29439, 1099, 'San Francisco'),
(29440, 1099, 'San Isidro'),
(29441, 1099, 'San Jose'),
(29442, 1099, 'San Juan'),
(29443, 1099, 'Sinaad'),
(29444, 1099, 'Sinai'),
(29445, 1099, 'Situbo'),
(29446, 1099, 'Tinago'),
(29447, 1099, 'Tinindugan'),
(29448, 1099, 'Tuburan'),
(29449, 1099, 'Venus'),
(29450, 1099, 'Wilben'),
(29451, 1100, 'Balok'),
(29452, 1100, 'Datagan'),
(29453, 1100, 'Denoyan'),
(29454, 1100, 'Diongan'),
(29455, 1100, 'Domogok'),
(29456, 1100, 'Dumpilas'),
(29457, 1100, 'Gonayen'),
(29458, 1100, 'Guibo'),
(29459, 1100, 'Gunyan'),
(29460, 1100, 'Litolet'),
(29461, 1100, 'Macasing'),
(29462, 1100, 'Mangilay'),
(29463, 1100, 'Moyo'),
(29464, 1100, 'Pange'),
(29465, 1100, 'Paranglumba (Pob.)'),
(29466, 1100, 'Polayo'),
(29467, 1100, 'Sayaw'),
(29468, 1100, 'Seriac'),
(29469, 1100, 'Siayan Proper (Pob.)'),
(29470, 1100, 'Balunokan'),
(29471, 1100, 'Muñoz'),
(29472, 1100, 'Suguilon'),
(29473, 1101, 'Anongan'),
(29474, 1101, 'Basak'),
(29475, 1101, 'Cawit-cawit'),
(29476, 1101, 'Dinulan'),
(29477, 1101, 'Jatian'),
(29478, 1101, 'Lakiki'),
(29479, 1101, 'Lambagoan'),
(29480, 1101, 'Limpapa'),
(29481, 1101, 'Lingayon'),
(29482, 1101, 'Lintangan'),
(29483, 1101, 'Litawan'),
(29484, 1101, 'Lunday'),
(29485, 1101, 'Malayal'),
(29486, 1101, 'Mantivo'),
(29487, 1101, 'Panganuran'),
(29488, 1101, 'Pangian'),
(29489, 1101, 'Paniran'),
(29490, 1101, 'Poblacion'),
(29491, 1101, 'Puliran'),
(29492, 1101, 'Santo Niño'),
(29493, 1101, 'Bongalao'),
(29494, 1101, 'Cabbunan'),
(29495, 1101, 'Culaguan'),
(29496, 1101, 'Cusipan'),
(29497, 1101, 'Kamarangan'),
(29498, 1101, 'Nala (Pob.)'),
(29499, 1101, 'Pasilnahut'),
(29500, 1101, 'Tangarak'),
(29501, 1102, 'Bagacay'),
(29502, 1102, 'Calilic'),
(29503, 1102, 'Calube'),
(29504, 1102, 'Kanim'),
(29505, 1102, 'Delapa'),
(29506, 1102, 'Libay'),
(29507, 1102, 'Magsaysay'),
(29508, 1102, 'Marapong'),
(29509, 1102, 'Minlasag'),
(29510, 1102, 'Oyan'),
(29511, 1102, 'Panganuran'),
(29512, 1102, 'Poblacion'),
(29513, 1102, 'Sawang'),
(29514, 1102, 'Sibuloc'),
(29515, 1102, 'Sinipay'),
(29516, 1102, 'Sipaloc'),
(29517, 1103, 'Bago'),
(29518, 1103, 'Binuangan'),
(29519, 1103, 'Bitoon'),
(29520, 1103, 'Dicoyong'),
(29521, 1103, 'Don Ricardo Macias'),
(29522, 1103, 'Dumalogdog'),
(29523, 1103, 'Inuman'),
(29524, 1103, 'La Concepcion'),
(29525, 1103, 'Lagag'),
(29526, 1103, 'Lapero'),
(29527, 1103, 'Mandih'),
(29528, 1103, 'Maras'),
(29529, 1103, 'Mawal'),
(29530, 1103, 'Misok'),
(29531, 1103, 'Motibot'),
(29532, 1103, 'Nato'),
(29533, 1103, 'Pangalalan'),
(29534, 1103, 'Piao'),
(29535, 1103, 'Poblacion'),
(29536, 1103, 'Siare'),
(29537, 1103, 'Talinga'),
(29538, 1103, 'Tinaplan'),
(29539, 1103, 'Tigbao'),
(29540, 1103, 'Titik'),
(29541, 1103, 'Bato'),
(29542, 1103, 'Bucana'),
(29543, 1103, 'Caluan'),
(29544, 1103, 'Calubian'),
(29545, 1103, 'Calatunan'),
(29546, 1103, 'Dagohoy'),
(29547, 1103, 'Datagan'),
(29548, 1103, 'Disud'),
(29549, 1103, 'Doña Josefa'),
(29550, 1103, 'Gampis'),
(29551, 1103, 'Goleo'),
(29552, 1103, 'Imelda'),
(29553, 1103, 'Joaquin Macias'),
(29554, 1103, 'Labakid'),
(29555, 1103, 'Santo Niño'),
(29556, 1103, 'Santo Rosario'),
(29557, 1103, 'Upper Nipaan'),
(29558, 1103, 'Benigno Aquino Jr.'),
(29559, 1103, 'Fatima'),
(29560, 1103, 'Balok'),
(29561, 1103, 'Bantayan'),
(29562, 1103, 'Dapaon'),
(29563, 1103, 'Datu Tangkilan'),
(29564, 1103, 'La Roche San Miguel'),
(29565, 1103, 'Lawis'),
(29566, 1103, 'Magsaysay'),
(29567, 1103, 'Nipaan'),
(29568, 1103, 'Upper Inuman'),
(29569, 1104, 'Balagunan'),
(29570, 1104, 'Andres Micubo Jr.'),
(29571, 1104, 'Bucana'),
(29572, 1104, 'Bulacan'),
(29573, 1104, 'Dionisio Riconalla'),
(29574, 1104, 'Candiz'),
(29575, 1104, 'Jose P. Brillantes, Sr.'),
(29576, 1104, 'Latabon'),
(29577, 1104, 'Mateo Francisco'),
(29578, 1104, 'Malipot'),
(29579, 1104, 'New Lituban'),
(29580, 1104, 'Pisawak'),
(29581, 1104, 'Poblacion'),
(29582, 1104, 'Santa Maria'),
(29583, 1104, 'Suhaile Arabi'),
(29584, 1104, 'Tibangao'),
(29585, 1104, 'S. Cabral'),
(29586, 1104, 'Datu Sailila'),
(29587, 1104, 'Makiang'),
(29588, 1104, 'Malambuhangin'),
(29589, 1104, 'Manaol'),
(29590, 1104, 'Matiag'),
(29591, 1104, 'Pangian'),
(29592, 1104, 'Siay'),
(29593, 1104, 'Tabayo'),
(29594, 1104, 'Tagaytay'),
(29595, 1105, 'Balatakan'),
(29596, 1105, 'Balonkan'),
(29597, 1105, 'Balubuan'),
(29598, 1105, 'Bitugan'),
(29599, 1105, 'Bongon'),
(29600, 1105, 'Catuyan'),
(29601, 1105, 'Culasian'),
(29602, 1105, 'Danganon'),
(29603, 1105, 'Doña Cecilia'),
(29604, 1105, 'Guban'),
(29605, 1105, 'Lagundi'),
(29606, 1105, 'Libucon'),
(29607, 1105, 'Lubok'),
(29608, 1105, 'Macuyon'),
(29609, 1105, 'Minanga'),
(29610, 1105, 'Motong'),
(29611, 1105, 'Napulan'),
(29612, 1105, 'Panabutan'),
(29613, 1105, 'Piacan'),
(29614, 1105, 'Piña'),
(29615, 1105, 'Pisa Puti'),
(29616, 1105, 'Pisa Itom'),
(29617, 1105, 'Saint Mary (Pob.)'),
(29618, 1105, 'San Nicolas (Pob.)'),
(29619, 1105, 'San Vicente (Pob.)'),
(29620, 1105, 'Pugos'),
(29621, 1105, 'Pula Bato'),
(29622, 1105, 'Pulang Lupa'),
(29623, 1105, 'San Roque (Pob.)'),
(29624, 1105, 'Sipakit'),
(29625, 1105, 'Sipawa'),
(29626, 1105, 'Sirawai Proper (Pob.)'),
(29627, 1105, 'Talabiga'),
(29628, 1105, 'Tapanayan'),
(29629, 1106, 'Cabong'),
(29630, 1106, 'Galingon'),
(29631, 1106, 'Lawaan'),
(29632, 1106, 'Molos'),
(29633, 1106, 'New Dapitan'),
(29634, 1106, 'Situbo'),
(29635, 1106, 'Poblacion'),
(29636, 1106, 'Balacbaan'),
(29637, 1106, 'Banbanan'),
(29638, 1106, 'Barili'),
(29639, 1106, 'Camul'),
(29640, 1106, 'Farmington'),
(29641, 1106, 'Lumbayao'),
(29642, 1106, 'Malila-t'),
(29643, 1106, 'Sandayong'),
(29644, 1106, 'Santo Niño'),
(29645, 1106, 'Tilubog'),
(29646, 1106, 'Tininggaan'),
(29647, 1106, 'Tubod'),
(29648, 1106, 'Znac'),
(29649, 1107, 'Dinasan'),
(29650, 1107, 'Madalag'),
(29651, 1107, 'Manawan'),
(29652, 1107, 'Poblacion'),
(29653, 1107, 'Siparok'),
(29654, 1107, 'Tabon'),
(29655, 1107, 'Tamil'),
(29656, 1107, 'Balatakan'),
(29657, 1107, 'Bitoon'),
(29658, 1107, 'Ilihan'),
(29659, 1107, 'Labakid'),
(29660, 1107, 'Lipay'),
(29661, 1107, 'Litalip'),
(29662, 1107, 'Lopero'),
(29663, 1107, 'Lumanping'),
(29664, 1107, 'Marupay'),
(29665, 1107, 'Sigamok'),
(29666, 1107, 'Tamarok'),
(29667, 1108, 'Banganon'),
(29668, 1108, 'Cocob'),
(29669, 1108, 'Poblacion'),
(29670, 1108, 'La Libertad'),
(29671, 1108, 'Lux'),
(29672, 1108, 'Panganuran'),
(29673, 1108, 'Pitawe'),
(29674, 1108, 'Canupong'),
(29675, 1108, 'Mamawan'),
(29676, 1108, 'Sibalic'),
(29677, 1108, 'Tipan'),
(29678, 1108, 'Bacong'),
(29679, 1108, 'Bagong Silang'),
(29680, 1108, 'Bayanihan'),
(29681, 1108, 'Buenavista'),
(29682, 1108, 'Datagan'),
(29683, 1108, 'Imelda'),
(29684, 1108, 'Loay'),
(29685, 1108, 'Malian'),
(29686, 1108, 'Map'),
(29687, 1108, 'Matunoy'),
(29688, 1108, 'New Dapitan'),
(29689, 1108, 'Pitogo'),
(29690, 1108, 'Salvador'),
(29691, 1108, 'San Isidro'),
(29692, 1108, 'San Juan'),
(29693, 1108, 'San Roque'),
(29694, 1108, 'San Vicente'),
(29695, 1108, 'Santo Niño'),
(29696, 1108, 'Sas'),
(29697, 1108, 'Upper Gutalac'),
(29698, 1108, 'Immaculada Concepcion'),
(29699, 1108, 'Lower Lux'),
(29700, 1109, 'Alegria'),
(29701, 1109, 'Diangas'),
(29702, 1109, 'Diculom'),
(29703, 1109, 'Guimotan'),
(29704, 1109, 'Kauswagan'),
(29705, 1109, 'Kilalaban'),
(29706, 1109, 'Linay'),
(29707, 1109, 'Lumay'),
(29708, 1109, 'Malinao'),
(29709, 1109, 'Mamad'),
(29710, 1109, 'Mamawan'),
(29711, 1109, 'Milidan'),
(29712, 1109, 'Nonoyan'),
(29713, 1109, 'Poblacion'),
(29714, 1109, 'San Jose'),
(29715, 1109, 'Tamao'),
(29716, 1109, 'Tan-awan'),
(29717, 1110, 'Baluno'),
(29718, 1110, 'Banuangan'),
(29719, 1110, 'Bunawan'),
(29720, 1110, 'Dilucot'),
(29721, 1110, 'Dipopor'),
(29722, 1110, 'Guisapong'),
(29723, 1110, 'Limbonga'),
(29724, 1110, 'Lomogom'),
(29725, 1110, 'Mauswagon'),
(29726, 1110, 'Miampic'),
(29727, 1110, 'Poblacion'),
(29728, 1110, 'Raba'),
(29729, 1110, 'Rambon'),
(29730, 1110, 'San Pedro'),
(29731, 1110, 'Sarawagan'),
(29732, 1110, 'Sianan'),
(29733, 1110, 'Sioran'),
(29734, 1111, 'Bacungan (Pob.)'),
(29735, 1111, 'Bogabongan'),
(29736, 1111, 'Delusom'),
(29737, 1111, 'Mangop'),
(29738, 1111, 'Manil'),
(29739, 1111, 'Mawal'),
(29740, 1111, 'Midatag'),
(29741, 1111, 'Nasibac'),
(29742, 1111, 'Rizon'),
(29743, 1111, 'Sipacong'),
(29744, 1111, 'Santa Maria'),
(29745, 1111, 'Talinga'),
(29746, 1111, 'Tinaplan'),
(29747, 1111, 'Tiniguiban'),
(29748, 1111, 'Tinuyop'),
(29749, 1111, 'Tiogan'),
(29750, 1111, 'Titik'),
(29751, 1111, 'Morob'),
(29752, 1112, 'Batayan'),
(29753, 1112, 'Botong'),
(29754, 1112, 'Concepcion'),
(29755, 1112, 'Daniel Maing'),
(29756, 1112, 'Fatima'),
(29757, 1112, 'Gatas'),
(29758, 1112, 'Kalawit (Pob.)'),
(29759, 1112, 'Marcelo'),
(29760, 1112, 'New Calamba'),
(29761, 1112, 'Palalian'),
(29762, 1112, 'Paraiso'),
(29763, 1112, 'Pianon'),
(29764, 1112, 'San Jose'),
(29765, 1112, 'Tugop*'),
(29766, 1113, 'Acad'),
(29767, 1113, 'Alang-alang'),
(29768, 1113, 'Alegria'),
(29769, 1113, 'Anonang'),
(29770, 1113, 'Bagong Mandaue'),
(29771, 1113, 'Bagong Maslog'),
(29772, 1113, 'Bagong Oslob'),
(29773, 1113, 'Bagong Pitogo'),
(29774, 1113, 'Baki'),
(29775, 1113, 'Balas'),
(29776, 1113, 'Balide'),
(29777, 1113, 'Balintawak'),
(29778, 1113, 'Bayabas'),
(29779, 1113, 'Bemposa');
INSERT INTO `table_barangay` (`barangay_id`, `municipality_id`, `barangay_name`) VALUES
(29780, 1113, 'Cabilinan'),
(29781, 1113, 'Campo Uno'),
(29782, 1113, 'Ceboneg'),
(29783, 1113, 'Commonwealth'),
(29784, 1113, 'Gubaan'),
(29785, 1113, 'Inasagan'),
(29786, 1113, 'Inroad'),
(29787, 1113, 'Kahayagan East'),
(29788, 1113, 'Kahayagan West'),
(29789, 1113, 'Kauswagan'),
(29790, 1113, 'La Victoria'),
(29791, 1113, 'Lantungan'),
(29792, 1113, 'Libertad'),
(29793, 1113, 'Lintugop'),
(29794, 1113, 'Lubid'),
(29795, 1113, 'Maguikay'),
(29796, 1113, 'Mahayahay'),
(29797, 1113, 'Monte Alegre'),
(29798, 1113, 'Montela'),
(29799, 1113, 'Napo'),
(29800, 1113, 'Panaghiusa'),
(29801, 1113, 'Poblacion'),
(29802, 1113, 'Resthouse'),
(29803, 1113, 'Romarate'),
(29804, 1113, 'San Jose'),
(29805, 1113, 'San Juan'),
(29806, 1113, 'Sapa Loboc'),
(29807, 1113, 'Tagulalo'),
(29808, 1113, 'La Paz'),
(29809, 1113, 'Waterfall'),
(29810, 1114, 'Baking'),
(29811, 1114, 'Balukbahan'),
(29812, 1114, 'Balumbunan'),
(29813, 1114, 'Bantal'),
(29814, 1114, 'Bobuan'),
(29815, 1114, 'Camp Blessing'),
(29816, 1114, 'Canoayan'),
(29817, 1114, 'Conacon'),
(29818, 1114, 'Dagum'),
(29819, 1114, 'Damit'),
(29820, 1114, 'Datagan'),
(29821, 1114, 'Depase'),
(29822, 1114, 'Deporehan'),
(29823, 1114, 'Depore'),
(29824, 1114, 'Dimalinao'),
(29825, 1114, 'Depili'),
(29826, 1114, 'Kahayagan'),
(29827, 1114, 'Kanipaan'),
(29828, 1114, 'Lamare'),
(29829, 1114, 'Liba'),
(29830, 1114, 'Matin-ao'),
(29831, 1114, 'Matun-og'),
(29832, 1114, 'Poblacion'),
(29833, 1114, 'Pulang Bato'),
(29834, 1114, 'Salawagan'),
(29835, 1114, 'Sigacad'),
(29836, 1114, 'Supon'),
(29837, 1114, 'Pangi'),
(29838, 1115, 'Bacayawan'),
(29839, 1115, 'Baha'),
(29840, 1115, 'Baluno'),
(29841, 1115, 'Binuay'),
(29842, 1115, 'Buburay'),
(29843, 1115, 'Grap'),
(29844, 1115, 'Kagawasan'),
(29845, 1115, 'Lalab'),
(29846, 1115, 'Libertad'),
(29847, 1115, 'Mahayag'),
(29848, 1115, 'Poblacion'),
(29849, 1115, 'Saloagan'),
(29850, 1115, 'Sugbay Uno'),
(29851, 1115, 'Sumpot'),
(29852, 1115, 'Tiniguangan'),
(29853, 1115, 'Tinggabulong'),
(29854, 1115, 'Tipangi'),
(29855, 1115, 'Balanagan'),
(29856, 1115, 'Josefina'),
(29857, 1115, 'Magahis'),
(29858, 1115, 'Mercedes'),
(29859, 1115, 'San Roque'),
(29860, 1115, 'Sumbato'),
(29861, 1115, 'Upper Ludiong'),
(29862, 1116, 'Bacawan'),
(29863, 1116, 'Benuatan'),
(29864, 1116, 'Beray'),
(29865, 1116, 'Dongos'),
(29866, 1116, 'Guinicolalay'),
(29867, 1116, 'Kinacap'),
(29868, 1116, 'Legarda 2'),
(29869, 1116, 'Legarda 3'),
(29870, 1116, 'Legarda 1'),
(29871, 1116, 'Lucoban'),
(29872, 1116, 'Lower Dimaya'),
(29873, 1116, 'Ludiong'),
(29874, 1116, 'East Migpulao'),
(29875, 1116, 'West Migpulao'),
(29876, 1116, 'Nangka'),
(29877, 1116, 'Ignacio Garrata'),
(29878, 1116, 'Old Mirapao'),
(29879, 1116, 'Poblacion'),
(29880, 1116, 'Proper Dimaya'),
(29881, 1116, 'Sagacad'),
(29882, 1116, 'Sambulawan'),
(29883, 1116, 'San Isidro'),
(29884, 1116, 'Sumpotan'),
(29885, 1116, 'Songayan'),
(29886, 1116, 'Tarakan'),
(29887, 1116, 'Upper Dimaya'),
(29888, 1116, 'Upper Sibul'),
(29889, 1116, 'Pisa-an'),
(29890, 1116, 'Don Jose'),
(29891, 1116, 'Nian'),
(29892, 1117, 'Bag-ong Misamis'),
(29893, 1117, 'Baga'),
(29894, 1117, 'Bag-ong Silao'),
(29895, 1117, 'Baloboan'),
(29896, 1117, 'Banta-ao'),
(29897, 1117, 'Bibilik'),
(29898, 1117, 'Calingayan'),
(29899, 1117, 'Camalig'),
(29900, 1117, 'Camanga'),
(29901, 1117, 'Cuatro-cuatro'),
(29902, 1117, 'Locuban'),
(29903, 1117, 'Malasik'),
(29904, 1117, 'Mama'),
(29905, 1117, 'Matab-ang'),
(29906, 1117, 'Mecolong'),
(29907, 1117, 'Metokong'),
(29908, 1117, 'Motosawa'),
(29909, 1117, 'Pag-asa (Pob.)'),
(29910, 1117, 'Paglaum (Pob.)'),
(29911, 1117, 'Pantad'),
(29912, 1117, 'Piniglibano'),
(29913, 1117, 'Rebokon'),
(29914, 1117, 'San Agustin'),
(29915, 1117, 'Sibucao'),
(29916, 1117, 'Sumadat'),
(29917, 1117, 'Tikwas'),
(29918, 1117, 'Tina'),
(29919, 1117, 'Tubo-Pait'),
(29920, 1117, 'Upper Dumalinao'),
(29921, 1117, 'Anonang'),
(29922, 1118, 'Bag-ong Valencia'),
(29923, 1118, 'Bucayan'),
(29924, 1118, 'Calumanggi'),
(29925, 1118, 'Caridad'),
(29926, 1118, 'Danlugan'),
(29927, 1118, 'Datu Totocan'),
(29928, 1118, 'Dilud'),
(29929, 1118, 'Ditulan'),
(29930, 1118, 'Dulian'),
(29931, 1118, 'Dulop'),
(29932, 1118, 'Guintananan'),
(29933, 1118, 'Guitran'),
(29934, 1118, 'Gumpingan'),
(29935, 1118, 'La Fortuna'),
(29936, 1118, 'Libertad'),
(29937, 1118, 'Licabang'),
(29938, 1118, 'Lipawan'),
(29939, 1118, 'Lower Landing'),
(29940, 1118, 'Lower Timonan'),
(29941, 1118, 'Macasing'),
(29942, 1118, 'Mahayahay'),
(29943, 1118, 'Malagalad'),
(29944, 1118, 'Manlabay'),
(29945, 1118, 'Maralag'),
(29946, 1118, 'Marangan'),
(29947, 1118, 'New Basak'),
(29948, 1118, 'Bagong Kauswagan'),
(29949, 1118, 'Saad'),
(29950, 1118, 'Salvador'),
(29951, 1118, 'San Pablo (Pob.)'),
(29952, 1118, 'San Pedro (Pob.)'),
(29953, 1118, 'San Vicente'),
(29954, 1118, 'Senote'),
(29955, 1118, 'Sinonok'),
(29956, 1118, 'Sunop'),
(29957, 1118, 'Tagun'),
(29958, 1118, 'Tamurayan'),
(29959, 1118, 'Upper Landing'),
(29960, 1118, 'Upper Timonan'),
(29961, 1118, 'Bagong Silang'),
(29962, 1118, 'Dapiwak'),
(29963, 1118, 'Labangon'),
(29964, 1118, 'San Juan'),
(29965, 1118, 'Canibongan'),
(29966, 1119, 'Bogayo'),
(29967, 1119, 'Bolisong'),
(29968, 1119, 'Bualan'),
(29969, 1119, 'Boyugan East'),
(29970, 1119, 'Boyugan West'),
(29971, 1119, 'Diplo'),
(29972, 1119, 'Gawil'),
(29973, 1119, 'Gusom'),
(29974, 1119, 'Kitaan Dagat'),
(29975, 1119, 'Limamawan'),
(29976, 1119, 'Mahayahay'),
(29977, 1119, 'Pangi'),
(29978, 1119, 'Poblacion'),
(29979, 1119, 'Picanan'),
(29980, 1119, 'Salagmanok'),
(29981, 1119, 'Secade'),
(29982, 1119, 'Suminalum'),
(29983, 1119, 'Lantawan'),
(29984, 1120, 'Bagalupa'),
(29985, 1120, 'Balimbingan'),
(29986, 1120, 'Binayan'),
(29987, 1120, 'Bokong'),
(29988, 1120, 'Bulanit'),
(29989, 1120, 'Cogonan'),
(29990, 1120, 'Dalapang'),
(29991, 1120, 'Dipaya'),
(29992, 1120, 'Langapod'),
(29993, 1120, 'Lantian'),
(29994, 1120, 'Lower Campo Islam (Pob.)'),
(29995, 1120, 'Lower Pulacan'),
(29996, 1120, 'New Labangan'),
(29997, 1120, 'Noboran'),
(29998, 1120, 'Old Labangan'),
(29999, 1120, 'San Isidro'),
(30000, 1120, 'Santa Cruz'),
(30001, 1120, 'Tapodoc'),
(30002, 1120, 'Tawagan Norte'),
(30003, 1120, 'Upper Campo Islam (Pob.)'),
(30004, 1120, 'Upper Pulacan'),
(30005, 1120, 'Combo'),
(30006, 1120, 'Dimasangca'),
(30007, 1120, 'Lower Sang-an'),
(30008, 1120, 'Upper Sang-an'),
(30009, 1121, 'Bulawan'),
(30010, 1121, 'Carpoc'),
(30011, 1121, 'Danganan'),
(30012, 1121, 'Dansal'),
(30013, 1121, 'Dumara'),
(30014, 1121, 'Linokmadalum'),
(30015, 1121, 'Luanan'),
(30016, 1121, 'Lubusan'),
(30017, 1121, 'Mahalingeb'),
(30018, 1121, 'Mandeg'),
(30019, 1121, 'Maralag'),
(30020, 1121, 'Maruing'),
(30021, 1121, 'Molum'),
(30022, 1121, 'Pampang'),
(30023, 1121, 'Pantad'),
(30024, 1121, 'Pingalay'),
(30025, 1121, 'Salambuyan'),
(30026, 1121, 'San Jose'),
(30027, 1121, 'Sayog'),
(30028, 1121, 'Tabon'),
(30029, 1121, 'Talabab'),
(30030, 1121, 'Tiguha'),
(30031, 1121, 'Tininghalang'),
(30032, 1121, 'Tipasan'),
(30033, 1121, 'Tugaya'),
(30034, 1121, 'Poblacion'),
(30035, 1122, 'Bag-ong Balamban'),
(30036, 1122, 'Bag-ong Dalaguete'),
(30037, 1122, 'Marabanan'),
(30038, 1122, 'Boniao'),
(30039, 1122, 'Delusom'),
(30040, 1122, 'Diwan'),
(30041, 1122, 'Guripan'),
(30042, 1122, 'Kaangayan'),
(30043, 1122, 'Kabuhi'),
(30044, 1122, 'Lourmah'),
(30045, 1122, 'Lower Salug Daku'),
(30046, 1122, 'Lower Santo Niño'),
(30047, 1122, 'Sicpao'),
(30048, 1122, 'Malubo'),
(30049, 1122, 'Manguiles'),
(30050, 1122, 'Panagaan'),
(30051, 1122, 'Paraiso'),
(30052, 1122, 'Pedagan'),
(30053, 1122, 'Poblacion'),
(30054, 1122, 'Pugwan'),
(30055, 1122, 'San Isidro'),
(30056, 1122, 'San Jose'),
(30057, 1122, 'San Vicente'),
(30058, 1122, 'Santa Cruz'),
(30059, 1122, 'Tuboran'),
(30060, 1122, 'Tumapic'),
(30061, 1122, 'Upper Salug Daku'),
(30062, 1122, 'Upper Santo Niño'),
(30063, 1122, 'Tulan'),
(30064, 1123, 'Balintawak'),
(30065, 1123, 'Bularong'),
(30066, 1123, 'Kalian'),
(30067, 1123, 'Kolot'),
(30068, 1123, 'Digon'),
(30069, 1123, 'Guinimanan'),
(30070, 1123, 'Igat Island'),
(30071, 1123, 'Limamawan'),
(30072, 1123, 'Limabatong'),
(30073, 1123, 'Lumbog'),
(30074, 1123, 'Poblacion'),
(30075, 1123, 'Sagua'),
(30076, 1123, 'Talanusa'),
(30077, 1123, 'Tiguian'),
(30078, 1123, 'Tulapoc'),
(30079, 1123, 'Magahis'),
(30080, 1123, 'Josefina'),
(30081, 1124, 'Bacahan'),
(30082, 1124, 'Bibilop'),
(30083, 1124, 'Buloron'),
(30084, 1124, 'Canipay Norte'),
(30085, 1124, 'Canipay Sur'),
(30086, 1124, 'Cumaron'),
(30087, 1124, 'Golictop'),
(30088, 1124, 'Kahayagan'),
(30089, 1124, 'Lumpunid'),
(30090, 1124, 'Matalang'),
(30091, 1124, 'New Katipunan'),
(30092, 1124, 'New Unidos'),
(30093, 1124, 'Palili'),
(30094, 1124, 'Piwan'),
(30095, 1124, 'Poblacion A'),
(30096, 1124, 'Poblacion B'),
(30097, 1124, 'Sigapod'),
(30098, 1124, 'Timbaboy'),
(30099, 1124, 'Tulbong'),
(30100, 1124, 'Tuluan'),
(30101, 1124, 'Pisompongan'),
(30102, 1124, 'Cabaloran'),
(30103, 1124, 'Dakayakan'),
(30104, 1124, 'Duelic'),
(30105, 1124, 'Dumalinao'),
(30106, 1124, 'Ecuan'),
(30107, 1124, 'Guinabot'),
(30108, 1124, 'Guitalos'),
(30109, 1124, 'Licuro-an'),
(30110, 1124, 'Pawan'),
(30111, 1124, 'Balonai'),
(30112, 1124, 'Guma'),
(30113, 1124, 'Pili'),
(30114, 1125, 'Alicia'),
(30115, 1125, 'Ariosa'),
(30116, 1125, 'Bagong Argao'),
(30117, 1125, 'Bagong Gutlang'),
(30118, 1125, 'Blancia'),
(30119, 1125, 'Bogo Capalaran'),
(30120, 1125, 'Dalaon'),
(30121, 1125, 'Dipolo'),
(30122, 1125, 'Dontulan'),
(30123, 1125, 'Gonosan'),
(30124, 1125, 'Culo'),
(30125, 1125, 'Lower Dimorok'),
(30126, 1125, 'Lower Dimalinao'),
(30127, 1125, 'Mabuhay'),
(30128, 1125, 'Madasigon (Pob.)'),
(30129, 1125, 'Makuguihon (Pob.)'),
(30130, 1125, 'Maloloy-on (Pob.)'),
(30131, 1125, 'Miligan'),
(30132, 1125, 'Parasan'),
(30133, 1125, 'Rizal'),
(30134, 1125, 'Santo Rosario'),
(30135, 1125, 'Silangit'),
(30136, 1125, 'Simata'),
(30137, 1125, 'Sudlon'),
(30138, 1125, 'Upper Dimorok'),
(30139, 1126, 'Alegria'),
(30140, 1126, 'Balangasan (Pob.)'),
(30141, 1126, 'Balintawak'),
(30142, 1126, 'Baloyboan'),
(30143, 1126, 'Banale'),
(30144, 1126, 'Bogo'),
(30145, 1126, 'Bomba'),
(30146, 1126, 'Buenavista'),
(30147, 1126, 'Bulatok'),
(30148, 1126, 'Bulawan'),
(30149, 1126, 'Danlugan'),
(30150, 1126, 'Dao'),
(30151, 1126, 'Datagan'),
(30152, 1126, 'Deborok'),
(30153, 1126, 'Ditoray'),
(30154, 1126, 'Gatas (Pob.)'),
(30155, 1126, 'Gubac'),
(30156, 1126, 'Gubang'),
(30157, 1126, 'Kagawasan'),
(30158, 1126, 'Kahayagan'),
(30159, 1126, 'Kalasan'),
(30160, 1126, 'La Suerte'),
(30161, 1126, 'Lala'),
(30162, 1126, 'Lapidian'),
(30163, 1126, 'Lenienza'),
(30164, 1126, 'Lizon Valley'),
(30165, 1126, 'Lourdes'),
(30166, 1126, 'Lower Sibatang'),
(30167, 1126, 'Lumad'),
(30168, 1126, 'Macasing'),
(30169, 1126, 'Manga'),
(30170, 1126, 'Muricay'),
(30171, 1126, 'Napolan'),
(30172, 1126, 'Palpalan'),
(30173, 1126, 'Pedulonan'),
(30174, 1126, 'Poloyagan'),
(30175, 1126, 'San Francisco (Pob.)'),
(30176, 1126, 'San Jose (Pob.)'),
(30177, 1126, 'San Pedro (Pob.)'),
(30178, 1126, 'Santa Lucia (Pob.)'),
(30179, 1126, 'Santiago (Pob.)'),
(30180, 1126, 'Tawagan Sur'),
(30181, 1126, 'Tiguma'),
(30182, 1126, 'Tuburan (Pob.)'),
(30183, 1126, 'Tulawas'),
(30184, 1126, 'Tulangan'),
(30185, 1126, 'Upper Sibatang'),
(30186, 1126, 'White Beach'),
(30187, 1126, 'Kawit'),
(30188, 1126, 'Lumbia'),
(30189, 1126, 'Santa Maria'),
(30190, 1126, 'Santo Niño'),
(30191, 1126, 'Dampalan'),
(30192, 1126, 'Dumagoc'),
(30193, 1127, 'Bagong Opon'),
(30194, 1127, 'Bambong Daku'),
(30195, 1127, 'Bambong Diut'),
(30196, 1127, 'Bobongan'),
(30197, 1127, 'Campo IV'),
(30198, 1127, 'Campo V'),
(30199, 1127, 'Caniangan'),
(30200, 1127, 'Dipalusan'),
(30201, 1127, 'Eastern Bobongan'),
(30202, 1127, 'Esperanza'),
(30203, 1127, 'Gapasan'),
(30204, 1127, 'Katipunan'),
(30205, 1127, 'Kauswagan'),
(30206, 1127, 'Lower Sambulawan'),
(30207, 1127, 'Mabini'),
(30208, 1127, 'Magsaysay'),
(30209, 1127, 'Malating'),
(30210, 1127, 'Paradise'),
(30211, 1127, 'Pasingkalan'),
(30212, 1127, 'Poblacion'),
(30213, 1127, 'San Fernando'),
(30214, 1127, 'Santo Rosario'),
(30215, 1127, 'Sapa Anding'),
(30216, 1127, 'Sinaguing'),
(30217, 1127, 'Switch'),
(30218, 1127, 'Upper Laperian'),
(30219, 1127, 'Wakat'),
(30220, 1128, 'Betinan'),
(30221, 1128, 'Bulawan'),
(30222, 1128, 'Calube'),
(30223, 1128, 'Concepcion'),
(30224, 1128, 'Dao-an'),
(30225, 1128, 'Dumalian'),
(30226, 1128, 'Fatima'),
(30227, 1128, 'Langilan'),
(30228, 1128, 'Lantawan'),
(30229, 1128, 'Laperian'),
(30230, 1128, 'Libuganan'),
(30231, 1128, 'Limonan'),
(30232, 1128, 'Mati'),
(30233, 1128, 'Ocapan'),
(30234, 1128, 'Poblacion'),
(30235, 1128, 'San Isidro'),
(30236, 1128, 'Sayog'),
(30237, 1128, 'Tapian'),
(30238, 1129, 'Bag-ong Misamis'),
(30239, 1129, 'Bubual'),
(30240, 1129, 'Buton'),
(30241, 1129, 'Culasian'),
(30242, 1129, 'Daplayan'),
(30243, 1129, 'Kalilangan'),
(30244, 1129, 'Kapamanok'),
(30245, 1129, 'Kondum'),
(30246, 1129, 'Lumbayao'),
(30247, 1129, 'Mabuhay'),
(30248, 1129, 'Marcos Village'),
(30249, 1129, 'Miasin'),
(30250, 1129, 'Molansong'),
(30251, 1129, 'Pantad'),
(30252, 1129, 'Pao'),
(30253, 1129, 'Payag'),
(30254, 1129, 'Poblacion'),
(30255, 1129, 'Pongapong'),
(30256, 1129, 'Sagasan'),
(30257, 1129, 'Sacbulan'),
(30258, 1129, 'Senior'),
(30259, 1129, 'Songgoy'),
(30260, 1129, 'Tandubuay'),
(30261, 1129, 'Ticala Island'),
(30262, 1129, 'Taniapan'),
(30263, 1129, 'Tubo-pait'),
(30264, 1129, 'Villakapa'),
(30265, 1129, 'San Juan'),
(30266, 1130, 'Abong-abong'),
(30267, 1130, 'Baganian'),
(30268, 1130, 'Baya-baya'),
(30269, 1130, 'Capisan'),
(30270, 1130, 'Concepcion'),
(30271, 1130, 'Culabay'),
(30272, 1130, 'Lumbia'),
(30273, 1130, 'Mabuhay'),
(30274, 1130, 'Malim'),
(30275, 1130, 'Manikaan'),
(30276, 1130, 'New Oroquieta'),
(30277, 1130, 'Poblacion'),
(30278, 1130, 'San Francisco'),
(30279, 1130, 'Tultolan'),
(30280, 1130, 'Doña Josefina'),
(30281, 1131, 'Alang-alang'),
(30282, 1131, 'Bag-ong Kauswagan'),
(30283, 1131, 'Bag-ong Tabogon'),
(30284, 1131, 'Balugo'),
(30285, 1131, 'Fabian'),
(30286, 1131, 'Cabgan'),
(30287, 1131, 'Calolot'),
(30288, 1131, 'Dimalinao'),
(30289, 1131, 'Gabunon'),
(30290, 1131, 'Happy Valley (Pob.)'),
(30291, 1131, 'Libato'),
(30292, 1131, 'Limamawan'),
(30293, 1131, 'Lower Liasan'),
(30294, 1131, 'Lower Lodiong (Pob.)'),
(30295, 1131, 'Lower Tiparak'),
(30296, 1131, 'Lower Usogan'),
(30297, 1131, 'Maya-maya'),
(30298, 1131, 'New Village (Pob.)'),
(30299, 1131, 'Pelocoban'),
(30300, 1131, 'Riverside (Pob.)'),
(30301, 1131, 'Sagrada Familia'),
(30302, 1131, 'San Jose'),
(30303, 1131, 'Sumalig'),
(30304, 1131, 'Tuluan'),
(30305, 1131, 'Tungawan'),
(30306, 1131, 'Upper Liason'),
(30307, 1131, 'Upper Lodiong'),
(30308, 1131, 'Upper Tiparak'),
(30309, 1131, 'Angeles'),
(30310, 1131, 'Kapalaran'),
(30311, 1131, 'San Vicente'),
(30312, 1132, 'Alindahaw'),
(30313, 1132, 'Baclay'),
(30314, 1132, 'Balimbingan'),
(30315, 1132, 'Buenasuerte'),
(30316, 1132, 'Camanga'),
(30317, 1132, 'Curvada'),
(30318, 1132, 'Laperian'),
(30319, 1132, 'Libertad'),
(30320, 1132, 'Lower Bayao'),
(30321, 1132, 'Luy-a'),
(30322, 1132, 'Manilan'),
(30323, 1132, 'Manlayag'),
(30324, 1132, 'Militar'),
(30325, 1132, 'Navalan'),
(30326, 1132, 'Panduma Senior'),
(30327, 1132, 'Sambulawan'),
(30328, 1132, 'San Antonio'),
(30329, 1132, 'San Carlos (Pob.)'),
(30330, 1132, 'Santo Niño (Pob.)'),
(30331, 1132, 'Santo Rosario'),
(30332, 1132, 'Sugod'),
(30333, 1132, 'Tabuan'),
(30334, 1132, 'Tagulo'),
(30335, 1132, 'Tinotungan'),
(30336, 1132, 'Upper Bayao'),
(30337, 1133, 'Arena Blanco'),
(30338, 1133, 'Ayala'),
(30339, 1133, 'Baliwasan'),
(30340, 1133, 'Baluno'),
(30341, 1133, 'Boalan'),
(30342, 1133, 'Bolong'),
(30343, 1133, 'Buenavista'),
(30344, 1133, 'Bunguiao'),
(30345, 1133, 'Busay'),
(30346, 1133, 'Cabaluay'),
(30347, 1133, 'Cabatangan'),
(30348, 1133, 'Cacao'),
(30349, 1133, 'Calabasa'),
(30350, 1133, 'Calarian'),
(30351, 1133, 'Campo Islam'),
(30352, 1133, 'Canelar'),
(30353, 1133, 'Cawit'),
(30354, 1133, 'Culianan'),
(30355, 1133, 'Curuan'),
(30356, 1133, 'Dita'),
(30357, 1133, 'Divisoria'),
(30358, 1133, 'Dulian (Upper Bunguiao)'),
(30359, 1133, 'Dulian (Upper Pasonanca)'),
(30360, 1133, 'Guisao'),
(30361, 1133, 'Guiwan'),
(30362, 1133, 'La Paz'),
(30363, 1133, 'Labuan'),
(30364, 1133, 'Lamisahan'),
(30365, 1133, 'Landang Gua'),
(30366, 1133, 'Landang Laum'),
(30367, 1133, 'Lanzones'),
(30368, 1133, 'Lapakan'),
(30369, 1133, 'Latuan'),
(30370, 1133, 'Limaong'),
(30371, 1133, 'Limpapa'),
(30372, 1133, 'Lubigan'),
(30373, 1133, 'Lumayang'),
(30374, 1133, 'Lumbangan'),
(30375, 1133, 'Lunzuran'),
(30376, 1133, 'Maasin'),
(30377, 1133, 'Malagutay'),
(30378, 1133, 'Mampang'),
(30379, 1133, 'Manalipa'),
(30380, 1133, 'Mangusu'),
(30381, 1133, 'Manicahan'),
(30382, 1133, 'Mariki'),
(30383, 1133, 'Mercedes'),
(30384, 1133, 'Muti'),
(30385, 1133, 'Pamucutan'),
(30386, 1133, 'Pangapuyan'),
(30387, 1133, 'Panubigan'),
(30388, 1133, 'Pasilmanta'),
(30389, 1133, 'Pasonanca'),
(30390, 1133, 'Patalon'),
(30391, 1133, 'Barangay Zone I (Pob.)'),
(30392, 1133, 'Barangay Zone II (Pob.)'),
(30393, 1133, 'Barangay Zone III (Pob.)'),
(30394, 1133, 'Barangay Zone IV (Pob.)'),
(30395, 1133, 'Putik'),
(30396, 1133, 'Quiniput'),
(30397, 1133, 'Recodo'),
(30398, 1133, 'Rio Hondo'),
(30399, 1133, 'Salaan'),
(30400, 1133, 'San Jose Cawa-cawa'),
(30401, 1133, 'San Jose Gusu'),
(30402, 1133, 'San Roque'),
(30403, 1133, 'Sangali'),
(30404, 1133, 'Santa Barbara'),
(30405, 1133, 'Santa Catalina'),
(30406, 1133, 'Santa Maria'),
(30407, 1133, 'Santo Niño'),
(30408, 1133, 'Sibulao'),
(30409, 1133, 'Sinubung'),
(30410, 1133, 'Sinunoc'),
(30411, 1133, 'Tagasilay'),
(30412, 1133, 'Taguiti'),
(30413, 1133, 'Talabaan'),
(30414, 1133, 'Talisayan'),
(30415, 1133, 'Talon-talon'),
(30416, 1133, 'Taluksangay'),
(30417, 1133, 'Tetuan'),
(30418, 1133, 'Tictapul'),
(30419, 1133, 'Tigbalabag'),
(30420, 1133, 'Tigtabon'),
(30421, 1133, 'Tolosa'),
(30422, 1133, 'Tugbungan'),
(30423, 1133, 'Tulungatung'),
(30424, 1133, 'Tumaga'),
(30425, 1133, 'Tumalutab'),
(30426, 1133, 'Tumitus'),
(30427, 1133, 'Vitali'),
(30428, 1133, 'Capisan'),
(30429, 1133, 'Camino Nuevo'),
(30430, 1133, 'Licomo'),
(30431, 1133, 'Kasanyangan'),
(30432, 1133, 'Pasobolong'),
(30433, 1133, 'Victoria'),
(30434, 1133, 'Zambowood'),
(30435, 1134, 'Baking'),
(30436, 1134, 'Bagong Kahayag'),
(30437, 1134, 'Biswangan'),
(30438, 1134, 'Bululawan'),
(30439, 1134, 'Dagum'),
(30440, 1134, 'Gasa'),
(30441, 1134, 'Gatub'),
(30442, 1134, 'Poblacion'),
(30443, 1134, 'Lukuan'),
(30444, 1134, 'Matalang'),
(30445, 1134, 'Sapang Pinoles'),
(30446, 1134, 'Sebuguey'),
(30447, 1134, 'Tiwales'),
(30448, 1134, 'Tubod'),
(30449, 1135, 'Bogo Calabat'),
(30450, 1135, 'Dawa'),
(30451, 1135, 'Ebarle'),
(30452, 1135, 'Upper Bagong Tudela (Pob.)'),
(30453, 1135, 'Leonardo'),
(30454, 1135, 'Litapan'),
(30455, 1135, 'Lower Bagong Tudela'),
(30456, 1135, 'Mansanas'),
(30457, 1135, 'Moradji'),
(30458, 1135, 'Nemeño'),
(30459, 1135, 'Nopulan'),
(30460, 1135, 'Sebukang'),
(30461, 1135, 'Tagaytay Hill'),
(30462, 1135, 'Gumahan (Pob.)'),
(30463, 1136, 'Balabawan'),
(30464, 1136, 'Balong-balong'),
(30465, 1136, 'Colojo'),
(30466, 1136, 'Liasan'),
(30467, 1136, 'Liguac'),
(30468, 1136, 'Limbayan'),
(30469, 1136, 'Lower Paniki-an'),
(30470, 1136, 'Matin-ao'),
(30471, 1136, 'Panubigan'),
(30472, 1136, 'Poblacion'),
(30473, 1136, 'Punta Flecha'),
(30474, 1136, 'Sugbay Dos'),
(30475, 1136, 'Tongao'),
(30476, 1136, 'Upper Paniki-an'),
(30477, 1136, 'San Isidro'),
(30478, 1137, 'Bag-ong Baroy'),
(30479, 1137, 'Bag-ong Oroquieta'),
(30480, 1137, 'Barubuhan'),
(30481, 1137, 'Bulanay'),
(30482, 1137, 'Datagan'),
(30483, 1137, 'Eastern Poblacion'),
(30484, 1137, 'Lantawan'),
(30485, 1137, 'Libertad'),
(30486, 1137, 'Lumangoy'),
(30487, 1137, 'New Carmen'),
(30488, 1137, 'Picturan'),
(30489, 1137, 'Poblacion'),
(30490, 1137, 'Rizal'),
(30491, 1137, 'San Miguel'),
(30492, 1137, 'Santo Niño'),
(30493, 1137, 'Sawa'),
(30494, 1137, 'Tungawan'),
(30495, 1137, 'Upper Sicpao'),
(30496, 1138, 'Bui-os'),
(30497, 1138, 'Cogon'),
(30498, 1138, 'Danan'),
(30499, 1138, 'Kabatan'),
(30500, 1138, 'Kapatagan'),
(30501, 1138, 'Limason'),
(30502, 1138, 'Linoguayan'),
(30503, 1138, 'Lumbal'),
(30504, 1138, 'Lunib'),
(30505, 1138, 'Maculay'),
(30506, 1138, 'Maraya'),
(30507, 1138, 'Sagucan'),
(30508, 1138, 'Waling-waling'),
(30509, 1138, 'Ambulon'),
(30510, 1139, 'Bagong Oroquieta'),
(30511, 1139, 'Baguitan'),
(30512, 1139, 'Balongating'),
(30513, 1139, 'Canunan'),
(30514, 1139, 'Dacsol'),
(30515, 1139, 'Dagohoy'),
(30516, 1139, 'Dalapang'),
(30517, 1139, 'Datagan'),
(30518, 1139, 'Poblacion'),
(30519, 1139, 'Guling'),
(30520, 1139, 'Katipunan'),
(30521, 1139, 'Lintum'),
(30522, 1139, 'Litan'),
(30523, 1139, 'Magting'),
(30524, 1139, 'Regla'),
(30525, 1139, 'Sikatuna'),
(30526, 1139, 'Singclot'),
(30527, 1140, 'Begong'),
(30528, 1140, 'Busol'),
(30529, 1140, 'Caluma'),
(30530, 1140, 'Diana Countryside'),
(30531, 1140, 'Guinlin'),
(30532, 1140, 'Lacarayan'),
(30533, 1140, 'Lacupayan'),
(30534, 1140, 'Libayoy'),
(30535, 1140, 'Limas'),
(30536, 1140, 'Longmot'),
(30537, 1140, 'Maragang'),
(30538, 1140, 'Mate'),
(30539, 1140, 'Nangan-nangan'),
(30540, 1140, 'New Tuburan'),
(30541, 1140, 'Nilo'),
(30542, 1140, 'Tigbao'),
(30543, 1140, 'Timolan'),
(30544, 1140, 'Upper Nilo'),
(30545, 1141, 'Alegria'),
(30546, 1141, 'Milagrosa'),
(30547, 1141, 'Bella'),
(30548, 1141, 'Calades'),
(30549, 1141, 'Dawa-dawa'),
(30550, 1141, 'Gulayon'),
(30551, 1141, 'Ilisan'),
(30552, 1141, 'Kawayan'),
(30553, 1141, 'Kauswagan'),
(30554, 1141, 'La Paz'),
(30555, 1141, 'Lambuyogan'),
(30556, 1141, 'Lapirawan'),
(30557, 1141, 'Litayon'),
(30558, 1141, 'Lutiman'),
(30559, 1141, 'Naga-naga'),
(30560, 1141, 'Pandan-pandan'),
(30561, 1141, 'Payongan'),
(30562, 1141, 'Poblacion'),
(30563, 1141, 'Santa Maria'),
(30564, 1141, 'Santo Niño'),
(30565, 1141, 'Talaptap'),
(30566, 1141, 'Tampalan'),
(30567, 1141, 'Tandiong Muslim'),
(30568, 1141, 'Timbang-timbang'),
(30569, 1141, 'Bagong Buhay'),
(30570, 1141, 'Concepcion'),
(30571, 1141, 'Kapatagan'),
(30572, 1142, 'Basalem'),
(30573, 1142, 'Bawang'),
(30574, 1142, 'Bulaan'),
(30575, 1142, 'Compostela'),
(30576, 1142, 'Del Monte'),
(30577, 1142, 'Guitom'),
(30578, 1142, 'Guminta'),
(30579, 1142, 'Labrador'),
(30580, 1142, 'Lantawan'),
(30581, 1142, 'Mabuhay'),
(30582, 1142, 'Maganay'),
(30583, 1142, 'Manlin'),
(30584, 1142, 'Muyo'),
(30585, 1142, 'Pamintayan'),
(30586, 1142, 'Poblacion'),
(30587, 1142, 'Talamimi'),
(30588, 1142, 'Villacastor'),
(30589, 1142, 'Agutayan'),
(30590, 1142, 'Bagong Borbon'),
(30591, 1142, 'Bliss'),
(30592, 1142, 'Danlugan'),
(30593, 1142, 'Pling'),
(30594, 1142, 'Pulog'),
(30595, 1142, 'San Jose'),
(30596, 1142, 'Talairan'),
(30597, 1142, 'Datu Panas'),
(30598, 1142, 'Guintuloan'),
(30599, 1143, 'Balangao'),
(30600, 1143, 'Pilar'),
(30601, 1143, 'Poblacion'),
(30602, 1143, 'Ditay'),
(30603, 1143, 'Gaulan'),
(30604, 1143, 'Goling'),
(30605, 1143, 'Guinoman'),
(30606, 1143, 'Kauswagan'),
(30607, 1143, 'Lindang'),
(30608, 1143, 'Lobing'),
(30609, 1143, 'Paradise'),
(30610, 1143, 'Sampoli A'),
(30611, 1143, 'Songcuya'),
(30612, 1143, 'Santa Cruz'),
(30613, 1143, 'Butong'),
(30614, 1143, 'Sampoli B'),
(30615, 1143, 'Luop'),
(30616, 1143, 'Manangon'),
(30617, 1143, 'Mejo'),
(30618, 1143, 'Natan'),
(30619, 1143, 'Tinongtongan'),
(30620, 1143, 'Tuno'),
(30621, 1144, 'Lower Baluran'),
(30622, 1144, 'Baluyan'),
(30623, 1144, 'Cana-an'),
(30624, 1144, 'Dumpoc'),
(30625, 1144, 'Gandiangan'),
(30626, 1144, 'Israel'),
(30627, 1144, 'La Victoria'),
(30628, 1144, 'Lumpanac'),
(30629, 1144, 'Little Baguio'),
(30630, 1144, 'Lumbog'),
(30631, 1144, 'Mali Little Baguio'),
(30632, 1144, 'Poblacion'),
(30633, 1144, 'San Jose'),
(30634, 1144, 'Santa Barbara'),
(30635, 1144, 'Balugo'),
(30636, 1144, 'Balungisan'),
(30637, 1144, 'Pulawan'),
(30638, 1144, 'Upper Baluran'),
(30639, 1145, 'Bacalan'),
(30640, 1145, 'Bangkerohan'),
(30641, 1145, 'Bulu-an'),
(30642, 1145, 'Don Andres'),
(30643, 1145, 'Guituan'),
(30644, 1145, 'Ipil Heights'),
(30645, 1145, 'Labi'),
(30646, 1145, 'Lower Ipil Heights'),
(30647, 1145, 'Lower Taway'),
(30648, 1145, 'Lumbia'),
(30649, 1145, 'Magdaup'),
(30650, 1145, 'Pangi'),
(30651, 1145, 'Poblacion'),
(30652, 1145, 'Sanito'),
(30653, 1145, 'Suclema'),
(30654, 1145, 'Taway'),
(30655, 1145, 'Tenan'),
(30656, 1145, 'Tiayon'),
(30657, 1145, 'Timalang'),
(30658, 1145, 'Tomitom'),
(30659, 1145, 'Upper Pangi'),
(30660, 1145, 'Veteran\'s Village'),
(30661, 1145, 'Makilas'),
(30662, 1145, 'Caparan'),
(30663, 1145, 'Domandan'),
(30664, 1145, 'Doña Josefa'),
(30665, 1145, 'Logan'),
(30666, 1145, 'Maasin'),
(30667, 1146, 'Banker'),
(30668, 1146, 'Bolo Batallion'),
(30669, 1146, 'Buayan'),
(30670, 1146, 'Cainglet'),
(30671, 1146, 'Calapan'),
(30672, 1146, 'Calubihan'),
(30673, 1146, 'Concepcion'),
(30674, 1146, 'Dipala'),
(30675, 1146, 'Gacbusan'),
(30676, 1146, 'Goodyear'),
(30677, 1146, 'Lacnapan'),
(30678, 1146, 'Little Baguio'),
(30679, 1146, 'Lumbayao'),
(30680, 1146, 'Timuay Danda'),
(30681, 1146, 'Nazareth'),
(30682, 1146, 'Palinta'),
(30683, 1146, 'Peñaranda'),
(30684, 1146, 'Poblacion'),
(30685, 1146, 'Riverside'),
(30686, 1146, 'Sanghanan'),
(30687, 1146, 'Santa Cruz'),
(30688, 1146, 'Sayao'),
(30689, 1146, 'Simbol'),
(30690, 1146, 'Sininan'),
(30691, 1146, 'Shiolan'),
(30692, 1146, 'Tampilisan'),
(30693, 1146, 'Tamin'),
(30694, 1146, 'Tigbangagan'),
(30695, 1146, 'Diampak'),
(30696, 1147, 'Abunda'),
(30697, 1147, 'Bagong Silang'),
(30698, 1147, 'Bangkaw-bangkaw'),
(30699, 1147, 'Caliran'),
(30700, 1147, 'Catipan'),
(30701, 1147, 'Tandu-Comot'),
(30702, 1147, 'Kauswagan'),
(30703, 1147, 'Ligaya'),
(30704, 1147, 'Looc-Barlak'),
(30705, 1147, 'Malinao'),
(30706, 1147, 'Pamansaan'),
(30707, 1147, 'Pinalim'),
(30708, 1147, 'Poblacion'),
(30709, 1147, 'Punawan'),
(30710, 1147, 'Santo Niño'),
(30711, 1147, 'Sawa'),
(30712, 1147, 'Sioton'),
(30713, 1147, 'Taguisian'),
(30714, 1148, 'Bacao'),
(30715, 1148, 'Basak-bawang'),
(30716, 1148, 'Camanga'),
(30717, 1148, 'Candiis'),
(30718, 1148, 'Catituan'),
(30719, 1148, 'Dansulao'),
(30720, 1148, 'Del Pilar'),
(30721, 1148, 'Guilawa'),
(30722, 1148, 'Kigay'),
(30723, 1148, 'La Dicha'),
(30724, 1148, 'Lipacan'),
(30725, 1148, 'Logpond'),
(30726, 1148, 'Mabini'),
(30727, 1148, 'Malungon'),
(30728, 1148, 'Mulom'),
(30729, 1148, 'Overland'),
(30730, 1148, 'Palalian'),
(30731, 1148, 'Payag'),
(30732, 1148, 'Poblacion'),
(30733, 1148, 'Rebocon'),
(30734, 1148, 'San Vicente'),
(30735, 1148, 'Sinusayan'),
(30736, 1148, 'Tackling'),
(30737, 1148, 'Tigabon'),
(30738, 1148, 'Bontong'),
(30739, 1149, 'Aguinaldo'),
(30740, 1149, 'Baga'),
(30741, 1149, 'Baluno'),
(30742, 1149, 'Cabong'),
(30743, 1149, 'Gubawang'),
(30744, 1149, 'Kaliantana'),
(30745, 1149, 'La Paz'),
(30746, 1149, 'Lower Sulitan'),
(30747, 1149, 'Mamagon'),
(30748, 1149, 'Marsolo'),
(30749, 1149, 'Poblacion'),
(30750, 1149, 'San Isidro'),
(30751, 1149, 'Santa Clara'),
(30752, 1149, 'Crossing Sta. Clara'),
(30753, 1149, 'Sulo'),
(30754, 1149, 'Tambanan'),
(30755, 1149, 'Taytay Manubo'),
(30756, 1149, 'Upper Sulitan'),
(30757, 1149, 'Bangkaw-bangkaw'),
(30758, 1149, 'Guintoloan'),
(30759, 1149, 'Sandayong'),
(30760, 1149, 'Tilubog'),
(30761, 1149, 'Tipan'),
(30762, 1150, 'Bateria'),
(30763, 1150, 'Kahayagan'),
(30764, 1150, 'Calais'),
(30765, 1150, 'Esperanza'),
(30766, 1150, 'Fama'),
(30767, 1150, 'Galas'),
(30768, 1150, 'Gandaan'),
(30769, 1150, 'Looc Sapi'),
(30770, 1150, 'Matim'),
(30771, 1150, 'Noque'),
(30772, 1150, 'Solar (Pob.)'),
(30773, 1150, 'Pulo Laum'),
(30774, 1150, 'Pulo Mabao'),
(30775, 1150, 'San Isidro'),
(30776, 1150, 'Santa Maria'),
(30777, 1150, 'Tambanan'),
(30778, 1150, 'Villacorte'),
(30779, 1150, 'Villagonzalo'),
(30780, 1150, 'San Jose'),
(30781, 1151, 'Balian'),
(30782, 1151, 'Balungisan'),
(30783, 1151, 'Bulacan'),
(30784, 1151, 'Bulawan'),
(30785, 1151, 'Calape'),
(30786, 1151, 'Dalama'),
(30787, 1151, 'Fatima'),
(30788, 1151, 'Guintolan'),
(30789, 1151, 'Katipunan'),
(30790, 1151, 'Kima'),
(30791, 1151, 'Kulasian'),
(30792, 1151, 'Labatan'),
(30793, 1151, 'Mountain View'),
(30794, 1151, 'Nanan'),
(30795, 1151, 'Poblacion'),
(30796, 1151, 'San Roque'),
(30797, 1151, 'San Vicente'),
(30798, 1151, 'Mayabo'),
(30799, 1151, 'Minundas'),
(30800, 1151, 'Talaptap'),
(30801, 1151, 'Balogo'),
(30802, 1151, 'Binangonan'),
(30803, 1151, 'Guiwan'),
(30804, 1151, 'Kulisap'),
(30805, 1151, 'La Fortuna'),
(30806, 1151, 'San Isidro'),
(30807, 1151, 'Silal'),
(30808, 1151, 'Sumilong'),
(30809, 1151, 'Upper Sumilong'),
(30810, 1152, 'Balansag'),
(30811, 1152, 'Calula'),
(30812, 1152, 'Casacon'),
(30813, 1152, 'Gango'),
(30814, 1152, 'Katipunan'),
(30815, 1152, 'Kulambugan'),
(30816, 1152, 'Mabini'),
(30817, 1152, 'Magsaysay'),
(30818, 1152, 'New Antique'),
(30819, 1152, 'New Sagay'),
(30820, 1152, 'Pres. Roxas'),
(30821, 1152, 'San Antonio'),
(30822, 1152, 'San Fernandino'),
(30823, 1152, 'San Jose'),
(30824, 1152, 'Siawang'),
(30825, 1152, 'Silingan'),
(30826, 1152, 'Surabay'),
(30827, 1152, 'Tilasan'),
(30828, 1152, 'Tupilac'),
(30829, 1152, 'Ali Alsree'),
(30830, 1152, 'Don Perfecto'),
(30831, 1152, 'Malubal'),
(30832, 1152, 'Palmera'),
(30833, 1152, 'Remedios'),
(30834, 1152, 'Santo Rosario'),
(30835, 1152, 'Taruc'),
(30836, 1153, 'Balucanan'),
(30837, 1153, 'Balagon'),
(30838, 1153, 'Balingasan'),
(30839, 1153, 'Batu'),
(30840, 1153, 'Buyogan'),
(30841, 1153, 'Camanga'),
(30842, 1153, 'Coloran'),
(30843, 1153, 'Kimos'),
(30844, 1153, 'Labasan'),
(30845, 1153, 'Laih'),
(30846, 1153, 'Magsaysay'),
(30847, 1153, 'Mahayahay'),
(30848, 1153, 'Maligaya'),
(30849, 1153, 'Maniha'),
(30850, 1153, 'Minsulao'),
(30851, 1153, 'Mirangan'),
(30852, 1153, 'Monching'),
(30853, 1153, 'Paruk'),
(30854, 1153, 'Poblacion'),
(30855, 1153, 'Princesa Sumama'),
(30856, 1153, 'Sibuguey'),
(30857, 1153, 'Bagong Silang'),
(30858, 1153, 'Bataan'),
(30859, 1153, 'Lagting'),
(30860, 1153, 'Logpond'),
(30861, 1153, 'Salinding'),
(30862, 1153, 'San Isidro'),
(30863, 1153, 'Siloh'),
(30864, 1153, 'Villagracia'),
(30865, 1154, 'Aurora'),
(30866, 1154, 'Baganipay'),
(30867, 1154, 'Bolingan'),
(30868, 1154, 'Bualan'),
(30869, 1154, 'Cawilan'),
(30870, 1154, 'Florida'),
(30871, 1154, 'Kasigpitan'),
(30872, 1154, 'Laparay'),
(30873, 1154, 'Mahayahay'),
(30874, 1154, 'Moalboal'),
(30875, 1154, 'Sagay'),
(30876, 1154, 'Samonte'),
(30877, 1154, 'Poblacion'),
(30878, 1154, 'Tuburan'),
(30879, 1155, 'Achasol'),
(30880, 1155, 'Bangco'),
(30881, 1155, 'Camanga'),
(30882, 1155, 'Culasian'),
(30883, 1155, 'Dalangin'),
(30884, 1155, 'Dalisay'),
(30885, 1155, 'Gomotoc'),
(30886, 1155, 'Imelda'),
(30887, 1155, 'Kipit'),
(30888, 1155, 'Kitabog'),
(30889, 1155, 'La Libertad'),
(30890, 1155, 'Longilog'),
(30891, 1155, 'Mabini'),
(30892, 1155, 'Malagandis'),
(30893, 1155, 'Mate'),
(30894, 1155, 'Moalboal'),
(30895, 1155, 'Namnama'),
(30896, 1155, 'New Canaan'),
(30897, 1155, 'Palomoc'),
(30898, 1155, 'Poblacion'),
(30899, 1155, 'Pulidan'),
(30900, 1155, 'San Antonio'),
(30901, 1155, 'Santa Fe'),
(30902, 1155, 'Supit'),
(30903, 1155, 'Tugop'),
(30904, 1155, 'Tugop Muslim'),
(30905, 1155, 'Dalangin Muslim'),
(30906, 1155, 'Poblacion Muslim'),
(30907, 1155, 'Azusano'),
(30908, 1155, 'San Isidro'),
(30909, 1156, 'Baluran'),
(30910, 1156, 'Cayamcam'),
(30911, 1156, 'Langon'),
(30912, 1156, 'Libertad (Pob.)'),
(30913, 1156, 'Linguisan'),
(30914, 1156, 'Looc-labuan'),
(30915, 1156, 'Lower Tungawan'),
(30916, 1156, 'Malungon'),
(30917, 1156, 'San Pedro'),
(30918, 1156, 'Tigbanuang'),
(30919, 1156, 'Tigbucay'),
(30920, 1156, 'Upper Tungawan'),
(30921, 1156, 'San Vicente'),
(30922, 1156, 'Batungan'),
(30923, 1156, 'Loboc'),
(30924, 1156, 'San Isidro'),
(30925, 1156, 'Datu Tumanggong'),
(30926, 1156, 'Sisay'),
(30927, 1156, 'Gaycon'),
(30928, 1156, 'Little Margos'),
(30929, 1156, 'Santo Niño'),
(30930, 1156, 'Taglibas'),
(30931, 1156, 'Tigpalay'),
(30932, 1156, 'Masao'),
(30933, 1156, 'Timbabauan'),
(30934, 1157, 'Aguada'),
(30935, 1157, 'Balatanay'),
(30936, 1157, 'Baluno'),
(30937, 1157, 'Begang'),
(30938, 1157, 'Binuangan'),
(30939, 1157, 'Busay'),
(30940, 1157, 'Cabunbata'),
(30941, 1157, 'Calvario'),
(30942, 1157, 'Carbon'),
(30943, 1157, 'Diki'),
(30944, 1157, 'Isabela Eastside (Pob.)'),
(30945, 1157, 'Isabela Proper (Pob.)'),
(30946, 1157, 'Dona Ramona T. Alano'),
(30947, 1157, 'Kapatagan Grande'),
(30948, 1157, 'Kaumpurnah Zone I'),
(30949, 1157, 'Kaumpurnah Zone II'),
(30950, 1157, 'Kaumpurnah Zone III'),
(30951, 1157, 'Kumalarang'),
(30952, 1157, 'La Piedad (Pob.)'),
(30953, 1157, 'Lampinigan'),
(30954, 1157, 'Lanote'),
(30955, 1157, 'Lukbuton'),
(30956, 1157, 'Lumbang'),
(30957, 1157, 'Makiri'),
(30958, 1157, 'Maligue'),
(30959, 1157, 'Marang-marang'),
(30960, 1157, 'Marketsite (Pob.)'),
(30961, 1157, 'Menzi'),
(30962, 1157, 'Panigayan'),
(30963, 1157, 'Panunsulan'),
(30964, 1157, 'Port Area (Pob.)'),
(30965, 1157, 'Riverside'),
(30966, 1157, 'San Rafael'),
(30967, 1157, 'Santa Barbara'),
(30968, 1157, 'Santa Cruz (Pob.)'),
(30969, 1157, 'Seaside (Pob.)'),
(30970, 1157, 'Sumagdang'),
(30971, 1157, 'Sunrise Village (Pob.)'),
(30972, 1157, 'Tabiawan'),
(30973, 1157, 'Tabuk (Pob.)'),
(30974, 1157, 'Timpul'),
(30975, 1157, 'Kapayawan'),
(30976, 1157, 'Masula'),
(30977, 1157, 'Small Kapatagan'),
(30978, 1158, 'Tampalan'),
(30979, 1158, 'Balintad'),
(30980, 1158, 'Buenavista'),
(30981, 1158, 'Danatag'),
(30982, 1158, 'Kalilangan'),
(30983, 1158, 'Lacolac'),
(30984, 1158, 'Langaon'),
(30985, 1158, 'Liboran'),
(30986, 1158, 'Lingating'),
(30987, 1158, 'Mabuhay'),
(30988, 1158, 'Mabunga'),
(30989, 1158, 'Nicdao'),
(30990, 1158, 'Imbatug (Pob.)'),
(30991, 1158, 'Pualas'),
(30992, 1158, 'Salimbalan'),
(30993, 1158, 'San Vicente'),
(30994, 1158, 'San Miguel'),
(30995, 1159, 'Aludas'),
(30996, 1159, 'Angga-an'),
(30997, 1159, 'Tangkulan'),
(30998, 1159, 'Kinapat'),
(30999, 1159, 'Kiraon'),
(31000, 1159, 'Kitingting'),
(31001, 1159, 'Lagandang'),
(31002, 1159, 'Macapari'),
(31003, 1159, 'Maican'),
(31004, 1159, 'Migcawayan'),
(31005, 1159, 'New Compostela'),
(31006, 1159, 'Old Damulog'),
(31007, 1159, 'Omonay'),
(31008, 1159, 'Poblacion'),
(31009, 1159, 'Pocopoco'),
(31010, 1159, 'Sampagar'),
(31011, 1159, 'San Isidro'),
(31012, 1160, 'Barongcot'),
(31013, 1160, 'Bugwak'),
(31014, 1160, 'Dolorosa'),
(31015, 1160, 'Kapalaran'),
(31016, 1160, 'Kianggat'),
(31017, 1160, 'Lourdes'),
(31018, 1160, 'Macarthur'),
(31019, 1160, 'Miaray'),
(31020, 1160, 'Migcuya'),
(31021, 1160, 'New Visayas'),
(31022, 1160, 'Osmeña'),
(31023, 1160, 'Poblacion'),
(31024, 1160, 'Sagbayan'),
(31025, 1160, 'San Vicente'),
(31026, 1161, 'Cabadiangan'),
(31027, 1161, 'Bocboc'),
(31028, 1161, 'Buyot'),
(31029, 1161, 'Calaocalao'),
(31030, 1161, 'Don Carlos Norte'),
(31031, 1161, 'Embayao'),
(31032, 1161, 'Kalubihon'),
(31033, 1161, 'Kasigkot'),
(31034, 1161, 'Kawilihan'),
(31035, 1161, 'Kiara'),
(31036, 1161, 'Kibatang'),
(31037, 1161, 'Mahayahay'),
(31038, 1161, 'Manlamonay'),
(31039, 1161, 'Maraymaray'),
(31040, 1161, 'Mauswagon'),
(31041, 1161, 'Minsalagan'),
(31042, 1161, 'New Nongnongan'),
(31043, 1161, 'New Visayas'),
(31044, 1161, 'Old Nongnongan'),
(31045, 1161, 'Pinamaloy'),
(31046, 1161, 'Don Carlos Sur (Pob.)'),
(31047, 1161, 'Pualas'),
(31048, 1161, 'San Antonio East'),
(31049, 1161, 'San Antonio West'),
(31050, 1161, 'San Francisco'),
(31051, 1161, 'San Nicolas'),
(31052, 1161, 'San Roque'),
(31053, 1161, 'Sinangguyan'),
(31054, 1161, 'Bismartz'),
(31055, 1162, 'Bontongon'),
(31056, 1162, 'Bulonay'),
(31057, 1162, 'Capitan Bayong'),
(31058, 1162, 'Cawayan'),
(31059, 1162, 'Dumalaguing'),
(31060, 1162, 'Guihean'),
(31061, 1162, 'Hagpa'),
(31062, 1162, 'Impalutao'),
(31063, 1162, 'Kalabugao'),
(31064, 1162, 'Kibenton'),
(31065, 1162, 'La Fortuna'),
(31066, 1162, 'Poblacion'),
(31067, 1162, 'Sayawan'),
(31068, 1163, 'Bagongbayan'),
(31069, 1163, 'Bagor'),
(31070, 1163, 'Balaoro'),
(31071, 1163, 'Baroy'),
(31072, 1163, 'Cabadiangan'),
(31073, 1163, 'Husayan'),
(31074, 1163, 'Kibalagon'),
(31075, 1163, 'Mabuhay'),
(31076, 1163, 'Malinao'),
(31077, 1163, 'Matampay'),
(31078, 1163, 'Sibonga'),
(31079, 1163, 'Pay-as'),
(31080, 1163, 'Pinamanguhan'),
(31081, 1163, 'Poblacion'),
(31082, 1163, 'Salvacion'),
(31083, 1163, 'San Andres'),
(31084, 1163, 'Kibogtok'),
(31085, 1164, 'Bangbang'),
(31086, 1164, 'Baborawon'),
(31087, 1164, 'Canituan'),
(31088, 1164, 'Kibaning'),
(31089, 1164, 'Kinura'),
(31090, 1164, 'Lampanusan'),
(31091, 1164, 'Maca-opao'),
(31092, 1164, 'Malinao'),
(31093, 1164, 'Pamotolon'),
(31094, 1164, 'Poblacion'),
(31095, 1164, 'Public'),
(31096, 1164, 'Ninoy Aquino'),
(31097, 1164, 'San Vicente Ferrer'),
(31098, 1164, 'West Poblacion'),
(31099, 1165, 'Balintawak'),
(31100, 1165, 'Cagawasan'),
(31101, 1165, 'East Kibawe (Pob.)'),
(31102, 1165, 'Gutapol'),
(31103, 1165, 'Pinamula'),
(31104, 1165, 'Kiorao'),
(31105, 1165, 'Kisawa'),
(31106, 1165, 'Labuagon'),
(31107, 1165, 'Magsaysay'),
(31108, 1165, 'Marapangi'),
(31109, 1165, 'Mascariñas'),
(31110, 1165, 'Natulongan'),
(31111, 1165, 'New Kidapawan'),
(31112, 1165, 'Old Kibawe'),
(31113, 1165, 'Romagooc'),
(31114, 1165, 'Sampaguita'),
(31115, 1165, 'Sanipon'),
(31116, 1165, 'Spring'),
(31117, 1165, 'Talahiron'),
(31118, 1165, 'Tumaras'),
(31119, 1165, 'West Kibawe (Pob.)'),
(31120, 1165, 'Bukang Liwayway'),
(31121, 1165, 'Palma'),
(31122, 1166, 'Balangigay'),
(31123, 1166, 'Balukbukan'),
(31124, 1166, 'Bershiba'),
(31125, 1166, 'Bobong'),
(31126, 1166, 'Bolocaon'),
(31127, 1166, 'Cabalantian'),
(31128, 1166, 'Calapaton'),
(31129, 1166, 'Sinaysayan'),
(31130, 1166, 'Kahusayan'),
(31131, 1166, 'Kalumihan'),
(31132, 1166, 'Kauyonan'),
(31133, 1166, 'Kimolong'),
(31134, 1166, 'Kitaihon'),
(31135, 1166, 'Kitobo'),
(31136, 1166, 'Magsaysay'),
(31137, 1166, 'Malobalo'),
(31138, 1166, 'Metebagao'),
(31139, 1166, 'Sagundanon'),
(31140, 1166, 'Pagan'),
(31141, 1166, 'Panganan'),
(31142, 1166, 'Poblacion'),
(31143, 1166, 'San Isidro'),
(31144, 1166, 'San Lorenzo'),
(31145, 1166, 'Santo Rosario'),
(31146, 1166, 'Sinuda'),
(31147, 1166, 'Tandong'),
(31148, 1166, 'Tawas'),
(31149, 1166, 'White Kulaman'),
(31150, 1166, 'Napalico'),
(31151, 1166, 'Digongan'),
(31152, 1166, 'Kiulom'),
(31153, 1166, 'Binoongan'),
(31154, 1166, 'Kipilas'),
(31155, 1166, 'East Dalurong'),
(31156, 1166, 'West Dalurong'),
(31157, 1167, 'Alanib'),
(31158, 1167, 'Baclayon'),
(31159, 1167, 'Balila'),
(31160, 1167, 'Bantuanon'),
(31161, 1167, 'Basak'),
(31162, 1167, 'Bugcaon'),
(31163, 1167, 'Ka-atoan'),
(31164, 1167, 'Capitan Juan'),
(31165, 1167, 'Cawayan'),
(31166, 1167, 'Kulasihan'),
(31167, 1167, 'Kibangay'),
(31168, 1167, 'Poblacion'),
(31169, 1167, 'Songco'),
(31170, 1167, 'Victory'),
(31171, 1168, 'Capihan'),
(31172, 1168, 'Crossing'),
(31173, 1168, 'Gango'),
(31174, 1168, 'Kiliog'),
(31175, 1168, 'Kinawe'),
(31176, 1168, 'Laturan'),
(31177, 1168, 'Maambong'),
(31178, 1168, 'Nangka'),
(31179, 1168, 'Palabucan'),
(31180, 1168, 'Poblacion'),
(31181, 1168, 'Pongol'),
(31182, 1168, 'San Jose'),
(31183, 1168, 'Santa Fe'),
(31184, 1168, 'Sil-ipon'),
(31185, 1169, 'Aglayan'),
(31186, 1169, 'Bangcud'),
(31187, 1169, 'Busdi'),
(31188, 1169, 'Cabangahan'),
(31189, 1169, 'Caburacanan'),
(31190, 1169, 'Canayan'),
(31191, 1169, 'Capitan Angel'),
(31192, 1169, 'Casisang'),
(31193, 1169, 'Dalwangan'),
(31194, 1169, 'Imbayao'),
(31195, 1169, 'Indalaza'),
(31196, 1169, 'Kalasungay'),
(31197, 1169, 'Kabalabag'),
(31198, 1169, 'Kulaman'),
(31199, 1169, 'Laguitas'),
(31200, 1169, 'Patpat'),
(31201, 1169, 'Linabo'),
(31202, 1169, 'Apo Macote'),
(31203, 1169, 'Miglamin'),
(31204, 1169, 'Magsaysay'),
(31205, 1169, 'Maligaya'),
(31206, 1169, 'Managok'),
(31207, 1169, 'Manalog'),
(31208, 1169, 'Mapayag'),
(31209, 1169, 'Mapulo'),
(31210, 1169, 'Barangay 1 (Pob.)'),
(31211, 1169, 'Barangay 2 (Pob.)'),
(31212, 1169, 'Barangay 3 (Pob.)'),
(31213, 1169, 'Barangay 4 (Pob.)'),
(31214, 1169, 'Barangay 5 (Pob.)'),
(31215, 1169, 'Barangay 6 (Pob.)'),
(31216, 1169, 'Barangay 7 (Pob.)'),
(31217, 1169, 'Barangay 8 (Pob.)'),
(31218, 1169, 'Barangay 9 (Pob.)'),
(31219, 1169, 'Barangay 10 (Pob.)'),
(31220, 1169, 'Barangay 11 (Pob.)'),
(31221, 1169, 'Saint Peter'),
(31222, 1169, 'San Jose'),
(31223, 1169, 'San Martin'),
(31224, 1169, 'Santo Niño'),
(31225, 1169, 'Silae'),
(31226, 1169, 'Simaya'),
(31227, 1169, 'Sinanglanan'),
(31228, 1169, 'Sumpong'),
(31229, 1169, 'Violeta'),
(31230, 1169, 'Zamboanguita'),
(31231, 1170, 'Kalingking'),
(31232, 1170, 'Kiabo'),
(31233, 1170, 'Mindagat'),
(31234, 1170, 'Omagling'),
(31235, 1170, 'Patpat'),
(31236, 1170, 'Poblacion'),
(31237, 1170, 'Sampiano'),
(31238, 1170, 'San Luis'),
(31239, 1170, 'Santa Ines'),
(31240, 1170, 'Silo-o'),
(31241, 1170, 'Sumalsag'),
(31242, 1171, 'Agusan Canyon'),
(31243, 1171, 'Alae'),
(31244, 1171, 'Dahilayan'),
(31245, 1171, 'Dalirig'),
(31246, 1171, 'Damilag'),
(31247, 1171, 'Diclum'),
(31248, 1171, 'Guilang-guilang'),
(31249, 1171, 'Kalugmanan'),
(31250, 1171, 'Lindaban'),
(31251, 1171, 'Lingion'),
(31252, 1171, 'Lunocan'),
(31253, 1171, 'Maluko'),
(31254, 1171, 'Mambatangan'),
(31255, 1171, 'Mampayag'),
(31256, 1171, 'Minsuro'),
(31257, 1171, 'Mantibugao'),
(31258, 1171, 'Tankulan (Pob.)'),
(31259, 1171, 'San Miguel'),
(31260, 1171, 'Sankanan'),
(31261, 1171, 'Santiago'),
(31262, 1171, 'Santo Niño'),
(31263, 1171, 'Ticala'),
(31264, 1172, 'Anahawon'),
(31265, 1172, 'Base Camp'),
(31266, 1172, 'Bayabason'),
(31267, 1172, 'Camp I'),
(31268, 1172, 'Colambugan'),
(31269, 1172, 'Dagumba-an'),
(31270, 1172, 'Danggawan'),
(31271, 1172, 'Dologon'),
(31272, 1172, 'Kisanday'),
(31273, 1172, 'Kuya'),
(31274, 1172, 'La Roxas'),
(31275, 1172, 'Panadtalan'),
(31276, 1172, 'Panalsalan'),
(31277, 1172, 'North Poblacion'),
(31278, 1172, 'South Poblacion'),
(31279, 1172, 'San Miguel'),
(31280, 1172, 'San Roque'),
(31281, 1172, 'Tubigon'),
(31282, 1172, 'Bagongsilang'),
(31283, 1172, 'Kiharong'),
(31284, 1173, 'Adtuyon'),
(31285, 1173, 'Bacusanon'),
(31286, 1173, 'Bangahan'),
(31287, 1173, 'Barandias'),
(31288, 1173, 'Concepcion'),
(31289, 1173, 'Gandingan'),
(31290, 1173, 'Kimanait'),
(31291, 1173, 'Kipadukan'),
(31292, 1173, 'Langcataon'),
(31293, 1173, 'Lantay'),
(31294, 1173, 'Madaya'),
(31295, 1173, 'Malipayon'),
(31296, 1173, 'Mendis'),
(31297, 1173, 'Nabaliwa'),
(31298, 1173, 'New Eden'),
(31299, 1173, 'Payad'),
(31300, 1173, 'Pigtauranan'),
(31301, 1173, 'Poblacion'),
(31302, 1173, 'Portulin'),
(31303, 1174, 'Butong'),
(31304, 1174, 'Cebole'),
(31305, 1174, 'Delapa'),
(31306, 1174, 'Dumalama'),
(31307, 1174, 'C-Handumanan'),
(31308, 1174, 'Cawayan'),
(31309, 1174, 'Kiburiao'),
(31310, 1174, 'Kipaypayon'),
(31311, 1174, 'Libertad'),
(31312, 1174, 'Linabo'),
(31313, 1174, 'Lipa'),
(31314, 1174, 'Lumintao'),
(31315, 1174, 'Magsaysay'),
(31316, 1174, 'Mahayag'),
(31317, 1174, 'Manuto'),
(31318, 1174, 'Merangerang'),
(31319, 1174, 'Mibantang'),
(31320, 1174, 'Minongan'),
(31321, 1174, 'Minsamongan'),
(31322, 1174, 'Paitan'),
(31323, 1174, 'Palacapao'),
(31324, 1174, 'Pinilayan'),
(31325, 1174, 'Poblacion'),
(31326, 1174, 'Puntian'),
(31327, 1174, 'Salawagan'),
(31328, 1174, 'San Isidro'),
(31329, 1174, 'San Jose'),
(31330, 1174, 'San Roque'),
(31331, 1174, 'Santa Cruz'),
(31332, 1174, 'Santa Filomena'),
(31333, 1174, 'Minsalirak'),
(31334, 1175, 'Bonacao'),
(31335, 1175, 'Cabuling'),
(31336, 1175, 'Kawayan'),
(31337, 1175, 'Cayaga'),
(31338, 1175, 'Dao'),
(31339, 1175, 'Durian'),
(31340, 1175, 'Iglugsad'),
(31341, 1175, 'Kalagangan'),
(31342, 1175, 'Kibongcog'),
(31343, 1175, 'Little Baguio'),
(31344, 1175, 'Nacabuklad'),
(31345, 1175, 'Namnam'),
(31346, 1175, 'Palacpacan'),
(31347, 1175, 'Halapitan (Pob.)'),
(31348, 1175, 'San Jose'),
(31349, 1175, 'Santo Domingo'),
(31350, 1175, 'Tugop'),
(31351, 1175, 'Matupe'),
(31352, 1175, 'Bulalang'),
(31353, 1175, 'Candelaria'),
(31354, 1175, 'Mabuhay'),
(31355, 1175, 'Magkalungay'),
(31356, 1175, 'Malayanan'),
(31357, 1175, 'Sacramento Valley'),
(31358, 1176, 'Kisolon'),
(31359, 1176, 'Culasi'),
(31360, 1176, 'Licoan'),
(31361, 1176, 'Lupiagan'),
(31362, 1176, 'Ocasion'),
(31363, 1176, 'Puntian'),
(31364, 1176, 'San Roque'),
(31365, 1176, 'San Vicente'),
(31366, 1176, 'Poblacion'),
(31367, 1176, 'Vista Villa'),
(31368, 1177, 'Basak'),
(31369, 1177, 'Baylanan'),
(31370, 1177, 'Cacaon'),
(31371, 1177, 'Colawingon'),
(31372, 1177, 'Cosina'),
(31373, 1177, 'Dagumbaan'),
(31374, 1177, 'Dagundalahon'),
(31375, 1177, 'Dominorog'),
(31376, 1177, 'Lapok'),
(31377, 1177, 'Indulang'),
(31378, 1177, 'Lantud'),
(31379, 1177, 'Liguron'),
(31380, 1177, 'Lingi-on'),
(31381, 1177, 'Lirongan'),
(31382, 1177, 'Santo Niño'),
(31383, 1177, 'Miarayon'),
(31384, 1177, 'Barangay 1 (Pob.)'),
(31385, 1177, 'Barangay 2 (Pob.)'),
(31386, 1177, 'Barangay 3 (Pob.)'),
(31387, 1177, 'Barangay 4 (Pob.)'),
(31388, 1177, 'Barangay 5 (Pob.)'),
(31389, 1177, 'Sagaran'),
(31390, 1177, 'Salucot'),
(31391, 1177, 'San Antonio'),
(31392, 1177, 'San Isidro'),
(31393, 1177, 'San Miguel'),
(31394, 1177, 'San Rafael'),
(31395, 1177, 'Tagbak'),
(31396, 1177, 'Tikalaan'),
(31397, 1178, 'Bagontaas'),
(31398, 1178, 'Banlag'),
(31399, 1178, 'Barobo'),
(31400, 1178, 'Batangan'),
(31401, 1178, 'Catumbalon'),
(31402, 1178, 'Colonia'),
(31403, 1178, 'Concepcion'),
(31404, 1178, 'Dagat-Kidavao'),
(31405, 1178, 'Guinoyuran'),
(31406, 1178, 'Kahapunan'),
(31407, 1178, 'Laligan'),
(31408, 1178, 'Lilingayon'),
(31409, 1178, 'Lourdes'),
(31410, 1178, 'Lumbayao'),
(31411, 1178, 'Lumbo'),
(31412, 1178, 'Lurogan'),
(31413, 1178, 'Maapag'),
(31414, 1178, 'Mabuhay'),
(31415, 1178, 'Mailag'),
(31416, 1178, 'Mt. Nebo'),
(31417, 1178, 'Nabago'),
(31418, 1178, 'Pinatilan'),
(31419, 1178, 'Poblacion'),
(31420, 1178, 'San Carlos'),
(31421, 1178, 'San Isidro'),
(31422, 1178, 'Sinabuagan'),
(31423, 1178, 'Sinayawan'),
(31424, 1178, 'Sugod'),
(31425, 1178, 'Tongantongan'),
(31426, 1178, 'Tugaya'),
(31427, 1178, 'Vintar'),
(31428, 1179, 'Cabulohan'),
(31429, 1179, 'Canangaan'),
(31430, 1179, 'Iba'),
(31431, 1179, 'Imbatug'),
(31432, 1179, 'Lambangan'),
(31433, 1179, 'Mandaing'),
(31434, 1179, 'Paradise'),
(31435, 1179, 'Poblacion'),
(31436, 1179, 'Anlogan'),
(31437, 1179, 'Capinonan'),
(31438, 1179, 'Dalacutan'),
(31439, 1179, 'Freedom'),
(31440, 1179, 'Mandahikan'),
(31441, 1179, 'Mauswagon'),
(31442, 1179, 'Jasaan'),
(31443, 1180, 'Alga'),
(31444, 1180, 'Bonbon'),
(31445, 1180, 'Bura'),
(31446, 1180, 'Catibac'),
(31447, 1180, 'Compol'),
(31448, 1180, 'Lawigan'),
(31449, 1180, 'Liloan'),
(31450, 1180, 'Looc'),
(31451, 1180, 'Mainit'),
(31452, 1180, 'Manduao'),
(31453, 1180, 'Panghiawan'),
(31454, 1180, 'Poblacion'),
(31455, 1180, 'Santo Niño'),
(31456, 1180, 'Tangaro'),
(31457, 1181, 'Butay'),
(31458, 1181, 'Cabuan'),
(31459, 1181, 'Cantaan'),
(31460, 1181, 'Liong'),
(31461, 1181, 'Maac'),
(31462, 1181, 'North Poblacion'),
(31463, 1181, 'South Poblacion'),
(31464, 1182, 'Benoni'),
(31465, 1182, 'Binatubo'),
(31466, 1182, 'Catohugan'),
(31467, 1182, 'Hubangon'),
(31468, 1182, 'Owakan'),
(31469, 1182, 'Poblacion'),
(31470, 1182, 'Puntod'),
(31471, 1182, 'San Isidro'),
(31472, 1182, 'San Jose'),
(31473, 1182, 'San Miguel'),
(31474, 1182, 'San Roque'),
(31475, 1182, 'Tubod'),
(31476, 1182, 'Tupsan Pequeño'),
(31477, 1183, 'Agoho'),
(31478, 1183, 'Anito'),
(31479, 1183, 'Balbagon'),
(31480, 1183, 'Baylao'),
(31481, 1183, 'Benhaan'),
(31482, 1183, 'Bug-ong'),
(31483, 1183, 'Kuguita'),
(31484, 1183, 'Magting'),
(31485, 1183, 'Naasag'),
(31486, 1183, 'Pandan'),
(31487, 1183, 'Poblacion'),
(31488, 1183, 'Soro-soro'),
(31489, 1183, 'Tagdo'),
(31490, 1183, 'Tupsan'),
(31491, 1183, 'Yumbing'),
(31492, 1184, 'Alangilan'),
(31493, 1184, 'Bacnit'),
(31494, 1184, 'Balite'),
(31495, 1184, 'Bonbon'),
(31496, 1184, 'Bugang'),
(31497, 1184, 'Cuna'),
(31498, 1184, 'Manuyog'),
(31499, 1184, 'Mayana'),
(31500, 1184, 'Poblacion'),
(31501, 1185, 'Alegria'),
(31502, 1185, 'Babalaya'),
(31503, 1185, 'Babalayan Townsite'),
(31504, 1185, 'Binuni'),
(31505, 1185, 'Demologan'),
(31506, 1185, 'Dimarao'),
(31507, 1185, 'Esperanza'),
(31508, 1185, 'Kahayag'),
(31509, 1185, 'Liangan East'),
(31510, 1185, 'Punod'),
(31511, 1185, 'Mati'),
(31512, 1185, 'Minaulon'),
(31513, 1185, 'Pagayawan'),
(31514, 1185, 'Poblacion Bacolod'),
(31515, 1185, 'Rupagan'),
(31516, 1185, 'Delabayan West'),
(31517, 1186, 'Abaga'),
(31518, 1186, 'Adapun-Ali'),
(31519, 1186, 'Angandog'),
(31520, 1186, 'Angayen'),
(31521, 1186, 'Bangko'),
(31522, 1186, 'Batolacongan'),
(31523, 1186, 'Buenavista'),
(31524, 1186, 'Cadayonan'),
(31525, 1186, 'Landa'),
(31526, 1186, 'Lumbac'),
(31527, 1186, 'Mamaanun'),
(31528, 1186, 'Maria-Cristina'),
(31529, 1186, 'Matampay'),
(31530, 1186, 'Nangka'),
(31531, 1186, 'Pacalundo'),
(31532, 1186, 'Poblacion East'),
(31533, 1186, 'Poblacion West'),
(31534, 1186, 'Sandor'),
(31535, 1186, 'Sangcad'),
(31536, 1186, 'Sarip-Alawi'),
(31537, 1186, 'Sigayan'),
(31538, 1187, 'Andil'),
(31539, 1187, 'Bagong Dawis'),
(31540, 1187, 'Baroy Daku'),
(31541, 1187, 'Bato'),
(31542, 1187, 'Cabasagan'),
(31543, 1187, 'Dalama'),
(31544, 1187, 'Libertad'),
(31545, 1187, 'Limwag'),
(31546, 1187, 'Lindongan'),
(31547, 1187, 'Maliwanag'),
(31548, 1187, 'Manan-ao'),
(31549, 1187, 'Pange'),
(31550, 1187, 'Pindolonan'),
(31551, 1187, 'Poblacion'),
(31552, 1187, 'Princesa'),
(31553, 1187, 'Rawan Point'),
(31554, 1187, 'Riverside'),
(31555, 1187, 'Sagadan'),
(31556, 1187, 'Salong'),
(31557, 1187, 'Tinubdan'),
(31558, 1187, 'Sagadan Upper'),
(31559, 1187, 'San Juan'),
(31560, 1187, 'Village'),
(31561, 1188, 'Abuno'),
(31562, 1188, 'Bonbonon'),
(31563, 1188, 'Bunawan'),
(31564, 1188, 'Buru-un'),
(31565, 1188, 'Dalipuga'),
(31566, 1188, 'Digkilaan'),
(31567, 1188, 'Hinaplanon'),
(31568, 1188, 'Kabacsanan'),
(31569, 1188, 'Kiwalan'),
(31570, 1188, 'Mahayhay'),
(31571, 1188, 'Mainit'),
(31572, 1188, 'Mandulog'),
(31573, 1188, 'Maria Cristina'),
(31574, 1188, 'Palao'),
(31575, 1188, 'Poblacion'),
(31576, 1188, 'Puga-an'),
(31577, 1188, 'Rogongon'),
(31578, 1188, 'Santa Elena'),
(31579, 1188, 'Santa Filomena'),
(31580, 1188, 'Suarez'),
(31581, 1188, 'Tambacan'),
(31582, 1188, 'Saray-Tibanga'),
(31583, 1188, 'Tipanoy'),
(31584, 1188, 'Tominobo Proper'),
(31585, 1188, 'Tominobo Upper'),
(31586, 1188, 'Tubod'),
(31587, 1188, 'Bagong Silang'),
(31588, 1188, 'Del Carmen'),
(31589, 1188, 'Dulag'),
(31590, 1188, 'San Miguel'),
(31591, 1188, 'Santiago'),
(31592, 1188, 'Santo Rosario'),
(31593, 1188, 'Tibanga'),
(31594, 1188, 'Acmac'),
(31595, 1188, 'Ditucalan'),
(31596, 1188, 'Hindang'),
(31597, 1188, 'Kalilangan'),
(31598, 1188, 'Lanipao'),
(31599, 1188, 'Luinab'),
(31600, 1188, 'Panoroganan'),
(31601, 1188, 'San Roque'),
(31602, 1188, 'Ubaldo Laya'),
(31603, 1188, 'Upper Hinaplanon'),
(31604, 1188, 'Villa Verde'),
(31605, 1189, 'Bagong Badian'),
(31606, 1189, 'Bagong Silang'),
(31607, 1189, 'Balili'),
(31608, 1189, 'Bansarvil'),
(31609, 1189, 'Belis'),
(31610, 1189, 'Buenavista'),
(31611, 1189, 'Butadon'),
(31612, 1189, 'Cathedral Falls'),
(31613, 1189, 'Concepcion'),
(31614, 1189, 'Curvada'),
(31615, 1189, 'De Asis'),
(31616, 1189, 'Donggoan'),
(31617, 1189, 'Durano'),
(31618, 1189, 'Kahayagan'),
(31619, 1189, 'Kidalos'),
(31620, 1189, 'La Libertad'),
(31621, 1189, 'Lapinig'),
(31622, 1189, 'Mahayahay'),
(31623, 1189, 'Malinas'),
(31624, 1189, 'Maranding'),
(31625, 1189, 'Margos'),
(31626, 1189, 'Poblacion'),
(31627, 1189, 'Pulang Yuta'),
(31628, 1189, 'San Isidro'),
(31629, 1189, 'San Vicente'),
(31630, 1189, 'Santa Cruz'),
(31631, 1189, 'Santo Tomas'),
(31632, 1189, 'Suso'),
(31633, 1189, 'Taguitic'),
(31634, 1189, 'Tiacongan'),
(31635, 1189, 'Tipolo'),
(31636, 1189, 'Tulatulahan'),
(31637, 1189, 'Waterfalls'),
(31638, 1190, 'Bangaan'),
(31639, 1190, 'Bangco'),
(31640, 1190, 'Bansarvil II'),
(31641, 1190, 'Bauyan'),
(31642, 1190, 'Cabongbongan'),
(31643, 1190, 'Calibao'),
(31644, 1190, 'Calipapa'),
(31645, 1190, 'Calube'),
(31646, 1190, 'Campo Islam'),
(31647, 1190, 'Capocao'),
(31648, 1190, 'Dabliston'),
(31649, 1190, 'Dangulaan'),
(31650, 1190, 'Ditago'),
(31651, 1190, 'Ilian'),
(31652, 1190, 'Kauswagan'),
(31653, 1190, 'Kirapan'),
(31654, 1190, 'Koreo'),
(31655, 1190, 'Lantawan'),
(31656, 1190, 'Mabuhay'),
(31657, 1190, 'Maguindanao'),
(31658, 1190, 'Mahayahay'),
(31659, 1190, 'Mamagum'),
(31660, 1190, 'Pandanan'),
(31661, 1190, 'Payong'),
(31662, 1190, 'Piraka'),
(31663, 1190, 'Pikalawag'),
(31664, 1190, 'Pikinit'),
(31665, 1190, 'Poblacion'),
(31666, 1190, 'Ramain'),
(31667, 1190, 'Rebucon'),
(31668, 1190, 'Sigayan'),
(31669, 1190, 'Sugod'),
(31670, 1190, 'Tagulo'),
(31671, 1190, 'Tantaon'),
(31672, 1190, 'Topocon'),
(31673, 1190, 'Dalama'),
(31674, 1190, 'Mina'),
(31675, 1191, 'Bagumbayan (Pob.)'),
(31676, 1191, 'Bara-ason'),
(31677, 1191, 'Cayontor'),
(31678, 1191, 'Delabayan'),
(31679, 1191, 'Inudaran'),
(31680, 1191, 'Kawit Occidental'),
(31681, 1191, 'Kawit Oriental'),
(31682, 1191, 'Libertad'),
(31683, 1191, 'Paiton'),
(31684, 1191, 'Poblacion'),
(31685, 1191, 'Tacub'),
(31686, 1191, 'Tingintingin'),
(31687, 1191, 'Tugar'),
(31688, 1192, 'Austin Heights'),
(31689, 1192, 'Baybay'),
(31690, 1192, 'Bubong'),
(31691, 1192, 'Caromatan'),
(31692, 1192, 'Inudaran'),
(31693, 1192, 'Kulasihan'),
(31694, 1192, 'Libertad'),
(31695, 1192, 'Lumbac'),
(31696, 1192, 'Manga'),
(31697, 1192, 'Matampay'),
(31698, 1192, 'Mukas'),
(31699, 1192, 'Muntay'),
(31700, 1192, 'Pagalungan'),
(31701, 1192, 'Palao'),
(31702, 1192, 'Pantaon'),
(31703, 1192, 'Pantar'),
(31704, 1192, 'Poblacion'),
(31705, 1192, 'Rebucon'),
(31706, 1192, 'Riverside'),
(31707, 1192, 'San Roque'),
(31708, 1192, 'Santo Niño'),
(31709, 1192, 'Simbuco'),
(31710, 1192, 'Small Banisilan'),
(31711, 1192, 'Sucodan'),
(31712, 1192, 'Tabigue'),
(31713, 1192, 'Titunod'),
(31714, 1193, 'Abaga'),
(31715, 1193, 'Andil'),
(31716, 1193, 'Matampay Bucana'),
(31717, 1193, 'Darumawang Bucana'),
(31718, 1193, 'Cabasagan'),
(31719, 1193, 'Camalan'),
(31720, 1193, 'Darumawang Ilaya'),
(31721, 1193, 'El Salvador'),
(31722, 1193, 'Gumagamot');
INSERT INTO `table_barangay` (`barangay_id`, `municipality_id`, `barangay_name`) VALUES
(31723, 1193, 'Lala Proper (Pob.)'),
(31724, 1193, 'Lanipao'),
(31725, 1193, 'Magpatao'),
(31726, 1193, 'Maranding'),
(31727, 1193, 'Matampay Ilaya'),
(31728, 1193, 'Pacita'),
(31729, 1193, 'Pendolonan'),
(31730, 1193, 'Pinoyak'),
(31731, 1193, 'Raw-an'),
(31732, 1193, 'Rebe'),
(31733, 1193, 'San Isidro Lower'),
(31734, 1193, 'San Isidro Upper'),
(31735, 1193, 'San Manuel'),
(31736, 1193, 'Santa Cruz Lower'),
(31737, 1193, 'Santa Cruz Upper'),
(31738, 1193, 'Simpak'),
(31739, 1193, 'Tenazas'),
(31740, 1193, 'Tuna-an'),
(31741, 1194, 'Busque'),
(31742, 1194, 'Larapan'),
(31743, 1194, 'Magoong'),
(31744, 1194, 'Napo'),
(31745, 1194, 'Poblacion'),
(31746, 1194, 'Purakan'),
(31747, 1194, 'Robocon'),
(31748, 1194, 'Samburon'),
(31749, 1195, 'Babasalon'),
(31750, 1195, 'Baguiguicon'),
(31751, 1195, 'Daan Campo'),
(31752, 1195, 'Durianon'),
(31753, 1195, 'Ilihan'),
(31754, 1195, 'Lamigadato'),
(31755, 1195, 'Lemoncret'),
(31756, 1195, 'Lubo'),
(31757, 1195, 'Lumbac'),
(31758, 1195, 'Malabaogan'),
(31759, 1195, 'Mapantao'),
(31760, 1195, 'Olango'),
(31761, 1195, 'Pangao'),
(31762, 1195, 'Pelingkingan'),
(31763, 1195, 'Lower Caningag'),
(31764, 1195, 'Poblacion'),
(31765, 1195, 'Rarab'),
(31766, 1195, 'Somiorang'),
(31767, 1195, 'Upper Caningag'),
(31768, 1195, 'Talambo'),
(31769, 1195, 'Tambacon'),
(31770, 1195, 'Tawinian'),
(31771, 1195, 'Tipaan'),
(31772, 1195, 'Tombador'),
(31773, 1196, 'Balagatasa'),
(31774, 1196, 'Camp 1'),
(31775, 1196, 'Claro M. Recto'),
(31776, 1196, 'Inoma'),
(31777, 1196, 'Labuay'),
(31778, 1196, 'Liangan West'),
(31779, 1196, 'Mahayahay'),
(31780, 1196, 'Maliwanag'),
(31781, 1196, 'Mentring'),
(31782, 1196, 'Poblacion'),
(31783, 1196, 'Santa Cruz'),
(31784, 1196, 'Segapod'),
(31785, 1196, 'Kulasihan'),
(31786, 1197, 'Bubong Radapan'),
(31787, 1197, 'Bangco'),
(31788, 1197, 'Batal'),
(31789, 1197, 'Batangan'),
(31790, 1197, 'Cadayonan'),
(31791, 1197, 'Matampay'),
(31792, 1197, 'Pangi'),
(31793, 1197, 'Pasayanon'),
(31794, 1197, 'Poblacion'),
(31795, 1197, 'Puntod'),
(31796, 1197, 'Santa Cruz'),
(31797, 1197, 'Somiorang'),
(31798, 1198, 'Bacayawan'),
(31799, 1198, 'Balabacun'),
(31800, 1198, 'Balintad'),
(31801, 1198, 'Kadayonan'),
(31802, 1198, 'Dalama'),
(31803, 1198, 'Lindongan'),
(31804, 1198, 'Lingco-an'),
(31805, 1198, 'Lininding'),
(31806, 1198, 'Lumba-Bayabao'),
(31807, 1198, 'Madaya'),
(31808, 1198, 'Maganding'),
(31809, 1198, 'Matampay'),
(31810, 1198, 'Old Poblacion'),
(31811, 1198, 'North Cadulawan'),
(31812, 1198, 'Panggao'),
(31813, 1198, 'Pantao'),
(31814, 1198, 'Pantao-A-Munai'),
(31815, 1198, 'Pantaon'),
(31816, 1198, 'Pindolonan'),
(31817, 1198, 'Punong'),
(31818, 1198, 'Ramain'),
(31819, 1198, 'Sandigamunai'),
(31820, 1198, 'Tagoranao'),
(31821, 1198, 'Tambo'),
(31822, 1198, 'Tamparan'),
(31823, 1198, 'Taporog'),
(31824, 1199, 'Abaga'),
(31825, 1199, 'Bangco'),
(31826, 1199, 'Canibongan'),
(31827, 1199, 'Karcum'),
(31828, 1199, 'Dimayon'),
(31829, 1199, 'Inayawan'),
(31830, 1199, 'Kaludan'),
(31831, 1199, 'Katubuan'),
(31832, 1199, 'Cabasaran'),
(31833, 1199, 'Liangan'),
(31834, 1199, 'Lupitan'),
(31835, 1199, 'Mangan'),
(31836, 1199, 'Malaig'),
(31837, 1199, 'Masibay'),
(31838, 1199, 'Poblacion'),
(31839, 1199, 'Notongan'),
(31840, 1199, 'Petadun'),
(31841, 1199, 'Panganapan'),
(31842, 1199, 'Pantar'),
(31843, 1199, 'Paridi'),
(31844, 1199, 'Rarab'),
(31845, 1199, 'Raraban'),
(31846, 1199, 'Rebucon'),
(31847, 1199, 'Songgod'),
(31848, 1199, 'Taraka'),
(31849, 1200, 'Aloon'),
(31850, 1200, 'Banday'),
(31851, 1200, 'Bobonga Pantao Ragat'),
(31852, 1200, 'Bobonga Radapan'),
(31853, 1200, 'Cabasagan'),
(31854, 1200, 'Calawe'),
(31855, 1200, 'Culubun'),
(31856, 1200, 'Dilimbayan'),
(31857, 1200, 'Dimayon'),
(31858, 1200, 'Poblacion East'),
(31859, 1200, 'Lomidong'),
(31860, 1200, 'Madaya'),
(31861, 1200, 'Maliwanag'),
(31862, 1200, 'Matampay'),
(31863, 1200, 'Natangcopan'),
(31864, 1200, 'Pansor'),
(31865, 1200, 'Pantao Marug'),
(31866, 1200, 'Tangcal'),
(31867, 1200, 'Tongcopan'),
(31868, 1200, 'Poblacion West'),
(31869, 1201, 'Alowin'),
(31870, 1201, 'Bubong-Dinaig'),
(31871, 1201, 'Caromatan'),
(31872, 1201, 'Daramba'),
(31873, 1201, 'Dinaig'),
(31874, 1201, 'Cabasaran'),
(31875, 1201, 'Kablangan'),
(31876, 1201, 'Cadayonan'),
(31877, 1201, 'Linindingan'),
(31878, 1201, 'Lumbatan'),
(31879, 1201, 'Lupitan'),
(31880, 1201, 'Madamba'),
(31881, 1201, 'Madaya'),
(31882, 1201, 'Maliwanag'),
(31883, 1201, 'Nunang'),
(31884, 1201, 'Nunungan'),
(31885, 1201, 'Pantao Raya'),
(31886, 1201, 'Pantaon'),
(31887, 1201, 'Pened'),
(31888, 1201, 'Piangamangaan'),
(31889, 1201, 'Pendolonan'),
(31890, 1201, 'Poblacion'),
(31891, 1201, 'Sulo'),
(31892, 1201, 'Tagoranao'),
(31893, 1201, 'Tangclao'),
(31894, 1201, 'Timbangalan'),
(31895, 1202, 'Barandia'),
(31896, 1202, 'Bulacon'),
(31897, 1202, 'Buntong'),
(31898, 1202, 'Calimodan'),
(31899, 1202, 'Camp III'),
(31900, 1202, 'Curva-Miagao'),
(31901, 1202, 'Daligdigan'),
(31902, 1202, 'Kilala'),
(31903, 1202, 'Mabatao'),
(31904, 1202, 'Madaya'),
(31905, 1202, 'Mamaanon'),
(31906, 1202, 'Mapantao'),
(31907, 1202, 'Mindalano'),
(31908, 1202, 'Padianan'),
(31909, 1202, 'Pagalongan'),
(31910, 1202, 'Pagayawan'),
(31911, 1202, 'Panaliwad-on'),
(31912, 1202, 'Pangantapan'),
(31913, 1202, 'Pansor'),
(31914, 1202, 'Patidon'),
(31915, 1202, 'Pawak'),
(31916, 1202, 'Poblacion'),
(31917, 1202, 'Saumay'),
(31918, 1202, 'Sudlon'),
(31919, 1202, 'Inasagan'),
(31920, 1203, 'Baning'),
(31921, 1203, 'Buriasan (Pob.)'),
(31922, 1203, 'Dansalan'),
(31923, 1203, 'Gamal'),
(31924, 1203, 'Inudaran I'),
(31925, 1203, 'Inudaran II'),
(31926, 1203, 'Karkum'),
(31927, 1203, 'Katipunan'),
(31928, 1203, 'Mabugnao'),
(31929, 1203, 'Maito Salug'),
(31930, 1203, 'Mala Salug'),
(31931, 1203, 'Mama-anon'),
(31932, 1203, 'Mapurog'),
(31933, 1203, 'Pancilan'),
(31934, 1203, 'Panoloon'),
(31935, 1203, 'Pili'),
(31936, 1203, 'Sapad'),
(31937, 1204, 'Dalamas'),
(31938, 1204, 'Darimbang'),
(31939, 1204, 'Dimayon'),
(31940, 1204, 'Inagongan'),
(31941, 1204, 'Kiazar (Pob.)'),
(31942, 1204, 'Malimbato'),
(31943, 1204, 'Panalawan'),
(31944, 1205, 'Small Banisilon'),
(31945, 1205, 'Bayabao'),
(31946, 1205, 'Berwar'),
(31947, 1205, 'Big Banisilon'),
(31948, 1205, 'Big Meladoc'),
(31949, 1205, 'Bubong'),
(31950, 1205, 'Lamaosa'),
(31951, 1205, 'Linao'),
(31952, 1205, 'Lindongan'),
(31953, 1205, 'Lingco-an'),
(31954, 1205, 'Small Meladoc'),
(31955, 1205, 'Papan'),
(31956, 1205, 'Pelingkingan'),
(31957, 1205, 'Poblacion'),
(31958, 1205, 'Poona Kapatagan'),
(31959, 1205, 'Punod'),
(31960, 1205, 'Somiorang'),
(31961, 1205, 'Tangcal Proper'),
(31962, 1206, 'Barakanas'),
(31963, 1206, 'Baris'),
(31964, 1206, 'Bualan'),
(31965, 1206, 'Bulod'),
(31966, 1206, 'Camp V'),
(31967, 1206, 'Candis'),
(31968, 1206, 'Caniogan'),
(31969, 1206, 'Dalama'),
(31970, 1206, 'Kakai Renabor'),
(31971, 1206, 'Kalilangan'),
(31972, 1206, 'Licapao'),
(31973, 1206, 'Malingao'),
(31974, 1206, 'Palao'),
(31975, 1206, 'Patudan'),
(31976, 1206, 'Pigcarangan'),
(31977, 1206, 'Pinpin'),
(31978, 1206, 'Poblacion'),
(31979, 1206, 'Pualas'),
(31980, 1206, 'San Antonio'),
(31981, 1206, 'Santo Niño'),
(31982, 1206, 'Taden'),
(31983, 1206, 'Tangueguiron'),
(31984, 1206, 'Taguranao'),
(31985, 1206, 'Tubaran'),
(31986, 1207, 'Bangcal'),
(31987, 1207, 'Bubong Madaya'),
(31988, 1207, 'Bowi'),
(31989, 1207, 'Cabasaran'),
(31990, 1207, 'Cadayonan'),
(31991, 1207, 'Campong'),
(31992, 1207, 'Dibarosan'),
(31993, 1207, 'Kalanganan East'),
(31994, 1207, 'Kalanganan Lower'),
(31995, 1207, 'Kalilangan'),
(31996, 1207, 'Pantao-Marug'),
(31997, 1207, 'Pantao-Ranao'),
(31998, 1207, 'Pantar East'),
(31999, 1207, 'Poblacion'),
(32000, 1207, 'Pitubo'),
(32001, 1207, 'Poona-Punod'),
(32002, 1207, 'Punod'),
(32003, 1207, 'Sundiga-Punod'),
(32004, 1207, 'Tawanan'),
(32005, 1207, 'West Pantar'),
(32006, 1207, 'Lumba-Punod'),
(32007, 1208, 'Balintonga'),
(32008, 1208, 'Banisilon'),
(32009, 1208, 'Burgos'),
(32010, 1208, 'Calube'),
(32011, 1208, 'Caputol'),
(32012, 1208, 'Casusan'),
(32013, 1208, 'Conat'),
(32014, 1208, 'Culpan'),
(32015, 1208, 'Dalisay'),
(32016, 1208, 'Dullan'),
(32017, 1208, 'Ibabao'),
(32018, 1208, 'Tubod'),
(32019, 1208, 'Labo'),
(32020, 1208, 'Lawa-an'),
(32021, 1208, 'Lobogon'),
(32022, 1208, 'Lumbayao'),
(32023, 1208, 'Makawa'),
(32024, 1208, 'Manamong'),
(32025, 1208, 'Matipaz'),
(32026, 1208, 'Maular'),
(32027, 1208, 'Mitazan'),
(32028, 1208, 'Mohon'),
(32029, 1208, 'Monterico'),
(32030, 1208, 'Nabuna'),
(32031, 1208, 'Palayan'),
(32032, 1208, 'Pelong'),
(32033, 1208, 'Ospital (Pob.)'),
(32034, 1208, 'Roxas'),
(32035, 1208, 'San Pedro'),
(32036, 1208, 'Santa Ana'),
(32037, 1208, 'Sinampongan'),
(32038, 1208, 'Taguanao'),
(32039, 1208, 'Tawi-tawi'),
(32040, 1208, 'Toril'),
(32041, 1208, 'Tuburan'),
(32042, 1208, 'Zamora'),
(32043, 1208, 'Macubon'),
(32044, 1208, 'Tugaya'),
(32045, 1209, 'Del Pilar'),
(32046, 1209, 'Landing'),
(32047, 1209, 'Lumipac'),
(32048, 1209, 'Lusot'),
(32049, 1209, 'Mabini'),
(32050, 1209, 'Magsaysay'),
(32051, 1209, 'Misom'),
(32052, 1209, 'Mitacas'),
(32053, 1209, 'Naburos'),
(32054, 1209, 'Northern Poblacion'),
(32055, 1209, 'Punta Miray'),
(32056, 1209, 'Punta Sulong'),
(32057, 1209, 'Sinian'),
(32058, 1209, 'Southern Poblacion'),
(32059, 1209, 'Tugas'),
(32060, 1210, 'Bag-ong Anonang'),
(32061, 1210, 'Bagumbang'),
(32062, 1210, 'Baybay'),
(32063, 1210, 'Bolinsong'),
(32064, 1210, 'Buenavista'),
(32065, 1210, 'Buracan'),
(32066, 1210, 'Calolot'),
(32067, 1210, 'Dimalco'),
(32068, 1210, 'Dullan'),
(32069, 1210, 'Kanaokanao'),
(32070, 1210, 'Liloan'),
(32071, 1210, 'Linconan'),
(32072, 1210, 'Lodiong'),
(32073, 1210, 'Lower Usugan'),
(32074, 1210, 'Mapurog'),
(32075, 1210, 'Migpange'),
(32076, 1210, 'Montol'),
(32077, 1210, 'Pisa-an'),
(32078, 1210, 'Poblacion'),
(32079, 1210, 'Remedios'),
(32080, 1210, 'Rufino Lumapas'),
(32081, 1210, 'Sibuyon'),
(32082, 1210, 'Tangab'),
(32083, 1210, 'Tiaman'),
(32084, 1210, 'Tusik'),
(32085, 1210, 'Upper Usogan'),
(32086, 1210, 'Demetrio Fernan'),
(32087, 1210, 'Digson'),
(32088, 1211, 'Bonifacio'),
(32089, 1211, 'Bunawan'),
(32090, 1211, 'Calaran'),
(32091, 1211, 'Dapacan Alto'),
(32092, 1211, 'Dapacan Bajo'),
(32093, 1211, 'Langub'),
(32094, 1211, 'Libertad'),
(32095, 1211, 'Magcamiguing'),
(32096, 1211, 'Mamalad'),
(32097, 1211, 'Mauswagon'),
(32098, 1211, 'Northern Poblacion'),
(32099, 1211, 'Salvador'),
(32100, 1211, 'San Isidro'),
(32101, 1211, 'Siloy'),
(32102, 1211, 'Singalat'),
(32103, 1211, 'Solinog'),
(32104, 1211, 'Southwestern Poblacion'),
(32105, 1211, 'Sulipat'),
(32106, 1211, 'Don Bernardo Nery Pob.'),
(32107, 1212, 'Bernad'),
(32108, 1212, 'Bito-on'),
(32109, 1212, 'Cabunga-an'),
(32110, 1212, 'Canibungan Daku'),
(32111, 1212, 'Canibungan Putol'),
(32112, 1212, 'Canipacan'),
(32113, 1212, 'Dalingap'),
(32114, 1212, 'Dela Paz'),
(32115, 1212, 'Dolores'),
(32116, 1212, 'Gata Daku'),
(32117, 1212, 'Gata Diot'),
(32118, 1212, 'Guba'),
(32119, 1212, 'Kinangay Norte'),
(32120, 1212, 'Kinangay Sur'),
(32121, 1212, 'Lapasan'),
(32122, 1212, 'Lupagan'),
(32123, 1212, 'Malibangcao'),
(32124, 1212, 'Masabud'),
(32125, 1212, 'Mialen'),
(32126, 1212, 'Pan-ay'),
(32127, 1212, 'Penacio'),
(32128, 1212, 'Poblacion I'),
(32129, 1212, 'Segatic Daku'),
(32130, 1212, 'Segatic Diot'),
(32131, 1212, 'Sebasi'),
(32132, 1212, 'Tinacla-an'),
(32133, 1212, 'Poblacion II'),
(32134, 1212, 'Poblacion III'),
(32135, 1212, 'Poblacion IV'),
(32136, 1213, 'Bagong Nayon'),
(32137, 1213, 'Capule'),
(32138, 1213, 'New Casul'),
(32139, 1213, 'Guiban'),
(32140, 1213, 'Laya-an'),
(32141, 1213, 'Lingatongan'),
(32142, 1213, 'Maligubaan'),
(32143, 1213, 'Mantukoy'),
(32144, 1213, 'Marugang'),
(32145, 1213, 'Poblacion'),
(32146, 1213, 'Pogan'),
(32147, 1213, 'Small Potongan'),
(32148, 1213, 'Soso-on'),
(32149, 1213, 'Upper Dapitan'),
(32150, 1213, 'Upper Dioyo'),
(32151, 1213, 'Upper Potongan'),
(32152, 1213, 'Upper Salimpono'),
(32153, 1213, 'Virayan'),
(32154, 1214, 'Adorable'),
(32155, 1214, 'Butuay'),
(32156, 1214, 'Carmen'),
(32157, 1214, 'Corrales'),
(32158, 1214, 'Dicoloc'),
(32159, 1214, 'Gata'),
(32160, 1214, 'Guintomoyan'),
(32161, 1214, 'Malibacsan'),
(32162, 1214, 'Macabayao'),
(32163, 1214, 'Matugas Alto'),
(32164, 1214, 'Matugas Bajo'),
(32165, 1214, 'Mialem'),
(32166, 1214, 'Naga (Pob.)'),
(32167, 1214, 'Palilan'),
(32168, 1214, 'Nacional (Pob.)'),
(32169, 1214, 'Rizal (Pob.)'),
(32170, 1214, 'San Isidro'),
(32171, 1214, 'Santa Cruz (Pob.)'),
(32172, 1214, 'Sibaroc'),
(32173, 1214, 'Sinara Alto'),
(32174, 1214, 'Sinara Bajo'),
(32175, 1214, 'Seti'),
(32176, 1214, 'Tabo-o'),
(32177, 1214, 'Taraka (Pob.)'),
(32178, 1215, 'Alegria'),
(32179, 1215, 'Bagong Silang'),
(32180, 1215, 'Biasong'),
(32181, 1215, 'Bonifacio'),
(32182, 1215, 'Burgos'),
(32183, 1215, 'Dalacon'),
(32184, 1215, 'Dampalan'),
(32185, 1215, 'Estante'),
(32186, 1215, 'Jasa-an'),
(32187, 1215, 'Katipa'),
(32188, 1215, 'Luzaran'),
(32189, 1215, 'Macalibre Alto'),
(32190, 1215, 'Macalibre Bajo'),
(32191, 1215, 'Mahayahay'),
(32192, 1215, 'Manguehan'),
(32193, 1215, 'Mansabay Bajo'),
(32194, 1215, 'Molatuhan Alto'),
(32195, 1215, 'Molatuhan Bajo'),
(32196, 1215, 'Peniel'),
(32197, 1215, 'Eastern Poblacion'),
(32198, 1215, 'Puntod'),
(32199, 1215, 'Rizal'),
(32200, 1215, 'Sibugon'),
(32201, 1215, 'Sibula'),
(32202, 1215, 'Don Andres Soriano'),
(32203, 1215, 'Mabas'),
(32204, 1215, 'Mansabay Alto'),
(32205, 1215, 'Western Poblacion'),
(32206, 1216, 'Apil'),
(32207, 1216, 'Binuangan'),
(32208, 1216, 'Bolibol'),
(32209, 1216, 'Buenavista'),
(32210, 1216, 'Bunga'),
(32211, 1216, 'Buntawan'),
(32212, 1216, 'Burgos'),
(32213, 1216, 'Canubay'),
(32214, 1216, 'Clarin Settlement'),
(32215, 1216, 'Dolipos Bajo'),
(32216, 1216, 'Dolipos Alto'),
(32217, 1216, 'Dulapo'),
(32218, 1216, 'Dullan Norte'),
(32219, 1216, 'Dullan Sur'),
(32220, 1216, 'Lamac Lower'),
(32221, 1216, 'Lamac Upper'),
(32222, 1216, 'Langcangan Lower'),
(32223, 1216, 'Langcangan Proper'),
(32224, 1216, 'Langcangan Upper'),
(32225, 1216, 'Layawan'),
(32226, 1216, 'Loboc Lower'),
(32227, 1216, 'Loboc Upper'),
(32228, 1216, 'Rizal Lower'),
(32229, 1216, 'Malindang'),
(32230, 1216, 'Mialen'),
(32231, 1216, 'Mobod'),
(32232, 1216, 'Ciriaco C. Pastrano'),
(32233, 1216, 'Paypayan'),
(32234, 1216, 'Pines'),
(32235, 1216, 'Poblacion I'),
(32236, 1216, 'Poblacion II'),
(32237, 1216, 'San Vicente Alto'),
(32238, 1216, 'San Vicente Bajo'),
(32239, 1216, 'Sebucal'),
(32240, 1216, 'Senote'),
(32241, 1216, 'Taboc Norte'),
(32242, 1216, 'Taboc Sur'),
(32243, 1216, 'Talairon'),
(32244, 1216, 'Talic'),
(32245, 1216, 'Toliyok'),
(32246, 1216, 'Tipan'),
(32247, 1216, 'Tuyabang Alto'),
(32248, 1216, 'Tuyabang Bajo'),
(32249, 1216, 'Tuyabang Proper'),
(32250, 1216, 'Rizal Upper'),
(32251, 1216, 'Victoria'),
(32252, 1216, 'Villaflor'),
(32253, 1217, 'Aguada (Pob.)'),
(32254, 1217, 'Banadero (Pob.)'),
(32255, 1217, 'Bacolod'),
(32256, 1217, 'Bagakay'),
(32257, 1217, 'Balintawak'),
(32258, 1217, 'Baybay Santa Cruz'),
(32259, 1217, 'Baybay Triunfo'),
(32260, 1217, 'Bongbong'),
(32261, 1217, 'Calabayan'),
(32262, 1217, 'Capucao C.'),
(32263, 1217, 'Capucao P.'),
(32264, 1217, 'Carangan'),
(32265, 1217, 'Catadman-Manabay'),
(32266, 1217, 'Cavinte'),
(32267, 1217, 'Cogon'),
(32268, 1217, 'Dalapang'),
(32269, 1217, 'Diguan'),
(32270, 1217, 'Dimaluna'),
(32271, 1217, 'Embargo'),
(32272, 1217, 'Gala'),
(32273, 1217, 'Gango'),
(32274, 1217, 'Gotokan Daku'),
(32275, 1217, 'Gotokan Diot'),
(32276, 1217, 'Guimad'),
(32277, 1217, 'Guingona'),
(32278, 1217, 'Kinuman Norte'),
(32279, 1217, 'Kinuman Sur'),
(32280, 1217, 'Labinay'),
(32281, 1217, 'Labo'),
(32282, 1217, 'Lam-an'),
(32283, 1217, 'Liposong'),
(32284, 1217, 'Litapan'),
(32285, 1217, 'Malaubang'),
(32286, 1217, 'Manaka'),
(32287, 1217, 'Maningcol'),
(32288, 1217, 'Mentering'),
(32289, 1217, 'Carmen'),
(32290, 1217, 'Molicay'),
(32291, 1217, 'Stimson Abordo'),
(32292, 1217, 'Pantaon'),
(32293, 1217, 'Pulot'),
(32294, 1217, 'San Antonio'),
(32295, 1217, 'Baybay San Roque'),
(32296, 1217, 'Sangay Daku'),
(32297, 1217, 'Sangay Diot'),
(32298, 1217, 'Sinuza'),
(32299, 1217, 'Tabid'),
(32300, 1217, 'Tinago'),
(32301, 1217, 'Trigos'),
(32302, 1217, '50th District (Pob.)'),
(32303, 1217, 'Doña Consuelo'),
(32304, 1218, 'Baga'),
(32305, 1218, 'Bangko'),
(32306, 1218, 'Camanucan'),
(32307, 1218, 'Dela Paz'),
(32308, 1218, 'Lutao'),
(32309, 1218, 'Magsaysay'),
(32310, 1218, 'Map-an'),
(32311, 1218, 'Mohon'),
(32312, 1218, 'Poblacion'),
(32313, 1218, 'Punta'),
(32314, 1218, 'Salimpuno'),
(32315, 1218, 'San Andres'),
(32316, 1218, 'San Juan'),
(32317, 1218, 'San Roque'),
(32318, 1218, 'Sumasap'),
(32319, 1218, 'Villalin'),
(32320, 1219, 'Agunod'),
(32321, 1219, 'Bato'),
(32322, 1219, 'Buena Voluntad'),
(32323, 1219, 'Calaca-an'),
(32324, 1219, 'Cartagena Proper'),
(32325, 1219, 'Catarman'),
(32326, 1219, 'Cebulin'),
(32327, 1219, 'Clarin'),
(32328, 1219, 'Danao'),
(32329, 1219, 'Deboloc'),
(32330, 1219, 'Divisoria'),
(32331, 1219, 'Eastern Looc'),
(32332, 1219, 'Ilisan'),
(32333, 1219, 'Katipunan'),
(32334, 1219, 'Kauswagan'),
(32335, 1219, 'Lao Proper'),
(32336, 1219, 'Lao Santa Cruz'),
(32337, 1219, 'Looc Proper'),
(32338, 1219, 'Mamanga Daku'),
(32339, 1219, 'Mamanga Gamay'),
(32340, 1219, 'Mangidkid'),
(32341, 1219, 'New Cartagena'),
(32342, 1219, 'New Look'),
(32343, 1219, 'Northern Poblacion'),
(32344, 1219, 'Panalsalan'),
(32345, 1219, 'Puntod'),
(32346, 1219, 'Quirino'),
(32347, 1219, 'Santa Cruz'),
(32348, 1219, 'Southern Looc'),
(32349, 1219, 'Southern Poblacion'),
(32350, 1219, 'Tipolo'),
(32351, 1219, 'Unidos'),
(32352, 1219, 'Usocan'),
(32353, 1220, 'Bautista'),
(32354, 1220, 'Bitibut'),
(32355, 1220, 'Boundary'),
(32356, 1220, 'Caluya'),
(32357, 1220, 'Capundag'),
(32358, 1220, 'Casul'),
(32359, 1220, 'Dasa'),
(32360, 1220, 'Dioyo'),
(32361, 1220, 'Guinabot'),
(32362, 1220, 'Libertad'),
(32363, 1220, 'Locus'),
(32364, 1220, 'Manla'),
(32365, 1220, 'Masubong'),
(32366, 1220, 'Agapito Yap, Sr.'),
(32367, 1220, 'Poblacion'),
(32368, 1220, 'Salimpuno'),
(32369, 1220, 'San Agustin'),
(32370, 1220, 'Sinaad'),
(32371, 1220, 'Sipac'),
(32372, 1220, 'Sixto Velez, Sr.'),
(32373, 1220, 'Upper Bautista'),
(32374, 1220, 'Ventura'),
(32375, 1220, 'Medallo'),
(32376, 1220, 'Dalumpinas'),
(32377, 1220, 'Disoy'),
(32378, 1220, 'El Paraiso'),
(32379, 1220, 'Macabibo'),
(32380, 1220, 'Sapang Ama'),
(32381, 1221, 'Cagay-anon'),
(32382, 1221, 'Camanse'),
(32383, 1221, 'Colupan Alto'),
(32384, 1221, 'Colupan Bajo'),
(32385, 1221, 'Dinas'),
(32386, 1221, 'Estrella'),
(32387, 1221, 'Katipunan'),
(32388, 1221, 'Libertad Alto'),
(32389, 1221, 'Libertad Bajo'),
(32390, 1221, 'Poblacion'),
(32391, 1221, 'San Isidro Alto'),
(32392, 1221, 'San Isidro Bajo'),
(32393, 1221, 'San Vicente'),
(32394, 1221, 'Señor'),
(32395, 1221, 'Sinonoc'),
(32396, 1221, 'San Lorenzo Ruiz'),
(32397, 1221, 'Tipan'),
(32398, 1222, 'Santa Maria'),
(32399, 1222, 'Balatacan'),
(32400, 1222, 'Banglay'),
(32401, 1222, 'Mantic'),
(32402, 1222, 'Migcanaway'),
(32403, 1222, 'Bintana'),
(32404, 1222, 'Bocator'),
(32405, 1222, 'Bongabong'),
(32406, 1222, 'Caniangan'),
(32407, 1222, 'Capalaran'),
(32408, 1222, 'Catagan'),
(32409, 1222, 'Barangay I - City Hall (Pob.)'),
(32410, 1222, 'Barangay II - Marilou Annex (Pob.)'),
(32411, 1222, 'Barangay IV - St. Michael (Pob.)'),
(32412, 1222, 'Isidro D. Tan'),
(32413, 1222, 'Garang'),
(32414, 1222, 'Guinabot'),
(32415, 1222, 'Guinalaban'),
(32416, 1222, 'Kauswagan'),
(32417, 1222, 'Kimat'),
(32418, 1222, 'Labuyo'),
(32419, 1222, 'Lorenzo Tan'),
(32420, 1222, 'Barangay VI - Lower Polao (Pob.)'),
(32421, 1222, 'Lumban'),
(32422, 1222, 'Maloro'),
(32423, 1222, 'Barangay V - Malubog (Pob.)'),
(32424, 1222, 'Manga'),
(32425, 1222, 'Maquilao'),
(32426, 1222, 'Barangay III- Market Kalubian (Pob.)'),
(32427, 1222, 'Minsubong'),
(32428, 1222, 'Owayan'),
(32429, 1222, 'Paiton'),
(32430, 1222, 'Panalsalan'),
(32431, 1222, 'Pangabuan'),
(32432, 1222, 'Prenza'),
(32433, 1222, 'Salimpuno'),
(32434, 1222, 'San Antonio'),
(32435, 1222, 'San Apolinario'),
(32436, 1222, 'San Vicente'),
(32437, 1222, 'Santa Cruz'),
(32438, 1222, 'Santo Niño'),
(32439, 1222, 'Silangit'),
(32440, 1222, 'Simasay'),
(32441, 1222, 'Sumirap'),
(32442, 1222, 'Taguite'),
(32443, 1222, 'Tituron'),
(32444, 1222, 'Barangay VII - Upper Polao (Pob.)'),
(32445, 1222, 'Villaba'),
(32446, 1222, 'Silanga'),
(32447, 1222, 'Aquino'),
(32448, 1222, 'Baluk'),
(32449, 1222, 'Huyohoy'),
(32450, 1222, 'Matugnaw'),
(32451, 1222, 'Sicot'),
(32452, 1222, 'Tugas'),
(32453, 1223, 'Balon'),
(32454, 1223, 'Barra'),
(32455, 1223, 'Basirang'),
(32456, 1223, 'Bongabong'),
(32457, 1223, 'Buenavista'),
(32458, 1223, 'Cabol-anonan'),
(32459, 1223, 'Cahayag'),
(32460, 1223, 'Camating'),
(32461, 1223, 'Canibungan Proper'),
(32462, 1223, 'Casilak San Agustin'),
(32463, 1223, 'Centro Hulpa (Pob.)'),
(32464, 1223, 'Centro Napu (Pob.)'),
(32465, 1223, 'Centro Upper (Pob.)'),
(32466, 1223, 'Calambutan Bajo'),
(32467, 1223, 'Calambutan Settlement'),
(32468, 1223, 'Duanguican'),
(32469, 1223, 'Gala'),
(32470, 1223, 'Gumbil'),
(32471, 1223, 'Locso-on'),
(32472, 1223, 'Maikay'),
(32473, 1223, 'Maribojoc'),
(32474, 1223, 'Mitugas'),
(32475, 1223, 'Nailon'),
(32476, 1223, 'Namut'),
(32477, 1223, 'Napurog'),
(32478, 1223, 'Pan-ay Diot'),
(32479, 1223, 'San Nicolas'),
(32480, 1223, 'Sebac'),
(32481, 1223, 'Silongon'),
(32482, 1223, 'Sinuza'),
(32483, 1223, 'Taguima'),
(32484, 1223, 'Tigdok'),
(32485, 1223, 'Yahong'),
(32486, 1224, 'Bagong Clarin'),
(32487, 1224, 'Gandawan'),
(32488, 1224, 'Lake Duminagat'),
(32489, 1224, 'Lalud'),
(32490, 1224, 'Lampasan'),
(32491, 1224, 'Liboron'),
(32492, 1224, 'Maramara'),
(32493, 1224, 'Napangan'),
(32494, 1224, 'Nueva Vista'),
(32495, 1224, 'Petianan'),
(32496, 1224, 'Tuno'),
(32497, 1225, 'Baybay'),
(32498, 1225, 'Benigwayan'),
(32499, 1225, 'Calatcat'),
(32500, 1225, 'Lagtang'),
(32501, 1225, 'Lanao'),
(32502, 1225, 'Loguilo'),
(32503, 1225, 'Lourdes'),
(32504, 1225, 'Lumbo'),
(32505, 1225, 'Molocboloc'),
(32506, 1225, 'Poblacion'),
(32507, 1225, 'Sampatulog'),
(32508, 1225, 'Sungay'),
(32509, 1225, 'Talaba'),
(32510, 1225, 'Taparak'),
(32511, 1225, 'Tugasnon'),
(32512, 1225, 'Tula'),
(32513, 1226, 'Balagnan'),
(32514, 1226, 'Baliwagan'),
(32515, 1226, 'San Francisco'),
(32516, 1226, 'Binitinan'),
(32517, 1226, 'Blanco'),
(32518, 1226, 'Calawag'),
(32519, 1226, 'Camuayan'),
(32520, 1226, 'Cogon'),
(32521, 1226, 'Dansuli'),
(32522, 1226, 'Dumarait'),
(32523, 1226, 'Hermano'),
(32524, 1226, 'Kibanban'),
(32525, 1226, 'Linabu'),
(32526, 1226, 'Linggangao'),
(32527, 1226, 'Mambayaan'),
(32528, 1226, 'Mandangoa'),
(32529, 1226, 'Napaliran'),
(32530, 1226, 'Barangay 1 (Pob.)'),
(32531, 1226, 'Barangay 2 (Pob.)'),
(32532, 1226, 'Barangay 3 (Pob.)'),
(32533, 1226, 'Barangay 4 (Pob.)'),
(32534, 1226, 'Barangay 5 (Pob.)'),
(32535, 1226, 'Barangay 6 (Pob.)'),
(32536, 1226, 'Quezon'),
(32537, 1226, 'Rosario'),
(32538, 1226, 'Samay'),
(32539, 1226, 'San Isidro'),
(32540, 1226, 'San Juan'),
(32541, 1226, 'Talusan'),
(32542, 1226, 'Waterfall'),
(32543, 1227, 'Dahilig'),
(32544, 1227, 'Baukbauk Pob.'),
(32545, 1227, 'Kabangasan'),
(32546, 1227, 'Kabulakan'),
(32547, 1227, 'Kauswagan'),
(32548, 1227, 'Lapinig (Pob.)'),
(32549, 1227, 'Mantangale'),
(32550, 1227, 'Mapua'),
(32551, 1227, 'San Alonzo'),
(32552, 1228, 'Dampias'),
(32553, 1228, 'Kitamban'),
(32554, 1228, 'Kitambis'),
(32555, 1228, 'Mabini'),
(32556, 1228, 'Mosangot'),
(32557, 1228, 'Nabataan'),
(32558, 1228, 'Poblacion'),
(32559, 1228, 'Valdeconcha'),
(32560, 1229, 'Agusan'),
(32561, 1229, 'Baikingon'),
(32562, 1229, 'Bulua'),
(32563, 1229, 'Balubal'),
(32564, 1229, 'Balulang'),
(32565, 1229, 'Barangay 10 (Pob.)'),
(32566, 1229, 'Barangay 11 (Pob.)'),
(32567, 1229, 'Barangay 12 (Pob.)'),
(32568, 1229, 'Barangay 13 (Pob.)'),
(32569, 1229, 'Barangay 14 (Pob.)'),
(32570, 1229, 'Barangay 15 (Pob.)'),
(32571, 1229, 'Barangay 16 (Pob.)'),
(32572, 1229, 'Barangay 17 (Pob.)'),
(32573, 1229, 'Barangay 18 (Pob.)'),
(32574, 1229, 'Barangay 19 (Pob.)'),
(32575, 1229, 'Barangay 2 (Pob.)'),
(32576, 1229, 'Barangay 21 (Pob.)'),
(32577, 1229, 'Barangay 22 (Pob.)'),
(32578, 1229, 'Barangay 23 (Pob.)'),
(32579, 1229, 'Barangay 24 (Pob.)'),
(32580, 1229, 'Barangay 26 (Pob.)'),
(32581, 1229, 'Barangay 27 (Pob.)'),
(32582, 1229, 'Barangay 28 (Pob.)'),
(32583, 1229, 'Barangay 3 (Pob.)'),
(32584, 1229, 'Barangay 30 (Pob.)'),
(32585, 1229, 'Barangay 32 (Pob.)'),
(32586, 1229, 'Barangay 33 (Pob.)'),
(32587, 1229, 'Barangay 34 (Pob.)'),
(32588, 1229, 'Barangay 38 (Pob.)'),
(32589, 1229, 'Barangay 39 (Pob.)'),
(32590, 1229, 'Barangay 4 (Pob.)'),
(32591, 1229, 'Barangay 40 (Pob.)'),
(32592, 1229, 'Barangay 6 (Pob.)'),
(32593, 1229, 'Barangay 8 (Pob.)'),
(32594, 1229, 'Barangay 9 (Pob.)'),
(32595, 1229, 'Barangay 5 (Pob.)'),
(32596, 1229, 'Bayabas'),
(32597, 1229, 'Bayanga'),
(32598, 1229, 'Besigan'),
(32599, 1229, 'Bonbon'),
(32600, 1229, 'Bugo'),
(32601, 1229, 'Camaman-an'),
(32602, 1229, 'Canito-an'),
(32603, 1229, 'Carmen'),
(32604, 1229, 'Consolacion'),
(32605, 1229, 'Cugman'),
(32606, 1229, 'Dansolihon'),
(32607, 1229, 'F. S. Catanico'),
(32608, 1229, 'Gusa'),
(32609, 1229, 'Indahag'),
(32610, 1229, 'Iponan'),
(32611, 1229, 'Kauswagan'),
(32612, 1229, 'Lapasan'),
(32613, 1229, 'Lumbia'),
(32614, 1229, 'Macabalan'),
(32615, 1229, 'Macasandig'),
(32616, 1229, 'Mambuaya'),
(32617, 1229, 'Nazareth'),
(32618, 1229, 'Pagalungan'),
(32619, 1229, 'Pagatpat'),
(32620, 1229, 'Patag'),
(32621, 1229, 'Pigsag-an'),
(32622, 1229, 'Puerto'),
(32623, 1229, 'Puntod'),
(32624, 1229, 'San Simon'),
(32625, 1229, 'Tablon'),
(32626, 1229, 'Taglimao'),
(32627, 1229, 'Tagpangi'),
(32628, 1229, 'Tignapoloan'),
(32629, 1229, 'Tuburan'),
(32630, 1229, 'Tumpagon'),
(32631, 1229, 'Barangay 1 (Pob.)'),
(32632, 1229, 'Barangay 7 (Pob.)'),
(32633, 1229, 'Barangay 20 (Pob.)'),
(32634, 1229, 'Barangay 25 (Pob.)'),
(32635, 1229, 'Barangay 29 (Pob.)'),
(32636, 1229, 'Barangay 31 (Pob.)'),
(32637, 1229, 'Barangay 35 (Pob.)'),
(32638, 1229, 'Barangay 36 (Pob.)'),
(32639, 1229, 'Barangay 37 (Pob.)'),
(32640, 1230, 'Ani-e'),
(32641, 1230, 'Aposkahoy'),
(32642, 1230, 'Bulahan'),
(32643, 1230, 'Cabacungan'),
(32644, 1230, 'Pelaez'),
(32645, 1230, 'Gumaod'),
(32646, 1230, 'Hinaplanan'),
(32647, 1230, 'Kalawitan'),
(32648, 1230, 'Lanise'),
(32649, 1230, 'Luna'),
(32650, 1230, 'Madaguing'),
(32651, 1230, 'Malagana'),
(32652, 1230, 'Minalwang'),
(32653, 1230, 'Mat-i'),
(32654, 1230, 'Panampawan'),
(32655, 1230, 'Pambugas'),
(32656, 1230, 'Patrocenio'),
(32657, 1230, 'Plaridel'),
(32658, 1230, 'Poblacion'),
(32659, 1230, 'Punong'),
(32660, 1230, 'Rizal'),
(32661, 1230, 'Santa Cruz'),
(32662, 1230, 'Tamboboan'),
(32663, 1230, 'Tipolohon'),
(32664, 1231, 'Amoros'),
(32665, 1231, 'Bolisong'),
(32666, 1231, 'Bolobolo'),
(32667, 1231, 'Calongonan'),
(32668, 1231, 'Cogon'),
(32669, 1231, 'Himaya'),
(32670, 1231, 'Hinigdaan'),
(32671, 1231, 'Kalabaylabay'),
(32672, 1231, 'Molugan'),
(32673, 1231, 'Poblacion'),
(32674, 1231, 'Kibonbon'),
(32675, 1231, 'Sambulawan'),
(32676, 1231, 'Sinaloc'),
(32677, 1231, 'Taytay'),
(32678, 1231, 'Ulaliman'),
(32679, 1232, 'Agay-ayan'),
(32680, 1232, 'Alagatan'),
(32681, 1232, 'Anakan'),
(32682, 1232, 'Bagubad'),
(32683, 1232, 'Bakidbakid'),
(32684, 1232, 'Bal-ason'),
(32685, 1232, 'Bantaawan'),
(32686, 1232, 'Binakalan'),
(32687, 1232, 'Capitulangan'),
(32688, 1232, 'Daan-Lungsod'),
(32689, 1232, 'Hindangon'),
(32690, 1232, 'Kalagonoy'),
(32691, 1232, 'Kibuging'),
(32692, 1232, 'Kipuntos'),
(32693, 1232, 'Lawaan'),
(32694, 1232, 'Lawit'),
(32695, 1232, 'Libertad'),
(32696, 1232, 'Libon'),
(32697, 1232, 'Lunao'),
(32698, 1232, 'Lunotan'),
(32699, 1232, 'Malibud'),
(32700, 1232, 'Malinao'),
(32701, 1232, 'Maribucao'),
(32702, 1232, 'Mimbuntong'),
(32703, 1232, 'Mimbalagon'),
(32704, 1232, 'Mimbunga'),
(32705, 1232, 'Minsapinit'),
(32706, 1232, 'Murallon'),
(32707, 1232, 'Odiongan'),
(32708, 1232, 'Pangasihan'),
(32709, 1232, 'Pigsaluhan'),
(32710, 1232, 'Barangay 1 (Pob.)'),
(32711, 1232, 'Barangay 10 (Pob.)'),
(32712, 1232, 'Barangay 11 (Pob.)'),
(32713, 1232, 'Barangay 12 (Pob.)'),
(32714, 1232, 'Barangay 13 (Pob.)'),
(32715, 1232, 'Barangay 14 (Pob.)'),
(32716, 1232, 'Barangay 15 (Pob.)'),
(32717, 1232, 'Barangay 16 (Pob.)'),
(32718, 1232, 'Barangay 17 (Pob.)'),
(32719, 1232, 'Barangay 18-A (Pob.)'),
(32720, 1232, 'Barangay 19 (Pob.)'),
(32721, 1232, 'Barangay 2 (Pob.)'),
(32722, 1232, 'Barangay 20 (Pob.)'),
(32723, 1232, 'Barangay 21 (Pob.)'),
(32724, 1232, 'Barangay 22-A (Pob.)'),
(32725, 1232, 'Barangay 23 (Pob.)'),
(32726, 1232, 'Barangay 24 (Pob.)'),
(32727, 1232, 'Barangay 25 (Pob.)'),
(32728, 1232, 'Barangay 26 (Pob.)'),
(32729, 1232, 'Barangay 3 (Pob.)'),
(32730, 1232, 'Barangay 4 (Pob.)'),
(32731, 1232, 'Barangay 5 (Pob.)'),
(32732, 1232, 'Barangay 6 (Pob.)'),
(32733, 1232, 'Barangay 7 (Pob.)'),
(32734, 1232, 'Barangay 8 (Pob.)'),
(32735, 1232, 'Barangay 9 (Pob.)'),
(32736, 1232, 'Punong'),
(32737, 1232, 'Ricoro'),
(32738, 1232, 'Samay'),
(32739, 1232, 'San Juan'),
(32740, 1232, 'San Luis'),
(32741, 1232, 'San Miguel'),
(32742, 1232, 'Santiago'),
(32743, 1232, 'Talisay'),
(32744, 1232, 'Talon'),
(32745, 1232, 'Tinabalan'),
(32746, 1232, 'Tinulongan'),
(32747, 1232, 'Barangay 18 (Pob.)'),
(32748, 1232, 'Barangay 22 (Pob.)'),
(32749, 1232, 'Barangay 24-A (Pob.)'),
(32750, 1232, 'Dinawehan'),
(32751, 1232, 'Eureka'),
(32752, 1232, 'Kalipay'),
(32753, 1232, 'Kamanikan'),
(32754, 1232, 'Kianlagan'),
(32755, 1232, 'San Jose'),
(32756, 1232, 'Sangalan'),
(32757, 1232, 'Tagpako'),
(32758, 1233, 'Burnay'),
(32759, 1233, 'Carlos P. Garcia'),
(32760, 1233, 'Cogon'),
(32761, 1233, 'Gregorio Pelaez'),
(32762, 1233, 'Kilangit'),
(32763, 1233, 'Matangad'),
(32764, 1233, 'Pangayawan'),
(32765, 1233, 'Poblacion'),
(32766, 1233, 'Quezon'),
(32767, 1233, 'Tala-o'),
(32768, 1233, 'Ulab'),
(32769, 1234, 'Aluna'),
(32770, 1234, 'Andales'),
(32771, 1234, 'Apas'),
(32772, 1234, 'Calacapan'),
(32773, 1234, 'Gimangpang'),
(32774, 1234, 'Jampason'),
(32775, 1234, 'Kamelon'),
(32776, 1234, 'Kanitoan'),
(32777, 1234, 'Oguis'),
(32778, 1234, 'Pagahan'),
(32779, 1234, 'Poblacion'),
(32780, 1234, 'Pontacon'),
(32781, 1234, 'San Pedro'),
(32782, 1234, 'Sinalac'),
(32783, 1234, 'Tawantawan'),
(32784, 1234, 'Tubigan'),
(32785, 1235, 'Aplaya'),
(32786, 1235, 'Bobontugan'),
(32787, 1235, 'Corrales'),
(32788, 1235, 'Danao'),
(32789, 1235, 'Jampason'),
(32790, 1235, 'Kimaya'),
(32791, 1235, 'Lower Jasaan (Pob.)'),
(32792, 1235, 'Luz Banzon'),
(32793, 1235, 'Natubo'),
(32794, 1235, 'San Antonio'),
(32795, 1235, 'San Isidro'),
(32796, 1235, 'San Nicolas'),
(32797, 1235, 'Solana'),
(32798, 1235, 'Upper Jasaan (Pob.)'),
(32799, 1235, 'I. S. Cruz'),
(32800, 1236, 'Beray'),
(32801, 1236, 'Bolisong'),
(32802, 1236, 'Buko'),
(32803, 1236, 'Kalitian'),
(32804, 1236, 'Calubo'),
(32805, 1236, 'Campo'),
(32806, 1236, 'Esperanza'),
(32807, 1236, 'Kagumahan'),
(32808, 1236, 'Kitotok'),
(32809, 1236, 'Panabol'),
(32810, 1236, 'Poblacion'),
(32811, 1236, 'Salicapawan'),
(32812, 1236, 'Salubsob'),
(32813, 1236, 'Suarez'),
(32814, 1236, 'Sumalag'),
(32815, 1237, 'Banglay'),
(32816, 1237, 'Dampil'),
(32817, 1237, 'Gaston'),
(32818, 1237, 'Kabulawan'),
(32819, 1237, 'Kauswagan'),
(32820, 1237, 'Lumbo'),
(32821, 1237, 'Manaol'),
(32822, 1237, 'Poblacion'),
(32823, 1237, 'Tabok'),
(32824, 1237, 'Umagos'),
(32825, 1238, 'Aromahon'),
(32826, 1238, 'Gasi'),
(32827, 1238, 'Kibaghot'),
(32828, 1238, 'Lapad'),
(32829, 1238, 'Liberty'),
(32830, 1238, 'Mauswagon'),
(32831, 1238, 'Moog'),
(32832, 1238, 'Poblacion'),
(32833, 1238, 'Sambulawan'),
(32834, 1238, 'Sinai'),
(32835, 1238, 'Tubajon'),
(32836, 1239, 'Dulong'),
(32837, 1239, 'Gimaylan'),
(32838, 1239, 'Kimalok'),
(32839, 1239, 'Lubluban'),
(32840, 1239, 'Poblacion'),
(32841, 1239, 'Retablo'),
(32842, 1239, 'Santo Niño'),
(32843, 1239, 'Tangcub'),
(32844, 1239, 'Taytayan'),
(32845, 1240, 'Aya-aya'),
(32846, 1240, 'Betahon'),
(32847, 1240, 'Biga'),
(32848, 1240, 'Calangahan'),
(32849, 1240, 'Kaluknayan'),
(32850, 1240, 'Lower Talacogon'),
(32851, 1240, 'Poblacion'),
(32852, 1240, 'Upper Talacogon'),
(32853, 1241, 'Abunda'),
(32854, 1241, 'Artadi'),
(32855, 1241, 'Bonifacio Aquino'),
(32856, 1241, 'Cabalawan'),
(32857, 1241, 'Cabantian'),
(32858, 1241, 'Cabubuhan'),
(32859, 1241, 'Candiis'),
(32860, 1241, 'Consuelo'),
(32861, 1241, 'Damayuhan'),
(32862, 1241, 'Gumabon'),
(32863, 1241, 'Kauswagan'),
(32864, 1241, 'Kibungsod'),
(32865, 1241, 'Mahayahay'),
(32866, 1241, 'Mindulao'),
(32867, 1241, 'Pag-asa'),
(32868, 1241, 'Poblacion'),
(32869, 1241, 'San Isidro'),
(32870, 1241, 'San Vicente'),
(32871, 1241, 'Santa Cruz'),
(32872, 1241, 'Tibon-tibon'),
(32873, 1241, 'Tulang'),
(32874, 1241, 'Villa Felipa'),
(32875, 1241, 'Katipunan'),
(32876, 1241, 'Tama'),
(32877, 1241, 'Tinaan'),
(32878, 1242, 'Argayoso'),
(32879, 1242, 'Balintad'),
(32880, 1242, 'Cabalantian'),
(32881, 1242, 'Camanga'),
(32882, 1242, 'Digkilaan'),
(32883, 1242, 'Mahayahay'),
(32884, 1242, 'Pagawan'),
(32885, 1242, 'Paniangan'),
(32886, 1242, 'Patag'),
(32887, 1242, 'Poblacion'),
(32888, 1242, 'Punta Silum'),
(32889, 1242, 'Tuod'),
(32890, 1242, 'Upper Malubog'),
(32891, 1243, 'Bangbang'),
(32892, 1243, 'Bulwa'),
(32893, 1243, 'Cabug'),
(32894, 1243, 'Dig-aguyan'),
(32895, 1243, 'Duka'),
(32896, 1243, 'Gasa'),
(32897, 1243, 'Maanas'),
(32898, 1243, 'Mananum Bag-o'),
(32899, 1243, 'Mananum Daan'),
(32900, 1243, 'North Poblacion'),
(32901, 1243, 'Pahindong'),
(32902, 1243, 'Portulin'),
(32903, 1243, 'San Isidro'),
(32904, 1243, 'San Jose'),
(32905, 1243, 'San Roque'),
(32906, 1243, 'San Vicente'),
(32907, 1243, 'South Poblacion'),
(32908, 1243, 'Tambagan'),
(32909, 1243, 'Tup-on'),
(32910, 1244, 'Don Pedro'),
(32911, 1244, 'Linangkayan'),
(32912, 1244, 'Lubilan'),
(32913, 1244, 'Mapulog'),
(32914, 1244, 'Maputi'),
(32915, 1244, 'Mat-i'),
(32916, 1244, 'Patag'),
(32917, 1244, 'Poblacion'),
(32918, 1244, 'Tagbalogo'),
(32919, 1244, 'Tuboran'),
(32920, 1245, 'Awang'),
(32921, 1245, 'Bagocboc'),
(32922, 1245, 'Barra'),
(32923, 1245, 'Bonbon'),
(32924, 1245, 'Cauyonan'),
(32925, 1245, 'Igpit'),
(32926, 1245, 'Limonda'),
(32927, 1245, 'Luyongbonbon'),
(32928, 1245, 'Malanang'),
(32929, 1245, 'Nangcaon'),
(32930, 1245, 'Patag'),
(32931, 1245, 'Poblacion'),
(32932, 1245, 'Taboc'),
(32933, 1245, 'Tingalan'),
(32934, 1246, 'Alipuaton'),
(32935, 1246, 'Ampenican'),
(32936, 1246, 'Bunal'),
(32937, 1246, 'Dinagsaan'),
(32938, 1246, 'Guinalaban'),
(32939, 1246, 'Ili-ilihon'),
(32940, 1246, 'Inobulan'),
(32941, 1246, 'Looc'),
(32942, 1246, 'Matampa'),
(32943, 1246, 'Membuli'),
(32944, 1246, 'Poblacion'),
(32945, 1246, 'Salagsag'),
(32946, 1246, 'Salay River I'),
(32947, 1246, 'Salay River II'),
(32948, 1246, 'Saray'),
(32949, 1246, 'Tinagaan'),
(32950, 1246, 'Yungod'),
(32951, 1246, 'Casulog'),
(32952, 1247, 'Alicomohan'),
(32953, 1247, 'Ampianga'),
(32954, 1247, 'Kaulayanan'),
(32955, 1247, 'Kidampas'),
(32956, 1247, 'Kiraging'),
(32957, 1247, 'Mangga'),
(32958, 1247, 'Mimbuahan'),
(32959, 1247, 'Poblacion'),
(32960, 1247, 'Santa Cruz'),
(32961, 1247, 'Silad'),
(32962, 1248, 'Baluarte'),
(32963, 1248, 'Casinglot'),
(32964, 1248, 'Gracia'),
(32965, 1248, 'Mohon'),
(32966, 1248, 'Natumolan'),
(32967, 1248, 'Poblacion'),
(32968, 1248, 'Rosario'),
(32969, 1248, 'Santa Ana'),
(32970, 1248, 'Santa Cruz'),
(32971, 1248, 'Sugbongcogon'),
(32972, 1249, 'Bugdang'),
(32973, 1249, 'Calamcam'),
(32974, 1249, 'Casibole'),
(32975, 1249, 'Macopa'),
(32976, 1249, 'Magkarila'),
(32977, 1249, 'Mahayag'),
(32978, 1249, 'Mandahilag'),
(32979, 1249, 'Mintabon'),
(32980, 1249, 'Pangpangon'),
(32981, 1249, 'Poblacion'),
(32982, 1249, 'Pook'),
(32983, 1249, 'Punta Santiago'),
(32984, 1249, 'Puting Balas'),
(32985, 1249, 'San Jose'),
(32986, 1249, 'Santa Ines'),
(32987, 1249, 'Sibantang'),
(32988, 1249, 'Sindangan'),
(32989, 1249, 'Tagbocboc'),
(32990, 1250, 'Balacanas'),
(32991, 1250, 'Dayawan'),
(32992, 1250, 'Katipunan'),
(32993, 1250, 'Kimaya'),
(32994, 1250, 'Poblacion 1'),
(32995, 1250, 'San Martin'),
(32996, 1250, 'Tambobong'),
(32997, 1250, 'Imelda'),
(32998, 1250, 'Looc'),
(32999, 1250, 'Poblacion 2'),
(33000, 1250, 'Poblacion 3'),
(33001, 1251, 'Binancian'),
(33002, 1251, 'Buan'),
(33003, 1251, 'Buclad'),
(33004, 1251, 'Cabaywa'),
(33005, 1251, 'Camansa'),
(33006, 1251, 'Camoning'),
(33007, 1251, 'Canatan'),
(33008, 1251, 'Concepcion'),
(33009, 1251, 'Doña Andrea'),
(33010, 1251, 'Magatos'),
(33011, 1251, 'Napungas'),
(33012, 1251, 'New Bantayan'),
(33013, 1251, 'New Santiago'),
(33014, 1251, 'Pamacaun'),
(33015, 1251, 'Cambanogoy (Pob.)'),
(33016, 1251, 'Sagayen'),
(33017, 1251, 'San Vicente'),
(33018, 1251, 'Santa Filomena'),
(33019, 1251, 'Sonlon'),
(33020, 1251, 'New Loon'),
(33021, 1252, 'Alejal'),
(33022, 1252, 'Anibongan'),
(33023, 1252, 'Asuncion'),
(33024, 1252, 'Cebulano'),
(33025, 1252, 'Guadalupe'),
(33026, 1252, 'Ising (Pob.)'),
(33027, 1252, 'La Paz'),
(33028, 1252, 'Mabaus'),
(33029, 1252, 'Mabuhay'),
(33030, 1252, 'Magsaysay'),
(33031, 1252, 'Mangalcal'),
(33032, 1252, 'Minda'),
(33033, 1252, 'New Camiling'),
(33034, 1252, 'San Isidro'),
(33035, 1252, 'Santo Niño'),
(33036, 1252, 'Tibulao'),
(33037, 1252, 'Tubod'),
(33038, 1252, 'Tuganay'),
(33039, 1252, 'Salvacion'),
(33040, 1252, 'Taba'),
(33041, 1253, 'Semong'),
(33042, 1253, 'Florida'),
(33043, 1253, 'Gabuyan'),
(33044, 1253, 'Gupitan'),
(33045, 1253, 'Capungagan'),
(33046, 1253, 'Katipunan'),
(33047, 1253, 'Luna'),
(33048, 1253, 'Mabantao'),
(33049, 1253, 'Mamacao'),
(33050, 1253, 'Pag-asa'),
(33051, 1253, 'Maniki'),
(33052, 1253, 'Sampao'),
(33053, 1253, 'Sua-on'),
(33054, 1253, 'Tiburcia'),
(33055, 1254, 'Cabidianan'),
(33056, 1254, 'Carcor'),
(33057, 1254, 'Del Monte'),
(33058, 1254, 'Del Pilar'),
(33059, 1254, 'El Salvador'),
(33060, 1254, 'Limba-an'),
(33061, 1254, 'Macgum'),
(33062, 1254, 'Mambing'),
(33063, 1254, 'Mesaoy'),
(33064, 1254, 'New Bohol'),
(33065, 1254, 'New Cortez'),
(33066, 1254, 'New Sambog'),
(33067, 1254, 'Patrocenio'),
(33068, 1254, 'Poblacion'),
(33069, 1254, 'San Roque'),
(33070, 1254, 'Santa Cruz'),
(33071, 1254, 'Santa Fe'),
(33072, 1254, 'Santo Niño'),
(33073, 1254, 'Suawon'),
(33074, 1254, 'San Jose'),
(33075, 1255, 'A. O. Floirendo'),
(33076, 1255, 'Datu Abdul Dadia'),
(33077, 1255, 'Buenavista'),
(33078, 1255, 'Cacao'),
(33079, 1255, 'Cagangohan'),
(33080, 1255, 'Consolacion'),
(33081, 1255, 'Dapco'),
(33082, 1255, 'Gredu (Pob.)'),
(33083, 1255, 'J.P. Laurel'),
(33084, 1255, 'Kasilak'),
(33085, 1255, 'Katipunan'),
(33086, 1255, 'Katualan'),
(33087, 1255, 'Kauswagan'),
(33088, 1255, 'Kiotoy'),
(33089, 1255, 'Little Panay'),
(33090, 1255, 'Lower Panaga'),
(33091, 1255, 'Mabunao'),
(33092, 1255, 'Maduao'),
(33093, 1255, 'Malativas'),
(33094, 1255, 'Manay'),
(33095, 1255, 'Nanyo'),
(33096, 1255, 'New Malaga'),
(33097, 1255, 'New Malitbog'),
(33098, 1255, 'New Pandan (Pob.)'),
(33099, 1255, 'New Visayas'),
(33100, 1255, 'Quezon'),
(33101, 1255, 'Salvacion'),
(33102, 1255, 'San Francisco (Pob.)'),
(33103, 1255, 'San Nicolas'),
(33104, 1255, 'San Roque'),
(33105, 1255, 'San Vicente'),
(33106, 1255, 'Santa Cruz'),
(33107, 1255, 'Santo Niño (Pob.)'),
(33108, 1255, 'Sindaton'),
(33109, 1255, 'Southern Davao'),
(33110, 1255, 'Tagpore'),
(33111, 1255, 'Tibungol'),
(33112, 1255, 'Upper Licanan'),
(33113, 1255, 'Waterfall'),
(33114, 1255, 'San Pedro'),
(33115, 1256, 'Adecor'),
(33116, 1256, 'Anonang'),
(33117, 1256, 'Aumbay'),
(33118, 1256, 'Aundanao'),
(33119, 1256, 'Balet'),
(33120, 1256, 'Bandera'),
(33121, 1256, 'Caliclic'),
(33122, 1256, 'Camudmud'),
(33123, 1256, 'Catagman'),
(33124, 1256, 'Cawag'),
(33125, 1256, 'Cogon'),
(33126, 1256, 'Cogon (Talicod)'),
(33127, 1256, 'Dadatan'),
(33128, 1256, 'Del Monte'),
(33129, 1256, 'Guilon'),
(33130, 1256, 'Kanaan'),
(33131, 1256, 'Kinawitnon'),
(33132, 1256, 'Libertad'),
(33133, 1256, 'Libuak'),
(33134, 1256, 'Licup'),
(33135, 1256, 'Limao'),
(33136, 1256, 'Linosutan'),
(33137, 1256, 'Mambago-A'),
(33138, 1256, 'Mambago-B'),
(33139, 1256, 'Miranda (Pob.)'),
(33140, 1256, 'Moncado (Pob.)'),
(33141, 1256, 'Pangubatan'),
(33142, 1256, 'Peñaplata (Pob.)'),
(33143, 1256, 'Poblacion'),
(33144, 1256, 'San Agustin'),
(33145, 1256, 'San Antonio'),
(33146, 1256, 'San Isidro (Babak)'),
(33147, 1256, 'San Isidro (Kaputian)'),
(33148, 1256, 'San Jose'),
(33149, 1256, 'San Miguel'),
(33150, 1256, 'San Remigio'),
(33151, 1256, 'Santa Cruz'),
(33152, 1256, 'Santo Niño'),
(33153, 1256, 'Sion'),
(33154, 1256, 'Tagbaobo'),
(33155, 1256, 'Tagbay'),
(33156, 1256, 'Tagbitan-ag'),
(33157, 1256, 'Tagdaliao'),
(33158, 1256, 'Tagpopongan'),
(33159, 1256, 'Tambo'),
(33160, 1256, 'Toril'),
(33161, 1257, 'Balagunan'),
(33162, 1257, 'Bobongon'),
(33163, 1257, 'Esperanza'),
(33164, 1257, 'Kimamon'),
(33165, 1257, 'Kinamayan'),
(33166, 1257, 'La Libertad'),
(33167, 1257, 'Lungaog'),
(33168, 1257, 'Magwawa'),
(33169, 1257, 'New Katipunan'),
(33170, 1257, 'Pantaron'),
(33171, 1257, 'Tibal-og (Pob.)'),
(33172, 1257, 'San Jose'),
(33173, 1257, 'San Miguel'),
(33174, 1257, 'Talomo'),
(33175, 1257, 'Casig-Ang'),
(33176, 1257, 'New Visayas'),
(33177, 1257, 'Salvacion'),
(33178, 1257, 'San Vicente'),
(33179, 1257, 'Tulalian'),
(33180, 1258, 'Apokon'),
(33181, 1258, 'Bincungan'),
(33182, 1258, 'Busaon'),
(33183, 1258, 'Canocotan'),
(33184, 1258, 'Cuambogan'),
(33185, 1258, 'La Filipina'),
(33186, 1258, 'Liboganon'),
(33187, 1258, 'Madaum'),
(33188, 1258, 'Magdum'),
(33189, 1258, 'Mankilam'),
(33190, 1258, 'New Balamban'),
(33191, 1258, 'Nueva Fuerza'),
(33192, 1258, 'Pagsabangan'),
(33193, 1258, 'Pandapan'),
(33194, 1258, 'Magugpo Poblacion'),
(33195, 1258, 'San Agustin'),
(33196, 1258, 'San Isidro'),
(33197, 1258, 'San Miguel'),
(33198, 1258, 'Visayan Village'),
(33199, 1258, 'Magugpo East'),
(33200, 1258, 'Magugpo North'),
(33201, 1258, 'Magugpo South'),
(33202, 1258, 'Magugpo West'),
(33203, 1259, 'Dagohoy'),
(33204, 1259, 'Palma Gil'),
(33205, 1259, 'Santo Niño'),
(33206, 1260, 'Cabay-Angan'),
(33207, 1260, 'Dujali'),
(33208, 1260, 'Magupising'),
(33209, 1260, 'New Casay'),
(33210, 1260, 'Tanglaw'),
(33211, 1261, 'Dacudao'),
(33212, 1261, 'Datu Balong'),
(33213, 1261, 'Igangon'),
(33214, 1261, 'Kipalili'),
(33215, 1261, 'Libuton'),
(33216, 1261, 'Linao'),
(33217, 1261, 'Mamangan'),
(33218, 1261, 'Monte Dujali'),
(33219, 1261, 'Pinamuno'),
(33220, 1261, 'Sabangan'),
(33221, 1261, 'San Miguel'),
(33222, 1261, 'Santo Niño'),
(33223, 1261, 'Sawata'),
(33224, 1262, 'Alegre'),
(33225, 1262, 'Alta Vista'),
(33226, 1262, 'Anonang'),
(33227, 1262, 'Bitaug'),
(33228, 1262, 'Bonifacio'),
(33229, 1262, 'Buenavista'),
(33230, 1262, 'Darapuay'),
(33231, 1262, 'Dolo'),
(33232, 1262, 'Eman'),
(33233, 1262, 'Kinuskusan'),
(33234, 1262, 'Libertad'),
(33235, 1262, 'Linawan'),
(33236, 1262, 'Mabuhay'),
(33237, 1262, 'Mabunga'),
(33238, 1262, 'Managa'),
(33239, 1262, 'Marber'),
(33240, 1262, 'New Clarin'),
(33241, 1262, 'Poblacion'),
(33242, 1262, 'Rizal'),
(33243, 1262, 'Santo Niño'),
(33244, 1262, 'Sibayan'),
(33245, 1262, 'Tinongtongan'),
(33246, 1262, 'Tubod'),
(33247, 1262, 'Union'),
(33248, 1262, 'Poblacion Dos'),
(33249, 1263, 'Acacia'),
(33250, 1263, 'Agdao'),
(33251, 1263, 'Alambre'),
(33252, 1263, 'Atan-Awe'),
(33253, 1263, 'Bago Gallera'),
(33254, 1263, 'Bago Oshiro'),
(33255, 1263, 'Baguio (Pob.)'),
(33256, 1263, 'Balengaeng'),
(33257, 1263, 'Baliok'),
(33258, 1263, 'Bangkas Heights'),
(33259, 1263, 'Baracatan'),
(33260, 1263, 'Bato'),
(33261, 1263, 'Bayabas'),
(33262, 1263, 'Biao Escuela'),
(33263, 1263, 'Biao Guianga'),
(33264, 1263, 'Biao Joaquin'),
(33265, 1263, 'Binugao'),
(33266, 1263, 'Bucana'),
(33267, 1263, 'Buhangin (Pob.)'),
(33268, 1263, 'Bunawan (Pob.)'),
(33269, 1263, 'Cabantian'),
(33270, 1263, 'Cadalian'),
(33271, 1263, 'Calinan (Pob.)'),
(33272, 1263, 'Callawa'),
(33273, 1263, 'Camansi'),
(33274, 1263, 'Carmen'),
(33275, 1263, 'Catalunan Grande'),
(33276, 1263, 'Catalunan Pequeño'),
(33277, 1263, 'Catigan'),
(33278, 1263, 'Cawayan'),
(33279, 1263, 'Colosas'),
(33280, 1263, 'Communal'),
(33281, 1263, 'Crossing Bayabas'),
(33282, 1263, 'Dacudao'),
(33283, 1263, 'Dalag'),
(33284, 1263, 'Dalagdag'),
(33285, 1263, 'Daliao'),
(33286, 1263, 'Daliaon Plantation'),
(33287, 1263, 'Dominga'),
(33288, 1263, 'Dumoy'),
(33289, 1263, 'Eden'),
(33290, 1263, 'Fatima'),
(33291, 1263, 'Gatungan'),
(33292, 1263, 'Gumalang'),
(33293, 1263, 'Ilang'),
(33294, 1263, 'Indangan'),
(33295, 1263, 'Kilate'),
(33296, 1263, 'Lacson'),
(33297, 1263, 'Lamanan'),
(33298, 1263, 'Lampianao'),
(33299, 1263, 'Langub'),
(33300, 1263, 'Alejandra Navarro'),
(33301, 1263, 'Lizada'),
(33302, 1263, 'Los Amigos'),
(33303, 1263, 'Lubogan'),
(33304, 1263, 'Lumiad'),
(33305, 1263, 'Ma-a'),
(33306, 1263, 'Mabuhay'),
(33307, 1263, 'Magtuod'),
(33308, 1263, 'Mahayag'),
(33309, 1263, 'Malabog'),
(33310, 1263, 'Malagos'),
(33311, 1263, 'Malamba'),
(33312, 1263, 'Manambulan'),
(33313, 1263, 'Mandug'),
(33314, 1263, 'Manuel Guianga'),
(33315, 1263, 'Mapula'),
(33316, 1263, 'Marapangi'),
(33317, 1263, 'Marilog'),
(33318, 1263, 'Matina Aplaya'),
(33319, 1263, 'Matina Crossing'),
(33320, 1263, 'Matina Pangi'),
(33321, 1263, 'Matina Biao'),
(33322, 1263, 'Mintal'),
(33323, 1263, 'Mudiang'),
(33324, 1263, 'Mulig'),
(33325, 1263, 'New Carmen'),
(33326, 1263, 'New Valencia'),
(33327, 1263, 'Pampanga'),
(33328, 1263, 'Panacan'),
(33329, 1263, 'Panalum'),
(33330, 1263, 'Pandaitan'),
(33331, 1263, 'Pangyan'),
(33332, 1263, 'Paquibato (Pob.)'),
(33333, 1263, 'Paradise Embak'),
(33334, 1263, 'Riverside'),
(33335, 1263, 'Salapawan'),
(33336, 1263, 'Salaysay'),
(33337, 1263, 'San Isidro'),
(33338, 1263, 'Sasa'),
(33339, 1263, 'Sibulan'),
(33340, 1263, 'Sirawan'),
(33341, 1263, 'Sirib'),
(33342, 1263, 'Suawan'),
(33343, 1263, 'Subasta'),
(33344, 1263, 'Sumimao'),
(33345, 1263, 'Tacunan'),
(33346, 1263, 'Tagakpan'),
(33347, 1263, 'Tagluno'),
(33348, 1263, 'Tagurano'),
(33349, 1263, 'Talandang'),
(33350, 1263, 'Talomo (Pob.)'),
(33351, 1263, 'Talomo River'),
(33352, 1263, 'Tamayong'),
(33353, 1263, 'Tambobong'),
(33354, 1263, 'Tamugan'),
(33355, 1263, 'Tapak'),
(33356, 1263, 'Tawan-tawan'),
(33357, 1263, 'Tibuloy'),
(33358, 1263, 'Tibungco'),
(33359, 1263, 'Tigatto'),
(33360, 1263, 'Toril (Pob.)'),
(33361, 1263, 'Tugbok (Pob.)'),
(33362, 1263, 'Tungakalan'),
(33363, 1263, 'Ula'),
(33364, 1263, 'Wangan'),
(33365, 1263, 'Wines'),
(33366, 1263, 'Barangay 1-A (Pob.)'),
(33367, 1263, 'Barangay 2-A (Pob.)'),
(33368, 1263, 'Barangay 3-A (Pob.)'),
(33369, 1263, 'Barangay 4-A (Pob.)'),
(33370, 1263, 'Barangay 5-A (Pob.)'),
(33371, 1263, 'Barangay 6-A (Pob.)'),
(33372, 1263, 'Barangay 7-A (Pob.)'),
(33373, 1263, 'Barangay 8-A (Pob.)'),
(33374, 1263, 'Barangay 9-A (Pob.)'),
(33375, 1263, 'Barangay 10-A (Pob.)'),
(33376, 1263, 'Barangay 11-B (Pob.)'),
(33377, 1263, 'Barangay 12-B (Pob.)'),
(33378, 1263, 'Barangay 13-B (Pob.)'),
(33379, 1263, 'Barangay 14-B (Pob.)'),
(33380, 1263, 'Barangay 15-B (Pob.)'),
(33381, 1263, 'Barangay 16-B (Pob.)'),
(33382, 1263, 'Barangay 17-B (Pob.)'),
(33383, 1263, 'Barangay 18-B (Pob.)'),
(33384, 1263, 'Barangay 19-B (Pob.)'),
(33385, 1263, 'Barangay 20-B (Pob.)'),
(33386, 1263, 'Barangay 21-C (Pob.)'),
(33387, 1263, 'Barangay 22-C (Pob.)'),
(33388, 1263, 'Barangay 23-C (Pob.)'),
(33389, 1263, 'Barangay 24-C (Pob.)'),
(33390, 1263, 'Barangay 25-C (Pob.)'),
(33391, 1263, 'Barangay 26-C (Pob.)'),
(33392, 1263, 'Barangay 27-C (Pob.)'),
(33393, 1263, 'Barangay 28-C (Pob.)'),
(33394, 1263, 'Barangay 29-C (Pob.)'),
(33395, 1263, 'Barangay 30-C (Pob.)'),
(33396, 1263, 'Barangay 31-D (Pob.)'),
(33397, 1263, 'Barangay 32-D (Pob.)'),
(33398, 1263, 'Barangay 33-D (Pob.)'),
(33399, 1263, 'Barangay 34-D (Pob.)'),
(33400, 1263, 'Barangay 35-D (Pob.)'),
(33401, 1263, 'Barangay 36-D (Pob.)'),
(33402, 1263, 'Barangay 37-D (Pob.)'),
(33403, 1263, 'Barangay 38-D (Pob.)'),
(33404, 1263, 'Barangay 39-D (Pob.)'),
(33405, 1263, 'Barangay 40-D (Pob.)'),
(33406, 1263, 'Angalan'),
(33407, 1263, 'Baganihan'),
(33408, 1263, 'Bago Aplaya'),
(33409, 1263, 'Bantol'),
(33410, 1263, 'Buda'),
(33411, 1263, 'Centro'),
(33412, 1263, 'Datu Salumay'),
(33413, 1263, 'Gov. Paciano Bangoy'),
(33414, 1263, 'Gov. Vicente Duterte'),
(33415, 1263, 'Gumitan'),
(33416, 1263, 'Inayangan'),
(33417, 1263, 'Kap. Tomas Monteverde, Sr.'),
(33418, 1263, 'Lapu-lapu'),
(33419, 1263, 'Leon Garcia, Sr.'),
(33420, 1263, 'Magsaysay'),
(33421, 1263, 'Megkawayan'),
(33422, 1263, 'Rafael Castillo'),
(33423, 1263, 'Saloy'),
(33424, 1263, 'San Antonio'),
(33425, 1263, 'Santo Niño'),
(33426, 1263, 'Ubalde'),
(33427, 1263, 'Waan'),
(33428, 1263, 'Wilfredo Aquino'),
(33429, 1263, 'Alfonso Angliongto Sr.'),
(33430, 1263, 'Vicente Hizon Sr.'),
(33431, 1264, 'Aplaya'),
(33432, 1264, 'Balabag'),
(33433, 1264, 'San Jose'),
(33434, 1264, 'Binaton'),
(33435, 1264, 'Cogon'),
(33436, 1264, 'Colorado'),
(33437, 1264, 'Dawis'),
(33438, 1264, 'Dulangan'),
(33439, 1264, 'Goma'),
(33440, 1264, 'Igpit'),
(33441, 1264, 'Kiagot'),
(33442, 1264, 'Lungag'),
(33443, 1264, 'Mahayahay'),
(33444, 1264, 'Matti'),
(33445, 1264, 'Kapatagan'),
(33446, 1264, 'Ruparan'),
(33447, 1264, 'San Agustin'),
(33448, 1264, 'San Miguel'),
(33449, 1264, 'San Roque'),
(33450, 1264, 'Sinawilan'),
(33451, 1264, 'Soong'),
(33452, 1264, 'Tiguman'),
(33453, 1264, 'Tres De Mayo'),
(33454, 1264, 'Zone 1 (Pob.)'),
(33455, 1264, 'Zone 2 (Pob.)'),
(33456, 1264, 'Zone 3 (Pob.)'),
(33457, 1265, 'Balutakay'),
(33458, 1265, 'Clib'),
(33459, 1265, 'Guihing Aplaya'),
(33460, 1265, 'Guihing'),
(33461, 1265, 'Hagonoy Crossing'),
(33462, 1265, 'Kibuaya'),
(33463, 1265, 'La Union'),
(33464, 1265, 'Lanuro'),
(33465, 1265, 'Lapulabao'),
(33466, 1265, 'Leling'),
(33467, 1265, 'Mahayahay'),
(33468, 1265, 'Malabang Damsite'),
(33469, 1265, 'Maliit Digos'),
(33470, 1265, 'New Quezon'),
(33471, 1265, 'Paligue'),
(33472, 1265, 'Poblacion'),
(33473, 1265, 'Sacub'),
(33474, 1265, 'San Guillermo'),
(33475, 1265, 'San Isidro'),
(33476, 1265, 'Sinayawan'),
(33477, 1265, 'Tologan'),
(33478, 1266, 'Abnate'),
(33479, 1266, 'Bagong Negros'),
(33480, 1266, 'Bagong Silang'),
(33481, 1266, 'Bagumbayan'),
(33482, 1266, 'Balasiao'),
(33483, 1266, 'Bonifacio'),
(33484, 1266, 'Bunot'),
(33485, 1266, 'Cogon-Bacaca'),
(33486, 1266, 'Dapok'),
(33487, 1266, 'Ihan'),
(33488, 1266, 'Kibongbong'),
(33489, 1266, 'Kimlawis'),
(33490, 1266, 'Kisulan'),
(33491, 1266, 'Lati-an'),
(33492, 1266, 'Manual'),
(33493, 1266, 'Maraga-a'),
(33494, 1266, 'Molopolo'),
(33495, 1266, 'New Sibonga'),
(33496, 1266, 'Panaglib'),
(33497, 1266, 'Pasig'),
(33498, 1266, 'Poblacion'),
(33499, 1266, 'Pocaleel'),
(33500, 1266, 'San Isidro'),
(33501, 1266, 'San Jose'),
(33502, 1266, 'San Pedro'),
(33503, 1266, 'Santo Niño'),
(33504, 1266, 'Tacub'),
(33505, 1266, 'Tacul'),
(33506, 1266, 'Waterfall'),
(33507, 1266, 'Bulol-Salo'),
(33508, 1267, 'Bacungan'),
(33509, 1267, 'Balnate'),
(33510, 1267, 'Barayong'),
(33511, 1267, 'Blocon'),
(33512, 1267, 'Dalawinon'),
(33513, 1267, 'Dalumay'),
(33514, 1267, 'Glamang'),
(33515, 1267, 'Kanapulo'),
(33516, 1267, 'Kasuga'),
(33517, 1267, 'Lower Bala'),
(33518, 1267, 'Mabini'),
(33519, 1267, 'Malawanit'),
(33520, 1267, 'Malongon'),
(33521, 1267, 'New Ilocos'),
(33522, 1267, 'Poblacion'),
(33523, 1267, 'San Isidro'),
(33524, 1267, 'San Miguel'),
(33525, 1267, 'Tacul'),
(33526, 1267, 'Tagaytay'),
(33527, 1267, 'Upper Bala'),
(33528, 1267, 'Maibo'),
(33529, 1267, 'New Opon'),
(33530, 1268, 'Baybay'),
(33531, 1268, 'Bolton'),
(33532, 1268, 'Bulacan'),
(33533, 1268, 'Caputian'),
(33534, 1268, 'Ibo'),
(33535, 1268, 'Kiblagon'),
(33536, 1268, 'Lapu-Lapu'),
(33537, 1268, 'Mabini'),
(33538, 1268, 'New Baclayon'),
(33539, 1268, 'Pitu'),
(33540, 1268, 'Poblacion'),
(33541, 1268, 'Tagansule'),
(33542, 1268, 'Bagumbayan'),
(33543, 1268, 'Rizal'),
(33544, 1268, 'San Isidro'),
(33545, 1269, 'Asbang'),
(33546, 1269, 'Asinan'),
(33547, 1269, 'Bagumbayan'),
(33548, 1269, 'Bangkal'),
(33549, 1269, 'Buas'),
(33550, 1269, 'Buri'),
(33551, 1269, 'Camanchiles'),
(33552, 1269, 'Ceboza'),
(33553, 1269, 'Colonsabak'),
(33554, 1269, 'Dongan-Pekong'),
(33555, 1269, 'Kabasagan'),
(33556, 1269, 'Kapok'),
(33557, 1269, 'Kauswagan'),
(33558, 1269, 'Kibao'),
(33559, 1269, 'La Suerte'),
(33560, 1269, 'Langa-an'),
(33561, 1269, 'Lower Marber'),
(33562, 1269, 'Cabligan'),
(33563, 1269, 'Manga'),
(33564, 1269, 'New Katipunan'),
(33565, 1269, 'New Murcia'),
(33566, 1269, 'New Visayas'),
(33567, 1269, 'Poblacion'),
(33568, 1269, 'Saboy'),
(33569, 1269, 'San Jose'),
(33570, 1269, 'San Miguel'),
(33571, 1269, 'San Vicente'),
(33572, 1269, 'Saub'),
(33573, 1269, 'Sinaragan'),
(33574, 1269, 'Sinawilan'),
(33575, 1269, 'Tamlangon'),
(33576, 1269, 'Towak'),
(33577, 1269, 'Tibongbong'),
(33578, 1270, 'Almendras (Pob.)'),
(33579, 1270, 'Don Sergio Osmeña, Sr.'),
(33580, 1270, 'Harada Butai'),
(33581, 1270, 'Lower Katipunan'),
(33582, 1270, 'Lower Limonzo'),
(33583, 1270, 'Lower Malinao'),
(33584, 1270, 'N C Ordaneza District (Pob.)'),
(33585, 1270, 'Northern Paligue'),
(33586, 1270, 'Palili'),
(33587, 1270, 'Piape'),
(33588, 1270, 'Punta Piape'),
(33589, 1270, 'Quirino District (Pob.)'),
(33590, 1270, 'San Isidro'),
(33591, 1270, 'Southern Paligue'),
(33592, 1270, 'Tulogan'),
(33593, 1270, 'Upper Limonzo'),
(33594, 1270, 'Upper Malinao'),
(33595, 1271, 'Astorga'),
(33596, 1271, 'Bato'),
(33597, 1271, 'Coronon'),
(33598, 1271, 'Darong'),
(33599, 1271, 'Inawayan'),
(33600, 1271, 'Jose Rizal'),
(33601, 1271, 'Matutungan'),
(33602, 1271, 'Melilia'),
(33603, 1271, 'Zone I (Pob.)'),
(33604, 1271, 'Saliducon'),
(33605, 1271, 'Sibulan'),
(33606, 1271, 'Sinoron'),
(33607, 1271, 'Tagabuli'),
(33608, 1271, 'Tibolo'),
(33609, 1271, 'Tuban'),
(33610, 1271, 'Zone II (Pob.)'),
(33611, 1271, 'Zone III (Pob.)'),
(33612, 1271, 'Zone IV (Pob.)'),
(33613, 1272, 'Balasinon'),
(33614, 1272, 'Buguis'),
(33615, 1272, 'Carre'),
(33616, 1272, 'Clib'),
(33617, 1272, 'Harada Butai');
INSERT INTO `table_barangay` (`barangay_id`, `municipality_id`, `barangay_name`) VALUES
(33618, 1272, 'Katipunan'),
(33619, 1272, 'Kiblagon'),
(33620, 1272, 'Labon'),
(33621, 1272, 'Laperas'),
(33622, 1272, 'Lapla'),
(33623, 1272, 'Litos'),
(33624, 1272, 'Luparan'),
(33625, 1272, 'Mckinley'),
(33626, 1272, 'New Cebu'),
(33627, 1272, 'Osmeña'),
(33628, 1272, 'Palili'),
(33629, 1272, 'Parame'),
(33630, 1272, 'Poblacion'),
(33631, 1272, 'Roxas'),
(33632, 1272, 'Solongvale'),
(33633, 1272, 'Tagolilong'),
(33634, 1272, 'Tala-o'),
(33635, 1272, 'Talas'),
(33636, 1272, 'Tanwalang'),
(33637, 1272, 'Waterfall'),
(33638, 1273, 'Baculin'),
(33639, 1273, 'Banao'),
(33640, 1273, 'Batawan'),
(33641, 1273, 'Batiano'),
(33642, 1273, 'Binondo'),
(33643, 1273, 'Bobonao'),
(33644, 1273, 'Campawan'),
(33645, 1273, 'Central (Pob.)'),
(33646, 1273, 'Dapnan'),
(33647, 1273, 'Kinablangan'),
(33648, 1273, 'Lambajon'),
(33649, 1273, 'Mahanub'),
(33650, 1273, 'Mikit'),
(33651, 1273, 'Salingcomot'),
(33652, 1273, 'San Isidro'),
(33653, 1273, 'San Victor'),
(33654, 1273, 'Lucod'),
(33655, 1273, 'Saoquegue'),
(33656, 1274, 'Cabangcalan'),
(33657, 1274, 'Caganganan'),
(33658, 1274, 'Calubihan'),
(33659, 1274, 'Causwagan'),
(33660, 1274, 'Punta Linao'),
(33661, 1274, 'Mahayag'),
(33662, 1274, 'Maputi'),
(33663, 1274, 'Mogbongcogon'),
(33664, 1274, 'Panikian'),
(33665, 1274, 'Pintatagan'),
(33666, 1274, 'Piso Proper'),
(33667, 1274, 'Poblacion'),
(33668, 1274, 'San Vicente'),
(33669, 1274, 'Rang-ay'),
(33670, 1275, 'Cabasagan'),
(33671, 1275, 'Caatihan'),
(33672, 1275, 'Cawayanan'),
(33673, 1275, 'Poblacion'),
(33674, 1275, 'San Jose'),
(33675, 1275, 'Sibajay'),
(33676, 1275, 'Carmen'),
(33677, 1275, 'Simulao'),
(33678, 1276, 'Alvar'),
(33679, 1276, 'Caningag'),
(33680, 1276, 'Don Leon Balante'),
(33681, 1276, 'Lamiawan'),
(33682, 1276, 'Manorigao'),
(33683, 1276, 'Mercedes'),
(33684, 1276, 'Palma Gil'),
(33685, 1276, 'Pichon'),
(33686, 1276, 'Poblacion'),
(33687, 1276, 'San Antonio'),
(33688, 1276, 'San Jose'),
(33689, 1276, 'San Luis'),
(33690, 1276, 'San Miguel'),
(33691, 1276, 'San Pedro'),
(33692, 1276, 'Santa Fe'),
(33693, 1276, 'Santiago'),
(33694, 1276, 'Sobrecarey'),
(33695, 1277, 'Abijod'),
(33696, 1277, 'Alegria'),
(33697, 1277, 'Aliwagwag'),
(33698, 1277, 'Aragon'),
(33699, 1277, 'Baybay'),
(33700, 1277, 'Maglahus'),
(33701, 1277, 'Mainit'),
(33702, 1277, 'Malibago'),
(33703, 1277, 'San Alfonso'),
(33704, 1277, 'San Antonio'),
(33705, 1277, 'San Miguel'),
(33706, 1277, 'San Rafael'),
(33707, 1277, 'San Vicente'),
(33708, 1277, 'Santa Filomena'),
(33709, 1277, 'Taytayan'),
(33710, 1277, 'Poblacion'),
(33711, 1278, 'Anitap'),
(33712, 1278, 'Manuel Roxas'),
(33713, 1278, 'Don Aurelio Chicote'),
(33714, 1278, 'Lavigan'),
(33715, 1278, 'Luzon'),
(33716, 1278, 'Magdug'),
(33717, 1278, 'Monserrat'),
(33718, 1278, 'Nangan'),
(33719, 1278, 'Oregon'),
(33720, 1278, 'Poblacion'),
(33721, 1278, 'Pundaguitan'),
(33722, 1278, 'Sergio Osmeña'),
(33723, 1278, 'Surop'),
(33724, 1278, 'Tagabebe'),
(33725, 1278, 'Tamban'),
(33726, 1278, 'Tandang Sora'),
(33727, 1278, 'Tibanban'),
(33728, 1278, 'Tiblawan'),
(33729, 1278, 'Upper Tibanban'),
(33730, 1278, 'Crispin Dela Cruz'),
(33731, 1279, 'Bagumbayan'),
(33732, 1279, 'Cabadiangan'),
(33733, 1279, 'Calapagan'),
(33734, 1279, 'Cocornon'),
(33735, 1279, 'Corporacion'),
(33736, 1279, 'Don Mariano Marcos'),
(33737, 1279, 'Ilangay'),
(33738, 1279, 'Langka'),
(33739, 1279, 'Lantawan'),
(33740, 1279, 'Limbahan'),
(33741, 1279, 'Macangao'),
(33742, 1279, 'Magsaysay'),
(33743, 1279, 'Mahayahay'),
(33744, 1279, 'Maragatas'),
(33745, 1279, 'Marayag'),
(33746, 1279, 'New Visayas'),
(33747, 1279, 'Poblacion'),
(33748, 1279, 'San Isidro'),
(33749, 1279, 'San Jose'),
(33750, 1279, 'Tagboa'),
(33751, 1279, 'Tagugpo'),
(33752, 1280, 'Capasnan'),
(33753, 1280, 'Cayawan'),
(33754, 1280, 'Central (Pob.)'),
(33755, 1280, 'Concepcion'),
(33756, 1280, 'Del Pilar'),
(33757, 1280, 'Guza'),
(33758, 1280, 'Holy Cross'),
(33759, 1280, 'Mabini'),
(33760, 1280, 'Manreza'),
(33761, 1280, 'Old Macopa'),
(33762, 1280, 'Rizal'),
(33763, 1280, 'San Fermin'),
(33764, 1280, 'San Ignacio'),
(33765, 1280, 'San Isidro'),
(33766, 1280, 'New Taokanga'),
(33767, 1280, 'Zaragosa'),
(33768, 1280, 'Lambog'),
(33769, 1281, 'Badas'),
(33770, 1281, 'Bobon'),
(33771, 1281, 'Buso'),
(33772, 1281, 'Cabuaya'),
(33773, 1281, 'Central (Pob.)'),
(33774, 1281, 'Culian'),
(33775, 1281, 'Dahican'),
(33776, 1281, 'Danao'),
(33777, 1281, 'Dawan'),
(33778, 1281, 'Don Enrique Lopez'),
(33779, 1281, 'Don Martin Marundan'),
(33780, 1281, 'Don Salvador Lopez, Sr.'),
(33781, 1281, 'Langka'),
(33782, 1281, 'Lawigan'),
(33783, 1281, 'Libudon'),
(33784, 1281, 'Luban'),
(33785, 1281, 'Macambol'),
(33786, 1281, 'Mamali'),
(33787, 1281, 'Matiao'),
(33788, 1281, 'Mayo'),
(33789, 1281, 'Sainz'),
(33790, 1281, 'Sanghay'),
(33791, 1281, 'Tagabakid'),
(33792, 1281, 'Tagbinonga'),
(33793, 1281, 'Taguibo'),
(33794, 1281, 'Tamisan'),
(33795, 1282, 'Baon'),
(33796, 1282, 'Bitaogan'),
(33797, 1282, 'Cambaleon'),
(33798, 1282, 'Dugmanon'),
(33799, 1282, 'Iba'),
(33800, 1282, 'La Union'),
(33801, 1282, 'Lapu-lapu'),
(33802, 1282, 'Maag'),
(33803, 1282, 'Manikling'),
(33804, 1282, 'Maputi'),
(33805, 1282, 'Batobato (Pob.)'),
(33806, 1282, 'San Miguel'),
(33807, 1282, 'San Roque'),
(33808, 1282, 'Santo Rosario'),
(33809, 1282, 'Sudlon'),
(33810, 1282, 'Talisay'),
(33811, 1283, 'Cabagayan'),
(33812, 1283, 'Central (Pob.)'),
(33813, 1283, 'Dadong'),
(33814, 1283, 'Jovellar'),
(33815, 1283, 'Limot'),
(33816, 1283, 'Lucatan'),
(33817, 1283, 'Maganda'),
(33818, 1283, 'Ompao'),
(33819, 1283, 'Tomoaong'),
(33820, 1283, 'Tubaon'),
(33821, 1284, 'Bagongon'),
(33822, 1284, 'Gabi'),
(33823, 1284, 'Lagab'),
(33824, 1284, 'Mangayon'),
(33825, 1284, 'Mapaca'),
(33826, 1284, 'Maparat'),
(33827, 1284, 'New Alegria'),
(33828, 1284, 'Ngan'),
(33829, 1284, 'Osmeña'),
(33830, 1284, 'Panansalan'),
(33831, 1284, 'Poblacion'),
(33832, 1284, 'San Jose'),
(33833, 1284, 'San Miguel'),
(33834, 1284, 'Siocon'),
(33835, 1284, 'Tamia'),
(33836, 1284, 'Aurora'),
(33837, 1285, 'Aguinaldo'),
(33838, 1285, 'Banbanon'),
(33839, 1285, 'Binasbas'),
(33840, 1285, 'Cebulida'),
(33841, 1285, 'Il Papa'),
(33842, 1285, 'Kaligutan'),
(33843, 1285, 'Kapatagan'),
(33844, 1285, 'Kidawa'),
(33845, 1285, 'Kilagding'),
(33846, 1285, 'Kiokmay'),
(33847, 1285, 'Langtud'),
(33848, 1285, 'Longanapan'),
(33849, 1285, 'Naga'),
(33850, 1285, 'Laac (Pob.)'),
(33851, 1285, 'San Antonio'),
(33852, 1285, 'Amor Cruz'),
(33853, 1285, 'Ampawid'),
(33854, 1285, 'Andap'),
(33855, 1285, 'Anitap'),
(33856, 1285, 'Bagong Silang'),
(33857, 1285, 'Belmonte'),
(33858, 1285, 'Bullucan'),
(33859, 1285, 'Concepcion'),
(33860, 1285, 'Datu Ampunan'),
(33861, 1285, 'Datu Davao'),
(33862, 1285, 'Doña Josefa'),
(33863, 1285, 'El Katipunan'),
(33864, 1285, 'Imelda'),
(33865, 1285, 'Inacayan'),
(33866, 1285, 'Mabuhay'),
(33867, 1285, 'Macopa'),
(33868, 1285, 'Malinao'),
(33869, 1285, 'Mangloy'),
(33870, 1285, 'Melale'),
(33871, 1285, 'New Bethlehem'),
(33872, 1285, 'Panamoren'),
(33873, 1285, 'Sabud'),
(33874, 1285, 'Santa Emilia'),
(33875, 1285, 'Santo Niño'),
(33876, 1285, 'Sisimon'),
(33877, 1286, 'Cadunan'),
(33878, 1286, 'Pindasan'),
(33879, 1286, 'Cuambog (Pob.)'),
(33880, 1286, 'Tagnanan'),
(33881, 1286, 'Anitapan'),
(33882, 1286, 'Cabuyuan'),
(33883, 1286, 'Del Pilar'),
(33884, 1286, 'Libodon'),
(33885, 1286, 'Golden Valley'),
(33886, 1286, 'Pangibiran'),
(33887, 1286, 'San Antonio'),
(33888, 1287, 'Anibongan'),
(33889, 1287, 'Anislagan'),
(33890, 1287, 'Binuangan'),
(33891, 1287, 'Bucana'),
(33892, 1287, 'Calabcab'),
(33893, 1287, 'Concepcion'),
(33894, 1287, 'Dumlan'),
(33895, 1287, 'Elizalde'),
(33896, 1287, 'Pangi'),
(33897, 1287, 'Gubatan'),
(33898, 1287, 'Hijo'),
(33899, 1287, 'Kinuban'),
(33900, 1287, 'Langgam'),
(33901, 1287, 'Lapu-lapu'),
(33902, 1287, 'Libay-libay'),
(33903, 1287, 'Limbo'),
(33904, 1287, 'Lumatab'),
(33905, 1287, 'Magangit'),
(33906, 1287, 'Malamodao'),
(33907, 1287, 'Manipongol'),
(33908, 1287, 'Mapaang'),
(33909, 1287, 'Masara'),
(33910, 1287, 'New Asturias'),
(33911, 1287, 'Panibasan'),
(33912, 1287, 'Panoraon'),
(33913, 1287, 'Poblacion'),
(33914, 1287, 'San Juan'),
(33915, 1287, 'San Roque'),
(33916, 1287, 'Sangab'),
(33917, 1287, 'Taglawig'),
(33918, 1287, 'Mainit'),
(33919, 1287, 'New Barili'),
(33920, 1287, 'New Leyte'),
(33921, 1287, 'New Visayas'),
(33922, 1287, 'Panangan'),
(33923, 1287, 'Tagbaros'),
(33924, 1287, 'Teresa'),
(33925, 1288, 'Bagong Silang'),
(33926, 1288, 'Mapawa'),
(33927, 1288, 'Maragusan (Pob.)'),
(33928, 1288, 'New Albay'),
(33929, 1288, 'Tupaz'),
(33930, 1288, 'Bahi'),
(33931, 1288, 'Cambagang'),
(33932, 1288, 'Coronobe'),
(33933, 1288, 'Katipunan'),
(33934, 1288, 'Lahi'),
(33935, 1288, 'Langgawisan'),
(33936, 1288, 'Mabugnao'),
(33937, 1288, 'Magcagong'),
(33938, 1288, 'Mahayahay'),
(33939, 1288, 'Mauswagon'),
(33940, 1288, 'New Katipunan'),
(33941, 1288, 'New Man-ay'),
(33942, 1288, 'New Panay'),
(33943, 1288, 'Paloc'),
(33944, 1288, 'Pamintaran'),
(33945, 1288, 'Parasanon'),
(33946, 1288, 'Talian'),
(33947, 1288, 'Tandik'),
(33948, 1288, 'Tigbao'),
(33949, 1289, 'Andili'),
(33950, 1289, 'Bawani'),
(33951, 1289, 'Concepcion'),
(33952, 1289, 'Malinawon'),
(33953, 1289, 'Nueva Visayas'),
(33954, 1289, 'Nuevo Iloco'),
(33955, 1289, 'Poblacion'),
(33956, 1289, 'Salvacion'),
(33957, 1289, 'Saosao'),
(33958, 1289, 'Sawangan'),
(33959, 1289, 'Tuboran'),
(33960, 1290, 'Awao'),
(33961, 1290, 'Babag'),
(33962, 1290, 'Banlag'),
(33963, 1290, 'Baylo'),
(33964, 1290, 'Casoon'),
(33965, 1290, 'Inambatan'),
(33966, 1290, 'Haguimitan'),
(33967, 1290, 'Macopa'),
(33968, 1290, 'Mamunga'),
(33969, 1290, 'Naboc'),
(33970, 1290, 'Olaycon'),
(33971, 1290, 'Pasian'),
(33972, 1290, 'Poblacion'),
(33973, 1290, 'Rizal'),
(33974, 1290, 'Salvacion'),
(33975, 1290, 'San Isidro'),
(33976, 1290, 'San Jose'),
(33977, 1290, 'Tubo-tubo'),
(33978, 1290, 'Upper Ulip'),
(33979, 1290, 'Union'),
(33980, 1290, 'Mount Diwata'),
(33981, 1291, 'Banagbanag'),
(33982, 1291, 'Banglasan'),
(33983, 1291, 'Bankerohan Norte'),
(33984, 1291, 'Bankerohan Sur'),
(33985, 1291, 'Camansi'),
(33986, 1291, 'Camantangan'),
(33987, 1291, 'Concepcion'),
(33988, 1291, 'Dauman'),
(33989, 1291, 'Canidkid'),
(33990, 1291, 'Lebanon'),
(33991, 1291, 'Linoan'),
(33992, 1291, 'Mayaon'),
(33993, 1291, 'New Calape'),
(33994, 1291, 'New Dalaguete'),
(33995, 1291, 'New Cebulan'),
(33996, 1291, 'New Visayas'),
(33997, 1291, 'Prosperidad'),
(33998, 1291, 'San Jose (Pob.)'),
(33999, 1291, 'San Vicente'),
(34000, 1291, 'Tapia'),
(34001, 1292, 'Anislagan'),
(34002, 1292, 'Antiquera'),
(34003, 1292, 'Basak'),
(34004, 1292, 'Cabacungan'),
(34005, 1292, 'Cabidianan'),
(34006, 1292, 'Katipunan'),
(34007, 1292, 'Libasan'),
(34008, 1292, 'Linda'),
(34009, 1292, 'Magading'),
(34010, 1292, 'Magsaysay'),
(34011, 1292, 'Mainit'),
(34012, 1292, 'Manat'),
(34013, 1292, 'Matilo'),
(34014, 1292, 'Mipangi'),
(34015, 1292, 'New Dauis'),
(34016, 1292, 'New Sibonga'),
(34017, 1292, 'Ogao'),
(34018, 1292, 'Pangutosan'),
(34019, 1292, 'Poblacion'),
(34020, 1292, 'San Isidro'),
(34021, 1292, 'San Roque'),
(34022, 1292, 'San Vicente'),
(34023, 1292, 'Santa Maria'),
(34024, 1292, 'Santo Niño'),
(34025, 1292, 'Sasa'),
(34026, 1292, 'Tagnocon'),
(34027, 1292, 'Bayabas'),
(34028, 1292, 'Bukal'),
(34029, 1293, 'Bantacan'),
(34030, 1293, 'Batinao'),
(34031, 1293, 'Camanlangan'),
(34032, 1293, 'Cogonon'),
(34033, 1293, 'Fatima'),
(34034, 1293, 'Katipunan'),
(34035, 1293, 'Magsaysay'),
(34036, 1293, 'Magangit'),
(34037, 1293, 'Pagsabangan'),
(34038, 1293, 'Panag'),
(34039, 1293, 'Cabinuangan (Pob.)'),
(34040, 1293, 'San Roque'),
(34041, 1293, 'Andap'),
(34042, 1293, 'Kahayag'),
(34043, 1293, 'Manurigao'),
(34044, 1293, 'Tandawan'),
(34045, 1294, 'Bongabong'),
(34046, 1294, 'Bongbong'),
(34047, 1294, 'P. Fuentes'),
(34048, 1294, 'Kingking (Pob.)'),
(34049, 1294, 'Magnaga'),
(34050, 1294, 'Matiao'),
(34051, 1294, 'Napnapan'),
(34052, 1294, 'Tagdangua'),
(34053, 1294, 'Tambongon'),
(34054, 1294, 'Tibagon'),
(34055, 1294, 'Las Arenas'),
(34056, 1294, 'Araibo'),
(34057, 1294, 'Tag-Ugpo'),
(34058, 1295, 'Calian'),
(34059, 1295, 'Kiobog'),
(34060, 1295, 'North Lamidan'),
(34061, 1295, 'Lawa (Pob.)'),
(34062, 1295, 'Nueva Villa'),
(34063, 1295, 'Talagutong (Pob.)'),
(34064, 1295, 'Baluntaya'),
(34065, 1295, 'Dalupan'),
(34066, 1295, 'Kinanga'),
(34067, 1295, 'Lanao'),
(34068, 1295, 'Lapuan'),
(34069, 1295, 'Linadasan'),
(34070, 1295, 'Mabuhay'),
(34071, 1295, 'South Lamidan'),
(34072, 1295, 'West Lamidan'),
(34073, 1296, 'Buguis'),
(34074, 1296, 'Balangonan'),
(34075, 1296, 'Bukid'),
(34076, 1296, 'Butuan'),
(34077, 1296, 'Butulan'),
(34078, 1296, 'Caburan Big'),
(34079, 1296, 'Caburan Small (Pob.)'),
(34080, 1296, 'Camalian'),
(34081, 1296, 'Carahayan'),
(34082, 1296, 'Cayaponga'),
(34083, 1296, 'Culaman'),
(34084, 1296, 'Kalbay'),
(34085, 1296, 'Kitayo'),
(34086, 1296, 'Magulibas'),
(34087, 1296, 'Malalan'),
(34088, 1296, 'Mangile'),
(34089, 1296, 'Marabutuan'),
(34090, 1296, 'Meybio'),
(34091, 1296, 'Molmol'),
(34092, 1296, 'Nuing'),
(34093, 1296, 'Patulang'),
(34094, 1296, 'Quiapo'),
(34095, 1296, 'San Isidro'),
(34096, 1296, 'Sugal'),
(34097, 1296, 'Tabayon'),
(34098, 1296, 'Tanuman'),
(34099, 1297, 'Bito'),
(34100, 1297, 'Bolila'),
(34101, 1297, 'Buhangin'),
(34102, 1297, 'Culaman'),
(34103, 1297, 'Datu Danwata'),
(34104, 1297, 'Demoloc'),
(34105, 1297, 'Felis'),
(34106, 1297, 'Fishing Village'),
(34107, 1297, 'Kibalatong'),
(34108, 1297, 'Kidalapong'),
(34109, 1297, 'Kilalag'),
(34110, 1297, 'Kinangan'),
(34111, 1297, 'Lacaron'),
(34112, 1297, 'Lagumit'),
(34113, 1297, 'Lais'),
(34114, 1297, 'Little Baguio'),
(34115, 1297, 'Macol'),
(34116, 1297, 'Mana'),
(34117, 1297, 'Manuel Peralta'),
(34118, 1297, 'New Argao'),
(34119, 1297, 'Pangian'),
(34120, 1297, 'Pinalpalan'),
(34121, 1297, 'Poblacion'),
(34122, 1297, 'Sangay'),
(34123, 1297, 'Talogoy'),
(34124, 1297, 'Tical'),
(34125, 1297, 'Ticulon'),
(34126, 1297, 'Tingolo'),
(34127, 1297, 'Tubalan'),
(34128, 1297, 'Pangaleon'),
(34129, 1298, 'Basiawan'),
(34130, 1298, 'Buca'),
(34131, 1298, 'Cadaatan'),
(34132, 1298, 'Kidadan'),
(34133, 1298, 'Kisulad'),
(34134, 1298, 'Malalag Tubig'),
(34135, 1298, 'Mamacao'),
(34136, 1298, 'Ogpao'),
(34137, 1298, 'Poblacion'),
(34138, 1298, 'Pongpong'),
(34139, 1298, 'San Agustin'),
(34140, 1298, 'San Antonio'),
(34141, 1298, 'San Isidro'),
(34142, 1298, 'San Juan'),
(34143, 1298, 'San Pedro'),
(34144, 1298, 'San Roque'),
(34145, 1298, 'Tanglad'),
(34146, 1298, 'Santo Niño'),
(34147, 1298, 'Santo Rosario'),
(34148, 1298, 'Datu Daligasao'),
(34149, 1298, 'Datu Intan'),
(34150, 1298, 'Kinilidan'),
(34151, 1299, 'Batuganding'),
(34152, 1299, 'Konel'),
(34153, 1299, 'Lipol'),
(34154, 1299, 'Mabila (Pob.)'),
(34155, 1299, 'Patuco'),
(34156, 1299, 'Laker'),
(34157, 1299, 'Tinina'),
(34158, 1299, 'Camahual'),
(34159, 1299, 'Camalig'),
(34160, 1299, 'Gomtago'),
(34161, 1299, 'Tagen'),
(34162, 1299, 'Tucal'),
(34163, 1300, 'Bao'),
(34164, 1300, 'Barangiran'),
(34165, 1300, 'Camansi'),
(34166, 1300, 'Dado'),
(34167, 1300, 'Guiling'),
(34168, 1300, 'Kitacubong (Pob.)'),
(34169, 1300, 'Macabasa'),
(34170, 1300, 'Malitubog'),
(34171, 1300, 'Mapurok'),
(34172, 1300, 'Pacao'),
(34173, 1300, 'Paruayan'),
(34174, 1300, 'Pigcawaran'),
(34175, 1300, 'Polayagan'),
(34176, 1300, 'Rangayen'),
(34177, 1300, 'Lower Dado'),
(34178, 1300, 'Mirasol'),
(34179, 1300, 'Raradangan'),
(34180, 1301, 'Aroman'),
(34181, 1301, 'Bentangan'),
(34182, 1301, 'Cadiis'),
(34183, 1301, 'General Luna'),
(34184, 1301, 'Katanayanan'),
(34185, 1301, 'Kib-Ayao'),
(34186, 1301, 'Kibenes'),
(34187, 1301, 'Kibugtongan'),
(34188, 1301, 'Kilala'),
(34189, 1301, 'Kimadzil'),
(34190, 1301, 'Kitulaan'),
(34191, 1301, 'Langogan'),
(34192, 1301, 'Lanoon'),
(34193, 1301, 'Liliongan'),
(34194, 1301, 'Ugalingan'),
(34195, 1301, 'Macabenban'),
(34196, 1301, 'Malapag'),
(34197, 1301, 'Manarapan'),
(34198, 1301, 'Manili'),
(34199, 1301, 'Nasapian'),
(34200, 1301, 'Palanggalan'),
(34201, 1301, 'Pebpoloan'),
(34202, 1301, 'Poblacion'),
(34203, 1301, 'Ranzo'),
(34204, 1301, 'Tacupan'),
(34205, 1301, 'Tambad'),
(34206, 1301, 'Tonganon'),
(34207, 1301, 'Tupig'),
(34208, 1302, 'Aringay'),
(34209, 1302, 'Bangilan'),
(34210, 1302, 'Bannawag'),
(34211, 1302, 'Buluan'),
(34212, 1302, 'Cuyapon'),
(34213, 1302, 'Dagupan'),
(34214, 1302, 'Katidtuan'),
(34215, 1302, 'Kayaga'),
(34216, 1302, 'Kilagasan'),
(34217, 1302, 'Magatos'),
(34218, 1302, 'Malamote'),
(34219, 1302, 'Malanduague'),
(34220, 1302, 'Nanga-an'),
(34221, 1302, 'Osias'),
(34222, 1302, 'Paatan Lower'),
(34223, 1302, 'Paatan Upper'),
(34224, 1302, 'Pedtad'),
(34225, 1302, 'Pisan'),
(34226, 1302, 'Poblacion'),
(34227, 1302, 'Salapungan'),
(34228, 1302, 'Sanggadong'),
(34229, 1302, 'Simbuhay'),
(34230, 1302, 'Simone'),
(34231, 1302, 'Tamped'),
(34232, 1303, 'Amas'),
(34233, 1303, 'Amazion'),
(34234, 1303, 'Balabag'),
(34235, 1303, 'Balindog'),
(34236, 1303, 'Benoligan'),
(34237, 1303, 'Berada'),
(34238, 1303, 'Gayola'),
(34239, 1303, 'Ginatilan'),
(34240, 1303, 'Ilomavis'),
(34241, 1303, 'Indangan'),
(34242, 1303, 'Junction'),
(34243, 1303, 'Kalaisan'),
(34244, 1303, 'Kalasuyan'),
(34245, 1303, 'Katipunan'),
(34246, 1303, 'Lanao'),
(34247, 1303, 'Linangcob'),
(34248, 1303, 'Luvimin'),
(34249, 1303, 'Macabolig'),
(34250, 1303, 'Malinan'),
(34251, 1303, 'Manongol'),
(34252, 1303, 'Marbel'),
(34253, 1303, 'Mateo'),
(34254, 1303, 'Meochao'),
(34255, 1303, 'Mua-an'),
(34256, 1303, 'New Bohol'),
(34257, 1303, 'Nuangan'),
(34258, 1303, 'Onica'),
(34259, 1303, 'Paco'),
(34260, 1303, 'Patadon'),
(34261, 1303, 'Perez'),
(34262, 1303, 'Poblacion'),
(34263, 1303, 'San Isidro'),
(34264, 1303, 'San Roque'),
(34265, 1303, 'Santo Niño'),
(34266, 1303, 'Sibawan'),
(34267, 1303, 'Sikitan'),
(34268, 1303, 'Singao'),
(34269, 1303, 'Sudapin'),
(34270, 1303, 'Sumbao'),
(34271, 1303, 'Magsaysay'),
(34272, 1304, 'Abaga'),
(34273, 1304, 'Baguer'),
(34274, 1304, 'Barongis'),
(34275, 1304, 'Batiocan'),
(34276, 1304, 'Cabaruyan'),
(34277, 1304, 'Cabpangi'),
(34278, 1304, 'Demapaco'),
(34279, 1304, 'Grebona'),
(34280, 1304, 'Gumaga'),
(34281, 1304, 'Kapayawi'),
(34282, 1304, 'Kiloyao'),
(34283, 1304, 'Kitubod'),
(34284, 1304, 'Malengen'),
(34285, 1304, 'Montay'),
(34286, 1304, 'Nica-an'),
(34287, 1304, 'Palao'),
(34288, 1304, 'Poblacion'),
(34289, 1304, 'Sinapangan'),
(34290, 1304, 'Sinawingan'),
(34291, 1304, 'Ulamian'),
(34292, 1305, 'Alibayon'),
(34293, 1305, 'Bagumbayan'),
(34294, 1305, 'Bangkal'),
(34295, 1305, 'Bantac'),
(34296, 1305, 'Basak'),
(34297, 1305, 'Binay'),
(34298, 1305, 'Bongolanon'),
(34299, 1305, 'Datu Celo'),
(34300, 1305, 'Del Pilar'),
(34301, 1305, 'Doles'),
(34302, 1305, 'Gubatan'),
(34303, 1305, 'Ilian'),
(34304, 1305, 'Inac'),
(34305, 1305, 'Kamada'),
(34306, 1305, 'Kauswagan'),
(34307, 1305, 'Kisandal'),
(34308, 1305, 'Magcaalam'),
(34309, 1305, 'Mahongcog'),
(34310, 1305, 'Manobo'),
(34311, 1305, 'Noa'),
(34312, 1305, 'Owas'),
(34313, 1305, 'Pangao-an'),
(34314, 1305, 'Poblacion'),
(34315, 1305, 'Sallab'),
(34316, 1305, 'Tagbac'),
(34317, 1305, 'Temporan'),
(34318, 1305, 'Amabel'),
(34319, 1305, 'Balete'),
(34320, 1305, 'Don Panaca'),
(34321, 1305, 'Imamaling'),
(34322, 1305, 'Kinarum'),
(34323, 1305, 'Manobisa'),
(34324, 1306, 'Batasan'),
(34325, 1306, 'Bato'),
(34326, 1306, 'Biangan'),
(34327, 1306, 'Buena Vida'),
(34328, 1306, 'Buhay'),
(34329, 1306, 'Bulakanon'),
(34330, 1306, 'Cabilao'),
(34331, 1306, 'Concepcion'),
(34332, 1306, 'Dagupan'),
(34333, 1306, 'Garsika'),
(34334, 1306, 'Guangan'),
(34335, 1306, 'Indangan'),
(34336, 1306, 'Jose Rizal'),
(34337, 1306, 'Katipunan II'),
(34338, 1306, 'Kawayanon'),
(34339, 1306, 'Kisante'),
(34340, 1306, 'Leboce'),
(34341, 1306, 'Libertad'),
(34342, 1306, 'Luayon'),
(34343, 1306, 'Luna Norte'),
(34344, 1306, 'Luna Sur'),
(34345, 1306, 'Malabuan'),
(34346, 1306, 'Malasila'),
(34347, 1306, 'Malungon'),
(34348, 1306, 'New Baguio'),
(34349, 1306, 'New Bulatukan'),
(34350, 1306, 'New Cebu'),
(34351, 1306, 'Old Bulatukan'),
(34352, 1306, 'Poblacion'),
(34353, 1306, 'Rodero'),
(34354, 1306, 'Saguing'),
(34355, 1306, 'San Vicente'),
(34356, 1306, 'Santa Felomina'),
(34357, 1306, 'Santo Niño'),
(34358, 1306, 'Sinkatulan'),
(34359, 1306, 'Taluntalunan'),
(34360, 1306, 'Villaflores'),
(34361, 1306, 'New Israel'),
(34362, 1307, 'New Alimodian'),
(34363, 1307, 'Arakan'),
(34364, 1307, 'Bangbang'),
(34365, 1307, 'Bato'),
(34366, 1307, 'Central Malamote'),
(34367, 1307, 'Dalapitan'),
(34368, 1307, 'Estado'),
(34369, 1307, 'Ilian'),
(34370, 1307, 'Kabulacan'),
(34371, 1307, 'Kibia'),
(34372, 1307, 'Kibudoc'),
(34373, 1307, 'Kidama'),
(34374, 1307, 'Kilada'),
(34375, 1307, 'Lampayan'),
(34376, 1307, 'Latagan'),
(34377, 1307, 'Linao'),
(34378, 1307, 'Lower Malamote'),
(34379, 1307, 'Manubuan'),
(34380, 1307, 'Manupal'),
(34381, 1307, 'Marbel'),
(34382, 1307, 'Minamaing'),
(34383, 1307, 'Natutungan'),
(34384, 1307, 'New Bugasong'),
(34385, 1307, 'New Pandan'),
(34386, 1307, 'Patadon West'),
(34387, 1307, 'Poblacion'),
(34388, 1307, 'Salvacion'),
(34389, 1307, 'Santa Maria'),
(34390, 1307, 'Sarayan'),
(34391, 1307, 'Taculen'),
(34392, 1307, 'Taguranao'),
(34393, 1307, 'Tamped'),
(34394, 1307, 'New Abra'),
(34395, 1307, 'Pinamaton'),
(34396, 1308, 'Agriculture'),
(34397, 1308, 'Anonang'),
(34398, 1308, 'Arizona'),
(34399, 1308, 'Bagumba'),
(34400, 1308, 'Baliki'),
(34401, 1308, 'Bitoka'),
(34402, 1308, 'Bual Norte'),
(34403, 1308, 'Bual Sur'),
(34404, 1308, 'Central Bulanan'),
(34405, 1308, 'Damatulan'),
(34406, 1308, 'Central Glad'),
(34407, 1308, 'Ilbocean'),
(34408, 1308, 'Kadigasan'),
(34409, 1308, 'Kadingilan'),
(34410, 1308, 'Kapinpilan'),
(34411, 1308, 'Central Katingawan'),
(34412, 1308, 'Kimagango'),
(34413, 1308, 'Kudarangan'),
(34414, 1308, 'Central Labas'),
(34415, 1308, 'Lagumbingan'),
(34416, 1308, 'Lomopog'),
(34417, 1308, 'Lower Glad'),
(34418, 1308, 'Lower Katingawan'),
(34419, 1308, 'Macasendeg'),
(34420, 1308, 'Malamote'),
(34421, 1308, 'Malingao'),
(34422, 1308, 'Milaya'),
(34423, 1308, 'Mudseng'),
(34424, 1308, 'Nabalawag'),
(34425, 1308, 'Nalin'),
(34426, 1308, 'Nes'),
(34427, 1308, 'Olandang'),
(34428, 1308, 'Patindeguen'),
(34429, 1308, 'Barangay Poblacion 1'),
(34430, 1308, 'Barangay Poblacion 2'),
(34431, 1308, 'Barangay Poblacion 3'),
(34432, 1308, 'Barangay Poblacion 4'),
(34433, 1308, 'Barangay Poblacion 5'),
(34434, 1308, 'Barangay Poblacion 6'),
(34435, 1308, 'Barangay Poblacion 7'),
(34436, 1308, 'Barangay Poblacion 8'),
(34437, 1308, 'Palongoguen'),
(34438, 1308, 'Rangaban'),
(34439, 1308, 'Sadaan'),
(34440, 1308, 'Salunayan'),
(34441, 1308, 'Sambulawan'),
(34442, 1308, 'San Isidro'),
(34443, 1308, 'Santa Cruz'),
(34444, 1308, 'Tugal'),
(34445, 1308, 'Tumbras'),
(34446, 1308, 'Bulanan Upper'),
(34447, 1308, 'Upper Glad I'),
(34448, 1308, 'Upper Glad II'),
(34449, 1308, 'Upper Labas'),
(34450, 1308, 'Villarica'),
(34451, 1308, 'Kiwanan'),
(34452, 1308, 'San Pedro'),
(34453, 1309, 'Bagontapay'),
(34454, 1309, 'Bialong'),
(34455, 1309, 'Buayan'),
(34456, 1309, 'Calunasan'),
(34457, 1309, 'Dalipe'),
(34458, 1309, 'Dagong'),
(34459, 1309, 'Dungo-an'),
(34460, 1309, 'Gaunan'),
(34461, 1309, 'Inas'),
(34462, 1309, 'Katipunan'),
(34463, 1309, 'La Fortuna'),
(34464, 1309, 'La Suerte'),
(34465, 1309, 'Langkong'),
(34466, 1309, 'Lepaga'),
(34467, 1309, 'Liboo'),
(34468, 1309, 'Lika'),
(34469, 1309, 'Luz Village'),
(34470, 1309, 'Magallon'),
(34471, 1309, 'Malayan'),
(34472, 1309, 'New Antique'),
(34473, 1309, 'New Barbaza'),
(34474, 1309, 'New Kalibo'),
(34475, 1309, 'New Consolacion'),
(34476, 1309, 'New Esperanza'),
(34477, 1309, 'New Janiuay'),
(34478, 1309, 'New Lawa-an'),
(34479, 1309, 'New Rizal'),
(34480, 1309, 'Nueva Vida'),
(34481, 1309, 'Pag-asa'),
(34482, 1309, 'Poblacion'),
(34483, 1309, 'Pulang-lupa'),
(34484, 1309, 'Sangat'),
(34485, 1309, 'Tawantawan'),
(34486, 1309, 'Tibao'),
(34487, 1309, 'Ugpay'),
(34488, 1309, 'Palma-Perez'),
(34489, 1309, 'Poblacion B'),
(34490, 1310, 'Anick'),
(34491, 1310, 'Upper Baguer'),
(34492, 1310, 'Balacayon'),
(34493, 1310, 'Balogo'),
(34494, 1310, 'Banucagon'),
(34495, 1310, 'Bulucaon'),
(34496, 1310, 'Buluan'),
(34497, 1310, 'Buricain'),
(34498, 1310, 'Capayuran'),
(34499, 1310, 'Central Panatan'),
(34500, 1310, 'Datu Binasing'),
(34501, 1310, 'Datu Mantil'),
(34502, 1310, 'Kadingilan'),
(34503, 1310, 'Kimarayang'),
(34504, 1310, 'Libungan Torreta'),
(34505, 1310, 'Lower Baguer'),
(34506, 1310, 'Lower Pangangkalan'),
(34507, 1310, 'Malagakit'),
(34508, 1310, 'Maluao'),
(34509, 1310, 'North Manuangan'),
(34510, 1310, 'Matilac'),
(34511, 1310, 'Midpapan I'),
(34512, 1310, 'Mulok'),
(34513, 1310, 'New Culasi'),
(34514, 1310, 'New Igbaras'),
(34515, 1310, 'New Panay'),
(34516, 1310, 'Upper Pangangkalan'),
(34517, 1310, 'Patot'),
(34518, 1310, 'Payong-payong'),
(34519, 1310, 'Poblacion I'),
(34520, 1310, 'Poblacion II'),
(34521, 1310, 'Poblacion III'),
(34522, 1310, 'Presbitero'),
(34523, 1310, 'Renibon'),
(34524, 1310, 'Simsiman'),
(34525, 1310, 'South Manuangan'),
(34526, 1310, 'Tigbawan'),
(34527, 1310, 'Tubon'),
(34528, 1310, 'Midpapan II'),
(34529, 1310, 'Cabpangi'),
(34530, 1311, 'Bagoaingud'),
(34531, 1311, 'Balabak'),
(34532, 1311, 'Balatican'),
(34533, 1311, 'Balong'),
(34534, 1311, 'Balungis'),
(34535, 1311, 'Barungis'),
(34536, 1311, 'Batulawan'),
(34537, 1311, 'Bualan'),
(34538, 1311, 'Buliok'),
(34539, 1311, 'Bulod'),
(34540, 1311, 'Bulol'),
(34541, 1311, 'Calawag'),
(34542, 1311, 'Dalingaoen'),
(34543, 1311, 'Damalasak'),
(34544, 1311, 'Fort Pikit'),
(34545, 1311, 'Ginatilan'),
(34546, 1311, 'Gligli'),
(34547, 1311, 'Gokoton'),
(34548, 1311, 'Inug-ug'),
(34549, 1311, 'Kabasalan'),
(34550, 1311, 'Kalacacan'),
(34551, 1311, 'Katilacan'),
(34552, 1311, 'Kolambog'),
(34553, 1311, 'Ladtingan'),
(34554, 1311, 'Lagunde'),
(34555, 1311, 'Langayen'),
(34556, 1311, 'Macabual'),
(34557, 1311, 'Macasendeg'),
(34558, 1311, 'Manaulanan'),
(34559, 1311, 'Nabundas'),
(34560, 1311, 'Nalapaan'),
(34561, 1311, 'Nunguan'),
(34562, 1311, 'Paidu Pulangi'),
(34563, 1311, 'Panicupan'),
(34564, 1311, 'Poblacion'),
(34565, 1311, 'Punol'),
(34566, 1311, 'Rajah Muda'),
(34567, 1311, 'Silik'),
(34568, 1311, 'Takipan'),
(34569, 1311, 'Talitay'),
(34570, 1311, 'Tinutulan'),
(34571, 1311, 'Pamalian'),
(34572, 1312, 'Alegria'),
(34573, 1312, 'Bato-bato'),
(34574, 1312, 'Del Carmen'),
(34575, 1312, 'F. Cajelo'),
(34576, 1312, 'Idaoman'),
(34577, 1312, 'Ilustre'),
(34578, 1312, 'Kamarahan'),
(34579, 1312, 'Camasi'),
(34580, 1312, 'Kisupaan'),
(34581, 1312, 'La Esperanza'),
(34582, 1312, 'Labu-o'),
(34583, 1312, 'Lamalama'),
(34584, 1312, 'Lomonay'),
(34585, 1312, 'New Cebu'),
(34586, 1312, 'Poblacion'),
(34587, 1312, 'Sagcungan'),
(34588, 1312, 'Salat'),
(34589, 1312, 'Sarayan'),
(34590, 1312, 'Tuael'),
(34591, 1312, 'Greenhill'),
(34592, 1312, 'Cabangbangan'),
(34593, 1312, 'Datu Indang'),
(34594, 1312, 'Datu Sandongan'),
(34595, 1312, 'Kimaruhing'),
(34596, 1312, 'Mabuhay'),
(34597, 1313, 'Bagumbayan'),
(34598, 1313, 'Banayal'),
(34599, 1313, 'Batang'),
(34600, 1313, 'Bituan'),
(34601, 1313, 'Bual'),
(34602, 1313, 'Daig'),
(34603, 1313, 'Damawato'),
(34604, 1313, 'Dungos'),
(34605, 1313, 'Kanibong'),
(34606, 1313, 'La Esperanza'),
(34607, 1313, 'Lampagang'),
(34608, 1313, 'Bunawan'),
(34609, 1313, 'Magbok'),
(34610, 1313, 'Maybula'),
(34611, 1313, 'Minapan'),
(34612, 1313, 'New Caridad'),
(34613, 1313, 'New Culasi'),
(34614, 1313, 'New Panay'),
(34615, 1313, 'Paraiso'),
(34616, 1313, 'Poblacion'),
(34617, 1313, 'Popoyon'),
(34618, 1313, 'Sibsib'),
(34619, 1313, 'Tambac'),
(34620, 1313, 'Tuburan'),
(34621, 1313, 'F. Cajelo'),
(34622, 1313, 'Bacong'),
(34623, 1313, 'Galidan'),
(34624, 1313, 'Genoveva Baynosa'),
(34625, 1313, 'Nabundasan'),
(34626, 1314, 'Camutan'),
(34627, 1314, 'Canaan'),
(34628, 1314, 'Dolores'),
(34629, 1314, 'Kiyaab'),
(34630, 1314, 'Luhong'),
(34631, 1314, 'Magsaysay'),
(34632, 1314, 'Malangag'),
(34633, 1314, 'Malatad'),
(34634, 1314, 'Malire'),
(34635, 1314, 'New Pontevedra'),
(34636, 1314, 'Poblacion'),
(34637, 1314, 'B. Cadungon'),
(34638, 1314, 'Datu Agod'),
(34639, 1315, 'Banisilan Poblacion'),
(34640, 1315, 'Busaon'),
(34641, 1315, 'Capayangan'),
(34642, 1315, 'Carugmanan'),
(34643, 1315, 'Gastay'),
(34644, 1315, 'Kalawaig'),
(34645, 1315, 'Kiaring'),
(34646, 1315, 'Malagap'),
(34647, 1315, 'Malinao'),
(34648, 1315, 'Miguel Macasarte'),
(34649, 1315, 'Pantar'),
(34650, 1315, 'Paradise'),
(34651, 1315, 'Pinamulaan'),
(34652, 1315, 'Poblacion II'),
(34653, 1315, 'Puting-bato'),
(34654, 1315, 'Solama'),
(34655, 1315, 'Thailand'),
(34656, 1315, 'Tinimbacan'),
(34657, 1315, 'Tumbao-Camalig'),
(34658, 1315, 'Wadya'),
(34659, 1316, 'Bagolibas'),
(34660, 1316, 'Cawilihan'),
(34661, 1316, 'Dualing'),
(34662, 1316, 'Dunguan'),
(34663, 1316, 'Katalicanan'),
(34664, 1316, 'Lawili'),
(34665, 1316, 'Lower Mingading'),
(34666, 1316, 'Luanan'),
(34667, 1316, 'Malapang'),
(34668, 1316, 'New Leon'),
(34669, 1316, 'New Panay'),
(34670, 1316, 'Pagangan'),
(34671, 1316, 'Palacat'),
(34672, 1316, 'Pentil'),
(34673, 1316, 'San Mateo'),
(34674, 1316, 'Santa Cruz'),
(34675, 1316, 'Tapodoc'),
(34676, 1316, 'Tomado'),
(34677, 1316, 'Upper Mingading'),
(34678, 1317, 'Allab'),
(34679, 1317, 'Anapolon'),
(34680, 1317, 'Badiangon'),
(34681, 1317, 'Binoongan'),
(34682, 1317, 'Dallag'),
(34683, 1317, 'Datu Ladayon'),
(34684, 1317, 'Datu Matangkil'),
(34685, 1317, 'Doroluman'),
(34686, 1317, 'Gambodes'),
(34687, 1317, 'Ganatan'),
(34688, 1317, 'Greenfield'),
(34689, 1317, 'Kabalantian'),
(34690, 1317, 'Katipunan'),
(34691, 1317, 'Kinawayan'),
(34692, 1317, 'Kulaman Valley'),
(34693, 1317, 'Lanao Kuran'),
(34694, 1317, 'Libertad'),
(34695, 1317, 'Makalangot'),
(34696, 1317, 'Malibatuan'),
(34697, 1317, 'Maria Caridad'),
(34698, 1317, 'Meocan'),
(34699, 1317, 'Naje'),
(34700, 1317, 'Napalico'),
(34701, 1317, 'Salasang'),
(34702, 1317, 'San Miguel'),
(34703, 1317, 'Santo Niño'),
(34704, 1317, 'Sumalili'),
(34705, 1317, 'Tumanding'),
(34706, 1318, 'Benitez (Pob.)'),
(34707, 1318, 'Cabudian'),
(34708, 1318, 'Cabuling'),
(34709, 1318, 'Cinco'),
(34710, 1318, 'Derilon'),
(34711, 1318, 'El Nonok'),
(34712, 1318, 'Improgo Village (Pob.)'),
(34713, 1318, 'Kusan'),
(34714, 1318, 'Lam-Apos'),
(34715, 1318, 'Lamba'),
(34716, 1318, 'Lambingi'),
(34717, 1318, 'Lampari'),
(34718, 1318, 'Liwanay'),
(34719, 1318, 'Malaya'),
(34720, 1318, 'Punong Grande'),
(34721, 1318, 'Rang-ay'),
(34722, 1318, 'Reyes (Pob.)'),
(34723, 1318, 'Rizal'),
(34724, 1318, 'Rizal Poblacion'),
(34725, 1318, 'San Jose'),
(34726, 1318, 'San Vicente'),
(34727, 1318, 'Yangco Poblacion'),
(34728, 1319, 'Baluan'),
(34729, 1319, 'Buayan'),
(34730, 1319, 'Bula'),
(34731, 1319, 'Conel'),
(34732, 1319, 'Dadiangas East (Pob.)'),
(34733, 1319, 'Katangawan'),
(34734, 1319, 'Lagao'),
(34735, 1319, 'Labangal'),
(34736, 1319, 'Ligaya'),
(34737, 1319, 'Mabuhay'),
(34738, 1319, 'San Isidro'),
(34739, 1319, 'San Jose'),
(34740, 1319, 'Sinawal'),
(34741, 1319, 'Tambler'),
(34742, 1319, 'Tinagacan'),
(34743, 1319, 'Apopong'),
(34744, 1319, 'Siguel'),
(34745, 1319, 'Upper Labay'),
(34746, 1319, 'Batomelong'),
(34747, 1319, 'Calumpang'),
(34748, 1319, 'City Heights'),
(34749, 1319, 'Dadiangas North'),
(34750, 1319, 'Dadiangas South'),
(34751, 1319, 'Dadiangas West'),
(34752, 1319, 'Fatima'),
(34753, 1319, 'Olympog'),
(34754, 1320, 'Assumption'),
(34755, 1320, 'Avanceña'),
(34756, 1320, 'Cacub'),
(34757, 1320, 'Caloocan'),
(34758, 1320, 'Carpenter Hill'),
(34759, 1320, 'Concepcion'),
(34760, 1320, 'Esperanza'),
(34761, 1320, 'General Paulino Santos'),
(34762, 1320, 'Mabini'),
(34763, 1320, 'Magsaysay'),
(34764, 1320, 'Mambucal'),
(34765, 1320, 'Morales'),
(34766, 1320, 'Namnama'),
(34767, 1320, 'New Pangasinan'),
(34768, 1320, 'Paraiso'),
(34769, 1320, 'Zone I (Pob.)'),
(34770, 1320, 'Zone II (Pob.)'),
(34771, 1320, 'Zone III (Pob.)'),
(34772, 1320, 'Zone IV (Pob.)'),
(34773, 1320, 'Rotonda'),
(34774, 1320, 'San Isidro'),
(34775, 1320, 'San Jose'),
(34776, 1320, 'San Roque'),
(34777, 1320, 'Santa Cruz'),
(34778, 1320, 'Santo Niño'),
(34779, 1320, 'Sarabia'),
(34780, 1320, 'Zulueta'),
(34781, 1321, 'Dumaguil'),
(34782, 1321, 'Esperanza'),
(34783, 1321, 'Kibid'),
(34784, 1321, 'Lapuz'),
(34785, 1321, 'Liberty'),
(34786, 1321, 'Lopez Jaena'),
(34787, 1321, 'Matapol'),
(34788, 1321, 'Poblacion'),
(34789, 1321, 'Puti'),
(34790, 1321, 'San Jose'),
(34791, 1321, 'San Miguel'),
(34792, 1321, 'Simsiman'),
(34793, 1321, 'Tinago'),
(34794, 1321, 'Benigno Aquino, Jr.'),
(34795, 1322, 'Bentung'),
(34796, 1322, 'Crossing Palkan'),
(34797, 1322, 'Glamang'),
(34798, 1322, 'Kinilis'),
(34799, 1322, 'Klinan 6'),
(34800, 1322, 'Koronadal Proper'),
(34801, 1322, 'Lam-Caliaf'),
(34802, 1322, 'Landan'),
(34803, 1322, 'Lumakil'),
(34804, 1322, 'Maligo'),
(34805, 1322, 'Palkan'),
(34806, 1322, 'Poblacion'),
(34807, 1322, 'Polo'),
(34808, 1322, 'Magsaysay'),
(34809, 1322, 'Rubber'),
(34810, 1322, 'Silway 7'),
(34811, 1322, 'Silway 8'),
(34812, 1322, 'Sulit'),
(34813, 1322, 'Sumbakil'),
(34814, 1322, 'Upper Klinan'),
(34815, 1322, 'Lapu'),
(34816, 1322, 'Cannery Site'),
(34817, 1322, 'Pagalungan'),
(34818, 1323, 'Buenavista'),
(34819, 1323, 'Centrala'),
(34820, 1323, 'Colongulo'),
(34821, 1323, 'Dajay'),
(34822, 1323, 'Duengas'),
(34823, 1323, 'Canahay'),
(34824, 1323, 'Lambontong'),
(34825, 1323, 'Lamian'),
(34826, 1323, 'Lamsugod'),
(34827, 1323, 'Libertad (Pob.)'),
(34828, 1323, 'Little Baguio'),
(34829, 1323, 'Moloy'),
(34830, 1323, 'Naci'),
(34831, 1323, 'Talahik'),
(34832, 1323, 'Tubiala'),
(34833, 1323, 'Upper Sepaka'),
(34834, 1323, 'Veterans'),
(34835, 1324, 'Albagan'),
(34836, 1324, 'Kipalbig'),
(34837, 1324, 'Lambayong'),
(34838, 1324, 'Liberty'),
(34839, 1324, 'Maltana'),
(34840, 1324, 'Poblacion'),
(34841, 1324, 'Tablu'),
(34842, 1324, 'Buto'),
(34843, 1324, 'Lampitak'),
(34844, 1324, 'Palo'),
(34845, 1324, 'Pula-bato'),
(34846, 1324, 'Danlag'),
(34847, 1324, 'San Isidro'),
(34848, 1324, 'Santa Cruz'),
(34849, 1325, 'Bukay Pait'),
(34850, 1325, 'Cabuling'),
(34851, 1325, 'Dumadalig'),
(34852, 1325, 'Libas'),
(34853, 1325, 'Magon'),
(34854, 1325, 'Maibo'),
(34855, 1325, 'Mangilala'),
(34856, 1325, 'New Iloilo'),
(34857, 1325, 'New Lambunao'),
(34858, 1325, 'Poblacion'),
(34859, 1325, 'San Felipe'),
(34860, 1325, 'New Cuyapo'),
(34861, 1325, 'Tinongcop'),
(34862, 1326, 'Basag'),
(34863, 1326, 'Edwards (Pob.)'),
(34864, 1326, 'Kematu'),
(34865, 1326, 'Laconon'),
(34866, 1326, 'Lamsalome'),
(34867, 1326, 'New Dumangas'),
(34868, 1326, 'Sinolon'),
(34869, 1326, 'Lambangan'),
(34870, 1326, 'Maan'),
(34871, 1326, 'Afus'),
(34872, 1326, 'Lambuling'),
(34873, 1326, 'Lamhako'),
(34874, 1326, 'Poblacion'),
(34875, 1326, 'Talcon'),
(34876, 1326, 'Talufo'),
(34877, 1326, 'Tudok'),
(34878, 1326, 'Aflek'),
(34879, 1326, 'Datal Bob'),
(34880, 1326, 'Desawo'),
(34881, 1326, 'Dlanag'),
(34882, 1326, 'Lemsnolon'),
(34883, 1326, 'Malugong'),
(34884, 1326, 'Mongocayo'),
(34885, 1326, 'Salacafe'),
(34886, 1326, 'T\'bolok'),
(34887, 1327, 'Acmonan'),
(34888, 1327, 'Bololmala'),
(34889, 1327, 'Bunao'),
(34890, 1327, 'Cebuano'),
(34891, 1327, 'Crossing Rubber'),
(34892, 1327, 'Kablon'),
(34893, 1327, 'Kalkam'),
(34894, 1327, 'Linan'),
(34895, 1327, 'Lunen'),
(34896, 1327, 'Miasong'),
(34897, 1327, 'Palian'),
(34898, 1327, 'Poblacion'),
(34899, 1327, 'Polonuling'),
(34900, 1327, 'Simbo'),
(34901, 1327, 'Tubeng'),
(34902, 1328, 'Ambalgan'),
(34903, 1328, 'Guinsang-an'),
(34904, 1328, 'Katipunan'),
(34905, 1328, 'Manuel Roxas'),
(34906, 1328, 'Panay'),
(34907, 1328, 'Poblacion'),
(34908, 1328, 'San Isidro'),
(34909, 1328, 'San Vicente'),
(34910, 1328, 'Teresita'),
(34911, 1328, 'Sajaneba'),
(34912, 1329, 'Bacdulong'),
(34913, 1329, 'Denlag'),
(34914, 1329, 'Halilan'),
(34915, 1329, 'Hanoon'),
(34916, 1329, 'Klubi'),
(34917, 1329, 'Lake Lahit'),
(34918, 1329, 'Lamcade'),
(34919, 1329, 'Lamdalag'),
(34920, 1329, 'Lamfugon'),
(34921, 1329, 'Lamlahak'),
(34922, 1329, 'Lower Maculan'),
(34923, 1329, 'Luhib'),
(34924, 1329, 'Ned'),
(34925, 1329, 'Poblacion'),
(34926, 1329, 'Siluton'),
(34927, 1329, 'Talisay'),
(34928, 1329, 'Takunel'),
(34929, 1329, 'Upper Maculan'),
(34930, 1329, 'Tasiman'),
(34931, 1330, 'Bai Sarifinang'),
(34932, 1330, 'Biwang'),
(34933, 1330, 'Busok'),
(34934, 1330, 'Daguma'),
(34935, 1330, 'Kapaya'),
(34936, 1330, 'Kinayao'),
(34937, 1330, 'Masiag'),
(34938, 1330, 'Poblacion'),
(34939, 1330, 'South Sepaka'),
(34940, 1330, 'Tuka'),
(34941, 1330, 'Chua'),
(34942, 1330, 'Daluga'),
(34943, 1330, 'Kabulanan'),
(34944, 1330, 'Kanulay'),
(34945, 1330, 'Monteverde'),
(34946, 1330, 'Santo Niño'),
(34947, 1330, 'Sumilil'),
(34948, 1330, 'Titulok'),
(34949, 1330, 'Sison'),
(34950, 1331, 'Bantangan'),
(34951, 1331, 'Datablao'),
(34952, 1331, 'Eday'),
(34953, 1331, 'Elbebe'),
(34954, 1331, 'Libertad'),
(34955, 1331, 'Lomoyon'),
(34956, 1331, 'Makat'),
(34957, 1331, 'Maligaya'),
(34958, 1331, 'Mayo'),
(34959, 1331, 'Natividad'),
(34960, 1331, 'Poblacion'),
(34961, 1331, 'Polomolok'),
(34962, 1331, 'Sinapulan'),
(34963, 1331, 'Sucob'),
(34964, 1331, 'Telafas'),
(34965, 1331, 'Lasak'),
(34966, 1332, 'Ala'),
(34967, 1332, 'Daladap'),
(34968, 1332, 'Dukay'),
(34969, 1332, 'Guiamalia'),
(34970, 1332, 'Ilian'),
(34971, 1332, 'Kangkong'),
(34972, 1332, 'Margues'),
(34973, 1332, 'New Panay'),
(34974, 1332, 'Numo'),
(34975, 1332, 'Pamantingan'),
(34976, 1332, 'Poblacion'),
(34977, 1332, 'Sagasa'),
(34978, 1332, 'Salabaca'),
(34979, 1332, 'Villamor'),
(34980, 1332, 'Laguinding'),
(34981, 1332, 'Magsaysay'),
(34982, 1332, 'Paitan'),
(34983, 1332, 'Saliao'),
(34984, 1332, 'Salumping'),
(34985, 1333, 'Bambad'),
(34986, 1333, 'Bual'),
(34987, 1333, 'D\'Lotilla'),
(34988, 1333, 'Dansuli'),
(34989, 1333, 'Impao'),
(34990, 1333, 'Kalawag I (Pob.)'),
(34991, 1333, 'Kalawag II (Pob.)'),
(34992, 1333, 'Kalawag III (Pob.)'),
(34993, 1333, 'Kenram'),
(34994, 1333, 'Kudanding'),
(34995, 1333, 'Kolambog'),
(34996, 1333, 'Lagandang'),
(34997, 1333, 'Laguilayan'),
(34998, 1333, 'Mapantig'),
(34999, 1333, 'New Pangasinan'),
(35000, 1333, 'Sampao'),
(35001, 1333, 'Tayugo'),
(35002, 1334, 'Bantogon'),
(35003, 1334, 'Cadiz'),
(35004, 1334, 'Dumangas Nuevo'),
(35005, 1334, 'Hinalaan'),
(35006, 1334, 'Limulan'),
(35007, 1334, 'Obial'),
(35008, 1334, 'Paril'),
(35009, 1334, 'Poblacion'),
(35010, 1334, 'Sangay'),
(35011, 1334, 'Santa Maria'),
(35012, 1334, 'Datu Ito Andong'),
(35013, 1334, 'Datu Wasay'),
(35014, 1334, 'Nalilidan'),
(35015, 1334, 'Sabanal'),
(35016, 1334, 'Pag-asa'),
(35017, 1335, 'Barurao'),
(35018, 1335, 'Basak'),
(35019, 1335, 'Bululawan'),
(35020, 1335, 'Capilan'),
(35021, 1335, 'Christiannuevo'),
(35022, 1335, 'Datu Karon'),
(35023, 1335, 'Kalamongog'),
(35024, 1335, 'Keytodac'),
(35025, 1335, 'Kinodalan'),
(35026, 1335, 'New Calinog'),
(35027, 1335, 'Nuling'),
(35028, 1335, 'Pansud'),
(35029, 1335, 'Pasandalan'),
(35030, 1335, 'Poblacion'),
(35031, 1335, 'Poloy-poloy'),
(35032, 1335, 'Purikay'),
(35033, 1335, 'Ragandang'),
(35034, 1335, 'Salaman'),
(35035, 1335, 'Salangsang'),
(35036, 1335, 'Taguisa'),
(35037, 1335, 'Tibpuan'),
(35038, 1335, 'Tran'),
(35039, 1335, 'Villamonte'),
(35040, 1335, 'Barurao II'),
(35041, 1335, 'Aurelio F. Freires'),
(35042, 1335, 'Poblacion III'),
(35043, 1335, 'Bolebok'),
(35044, 1336, 'Antong'),
(35045, 1336, 'Bayasong'),
(35046, 1336, 'Blingkong'),
(35047, 1336, 'Lutayan Proper'),
(35048, 1336, 'Maindang'),
(35049, 1336, 'Mamali'),
(35050, 1336, 'Manili'),
(35051, 1336, 'Sampao'),
(35052, 1336, 'Sisiman'),
(35053, 1336, 'Tamnag (Pob.)'),
(35054, 1336, 'Palavilla'),
(35055, 1337, 'Caridad'),
(35056, 1337, 'Didtaras'),
(35057, 1337, 'Gansing'),
(35058, 1337, 'Kabulakan'),
(35059, 1337, 'Kapingkong'),
(35060, 1337, 'Katitisan'),
(35061, 1337, 'Lagao'),
(35062, 1337, 'Lilit'),
(35063, 1337, 'Madanding'),
(35064, 1337, 'Maligaya'),
(35065, 1337, 'Mamali'),
(35066, 1337, 'Matiompong'),
(35067, 1337, 'Midtapok'),
(35068, 1337, 'New Cebu'),
(35069, 1337, 'Palumbi'),
(35070, 1337, 'Pidtiguian'),
(35071, 1337, 'Pimbalayan'),
(35072, 1337, 'Pinguiaman'),
(35073, 1337, 'Poblacion'),
(35074, 1337, 'Sadsalan'),
(35075, 1337, 'Seneben'),
(35076, 1337, 'Sigayan'),
(35077, 1337, 'Tambak'),
(35078, 1337, 'Tinumigues'),
(35079, 1337, 'Tumiao'),
(35080, 1337, 'Udtong'),
(35081, 1338, 'Akol'),
(35082, 1338, 'Badiangon'),
(35083, 1338, 'Baliango'),
(35084, 1338, 'Baranayan'),
(35085, 1338, 'Barongis'),
(35086, 1338, 'Batang-baglas'),
(35087, 1338, 'Butril'),
(35088, 1338, 'Domolol'),
(35089, 1338, 'Kabuling'),
(35090, 1338, 'Kalibuhan'),
(35091, 1338, 'Kanipaan'),
(35092, 1338, 'Kisek'),
(35093, 1338, 'Kidayan'),
(35094, 1338, 'Kiponget'),
(35095, 1338, 'Kulong-kulong'),
(35096, 1338, 'Kraan'),
(35097, 1338, 'Langali'),
(35098, 1338, 'Libua'),
(35099, 1338, 'Lumitan'),
(35100, 1338, 'Maganao'),
(35101, 1338, 'Maguid'),
(35102, 1338, 'Malatuneng'),
(35103, 1338, 'Malisbong'),
(35104, 1338, 'Milbuk'),
(35105, 1338, 'Molon'),
(35106, 1338, 'Namat Masla'),
(35107, 1338, 'Napnapon'),
(35108, 1338, 'Poblacion'),
(35109, 1338, 'San Roque'),
(35110, 1338, 'Colobe'),
(35111, 1338, 'Tibuhol'),
(35112, 1338, 'Wal'),
(35113, 1338, 'Bambanen'),
(35114, 1338, 'Lopoken'),
(35115, 1338, 'Mina'),
(35116, 1338, 'Medol'),
(35117, 1338, 'Wasag'),
(35118, 1338, 'Balwan'),
(35119, 1338, 'Ligao'),
(35120, 1338, 'Datu Maguiales'),
(35121, 1339, 'Bagumbayan'),
(35122, 1339, 'Bannawag'),
(35123, 1339, 'Bayawa'),
(35124, 1339, 'Estrella'),
(35125, 1339, 'Kalanawe I'),
(35126, 1339, 'Kalanawe II'),
(35127, 1339, 'Katico'),
(35128, 1339, 'Malingon'),
(35129, 1339, 'Mangalen'),
(35130, 1339, 'C. Mangilala'),
(35131, 1339, 'Pedtubo'),
(35132, 1339, 'Poblacion'),
(35133, 1339, 'Romualdez'),
(35134, 1339, 'San Jose'),
(35135, 1339, 'Sinakulay'),
(35136, 1339, 'Suben'),
(35137, 1339, 'Tinaungan'),
(35138, 1339, 'Tual'),
(35139, 1339, 'San Pedro'),
(35140, 1340, 'Baras'),
(35141, 1340, 'Buenaflor'),
(35142, 1340, 'Calean'),
(35143, 1340, 'Carmen'),
(35144, 1340, 'D\'Ledesma'),
(35145, 1340, 'Virginia Griño'),
(35146, 1340, 'Kalandagan'),
(35147, 1340, 'Enrique JC Montilla'),
(35148, 1340, 'New Isabela'),
(35149, 1340, 'New Lagao'),
(35150, 1340, 'New Passi'),
(35151, 1340, 'Poblacion'),
(35152, 1340, 'Rajah Nuda'),
(35153, 1340, 'San Antonio'),
(35154, 1340, 'San Emmanuel'),
(35155, 1340, 'San Pablo'),
(35156, 1340, 'Upper Katungal'),
(35157, 1340, 'Tina'),
(35158, 1340, 'San Rafael'),
(35159, 1340, 'Lancheta'),
(35160, 1341, 'Banali'),
(35161, 1341, 'Basag'),
(35162, 1341, 'Buenaflores'),
(35163, 1341, 'Bugso'),
(35164, 1341, 'Buklod'),
(35165, 1341, 'Gapok'),
(35166, 1341, 'Kadi'),
(35167, 1341, 'Kapatagan'),
(35168, 1341, 'Kiadsam'),
(35169, 1341, 'Kuden'),
(35170, 1341, 'Kulaman'),
(35171, 1341, 'Lagubang'),
(35172, 1341, 'Langgal'),
(35173, 1341, 'Limuhay'),
(35174, 1341, 'Malegdeg'),
(35175, 1341, 'Midtungok'),
(35176, 1341, 'Nati'),
(35177, 1341, 'Sewod'),
(35178, 1341, 'Tacupis'),
(35179, 1341, 'Tinalon'),
(35180, 1342, 'Alegria'),
(35181, 1342, 'Bagacay'),
(35182, 1342, 'Baluntay'),
(35183, 1342, 'Datal Anggas'),
(35184, 1342, 'Domolok'),
(35185, 1342, 'Kawas'),
(35186, 1342, 'Maribulan'),
(35187, 1342, 'Pag-Asa'),
(35188, 1342, 'Paraiso'),
(35189, 1342, 'Poblacion'),
(35190, 1342, 'Spring'),
(35191, 1342, 'Tokawal'),
(35192, 1342, 'Ladol'),
(35193, 1343, 'Baliton'),
(35194, 1343, 'Batotuling'),
(35195, 1343, 'Batulaki'),
(35196, 1343, 'Big Margus'),
(35197, 1343, 'Burias'),
(35198, 1343, 'Cablalan'),
(35199, 1343, 'Calabanit'),
(35200, 1343, 'Calpidong'),
(35201, 1343, 'Congan'),
(35202, 1343, 'Cross'),
(35203, 1343, 'Datalbukay'),
(35204, 1343, 'E. Alegado'),
(35205, 1343, 'Glan Padidu'),
(35206, 1343, 'Gumasa'),
(35207, 1343, 'Ilaya'),
(35208, 1343, 'Kaltuad'),
(35209, 1343, 'Kapatan'),
(35210, 1343, 'Lago'),
(35211, 1343, 'Laguimit'),
(35212, 1343, 'Mudan'),
(35213, 1343, 'New Aklan'),
(35214, 1343, 'Pangyan'),
(35215, 1343, 'Poblacion'),
(35216, 1343, 'Rio Del Pilar'),
(35217, 1343, 'San Jose'),
(35218, 1343, 'San Vicente'),
(35219, 1343, 'Small Margus'),
(35220, 1343, 'Sufatubo'),
(35221, 1343, 'Taluya'),
(35222, 1343, 'Tango'),
(35223, 1343, 'Tapon'),
(35224, 1344, 'Badtasan'),
(35225, 1344, 'Datu Dani'),
(35226, 1344, 'Gasi'),
(35227, 1344, 'Kapate'),
(35228, 1344, 'Katubao'),
(35229, 1344, 'Kayupo'),
(35230, 1344, 'Kling'),
(35231, 1344, 'Lagundi'),
(35232, 1344, 'Lebe'),
(35233, 1344, 'Lomuyon'),
(35234, 1344, 'Luma'),
(35235, 1344, 'Maligang'),
(35236, 1344, 'Nalus'),
(35237, 1344, 'Poblacion'),
(35238, 1344, 'Salakit'),
(35239, 1344, 'Suli'),
(35240, 1344, 'Tablao'),
(35241, 1344, 'Tamadang'),
(35242, 1344, 'Tambilil'),
(35243, 1345, 'Amsipit'),
(35244, 1345, 'Bales'),
(35245, 1345, 'Colon'),
(35246, 1345, 'Daliao'),
(35247, 1345, 'Kabatiol'),
(35248, 1345, 'Kablacan'),
(35249, 1345, 'Kamanga'),
(35250, 1345, 'Kanalo'),
(35251, 1345, 'Lumasal'),
(35252, 1345, 'Lumatil'),
(35253, 1345, 'Malbang'),
(35254, 1345, 'Nomoh'),
(35255, 1345, 'Pananag'),
(35256, 1345, 'Poblacion'),
(35257, 1345, 'Seven Hills'),
(35258, 1345, 'Tinoto'),
(35259, 1346, 'Bati-an'),
(35260, 1346, 'Kalaneg'),
(35261, 1346, 'Kalaong'),
(35262, 1346, 'Kiambing'),
(35263, 1346, 'Kiayap'),
(35264, 1346, 'Mabay'),
(35265, 1346, 'Maguling'),
(35266, 1346, 'Malalag (Pob.)'),
(35267, 1346, 'Mindupok'),
(35268, 1346, 'New La Union'),
(35269, 1346, 'Old Poblacion'),
(35270, 1346, 'Pangi'),
(35271, 1346, 'Pinol'),
(35272, 1346, 'Sison'),
(35273, 1346, 'Ticulab'),
(35274, 1346, 'Tuanadatu'),
(35275, 1346, 'Upo'),
(35276, 1346, 'Wali'),
(35277, 1346, 'Zion'),
(35278, 1347, 'Daan Suyan'),
(35279, 1347, 'Kihan'),
(35280, 1347, 'Kinam'),
(35281, 1347, 'Libi'),
(35282, 1347, 'Lun Masla'),
(35283, 1347, 'Lun Padidu'),
(35284, 1347, 'Patag'),
(35285, 1347, 'Poblacion'),
(35286, 1347, 'Sapu Masla'),
(35287, 1347, 'Sapu Padidu'),
(35288, 1347, 'Tuyan'),
(35289, 1347, 'Upper Suyan'),
(35290, 1348, 'Alkikan'),
(35291, 1348, 'Ampon'),
(35292, 1348, 'Atlae'),
(35293, 1348, 'Banahaw'),
(35294, 1348, 'Banate'),
(35295, 1348, 'B\'Laan'),
(35296, 1348, 'Datal Batong'),
(35297, 1348, 'Datal Bila'),
(35298, 1348, 'Datal Tampal'),
(35299, 1348, 'J.P. Laurel'),
(35300, 1348, 'Kawayan'),
(35301, 1348, 'Kibala'),
(35302, 1348, 'Kiblat'),
(35303, 1348, 'Kinabalan'),
(35304, 1348, 'Lower Mainit'),
(35305, 1348, 'Lutay'),
(35306, 1348, 'Malabod'),
(35307, 1348, 'Malalag Cogon'),
(35308, 1348, 'Malandag'),
(35309, 1348, 'Malungon Gamay'),
(35310, 1348, 'Nagpan'),
(35311, 1348, 'Panamin'),
(35312, 1348, 'Poblacion'),
(35313, 1348, 'San Juan'),
(35314, 1348, 'San Miguel'),
(35315, 1348, 'San Roque'),
(35316, 1348, 'Talus'),
(35317, 1348, 'Tamban'),
(35318, 1348, 'Upper Biangan'),
(35319, 1348, 'Upper Lumabat'),
(35320, 1348, 'Upper Mainit'),
(35321, 1349, 'Bagua'),
(35322, 1349, 'Kalanganan'),
(35323, 1349, 'Poblacion'),
(35324, 1349, 'Rosary Heights'),
(35325, 1349, 'Tamontaka'),
(35326, 1349, 'Bagua I'),
(35327, 1349, 'Bagua II'),
(35328, 1349, 'Bagua III'),
(35329, 1349, 'Kalanganan I'),
(35330, 1349, 'Kalanganan II'),
(35331, 1349, 'Poblacion I'),
(35332, 1349, 'Poblacion II'),
(35333, 1349, 'Poblacion III'),
(35334, 1349, 'Poblacion IV'),
(35335, 1349, 'Poblacion V'),
(35336, 1349, 'Poblacion VI'),
(35337, 1349, 'Poblacion VII'),
(35338, 1349, 'Poblacion VIII'),
(35339, 1349, 'Poblacion IX'),
(35340, 1349, 'Rosary Heights I'),
(35341, 1349, 'Rosary Heights II'),
(35342, 1349, 'Rosary Heights III'),
(35343, 1349, 'Rosary Heights IV'),
(35344, 1349, 'Rosary Heights V'),
(35345, 1349, 'Rosary Heights VI'),
(35346, 1349, 'Rosary Heights VII'),
(35347, 1349, 'Rosary Heights VIII'),
(35348, 1349, 'Rosary Heights IX'),
(35349, 1349, 'Rosary Heights X'),
(35350, 1349, 'Rosary Heights XI'),
(35351, 1349, 'Rosary Heights XII'),
(35352, 1349, 'Rosary Heights XIII'),
(35353, 1349, 'Tamontaka I'),
(35354, 1349, 'Tamontaka II'),
(35355, 1349, 'Tamontaka III'),
(35356, 1349, 'Tamontaka IV'),
(35357, 1349, 'Tamontaka V'),
(35358, 1350, 'Barangay 1'),
(35359, 1350, 'Barangay 2'),
(35360, 1350, 'Barangay 3'),
(35361, 1350, 'Barangay 4'),
(35362, 1350, 'Barangay 5'),
(35363, 1350, 'Barangay 6'),
(35364, 1350, 'Barangay 7'),
(35365, 1350, 'Barangay 8'),
(35366, 1350, 'Barangay 9'),
(35367, 1350, 'Barangay 10'),
(35368, 1350, 'Barangay 11'),
(35369, 1350, 'Barangay 12'),
(35370, 1350, 'Barangay 13'),
(35371, 1350, 'Barangay 14'),
(35372, 1350, 'Barangay 15'),
(35373, 1350, 'Barangay 16'),
(35374, 1350, 'Barangay 17'),
(35375, 1350, 'Barangay 18'),
(35376, 1350, 'Barangay 19'),
(35377, 1350, 'Barangay 20'),
(35378, 1350, 'Barangay 25'),
(35379, 1350, 'Barangay 26'),
(35380, 1350, 'Barangay 28'),
(35381, 1350, 'Barangay 29'),
(35382, 1350, 'Barangay 30'),
(35383, 1350, 'Barangay 31'),
(35384, 1350, 'Barangay 32'),
(35385, 1350, 'Barangay 33'),
(35386, 1350, 'Barangay 34'),
(35387, 1350, 'Barangay 35'),
(35388, 1350, 'Barangay 36'),
(35389, 1350, 'Barangay 37'),
(35390, 1350, 'Barangay 38'),
(35391, 1350, 'Barangay 39'),
(35392, 1350, 'Barangay 41'),
(35393, 1350, 'Barangay 42'),
(35394, 1350, 'Barangay 43'),
(35395, 1350, 'Barangay 44'),
(35396, 1350, 'Barangay 45'),
(35397, 1350, 'Barangay 46'),
(35398, 1350, 'Barangay 47'),
(35399, 1350, 'Barangay 48'),
(35400, 1350, 'Barangay 49'),
(35401, 1350, 'Barangay 50'),
(35402, 1350, 'Barangay 51'),
(35403, 1350, 'Barangay 52'),
(35404, 1350, 'Barangay 53'),
(35405, 1350, 'Barangay 54'),
(35406, 1350, 'Barangay 55'),
(35407, 1350, 'Barangay 56'),
(35408, 1350, 'Barangay 57'),
(35409, 1350, 'Barangay 58'),
(35410, 1350, 'Barangay 59'),
(35411, 1350, 'Barangay 60'),
(35412, 1350, 'Barangay 61'),
(35413, 1350, 'Barangay 62'),
(35414, 1350, 'Barangay 63'),
(35415, 1350, 'Barangay 64'),
(35416, 1350, 'Barangay 65'),
(35417, 1350, 'Barangay 66'),
(35418, 1350, 'Barangay 67'),
(35419, 1350, 'Barangay 68'),
(35420, 1350, 'Barangay 69'),
(35421, 1350, 'Barangay 70'),
(35422, 1350, 'Barangay 71'),
(35423, 1350, 'Barangay 72'),
(35424, 1350, 'Barangay 73'),
(35425, 1350, 'Barangay 74'),
(35426, 1350, 'Barangay 75'),
(35427, 1350, 'Barangay 76'),
(35428, 1350, 'Barangay 77'),
(35429, 1350, 'Barangay 78'),
(35430, 1350, 'Barangay 79'),
(35431, 1350, 'Barangay 80'),
(35432, 1350, 'Barangay 81'),
(35433, 1350, 'Barangay 82'),
(35434, 1350, 'Barangay 83'),
(35435, 1350, 'Barangay 84'),
(35436, 1350, 'Barangay 85'),
(35437, 1350, 'Barangay 86'),
(35438, 1350, 'Barangay 87'),
(35439, 1350, 'Barangay 88'),
(35440, 1350, 'Barangay 89'),
(35441, 1350, 'Barangay 90'),
(35442, 1350, 'Barangay 91'),
(35443, 1350, 'Barangay 92'),
(35444, 1350, 'Barangay 93'),
(35445, 1350, 'Barangay 94'),
(35446, 1350, 'Barangay 95'),
(35447, 1350, 'Barangay 96'),
(35448, 1350, 'Barangay 97'),
(35449, 1350, 'Barangay 98'),
(35450, 1350, 'Barangay 99'),
(35451, 1350, 'Barangay 100'),
(35452, 1350, 'Barangay 101'),
(35453, 1350, 'Barangay 102'),
(35454, 1350, 'Barangay 103'),
(35455, 1350, 'Barangay 104'),
(35456, 1350, 'Barangay 105'),
(35457, 1350, 'Barangay 106'),
(35458, 1350, 'Barangay 107'),
(35459, 1350, 'Barangay 108'),
(35460, 1350, 'Barangay 109'),
(35461, 1350, 'Barangay 110'),
(35462, 1350, 'Barangay 111'),
(35463, 1350, 'Barangay 112'),
(35464, 1350, 'Barangay 116'),
(35465, 1350, 'Barangay 117'),
(35466, 1350, 'Barangay 118'),
(35467, 1350, 'Barangay 119'),
(35468, 1350, 'Barangay 120'),
(35469, 1350, 'Barangay 121'),
(35470, 1350, 'Barangay 122'),
(35471, 1350, 'Barangay 123'),
(35472, 1350, 'Barangay 124'),
(35473, 1350, 'Barangay 125'),
(35474, 1350, 'Barangay 126'),
(35475, 1350, 'Barangay 127'),
(35476, 1350, 'Barangay 128'),
(35477, 1350, 'Barangay 129'),
(35478, 1350, 'Barangay 130'),
(35479, 1350, 'Barangay 131'),
(35480, 1350, 'Barangay 132'),
(35481, 1350, 'Barangay 133'),
(35482, 1350, 'Barangay 134'),
(35483, 1350, 'Barangay 135'),
(35484, 1350, 'Barangay 136'),
(35485, 1350, 'Barangay 137'),
(35486, 1350, 'Barangay 138'),
(35487, 1350, 'Barangay 139'),
(35488, 1350, 'Barangay 140'),
(35489, 1350, 'Barangay 141'),
(35490, 1350, 'Barangay 142'),
(35491, 1350, 'Barangay 143'),
(35492, 1350, 'Barangay 144'),
(35493, 1350, 'Barangay 145'),
(35494, 1350, 'Barangay 146'),
(35495, 1350, 'Barangay 147'),
(35496, 1350, 'Barangay 148'),
(35497, 1350, 'Barangay 149'),
(35498, 1350, 'Barangay 150'),
(35499, 1350, 'Barangay 151'),
(35500, 1350, 'Barangay 152'),
(35501, 1350, 'Barangay 153'),
(35502, 1350, 'Barangay 154'),
(35503, 1350, 'Barangay 155'),
(35504, 1350, 'Barangay 156'),
(35505, 1350, 'Barangay 157'),
(35506, 1350, 'Barangay 158'),
(35507, 1350, 'Barangay 159'),
(35508, 1350, 'Barangay 160'),
(35509, 1350, 'Barangay 161'),
(35510, 1350, 'Barangay 162'),
(35511, 1350, 'Barangay 163'),
(35512, 1350, 'Barangay 164'),
(35513, 1350, 'Barangay 165'),
(35514, 1350, 'Barangay 166'),
(35515, 1350, 'Barangay 167'),
(35516, 1350, 'Barangay 168'),
(35517, 1350, 'Barangay 169'),
(35518, 1350, 'Barangay 170'),
(35519, 1350, 'Barangay 171'),
(35520, 1350, 'Barangay 172'),
(35521, 1350, 'Barangay 173'),
(35522, 1350, 'Barangay 174'),
(35523, 1350, 'Barangay 175'),
(35524, 1350, 'Barangay 176'),
(35525, 1350, 'Barangay 177'),
(35526, 1350, 'Barangay 178'),
(35527, 1350, 'Barangay 179'),
(35528, 1350, 'Barangay 180'),
(35529, 1350, 'Barangay 181'),
(35530, 1350, 'Barangay 182'),
(35531, 1350, 'Barangay 183'),
(35532, 1350, 'Barangay 184'),
(35533, 1350, 'Barangay 185'),
(35534, 1350, 'Barangay 186'),
(35535, 1350, 'Barangay 187'),
(35536, 1350, 'Barangay 188'),
(35537, 1350, 'Barangay 189'),
(35538, 1350, 'Barangay 190'),
(35539, 1350, 'Barangay 191'),
(35540, 1350, 'Barangay 192'),
(35541, 1350, 'Barangay 193'),
(35542, 1350, 'Barangay 194'),
(35543, 1350, 'Barangay 195'),
(35544, 1350, 'Barangay 196'),
(35545, 1350, 'Barangay 197'),
(35546, 1350, 'Barangay 198'),
(35547, 1350, 'Barangay 199'),
(35548, 1350, 'Barangay 200'),
(35549, 1350, 'Barangay 201'),
(35550, 1350, 'Barangay 202'),
(35551, 1350, 'Barangay 202-A'),
(35552, 1350, 'Barangay 203'),
(35553, 1350, 'Barangay 204'),
(35554, 1350, 'Barangay 205'),
(35555, 1350, 'Barangay 206'),
(35556, 1350, 'Barangay 207');
INSERT INTO `table_barangay` (`barangay_id`, `municipality_id`, `barangay_name`) VALUES
(35557, 1350, 'Barangay 208'),
(35558, 1350, 'Barangay 209'),
(35559, 1350, 'Barangay 210'),
(35560, 1350, 'Barangay 211'),
(35561, 1350, 'Barangay 212'),
(35562, 1350, 'Barangay 213'),
(35563, 1350, 'Barangay 214'),
(35564, 1350, 'Barangay 215'),
(35565, 1350, 'Barangay 216'),
(35566, 1350, 'Barangay 217'),
(35567, 1350, 'Barangay 218'),
(35568, 1350, 'Barangay 219'),
(35569, 1350, 'Barangay 220'),
(35570, 1350, 'Barangay 221'),
(35571, 1350, 'Barangay 222'),
(35572, 1350, 'Barangay 223'),
(35573, 1350, 'Barangay 224'),
(35574, 1350, 'Barangay 225'),
(35575, 1350, 'Barangay 226'),
(35576, 1350, 'Barangay 227'),
(35577, 1350, 'Barangay 228'),
(35578, 1350, 'Barangay 229'),
(35579, 1350, 'Barangay 230'),
(35580, 1350, 'Barangay 231'),
(35581, 1350, 'Barangay 232'),
(35582, 1350, 'Barangay 233'),
(35583, 1350, 'Barangay 234'),
(35584, 1350, 'Barangay 235'),
(35585, 1350, 'Barangay 236'),
(35586, 1350, 'Barangay 237'),
(35587, 1350, 'Barangay 238'),
(35588, 1350, 'Barangay 239'),
(35589, 1350, 'Barangay 240'),
(35590, 1350, 'Barangay 241'),
(35591, 1350, 'Barangay 242'),
(35592, 1350, 'Barangay 243'),
(35593, 1350, 'Barangay 244'),
(35594, 1350, 'Barangay 245'),
(35595, 1350, 'Barangay 246'),
(35596, 1350, 'Barangay 247'),
(35597, 1350, 'Barangay 248'),
(35598, 1350, 'Barangay 249'),
(35599, 1350, 'Barangay 250'),
(35600, 1350, 'Barangay 251'),
(35601, 1350, 'Barangay 252'),
(35602, 1350, 'Barangay 253'),
(35603, 1350, 'Barangay 254'),
(35604, 1350, 'Barangay 255'),
(35605, 1350, 'Barangay 256'),
(35606, 1350, 'Barangay 257'),
(35607, 1350, 'Barangay 258'),
(35608, 1350, 'Barangay 259'),
(35609, 1350, 'Barangay 260'),
(35610, 1350, 'Barangay 261'),
(35611, 1350, 'Barangay 262'),
(35612, 1350, 'Barangay 263'),
(35613, 1350, 'Barangay 264'),
(35614, 1350, 'Barangay 265'),
(35615, 1350, 'Barangay 266'),
(35616, 1350, 'Barangay 267'),
(35617, 1350, 'Barangay 287'),
(35618, 1350, 'Barangay 288'),
(35619, 1350, 'Barangay 289'),
(35620, 1350, 'Barangay 290'),
(35621, 1350, 'Barangay 291'),
(35622, 1350, 'Barangay 292'),
(35623, 1350, 'Barangay 293'),
(35624, 1350, 'Barangay 294'),
(35625, 1350, 'Barangay 295'),
(35626, 1350, 'Barangay 296'),
(35627, 1350, 'Barangay 383'),
(35628, 1350, 'Barangay 384'),
(35629, 1350, 'Barangay 385'),
(35630, 1350, 'Barangay 386'),
(35631, 1350, 'Barangay 387'),
(35632, 1350, 'Barangay 388'),
(35633, 1350, 'Barangay 389'),
(35634, 1350, 'Barangay 390'),
(35635, 1350, 'Barangay 391'),
(35636, 1350, 'Barangay 392'),
(35637, 1350, 'Barangay 393'),
(35638, 1350, 'Barangay 394'),
(35639, 1350, 'Barangay 306'),
(35640, 1350, 'Barangay 307'),
(35641, 1350, 'Barangay 308'),
(35642, 1350, 'Barangay 309'),
(35643, 1350, 'Barangay 268'),
(35644, 1350, 'Barangay 269'),
(35645, 1350, 'Barangay 270'),
(35646, 1350, 'Barangay 271'),
(35647, 1350, 'Barangay 272'),
(35648, 1350, 'Barangay 273'),
(35649, 1350, 'Barangay 274'),
(35650, 1350, 'Barangay 275'),
(35651, 1350, 'Barangay 276'),
(35652, 1350, 'Barangay 281'),
(35653, 1350, 'Barangay 282'),
(35654, 1350, 'Barangay 283'),
(35655, 1350, 'Barangay 284'),
(35656, 1350, 'Barangay 285'),
(35657, 1350, 'Barangay 286'),
(35658, 1350, 'Barangay 297'),
(35659, 1350, 'Barangay 298'),
(35660, 1350, 'Barangay 299'),
(35661, 1350, 'Barangay 300'),
(35662, 1350, 'Barangay 301'),
(35663, 1350, 'Barangay 302'),
(35664, 1350, 'Barangay 303'),
(35665, 1350, 'Barangay 304'),
(35666, 1350, 'Barangay 305'),
(35667, 1350, 'Barangay 310'),
(35668, 1350, 'Barangay 311'),
(35669, 1350, 'Barangay 312'),
(35670, 1350, 'Barangay 313'),
(35671, 1350, 'Barangay 314'),
(35672, 1350, 'Barangay 315'),
(35673, 1350, 'Barangay 316'),
(35674, 1350, 'Barangay 317'),
(35675, 1350, 'Barangay 318'),
(35676, 1350, 'Barangay 319'),
(35677, 1350, 'Barangay 320'),
(35678, 1350, 'Barangay 321'),
(35679, 1350, 'Barangay 322'),
(35680, 1350, 'Barangay 323'),
(35681, 1350, 'Barangay 324'),
(35682, 1350, 'Barangay 325'),
(35683, 1350, 'Barangay 326'),
(35684, 1350, 'Barangay 327'),
(35685, 1350, 'Barangay 328'),
(35686, 1350, 'Barangay 329'),
(35687, 1350, 'Barangay 330'),
(35688, 1350, 'Barangay 331'),
(35689, 1350, 'Barangay 332'),
(35690, 1350, 'Barangay 333'),
(35691, 1350, 'Barangay 334'),
(35692, 1350, 'Barangay 335'),
(35693, 1350, 'Barangay 336'),
(35694, 1350, 'Barangay 337'),
(35695, 1350, 'Barangay 338'),
(35696, 1350, 'Barangay 339'),
(35697, 1350, 'Barangay 340'),
(35698, 1350, 'Barangay 341'),
(35699, 1350, 'Barangay 342'),
(35700, 1350, 'Barangay 343'),
(35701, 1350, 'Barangay 344'),
(35702, 1350, 'Barangay 345'),
(35703, 1350, 'Barangay 346'),
(35704, 1350, 'Barangay 347'),
(35705, 1350, 'Barangay 348'),
(35706, 1350, 'Barangay 349'),
(35707, 1350, 'Barangay 350'),
(35708, 1350, 'Barangay 351'),
(35709, 1350, 'Barangay 352'),
(35710, 1350, 'Barangay 353'),
(35711, 1350, 'Barangay 354'),
(35712, 1350, 'Barangay 355'),
(35713, 1350, 'Barangay 356'),
(35714, 1350, 'Barangay 357'),
(35715, 1350, 'Barangay 358'),
(35716, 1350, 'Barangay 359'),
(35717, 1350, 'Barangay 360'),
(35718, 1350, 'Barangay 361'),
(35719, 1350, 'Barangay 362'),
(35720, 1350, 'Barangay 363'),
(35721, 1350, 'Barangay 364'),
(35722, 1350, 'Barangay 365'),
(35723, 1350, 'Barangay 366'),
(35724, 1350, 'Barangay 367'),
(35725, 1350, 'Barangay 368'),
(35726, 1350, 'Barangay 369'),
(35727, 1350, 'Barangay 370'),
(35728, 1350, 'Barangay 371'),
(35729, 1350, 'Barangay 372'),
(35730, 1350, 'Barangay 373'),
(35731, 1350, 'Barangay 374'),
(35732, 1350, 'Barangay 375'),
(35733, 1350, 'Barangay 376'),
(35734, 1350, 'Barangay 377'),
(35735, 1350, 'Barangay 378'),
(35736, 1350, 'Barangay 379'),
(35737, 1350, 'Barangay 380'),
(35738, 1350, 'Barangay 381'),
(35739, 1350, 'Barangay 382'),
(35740, 1350, 'Barangay 395'),
(35741, 1350, 'Barangay 396'),
(35742, 1350, 'Barangay 397'),
(35743, 1350, 'Barangay 398'),
(35744, 1350, 'Barangay 399'),
(35745, 1350, 'Barangay 400'),
(35746, 1350, 'Barangay 401'),
(35747, 1350, 'Barangay 402'),
(35748, 1350, 'Barangay 403'),
(35749, 1350, 'Barangay 404'),
(35750, 1350, 'Barangay 405'),
(35751, 1350, 'Barangay 406'),
(35752, 1350, 'Barangay 407'),
(35753, 1350, 'Barangay 408'),
(35754, 1350, 'Barangay 409'),
(35755, 1350, 'Barangay 410'),
(35756, 1350, 'Barangay 411'),
(35757, 1350, 'Barangay 412'),
(35758, 1350, 'Barangay 413'),
(35759, 1350, 'Barangay 414'),
(35760, 1350, 'Barangay 415'),
(35761, 1350, 'Barangay 416'),
(35762, 1350, 'Barangay 417'),
(35763, 1350, 'Barangay 418'),
(35764, 1350, 'Barangay 419'),
(35765, 1350, 'Barangay 420'),
(35766, 1350, 'Barangay 421'),
(35767, 1350, 'Barangay 422'),
(35768, 1350, 'Barangay 423'),
(35769, 1350, 'Barangay 424'),
(35770, 1350, 'Barangay 425'),
(35771, 1350, 'Barangay 426'),
(35772, 1350, 'Barangay 427'),
(35773, 1350, 'Barangay 428'),
(35774, 1350, 'Barangay 429'),
(35775, 1350, 'Barangay 430'),
(35776, 1350, 'Barangay 431'),
(35777, 1350, 'Barangay 432'),
(35778, 1350, 'Barangay 433'),
(35779, 1350, 'Barangay 434'),
(35780, 1350, 'Barangay 435'),
(35781, 1350, 'Barangay 436'),
(35782, 1350, 'Barangay 437'),
(35783, 1350, 'Barangay 438'),
(35784, 1350, 'Barangay 439'),
(35785, 1350, 'Barangay 440'),
(35786, 1350, 'Barangay 441'),
(35787, 1350, 'Barangay 442'),
(35788, 1350, 'Barangay 443'),
(35789, 1350, 'Barangay 444'),
(35790, 1350, 'Barangay 445'),
(35791, 1350, 'Barangay 446'),
(35792, 1350, 'Barangay 447'),
(35793, 1350, 'Barangay 448'),
(35794, 1350, 'Barangay 449'),
(35795, 1350, 'Barangay 450'),
(35796, 1350, 'Barangay 451'),
(35797, 1350, 'Barangay 452'),
(35798, 1350, 'Barangay 453'),
(35799, 1350, 'Barangay 454'),
(35800, 1350, 'Barangay 455'),
(35801, 1350, 'Barangay 456'),
(35802, 1350, 'Barangay 457'),
(35803, 1350, 'Barangay 458'),
(35804, 1350, 'Barangay 459'),
(35805, 1350, 'Barangay 460'),
(35806, 1350, 'Barangay 461'),
(35807, 1350, 'Barangay 462'),
(35808, 1350, 'Barangay 463'),
(35809, 1350, 'Barangay 464'),
(35810, 1350, 'Barangay 465'),
(35811, 1350, 'Barangay 466'),
(35812, 1350, 'Barangay 467'),
(35813, 1350, 'Barangay 468'),
(35814, 1350, 'Barangay 469'),
(35815, 1350, 'Barangay 470'),
(35816, 1350, 'Barangay 471'),
(35817, 1350, 'Barangay 472'),
(35818, 1350, 'Barangay 473'),
(35819, 1350, 'Barangay 474'),
(35820, 1350, 'Barangay 475'),
(35821, 1350, 'Barangay 476'),
(35822, 1350, 'Barangay 477'),
(35823, 1350, 'Barangay 478'),
(35824, 1350, 'Barangay 479'),
(35825, 1350, 'Barangay 480'),
(35826, 1350, 'Barangay 481'),
(35827, 1350, 'Barangay 482'),
(35828, 1350, 'Barangay 483'),
(35829, 1350, 'Barangay 484'),
(35830, 1350, 'Barangay 485'),
(35831, 1350, 'Barangay 486'),
(35832, 1350, 'Barangay 487'),
(35833, 1350, 'Barangay 488'),
(35834, 1350, 'Barangay 489'),
(35835, 1350, 'Barangay 490'),
(35836, 1350, 'Barangay 491'),
(35837, 1350, 'Barangay 492'),
(35838, 1350, 'Barangay 493'),
(35839, 1350, 'Barangay 494'),
(35840, 1350, 'Barangay 495'),
(35841, 1350, 'Barangay 496'),
(35842, 1350, 'Barangay 497'),
(35843, 1350, 'Barangay 498'),
(35844, 1350, 'Barangay 499'),
(35845, 1350, 'Barangay 500'),
(35846, 1350, 'Barangay 501'),
(35847, 1350, 'Barangay 502'),
(35848, 1350, 'Barangay 503'),
(35849, 1350, 'Barangay 504'),
(35850, 1350, 'Barangay 505'),
(35851, 1350, 'Barangay 506'),
(35852, 1350, 'Barangay 507'),
(35853, 1350, 'Barangay 508'),
(35854, 1350, 'Barangay 509'),
(35855, 1350, 'Barangay 510'),
(35856, 1350, 'Barangay 511'),
(35857, 1350, 'Barangay 512'),
(35858, 1350, 'Barangay 513'),
(35859, 1350, 'Barangay 514'),
(35860, 1350, 'Barangay 515'),
(35861, 1350, 'Barangay 516'),
(35862, 1350, 'Barangay 517'),
(35863, 1350, 'Barangay 518'),
(35864, 1350, 'Barangay 519'),
(35865, 1350, 'Barangay 520'),
(35866, 1350, 'Barangay 521'),
(35867, 1350, 'Barangay 522'),
(35868, 1350, 'Barangay 523'),
(35869, 1350, 'Barangay 524'),
(35870, 1350, 'Barangay 525'),
(35871, 1350, 'Barangay 526'),
(35872, 1350, 'Barangay 527'),
(35873, 1350, 'Barangay 528'),
(35874, 1350, 'Barangay 529'),
(35875, 1350, 'Barangay 530'),
(35876, 1350, 'Barangay 531'),
(35877, 1350, 'Barangay 532'),
(35878, 1350, 'Barangay 533'),
(35879, 1350, 'Barangay 534'),
(35880, 1350, 'Barangay 535'),
(35881, 1350, 'Barangay 536'),
(35882, 1350, 'Barangay 537'),
(35883, 1350, 'Barangay 538'),
(35884, 1350, 'Barangay 539'),
(35885, 1350, 'Barangay 540'),
(35886, 1350, 'Barangay 541'),
(35887, 1350, 'Barangay 542'),
(35888, 1350, 'Barangay 543'),
(35889, 1350, 'Barangay 544'),
(35890, 1350, 'Barangay 545'),
(35891, 1350, 'Barangay 546'),
(35892, 1350, 'Barangay 547'),
(35893, 1350, 'Barangay 548'),
(35894, 1350, 'Barangay 549'),
(35895, 1350, 'Barangay 550'),
(35896, 1350, 'Barangay 551'),
(35897, 1350, 'Barangay 552'),
(35898, 1350, 'Barangay 553'),
(35899, 1350, 'Barangay 554'),
(35900, 1350, 'Barangay 555'),
(35901, 1350, 'Barangay 556'),
(35902, 1350, 'Barangay 557'),
(35903, 1350, 'Barangay 558'),
(35904, 1350, 'Barangay 559'),
(35905, 1350, 'Barangay 560'),
(35906, 1350, 'Barangay 561'),
(35907, 1350, 'Barangay 562'),
(35908, 1350, 'Barangay 563'),
(35909, 1350, 'Barangay 564'),
(35910, 1350, 'Barangay 565'),
(35911, 1350, 'Barangay 566'),
(35912, 1350, 'Barangay 567'),
(35913, 1350, 'Barangay 568'),
(35914, 1350, 'Barangay 569'),
(35915, 1350, 'Barangay 570'),
(35916, 1350, 'Barangay 571'),
(35917, 1350, 'Barangay 572'),
(35918, 1350, 'Barangay 573'),
(35919, 1350, 'Barangay 574'),
(35920, 1350, 'Barangay 575'),
(35921, 1350, 'Barangay 576'),
(35922, 1350, 'Barangay 577'),
(35923, 1350, 'Barangay 578'),
(35924, 1350, 'Barangay 579'),
(35925, 1350, 'Barangay 580'),
(35926, 1350, 'Barangay 581'),
(35927, 1350, 'Barangay 582'),
(35928, 1350, 'Barangay 583'),
(35929, 1350, 'Barangay 584'),
(35930, 1350, 'Barangay 585'),
(35931, 1350, 'Barangay 586'),
(35932, 1350, 'Barangay 587'),
(35933, 1350, 'Barangay 587-A'),
(35934, 1350, 'Barangay 588'),
(35935, 1350, 'Barangay 589'),
(35936, 1350, 'Barangay 590'),
(35937, 1350, 'Barangay 591'),
(35938, 1350, 'Barangay 592'),
(35939, 1350, 'Barangay 593'),
(35940, 1350, 'Barangay 594'),
(35941, 1350, 'Barangay 595'),
(35942, 1350, 'Barangay 596'),
(35943, 1350, 'Barangay 597'),
(35944, 1350, 'Barangay 598'),
(35945, 1350, 'Barangay 599'),
(35946, 1350, 'Barangay 600'),
(35947, 1350, 'Barangay 601'),
(35948, 1350, 'Barangay 602'),
(35949, 1350, 'Barangay 603'),
(35950, 1350, 'Barangay 604'),
(35951, 1350, 'Barangay 605'),
(35952, 1350, 'Barangay 606'),
(35953, 1350, 'Barangay 607'),
(35954, 1350, 'Barangay 608'),
(35955, 1350, 'Barangay 609'),
(35956, 1350, 'Barangay 610'),
(35957, 1350, 'Barangay 611'),
(35958, 1350, 'Barangay 612'),
(35959, 1350, 'Barangay 613'),
(35960, 1350, 'Barangay 614'),
(35961, 1350, 'Barangay 615'),
(35962, 1350, 'Barangay 616'),
(35963, 1350, 'Barangay 617'),
(35964, 1350, 'Barangay 618'),
(35965, 1350, 'Barangay 619'),
(35966, 1350, 'Barangay 620'),
(35967, 1350, 'Barangay 621'),
(35968, 1350, 'Barangay 622'),
(35969, 1350, 'Barangay 623'),
(35970, 1350, 'Barangay 624'),
(35971, 1350, 'Barangay 625'),
(35972, 1350, 'Barangay 626'),
(35973, 1350, 'Barangay 627'),
(35974, 1350, 'Barangay 628'),
(35975, 1350, 'Barangay 629'),
(35976, 1350, 'Barangay 630'),
(35977, 1350, 'Barangay 631'),
(35978, 1350, 'Barangay 632'),
(35979, 1350, 'Barangay 633'),
(35980, 1350, 'Barangay 634'),
(35981, 1350, 'Barangay 635'),
(35982, 1350, 'Barangay 636'),
(35983, 1350, 'Barangay 637'),
(35984, 1350, 'Barangay 638'),
(35985, 1350, 'Barangay 639'),
(35986, 1350, 'Barangay 640'),
(35987, 1350, 'Barangay 641'),
(35988, 1350, 'Barangay 642'),
(35989, 1350, 'Barangay 643'),
(35990, 1350, 'Barangay 644'),
(35991, 1350, 'Barangay 645'),
(35992, 1350, 'Barangay 646'),
(35993, 1350, 'Barangay 647'),
(35994, 1350, 'Barangay 648'),
(35995, 1350, 'Barangay 659'),
(35996, 1350, 'Barangay 659-A'),
(35997, 1350, 'Barangay 660'),
(35998, 1350, 'Barangay 660-A'),
(35999, 1350, 'Barangay 661'),
(36000, 1350, 'Barangay 666'),
(36001, 1350, 'Barangay 667'),
(36002, 1350, 'Barangay 668'),
(36003, 1350, 'Barangay 669'),
(36004, 1350, 'Barangay 670'),
(36005, 1350, 'Barangay 663'),
(36006, 1350, 'Barangay 663-A'),
(36007, 1350, 'Barangay 664'),
(36008, 1350, 'Barangay 654'),
(36009, 1350, 'Barangay 655'),
(36010, 1350, 'Barangay 656'),
(36011, 1350, 'Barangay 657'),
(36012, 1350, 'Barangay 658'),
(36013, 1350, 'Barangay 689'),
(36014, 1350, 'Barangay 690'),
(36015, 1350, 'Barangay 691'),
(36016, 1350, 'Barangay 692'),
(36017, 1350, 'Barangay 693'),
(36018, 1350, 'Barangay 694'),
(36019, 1350, 'Barangay 695'),
(36020, 1350, 'Barangay 696'),
(36021, 1350, 'Barangay 697'),
(36022, 1350, 'Barangay 698'),
(36023, 1350, 'Barangay 699'),
(36024, 1350, 'Barangay 700'),
(36025, 1350, 'Barangay 701'),
(36026, 1350, 'Barangay 702'),
(36027, 1350, 'Barangay 703'),
(36028, 1350, 'Barangay 704'),
(36029, 1350, 'Barangay 705'),
(36030, 1350, 'Barangay 706'),
(36031, 1350, 'Barangay 707'),
(36032, 1350, 'Barangay 708'),
(36033, 1350, 'Barangay 709'),
(36034, 1350, 'Barangay 710'),
(36035, 1350, 'Barangay 711'),
(36036, 1350, 'Barangay 712'),
(36037, 1350, 'Barangay 713'),
(36038, 1350, 'Barangay 714'),
(36039, 1350, 'Barangay 715'),
(36040, 1350, 'Barangay 716'),
(36041, 1350, 'Barangay 717'),
(36042, 1350, 'Barangay 718'),
(36043, 1350, 'Barangay 719'),
(36044, 1350, 'Barangay 720'),
(36045, 1350, 'Barangay 721'),
(36046, 1350, 'Barangay 722'),
(36047, 1350, 'Barangay 723'),
(36048, 1350, 'Barangay 724'),
(36049, 1350, 'Barangay 725'),
(36050, 1350, 'Barangay 726'),
(36051, 1350, 'Barangay 727'),
(36052, 1350, 'Barangay 728'),
(36053, 1350, 'Barangay 729'),
(36054, 1350, 'Barangay 730'),
(36055, 1350, 'Barangay 731'),
(36056, 1350, 'Barangay 732'),
(36057, 1350, 'Barangay 733'),
(36058, 1350, 'Barangay 738'),
(36059, 1350, 'Barangay 739'),
(36060, 1350, 'Barangay 740'),
(36061, 1350, 'Barangay 741'),
(36062, 1350, 'Barangay 742'),
(36063, 1350, 'Barangay 743'),
(36064, 1350, 'Barangay 744'),
(36065, 1350, 'Barangay 688'),
(36066, 1350, 'Barangay 735'),
(36067, 1350, 'Barangay 736'),
(36068, 1350, 'Barangay 737'),
(36069, 1350, 'Barangay 734'),
(36070, 1350, 'Barangay 662'),
(36071, 1350, 'Barangay 664-A'),
(36072, 1350, 'Barangay 671'),
(36073, 1350, 'Barangay 672'),
(36074, 1350, 'Barangay 673'),
(36075, 1350, 'Barangay 674'),
(36076, 1350, 'Barangay 675'),
(36077, 1350, 'Barangay 676'),
(36078, 1350, 'Barangay 677'),
(36079, 1350, 'Barangay 678'),
(36080, 1350, 'Barangay 679'),
(36081, 1350, 'Barangay 680'),
(36082, 1350, 'Barangay 681'),
(36083, 1350, 'Barangay 682'),
(36084, 1350, 'Barangay 683'),
(36085, 1350, 'Barangay 684'),
(36086, 1350, 'Barangay 685'),
(36087, 1350, 'Barangay 809'),
(36088, 1350, 'Barangay 810'),
(36089, 1350, 'Barangay 811'),
(36090, 1350, 'Barangay 812'),
(36091, 1350, 'Barangay 813'),
(36092, 1350, 'Barangay 814'),
(36093, 1350, 'Barangay 815'),
(36094, 1350, 'Barangay 816'),
(36095, 1350, 'Barangay 817'),
(36096, 1350, 'Barangay 818'),
(36097, 1350, 'Barangay 819'),
(36098, 1350, 'Barangay 820'),
(36099, 1350, 'Barangay 821'),
(36100, 1350, 'Barangay 822'),
(36101, 1350, 'Barangay 823'),
(36102, 1350, 'Barangay 824'),
(36103, 1350, 'Barangay 825'),
(36104, 1350, 'Barangay 826'),
(36105, 1350, 'Barangay 827'),
(36106, 1350, 'Barangay 828'),
(36107, 1350, 'Barangay 829'),
(36108, 1350, 'Barangay 830'),
(36109, 1350, 'Barangay 831'),
(36110, 1350, 'Barangay 832'),
(36111, 1350, 'Barangay 686'),
(36112, 1350, 'Barangay 687'),
(36113, 1350, 'Barangay 833'),
(36114, 1350, 'Barangay 834'),
(36115, 1350, 'Barangay 835'),
(36116, 1350, 'Barangay 836'),
(36117, 1350, 'Barangay 837'),
(36118, 1350, 'Barangay 838'),
(36119, 1350, 'Barangay 839'),
(36120, 1350, 'Barangay 840'),
(36121, 1350, 'Barangay 841'),
(36122, 1350, 'Barangay 842'),
(36123, 1350, 'Barangay 843'),
(36124, 1350, 'Barangay 844'),
(36125, 1350, 'Barangay 845'),
(36126, 1350, 'Barangay 846'),
(36127, 1350, 'Barangay 847'),
(36128, 1350, 'Barangay 848'),
(36129, 1350, 'Barangay 849'),
(36130, 1350, 'Barangay 850'),
(36131, 1350, 'Barangay 851'),
(36132, 1350, 'Barangay 852'),
(36133, 1350, 'Barangay 853'),
(36134, 1350, 'Barangay 855'),
(36135, 1350, 'Barangay 856'),
(36136, 1350, 'Barangay 857'),
(36137, 1350, 'Barangay 858'),
(36138, 1350, 'Barangay 859'),
(36139, 1350, 'Barangay 860'),
(36140, 1350, 'Barangay 861'),
(36141, 1350, 'Barangay 862'),
(36142, 1350, 'Barangay 863'),
(36143, 1350, 'Barangay 864'),
(36144, 1350, 'Barangay 865'),
(36145, 1350, 'Barangay 867'),
(36146, 1350, 'Barangay 868'),
(36147, 1350, 'Barangay 870'),
(36148, 1350, 'Barangay 871'),
(36149, 1350, 'Barangay 872'),
(36150, 1350, 'Barangay 869'),
(36151, 1350, 'Barangay 649'),
(36152, 1350, 'Barangay 650'),
(36153, 1350, 'Barangay 651'),
(36154, 1350, 'Barangay 652'),
(36155, 1350, 'Barangay 653'),
(36156, 1350, 'Barangay 745'),
(36157, 1350, 'Barangay 746'),
(36158, 1350, 'Barangay 747'),
(36159, 1350, 'Barangay 748'),
(36160, 1350, 'Barangay 749'),
(36161, 1350, 'Barangay 750'),
(36162, 1350, 'Barangay 751'),
(36163, 1350, 'Barangay 752'),
(36164, 1350, 'Barangay 753'),
(36165, 1350, 'Barangay 755'),
(36166, 1350, 'Barangay 756'),
(36167, 1350, 'Barangay 757'),
(36168, 1350, 'Barangay 758'),
(36169, 1350, 'Barangay 759'),
(36170, 1350, 'Barangay 760'),
(36171, 1350, 'Barangay 761'),
(36172, 1350, 'Barangay 762'),
(36173, 1350, 'Barangay 763'),
(36174, 1350, 'Barangay 764'),
(36175, 1350, 'Barangay 765'),
(36176, 1350, 'Barangay 766'),
(36177, 1350, 'Barangay 767'),
(36178, 1350, 'Barangay 768'),
(36179, 1350, 'Barangay 769'),
(36180, 1350, 'Barangay 770'),
(36181, 1350, 'Barangay 771'),
(36182, 1350, 'Barangay 772'),
(36183, 1350, 'Barangay 773'),
(36184, 1350, 'Barangay 774'),
(36185, 1350, 'Barangay 775'),
(36186, 1350, 'Barangay 776'),
(36187, 1350, 'Barangay 777'),
(36188, 1350, 'Barangay 778'),
(36189, 1350, 'Barangay 779'),
(36190, 1350, 'Barangay 780'),
(36191, 1350, 'Barangay 781'),
(36192, 1350, 'Barangay 782'),
(36193, 1350, 'Barangay 783'),
(36194, 1350, 'Barangay 784'),
(36195, 1350, 'Barangay 785'),
(36196, 1350, 'Barangay 786'),
(36197, 1350, 'Barangay 787'),
(36198, 1350, 'Barangay 788'),
(36199, 1350, 'Barangay 789'),
(36200, 1350, 'Barangay 790'),
(36201, 1350, 'Barangay 791'),
(36202, 1350, 'Barangay 792'),
(36203, 1350, 'Barangay 793'),
(36204, 1350, 'Barangay 794'),
(36205, 1350, 'Barangay 795'),
(36206, 1350, 'Barangay 796'),
(36207, 1350, 'Barangay 797'),
(36208, 1350, 'Barangay 798'),
(36209, 1350, 'Barangay 799'),
(36210, 1350, 'Barangay 800'),
(36211, 1350, 'Barangay 801'),
(36212, 1350, 'Barangay 802'),
(36213, 1350, 'Barangay 803'),
(36214, 1350, 'Barangay 804'),
(36215, 1350, 'Barangay 805'),
(36216, 1350, 'Barangay 806'),
(36217, 1350, 'Barangay 807'),
(36218, 1350, 'Barangay 866'),
(36219, 1350, 'Barangay 873'),
(36220, 1350, 'Barangay 874'),
(36221, 1350, 'Barangay 875'),
(36222, 1350, 'Barangay 876'),
(36223, 1350, 'Barangay 877'),
(36224, 1350, 'Barangay 878'),
(36225, 1350, 'Barangay 879'),
(36226, 1350, 'Barangay 880'),
(36227, 1350, 'Barangay 881'),
(36228, 1350, 'Barangay 882'),
(36229, 1350, 'Barangay 883'),
(36230, 1350, 'Barangay 884'),
(36231, 1350, 'Barangay 885'),
(36232, 1350, 'Barangay 886'),
(36233, 1350, 'Barangay 887'),
(36234, 1350, 'Barangay 888'),
(36235, 1350, 'Barangay 889'),
(36236, 1350, 'Barangay 890'),
(36237, 1350, 'Barangay 891'),
(36238, 1350, 'Barangay 892'),
(36239, 1350, 'Barangay 893'),
(36240, 1350, 'Barangay 894'),
(36241, 1350, 'Barangay 895'),
(36242, 1350, 'Barangay 896'),
(36243, 1350, 'Barangay 897'),
(36244, 1350, 'Barangay 898'),
(36245, 1350, 'Barangay 899'),
(36246, 1350, 'Barangay 900'),
(36247, 1350, 'Barangay 901'),
(36248, 1350, 'Barangay 902'),
(36249, 1350, 'Barangay 903'),
(36250, 1350, 'Barangay 904'),
(36251, 1350, 'Barangay 905'),
(36252, 1350, 'Barangay 754'),
(36253, 1350, 'Barangay 808'),
(36254, 1350, 'Barangay 818-A'),
(36255, 1351, 'Addition Hills'),
(36256, 1351, 'Bagong Silang'),
(36257, 1351, 'Barangka Drive'),
(36258, 1351, 'Barangka Ibaba'),
(36259, 1351, 'Barangka Ilaya'),
(36260, 1351, 'Barangka Itaas'),
(36261, 1351, 'Burol'),
(36262, 1351, 'Buayang Bato'),
(36263, 1351, 'Daang Bakal'),
(36264, 1351, 'Hagdang Bato Itaas'),
(36265, 1351, 'Hagdang Bato Libis'),
(36266, 1351, 'Harapin Ang Bukas'),
(36267, 1351, 'Highway Hills'),
(36268, 1351, 'Hulo'),
(36269, 1351, 'Mabini-J. Rizal'),
(36270, 1351, 'Malamig'),
(36271, 1351, 'Mauway'),
(36272, 1351, 'Namayan'),
(36273, 1351, 'New Zañiga'),
(36274, 1351, 'Old Zañiga'),
(36275, 1351, 'Pag-asa'),
(36276, 1351, 'Plainview'),
(36277, 1351, 'Pleasant Hills'),
(36278, 1351, 'Poblacion'),
(36279, 1351, 'San Jose'),
(36280, 1351, 'Vergara'),
(36281, 1351, 'Wack-wack Greenhills'),
(36282, 1352, 'Barangka'),
(36283, 1352, 'Calumpang'),
(36284, 1352, 'Concepcion Uno'),
(36285, 1352, 'Jesus De La Peña'),
(36286, 1352, 'Malanday'),
(36287, 1352, 'Nangka'),
(36288, 1352, 'Parang'),
(36289, 1352, 'San Roque'),
(36290, 1352, 'Santa Elena (Pob.)'),
(36291, 1352, 'Santo Niño'),
(36292, 1352, 'Tañong'),
(36293, 1352, 'Concepcion Dos'),
(36294, 1352, 'Marikina Heights'),
(36295, 1352, 'Industrial Valley'),
(36296, 1352, 'Fortune'),
(36297, 1352, 'Tumana'),
(36298, 1353, 'Bagong Ilog'),
(36299, 1353, 'Bagong Katipunan'),
(36300, 1353, 'Bambang'),
(36301, 1353, 'Buting'),
(36302, 1353, 'Caniogan'),
(36303, 1353, 'Dela Paz'),
(36304, 1353, 'Kalawaan'),
(36305, 1353, 'Kapasigan'),
(36306, 1353, 'Kapitolyo'),
(36307, 1353, 'Malinao'),
(36308, 1353, 'Manggahan'),
(36309, 1353, 'Maybunga'),
(36310, 1353, 'Oranbo'),
(36311, 1353, 'Palatiw'),
(36312, 1353, 'Pinagbuhatan'),
(36313, 1353, 'Pineda'),
(36314, 1353, 'Rosario'),
(36315, 1353, 'Sagad'),
(36316, 1353, 'San Antonio'),
(36317, 1353, 'San Joaquin'),
(36318, 1353, 'San Jose'),
(36319, 1353, 'San Miguel'),
(36320, 1353, 'San Nicolas (Pob.)'),
(36321, 1353, 'Santa Cruz'),
(36322, 1353, 'Santa Rosa'),
(36323, 1353, 'Santo Tomas'),
(36324, 1353, 'Santolan'),
(36325, 1353, 'Sumilang'),
(36326, 1353, 'Ugong'),
(36327, 1353, 'Santa Lucia'),
(36328, 1354, 'Alicia'),
(36329, 1354, 'Amihan'),
(36330, 1354, 'Apolonio Samson'),
(36331, 1354, 'Aurora'),
(36332, 1354, 'Baesa'),
(36333, 1354, 'Bagbag'),
(36334, 1354, 'Bagumbuhay'),
(36335, 1354, 'Bagong Lipunan Ng Crame'),
(36336, 1354, 'Bagong Pag-asa'),
(36337, 1354, 'Bagong Silangan'),
(36338, 1354, 'Bagumbayan'),
(36339, 1354, 'Bahay Toro'),
(36340, 1354, 'Balingasa'),
(36341, 1354, 'Bayanihan'),
(36342, 1354, 'Blue Ridge A'),
(36343, 1354, 'Blue Ridge B'),
(36344, 1354, 'Botocan'),
(36345, 1354, 'Bungad'),
(36346, 1354, 'Camp Aguinaldo'),
(36347, 1354, 'Central'),
(36348, 1354, 'Claro'),
(36349, 1354, 'Commonwealth'),
(36350, 1354, 'New Era'),
(36351, 1354, 'Kristong Hari'),
(36352, 1354, 'Culiat'),
(36353, 1354, 'Damar'),
(36354, 1354, 'Damayan'),
(36355, 1354, 'Damayang Lagi'),
(36356, 1354, 'Del Monte'),
(36357, 1354, 'Dioquino Zobel'),
(36358, 1354, 'Doña Imelda'),
(36359, 1354, 'Doña Josefa'),
(36360, 1354, 'Don Manuel'),
(36361, 1354, 'Duyan-duyan'),
(36362, 1354, 'E. Rodriguez'),
(36363, 1354, 'East Kamias'),
(36364, 1354, 'Escopa I'),
(36365, 1354, 'Escopa II'),
(36366, 1354, 'Escopa III'),
(36367, 1354, 'Escopa IV'),
(36368, 1354, 'Fairview'),
(36369, 1354, 'N.S. Amoranto'),
(36370, 1354, 'Gulod'),
(36371, 1354, 'Horseshoe'),
(36372, 1354, 'Immaculate Concepcion'),
(36373, 1354, 'Kaligayahan'),
(36374, 1354, 'Kalusugan'),
(36375, 1354, 'Kamuning'),
(36376, 1354, 'Katipunan'),
(36377, 1354, 'Kaunlaran'),
(36378, 1354, 'Krus Na Ligas'),
(36379, 1354, 'Laging Handa'),
(36380, 1354, 'Libis'),
(36381, 1354, 'Lourdes'),
(36382, 1354, 'Loyola Heights'),
(36383, 1354, 'Maharlika'),
(36384, 1354, 'Malaya'),
(36385, 1354, 'Manresa'),
(36386, 1354, 'Mangga'),
(36387, 1354, 'Mariana'),
(36388, 1354, 'Mariblo'),
(36389, 1354, 'Marilag'),
(36390, 1354, 'Masagana'),
(36391, 1354, 'Masambong'),
(36392, 1354, 'Santo Domingo'),
(36393, 1354, 'Matandang Balara'),
(36394, 1354, 'Milagrosa'),
(36395, 1354, 'Nagkaisang Nayon'),
(36396, 1354, 'Nayong Kanluran'),
(36397, 1354, 'Novaliches Proper'),
(36398, 1354, 'Obrero'),
(36399, 1354, 'Old Capitol Site'),
(36400, 1354, 'Paang Bundok'),
(36401, 1354, 'Pag-ibig Sa Nayon'),
(36402, 1354, 'Paligsahan'),
(36403, 1354, 'Paltok'),
(36404, 1354, 'Pansol'),
(36405, 1354, 'Paraiso'),
(36406, 1354, 'Pasong Putik Proper'),
(36407, 1354, 'Pasong Tamo'),
(36408, 1354, 'Phil-Am'),
(36409, 1354, 'Pinyahan'),
(36410, 1354, 'Pinagkaisahan'),
(36411, 1354, 'Project 6'),
(36412, 1354, 'Quirino 2-A'),
(36413, 1354, 'Quirino 2-B'),
(36414, 1354, 'Quirino 2-C'),
(36415, 1354, 'Quirino 3-A'),
(36416, 1354, 'Ramon Magsaysay'),
(36417, 1354, 'Roxas'),
(36418, 1354, 'Sacred Heart'),
(36419, 1354, 'Saint Ignatius'),
(36420, 1354, 'Saint Peter'),
(36421, 1354, 'Salvacion'),
(36422, 1354, 'San Agustin'),
(36423, 1354, 'San Antonio'),
(36424, 1354, 'San Bartolome'),
(36425, 1354, 'San Isidro'),
(36426, 1354, 'San Isidro Labrador'),
(36427, 1354, 'San Jose'),
(36428, 1354, 'San Martin De Porres'),
(36429, 1354, 'San Roque'),
(36430, 1354, 'San Vicente'),
(36431, 1354, 'Santa Cruz'),
(36432, 1354, 'Santa Lucia'),
(36433, 1354, 'Santa Monica'),
(36434, 1354, 'Santa Teresita'),
(36435, 1354, 'Santo Cristo'),
(36436, 1354, 'Santo Niño'),
(36437, 1354, 'Santol'),
(36438, 1354, 'Sauyo'),
(36439, 1354, 'Sienna'),
(36440, 1354, 'Sikatuna Village'),
(36441, 1354, 'Silangan'),
(36442, 1354, 'Socorro'),
(36443, 1354, 'South Triangle'),
(36444, 1354, 'Tagumpay'),
(36445, 1354, 'Talayan'),
(36446, 1354, 'Talipapa'),
(36447, 1354, 'Tandang Sora'),
(36448, 1354, 'Tatalon'),
(36449, 1354, 'Teachers Village East'),
(36450, 1354, 'Teachers Village West'),
(36451, 1354, 'U.P. Campus'),
(36452, 1354, 'U.P. Village'),
(36453, 1354, 'Ugong Norte'),
(36454, 1354, 'Unang Sigaw'),
(36455, 1354, 'Valencia'),
(36456, 1354, 'Vasra'),
(36457, 1354, 'Veterans Village'),
(36458, 1354, 'Villa Maria Clara'),
(36459, 1354, 'West Kamias'),
(36460, 1354, 'West Triangle'),
(36461, 1354, 'White Plains'),
(36462, 1354, 'Balong Bato'),
(36463, 1354, 'Capri'),
(36464, 1354, 'Sangandaan'),
(36465, 1354, 'Payatas'),
(36466, 1354, 'Batasan Hills'),
(36467, 1354, 'Holy Spirit'),
(36468, 1354, 'Greater Lagro'),
(36469, 1354, 'North Fairview'),
(36470, 1355, 'Addition Hills'),
(36471, 1355, 'Balong-Bato'),
(36472, 1355, 'Batis'),
(36473, 1355, 'Corazon De Jesus'),
(36474, 1355, 'Ermitaño'),
(36475, 1355, 'Halo-halo'),
(36476, 1355, 'Isabelita'),
(36477, 1355, 'Kabayanan'),
(36478, 1355, 'Little Baguio'),
(36479, 1355, 'Maytunas'),
(36480, 1355, 'Onse'),
(36481, 1355, 'Pasadeña'),
(36482, 1355, 'Pedro Cruz'),
(36483, 1355, 'Progreso'),
(36484, 1355, 'Rivera'),
(36485, 1355, 'Salapan'),
(36486, 1355, 'San Perfecto'),
(36487, 1355, 'Santa Lucia'),
(36488, 1355, 'Tibagan'),
(36489, 1355, 'West Crame'),
(36490, 1355, 'Greenhills'),
(36491, 1356, 'Barangay 1'),
(36492, 1356, 'Barangay 2'),
(36493, 1356, 'Barangay 3'),
(36494, 1356, 'Barangay 4'),
(36495, 1356, 'Barangay 5'),
(36496, 1356, 'Barangay 6'),
(36497, 1356, 'Barangay 7'),
(36498, 1356, 'Barangay 8'),
(36499, 1356, 'Barangay 9'),
(36500, 1356, 'Barangay 10'),
(36501, 1356, 'Barangay 11'),
(36502, 1356, 'Barangay 12'),
(36503, 1356, 'Barangay 13'),
(36504, 1356, 'Barangay 14'),
(36505, 1356, 'Barangay 15'),
(36506, 1356, 'Barangay 16'),
(36507, 1356, 'Barangay 17'),
(36508, 1356, 'Barangay 18'),
(36509, 1356, 'Barangay 19'),
(36510, 1356, 'Barangay 20'),
(36511, 1356, 'Barangay 21'),
(36512, 1356, 'Barangay 22'),
(36513, 1356, 'Barangay 23'),
(36514, 1356, 'Barangay 24'),
(36515, 1356, 'Barangay 25'),
(36516, 1356, 'Barangay 26'),
(36517, 1356, 'Barangay 27'),
(36518, 1356, 'Barangay 28'),
(36519, 1356, 'Barangay 29'),
(36520, 1356, 'Barangay 30'),
(36521, 1356, 'Barangay 31'),
(36522, 1356, 'Barangay 32'),
(36523, 1356, 'Barangay 33'),
(36524, 1356, 'Barangay 34'),
(36525, 1356, 'Barangay 35'),
(36526, 1356, 'Barangay 36'),
(36527, 1356, 'Barangay 37'),
(36528, 1356, 'Barangay 38'),
(36529, 1356, 'Barangay 39'),
(36530, 1356, 'Barangay 40'),
(36531, 1356, 'Barangay 41'),
(36532, 1356, 'Barangay 42'),
(36533, 1356, 'Barangay 43'),
(36534, 1356, 'Barangay 44'),
(36535, 1356, 'Barangay 45'),
(36536, 1356, 'Barangay 46'),
(36537, 1356, 'Barangay 47'),
(36538, 1356, 'Barangay 48'),
(36539, 1356, 'Barangay 49'),
(36540, 1356, 'Barangay 50'),
(36541, 1356, 'Barangay 51'),
(36542, 1356, 'Barangay 52'),
(36543, 1356, 'Barangay 53'),
(36544, 1356, 'Barangay 54'),
(36545, 1356, 'Barangay 55'),
(36546, 1356, 'Barangay 56'),
(36547, 1356, 'Barangay 57'),
(36548, 1356, 'Barangay 58'),
(36549, 1356, 'Barangay 59'),
(36550, 1356, 'Barangay 60'),
(36551, 1356, 'Barangay 61'),
(36552, 1356, 'Barangay 62'),
(36553, 1356, 'Barangay 63'),
(36554, 1356, 'Barangay 64'),
(36555, 1356, 'Barangay 65'),
(36556, 1356, 'Barangay 66'),
(36557, 1356, 'Barangay 67'),
(36558, 1356, 'Barangay 68'),
(36559, 1356, 'Barangay 69'),
(36560, 1356, 'Barangay 70'),
(36561, 1356, 'Barangay 71'),
(36562, 1356, 'Barangay 72'),
(36563, 1356, 'Barangay 73'),
(36564, 1356, 'Barangay 74'),
(36565, 1356, 'Barangay 75'),
(36566, 1356, 'Barangay 76'),
(36567, 1356, 'Barangay 77'),
(36568, 1356, 'Barangay 78'),
(36569, 1356, 'Barangay 79'),
(36570, 1356, 'Barangay 80'),
(36571, 1356, 'Barangay 81'),
(36572, 1356, 'Barangay 82'),
(36573, 1356, 'Barangay 83'),
(36574, 1356, 'Barangay 84'),
(36575, 1356, 'Barangay 85'),
(36576, 1356, 'Barangay 86'),
(36577, 1356, 'Barangay 87'),
(36578, 1356, 'Barangay 88'),
(36579, 1356, 'Barangay 89'),
(36580, 1356, 'Barangay 90'),
(36581, 1356, 'Barangay 91'),
(36582, 1356, 'Barangay 92'),
(36583, 1356, 'Barangay 93'),
(36584, 1356, 'Barangay 94'),
(36585, 1356, 'Barangay 95'),
(36586, 1356, 'Barangay 96'),
(36587, 1356, 'Barangay 97'),
(36588, 1356, 'Barangay 98'),
(36589, 1356, 'Barangay 99'),
(36590, 1356, 'Barangay 100'),
(36591, 1356, 'Barangay 101'),
(36592, 1356, 'Barangay 102'),
(36593, 1356, 'Barangay 103'),
(36594, 1356, 'Barangay 104'),
(36595, 1356, 'Barangay 105'),
(36596, 1356, 'Barangay 106'),
(36597, 1356, 'Barangay 107'),
(36598, 1356, 'Barangay 108'),
(36599, 1356, 'Barangay 109'),
(36600, 1356, 'Barangay 110'),
(36601, 1356, 'Barangay 111'),
(36602, 1356, 'Barangay 112'),
(36603, 1356, 'Barangay 113'),
(36604, 1356, 'Barangay 114'),
(36605, 1356, 'Barangay 115'),
(36606, 1356, 'Barangay 116'),
(36607, 1356, 'Barangay 117'),
(36608, 1356, 'Barangay 118'),
(36609, 1356, 'Barangay 119'),
(36610, 1356, 'Barangay 120'),
(36611, 1356, 'Barangay 121'),
(36612, 1356, 'Barangay 122'),
(36613, 1356, 'Barangay 123'),
(36614, 1356, 'Barangay 124'),
(36615, 1356, 'Barangay 125'),
(36616, 1356, 'Barangay 126'),
(36617, 1356, 'Barangay 127'),
(36618, 1356, 'Barangay 128'),
(36619, 1356, 'Barangay 129'),
(36620, 1356, 'Barangay 130'),
(36621, 1356, 'Barangay 131'),
(36622, 1356, 'Barangay 132'),
(36623, 1356, 'Barangay 133'),
(36624, 1356, 'Barangay 134'),
(36625, 1356, 'Barangay 135'),
(36626, 1356, 'Barangay 136'),
(36627, 1356, 'Barangay 137'),
(36628, 1356, 'Barangay 138'),
(36629, 1356, 'Barangay 139'),
(36630, 1356, 'Barangay 140'),
(36631, 1356, 'Barangay 141'),
(36632, 1356, 'Barangay 142'),
(36633, 1356, 'Barangay 143'),
(36634, 1356, 'Barangay 144'),
(36635, 1356, 'Barangay 145'),
(36636, 1356, 'Barangay 146'),
(36637, 1356, 'Barangay 147'),
(36638, 1356, 'Barangay 148'),
(36639, 1356, 'Barangay 149'),
(36640, 1356, 'Barangay 150'),
(36641, 1356, 'Barangay 151'),
(36642, 1356, 'Barangay 152'),
(36643, 1356, 'Barangay 153'),
(36644, 1356, 'Barangay 154'),
(36645, 1356, 'Barangay 155'),
(36646, 1356, 'Barangay 156'),
(36647, 1356, 'Barangay 157'),
(36648, 1356, 'Barangay 158'),
(36649, 1356, 'Barangay 159'),
(36650, 1356, 'Barangay 160'),
(36651, 1356, 'Barangay 161'),
(36652, 1356, 'Barangay 162'),
(36653, 1356, 'Barangay 163'),
(36654, 1356, 'Barangay 164'),
(36655, 1356, 'Barangay 165'),
(36656, 1356, 'Barangay 166'),
(36657, 1356, 'Barangay 167'),
(36658, 1356, 'Barangay 168'),
(36659, 1356, 'Barangay 169'),
(36660, 1356, 'Barangay 170'),
(36661, 1356, 'Barangay 171'),
(36662, 1356, 'Barangay 172'),
(36663, 1356, 'Barangay 173'),
(36664, 1356, 'Barangay 174'),
(36665, 1356, 'Barangay 175'),
(36666, 1356, 'Barangay 176'),
(36667, 1356, 'Barangay 177'),
(36668, 1356, 'Barangay 178'),
(36669, 1356, 'Barangay 179'),
(36670, 1356, 'Barangay 180'),
(36671, 1356, 'Barangay 181'),
(36672, 1356, 'Barangay 182'),
(36673, 1356, 'Barangay 183'),
(36674, 1356, 'Barangay 184'),
(36675, 1356, 'Barangay 185'),
(36676, 1356, 'Barangay 186'),
(36677, 1356, 'Barangay 187'),
(36678, 1356, 'Barangay 188'),
(36679, 1357, 'Acacia'),
(36680, 1357, 'Baritan'),
(36681, 1357, 'Bayan-bayanan'),
(36682, 1357, 'Catmon'),
(36683, 1357, 'Concepcion'),
(36684, 1357, 'Dampalit'),
(36685, 1357, 'Flores'),
(36686, 1357, 'Hulong Duhat'),
(36687, 1357, 'Ibaba'),
(36688, 1357, 'Longos'),
(36689, 1357, 'Maysilo'),
(36690, 1357, 'Muzon'),
(36691, 1357, 'Niugan'),
(36692, 1357, 'Panghulo'),
(36693, 1357, 'Potrero'),
(36694, 1357, 'San Agustin'),
(36695, 1357, 'Santolan'),
(36696, 1357, 'Tañong (Pob.)'),
(36697, 1357, 'Tinajeros'),
(36698, 1357, 'Tonsuya'),
(36699, 1357, 'Tugatog'),
(36700, 1358, 'Sipac-Almacen'),
(36701, 1358, 'Bagumbayan North'),
(36702, 1358, 'Bagumbayan South'),
(36703, 1358, 'Bangculasi'),
(36704, 1358, 'Daanghari'),
(36705, 1358, 'Navotas East'),
(36706, 1358, 'Navotas West'),
(36707, 1358, 'North Bay Boulevard North'),
(36708, 1358, 'NBBS Kaunlaran'),
(36709, 1358, 'San Jose (Pob.)'),
(36710, 1358, 'San Rafael Village'),
(36711, 1358, 'San Roque'),
(36712, 1358, 'Tangos South'),
(36713, 1358, 'Tanza 1'),
(36714, 1358, 'NBBS Dagat-dagatan'),
(36715, 1358, 'NBBS Proper'),
(36716, 1358, 'Tangos North'),
(36717, 1358, 'Tanza 2'),
(36718, 1359, 'Arkong Bato'),
(36719, 1359, 'Bagbaguin'),
(36720, 1359, 'Balangkas'),
(36721, 1359, 'Parada'),
(36722, 1359, 'Bignay'),
(36723, 1359, 'Bisig'),
(36724, 1359, 'Canumay West'),
(36725, 1359, 'Karuhatan'),
(36726, 1359, 'Coloong'),
(36727, 1359, 'Dalandanan'),
(36728, 1359, 'Gen. T. De Leon'),
(36729, 1359, 'Isla'),
(36730, 1359, 'Lawang Bato'),
(36731, 1359, 'Lingunan'),
(36732, 1359, 'Mabolo'),
(36733, 1359, 'Malanday'),
(36734, 1359, 'Malinta'),
(36735, 1359, 'Mapulang Lupa'),
(36736, 1359, 'Marulas'),
(36737, 1359, 'Maysan'),
(36738, 1359, 'Palasan'),
(36739, 1359, 'Pariancillo Villa'),
(36740, 1359, 'Paso De Blas'),
(36741, 1359, 'Pasolo'),
(36742, 1359, 'Poblacion'),
(36743, 1359, 'Pulo'),
(36744, 1359, 'Punturin'),
(36745, 1359, 'Rincon'),
(36746, 1359, 'Tagalag'),
(36747, 1359, 'Ugong'),
(36748, 1359, 'Viente Reales'),
(36749, 1359, 'Wawang Pulo'),
(36750, 1359, 'Canumay East'),
(36751, 1360, 'Almanza Uno'),
(36752, 1360, 'Daniel Fajardo'),
(36753, 1360, 'Elias Aldana'),
(36754, 1360, 'Ilaya'),
(36755, 1360, 'Manuyo Uno'),
(36756, 1360, 'Pamplona Uno'),
(36757, 1360, 'Pulang Lupa Uno'),
(36758, 1360, 'Talon Uno'),
(36759, 1360, 'Zapote'),
(36760, 1360, 'Almanza Dos'),
(36761, 1360, 'B. F. International Village'),
(36762, 1360, 'Manuyo Dos'),
(36763, 1360, 'Pamplona Dos'),
(36764, 1360, 'Pamplona Tres'),
(36765, 1360, 'Pilar'),
(36766, 1360, 'Pulang Lupa Dos'),
(36767, 1360, 'Talon Dos'),
(36768, 1360, 'Talon Tres'),
(36769, 1360, 'Talon Kuatro'),
(36770, 1360, 'Talon Singko'),
(36771, 1361, 'Bangkal'),
(36772, 1361, 'Bel-Air'),
(36773, 1361, 'Cembo'),
(36774, 1361, 'Comembo'),
(36775, 1361, 'Carmona'),
(36776, 1361, 'Dasmariñas'),
(36777, 1361, 'East Rembo'),
(36778, 1361, 'Forbes Park'),
(36779, 1361, 'Guadalupe Nuevo'),
(36780, 1361, 'Guadalupe Viejo'),
(36781, 1361, 'Kasilawan'),
(36782, 1361, 'La Paz'),
(36783, 1361, 'Magallanes'),
(36784, 1361, 'Olympia'),
(36785, 1361, 'Palanan'),
(36786, 1361, 'Pembo'),
(36787, 1361, 'Pinagkaisahan'),
(36788, 1361, 'Pio Del Pilar'),
(36789, 1361, 'Pitogo'),
(36790, 1361, 'Poblacion'),
(36791, 1361, 'Post Proper Northside'),
(36792, 1361, 'Post Proper Southside'),
(36793, 1361, 'San Antonio'),
(36794, 1361, 'San Isidro'),
(36795, 1361, 'San Lorenzo'),
(36796, 1361, 'Santa Cruz'),
(36797, 1361, 'Singkamas'),
(36798, 1361, 'South Cembo'),
(36799, 1361, 'Tejeros'),
(36800, 1361, 'Urdaneta'),
(36801, 1361, 'Valenzuela'),
(36802, 1361, 'West Rembo'),
(36803, 1361, 'Rizal'),
(36804, 1362, 'Alabang'),
(36805, 1362, 'Bayanan'),
(36806, 1362, 'Buli'),
(36807, 1362, 'Cupang'),
(36808, 1362, 'Poblacion'),
(36809, 1362, 'Putatan'),
(36810, 1362, 'Sucat'),
(36811, 1362, 'Tunasan'),
(36812, 1362, 'New Alabang Village'),
(36813, 1363, 'Baclaran'),
(36814, 1363, 'Don Galo'),
(36815, 1363, 'La Huerta'),
(36816, 1363, 'San Dionisio'),
(36817, 1363, 'Santo Niño'),
(36818, 1363, 'Tambo'),
(36819, 1363, 'B. F. Homes'),
(36820, 1363, 'Don Bosco'),
(36821, 1363, 'Marcelo Green Village'),
(36822, 1363, 'Merville'),
(36823, 1363, 'Moonwalk'),
(36824, 1363, 'San Antonio'),
(36825, 1363, 'San Isidro'),
(36826, 1363, 'San Martin De Porres'),
(36827, 1363, 'Sun Valley'),
(36828, 1363, 'Vitalez'),
(36829, 1364, 'Barangay 1'),
(36830, 1364, 'Barangay 2'),
(36831, 1364, 'Barangay 3'),
(36832, 1364, 'Barangay 4'),
(36833, 1364, 'Barangay 5'),
(36834, 1364, 'Barangay 6'),
(36835, 1364, 'Barangay 7'),
(36836, 1364, 'Barangay 8'),
(36837, 1364, 'Barangay 9'),
(36838, 1364, 'Barangay 10'),
(36839, 1364, 'Barangay 11'),
(36840, 1364, 'Barangay 12'),
(36841, 1364, 'Barangay 13'),
(36842, 1364, 'Barangay 14'),
(36843, 1364, 'Barangay 15'),
(36844, 1364, 'Barangay 16'),
(36845, 1364, 'Barangay 17'),
(36846, 1364, 'Barangay 18'),
(36847, 1364, 'Barangay 19'),
(36848, 1364, 'Barangay 20'),
(36849, 1364, 'Barangay 21'),
(36850, 1364, 'Barangay 22'),
(36851, 1364, 'Barangay 23'),
(36852, 1364, 'Barangay 24'),
(36853, 1364, 'Barangay 25'),
(36854, 1364, 'Barangay 26'),
(36855, 1364, 'Barangay 27'),
(36856, 1364, 'Barangay 28'),
(36857, 1364, 'Barangay 29'),
(36858, 1364, 'Barangay 30'),
(36859, 1364, 'Barangay 31'),
(36860, 1364, 'Barangay 32'),
(36861, 1364, 'Barangay 33'),
(36862, 1364, 'Barangay 34'),
(36863, 1364, 'Barangay 35'),
(36864, 1364, 'Barangay 36'),
(36865, 1364, 'Barangay 37'),
(36866, 1364, 'Barangay 38'),
(36867, 1364, 'Barangay 39'),
(36868, 1364, 'Barangay 40'),
(36869, 1364, 'Barangay 41'),
(36870, 1364, 'Barangay 42'),
(36871, 1364, 'Barangay 43'),
(36872, 1364, 'Barangay 44'),
(36873, 1364, 'Barangay 45'),
(36874, 1364, 'Barangay 46'),
(36875, 1364, 'Barangay 47'),
(36876, 1364, 'Barangay 48'),
(36877, 1364, 'Barangay 49'),
(36878, 1364, 'Barangay 50'),
(36879, 1364, 'Barangay 51'),
(36880, 1364, 'Barangay 52'),
(36881, 1364, 'Barangay 53'),
(36882, 1364, 'Barangay 54'),
(36883, 1364, 'Barangay 55'),
(36884, 1364, 'Barangay 56'),
(36885, 1364, 'Barangay 57'),
(36886, 1364, 'Barangay 58'),
(36887, 1364, 'Barangay 59'),
(36888, 1364, 'Barangay 60'),
(36889, 1364, 'Barangay 61'),
(36890, 1364, 'Barangay 62'),
(36891, 1364, 'Barangay 63'),
(36892, 1364, 'Barangay 64'),
(36893, 1364, 'Barangay 65'),
(36894, 1364, 'Barangay 66'),
(36895, 1364, 'Barangay 67'),
(36896, 1364, 'Barangay 68'),
(36897, 1364, 'Barangay 69'),
(36898, 1364, 'Barangay 70'),
(36899, 1364, 'Barangay 71'),
(36900, 1364, 'Barangay 72'),
(36901, 1364, 'Barangay 73'),
(36902, 1364, 'Barangay 74'),
(36903, 1364, 'Barangay 75'),
(36904, 1364, 'Barangay 76'),
(36905, 1364, 'Barangay 77'),
(36906, 1364, 'Barangay 78'),
(36907, 1364, 'Barangay 79'),
(36908, 1364, 'Barangay 80'),
(36909, 1364, 'Barangay 81'),
(36910, 1364, 'Barangay 82'),
(36911, 1364, 'Barangay 83'),
(36912, 1364, 'Barangay 84'),
(36913, 1364, 'Barangay 85'),
(36914, 1364, 'Barangay 86'),
(36915, 1364, 'Barangay 87'),
(36916, 1364, 'Barangay 88'),
(36917, 1364, 'Barangay 89'),
(36918, 1364, 'Barangay 90'),
(36919, 1364, 'Barangay 91'),
(36920, 1364, 'Barangay 92'),
(36921, 1364, 'Barangay 93'),
(36922, 1364, 'Barangay 94'),
(36923, 1364, 'Barangay 95'),
(36924, 1364, 'Barangay 96'),
(36925, 1364, 'Barangay 97'),
(36926, 1364, 'Barangay 98'),
(36927, 1364, 'Barangay 99'),
(36928, 1364, 'Barangay 100'),
(36929, 1364, 'Barangay 101'),
(36930, 1364, 'Barangay 102'),
(36931, 1364, 'Barangay 103'),
(36932, 1364, 'Barangay 104'),
(36933, 1364, 'Barangay 105'),
(36934, 1364, 'Barangay 106'),
(36935, 1364, 'Barangay 107'),
(36936, 1364, 'Barangay 108'),
(36937, 1364, 'Barangay 109'),
(36938, 1364, 'Barangay 110'),
(36939, 1364, 'Barangay 111'),
(36940, 1364, 'Barangay 112'),
(36941, 1364, 'Barangay 113'),
(36942, 1364, 'Barangay 114'),
(36943, 1364, 'Barangay 115'),
(36944, 1364, 'Barangay 116'),
(36945, 1364, 'Barangay 117'),
(36946, 1364, 'Barangay 118'),
(36947, 1364, 'Barangay 119'),
(36948, 1364, 'Barangay 120'),
(36949, 1364, 'Barangay 121'),
(36950, 1364, 'Barangay 122'),
(36951, 1364, 'Barangay 123'),
(36952, 1364, 'Barangay 124'),
(36953, 1364, 'Barangay 125'),
(36954, 1364, 'Barangay 126'),
(36955, 1364, 'Barangay 127'),
(36956, 1364, 'Barangay 128'),
(36957, 1364, 'Barangay 129'),
(36958, 1364, 'Barangay 130'),
(36959, 1364, 'Barangay 131'),
(36960, 1364, 'Barangay 132'),
(36961, 1364, 'Barangay 133'),
(36962, 1364, 'Barangay 134'),
(36963, 1364, 'Barangay 135'),
(36964, 1364, 'Barangay 136'),
(36965, 1364, 'Barangay 137'),
(36966, 1364, 'Barangay 138'),
(36967, 1364, 'Barangay 139'),
(36968, 1364, 'Barangay 140'),
(36969, 1364, 'Barangay 141'),
(36970, 1364, 'Barangay 142'),
(36971, 1364, 'Barangay 143'),
(36972, 1364, 'Barangay 144'),
(36973, 1364, 'Barangay 145'),
(36974, 1364, 'Barangay 146'),
(36975, 1364, 'Barangay 147'),
(36976, 1364, 'Barangay 148'),
(36977, 1364, 'Barangay 149'),
(36978, 1364, 'Barangay 150'),
(36979, 1364, 'Barangay 151'),
(36980, 1364, 'Barangay 152'),
(36981, 1364, 'Barangay 153'),
(36982, 1364, 'Barangay 154'),
(36983, 1364, 'Barangay 155'),
(36984, 1364, 'Barangay 156'),
(36985, 1364, 'Barangay 157'),
(36986, 1364, 'Barangay 158'),
(36987, 1364, 'Barangay 159'),
(36988, 1364, 'Barangay 160'),
(36989, 1364, 'Barangay 161'),
(36990, 1364, 'Barangay 162'),
(36991, 1364, 'Barangay 163'),
(36992, 1364, 'Barangay 164'),
(36993, 1364, 'Barangay 165'),
(36994, 1364, 'Barangay 166'),
(36995, 1364, 'Barangay 167'),
(36996, 1364, 'Barangay 168'),
(36997, 1364, 'Barangay 169'),
(36998, 1364, 'Barangay 170'),
(36999, 1364, 'Barangay 171'),
(37000, 1364, 'Barangay 172'),
(37001, 1364, 'Barangay 173'),
(37002, 1364, 'Barangay 174'),
(37003, 1364, 'Barangay 175'),
(37004, 1364, 'Barangay 176'),
(37005, 1364, 'Barangay 177'),
(37006, 1364, 'Barangay 178'),
(37007, 1364, 'Barangay 179'),
(37008, 1364, 'Barangay 180'),
(37009, 1364, 'Barangay 181'),
(37010, 1364, 'Barangay 182'),
(37011, 1364, 'Barangay 183'),
(37012, 1364, 'Barangay 184'),
(37013, 1364, 'Barangay 185'),
(37014, 1364, 'Barangay 186'),
(37015, 1364, 'Barangay 187'),
(37016, 1364, 'Barangay 188'),
(37017, 1364, 'Barangay 189'),
(37018, 1364, 'Barangay 190'),
(37019, 1364, 'Barangay 191'),
(37020, 1364, 'Barangay 192'),
(37021, 1364, 'Barangay 193'),
(37022, 1364, 'Barangay 194'),
(37023, 1364, 'Barangay 195'),
(37024, 1364, 'Barangay 196'),
(37025, 1364, 'Barangay 197'),
(37026, 1364, 'Barangay 198'),
(37027, 1364, 'Barangay 199'),
(37028, 1364, 'Barangay 200'),
(37029, 1364, 'Barangay 201'),
(37030, 1365, 'Aguho'),
(37031, 1365, 'Magtanggol'),
(37032, 1365, 'Martires Del 96'),
(37033, 1365, 'Poblacion'),
(37034, 1365, 'San Pedro'),
(37035, 1365, 'San Roque'),
(37036, 1365, 'Santa Ana'),
(37037, 1365, 'Santo Rosario-Kanluran'),
(37038, 1365, 'Santo Rosario-Silangan'),
(37039, 1365, 'Tabacalera'),
(37040, 1366, 'Tanyag'),
(37041, 1366, 'Bagumbayan'),
(37042, 1366, 'Bambang'),
(37043, 1366, 'Calzada'),
(37044, 1366, 'Hagonoy'),
(37045, 1366, 'Ibayo-Tipas'),
(37046, 1366, 'Ligid-Tipas'),
(37047, 1366, 'Lower Bicutan'),
(37048, 1366, 'Maharlika Village'),
(37049, 1366, 'Napindan'),
(37050, 1366, 'Palingon'),
(37051, 1366, 'Santa Ana'),
(37052, 1366, 'Central Signal Village'),
(37053, 1366, 'Tuktukan'),
(37054, 1366, 'Upper Bicutan'),
(37055, 1366, 'Ususan'),
(37056, 1366, 'Wawa'),
(37057, 1366, 'Western Bicutan'),
(37058, 1366, 'Central Bicutan'),
(37059, 1366, 'Fort Bonifacio'),
(37060, 1366, 'Katuparan'),
(37061, 1366, 'New Lower Bicutan'),
(37062, 1366, 'North Daang Hari'),
(37063, 1366, 'North Signal Village'),
(37064, 1366, 'Pinagsama'),
(37065, 1366, 'San Miguel'),
(37066, 1366, 'South Daang Hari'),
(37067, 1366, 'South Signal Village'),
(37068, 1367, 'Agtangao'),
(37069, 1367, 'Angad'),
(37070, 1367, 'Bañacao'),
(37071, 1367, 'Bangbangar'),
(37072, 1367, 'Cabuloan'),
(37073, 1367, 'Calaba'),
(37074, 1367, 'Tablac'),
(37075, 1367, 'Cosili West'),
(37076, 1367, 'Cosili East'),
(37077, 1367, 'Dangdangla'),
(37078, 1367, 'Lingtan'),
(37079, 1367, 'Lipcan'),
(37080, 1367, 'Lubong'),
(37081, 1367, 'Macarcarmay'),
(37082, 1367, 'Maoay'),
(37083, 1367, 'Macray'),
(37084, 1367, 'Malita'),
(37085, 1367, 'Palao'),
(37086, 1367, 'Patucannay'),
(37087, 1367, 'Sagap'),
(37088, 1367, 'San Antonio'),
(37089, 1367, 'Santa Rosa'),
(37090, 1367, 'Sao-atan'),
(37091, 1367, 'Sappaac'),
(37092, 1367, 'Zone 2 Pob.'),
(37093, 1367, 'Zone 3 Pob.'),
(37094, 1367, 'Zone 4 Pob.'),
(37095, 1367, 'Zone 5 Pob.'),
(37096, 1367, 'Zone 6 Pob. '),
(37097, 1367, 'Zone 7 Pob.'),
(37098, 1367, 'Zone 1 Pob.'),
(37099, 1368, 'Amti'),
(37100, 1368, 'Bao-yan'),
(37101, 1368, 'Danac East'),
(37102, 1368, 'Dao-angan'),
(37103, 1368, 'Dumagas'),
(37104, 1368, 'Kilong-Olao'),
(37105, 1368, 'Poblacion'),
(37106, 1368, 'Danac West'),
(37107, 1369, 'Abang'),
(37108, 1369, 'Bangbangcag'),
(37109, 1369, 'Bangcagan'),
(37110, 1369, 'Banglolao'),
(37111, 1369, 'Bugbog'),
(37112, 1369, 'Calao'),
(37113, 1369, 'Dugong'),
(37114, 1369, 'Labon'),
(37115, 1369, 'Layugan'),
(37116, 1369, 'Madalipay'),
(37117, 1369, 'Pagala'),
(37118, 1369, 'Palaquio'),
(37119, 1369, 'Pakiling'),
(37120, 1369, 'Patoc'),
(37121, 1369, 'North Poblacion'),
(37122, 1369, 'South Poblacion'),
(37123, 1369, 'Quimloong'),
(37124, 1369, 'Salnec'),
(37125, 1369, 'San Miguel'),
(37126, 1369, 'Siblong'),
(37127, 1369, 'Tabiog'),
(37128, 1370, 'Ducligan'),
(37129, 1370, 'Labaan'),
(37130, 1370, 'Lingay'),
(37131, 1370, 'Lamao (Pob.)'),
(37132, 1371, 'Ableg'),
(37133, 1371, 'Cabaruyan'),
(37134, 1371, 'Pikek'),
(37135, 1371, 'Tui (Pob.)'),
(37136, 1372, 'Abaquid'),
(37137, 1372, 'Cabaruan'),
(37138, 1372, 'Caupasan (Pob.)'),
(37139, 1372, 'Danglas'),
(37140, 1372, 'Nagaparan'),
(37141, 1372, 'Padangitan'),
(37142, 1372, 'Pangal'),
(37143, 1373, 'Bayaan'),
(37144, 1373, 'Cabaroan'),
(37145, 1373, 'Calumbaya'),
(37146, 1373, 'Cardona'),
(37147, 1373, 'Isit'),
(37148, 1373, 'Kimmalaba'),
(37149, 1373, 'Libtec'),
(37150, 1373, 'Lub-lubba'),
(37151, 1373, 'Mudiit'),
(37152, 1373, 'Namit-ingan'),
(37153, 1373, 'Pacac'),
(37154, 1373, 'Poblacion'),
(37155, 1373, 'Salucag'),
(37156, 1373, 'Talogtog'),
(37157, 1373, 'Taping'),
(37158, 1374, 'Benben'),
(37159, 1374, 'Bulbulala'),
(37160, 1374, 'Buli'),
(37161, 1374, 'Canan'),
(37162, 1374, 'Liguis'),
(37163, 1374, 'Malabbaga'),
(37164, 1374, 'Mudeng'),
(37165, 1374, 'Pidipid'),
(37166, 1374, 'Poblacion'),
(37167, 1374, 'San Gregorio'),
(37168, 1374, 'Toon'),
(37169, 1374, 'Udangan'),
(37170, 1375, 'Bacag'),
(37171, 1375, 'Buneg'),
(37172, 1375, 'Guinguinabang'),
(37173, 1375, 'Lan-ag'),
(37174, 1375, 'Pacoc'),
(37175, 1375, 'Poblacion'),
(37176, 1376, 'Aguet'),
(37177, 1376, 'Bacooc'),
(37178, 1376, 'Balais'),
(37179, 1376, 'Cayapa'),
(37180, 1376, 'Dalaguisen'),
(37181, 1376, 'Laang'),
(37182, 1376, 'Lagben'),
(37183, 1376, 'Laguiben'),
(37184, 1376, 'Nagtipulan'),
(37185, 1376, 'Nagtupacan'),
(37186, 1376, 'Paganao'),
(37187, 1376, 'Pawa'),
(37188, 1376, 'Poblacion'),
(37189, 1376, 'Presentar'),
(37190, 1376, 'San Isidro'),
(37191, 1376, 'Tagodtod'),
(37192, 1376, 'Taping'),
(37193, 1377, 'Ba-i'),
(37194, 1377, 'Collago'),
(37195, 1377, 'Pang-ot'),
(37196, 1377, 'Poblacion'),
(37197, 1377, 'Pulot'),
(37198, 1378, 'Baac'),
(37199, 1378, 'Dalayap'),
(37200, 1378, 'Mabungtot'),
(37201, 1378, 'Malapaao'),
(37202, 1378, 'Poblacion'),
(37203, 1378, 'Quillat'),
(37204, 1379, 'Bonglo'),
(37205, 1379, 'Bulbulala'),
(37206, 1379, 'Cawayan'),
(37207, 1379, 'Domenglay'),
(37208, 1379, 'Lenneng'),
(37209, 1379, 'Mapisla'),
(37210, 1379, 'Mogao'),
(37211, 1379, 'Nalbuan'),
(37212, 1379, 'Poblacion'),
(37213, 1379, 'Subagan'),
(37214, 1379, 'Tumalip'),
(37215, 1380, 'Ampalioc'),
(37216, 1380, 'Barit'),
(37217, 1380, 'Gayaman'),
(37218, 1380, 'Lul-luno'),
(37219, 1380, 'Luzong'),
(37220, 1380, 'Nagbukel-Tuquipa'),
(37221, 1380, 'Poblacion'),
(37222, 1380, 'Sabnangan'),
(37223, 1381, 'Bayabas'),
(37224, 1381, 'Binasaran'),
(37225, 1381, 'Buanao'),
(37226, 1381, 'Dulao'),
(37227, 1381, 'Duldulao'),
(37228, 1381, 'Gacab'),
(37229, 1381, 'Lat-ey'),
(37230, 1381, 'Malibcong (Pob.)'),
(37231, 1381, 'Mataragan'),
(37232, 1381, 'Pacgued'),
(37233, 1381, 'Taripan'),
(37234, 1381, 'Umnap'),
(37235, 1382, 'Catacdegan Viejo'),
(37236, 1382, 'Luzong'),
(37237, 1382, 'Ayyeng (Pob.)'),
(37238, 1382, 'San Jose Norte'),
(37239, 1382, 'San Jose Sur'),
(37240, 1382, 'San Juan Norte'),
(37241, 1382, 'San Juan Sur'),
(37242, 1382, 'San Ramon East'),
(37243, 1382, 'San Ramon West'),
(37244, 1382, 'Santo Tomas'),
(37245, 1382, 'Catacdegan Nuevo'),
(37246, 1383, 'Dumayco'),
(37247, 1383, 'Lusuac'),
(37248, 1383, 'Namarabar'),
(37249, 1383, 'Patiao'),
(37250, 1383, 'Malamsit'),
(37251, 1383, 'Poblacion'),
(37252, 1383, 'Riang'),
(37253, 1383, 'Santa Rosa'),
(37254, 1383, 'Tattawa'),
(37255, 1384, 'Alinaya'),
(37256, 1384, 'Arab'),
(37257, 1384, 'Garreta'),
(37258, 1384, 'Immuli'),
(37259, 1384, 'Laskig'),
(37260, 1384, 'Naguirayan'),
(37261, 1384, 'Monggoc'),
(37262, 1384, 'Pamutic'),
(37263, 1384, 'Pangtud'),
(37264, 1384, 'Poblacion East'),
(37265, 1384, 'Poblacion West'),
(37266, 1384, 'San Diego'),
(37267, 1384, 'Sulbec'),
(37268, 1384, 'Suyo'),
(37269, 1384, 'Yuyeng'),
(37270, 1385, 'Bolbolo'),
(37271, 1385, 'Brookside'),
(37272, 1385, 'Ocup'),
(37273, 1385, 'Dalit'),
(37274, 1385, 'Dintan'),
(37275, 1385, 'Gapang'),
(37276, 1385, 'Kinabiti'),
(37277, 1385, 'Maliplipit'),
(37278, 1385, 'Nagcanasan'),
(37279, 1385, 'Nanangduan'),
(37280, 1385, 'Narnara'),
(37281, 1385, 'Pang-ot'),
(37282, 1385, 'Patad'),
(37283, 1385, 'Poblacion'),
(37284, 1385, 'San Juan East'),
(37285, 1385, 'San Juan West'),
(37286, 1385, 'South Balioag'),
(37287, 1385, 'Tikitik'),
(37288, 1385, 'Villavieja'),
(37289, 1386, 'Bazar'),
(37290, 1386, 'Bilabila'),
(37291, 1386, 'Gangal (Pob.)'),
(37292, 1386, 'Maguyepyep'),
(37293, 1386, 'Naguilian'),
(37294, 1386, 'Saccaang'),
(37295, 1386, 'Sallapadan'),
(37296, 1386, 'Subusob'),
(37297, 1386, 'Ud-udiao'),
(37298, 1387, 'Cabayogan'),
(37299, 1387, 'Dalimag'),
(37300, 1387, 'Langbaban'),
(37301, 1387, 'Manayday'),
(37302, 1387, 'Pantoc'),
(37303, 1387, 'Poblacion'),
(37304, 1387, 'Sabtan-olo'),
(37305, 1387, 'San Marcial'),
(37306, 1387, 'Tangbao'),
(37307, 1388, 'Abualan'),
(37308, 1388, 'Ba-ug'),
(37309, 1388, 'Badas'),
(37310, 1388, 'Cabcaborao'),
(37311, 1388, 'Colabaoan'),
(37312, 1388, 'Culiong'),
(37313, 1388, 'Daoidao'),
(37314, 1388, 'Guimba'),
(37315, 1388, 'Lam-ag'),
(37316, 1388, 'Lumobang'),
(37317, 1388, 'Nangobongan'),
(37318, 1388, 'Pattaoig'),
(37319, 1388, 'Poblacion North'),
(37320, 1388, 'Poblacion South'),
(37321, 1388, 'Quidaoen'),
(37322, 1388, 'Sabangan'),
(37323, 1388, 'Silet'),
(37324, 1388, 'Supi-il'),
(37325, 1388, 'Tagaytay'),
(37326, 1389, 'Labaan'),
(37327, 1389, 'Palang'),
(37328, 1389, 'Pantoc'),
(37329, 1389, 'Poblacion'),
(37330, 1389, 'Tangadan'),
(37331, 1389, 'Villa Mercedes'),
(37332, 1390, 'Bagalay'),
(37333, 1390, 'Basbasa'),
(37334, 1390, 'Budac'),
(37335, 1390, 'Bumagcat'),
(37336, 1390, 'Cabaroan'),
(37337, 1390, 'Deet'),
(37338, 1390, 'Gaddani'),
(37339, 1390, 'Patucannay'),
(37340, 1390, 'Pias'),
(37341, 1390, 'Poblacion'),
(37342, 1390, 'Velasco'),
(37343, 1391, 'Poblacion'),
(37344, 1391, 'Alaoa'),
(37345, 1391, 'Anayan'),
(37346, 1391, 'Apao'),
(37347, 1391, 'Belaat');
INSERT INTO `table_barangay` (`barangay_id`, `municipality_id`, `barangay_name`) VALUES
(37348, 1391, 'Caganayan'),
(37349, 1391, 'Cogon'),
(37350, 1391, 'Lanec'),
(37351, 1391, 'Lapat-Balantay'),
(37352, 1391, 'Naglibacan'),
(37353, 1392, 'Alangtin'),
(37354, 1392, 'Amtuagan'),
(37355, 1392, 'Dilong'),
(37356, 1392, 'Kili'),
(37357, 1392, 'Poblacion'),
(37358, 1392, 'Supo'),
(37359, 1392, 'Tiempo'),
(37360, 1392, 'Tubtuba'),
(37361, 1392, 'Wayangan'),
(37362, 1392, 'Tabacda'),
(37363, 1393, 'Ap-apaya'),
(37364, 1393, 'Bol-lilising'),
(37365, 1393, 'Cal-lao'),
(37366, 1393, 'Lap-lapog'),
(37367, 1393, 'Lumaba'),
(37368, 1393, 'Poblacion'),
(37369, 1393, 'Tamac'),
(37370, 1393, 'Tuquib'),
(37371, 1394, 'Abiang'),
(37372, 1394, 'Caliking'),
(37373, 1394, 'Cattubo'),
(37374, 1394, 'Naguey'),
(37375, 1394, 'Paoay'),
(37376, 1394, 'Pasdong'),
(37377, 1394, 'Poblacion'),
(37378, 1394, 'Topdac'),
(37379, 1395, 'Apugan-Loakan'),
(37380, 1395, 'Asin Road'),
(37381, 1395, 'Atok Trail'),
(37382, 1395, 'Bakakeng Central'),
(37383, 1395, 'Bakakeng North'),
(37384, 1395, 'Happy Hollow'),
(37385, 1395, 'Balsigan'),
(37386, 1395, 'Bayan Park West'),
(37387, 1395, 'Bayan Park East'),
(37388, 1395, 'Brookspoint'),
(37389, 1395, 'Brookside'),
(37390, 1395, 'Cabinet Hill-Teacher\'s Camp'),
(37391, 1395, 'Camp Allen'),
(37392, 1395, 'Camp 7'),
(37393, 1395, 'Camp 8'),
(37394, 1395, 'Campo Filipino'),
(37395, 1395, 'City Camp Central'),
(37396, 1395, 'City Camp Proper'),
(37397, 1395, 'Country Club Village'),
(37398, 1395, 'Cresencia Village'),
(37399, 1395, 'Dagsian, Upper'),
(37400, 1395, 'DPS Area'),
(37401, 1395, 'Dizon Subdivision'),
(37402, 1395, 'Quirino Hill, East'),
(37403, 1395, 'Engineers\' Hill'),
(37404, 1395, 'Fairview Village'),
(37405, 1395, 'Fort del Pilar'),
(37406, 1395, 'General Luna, Upper'),
(37407, 1395, 'General Luna, Lower'),
(37408, 1395, 'Gibraltar'),
(37409, 1395, 'Greenwater Village'),
(37410, 1395, 'Guisad Central'),
(37411, 1395, 'Guisad Sorong'),
(37412, 1395, 'Hillside'),
(37413, 1395, 'Holy Ghost Extension'),
(37414, 1395, 'Holy Ghost Proper'),
(37415, 1395, 'Imelda Village'),
(37416, 1395, 'Irisan'),
(37417, 1395, 'Kayang Extension'),
(37418, 1395, 'Kias'),
(37419, 1395, 'Kagitingan'),
(37420, 1395, 'Loakan Proper'),
(37421, 1395, 'Lopez Jaena'),
(37422, 1395, 'Lourdes Subdivision Extension'),
(37423, 1395, 'Dagsian, Lower'),
(37424, 1395, 'Lourdes Subdivision, Lower'),
(37425, 1395, 'Quirino Hill, Lower'),
(37426, 1395, 'General Emilio F. Aguinaldo'),
(37427, 1395, 'Lualhati'),
(37428, 1395, 'Lucnab'),
(37429, 1395, 'Magsaysay, Lower'),
(37430, 1395, 'Magsaysay Private Road'),
(37431, 1395, 'Aurora Hill Proper'),
(37432, 1395, 'Bal-Marcoville'),
(37433, 1395, 'Quirino Hill, Middle'),
(37434, 1395, 'Military Cut-off'),
(37435, 1395, 'Mines View Park'),
(37436, 1395, 'Modern Site, East'),
(37437, 1395, 'Modern Site, West'),
(37438, 1395, 'New Lucban'),
(37439, 1395, 'Aurora Hill, North Central'),
(37440, 1395, 'Sanitary Camp, North'),
(37441, 1395, 'Outlook Drive'),
(37442, 1395, 'Pacdal'),
(37443, 1395, 'Pinget'),
(37444, 1395, 'Pinsao Pilot Project'),
(37445, 1395, 'Pinsao Proper'),
(37446, 1395, 'Poliwes'),
(37447, 1395, 'Pucsusan'),
(37448, 1395, 'MRR-Queen Of Peace'),
(37449, 1395, 'Rock Quarry, Lower'),
(37450, 1395, 'Salud Mitra'),
(37451, 1395, 'San Antonio Village'),
(37452, 1395, 'San Luis Village'),
(37453, 1395, 'San Roque Village'),
(37454, 1395, 'San Vicente'),
(37455, 1395, 'Santa Escolastica'),
(37456, 1395, 'Santo Rosario'),
(37457, 1395, 'Santo Tomas School Area'),
(37458, 1395, 'Santo Tomas Proper'),
(37459, 1395, 'Scout Barrio'),
(37460, 1395, 'Session Road Area'),
(37461, 1395, 'Slaughter House Area'),
(37462, 1395, 'Sanitary Camp, South'),
(37463, 1395, 'Saint Joseph Village'),
(37464, 1395, 'Teodora Alonzo'),
(37465, 1395, 'Trancoville'),
(37466, 1395, 'Rock Quarry, Upper'),
(37467, 1395, 'Victoria Village'),
(37468, 1395, 'Quirino Hill, West'),
(37469, 1395, 'Andres Bonifacio'),
(37470, 1395, 'Legarda-Burnham-Kisad'),
(37471, 1395, 'Imelda R. Marcos'),
(37472, 1395, 'Lourdes Subdivision, Proper'),
(37473, 1395, 'Quirino-Magsaysay, Upper'),
(37474, 1395, 'A. Bonifacio-Caguioa-Rimando'),
(37475, 1395, 'Ambiong'),
(37476, 1395, 'Aurora Hill, South Central'),
(37477, 1395, 'Abanao-Zandueta-Kayong-Chugum-Otek'),
(37478, 1395, 'Bagong Lipunan'),
(37479, 1395, 'BGH Compound'),
(37480, 1395, 'Bayan Park Village'),
(37481, 1395, 'Camdas Subdivision'),
(37482, 1395, 'Palma-Urbano'),
(37483, 1395, 'Dominican Hill-Mirador'),
(37484, 1395, 'Alfonso Tabora'),
(37485, 1395, 'Dontogan'),
(37486, 1395, 'Ferdinand'),
(37487, 1395, 'Happy Homes'),
(37488, 1395, 'Harrison-Claudio Carantes'),
(37489, 1395, 'Honeymoon'),
(37490, 1395, 'Kabayanihan'),
(37491, 1395, 'Kayang-Hilltop'),
(37492, 1395, 'Gabriela Silang'),
(37493, 1395, 'Liwanag-Loakan'),
(37494, 1395, 'Malcolm Square-Perfecto'),
(37495, 1395, 'Manuel A. Roxas'),
(37496, 1395, 'Padre Burgos'),
(37497, 1395, 'Quezon Hill, Upper'),
(37498, 1395, 'Rock Quarry, Middle'),
(37499, 1395, 'Phil-Am'),
(37500, 1395, 'Quezon Hill Proper'),
(37501, 1395, 'Middle Quezon Hill Subdivision'),
(37502, 1395, 'Rizal Monument Area'),
(37503, 1395, 'SLU-SVP Housing Village'),
(37504, 1395, 'South Drive'),
(37505, 1395, 'Magsaysay, Upper'),
(37506, 1395, 'Market Subdivision, Upper'),
(37507, 1395, 'Padre Zamora'),
(37508, 1396, 'Ampusongan'),
(37509, 1396, 'Bagu'),
(37510, 1396, 'Dalipey'),
(37511, 1396, 'Gambang'),
(37512, 1396, 'Kayapa'),
(37513, 1396, 'Poblacion'),
(37514, 1396, 'Sinacbat'),
(37515, 1397, 'Ambuclao'),
(37516, 1397, 'Bila'),
(37517, 1397, 'Bobok-Bisal'),
(37518, 1397, 'Daclan'),
(37519, 1397, 'Ekip'),
(37520, 1397, 'Karao'),
(37521, 1397, 'Nawal'),
(37522, 1397, 'Pito'),
(37523, 1397, 'Poblacion'),
(37524, 1397, 'Tikey'),
(37525, 1398, 'Abatan'),
(37526, 1398, 'Amgaleyguey'),
(37527, 1398, 'Amlimay'),
(37528, 1398, 'Baculongan Norte'),
(37529, 1398, 'Bangao'),
(37530, 1398, 'Buyacaoan'),
(37531, 1398, 'Calamagan'),
(37532, 1398, 'Catlubong'),
(37533, 1398, 'Loo'),
(37534, 1398, 'Natubleng'),
(37535, 1398, 'Poblacion'),
(37536, 1398, 'Baculongan Sur'),
(37537, 1398, 'Lengaoan'),
(37538, 1398, 'Sebang'),
(37539, 1399, 'Ampucao'),
(37540, 1399, 'Dalupirip'),
(37541, 1399, 'Gumatdang'),
(37542, 1399, 'Loacan'),
(37543, 1399, 'Poblacion'),
(37544, 1399, 'Tinongdan'),
(37545, 1399, 'Tuding'),
(37546, 1399, 'Ucab'),
(37547, 1399, 'Virac'),
(37548, 1400, 'Adaoay'),
(37549, 1400, 'Anchukey'),
(37550, 1400, 'Ballay'),
(37551, 1400, 'Bashoy'),
(37552, 1400, 'Batan'),
(37553, 1400, 'Duacan'),
(37554, 1400, 'Eddet'),
(37555, 1400, 'Gusaran'),
(37556, 1400, 'Kabayan Barrio'),
(37557, 1400, 'Lusod'),
(37558, 1400, 'Pacso'),
(37559, 1400, 'Poblacion'),
(37560, 1400, 'Tawangan'),
(37561, 1401, 'Balakbak'),
(37562, 1401, 'Beleng-Belis'),
(37563, 1401, 'Boklaoan'),
(37564, 1401, 'Cayapes'),
(37565, 1401, 'Cuba'),
(37566, 1401, 'Datakan'),
(37567, 1401, 'Gadang'),
(37568, 1401, 'Gasweling'),
(37569, 1401, 'Labueg'),
(37570, 1401, 'Paykek'),
(37571, 1401, 'Poblacion Central'),
(37572, 1401, 'Pudong'),
(37573, 1401, 'Pongayan'),
(37574, 1401, 'Sagubo'),
(37575, 1401, 'Taba-ao'),
(37576, 1402, 'Badeo'),
(37577, 1402, 'Lubo'),
(37578, 1402, 'Madaymen'),
(37579, 1402, 'Palina'),
(37580, 1402, 'Poblacion'),
(37581, 1402, 'Sagpat'),
(37582, 1402, 'Tacadang'),
(37583, 1403, 'Alapang'),
(37584, 1403, 'Alno'),
(37585, 1403, 'Ambiong'),
(37586, 1403, 'Bahong'),
(37587, 1403, 'Balili'),
(37588, 1403, 'Beckel'),
(37589, 1403, 'Bineng'),
(37590, 1403, 'Betag'),
(37591, 1403, 'Cruz'),
(37592, 1403, 'Lubas'),
(37593, 1403, 'Pico'),
(37594, 1403, 'Poblacion'),
(37595, 1403, 'Puguis'),
(37596, 1403, 'Shilan'),
(37597, 1403, 'Tawang'),
(37598, 1403, 'Wangal'),
(37599, 1404, 'Balili'),
(37600, 1404, 'Bedbed'),
(37601, 1404, 'Bulalacao'),
(37602, 1404, 'Cabiten'),
(37603, 1404, 'Colalo'),
(37604, 1404, 'Guinaoang'),
(37605, 1404, 'Paco'),
(37606, 1404, 'Palasaan'),
(37607, 1404, 'Poblacion'),
(37608, 1404, 'Sapid'),
(37609, 1404, 'Tabio'),
(37610, 1404, 'Taneg'),
(37611, 1405, 'Bagong'),
(37612, 1405, 'Balluay'),
(37613, 1405, 'Banangan'),
(37614, 1405, 'Banengbeng'),
(37615, 1405, 'Bayabas'),
(37616, 1405, 'Kamog'),
(37617, 1405, 'Pappa'),
(37618, 1405, 'Poblacion'),
(37619, 1406, 'Ansagan'),
(37620, 1406, 'Camp One'),
(37621, 1406, 'Camp 3'),
(37622, 1406, 'Camp 4'),
(37623, 1406, 'Nangalisan'),
(37624, 1406, 'Poblacion'),
(37625, 1406, 'San Pascual'),
(37626, 1406, 'Tabaan Norte'),
(37627, 1406, 'Tabaan Sur'),
(37628, 1406, 'Tadiangan'),
(37629, 1406, 'Taloy Norte'),
(37630, 1406, 'Taloy Sur'),
(37631, 1406, 'Twin Peaks'),
(37632, 1407, 'Ambassador'),
(37633, 1407, 'Ambongdolan'),
(37634, 1407, 'Ba-ayan'),
(37635, 1407, 'Basil'),
(37636, 1407, 'Daclan'),
(37637, 1407, 'Caponga (Pob.)'),
(37638, 1407, 'Tublay Central'),
(37639, 1407, 'Tuel'),
(37640, 1408, 'Amganad'),
(37641, 1408, 'Anaba'),
(37642, 1408, 'Bangaan'),
(37643, 1408, 'Batad'),
(37644, 1408, 'Bocos'),
(37645, 1408, 'Banao'),
(37646, 1408, 'Cambulo'),
(37647, 1408, 'Ducligan'),
(37648, 1408, 'Gohang'),
(37649, 1408, 'Kinakin'),
(37650, 1408, 'Poblacion'),
(37651, 1408, 'Poitan'),
(37652, 1408, 'San Fernando'),
(37653, 1408, 'Balawis'),
(37654, 1408, 'Ohaj'),
(37655, 1408, 'Tam-an'),
(37656, 1408, 'View Point'),
(37657, 1408, 'Pula'),
(37658, 1409, 'Abatan'),
(37659, 1409, 'Bangbang'),
(37660, 1409, 'Maggok'),
(37661, 1409, 'Poblacion'),
(37662, 1409, 'Bokiawan'),
(37663, 1409, 'Hapao'),
(37664, 1409, 'Lubo-ong'),
(37665, 1409, 'Nungulunan'),
(37666, 1409, 'Ba-ang'),
(37667, 1410, 'Ambabag'),
(37668, 1410, 'Baguinge'),
(37669, 1410, 'Bokiawan'),
(37670, 1410, 'Dalligan'),
(37671, 1410, 'Duit'),
(37672, 1410, 'Hucab'),
(37673, 1410, 'Julongan'),
(37674, 1410, 'Lingay'),
(37675, 1410, 'Mungayang'),
(37676, 1410, 'Nagacadan'),
(37677, 1410, 'Pindongan'),
(37678, 1410, 'Poblacion'),
(37679, 1410, 'Tuplac'),
(37680, 1410, 'Bolog'),
(37681, 1411, 'Abinuan'),
(37682, 1411, 'Banga'),
(37683, 1411, 'Boliwong'),
(37684, 1411, 'Burnay'),
(37685, 1411, 'Buyabuyan'),
(37686, 1411, 'Caba'),
(37687, 1411, 'Cudog'),
(37688, 1411, 'Dulao'),
(37689, 1411, 'Jucbong'),
(37690, 1411, 'Luta'),
(37691, 1411, 'Montabiong'),
(37692, 1411, 'Olilicon'),
(37693, 1411, 'Poblacion South'),
(37694, 1411, 'Ponghal'),
(37695, 1411, 'Pullaan'),
(37696, 1411, 'Tungngod'),
(37697, 1411, 'Tupaya'),
(37698, 1411, 'Poblacion East'),
(37699, 1411, 'Poblacion North'),
(37700, 1411, 'Poblacion West'),
(37701, 1412, 'Ambasa'),
(37702, 1412, 'Hapid'),
(37703, 1412, 'Lawig'),
(37704, 1412, 'Lucban'),
(37705, 1412, 'Mabatobato'),
(37706, 1412, 'Magulon'),
(37707, 1412, 'Nayon'),
(37708, 1412, 'Panopdopan'),
(37709, 1412, 'Payawan'),
(37710, 1412, 'Pieza'),
(37711, 1412, 'Poblacion East'),
(37712, 1412, 'Pugol'),
(37713, 1412, 'Salamague'),
(37714, 1412, 'Bimpal'),
(37715, 1412, 'Holowon'),
(37716, 1412, 'Poblacion West'),
(37717, 1412, 'Sanafe'),
(37718, 1412, 'Umilag'),
(37719, 1413, 'Aduyongan'),
(37720, 1413, 'Alimit'),
(37721, 1413, 'Ayangan'),
(37722, 1413, 'Balangbang'),
(37723, 1413, 'Banao'),
(37724, 1413, 'Banhal'),
(37725, 1413, 'Bongan'),
(37726, 1413, 'Buninan'),
(37727, 1413, 'Chaya'),
(37728, 1413, 'Chumang'),
(37729, 1413, 'Guinihon'),
(37730, 1413, 'Inwaloy'),
(37731, 1413, 'Langayan'),
(37732, 1413, 'Liwo'),
(37733, 1413, 'Maga'),
(37734, 1413, 'Magulon'),
(37735, 1413, 'Mapawoy'),
(37736, 1413, 'Mayoyao Proper'),
(37737, 1413, 'Mongol'),
(37738, 1413, 'Nalbu'),
(37739, 1413, 'Nattum'),
(37740, 1413, 'Palaad'),
(37741, 1413, 'Poblacion'),
(37742, 1413, 'Talboc'),
(37743, 1413, 'Tulaed'),
(37744, 1413, 'Bato-Alatbang'),
(37745, 1413, 'Epeng'),
(37746, 1414, 'Bangar'),
(37747, 1414, 'Busilac'),
(37748, 1414, 'Calimag'),
(37749, 1414, 'Calupaan'),
(37750, 1414, 'Caragasan'),
(37751, 1414, 'Dolowog'),
(37752, 1414, 'Kiling'),
(37753, 1414, 'Namnama'),
(37754, 1414, 'Namillangan'),
(37755, 1414, 'Pinto'),
(37756, 1414, 'Poblacion'),
(37757, 1414, 'San Jose'),
(37758, 1414, 'San Juan'),
(37759, 1414, 'San Marcos'),
(37760, 1414, 'San Quintin'),
(37761, 1414, 'Santa Maria'),
(37762, 1414, 'Santo Domingo'),
(37763, 1414, 'Little Tadian'),
(37764, 1414, 'Ngileb'),
(37765, 1414, 'Laya'),
(37766, 1415, 'Awayan'),
(37767, 1415, 'Bunhian'),
(37768, 1415, 'Butac'),
(37769, 1415, 'Chalalo'),
(37770, 1415, 'Damag'),
(37771, 1415, 'Galonogon'),
(37772, 1415, 'Halag'),
(37773, 1415, 'Itab'),
(37774, 1415, 'Jacmal'),
(37775, 1415, 'Majlong'),
(37776, 1415, 'Mongayang'),
(37777, 1415, 'Posnaan'),
(37778, 1415, 'Ta-ang'),
(37779, 1415, 'Talite'),
(37780, 1415, 'Ubao'),
(37781, 1415, 'Buwag'),
(37782, 1416, 'Anao'),
(37783, 1416, 'Bangtinon'),
(37784, 1416, 'Bitu'),
(37785, 1416, 'Cababuyan'),
(37786, 1416, 'Mompolia'),
(37787, 1416, 'Namulditan'),
(37788, 1416, 'O-ong'),
(37789, 1416, 'Piwong'),
(37790, 1416, 'Poblacion'),
(37791, 1416, 'Ubuag'),
(37792, 1416, 'Umalbong'),
(37793, 1416, 'Northern Cababuyan'),
(37794, 1417, 'Ahin'),
(37795, 1417, 'Ap-apid'),
(37796, 1417, 'Binablayan'),
(37797, 1417, 'Danggo'),
(37798, 1417, 'Eheb'),
(37799, 1417, 'Gumhang'),
(37800, 1417, 'Impugong'),
(37801, 1417, 'Luhong'),
(37802, 1417, 'Tinoc'),
(37803, 1417, 'Tukucan'),
(37804, 1417, 'Tulludan'),
(37805, 1417, 'Wangwang'),
(37806, 1418, 'Amduntog'),
(37807, 1418, 'Antipolo'),
(37808, 1418, 'Camandag'),
(37809, 1418, 'Cawayan'),
(37810, 1418, 'Hallap'),
(37811, 1418, 'Namal'),
(37812, 1418, 'Nungawa'),
(37813, 1418, 'Panubtuban'),
(37814, 1418, 'Pula'),
(37815, 1418, 'Liwon'),
(37816, 1419, 'Ababa-an'),
(37817, 1419, 'Balantoy'),
(37818, 1419, 'Balbalan Proper'),
(37819, 1419, 'Balbalasang'),
(37820, 1419, 'Buaya'),
(37821, 1419, 'Dao-angan'),
(37822, 1419, 'Gawa-an'),
(37823, 1419, 'Mabaca'),
(37824, 1419, 'Maling'),
(37825, 1419, 'Pantikian'),
(37826, 1419, 'Poswoy'),
(37827, 1419, 'Poblacion'),
(37828, 1419, 'Talalang'),
(37829, 1419, 'Tawang'),
(37830, 1420, 'Dangoy'),
(37831, 1420, 'Mabilong'),
(37832, 1420, 'Mabongtot'),
(37833, 1420, 'Poblacion'),
(37834, 1420, 'Tanglag'),
(37835, 1420, 'Lower Uma'),
(37836, 1420, 'Upper Uma'),
(37837, 1420, 'Antonio Canao'),
(37838, 1420, 'Uma del Norte'),
(37839, 1421, 'Ableg'),
(37840, 1421, 'Balatoc'),
(37841, 1421, 'Balinciagao Norte'),
(37842, 1421, 'Cagaluan'),
(37843, 1421, 'Colayo'),
(37844, 1421, 'Dalupa'),
(37845, 1421, 'Dangtalan'),
(37846, 1421, 'Galdang'),
(37847, 1421, 'Guina-ang (Pob.)'),
(37848, 1421, 'Magsilay'),
(37849, 1421, 'Malucsad'),
(37850, 1421, 'Pugong'),
(37851, 1421, 'Balenciagao Sur'),
(37852, 1421, 'Bagtayan'),
(37853, 1422, 'Aciga'),
(37854, 1422, 'Allaguia'),
(37855, 1422, 'Ammacian'),
(37856, 1422, 'Apatan'),
(37857, 1422, 'Ba-ay'),
(37858, 1422, 'Ballayangon'),
(37859, 1422, 'Bayao'),
(37860, 1422, 'Wagud'),
(37861, 1422, 'Camalog'),
(37862, 1422, 'Katabbogan'),
(37863, 1422, 'Dugpa'),
(37864, 1422, 'Cawagayan'),
(37865, 1422, 'Asibanglan'),
(37866, 1422, 'Limos'),
(37867, 1422, 'Magaogao'),
(37868, 1422, 'Malagnat'),
(37869, 1422, 'Mapaco'),
(37870, 1422, 'Pakawit'),
(37871, 1422, 'Pinukpuk Junction'),
(37872, 1422, 'Socbot'),
(37873, 1422, 'Taga (Pob.)'),
(37874, 1422, 'Pinococ'),
(37875, 1422, 'Taggay'),
(37876, 1423, 'Babalag East (Pob.)'),
(37877, 1423, 'Calaocan'),
(37878, 1423, 'Kinama'),
(37879, 1423, 'Liwan East'),
(37880, 1423, 'Liwan West'),
(37881, 1423, 'Macutay'),
(37882, 1423, 'San Pascual'),
(37883, 1423, 'San Quintin'),
(37884, 1423, 'Santor'),
(37885, 1423, 'Babalag West (Pob.)'),
(37886, 1423, 'Bulbol'),
(37887, 1423, 'Romualdez'),
(37888, 1423, 'San Francisco'),
(37889, 1423, 'San Pedro'),
(37890, 1424, 'Agbannawag'),
(37891, 1424, 'Amlao'),
(37892, 1424, 'Appas'),
(37893, 1424, 'Bagumbayan'),
(37894, 1424, 'Balawag'),
(37895, 1424, 'Balong'),
(37896, 1424, 'Bantay'),
(37897, 1424, 'Bulanao'),
(37898, 1424, 'Cabaritan'),
(37899, 1424, 'Cabaruan'),
(37900, 1424, 'Calaccad'),
(37901, 1424, 'Calanan'),
(37902, 1424, 'Dilag'),
(37903, 1424, 'Dupag'),
(37904, 1424, 'Gobgob'),
(37905, 1424, 'Guilayon'),
(37906, 1424, 'Lanna'),
(37907, 1424, 'Laya East'),
(37908, 1424, 'Laya West'),
(37909, 1424, 'Lucog'),
(37910, 1424, 'Magnao'),
(37911, 1424, 'Magsaysay'),
(37912, 1424, 'Malalao'),
(37913, 1424, 'Masablang'),
(37914, 1424, 'Nambaran'),
(37915, 1424, 'Nambucayan'),
(37916, 1424, 'Naneng'),
(37917, 1424, 'Dagupan Centro (Pob.)'),
(37918, 1424, 'San Juan'),
(37919, 1424, 'Suyang'),
(37920, 1424, 'Tuga'),
(37921, 1424, 'Bado Dangwa'),
(37922, 1424, 'Bulo'),
(37923, 1424, 'Casigayan'),
(37924, 1424, 'Cudal'),
(37925, 1424, 'Dagupan Weste'),
(37926, 1424, 'Lacnog'),
(37927, 1424, 'Malin-awa'),
(37928, 1424, 'New Tanglag'),
(37929, 1424, 'San Julian'),
(37930, 1424, 'Bulanao Norte'),
(37931, 1424, 'Ipil'),
(37932, 1424, 'Lacnog West'),
(37933, 1425, 'Anggacan'),
(37934, 1425, 'Babbanoy'),
(37935, 1425, 'Dacalan'),
(37936, 1425, 'Gaang'),
(37937, 1425, 'Lower Mangali'),
(37938, 1425, 'Lower Taloctoc'),
(37939, 1425, 'Lower Lubo'),
(37940, 1425, 'Upper Lubo'),
(37941, 1425, 'Mabaca'),
(37942, 1425, 'Pangol'),
(37943, 1425, 'Poblacion'),
(37944, 1425, 'Upper Taloctoc'),
(37945, 1425, 'Anggacan Sur'),
(37946, 1425, 'Dupligan'),
(37947, 1425, 'Lay-asan'),
(37948, 1425, 'Mangali Centro'),
(37949, 1426, 'Ambato Legleg'),
(37950, 1426, 'Bangad Centro'),
(37951, 1426, 'Basao'),
(37952, 1426, 'Belong Manubal'),
(37953, 1426, 'Butbut'),
(37954, 1426, 'Bugnay'),
(37955, 1426, 'Buscalan'),
(37956, 1426, 'Dananao'),
(37957, 1426, 'Loccong'),
(37958, 1426, 'Luplupa'),
(37959, 1426, 'Mallango'),
(37960, 1426, 'Poblacion'),
(37961, 1426, 'Sumadel 1'),
(37962, 1426, 'Sumadel 2'),
(37963, 1426, 'Tulgao East'),
(37964, 1426, 'Tulgao West'),
(37965, 1426, 'Upper Bangad'),
(37966, 1426, 'Ngibat'),
(37967, 1426, 'Old Tinglayan'),
(37968, 1426, 'Lower Bangad'),
(37969, 1427, 'Chupac'),
(37970, 1427, 'Fiangtin'),
(37971, 1427, 'Kaleo'),
(37972, 1427, 'Latang'),
(37973, 1427, 'Lias Kanluran'),
(37974, 1427, 'Lingoy'),
(37975, 1427, 'Lunas'),
(37976, 1427, 'Macalana'),
(37977, 1427, 'Ogoog'),
(37978, 1427, 'Gawana (Pob.)'),
(37979, 1427, 'Lias Silangan'),
(37980, 1428, 'Abatan'),
(37981, 1428, 'Bagnen Oriente'),
(37982, 1428, 'Bagnen Proper'),
(37983, 1428, 'Balintaugan'),
(37984, 1428, 'Banao'),
(37985, 1428, 'Bila'),
(37986, 1428, 'Guinzadan Central'),
(37987, 1428, 'Guinzadan Norte'),
(37988, 1428, 'Guinzadan Sur'),
(37989, 1428, 'Lagawa'),
(37990, 1428, 'Leseb'),
(37991, 1428, 'Mabaay'),
(37992, 1428, 'Mayag'),
(37993, 1428, 'Monamon Norte'),
(37994, 1428, 'Monamon Sur'),
(37995, 1428, 'Mount Data'),
(37996, 1428, 'Otucan Norte'),
(37997, 1428, 'Otucan Sur'),
(37998, 1428, 'Poblacion'),
(37999, 1428, 'Sadsadan'),
(38000, 1428, 'Sinto'),
(38001, 1428, 'Tapapan'),
(38002, 1429, 'Agawa'),
(38003, 1429, 'Ambaguio'),
(38004, 1429, 'Banguitan'),
(38005, 1429, 'Besao East'),
(38006, 1429, 'Besao West'),
(38007, 1429, 'Catengan'),
(38008, 1429, 'Gueday'),
(38009, 1429, 'Lacmaan'),
(38010, 1429, 'Laylaya'),
(38011, 1429, 'Padangan'),
(38012, 1429, 'Payeo'),
(38013, 1429, 'Suquib'),
(38014, 1429, 'Tamboan'),
(38015, 1429, 'Kin-iway (Pob.)'),
(38016, 1430, 'Alab Proper'),
(38017, 1430, 'Alab Oriente'),
(38018, 1430, 'Balili'),
(38019, 1430, 'Bayyo'),
(38020, 1430, 'Bontoc Ili'),
(38021, 1430, 'Caneo'),
(38022, 1430, 'Dalican'),
(38023, 1430, 'Gonogon'),
(38024, 1430, 'Guinaang'),
(38025, 1430, 'Mainit'),
(38026, 1430, 'Maligcong'),
(38027, 1430, 'Samoki'),
(38028, 1430, 'Talubin'),
(38029, 1430, 'Tocucan'),
(38030, 1430, 'Poblacion'),
(38031, 1430, 'Calutit'),
(38032, 1431, 'Alunogan'),
(38033, 1431, 'Balangao'),
(38034, 1431, 'Banao'),
(38035, 1431, 'Banawal'),
(38036, 1431, 'Butac'),
(38037, 1431, 'Maducayan'),
(38038, 1431, 'Poblacion'),
(38039, 1431, 'Saliok'),
(38040, 1431, 'Santa Isabel'),
(38041, 1431, 'Tonglayan'),
(38042, 1431, 'Pudo'),
(38043, 1432, 'Anonat'),
(38044, 1432, 'Bacarni'),
(38045, 1432, 'Bananao'),
(38046, 1432, 'Bantay'),
(38047, 1432, 'Butigue'),
(38048, 1432, 'Bunot'),
(38049, 1432, 'Buringal'),
(38050, 1432, 'Palitod'),
(38051, 1432, 'Poblacion'),
(38052, 1433, 'Bao-angan'),
(38053, 1433, 'Bun-ayan'),
(38054, 1433, 'Busa'),
(38055, 1433, 'Camatagan'),
(38056, 1433, 'Capinitan'),
(38057, 1433, 'Data'),
(38058, 1433, 'Gayang'),
(38059, 1433, 'Lagan'),
(38060, 1433, 'Losad'),
(38061, 1433, 'Namatec'),
(38062, 1433, 'Napua'),
(38063, 1433, 'Pingad'),
(38064, 1433, 'Poblacion'),
(38065, 1433, 'Supang'),
(38066, 1433, 'Tambingan'),
(38067, 1434, 'Anabel'),
(38068, 1434, 'Belwang'),
(38069, 1434, 'Betwagan'),
(38070, 1434, 'Bekigan'),
(38071, 1434, 'Poblacion'),
(38072, 1434, 'Sacasacan'),
(38073, 1434, 'Saclit'),
(38074, 1434, 'Demang'),
(38075, 1435, 'Aguid'),
(38076, 1435, 'Tetepan Sur'),
(38077, 1435, 'Ambasing'),
(38078, 1435, 'Angkeling'),
(38079, 1435, 'Antadao'),
(38080, 1435, 'Balugan'),
(38081, 1435, 'Bangaan'),
(38082, 1435, 'Dagdag (Pob.)'),
(38083, 1435, 'Demang (Pob.)'),
(38084, 1435, 'Fidelisan'),
(38085, 1435, 'Kilong'),
(38086, 1435, 'Madongo'),
(38087, 1435, 'Poblacion'),
(38088, 1435, 'Pide'),
(38089, 1435, 'Nacagang'),
(38090, 1435, 'Suyo'),
(38091, 1435, 'Taccong'),
(38092, 1435, 'Tanulong'),
(38093, 1435, 'Tetepan Norte'),
(38094, 1436, 'Balaoa'),
(38095, 1436, 'Banaao'),
(38096, 1436, 'Bantey'),
(38097, 1436, 'Batayan'),
(38098, 1436, 'Bunga'),
(38099, 1436, 'Cadad-anan'),
(38100, 1436, 'Cagubatan'),
(38101, 1436, 'Duagan'),
(38102, 1436, 'Dacudac'),
(38103, 1436, 'Kayan East'),
(38104, 1436, 'Lenga'),
(38105, 1436, 'Lubon'),
(38106, 1436, 'Mabalite'),
(38107, 1436, 'Masla'),
(38108, 1436, 'Pandayan'),
(38109, 1436, 'Poblacion'),
(38110, 1436, 'Sumadel'),
(38111, 1436, 'Tue'),
(38112, 1436, 'Kayan West'),
(38113, 1437, 'Butao'),
(38114, 1437, 'Cadaclan'),
(38115, 1437, 'Langnao'),
(38116, 1437, 'Lubong'),
(38117, 1437, 'Naguilian'),
(38118, 1437, 'Namaltugan'),
(38119, 1437, 'Poblacion'),
(38120, 1437, 'Sabangan'),
(38121, 1437, 'Santa Filomena'),
(38122, 1437, 'Tubongan'),
(38123, 1437, 'Tanglagan'),
(38124, 1437, 'Tubang'),
(38125, 1437, 'Don Roque Ablan Sr.'),
(38126, 1437, 'Eleazar'),
(38127, 1437, 'Eva Puzon'),
(38128, 1437, 'Kabugawan'),
(38129, 1437, 'Macalino'),
(38130, 1437, 'Santa Elena'),
(38131, 1438, 'Allangigan'),
(38132, 1438, 'Buluan'),
(38133, 1438, 'Caglayan'),
(38134, 1438, 'Calafug'),
(38135, 1438, 'Cupis'),
(38136, 1438, 'Daga'),
(38137, 1438, 'Guinamgaman'),
(38138, 1438, 'Karikitan'),
(38139, 1438, 'Katablangan'),
(38140, 1438, 'Malama'),
(38141, 1438, 'Manag'),
(38142, 1438, 'Nabuangan'),
(38143, 1438, 'Paddaoan'),
(38144, 1438, 'Puguin'),
(38145, 1438, 'Ripang'),
(38146, 1438, 'Sacpil'),
(38147, 1438, 'Talifugo'),
(38148, 1438, 'Banban'),
(38149, 1438, 'Guinaang'),
(38150, 1438, 'Ili'),
(38151, 1438, 'Mawegui'),
(38152, 1439, 'Allig'),
(38153, 1439, 'Anninipan'),
(38154, 1439, 'Atok'),
(38155, 1439, 'Bagutong'),
(38156, 1439, 'Balasi'),
(38157, 1439, 'Balluyan'),
(38158, 1439, 'Malayugan'),
(38159, 1439, 'Malubibit Norte'),
(38160, 1439, 'Poblacion East'),
(38161, 1439, 'Tamalunog'),
(38162, 1439, 'Mallig'),
(38163, 1439, 'Malubibit Sur'),
(38164, 1439, 'Poblacion West'),
(38165, 1439, 'San Jose'),
(38166, 1439, 'Santa Maria'),
(38167, 1439, 'Upper Atok'),
(38168, 1440, 'Badduat'),
(38169, 1440, 'Baliwanan'),
(38170, 1440, 'Bulu'),
(38171, 1440, 'Dagara'),
(38172, 1440, 'Dibagat'),
(38173, 1440, 'Cabetayan'),
(38174, 1440, 'Karagawan'),
(38175, 1440, 'Kumao'),
(38176, 1440, 'Laco'),
(38177, 1440, 'Lenneng'),
(38178, 1440, 'Lucab'),
(38179, 1440, 'Luttuacan'),
(38180, 1440, 'Madatag'),
(38181, 1440, 'Madduang'),
(38182, 1440, 'Magabta'),
(38183, 1440, 'Maragat'),
(38184, 1440, 'Musimut'),
(38185, 1440, 'Nagbabalayan'),
(38186, 1440, 'Poblacion'),
(38187, 1440, 'Tuyangan'),
(38188, 1440, 'Waga'),
(38189, 1441, 'Bacsay'),
(38190, 1441, 'Capagaypayan'),
(38191, 1441, 'Dagupan'),
(38192, 1441, 'Lappa'),
(38193, 1441, 'Marag'),
(38194, 1441, 'Poblacion'),
(38195, 1441, 'Quirino'),
(38196, 1441, 'Salvacion'),
(38197, 1441, 'San Francisco'),
(38198, 1441, 'San Isidro Norte'),
(38199, 1441, 'San Sebastian'),
(38200, 1441, 'Santa Lina'),
(38201, 1441, 'Tumog'),
(38202, 1441, 'Zumigui'),
(38203, 1441, 'Cagandungan'),
(38204, 1441, 'Calabigan'),
(38205, 1441, 'Cangisitan'),
(38206, 1441, 'Luyon'),
(38207, 1441, 'San Gregorio'),
(38208, 1441, 'San Isidro Sur'),
(38209, 1441, 'Shalom'),
(38210, 1441, 'Turod'),
(38211, 1442, 'Aga'),
(38212, 1442, 'Alem'),
(38213, 1442, 'Cabatacan'),
(38214, 1442, 'Cacalaggan'),
(38215, 1442, 'Capannikian'),
(38216, 1442, 'Lower Maton'),
(38217, 1442, 'Malibang'),
(38218, 1442, 'Mataguisi'),
(38219, 1442, 'Poblacion'),
(38220, 1442, 'San Antonio'),
(38221, 1442, 'Swan'),
(38222, 1442, 'Upper Maton'),
(38223, 1442, 'Amado'),
(38224, 1442, 'Aurora'),
(38225, 1442, 'Doña Loreta'),
(38226, 1442, 'Emilia'),
(38227, 1442, 'Imelda'),
(38228, 1442, 'Lt. Balag'),
(38229, 1442, 'Lydia'),
(38230, 1442, 'San Jose'),
(38231, 1442, 'San Luis'),
(38232, 1442, 'San Mariano'),
(38233, 1443, 'Barocboc'),
(38234, 1443, 'Consuelo'),
(38235, 1443, 'Imelda'),
(38236, 1443, 'Malekkeg'),
(38237, 1443, 'Marcela (Pob.)'),
(38238, 1443, 'Nueva'),
(38239, 1443, 'Panay'),
(38240, 1443, 'San Antonio'),
(38241, 1443, 'Sipa Proper'),
(38242, 1443, 'Emiliana'),
(38243, 1443, 'San Carlos'),
(38244, 1443, 'San Juan'),
(38245, 1443, 'San Mariano'),
(38246, 1444, 'Arco'),
(38247, 1444, 'Ba-as'),
(38248, 1444, 'Baimbing'),
(38249, 1444, 'Balagtasan'),
(38250, 1444, 'Balas'),
(38251, 1444, 'Balobo'),
(38252, 1444, 'Bato'),
(38253, 1444, 'Boheyakan'),
(38254, 1444, 'Buahan'),
(38255, 1444, 'Boheibu'),
(38256, 1444, 'Bohesapa'),
(38257, 1444, 'Bulingan'),
(38258, 1444, 'Cabobo'),
(38259, 1444, 'Campo Uno'),
(38260, 1444, 'Colonia'),
(38261, 1444, 'Calugusan'),
(38262, 1444, 'Kulay Bato'),
(38263, 1444, 'Limo-ok'),
(38264, 1444, 'Lo-ok'),
(38265, 1444, 'Lumuton'),
(38266, 1444, 'Luksumbang'),
(38267, 1444, 'Malo-ong Canal'),
(38268, 1444, 'Malo-ong San Jose'),
(38269, 1444, 'Parangbasak'),
(38270, 1444, 'Santa Clara'),
(38271, 1444, 'Tandong Ahas'),
(38272, 1444, 'Tumakid'),
(38273, 1444, 'Ubit'),
(38274, 1444, 'Bohebessey'),
(38275, 1444, 'Baungos'),
(38276, 1444, 'Danit-Puntocan'),
(38277, 1444, 'Sabong'),
(38278, 1444, 'Sengal'),
(38279, 1444, 'Ulame'),
(38280, 1444, 'Bohenange'),
(38281, 1444, 'Boheyawas'),
(38282, 1444, 'Bulanting'),
(38283, 1444, 'Lebbuh'),
(38284, 1444, 'Maganda'),
(38285, 1444, 'Malakas'),
(38286, 1444, 'Maligaya'),
(38287, 1444, 'Malinis (Pob.)'),
(38288, 1444, 'Matatag'),
(38289, 1444, 'Matibay'),
(38290, 1444, 'Simbangon'),
(38291, 1445, 'Atong-atong'),
(38292, 1445, 'Baungis'),
(38293, 1445, 'Bulanza'),
(38294, 1445, 'Lantawan Proper (Pob.)'),
(38295, 1445, 'Lower Manggas'),
(38296, 1445, 'Matarling'),
(38297, 1445, 'Matikang'),
(38298, 1445, 'Tairan'),
(38299, 1445, 'Upper Manggas'),
(38300, 1445, 'Bagbagon'),
(38301, 1445, 'Bulan-bulan'),
(38302, 1445, 'Suba-an'),
(38303, 1445, 'Lower Bañas'),
(38304, 1445, 'Upper Bañas'),
(38305, 1445, 'Calugusan'),
(38306, 1445, 'Canibungan'),
(38307, 1445, 'Landugan'),
(38308, 1445, 'Lawila'),
(38309, 1445, 'Lawi-lawi'),
(38310, 1445, 'Pamucalin'),
(38311, 1445, 'Switch Yakal'),
(38312, 1445, 'Paniongan'),
(38313, 1445, 'Luuk-Maluha'),
(38314, 1445, 'Calayan'),
(38315, 1445, 'Parian-Baunoh'),
(38316, 1446, 'Abong-Abong'),
(38317, 1446, 'Batungal'),
(38318, 1446, 'Calang Canas'),
(38319, 1446, 'Guanan North'),
(38320, 1446, 'Guanan South'),
(38321, 1446, 'Limbubong'),
(38322, 1446, 'Mahayahay Lower'),
(38323, 1446, 'Muslim Area'),
(38324, 1446, 'Port Holland Zone I Pob.'),
(38325, 1446, 'Port Holland Zone II Pob.'),
(38326, 1446, 'Port Holland Zone III Pob.'),
(38327, 1446, 'Port Holland Zone IV'),
(38328, 1446, 'Townsite (Pob.)'),
(38329, 1446, 'Taberlongan'),
(38330, 1446, 'Fuente Maluso'),
(38331, 1446, 'Tamuk'),
(38332, 1446, 'Tubigan'),
(38333, 1446, 'Mahayahay Upper'),
(38334, 1446, 'Port Holland Zone V'),
(38335, 1446, 'Upper Garlayan'),
(38336, 1447, 'Bacung'),
(38337, 1447, 'Benembengan Lower'),
(38338, 1447, 'Buli-buli'),
(38339, 1447, 'Cabcaban'),
(38340, 1447, 'Guiong'),
(38341, 1447, 'Manaul'),
(38342, 1447, 'Mangal (Pob.)'),
(38343, 1447, 'Sumisip Central'),
(38344, 1447, 'Tumahubong'),
(38345, 1447, 'Libug'),
(38346, 1447, 'Tongsengal'),
(38347, 1447, 'Baiwas'),
(38348, 1447, 'Basak'),
(38349, 1447, 'Cabengbeng Lower'),
(38350, 1447, 'Cabengbeng Upper'),
(38351, 1447, 'Luuk-Bait'),
(38352, 1447, 'Mahatalang'),
(38353, 1447, 'Benembengan Upper'),
(38354, 1447, 'Bohe-languyan'),
(38355, 1447, 'Ettub-ettub'),
(38356, 1447, 'Kaum-Air'),
(38357, 1447, 'Limbocandis'),
(38358, 1447, 'Lukketon'),
(38359, 1447, 'Marang'),
(38360, 1447, 'Mebak'),
(38361, 1447, 'Sahaya Bohe Bato'),
(38362, 1447, 'Sapah Bulak'),
(38363, 1447, 'Tikus'),
(38364, 1447, 'Kaumpamatsakem'),
(38365, 1448, 'Badja'),
(38366, 1448, 'Bohebaca'),
(38367, 1448, 'Bohelebung'),
(38368, 1448, 'Lagayas'),
(38369, 1448, 'Limbo-Upas'),
(38370, 1448, 'Tipo-tipo Proper (Pob.)'),
(38371, 1448, 'Baguindan'),
(38372, 1448, 'Banah'),
(38373, 1448, 'Bohe-Tambak'),
(38374, 1448, 'Silangkum'),
(38375, 1448, 'Bangcuang'),
(38376, 1449, 'Lahi-lahi'),
(38377, 1449, 'Sinulatan'),
(38378, 1449, 'Bohetambis'),
(38379, 1449, 'Duga-a'),
(38380, 1449, 'Mahawid'),
(38381, 1449, 'Lower Sinangkapan'),
(38382, 1449, 'Tablas Usew'),
(38383, 1449, 'Calut'),
(38384, 1449, 'Katipunan'),
(38385, 1449, 'Lower Tablas'),
(38386, 1450, 'Caddayan'),
(38387, 1450, 'Linongan'),
(38388, 1450, 'Lower Bato-bato'),
(38389, 1450, 'Mangalut'),
(38390, 1450, 'Manguso'),
(38391, 1450, 'Paguengan'),
(38392, 1450, 'Semut'),
(38393, 1450, 'Upper Bato-bato'),
(38394, 1450, 'Upper Sinangkapan'),
(38395, 1451, 'Apil-apil'),
(38396, 1451, 'Bato-bato'),
(38397, 1451, 'Bohe-Piang'),
(38398, 1451, 'Bucalao'),
(38399, 1451, 'Cambug'),
(38400, 1451, 'Danapah'),
(38401, 1451, 'Guinanta'),
(38402, 1451, 'Kailih'),
(38403, 1451, 'Kinukutan'),
(38404, 1451, 'Kuhon'),
(38405, 1451, 'Kuhon Lennuh'),
(38406, 1451, 'Linuan'),
(38407, 1451, 'Lookbisaya'),
(38408, 1451, 'Macalang'),
(38409, 1451, 'Magcawa'),
(38410, 1451, 'Sangkahan'),
(38411, 1452, 'Basakan'),
(38412, 1452, 'Buton'),
(38413, 1452, 'Candiis'),
(38414, 1452, 'Langil'),
(38415, 1452, 'Langong'),
(38416, 1452, 'Languyan'),
(38417, 1452, 'Pintasan'),
(38418, 1452, 'Seronggon'),
(38419, 1452, 'Sibago'),
(38420, 1452, 'Sulutan Matangal'),
(38421, 1452, 'Tuburan Proper (Pob.)'),
(38422, 1453, 'Amaloy'),
(38423, 1453, 'Bohe-Pahuh'),
(38424, 1453, 'Bohe-Suyak'),
(38425, 1453, 'Cabangalan'),
(38426, 1453, 'Danit'),
(38427, 1453, 'Kamamburingan'),
(38428, 1453, 'Matata'),
(38429, 1453, 'Materling'),
(38430, 1453, 'Pipil'),
(38431, 1453, 'Sungkayut'),
(38432, 1453, 'Tongbato'),
(38433, 1453, 'Ulitan'),
(38434, 1454, 'Baluk-baluk'),
(38435, 1454, 'Dasalan'),
(38436, 1454, 'Lubukan'),
(38437, 1454, 'Luukbongsod'),
(38438, 1454, 'Mananggal'),
(38439, 1454, 'Palahangan'),
(38440, 1454, 'Panducan'),
(38441, 1454, 'Sangbay Big'),
(38442, 1454, 'Sangbay Small'),
(38443, 1454, 'Tausan'),
(38444, 1455, 'Babag'),
(38445, 1455, 'Balanting'),
(38446, 1455, 'Boloh-boloh'),
(38447, 1455, 'Bukut-Umus'),
(38448, 1455, 'Kaumpurnah'),
(38449, 1455, 'Lanawan'),
(38450, 1455, 'Pisak-pisak'),
(38451, 1455, 'Saluping'),
(38452, 1455, 'Suligan'),
(38453, 1455, 'Sulloh'),
(38454, 1455, 'Tambulig Buton'),
(38455, 1455, 'Tong-Umus'),
(38456, 1456, 'Ampao'),
(38457, 1456, 'Bagoaingud'),
(38458, 1456, 'Balut'),
(38459, 1456, 'Barua'),
(38460, 1456, 'Buadiawani'),
(38461, 1456, 'Bubong'),
(38462, 1456, 'Dilabayan'),
(38463, 1456, 'Dipatuan'),
(38464, 1456, 'Daramoyod'),
(38465, 1456, 'Gandamato'),
(38466, 1456, 'Gurain'),
(38467, 1456, 'Ilian'),
(38468, 1456, 'Lama'),
(38469, 1456, 'Liawao'),
(38470, 1456, 'Lumbaca-Ingud'),
(38471, 1456, 'Madanding'),
(38472, 1456, 'Orong'),
(38473, 1456, 'Pindolonan'),
(38474, 1456, 'Poblacion I'),
(38475, 1456, 'Poblacion II'),
(38476, 1456, 'Raya'),
(38477, 1456, 'Rorowan'),
(38478, 1456, 'Sugod'),
(38479, 1456, 'Tambo'),
(38480, 1456, 'Tuka I'),
(38481, 1456, 'Tuka II'),
(38482, 1457, 'Banago'),
(38483, 1457, 'Barorao'),
(38484, 1457, 'Batuan'),
(38485, 1457, 'Budas'),
(38486, 1457, 'Calilangan'),
(38487, 1457, 'Igabay'),
(38488, 1457, 'Lalabuan'),
(38489, 1457, 'Magulalung Occidental'),
(38490, 1457, 'Magulalung Oriental'),
(38491, 1457, 'Molimoc'),
(38492, 1457, 'Narra'),
(38493, 1457, 'Plasan'),
(38494, 1457, 'Purakan'),
(38495, 1457, 'Buisan'),
(38496, 1457, 'Buenavista'),
(38497, 1457, 'Lorenzo'),
(38498, 1457, 'Lower Itil'),
(38499, 1457, 'Macao'),
(38500, 1457, 'Poblacion'),
(38501, 1457, 'Upper Itil'),
(38502, 1457, 'Bagoaingud'),
(38503, 1457, 'Ilian'),
(38504, 1457, 'Lumbac'),
(38505, 1457, 'Matampay'),
(38506, 1457, 'Matanog'),
(38507, 1457, 'Pindolonan'),
(38508, 1457, 'Tataya'),
(38509, 1458, 'Abaga'),
(38510, 1458, 'Poblacion'),
(38511, 1458, 'Pantaragoo'),
(38512, 1458, 'Bantoga Wato'),
(38513, 1458, 'Barit'),
(38514, 1458, 'Bubong'),
(38515, 1458, 'Bubong Cadapaan'),
(38516, 1458, 'Borakis'),
(38517, 1458, 'Bualan'),
(38518, 1458, 'Cadapaan'),
(38519, 1458, 'Cadayonan'),
(38520, 1458, 'Kaluntay'),
(38521, 1458, 'Dadayag'),
(38522, 1458, 'Dado'),
(38523, 1458, 'Dibarusan'),
(38524, 1458, 'Dilausan'),
(38525, 1458, 'Dimarao'),
(38526, 1458, 'Ingud'),
(38527, 1458, 'Lalabuan'),
(38528, 1458, 'Lilod'),
(38529, 1458, 'Lumbayao'),
(38530, 1458, 'Limbo'),
(38531, 1458, 'Lumbac Lalan'),
(38532, 1458, 'Lumbac Wato'),
(38533, 1458, 'Magarang'),
(38534, 1458, 'Nusa Lumba Ranao'),
(38535, 1458, 'Padila'),
(38536, 1458, 'Pagayawan'),
(38537, 1458, 'Paigoay'),
(38538, 1458, 'Raya'),
(38539, 1458, 'Salipongan'),
(38540, 1458, 'Talub'),
(38541, 1458, 'Tomarompong'),
(38542, 1458, 'Tantua Raya'),
(38543, 1458, 'Tuka Bubong'),
(38544, 1458, 'Bolinsong'),
(38545, 1458, 'Lati'),
(38546, 1458, 'Malaig'),
(38547, 1459, 'Bagoaingud'),
(38548, 1459, 'Bairan (Pob.)'),
(38549, 1459, 'Bandingun'),
(38550, 1459, 'Biabi'),
(38551, 1459, 'Bialaan'),
(38552, 1459, 'Cadayonan'),
(38553, 1459, 'Lumbac Cadayonan'),
(38554, 1459, 'Lalapung Central'),
(38555, 1459, 'Condaraan Pob.'),
(38556, 1459, 'Cormatan'),
(38557, 1459, 'Ilian'),
(38558, 1459, 'Lalapung Proper (Pob.)'),
(38559, 1459, 'Bubong Lilod'),
(38560, 1459, 'Linao'),
(38561, 1459, 'Linuk (Pob.)'),
(38562, 1459, 'Liong'),
(38563, 1459, 'Lumbac'),
(38564, 1459, 'Mimbalawag'),
(38565, 1459, 'Maliwanag'),
(38566, 1459, 'Mapantao'),
(38567, 1459, 'Cadingilan Occidental'),
(38568, 1459, 'Cadingilan Oriental'),
(38569, 1459, 'Palao'),
(38570, 1459, 'Pama-an'),
(38571, 1459, 'Pamacotan'),
(38572, 1459, 'Pantar'),
(38573, 1459, 'Parao'),
(38574, 1459, 'Patong'),
(38575, 1459, 'Porotan'),
(38576, 1459, 'Rantian'),
(38577, 1459, 'Raya Cadayonan'),
(38578, 1459, 'Rinabor (Pob.)'),
(38579, 1459, 'Sapa'),
(38580, 1459, 'Samporna (Pob.)'),
(38581, 1459, 'Silid'),
(38582, 1459, 'Sugod'),
(38583, 1459, 'Sultan Pandapatan'),
(38584, 1459, 'Sumbag (Pob.)'),
(38585, 1459, 'Tagoranao'),
(38586, 1459, 'Tangcal'),
(38587, 1459, 'Tangcal Proper (Pob.)'),
(38588, 1459, 'Tuca (Pob.)'),
(38589, 1459, 'Tomarompong'),
(38590, 1459, 'Tomongcal Ligi'),
(38591, 1459, 'Torogan'),
(38592, 1459, 'Lalapung Upper'),
(38593, 1459, 'Gandamato'),
(38594, 1459, 'Bubong Raya'),
(38595, 1459, 'Poblacion'),
(38596, 1460, 'Badak'),
(38597, 1460, 'Baguiangun'),
(38598, 1460, 'Balut Maito'),
(38599, 1460, 'Basak'),
(38600, 1460, 'Bubong'),
(38601, 1460, 'Bubonga-Ranao'),
(38602, 1460, 'Dansalan Dacsula'),
(38603, 1460, 'Ingud'),
(38604, 1460, 'Kialilidan'),
(38605, 1460, 'Lumbac'),
(38606, 1460, 'Macaguiling'),
(38607, 1460, 'Madaya'),
(38608, 1460, 'Magonaya'),
(38609, 1460, 'Maindig'),
(38610, 1460, 'Masolun'),
(38611, 1460, 'Olama'),
(38612, 1460, 'Pagalamatan (Pob.)'),
(38613, 1460, 'Pantar'),
(38614, 1460, 'Picalilangan'),
(38615, 1460, 'Picotaan'),
(38616, 1460, 'Pindolonan'),
(38617, 1460, 'Poblacion'),
(38618, 1460, 'Soldaroro'),
(38619, 1460, 'Tambac'),
(38620, 1460, 'Timbangan'),
(38621, 1460, 'Tuca'),
(38622, 1461, 'Bagoaingud'),
(38623, 1461, 'Bansayan'),
(38624, 1461, 'Basingan'),
(38625, 1461, 'Batangan'),
(38626, 1461, 'Bualan'),
(38627, 1461, 'Poblacion'),
(38628, 1461, 'Bubonga Didagun'),
(38629, 1461, 'Carigongan'),
(38630, 1461, 'Bacolod'),
(38631, 1461, 'Dilabayan'),
(38632, 1461, 'Dimapatoy'),
(38633, 1461, 'Dimayon Proper'),
(38634, 1461, 'Diolangan'),
(38635, 1461, 'Guiguikun'),
(38636, 1461, 'Dibarosan'),
(38637, 1461, 'Madanding'),
(38638, 1461, 'Malungun'),
(38639, 1461, 'Masorot'),
(38640, 1461, 'Matampay Dimarao'),
(38641, 1461, 'Miabalawag'),
(38642, 1461, 'Montiaan'),
(38643, 1461, 'Pagayawan'),
(38644, 1461, 'Palao'),
(38645, 1461, 'Panalawan'),
(38646, 1461, 'Pantar'),
(38647, 1461, 'Pendogoan'),
(38648, 1461, 'Polayagan'),
(38649, 1461, 'Ramain Bubong'),
(38650, 1461, 'Rogero'),
(38651, 1461, 'Salipongan'),
(38652, 1461, 'Sunggod'),
(38653, 1461, 'Taboro'),
(38654, 1461, 'Dalaon'),
(38655, 1461, 'Dimayon'),
(38656, 1461, 'Pindolonan'),
(38657, 1461, 'Punud'),
(38658, 1462, 'Butig Proper'),
(38659, 1462, 'Cabasaran'),
(38660, 1462, 'Coloyan Tambo'),
(38661, 1462, 'Dilimbayan'),
(38662, 1462, 'Dolangan'),
(38663, 1462, 'Pindolonan'),
(38664, 1462, 'Bayabao Poblacion'),
(38665, 1462, 'Poktan'),
(38666, 1462, 'Ragayan'),
(38667, 1462, 'Raya'),
(38668, 1462, 'Samer'),
(38669, 1462, 'Sandab Madaya'),
(38670, 1462, 'Sundig'),
(38671, 1462, 'Tiowi'),
(38672, 1462, 'Timbab'),
(38673, 1462, 'Malungun'),
(38674, 1463, 'Bagoaingud'),
(38675, 1463, 'Balintad'),
(38676, 1463, 'Barit'),
(38677, 1463, 'Bato Batoray'),
(38678, 1463, 'Campong a Raya'),
(38679, 1463, 'Gadongan'),
(38680, 1463, 'Gui'),
(38681, 1463, 'Linuk'),
(38682, 1463, 'Lumbac'),
(38683, 1463, 'Macabao'),
(38684, 1463, 'Macaguiling'),
(38685, 1463, 'Pagalongan'),
(38686, 1463, 'Panggawalupa'),
(38687, 1463, 'Pantaon A'),
(38688, 1463, 'Para-aba'),
(38689, 1463, 'Pindolonan'),
(38690, 1463, 'Poblacion'),
(38691, 1463, 'Baya'),
(38692, 1463, 'Sogod Madaya'),
(38693, 1463, 'Tabuan'),
(38694, 1463, 'Taganonok'),
(38695, 1463, 'Taliogon'),
(38696, 1463, 'Masolun'),
(38697, 1463, 'Lumbacaingud'),
(38698, 1463, 'Sekun Matampay'),
(38699, 1463, 'Dapaan'),
(38700, 1463, 'Balintad A'),
(38701, 1463, 'Barorao'),
(38702, 1463, 'Campong Sabela'),
(38703, 1463, 'Pangadapun'),
(38704, 1463, 'Pantaon'),
(38705, 1463, 'Pamalian'),
(38706, 1464, 'Cormatan'),
(38707, 1464, 'Dimagaling'),
(38708, 1464, 'Dimunda'),
(38709, 1464, 'Doronan'),
(38710, 1464, 'Poblacion'),
(38711, 1464, 'Malna Proper'),
(38712, 1464, 'Pagalongan'),
(38713, 1464, 'Parao'),
(38714, 1464, 'Kasayanan'),
(38715, 1464, 'Kasayanan West'),
(38716, 1464, 'Dilabayan'),
(38717, 1464, 'Dilimbayan'),
(38718, 1464, 'Kibolos'),
(38719, 1464, 'Kining'),
(38720, 1464, 'Pindolonan'),
(38721, 1464, 'Babayog'),
(38722, 1464, 'Gadongan'),
(38723, 1464, 'Lidasan'),
(38724, 1464, 'Macadar'),
(38725, 1464, 'Pantaon'),
(38726, 1465, 'Bacolod I'),
(38727, 1465, 'Bacolod II'),
(38728, 1465, 'Bantayao'),
(38729, 1465, 'Barit'),
(38730, 1465, 'Baugan'),
(38731, 1465, 'Buad Lumbac'),
(38732, 1465, 'Cabasaran'),
(38733, 1465, 'Calilangan'),
(38734, 1465, 'Carandangan-Mipaga'),
(38735, 1465, 'Cormatan Langban'),
(38736, 1465, 'Dialongana'),
(38737, 1465, 'Dilindongan-Cadayonan'),
(38738, 1465, 'Gadongan'),
(38739, 1465, 'Galawan'),
(38740, 1465, 'Gambai'),
(38741, 1465, 'Kasola'),
(38742, 1465, 'Lalangitun'),
(38743, 1465, 'Lama'),
(38744, 1465, 'Lindongan Dialongana'),
(38745, 1465, 'Lobo Basara'),
(38746, 1465, 'Lumbac Bacayawan'),
(38747, 1465, 'Macaguiling'),
(38748, 1465, 'Mapantao'),
(38749, 1465, 'Mapoling'),
(38750, 1465, 'Pagayawan'),
(38751, 1465, 'Maribo (Pob.)'),
(38752, 1465, 'Posudaragat'),
(38753, 1465, 'Rumayas'),
(38754, 1465, 'Sabala Bantayao'),
(38755, 1465, 'Salaman'),
(38756, 1465, 'Salolodun Berwar'),
(38757, 1465, 'Sarigidan Madiar'),
(38758, 1465, 'Sunggod'),
(38759, 1465, 'Taluan'),
(38760, 1465, 'Tamlang'),
(38761, 1465, 'Tongcopan'),
(38762, 1465, 'Turogan'),
(38763, 1465, 'Minaring Diladigan'),
(38764, 1466, 'Alog'),
(38765, 1466, 'Basayungun'),
(38766, 1466, 'Buad'),
(38767, 1466, 'Budi'),
(38768, 1466, 'Dago-ok'),
(38769, 1466, 'Dalama'),
(38770, 1466, 'Dalipuga'),
(38771, 1466, 'Lalapung'),
(38772, 1466, 'Lumbac'),
(38773, 1466, 'Lumbac Bacayawan'),
(38774, 1466, 'Lunay'),
(38775, 1466, 'Macadar'),
(38776, 1466, 'Madaya'),
(38777, 1466, 'Minanga'),
(38778, 1466, 'Pantar'),
(38779, 1466, 'Picotaan'),
(38780, 1466, 'Poblacion'),
(38781, 1466, 'Tambac'),
(38782, 1466, 'Bubong Macadar'),
(38783, 1466, 'Penaring'),
(38784, 1466, 'Ligue'),
(38785, 1467, 'Abaga'),
(38786, 1467, 'Bagoaingud'),
(38787, 1467, 'Basak'),
(38788, 1467, 'Bato'),
(38789, 1467, 'Bubong'),
(38790, 1467, 'Kormatan'),
(38791, 1467, 'Dandamun'),
(38792, 1467, 'Diampaca'),
(38793, 1467, 'Dibarosan'),
(38794, 1467, 'Delausan'),
(38795, 1467, 'Gadongan'),
(38796, 1467, 'Gurain'),
(38797, 1467, 'Cabasaran'),
(38798, 1467, 'Cadayonan'),
(38799, 1467, 'Liangan I'),
(38800, 1467, 'Lilitun'),
(38801, 1467, 'Linao'),
(38802, 1467, 'Linuk'),
(38803, 1467, 'Madaya'),
(38804, 1467, 'Pagayawan'),
(38805, 1467, 'Poblacion'),
(38806, 1467, 'Punud'),
(38807, 1467, 'Raya'),
(38808, 1467, 'Riray'),
(38809, 1467, 'Sabanding'),
(38810, 1467, 'Salongabanding'),
(38811, 1467, 'Sugod'),
(38812, 1467, 'Tamporong'),
(38813, 1467, 'Tongantongan'),
(38814, 1467, 'Udangun'),
(38815, 1467, 'Liangan'),
(38816, 1467, 'Lumbac'),
(38817, 1467, 'Paridi-Kalimodan'),
(38818, 1467, 'Racotan'),
(38819, 1467, 'Bacayawan'),
(38820, 1467, 'Padian Torogan I'),
(38821, 1467, 'Sogod Kaloy'),
(38822, 1468, 'Balintad'),
(38823, 1468, 'Balagunun'),
(38824, 1468, 'Bawang'),
(38825, 1468, 'Biabe'),
(38826, 1468, 'Bubong Uyaan'),
(38827, 1468, 'Cabasaran'),
(38828, 1468, 'Dibarusan'),
(38829, 1468, 'Lakitan'),
(38830, 1468, 'Liangan'),
(38831, 1468, 'Linuk'),
(38832, 1468, 'Lumbaca Ingud'),
(38833, 1468, 'Palao'),
(38834, 1468, 'Pantaon'),
(38835, 1468, 'Pantar'),
(38836, 1468, 'Madamba'),
(38837, 1468, 'Punud'),
(38838, 1468, 'Tubaran'),
(38839, 1468, 'Tambo'),
(38840, 1468, 'Tuca'),
(38841, 1468, 'Uyaan Proper (Pob.)'),
(38842, 1468, 'Tulay'),
(38843, 1468, 'Ilian'),
(38844, 1468, 'Pagayonan'),
(38845, 1468, 'Pangadapan'),
(38846, 1469, 'Bacayawan'),
(38847, 1469, 'Badak Lumao'),
(38848, 1469, 'Bagoaingud'),
(38849, 1469, 'Boniga'),
(38850, 1469, 'BPS Village'),
(38851, 1469, 'Betayan'),
(38852, 1469, 'Campo Muslim'),
(38853, 1469, 'China Town (Pob.)'),
(38854, 1469, 'Corahab'),
(38855, 1469, 'Diamaro'),
(38856, 1469, 'Inandayan'),
(38857, 1469, 'Cabasaran'),
(38858, 1469, 'Calumbog'),
(38859, 1469, 'Lamin'),
(38860, 1469, 'Mable'),
(38861, 1469, 'Mananayo'),
(38862, 1469, 'Manggahan'),
(38863, 1469, 'Masao'),
(38864, 1469, 'Montay'),
(38865, 1469, 'Pasir'),
(38866, 1469, 'Rebocun'),
(38867, 1469, 'Sarang'),
(38868, 1469, 'Tacub'),
(38869, 1469, 'Tambara'),
(38870, 1469, 'Tiongcop'),
(38871, 1469, 'Tuboc'),
(38872, 1469, 'Matampay'),
(38873, 1469, 'Calibagat'),
(38874, 1469, 'Jose Abad Santos'),
(38875, 1469, 'Macuranding'),
(38876, 1469, 'Matalin'),
(38877, 1469, 'Matling'),
(38878, 1469, 'Pialot'),
(38879, 1469, 'Sumbagarogong'),
(38880, 1469, 'Banday'),
(38881, 1469, 'Bunk House'),
(38882, 1469, 'Madaya'),
(38883, 1470, 'Bacayawan'),
(38884, 1470, 'Cawayan Bacolod'),
(38885, 1470, 'Bacong'),
(38886, 1470, 'Camalig Bandara Ingud'),
(38887, 1470, 'Camalig Bubong'),
(38888, 1470, 'Camalig (Pob.)'),
(38889, 1470, 'Inudaran Campong'),
(38890, 1470, 'Cawayan'),
(38891, 1470, 'Daanaingud'),
(38892, 1470, 'Cawayan Kalaw'),
(38893, 1470, 'Kialdan'),
(38894, 1470, 'Lumbac Kialdan'),
(38895, 1470, 'Cawayan Linuk'),
(38896, 1470, 'Lubo'),
(38897, 1470, 'Inudaran Lumbac'),
(38898, 1470, 'Mantapoli'),
(38899, 1470, 'Matampay'),
(38900, 1470, 'Maul'),
(38901, 1470, 'Nataron'),
(38902, 1470, 'Pagalongan Bacayawan'),
(38903, 1470, 'Pataimas'),
(38904, 1470, 'Poona Marantao'),
(38905, 1470, 'Punud Proper'),
(38906, 1470, 'Tacub'),
(38907, 1470, 'Maul Ilian'),
(38908, 1470, 'Palao'),
(38909, 1470, 'Banga-Pantar'),
(38910, 1470, 'Batal-Punud'),
(38911, 1470, 'Bubong Madanding'),
(38912, 1470, 'Ilian'),
(38913, 1470, 'Inudaran Loway'),
(38914, 1470, 'Maul Lumbaca Ingud'),
(38915, 1470, 'Poblacion'),
(38916, 1470, 'Tuca Kialdan'),
(38917, 1471, 'Ambolong'),
(38918, 1471, 'Bacolod Chico Proper'),
(38919, 1471, 'Banga'),
(38920, 1471, 'Bangco'),
(38921, 1471, 'Banggolo Poblacion'),
(38922, 1471, 'Bangon'),
(38923, 1471, 'Beyaba-Damag'),
(38924, 1471, 'Bito Buadi Itowa'),
(38925, 1471, 'Bito Buadi Parba'),
(38926, 1471, 'Bubonga Pagalamatan'),
(38927, 1471, 'Bubonga Lilod Madaya'),
(38928, 1471, 'Boganga'),
(38929, 1471, 'Boto Ambolong'),
(38930, 1471, 'Bubonga Cadayonan'),
(38931, 1471, 'Bubong Lumbac'),
(38932, 1471, 'Bubonga Marawi'),
(38933, 1471, 'Bubonga Punod'),
(38934, 1471, 'Cabasaran'),
(38935, 1471, 'Cabingan'),
(38936, 1471, 'Cadayonan'),
(38937, 1471, 'Cadayonan I'),
(38938, 1471, 'Calocan East'),
(38939, 1471, 'Calocan West'),
(38940, 1471, 'Kormatan Matampay'),
(38941, 1471, 'Daguduban'),
(38942, 1471, 'Dansalan'),
(38943, 1471, 'Datu Sa Dansalan'),
(38944, 1471, 'Dayawan'),
(38945, 1471, 'Dimaluna'),
(38946, 1471, 'Dulay'),
(38947, 1471, 'Dulay West'),
(38948, 1471, 'East Basak'),
(38949, 1471, 'Emie Punud'),
(38950, 1471, 'Fort'),
(38951, 1471, 'Gadongan'),
(38952, 1471, 'Buadi Sacayo'),
(38953, 1471, 'Guimba'),
(38954, 1471, 'Kapantaran'),
(38955, 1471, 'Kilala'),
(38956, 1471, 'Lilod Madaya (Pob.)'),
(38957, 1471, 'Lilod Saduc'),
(38958, 1471, 'Lomidong'),
(38959, 1471, 'Lumbaca Madaya (Pob.)'),
(38960, 1471, 'Lumbac Marinaut'),
(38961, 1471, 'Lumbaca Toros'),
(38962, 1471, 'Malimono'),
(38963, 1471, 'Basak Malutlut'),
(38964, 1471, 'Gadongan Mapantao'),
(38965, 1471, 'Amito Marantao'),
(38966, 1471, 'Marinaut East'),
(38967, 1471, 'Marinaut West'),
(38968, 1471, 'Matampay'),
(38969, 1471, 'Pantaon'),
(38970, 1471, 'Mipaga Proper'),
(38971, 1471, 'Moncado Colony'),
(38972, 1471, 'Moncado Kadingilan'),
(38973, 1471, 'Moriatao Loksadato'),
(38974, 1471, 'Datu Naga'),
(38975, 1471, 'Navarro'),
(38976, 1471, 'Olawa Ambolong'),
(38977, 1471, 'Pagalamatan Gambai'),
(38978, 1471, 'Pagayawan'),
(38979, 1471, 'Panggao Saduc'),
(38980, 1471, 'Papandayan'),
(38981, 1471, 'Paridi'),
(38982, 1471, 'Patani'),
(38983, 1471, 'Pindolonan'),
(38984, 1471, 'Poona Marantao'),
(38985, 1471, 'Pugaan'),
(38986, 1471, 'Rapasun MSU'),
(38987, 1471, 'Raya Madaya I'),
(38988, 1471, 'Raya Madaya II'),
(38989, 1471, 'Raya Saduc'),
(38990, 1471, 'Rorogagus Proper'),
(38991, 1471, 'Rorogagus East'),
(38992, 1471, 'Sabala Manao'),
(38993, 1471, 'Sabala Manao Proper'),
(38994, 1471, 'Saduc Proper'),
(38995, 1471, 'Sagonsongan'),
(38996, 1471, 'Sangcay Dansalan'),
(38997, 1471, 'Somiorang'),
(38998, 1471, 'South Madaya Proper'),
(38999, 1471, 'Sugod Proper'),
(39000, 1471, 'Tampilong'),
(39001, 1471, 'Timbangalan'),
(39002, 1471, 'Tuca Ambolong'),
(39003, 1471, 'Tolali'),
(39004, 1471, 'Toros'),
(39005, 1471, 'Tuca'),
(39006, 1471, 'Tuca Marinaut'),
(39007, 1471, 'Tongantongan-Tuca Timbangalan'),
(39008, 1471, 'Wawalayan Calocan'),
(39009, 1471, 'Wawalayan Marinaut'),
(39010, 1471, 'Marawi Poblacion'),
(39011, 1471, 'Norhaya Village'),
(39012, 1471, 'Papandayan Caniogan'),
(39013, 1472, 'Abdullah Buisan'),
(39014, 1472, 'Caramian Alim Raya'),
(39015, 1472, 'Alip Lalabuan'),
(39016, 1472, 'Alumpang Paino Mimbalay'),
(39017, 1472, 'Mai Ditimbang Balindong'),
(39018, 1472, 'Mai Sindaoloan Dansalan'),
(39019, 1472, 'Lakadun'),
(39020, 1472, 'Maranat Bontalis'),
(39021, 1472, 'Dalog Balut'),
(39022, 1472, 'Gindolongan Alabat'),
(39023, 1472, 'Gondarangin Asa Adigao'),
(39024, 1472, 'Sawir'),
(39025, 1472, 'Moriatao-Bai Labay'),
(39026, 1472, 'Laila Lumbac Bacon'),
(39027, 1472, 'Lanco Dimapatoy'),
(39028, 1472, 'Talub Langi'),
(39029, 1472, 'Lomigis Sucod'),
(39030, 1472, 'Macabangan Imbala'),
(39031, 1472, 'Macadaag Talaguian'),
(39032, 1472, 'Macalupang Lumbac Caramian'),
(39033, 1472, 'Magayo Bagoaingud'),
(39034, 1472, 'Macompara Apa Mimbalay'),
(39035, 1472, 'Manalocon Talub'),
(39036, 1472, 'Putad Marandang Buisan'),
(39037, 1472, 'Matao Araza'),
(39038, 1472, 'Mocamad Tangul'),
(39039, 1472, 'Pantao'),
(39040, 1472, 'Sambowang Atawa'),
(39041, 1472, 'Tamboro Cormatan'),
(39042, 1472, 'Towanao Arangga'),
(39043, 1472, 'Tomambiling Lumbaca Ingud'),
(39044, 1472, 'Unda Dayawan'),
(39045, 1472, 'Buadi Amloy'),
(39046, 1472, 'Kalilangan'),
(39047, 1472, 'Lumbaca Ingud'),
(39048, 1473, 'Bangon'),
(39049, 1473, 'Bubonga Guilopa'),
(39050, 1473, 'Buadi-Abala'),
(39051, 1473, 'Buadi-Bayawa'),
(39052, 1473, 'Buadi-Insuba'),
(39053, 1473, 'Bubong'),
(39054, 1473, 'Cabasaran'),
(39055, 1473, 'Cairatan'),
(39056, 1473, 'Cormatan'),
(39057, 1473, 'Poblacion'),
(39058, 1473, 'Dalama'),
(39059, 1473, 'Dansalan'),
(39060, 1473, 'Dimarao'),
(39061, 1473, 'Guilopa'),
(39062, 1473, 'Ilian'),
(39063, 1473, 'Kitambugun'),
(39064, 1473, 'Lama'),
(39065, 1473, 'Lilod'),
(39066, 1473, 'Lilod Raybalai'),
(39067, 1473, 'Lumbaca Ingud'),
(39068, 1473, 'Lumbac'),
(39069, 1473, 'Madaya'),
(39070, 1473, 'Pindolonan'),
(39071, 1473, 'Salipongan'),
(39072, 1473, 'Sugan'),
(39073, 1473, 'Bagoaingud'),
(39074, 1474, 'Ayong'),
(39075, 1474, 'Bandara Ingud'),
(39076, 1474, 'Bangon (Pob.)'),
(39077, 1474, 'Biala-an'),
(39078, 1474, 'Diampaca'),
(39079, 1474, 'Guiarong'),
(39080, 1474, 'Ilian'),
(39081, 1474, 'Madang'),
(39082, 1474, 'Mapantao'),
(39083, 1474, 'Ngingir'),
(39084, 1474, 'Padas'),
(39085, 1474, 'Paigoay'),
(39086, 1474, 'Pinalangca'),
(39087, 1474, 'Poblacion'),
(39088, 1474, 'Rangiran'),
(39089, 1474, 'Rubokun'),
(39090, 1474, 'Linindingan'),
(39091, 1474, 'Kalaludan'),
(39092, 1475, 'Aposong'),
(39093, 1475, 'Bagoaingud'),
(39094, 1475, 'Bangco (Pob.)'),
(39095, 1475, 'Bansayan'),
(39096, 1475, 'Basak'),
(39097, 1475, 'Bobo'),
(39098, 1475, 'Bubong Tawa-an'),
(39099, 1475, 'Bubonga Mamaanun'),
(39100, 1475, 'Bualan'),
(39101, 1475, 'Bubong Ilian'),
(39102, 1475, 'Gacap'),
(39103, 1475, 'Katumbacan'),
(39104, 1475, 'Ilian Poblacion'),
(39105, 1475, 'Kalanganan'),
(39106, 1475, 'Lininding'),
(39107, 1475, 'Lumbaca Mamaan'),
(39108, 1475, 'Mamaanun'),
(39109, 1475, 'Mentring'),
(39110, 1475, 'Olango'),
(39111, 1475, 'Palacat'),
(39112, 1475, 'Palao'),
(39113, 1475, 'Paling'),
(39114, 1475, 'Pantaon'),
(39115, 1475, 'Pantar'),
(39116, 1475, 'Paridi'),
(39117, 1475, 'Pindolonan'),
(39118, 1475, 'Radapan'),
(39119, 1475, 'Radapan Poblacion'),
(39120, 1475, 'Sapingit'),
(39121, 1475, 'Talao'),
(39122, 1475, 'Tambo'),
(39123, 1475, 'Tapocan'),
(39124, 1475, 'Taporug'),
(39125, 1475, 'Tawaan'),
(39126, 1475, 'Udalo'),
(39127, 1475, 'Rantian'),
(39128, 1475, 'Ilian'),
(39129, 1476, 'Ataragadong'),
(39130, 1476, 'Bangon'),
(39131, 1476, 'Bansayan'),
(39132, 1476, 'Bubong-Dimunda'),
(39133, 1476, 'Bugaran'),
(39134, 1476, 'Bualan'),
(39135, 1476, 'Cadayonan'),
(39136, 1476, 'Calilangan Dicala'),
(39137, 1476, 'Calupaan'),
(39138, 1476, 'Dimayon'),
(39139, 1476, 'Dilausan'),
(39140, 1476, 'Dongcoan'),
(39141, 1476, 'Gadongan'),
(39142, 1476, 'Poblacion'),
(39143, 1476, 'Liangan'),
(39144, 1476, 'Lumbac'),
(39145, 1476, 'Lumbaca Ingud'),
(39146, 1476, 'Madanding'),
(39147, 1476, 'Pantao'),
(39148, 1476, 'Punud'),
(39149, 1476, 'Ragayan'),
(39150, 1476, 'Rogan Cairan'),
(39151, 1476, 'Talaguian'),
(39152, 1476, 'Rogan Tandiong Dimayon'),
(39153, 1476, 'Taporog'),
(39154, 1477, 'Badak'),
(39155, 1477, 'Bantayan'),
(39156, 1477, 'Basagad'),
(39157, 1477, 'Bolinsong'),
(39158, 1477, 'Boring'),
(39159, 1477, 'Bualan'),
(39160, 1477, 'Danugan'),
(39161, 1477, 'Dapao'),
(39162, 1477, 'Diamla'),
(39163, 1477, 'Gadongan'),
(39164, 1477, 'Ingud'),
(39165, 1477, 'Linuk'),
(39166, 1477, 'Lumbac'),
(39167, 1477, 'Maligo'),
(39168, 1477, 'Masao'),
(39169, 1477, 'Notong'),
(39170, 1477, 'Porug'),
(39171, 1477, 'Romagondong'),
(39172, 1477, 'Tambo (Pob.)'),
(39173, 1477, 'Tamlang'),
(39174, 1477, 'Tuka'),
(39175, 1477, 'Tomarompong'),
(39176, 1477, 'Yaran'),
(39177, 1478, 'Bagoaingud'),
(39178, 1478, 'Barimbingan'),
(39179, 1478, 'Bayabao'),
(39180, 1478, 'Buadi Babai'),
(39181, 1478, 'Buadi Alao'),
(39182, 1478, 'Buadi Oloc'),
(39183, 1478, 'Pagalongan Buadiadingan'),
(39184, 1478, 'Dado'),
(39185, 1478, 'Dangimprampiai'),
(39186, 1478, 'Darimbang'),
(39187, 1478, 'Dilausan'),
(39188, 1478, 'Ditsaan'),
(39189, 1478, 'Gadongan'),
(39190, 1478, 'Pagalongan Ginaopan'),
(39191, 1478, 'Baclayan Lilod'),
(39192, 1478, 'Linamon'),
(39193, 1478, 'Lumbatan Ramain'),
(39194, 1478, 'Buayaan Madanding'),
(39195, 1478, 'Maindig Ditsaan'),
(39196, 1478, 'Mandara'),
(39197, 1478, 'Maranao Timber'),
(39198, 1478, 'Pagalongan Proper'),
(39199, 1478, 'Polo'),
(39200, 1478, 'Ramain Poblacion'),
(39201, 1478, 'Ramain Proper'),
(39202, 1478, 'Baclayan Raya'),
(39203, 1478, 'Buayaan Raya'),
(39204, 1478, 'Rantian'),
(39205, 1478, 'Sundiga Bayabao'),
(39206, 1478, 'Talub'),
(39207, 1478, 'Buayaan Lilod'),
(39208, 1478, 'Bubong Dangiprampiai'),
(39209, 1478, 'Pagalongan Masioon'),
(39210, 1478, 'Sultan Pangadapun'),
(39211, 1478, 'Upper Pugaan'),
(39212, 1479, 'Alinun'),
(39213, 1479, 'Bagoaingud'),
(39214, 1479, 'Batangan'),
(39215, 1479, 'Cadayon'),
(39216, 1479, 'Cadingilan'),
(39217, 1479, 'Lumbac Toros'),
(39218, 1479, 'Comonal'),
(39219, 1479, 'Dilausan'),
(39220, 1479, 'Gadongan'),
(39221, 1479, 'Linao'),
(39222, 1479, 'Limogao'),
(39223, 1479, 'Lumbayanague'),
(39224, 1479, 'Basak Maito'),
(39225, 1479, 'Maliwanag'),
(39226, 1479, 'Mapantao'),
(39227, 1479, 'Mipaga'),
(39228, 1479, 'Natangcopan'),
(39229, 1479, 'Pagalamatan'),
(39230, 1479, 'Pamacotan'),
(39231, 1479, 'Panggao'),
(39232, 1479, 'Pantao Raya'),
(39233, 1479, 'Pantaon'),
(39234, 1479, 'Patpangkat'),
(39235, 1479, 'Pawak'),
(39236, 1479, 'Dilimbayan'),
(39237, 1479, 'Pindolonan'),
(39238, 1479, 'Poblacion'),
(39239, 1479, 'Salocad'),
(39240, 1479, 'Sungcod'),
(39241, 1479, 'Bubong'),
(39242, 1480, 'Bocalan'),
(39243, 1480, 'Bangon'),
(39244, 1480, 'Cabasaran'),
(39245, 1480, 'Dilausan'),
(39246, 1480, 'Lalabuan'),
(39247, 1480, 'Lilod Tamparan'),
(39248, 1480, 'Lindongan');
INSERT INTO `table_barangay` (`barangay_id`, `municipality_id`, `barangay_name`) VALUES
(39249, 1480, 'Linuk'),
(39250, 1480, 'Occidental Linuk'),
(39251, 1480, 'Linuk Oriental'),
(39252, 1480, 'Lumbaca Ingud'),
(39253, 1480, 'Lumbacaingud South'),
(39254, 1480, 'Lumbaca Lilod'),
(39255, 1480, 'Balutmadiar'),
(39256, 1480, 'Mala-abangon'),
(39257, 1480, 'Maliwanag'),
(39258, 1480, 'Maidan Linuk'),
(39259, 1480, 'Miondas'),
(39260, 1480, 'New Lumbacaingud'),
(39261, 1480, 'Pimbago-Pagalongan'),
(39262, 1480, 'Pagayawan'),
(39263, 1480, 'Picarabawan'),
(39264, 1480, 'Poblacion I'),
(39265, 1480, 'Poblacion II'),
(39266, 1480, 'Poblacion III'),
(39267, 1480, 'Poblacion IV'),
(39268, 1480, 'Raya Niondas'),
(39269, 1480, 'Raya Buadi Barao'),
(39270, 1480, 'Raya Tamparan'),
(39271, 1480, 'Salongabanding'),
(39272, 1480, 'Saminunggay'),
(39273, 1480, 'Talub'),
(39274, 1480, 'Tatayawan North'),
(39275, 1480, 'Tatayawan South'),
(39276, 1480, 'Tubok'),
(39277, 1480, 'Beruar'),
(39278, 1480, 'Dasomalong'),
(39279, 1480, 'Ginaopan'),
(39280, 1480, 'Lumbac'),
(39281, 1480, 'Minanga'),
(39282, 1480, 'Lilod Tubok'),
(39283, 1480, 'Mariatao Datu'),
(39284, 1480, 'Pagalamatan Linuk'),
(39285, 1480, 'Pindolonan Mariatao Sarip'),
(39286, 1481, 'Bandera Buisan'),
(39287, 1481, 'Boriongan'),
(39288, 1481, 'Borowa'),
(39289, 1481, 'Buadi Dingun'),
(39290, 1481, 'Buadi Amao'),
(39291, 1481, 'Buadi Amunta'),
(39292, 1481, 'Buadi Arorao'),
(39293, 1481, 'Buadi Atopa'),
(39294, 1481, 'Buadi Dayomangga'),
(39295, 1481, 'Buadi Ongcalo'),
(39296, 1481, 'Bucalan'),
(39297, 1481, 'Cadayonan Bagumbayan'),
(39298, 1481, 'Caramat'),
(39299, 1481, 'Carandangan Calopaan'),
(39300, 1481, 'Datu Ma-as'),
(39301, 1481, 'Dilabayan'),
(39302, 1481, 'Dimayon'),
(39303, 1481, 'Gapao Balindong'),
(39304, 1481, 'Ilian'),
(39305, 1481, 'Lumasa'),
(39306, 1481, 'Lumbac Bagoaingud'),
(39307, 1481, 'Lumbac Bubong Maindang'),
(39308, 1481, 'Lumbac Pitakus'),
(39309, 1481, 'Malungun'),
(39310, 1481, 'Maruhom'),
(39311, 1481, 'Masolun'),
(39312, 1481, 'Moriatao Loksa Datu'),
(39313, 1481, 'Pagalamatan'),
(39314, 1481, 'Pindolonan'),
(39315, 1481, 'Pitakus'),
(39316, 1481, 'Ririk'),
(39317, 1481, 'Salipongan'),
(39318, 1481, 'Lumasa Proper'),
(39319, 1481, 'Sambolawan'),
(39320, 1481, 'Samporna Salamatollah'),
(39321, 1481, 'Somiorang Bandingun'),
(39322, 1481, 'Sigayan Proper'),
(39323, 1481, 'Sunggod'),
(39324, 1481, 'Sunding'),
(39325, 1481, 'Supangan'),
(39326, 1481, 'Tupa-an Buadiatupa'),
(39327, 1481, 'Buadi Amunud'),
(39328, 1481, 'Mangayao'),
(39329, 1482, 'Alog'),
(39330, 1482, 'Beta'),
(39331, 1482, 'Poblacion'),
(39332, 1482, 'Campo'),
(39333, 1482, 'Datumanong'),
(39334, 1482, 'Dinaigan'),
(39335, 1482, 'Guiarong'),
(39336, 1482, 'Mindamudag'),
(39337, 1482, 'Paigoay-Pimbataan'),
(39338, 1482, 'Polo'),
(39339, 1482, 'Riantaran'),
(39340, 1482, 'Tangcal'),
(39341, 1482, 'Tubaran Proper'),
(39342, 1482, 'Wago'),
(39343, 1482, 'Bagiangun'),
(39344, 1482, 'Gadongan'),
(39345, 1482, 'Gaput'),
(39346, 1482, 'Madaya'),
(39347, 1482, 'Malaganding'),
(39348, 1482, 'Metadicop'),
(39349, 1482, 'Pagalamatan'),
(39350, 1483, 'Bagoaingud'),
(39351, 1483, 'Bubong'),
(39352, 1483, 'Buadi Alawang'),
(39353, 1483, 'Buadi Dico'),
(39354, 1483, 'Campong Talao'),
(39355, 1483, 'Cayagan'),
(39356, 1483, 'Dandanun'),
(39357, 1483, 'Dilimbayan'),
(39358, 1483, 'Gurain'),
(39359, 1483, 'Poblacion'),
(39360, 1483, 'Lumbac'),
(39361, 1483, 'Maidan'),
(39362, 1483, 'Mapantao'),
(39363, 1483, 'Pagalamatan'),
(39364, 1483, 'Pandiaranao'),
(39365, 1483, 'Pindolonan I'),
(39366, 1483, 'Pindolonan II'),
(39367, 1483, 'Putad'),
(39368, 1483, 'Raya'),
(39369, 1483, 'Sugod I'),
(39370, 1483, 'Sugod Mawatan'),
(39371, 1483, 'Sumbaga Rogong'),
(39372, 1483, 'Tangcal'),
(39373, 1484, 'Amoyong'),
(39374, 1484, 'Balatin'),
(39375, 1484, 'Banga'),
(39376, 1484, 'Buntongun'),
(39377, 1484, 'Bo-ot'),
(39378, 1484, 'Cebuano Group'),
(39379, 1484, 'Christian Village'),
(39380, 1484, 'Eastern Wao'),
(39381, 1484, 'Extension Poblacion'),
(39382, 1484, 'Gata'),
(39383, 1484, 'Kabatangan'),
(39384, 1484, 'Kadingilan'),
(39385, 1484, 'Katutungan (Pob.)'),
(39386, 1484, 'Kilikili East'),
(39387, 1484, 'Kilikili West'),
(39388, 1484, 'Malaigang'),
(39389, 1484, 'Manila Group'),
(39390, 1484, 'Milaya'),
(39391, 1484, 'Mimbuaya'),
(39392, 1484, 'Muslim Village'),
(39393, 1484, 'Pagalongan'),
(39394, 1484, 'Panang'),
(39395, 1484, 'Park Area (Pob.)'),
(39396, 1484, 'Pilintangan'),
(39397, 1484, 'Serran Village'),
(39398, 1484, 'Western Wao (Pob.)'),
(39399, 1485, 'Balut'),
(39400, 1485, 'Bagumbayan'),
(39401, 1485, 'Bitayan'),
(39402, 1485, 'Bolawan'),
(39403, 1485, 'Bonga'),
(39404, 1485, 'Cabasaran'),
(39405, 1485, 'Cahera'),
(39406, 1485, 'Cairantang'),
(39407, 1485, 'Canibongan'),
(39408, 1485, 'Diragun'),
(39409, 1485, 'Mantailoco'),
(39410, 1485, 'Mapantao'),
(39411, 1485, 'Marogong East'),
(39412, 1485, 'Marogong Proper (Pob.)'),
(39413, 1485, 'Mayaman'),
(39414, 1485, 'Pabrica'),
(39415, 1485, 'Paigoay Coda'),
(39416, 1485, 'Pasayanan'),
(39417, 1485, 'Piangologan'),
(39418, 1485, 'Puracan'),
(39419, 1485, 'Romagondong'),
(39420, 1485, 'Sarang'),
(39421, 1485, 'Cadayonan'),
(39422, 1485, 'Calumbog'),
(39423, 1486, 'Bubonga Ranao'),
(39424, 1486, 'Calalaoan (Pob.)'),
(39425, 1486, 'Gas'),
(39426, 1486, 'Inudaran'),
(39427, 1486, 'Inoma'),
(39428, 1486, 'Luguna'),
(39429, 1486, 'Mimbalawag'),
(39430, 1486, 'Ngingir'),
(39431, 1486, 'Pagalongan'),
(39432, 1486, 'Panggawalupa'),
(39433, 1486, 'Pantaon'),
(39434, 1486, 'Piksan'),
(39435, 1486, 'Pindolonan'),
(39436, 1486, 'Punud'),
(39437, 1486, 'Tagoranao'),
(39438, 1486, 'Taliboboka'),
(39439, 1486, 'Tambac'),
(39440, 1487, 'Bacolod'),
(39441, 1487, 'Bangon'),
(39442, 1487, 'Buadiposo Lilod'),
(39443, 1487, 'Buadiposo Proper'),
(39444, 1487, 'Bubong'),
(39445, 1487, 'Buntong Proper'),
(39446, 1487, 'Cadayonan'),
(39447, 1487, 'Dansalan'),
(39448, 1487, 'Gata'),
(39449, 1487, 'Kalakala'),
(39450, 1487, 'Katogonan'),
(39451, 1487, 'Lumbac'),
(39452, 1487, 'Lumbatan Manacab'),
(39453, 1487, 'Lumbatan Pataingud'),
(39454, 1487, 'Manacab (Pob.)'),
(39455, 1487, 'Minanga'),
(39456, 1487, 'Paling'),
(39457, 1487, 'Pindolonan'),
(39458, 1487, 'Pualas'),
(39459, 1487, 'Buadiposo Raya'),
(39460, 1487, 'Sapot'),
(39461, 1487, 'Tangcal'),
(39462, 1487, 'Tarik'),
(39463, 1487, 'Tuka'),
(39464, 1487, 'Bangon Proper'),
(39465, 1487, 'Raya Buntong'),
(39466, 1487, 'Lunduban'),
(39467, 1487, 'Ragondingan East'),
(39468, 1487, 'Ragondingan Proper'),
(39469, 1487, 'Ragondingan West'),
(39470, 1487, 'Boto Ragondingan'),
(39471, 1487, 'Datu Tambara'),
(39472, 1487, 'Dirisan'),
(39473, 1488, 'Agagan'),
(39474, 1488, 'Balagunun'),
(39475, 1488, 'Bolao'),
(39476, 1488, 'Balawag'),
(39477, 1488, 'Balintao'),
(39478, 1488, 'Borocot'),
(39479, 1488, 'Bato-bato'),
(39480, 1488, 'Borrowa'),
(39481, 1488, 'Buadiangkay'),
(39482, 1488, 'Bubong Bayabao'),
(39483, 1488, 'Botud'),
(39484, 1488, 'Camalig'),
(39485, 1488, 'Cambong'),
(39486, 1488, 'Dilausan (Pob.)'),
(39487, 1488, 'Dilimbayan'),
(39488, 1488, 'Ilalag'),
(39489, 1488, 'Kianodan'),
(39490, 1488, 'Lumbac'),
(39491, 1488, 'Madanding'),
(39492, 1488, 'Madaya'),
(39493, 1488, 'Maguing Proper'),
(39494, 1488, 'Malungun'),
(39495, 1488, 'Pagalongan'),
(39496, 1488, 'Panayangan'),
(39497, 1488, 'Pilimoknan'),
(39498, 1488, 'Ragayan'),
(39499, 1488, 'Lilod Maguing'),
(39500, 1488, 'Bubong'),
(39501, 1488, 'Lilod Borocot'),
(39502, 1488, 'Malungun Borocot'),
(39503, 1488, 'Malungun Pagalongan'),
(39504, 1488, 'Sabala Dilausan'),
(39505, 1488, 'Lumbac-Dimarao'),
(39506, 1488, 'Pindolonan'),
(39507, 1489, 'Bara-as'),
(39508, 1489, 'Biasong'),
(39509, 1489, 'Bulangos'),
(39510, 1489, 'Durian'),
(39511, 1489, 'Ilian'),
(39512, 1489, 'Liangan (Pob.)'),
(39513, 1489, 'Maganding'),
(39514, 1489, 'Maladi'),
(39515, 1489, 'Mapantao'),
(39516, 1489, 'Micalubo'),
(39517, 1489, 'Pindolonan'),
(39518, 1489, 'Punong'),
(39519, 1489, 'Ramitan'),
(39520, 1489, 'Torogan'),
(39521, 1489, 'Tual'),
(39522, 1489, 'Tuca'),
(39523, 1489, 'Ubanoban'),
(39524, 1489, 'Anas'),
(39525, 1489, 'Mimbalawag'),
(39526, 1490, 'Bagoaingud'),
(39527, 1490, 'Balaigay'),
(39528, 1490, 'Bualan'),
(39529, 1490, 'Cadingilan'),
(39530, 1490, 'Casalayan'),
(39531, 1490, 'Dala'),
(39532, 1490, 'Dilimbayan'),
(39533, 1490, 'Cabuntungan'),
(39534, 1490, 'Lamin'),
(39535, 1490, 'Diromoyod'),
(39536, 1490, 'Kabasaran (Pob.)'),
(39537, 1490, 'Nanagun'),
(39538, 1490, 'Mapantao-Balangas'),
(39539, 1490, 'Miniros'),
(39540, 1490, 'Pantaon'),
(39541, 1490, 'Pindolonan'),
(39542, 1490, 'Pitatanglan'),
(39543, 1490, 'Poctan'),
(39544, 1490, 'Singcara'),
(39545, 1490, 'Wago'),
(39546, 1490, 'Cadayonan'),
(39547, 1490, 'Cadingilan A'),
(39548, 1491, 'Poblacion'),
(39549, 1491, 'Bagumbayan'),
(39550, 1491, 'Bandara-Ingud'),
(39551, 1491, 'Comara'),
(39552, 1491, 'Frankfort'),
(39553, 1491, 'Lambanogan'),
(39554, 1491, 'Lico'),
(39555, 1491, 'Mansilano'),
(39556, 1491, 'Natangcopan'),
(39557, 1491, 'Pagonayan'),
(39558, 1491, 'Pagalamatan'),
(39559, 1491, 'Piagma'),
(39560, 1491, 'Punud'),
(39561, 1491, 'Ranao-Baning'),
(39562, 1491, 'Salam'),
(39563, 1491, 'Sagua-an'),
(39564, 1491, 'Sumugot'),
(39565, 1492, 'Bantalan'),
(39566, 1492, 'Bayog'),
(39567, 1492, 'Cadayonan'),
(39568, 1492, 'Dagonalan'),
(39569, 1492, 'Dimalama'),
(39570, 1492, 'Gayakay'),
(39571, 1492, 'Inodaran'),
(39572, 1492, 'Kalilangan'),
(39573, 1492, 'Kianibong'),
(39574, 1492, 'Kingan'),
(39575, 1492, 'Kitaon'),
(39576, 1492, 'Bagoaingud'),
(39577, 1492, 'Malinao'),
(39578, 1492, 'Malingon'),
(39579, 1492, 'Mama-an Pagalongan'),
(39580, 1492, 'Marawi'),
(39581, 1492, 'Maimbaguiang'),
(39582, 1492, 'Sigayan'),
(39583, 1492, 'Tagoloan Poblacion'),
(39584, 1493, 'Bakikis'),
(39585, 1493, 'Barao'),
(39586, 1493, 'Bongabong'),
(39587, 1493, 'Daguan'),
(39588, 1493, 'Inudaran'),
(39589, 1493, 'Kabaniakawan'),
(39590, 1493, 'Kapatagan'),
(39591, 1493, 'Lusain'),
(39592, 1493, 'Matimos'),
(39593, 1493, 'Minimao'),
(39594, 1493, 'Pinantao'),
(39595, 1493, 'Salaman'),
(39596, 1493, 'Sigayan'),
(39597, 1493, 'Tabuan'),
(39598, 1493, 'Upper Igabay'),
(39599, 1494, 'Bacayawan'),
(39600, 1494, 'Buta'),
(39601, 1494, 'Dinganun Guilopa'),
(39602, 1494, 'Lumbac'),
(39603, 1494, 'Malalis'),
(39604, 1494, 'Pagalongan'),
(39605, 1494, 'Tagoranao'),
(39606, 1495, 'Bangon'),
(39607, 1495, 'Beta'),
(39608, 1495, 'Calalon'),
(39609, 1495, 'Calipapa'),
(39610, 1495, 'Dilausan'),
(39611, 1495, 'Dimapaok'),
(39612, 1495, 'Lumbac Dilausan'),
(39613, 1495, 'Oriental Beta'),
(39614, 1495, 'Tringun'),
(39615, 1496, 'Dicalongan (Pob.)'),
(39616, 1496, 'Kakal'),
(39617, 1496, 'Kamasi'),
(39618, 1496, 'Kapinpilan'),
(39619, 1496, 'Kauran'),
(39620, 1496, 'Malatimon'),
(39621, 1496, 'Matagabong'),
(39622, 1496, 'Saniag'),
(39623, 1496, 'Tomicor'),
(39624, 1496, 'Tubak'),
(39625, 1496, 'Salman'),
(39626, 1497, 'Ampuan'),
(39627, 1497, 'Aratuc'),
(39628, 1497, 'Cabayuan'),
(39629, 1497, 'Calaan (Pob.)'),
(39630, 1497, 'Karim'),
(39631, 1497, 'Dinganen'),
(39632, 1497, 'Edcor'),
(39633, 1497, 'Kulimpang'),
(39634, 1497, 'Mataya'),
(39635, 1497, 'Minabay'),
(39636, 1497, 'Nuyo'),
(39637, 1497, 'Oring'),
(39638, 1497, 'Pantawan'),
(39639, 1497, 'Piers'),
(39640, 1497, 'Rumidas'),
(39641, 1498, 'Digal'),
(39642, 1498, 'Lower Siling'),
(39643, 1498, 'Maslabeng'),
(39644, 1498, 'Poblacion'),
(39645, 1498, 'Popol'),
(39646, 1498, 'Talitay'),
(39647, 1498, 'Upper Siling'),
(39648, 1499, 'Alip (Pob.)'),
(39649, 1499, 'Damawato'),
(39650, 1499, 'Katil'),
(39651, 1499, 'Malala'),
(39652, 1499, 'Mangadeg'),
(39653, 1499, 'Manindolo'),
(39654, 1499, 'Puya'),
(39655, 1499, 'Sepaka'),
(39656, 1499, 'Lomoyon'),
(39657, 1499, 'Kalumenga'),
(39658, 1499, 'Palao sa Buto'),
(39659, 1499, 'Damalusay'),
(39660, 1499, 'Bonawan'),
(39661, 1499, 'Bulod'),
(39662, 1499, 'Datang'),
(39663, 1499, 'Elbebe'),
(39664, 1499, 'Lipao'),
(39665, 1499, 'Madidis'),
(39666, 1499, 'Makat'),
(39667, 1499, 'Mao'),
(39668, 1499, 'Napok'),
(39669, 1499, 'Poblacion'),
(39670, 1499, 'Salendab'),
(39671, 1500, 'Alonganan'),
(39672, 1500, 'Ambadao'),
(39673, 1500, 'Balanakan'),
(39674, 1500, 'Balong'),
(39675, 1500, 'Buayan'),
(39676, 1500, 'Dado'),
(39677, 1500, 'Damabalas'),
(39678, 1500, 'Duaminanga'),
(39679, 1500, 'Kalipapa'),
(39680, 1500, 'Liong'),
(39681, 1500, 'Magaslong'),
(39682, 1500, 'Masigay'),
(39683, 1500, 'Montay'),
(39684, 1500, 'Poblacion'),
(39685, 1500, 'Reina Regente'),
(39686, 1500, 'Kanguan'),
(39687, 1501, 'Ambolodto'),
(39688, 1501, 'Awang'),
(39689, 1501, 'Badak'),
(39690, 1501, 'Bagoenged'),
(39691, 1501, 'Baka'),
(39692, 1501, 'Benolen'),
(39693, 1501, 'Bitu'),
(39694, 1501, 'Bongued'),
(39695, 1501, 'Bugawas'),
(39696, 1501, 'Capiton'),
(39697, 1501, 'Dados'),
(39698, 1501, 'Dalican Poblacion'),
(39699, 1501, 'Dinaig Proper'),
(39700, 1501, 'Dulangan'),
(39701, 1501, 'Kakar'),
(39702, 1501, 'Kenebeka'),
(39703, 1501, 'Kurintem'),
(39704, 1501, 'Kusiong'),
(39705, 1501, 'Labungan'),
(39706, 1501, 'Linek'),
(39707, 1501, 'Makir'),
(39708, 1501, 'Margues'),
(39709, 1501, 'Nekitan'),
(39710, 1501, 'Mompong'),
(39711, 1501, 'Sapalan'),
(39712, 1501, 'Semba'),
(39713, 1501, 'Sibuto'),
(39714, 1501, 'Sifaren'),
(39715, 1501, 'Tambak'),
(39716, 1501, 'Tamontaka'),
(39717, 1501, 'Tanuel'),
(39718, 1501, 'Tapian'),
(39719, 1501, 'Taviran'),
(39720, 1501, 'Tenonggos'),
(39721, 1502, 'Bagong'),
(39722, 1502, 'Bialong'),
(39723, 1502, 'Kuloy'),
(39724, 1502, 'Labu-labu'),
(39725, 1502, 'Lapok'),
(39726, 1502, 'Malingao'),
(39727, 1502, 'Poblacion'),
(39728, 1502, 'Satan'),
(39729, 1502, 'Tapikan'),
(39730, 1502, 'Timbangan'),
(39731, 1502, 'Tina'),
(39732, 1502, 'Poblacion I'),
(39733, 1502, 'Poblacion II'),
(39734, 1503, 'Bayanga Norte'),
(39735, 1503, 'Bayanga Sur'),
(39736, 1503, 'Bugasan Norte'),
(39737, 1503, 'Bugasan Sur (Pob.)'),
(39738, 1503, 'Kidama'),
(39739, 1503, 'Sapad'),
(39740, 1503, 'Langco'),
(39741, 1503, 'Langkong'),
(39742, 1504, 'Bagoenged'),
(39743, 1504, 'Buliok'),
(39744, 1504, 'Damalasak'),
(39745, 1504, 'Galakit'),
(39746, 1504, 'Inug-ug'),
(39747, 1504, 'Kalbugan'),
(39748, 1504, 'Kilangan'),
(39749, 1504, 'Kudal'),
(39750, 1504, 'Layog'),
(39751, 1504, 'Linandangan'),
(39752, 1504, 'Poblacion'),
(39753, 1504, 'Dalgan'),
(39754, 1505, 'Gadungan'),
(39755, 1505, 'Gumagadong Calawag'),
(39756, 1505, 'Guiday T. Biruar'),
(39757, 1505, 'Landasan'),
(39758, 1505, 'Limbayan'),
(39759, 1505, 'Bongo Island'),
(39760, 1505, 'Magsaysay'),
(39761, 1505, 'Making'),
(39762, 1505, 'Nituan'),
(39763, 1505, 'Orandang'),
(39764, 1505, 'Pinantao'),
(39765, 1505, 'Poblacion'),
(39766, 1505, 'Polloc'),
(39767, 1505, 'Tagudtongan'),
(39768, 1505, 'Tuca-Maror'),
(39769, 1505, 'Manion'),
(39770, 1505, 'Macasandag'),
(39771, 1505, 'Cotongan'),
(39772, 1505, 'Poblacion II'),
(39773, 1505, 'Samberen'),
(39774, 1505, 'Kabuan'),
(39775, 1505, 'Campo Islam'),
(39776, 1505, 'Datu Macarimbang Biruar'),
(39777, 1505, 'Gadunganpedpandaran'),
(39778, 1505, 'Moro Point'),
(39779, 1506, 'Alamada'),
(39780, 1506, 'Banatin'),
(39781, 1506, 'Banubo'),
(39782, 1506, 'Bulalo'),
(39783, 1506, 'Bulibod'),
(39784, 1506, 'Calsada'),
(39785, 1506, 'Crossing Simuay'),
(39786, 1506, 'Dalumangcob (Pob.)'),
(39787, 1506, 'Darapanan'),
(39788, 1506, 'Gang'),
(39789, 1506, 'Inawan'),
(39790, 1506, 'Kabuntalan'),
(39791, 1506, 'Kakar'),
(39792, 1506, 'Kapimpilan'),
(39793, 1506, 'Katidtuan'),
(39794, 1506, 'Katuli'),
(39795, 1506, 'Ladia'),
(39796, 1506, 'Limbo'),
(39797, 1506, 'Maidapa'),
(39798, 1506, 'Makaguiling'),
(39799, 1506, 'Katamlangan'),
(39800, 1506, 'Matengen'),
(39801, 1506, 'Mulaug'),
(39802, 1506, 'Nalinan'),
(39803, 1506, 'Nekitan'),
(39804, 1506, 'Olas'),
(39805, 1506, 'Panatan'),
(39806, 1506, 'Pigcalagan'),
(39807, 1506, 'Pigkelegan'),
(39808, 1506, 'Pinaring'),
(39809, 1506, 'Pingping'),
(39810, 1506, 'Raguisi'),
(39811, 1506, 'Rebuken'),
(39812, 1506, 'Salimbao'),
(39813, 1506, 'Sambolawan'),
(39814, 1506, 'Senditan'),
(39815, 1506, 'Ungap'),
(39816, 1506, 'Damaniog'),
(39817, 1506, 'Nara'),
(39818, 1507, 'Angkayamat'),
(39819, 1507, 'Barurao'),
(39820, 1507, 'Bulod'),
(39821, 1507, 'Darampua'),
(39822, 1507, 'Gadungan'),
(39823, 1507, 'Kulambog'),
(39824, 1507, 'Langgapanan'),
(39825, 1507, 'Masulot'),
(39826, 1507, 'Papakan'),
(39827, 1507, 'Tugal'),
(39828, 1507, 'Tukanakuden'),
(39829, 1507, 'Paldong'),
(39830, 1508, 'Bagumbayan'),
(39831, 1508, 'Dadtumog'),
(39832, 1508, 'Gambar'),
(39833, 1508, 'Ganta'),
(39834, 1508, 'Katidtuan'),
(39835, 1508, 'Langeban'),
(39836, 1508, 'Liong'),
(39837, 1508, 'Maitong'),
(39838, 1508, 'Matilak'),
(39839, 1508, 'Pagalungan'),
(39840, 1508, 'Payan'),
(39841, 1508, 'Pened'),
(39842, 1508, 'Pedtad'),
(39843, 1508, 'Poblacion'),
(39844, 1508, 'Upper Taviran'),
(39845, 1508, 'Buterin'),
(39846, 1508, 'Lower Taviran'),
(39847, 1509, 'Borongotan'),
(39848, 1509, 'Bayabas'),
(39849, 1509, 'Blensong'),
(39850, 1509, 'Bugabungan'),
(39851, 1509, 'Bungcog'),
(39852, 1509, 'Darugao'),
(39853, 1509, 'Ganasi'),
(39854, 1509, 'Kabakaba'),
(39855, 1509, 'Kibleg'),
(39856, 1509, 'Kibucay'),
(39857, 1509, 'Kiga'),
(39858, 1509, 'Kinitan'),
(39859, 1509, 'Mirab'),
(39860, 1509, 'Nangi'),
(39861, 1509, 'Nuro Poblacion'),
(39862, 1509, 'Bantek'),
(39863, 1509, 'Ranao Pilayan'),
(39864, 1509, 'Rempes'),
(39865, 1509, 'Renede'),
(39866, 1509, 'Renti'),
(39867, 1509, 'Rifao'),
(39868, 1509, 'Sefegefen'),
(39869, 1509, 'Tinungkaan'),
(39870, 1510, 'Boboguiron'),
(39871, 1510, 'Damablac'),
(39872, 1510, 'Fugotan'),
(39873, 1510, 'Fukol'),
(39874, 1510, 'Katibpuan'),
(39875, 1510, 'Kedati'),
(39876, 1510, 'Lanting'),
(39877, 1510, 'Linamunan'),
(39878, 1510, 'Marader'),
(39879, 1510, 'Binangga North'),
(39880, 1510, 'Binangga South'),
(39881, 1510, 'Talayan'),
(39882, 1510, 'Tamar'),
(39883, 1510, 'Tambunan I'),
(39884, 1510, 'Timbaluan'),
(39885, 1511, 'Kuya'),
(39886, 1511, 'Biarong'),
(39887, 1511, 'Bongo'),
(39888, 1511, 'Itaw'),
(39889, 1511, 'Kigan'),
(39890, 1511, 'Lamud'),
(39891, 1511, 'Looy'),
(39892, 1511, 'Pandan'),
(39893, 1511, 'Pilar'),
(39894, 1511, 'Romangaob (Pob.)'),
(39895, 1511, 'San Jose'),
(39896, 1512, 'Barira (Pob.)'),
(39897, 1512, 'Bualan'),
(39898, 1512, 'Gadung'),
(39899, 1512, 'Liong'),
(39900, 1512, 'Lipa'),
(39901, 1512, 'Lipawan'),
(39902, 1512, 'Marang'),
(39903, 1512, 'Nabalawag'),
(39904, 1512, 'Rominimbang'),
(39905, 1512, 'Togaig'),
(39906, 1512, 'Minabay'),
(39907, 1512, 'Korosoyan'),
(39908, 1512, 'Lamin'),
(39909, 1512, 'Panggao'),
(39910, 1513, 'Badak'),
(39911, 1513, 'Bulod'),
(39912, 1513, 'Kaladturan'),
(39913, 1513, 'Kulasi'),
(39914, 1513, 'Lao-lao'),
(39915, 1513, 'Lasangan'),
(39916, 1513, 'Lower Idtig'),
(39917, 1513, 'Lumabao'),
(39918, 1513, 'Makainis'),
(39919, 1513, 'Midconding'),
(39920, 1513, 'Midpandacan'),
(39921, 1513, 'Panosolen'),
(39922, 1513, 'Ramcor'),
(39923, 1513, 'Tonggol'),
(39924, 1513, 'Pidtiguian'),
(39925, 1513, 'Quipolot'),
(39926, 1513, 'Sadangen'),
(39927, 1513, 'Sumakubay'),
(39928, 1513, 'Upper Lasangan'),
(39929, 1514, 'Bagumbong'),
(39930, 1514, 'Dabenayan'),
(39931, 1514, 'Daladap'),
(39932, 1514, 'Dasikil'),
(39933, 1514, 'Liab'),
(39934, 1514, 'Libutan'),
(39935, 1514, 'Lusay'),
(39936, 1514, 'Mamasapano'),
(39937, 1514, 'Manongkaling'),
(39938, 1514, 'Pidsandawan'),
(39939, 1514, 'Pimbalakan'),
(39940, 1514, 'Sapakan'),
(39941, 1514, 'Tuka'),
(39942, 1514, 'Tukanalipao'),
(39943, 1515, 'Bintan'),
(39944, 1515, 'Gadungan'),
(39945, 1515, 'Kiladap'),
(39946, 1515, 'Kilalan'),
(39947, 1515, 'Kuden'),
(39948, 1515, 'Makadayon'),
(39949, 1515, 'Manggay'),
(39950, 1515, 'Pageda'),
(39951, 1515, 'Talitay'),
(39952, 1516, 'Balatungkayo'),
(39953, 1516, 'Bulit'),
(39954, 1516, 'Bulod'),
(39955, 1516, 'Dungguan'),
(39956, 1516, 'Limbalud'),
(39957, 1516, 'Maridagao'),
(39958, 1516, 'Nabundas'),
(39959, 1516, 'Pagagawan'),
(39960, 1516, 'Talapas'),
(39961, 1516, 'Talitay'),
(39962, 1516, 'Tunggol'),
(39963, 1517, 'Damakling'),
(39964, 1517, 'Damalusay'),
(39965, 1517, 'Paglat'),
(39966, 1517, 'Upper Idtig'),
(39967, 1517, 'Campo'),
(39968, 1517, 'Kakal'),
(39969, 1517, 'Salam'),
(39970, 1517, 'Tual'),
(39971, 1518, 'Balut'),
(39972, 1518, 'Boliok'),
(39973, 1518, 'Bungabong'),
(39974, 1518, 'Dagurongan'),
(39975, 1518, 'Kirkir'),
(39976, 1518, 'Macabico'),
(39977, 1518, 'Namuken'),
(39978, 1518, 'Simuay/Seashore'),
(39979, 1518, 'Solon'),
(39980, 1518, 'Tambo'),
(39981, 1518, 'Tapayan'),
(39982, 1518, 'Tariken'),
(39983, 1518, 'Tuka'),
(39984, 1519, 'Ahan'),
(39985, 1519, 'Bagan'),
(39986, 1519, 'Datalpandan'),
(39987, 1519, 'Kalumamis'),
(39988, 1519, 'Kateman'),
(39989, 1519, 'Lambayao'),
(39990, 1519, 'Macasampen'),
(39991, 1519, 'Muslim'),
(39992, 1519, 'Muti'),
(39993, 1519, 'Sampao'),
(39994, 1519, 'Tambunan II'),
(39995, 1520, 'Dapiawan'),
(39996, 1520, 'Elian'),
(39997, 1520, 'Gawang'),
(39998, 1520, 'Kabengi'),
(39999, 1520, 'Kitango'),
(40000, 1520, 'Kitapok'),
(40001, 1520, 'Madia'),
(40002, 1520, 'Salbu'),
(40003, 1521, 'Bulayan'),
(40004, 1521, 'Iganagampong'),
(40005, 1521, 'Macalag'),
(40006, 1521, 'Maitumaig'),
(40007, 1521, 'Malangog'),
(40008, 1521, 'Meta'),
(40009, 1521, 'Panangeti'),
(40010, 1521, 'Tuntungan'),
(40011, 1522, 'Banaba'),
(40012, 1522, 'Dimampao'),
(40013, 1522, 'Guinibon'),
(40014, 1522, 'Kaya-kaya'),
(40015, 1522, 'Maganoy'),
(40016, 1522, 'Mao'),
(40017, 1522, 'Maranding'),
(40018, 1522, 'Sugadol'),
(40019, 1522, 'Talisawa'),
(40020, 1522, 'Tukanolocong'),
(40021, 1523, 'Baital'),
(40022, 1523, 'Bakat'),
(40023, 1523, 'Dapantis'),
(40024, 1523, 'Gaunan'),
(40025, 1523, 'Malibpolok'),
(40026, 1523, 'Mileb'),
(40027, 1523, 'Panadtaban'),
(40028, 1523, 'Pidsandawan'),
(40029, 1523, 'Sampao'),
(40030, 1523, 'Sapakan (Pob.)'),
(40031, 1523, 'Tabungao'),
(40032, 1524, 'Kinimi'),
(40033, 1524, 'Laguitan'),
(40034, 1524, 'Lapaken'),
(40035, 1524, 'Matuber'),
(40036, 1524, 'Meti'),
(40037, 1524, 'Nalkan'),
(40038, 1524, 'Penansaran'),
(40039, 1524, 'Resa'),
(40040, 1524, 'Sedem'),
(40041, 1524, 'Sinipak'),
(40042, 1524, 'Tambak'),
(40043, 1524, 'Tubuan'),
(40044, 1524, 'Pura'),
(40045, 1525, 'Adaon'),
(40046, 1525, 'Brar'),
(40047, 1525, 'Mapayag'),
(40048, 1525, 'Midtimbang (Pob.)'),
(40049, 1525, 'Nunangan'),
(40050, 1525, 'Tugal'),
(40051, 1525, 'Tulunan'),
(40052, 1526, 'Daladagan'),
(40053, 1526, 'Kalian'),
(40054, 1526, 'Luayan'),
(40055, 1526, 'Paitan'),
(40056, 1526, 'Panapan'),
(40057, 1526, 'Tenok'),
(40058, 1526, 'Tinambulan'),
(40059, 1526, 'Tumbao'),
(40060, 1527, 'Kabuling'),
(40061, 1527, 'Kayaga'),
(40062, 1527, 'Kayupo'),
(40063, 1527, 'Lepak'),
(40064, 1527, 'Lower Dilag'),
(40065, 1527, 'Malangit'),
(40066, 1527, 'Pandag'),
(40067, 1527, 'Upper Dilag'),
(40068, 1528, 'Balong'),
(40069, 1528, 'Damatog'),
(40070, 1528, 'Gayonga'),
(40071, 1528, 'Guiawa'),
(40072, 1528, 'Indatuan'),
(40073, 1528, 'Kapimpilan'),
(40074, 1528, 'Libungan'),
(40075, 1528, 'Montay'),
(40076, 1528, 'Paulino Labio'),
(40077, 1528, 'Sabaken'),
(40078, 1528, 'Tumaguinting'),
(40079, 1529, 'Kubentong'),
(40080, 1529, 'Labu-labu I'),
(40081, 1529, 'Labu-labu II'),
(40082, 1529, 'Limpongo'),
(40083, 1529, 'Sayap'),
(40084, 1529, 'Taib'),
(40085, 1529, 'Talibadok'),
(40086, 1529, 'Tuayan'),
(40087, 1529, 'Tuayan I'),
(40088, 1529, 'Macalag'),
(40089, 1529, 'Tuntungan'),
(40090, 1530, 'Alonganan'),
(40091, 1530, 'Andavit'),
(40092, 1530, 'Balanakan'),
(40093, 1530, 'Buayan'),
(40094, 1530, 'Butilen'),
(40095, 1530, 'Dado'),
(40096, 1530, 'Damabalas'),
(40097, 1530, 'Duaminanga'),
(40098, 1530, 'Kalipapa'),
(40099, 1530, 'Liong'),
(40100, 1530, 'Magaslong'),
(40101, 1530, 'Masigay'),
(40102, 1530, 'Pagatin'),
(40103, 1530, 'Pandi'),
(40104, 1530, 'Penditen'),
(40105, 1530, 'Sambulawan'),
(40106, 1530, 'Tee'),
(40107, 1531, 'Bakat'),
(40108, 1531, 'Dale-Bong'),
(40109, 1531, 'Dasawao'),
(40110, 1531, 'Datu Bakal'),
(40111, 1531, 'Datu Kilay'),
(40112, 1531, 'Duguengen'),
(40113, 1531, 'Ganta'),
(40114, 1531, 'Inaladan'),
(40115, 1531, 'Linantangan'),
(40116, 1531, 'Nabundas'),
(40117, 1531, 'Pagatin'),
(40118, 1531, 'Pamalian'),
(40119, 1531, 'Pikeg'),
(40120, 1531, 'Pusao'),
(40121, 1531, 'Libutan'),
(40122, 1531, 'Pagatin I'),
(40123, 1532, 'Adjid'),
(40124, 1532, 'Bangalan'),
(40125, 1532, 'Bato-bato'),
(40126, 1532, 'Buanza'),
(40127, 1532, 'Bud-Taran'),
(40128, 1532, 'Bunut'),
(40129, 1532, 'Jati-Tunggal'),
(40130, 1532, 'Kabbon Maas'),
(40131, 1532, 'Kagay'),
(40132, 1532, 'Kajatian'),
(40133, 1532, 'Kan Islam'),
(40134, 1532, 'Kandang Tukay'),
(40135, 1532, 'Karawan'),
(40136, 1532, 'Katian'),
(40137, 1532, 'Kuppong'),
(40138, 1532, 'Lambayong'),
(40139, 1532, 'Langpas'),
(40140, 1532, 'Licup'),
(40141, 1532, 'Malimbaya'),
(40142, 1532, 'Manggis'),
(40143, 1532, 'Manilop'),
(40144, 1532, 'Paligue'),
(40145, 1532, 'Panabuan'),
(40146, 1532, 'Pasil'),
(40147, 1532, 'Poblacion'),
(40148, 1532, 'Sapah Malaum'),
(40149, 1532, 'Panglima Misuari'),
(40150, 1532, 'Sionogan'),
(40151, 1532, 'Tagbak'),
(40152, 1532, 'Timbangan'),
(40153, 1532, 'Tubig Dakulah'),
(40154, 1532, 'Tubig Parang'),
(40155, 1532, 'Tumantangis'),
(40156, 1532, 'Sawaki'),
(40157, 1533, 'Alat'),
(40158, 1533, 'Asturias'),
(40159, 1533, 'Bus-bus'),
(40160, 1533, 'Chinese Pier'),
(40161, 1533, 'San Raymundo'),
(40162, 1533, 'Takut-takut'),
(40163, 1533, 'Tulay'),
(40164, 1533, 'Walled City (Pob.)'),
(40165, 1534, 'Kambing'),
(40166, 1534, 'Kanlagay'),
(40167, 1534, 'Pang'),
(40168, 1534, 'Pangdan Pangdan'),
(40169, 1534, 'Pitogo'),
(40170, 1534, 'Karungdong (Pob.)'),
(40171, 1534, 'Tunggol'),
(40172, 1534, 'Masjid Bayle'),
(40173, 1534, 'Masjid Punjungan'),
(40174, 1535, 'Bual'),
(40175, 1535, 'Kan-Bulak'),
(40176, 1535, 'Kan-Mindus'),
(40177, 1535, 'Lambago'),
(40178, 1535, 'Lianutan'),
(40179, 1535, 'Lingah'),
(40180, 1535, 'Mananti'),
(40181, 1535, 'Tubig-Puti (Pob.)'),
(40182, 1535, 'Tandu-Bato'),
(40183, 1535, 'Tulayan Island'),
(40184, 1535, 'Guimbaun'),
(40185, 1535, 'Niog-niog'),
(40186, 1536, 'Anak Jati'),
(40187, 1536, 'Bato Ugis'),
(40188, 1536, 'Bualo Lahi'),
(40189, 1536, 'Bualo Lipid'),
(40190, 1536, 'Bulabog'),
(40191, 1536, 'Ratag Limbon'),
(40192, 1536, 'Duhol Kabbon'),
(40193, 1536, 'Gulangan'),
(40194, 1536, 'Ipil'),
(40195, 1536, 'Kandang'),
(40196, 1536, 'Kapok-Punggol'),
(40197, 1536, 'Kulasi'),
(40198, 1536, 'Labah'),
(40199, 1536, 'Lagasan Asibih'),
(40200, 1536, 'Lantong'),
(40201, 1536, 'Laud Kulasi'),
(40202, 1536, 'Laum Maimbung'),
(40203, 1536, 'Lunggang'),
(40204, 1536, 'Lower Tambaking'),
(40205, 1536, 'Lapa'),
(40206, 1536, 'Matatal'),
(40207, 1536, 'Patao'),
(40208, 1536, 'Poblacion'),
(40209, 1536, 'Tabu-Bato'),
(40210, 1536, 'Tandu Patong'),
(40211, 1536, 'Tubig-Samin'),
(40212, 1536, 'Upper Tambaking'),
(40213, 1537, 'Bubuan'),
(40214, 1537, 'Kabuukan'),
(40215, 1537, 'Pag-asinan'),
(40216, 1537, 'Bangas (Pob.)'),
(40217, 1537, 'Teomabal'),
(40218, 1538, 'Asin'),
(40219, 1538, 'Bakud'),
(40220, 1538, 'Bangday'),
(40221, 1538, 'Baunoh'),
(40222, 1538, 'Bitanag'),
(40223, 1538, 'Bud Seit'),
(40224, 1538, 'Bulangsi'),
(40225, 1538, 'Datag'),
(40226, 1538, 'Kamalig'),
(40227, 1538, 'Kan Ukol'),
(40228, 1538, 'Kan Asaali'),
(40229, 1538, 'Kan-Dayok'),
(40230, 1538, 'Kan-Sipat'),
(40231, 1538, 'Kawasan'),
(40232, 1538, 'Kulay-kulay'),
(40233, 1538, 'Lakit'),
(40234, 1538, 'Lunggang'),
(40235, 1538, 'Parang'),
(40236, 1538, 'Lower Patibulan'),
(40237, 1538, 'Upper Patibulan'),
(40238, 1538, 'Pugad Manaul'),
(40239, 1538, 'Puhagan'),
(40240, 1538, 'Seit Higad'),
(40241, 1538, 'Seit Lake (Pob.)'),
(40242, 1538, 'Su-uh'),
(40243, 1538, 'Tabu Manuk'),
(40244, 1538, 'Tandu-tandu'),
(40245, 1538, 'Tayungan'),
(40246, 1538, 'Tinah'),
(40247, 1538, 'Tubig Gantang'),
(40248, 1538, 'Tubig Jati'),
(40249, 1539, 'Alu Bunah'),
(40250, 1539, 'Bangkilay'),
(40251, 1539, 'Kawitan'),
(40252, 1539, 'Kehi Niog'),
(40253, 1539, 'Lantong Babag'),
(40254, 1539, 'Lumah Dapdap'),
(40255, 1539, 'Pandan Niog'),
(40256, 1539, 'Panducan'),
(40257, 1539, 'Panitikan'),
(40258, 1539, 'Patutol'),
(40259, 1539, 'Simbahan (Pob.)'),
(40260, 1539, 'Se-ipang'),
(40261, 1539, 'Suang Bunah'),
(40262, 1539, 'Tonggasang'),
(40263, 1539, 'Tubig Nonok'),
(40264, 1539, 'Tubig Sallang'),
(40265, 1540, 'Kaha'),
(40266, 1540, 'Alu Pangkoh'),
(40267, 1540, 'Bagsak'),
(40268, 1540, 'Bawisan'),
(40269, 1540, 'Biid'),
(40270, 1540, 'Bukid'),
(40271, 1540, 'Buli Bawang'),
(40272, 1540, 'Buton'),
(40273, 1540, 'Buton Mahablo'),
(40274, 1540, 'Danapa'),
(40275, 1540, 'Duyan Kabao'),
(40276, 1540, 'Gimba Lagasan'),
(40277, 1540, 'Kahoy Sinah'),
(40278, 1540, 'Kanaway'),
(40279, 1540, 'Kutah Sairap'),
(40280, 1540, 'Lagasan Higad'),
(40281, 1540, 'Laum Buwahan'),
(40282, 1540, 'Laum Suwah'),
(40283, 1540, 'Alu Layag-Layag'),
(40284, 1540, 'Liang'),
(40285, 1540, 'Linuho'),
(40286, 1540, 'Lipunos'),
(40287, 1540, 'Lungan Gitong'),
(40288, 1540, 'Lumbaan Mahaba'),
(40289, 1540, 'Lupa Abu'),
(40290, 1540, 'Nonokan'),
(40291, 1540, 'Paugan'),
(40292, 1540, 'Payuhan'),
(40293, 1540, 'Piyahan'),
(40294, 1540, 'Poblacion'),
(40295, 1540, 'Saldang'),
(40296, 1540, 'Sampunay'),
(40297, 1540, 'Silangkan'),
(40298, 1540, 'Taingting'),
(40299, 1540, 'Tikong'),
(40300, 1540, 'Tukay'),
(40301, 1540, 'Tumangas'),
(40302, 1540, 'Wanni Piyanjihan'),
(40303, 1540, 'Lanao Dakula'),
(40304, 1540, 'Lower Sampunay'),
(40305, 1541, 'Andalan'),
(40306, 1541, 'Daungdong'),
(40307, 1541, 'Kamawi'),
(40308, 1541, 'Kanjarang'),
(40309, 1541, 'Kayawan (Pob.)'),
(40310, 1541, 'Kiput'),
(40311, 1541, 'Likud'),
(40312, 1541, 'Luuk-tulay'),
(40313, 1541, 'Niog-niog'),
(40314, 1541, 'Patian'),
(40315, 1541, 'Pisak-pisak'),
(40316, 1541, 'Saimbangon'),
(40317, 1541, 'Sangkap'),
(40318, 1541, 'Timuddas'),
(40319, 1542, 'Anuling'),
(40320, 1542, 'Bakong'),
(40321, 1542, 'Bangkal'),
(40322, 1542, 'Bonbon'),
(40323, 1542, 'Buhanginan'),
(40324, 1542, 'Bungkaung'),
(40325, 1542, 'Danag'),
(40326, 1542, 'Igasan'),
(40327, 1542, 'Kabbon Takas'),
(40328, 1542, 'Kadday Mampallam'),
(40329, 1542, 'Kan Ague'),
(40330, 1542, 'Kaunayan'),
(40331, 1542, 'Langhub'),
(40332, 1542, 'Latih'),
(40333, 1542, 'Liang'),
(40334, 1542, 'Maligay'),
(40335, 1542, 'Mauboh'),
(40336, 1542, 'Pangdanon'),
(40337, 1542, 'Panglayahan'),
(40338, 1542, 'Pansul'),
(40339, 1542, 'Patikul Higad'),
(40340, 1542, 'Sandah'),
(40341, 1542, 'Taglibi (Pob.)'),
(40342, 1542, 'Tandu-Bagua'),
(40343, 1542, 'Tanum'),
(40344, 1542, 'Taung'),
(40345, 1542, 'Timpok'),
(40346, 1542, 'Tugas'),
(40347, 1542, 'Umangay'),
(40348, 1542, 'Gandasuli'),
(40349, 1543, 'Bakud'),
(40350, 1543, 'Buan'),
(40351, 1543, 'Bulansing Tara'),
(40352, 1543, 'Bulihkullul'),
(40353, 1543, 'Campo Islam'),
(40354, 1543, 'Poblacion'),
(40355, 1543, 'Duggo'),
(40356, 1543, 'Duhol Tara'),
(40357, 1543, 'East Kungtad'),
(40358, 1543, 'East Sisangat'),
(40359, 1543, 'Ipil'),
(40360, 1543, 'Jambangan'),
(40361, 1543, 'Kabubu'),
(40362, 1543, 'Kong-Kong Laminusa'),
(40363, 1543, 'Kud-kud'),
(40364, 1543, 'Kungtad West'),
(40365, 1543, 'Luuk Laminusa'),
(40366, 1543, 'Latung'),
(40367, 1543, 'Luuk Tara'),
(40368, 1543, 'Manta'),
(40369, 1543, 'Minapan'),
(40370, 1543, 'Nipa-nipa'),
(40371, 1543, 'North Laud'),
(40372, 1543, 'North Manta'),
(40373, 1543, 'North Musu Laud'),
(40374, 1543, 'North Silumpak'),
(40375, 1543, 'Punungan'),
(40376, 1543, 'Pislong'),
(40377, 1543, 'Ratag'),
(40378, 1543, 'Sablay'),
(40379, 1543, 'Sarukot'),
(40380, 1543, 'Siburi'),
(40381, 1543, 'Singko'),
(40382, 1543, 'Siolakan'),
(40383, 1543, 'Siundoh'),
(40384, 1543, 'Siowing'),
(40385, 1543, 'Sipanding'),
(40386, 1543, 'Sisangat'),
(40387, 1543, 'South Musu Laud'),
(40388, 1543, 'South Silumpak'),
(40389, 1543, 'Southwestern Bulikullul'),
(40390, 1543, 'Subah Buaya'),
(40391, 1543, 'Tampakan Laminusa'),
(40392, 1543, 'Tengah Laminusa'),
(40393, 1543, 'Tong Laminusa'),
(40394, 1543, 'Tong-tong'),
(40395, 1543, 'Tonglabah'),
(40396, 1543, 'Tubig Kutah'),
(40397, 1543, 'Tulling'),
(40398, 1543, 'Puukan Laminusa'),
(40399, 1544, 'Andalan'),
(40400, 1544, 'Bagsak'),
(40401, 1544, 'Bandang'),
(40402, 1544, 'Bilaan (Pob.)'),
(40403, 1544, 'Bud Bunga'),
(40404, 1544, 'Buntod'),
(40405, 1544, 'Buroh'),
(40406, 1544, 'Dalih'),
(40407, 1544, 'Gata'),
(40408, 1544, 'Kabatuhan Tiis'),
(40409, 1544, 'Kabungkol'),
(40410, 1544, 'Kagay'),
(40411, 1544, 'Kahawa'),
(40412, 1544, 'Kandaga'),
(40413, 1544, 'Kanlibot'),
(40414, 1544, 'Kiutaan'),
(40415, 1544, 'Kuhaw'),
(40416, 1544, 'Kulamboh'),
(40417, 1544, 'Kuttong'),
(40418, 1544, 'Lagtoh'),
(40419, 1544, 'Lambanah'),
(40420, 1544, 'Liban'),
(40421, 1544, 'Liu-Bud Pantao'),
(40422, 1544, 'Lower Binuang'),
(40423, 1544, 'Lower Kamuntayan'),
(40424, 1544, 'Lower Laus'),
(40425, 1544, 'Lower Sinumaan'),
(40426, 1544, 'Lower Talipao'),
(40427, 1544, 'Lumbayao'),
(40428, 1544, 'Lumping Pigih Daho'),
(40429, 1544, 'Lungkiaban'),
(40430, 1544, 'Mabahay'),
(40431, 1544, 'Mahala'),
(40432, 1544, 'Mampallam'),
(40433, 1544, 'Marsada'),
(40434, 1544, 'Mauboh'),
(40435, 1544, 'Mungit-mungit'),
(40436, 1544, 'Niog-Sangahan'),
(40437, 1544, 'Pantao'),
(40438, 1544, 'Samak'),
(40439, 1544, 'Talipao Proper'),
(40440, 1544, 'Tampakan'),
(40441, 1544, 'Tiis'),
(40442, 1544, 'Tinggah'),
(40443, 1544, 'Tubod'),
(40444, 1544, 'Tuyang'),
(40445, 1544, 'Upper Kamuntayan'),
(40446, 1544, 'Upper Laus'),
(40447, 1544, 'Upper Sinumaan'),
(40448, 1544, 'Upper Talipao'),
(40449, 1544, 'Kabatuhan Bilaan'),
(40450, 1544, 'Upper Binuang'),
(40451, 1545, 'Banting'),
(40452, 1545, 'Hawan'),
(40453, 1545, 'Alu-Kabingaan'),
(40454, 1545, 'Kalang (Pob.)'),
(40455, 1545, 'Kamaunggi'),
(40456, 1545, 'Kanmangon'),
(40457, 1545, 'Kanaway'),
(40458, 1545, 'Kaumpang'),
(40459, 1545, 'Pagatpat'),
(40460, 1545, 'Pangdan'),
(40461, 1545, 'Puok'),
(40462, 1545, 'Sayli'),
(40463, 1545, 'Sumambat'),
(40464, 1545, 'Tangkapaan'),
(40465, 1545, 'Tulakan'),
(40466, 1546, 'Bakkaan'),
(40467, 1546, 'Bangalaw'),
(40468, 1546, 'Danao'),
(40469, 1546, 'Dungon'),
(40470, 1546, 'Kahikukuk'),
(40471, 1546, 'Luuk (Pob.)'),
(40472, 1546, 'North Paarol'),
(40473, 1546, 'Sigumbal'),
(40474, 1546, 'South Paarol'),
(40475, 1546, 'Tabialan'),
(40476, 1546, 'Tainga-Bakkao'),
(40477, 1546, 'Tambun-bun'),
(40478, 1546, 'Tinutungan'),
(40479, 1546, 'Tattalan'),
(40480, 1547, 'Gagguil'),
(40481, 1547, 'Gata-gata'),
(40482, 1547, 'Kamih-Pungud'),
(40483, 1547, 'Lihbug Kabaw'),
(40484, 1547, 'Lubuk-lubuk'),
(40485, 1547, 'Pandakan'),
(40486, 1547, 'Punay (Pob.)'),
(40487, 1547, 'Tiptipon'),
(40488, 1547, 'Jinggan'),
(40489, 1547, 'Likbah'),
(40490, 1547, 'Marsada'),
(40491, 1547, 'Paiksa'),
(40492, 1548, 'Alu Bus-Bus'),
(40493, 1548, 'Alu-Duyong'),
(40494, 1548, 'Bas Lugus'),
(40495, 1548, 'Gapas Rugasan'),
(40496, 1548, 'Gapas Tubig Tuwak'),
(40497, 1548, 'Huwit-huwit Proper'),
(40498, 1548, 'Huwit-huwit Bas Nonok'),
(40499, 1548, 'Kutah Parang'),
(40500, 1548, 'Laha'),
(40501, 1548, 'Larap'),
(40502, 1548, 'Lugus Proper'),
(40503, 1548, 'Mangkallay'),
(40504, 1548, 'Mantan'),
(40505, 1548, 'Pait'),
(40506, 1548, 'Parian Kayawan'),
(40507, 1548, 'Sibul'),
(40508, 1548, 'Tingkangan'),
(40509, 1549, 'Baligtang'),
(40510, 1549, 'Bud Sibaud'),
(40511, 1549, 'Hambilan'),
(40512, 1549, 'Kabbon'),
(40513, 1549, 'Lahi'),
(40514, 1549, 'Lapak'),
(40515, 1549, 'Malanta'),
(40516, 1549, 'Mamanok'),
(40517, 1549, 'North Manubul'),
(40518, 1549, 'Parian Dakula'),
(40519, 1549, 'Sibaud Proper'),
(40520, 1549, 'Siganggang'),
(40521, 1549, 'South Manubul'),
(40522, 1549, 'Suba-suba'),
(40523, 1549, 'Tenga Manubul'),
(40524, 1549, 'Laud Sibaud'),
(40525, 1550, 'Andalan'),
(40526, 1550, 'Angilan'),
(40527, 1550, 'Capual Island'),
(40528, 1550, 'Huwit-huwit'),
(40529, 1550, 'Lahing-Lahing'),
(40530, 1550, 'Niangkaan'),
(40531, 1550, 'Sucuban'),
(40532, 1550, 'Tangkuan'),
(40533, 1551, 'Balimbing Proper'),
(40534, 1551, 'Batu-batu (Pob.)'),
(40535, 1551, 'Buan'),
(40536, 1551, 'Dungon'),
(40537, 1551, 'Luuk Buntal'),
(40538, 1551, 'Parangan'),
(40539, 1551, 'Tabunan'),
(40540, 1551, 'Tungbangkaw'),
(40541, 1551, 'Bauno Garing'),
(40542, 1551, 'Belatan Halu'),
(40543, 1551, 'Karaha'),
(40544, 1551, 'Kulape'),
(40545, 1551, 'Liyaburan'),
(40546, 1551, 'Magsaggaw'),
(40547, 1551, 'Malacca'),
(40548, 1551, 'Sumangday'),
(40549, 1551, 'Tundon'),
(40550, 1552, 'Ipil'),
(40551, 1552, 'Kamagong'),
(40552, 1552, 'Karungdong'),
(40553, 1552, 'Lakit Lakit'),
(40554, 1552, 'Lamion'),
(40555, 1552, 'Lapid Lapid'),
(40556, 1552, 'Lato Lato'),
(40557, 1552, 'Luuk Pandan'),
(40558, 1552, 'Luuk Tulay'),
(40559, 1552, 'Malassa'),
(40560, 1552, 'Mandulan'),
(40561, 1552, 'Masantong'),
(40562, 1552, 'Montay Montay'),
(40563, 1552, 'Pababag'),
(40564, 1552, 'Pagasinan'),
(40565, 1552, 'Pahut'),
(40566, 1552, 'Pakias'),
(40567, 1552, 'Paniongan'),
(40568, 1552, 'Pasiagan'),
(40569, 1552, 'Bongao Poblacion'),
(40570, 1552, 'Sanga-sanga'),
(40571, 1552, 'Silubog'),
(40572, 1552, 'Simandagit'),
(40573, 1552, 'Sumangat'),
(40574, 1552, 'Tarawakan'),
(40575, 1552, 'Tongsinah'),
(40576, 1552, 'Tubig Basag'),
(40577, 1552, 'Ungus-ungus'),
(40578, 1552, 'Lagasan'),
(40579, 1552, 'Nalil'),
(40580, 1552, 'Pagatpat'),
(40581, 1552, 'Pag-asa'),
(40582, 1552, 'Tubig Tanah'),
(40583, 1552, 'Tubig-Boh'),
(40584, 1552, 'Tubig-Mampallam'),
(40585, 1553, 'Boki'),
(40586, 1553, 'Duhul Batu'),
(40587, 1553, 'Kompang'),
(40588, 1553, 'Lupa Pula (Pob.)'),
(40589, 1553, 'Guppah'),
(40590, 1553, 'Mahalo'),
(40591, 1553, 'Pawan'),
(40592, 1553, 'Sikub'),
(40593, 1553, 'Tabulian'),
(40594, 1553, 'Tanduan'),
(40595, 1553, 'Umus Mataha'),
(40596, 1553, 'Erok-erok'),
(40597, 1553, 'Liyubud'),
(40598, 1553, 'Lubbak Parang'),
(40599, 1553, 'Sapa'),
(40600, 1554, 'Bakong'),
(40601, 1554, 'Manuk Mangkaw'),
(40602, 1554, 'Mongkay'),
(40603, 1554, 'Tampakan (Pob.)'),
(40604, 1554, 'Tonggosong'),
(40605, 1554, 'Tubig Indangan'),
(40606, 1554, 'Ubol'),
(40607, 1554, 'Doh-Tong'),
(40608, 1554, 'Luuk Datan'),
(40609, 1554, 'Maruwa'),
(40610, 1554, 'Pagasinan'),
(40611, 1554, 'Panglima Mastul'),
(40612, 1554, 'Sukah-Bulan'),
(40613, 1554, 'Timundon'),
(40614, 1554, 'Bagid'),
(40615, 1555, 'South Larap'),
(40616, 1555, 'Sitangkai Poblacion'),
(40617, 1555, 'Tongmageng'),
(40618, 1555, 'Tongusong'),
(40619, 1555, 'Datu Baguinda Putih'),
(40620, 1555, 'Imam Sapie'),
(40621, 1555, 'North Larap'),
(40622, 1555, 'Panglima Alari'),
(40623, 1555, 'Sipangkot'),
(40624, 1556, 'Babagan'),
(40625, 1556, 'Bengkol'),
(40626, 1556, 'Bintawlan'),
(40627, 1556, 'Bohe'),
(40628, 1556, 'Bubuan'),
(40629, 1556, 'Bunay Bunay Tong'),
(40630, 1556, 'Bunay Bunay Lookan'),
(40631, 1556, 'Bunay Bunay Center'),
(40632, 1556, 'Lahad Dampong'),
(40633, 1556, 'East Talisay'),
(40634, 1556, 'Nunuk'),
(40635, 1556, 'Laitan'),
(40636, 1556, 'Lambi-lambian'),
(40637, 1556, 'Laud'),
(40638, 1556, 'Likud Tabawan'),
(40639, 1556, 'Nusa-nusa'),
(40640, 1556, 'Nusa'),
(40641, 1556, 'Pampang'),
(40642, 1556, 'Putat'),
(40643, 1556, 'Sollogan'),
(40644, 1556, 'Talisay'),
(40645, 1556, 'Tampakan Dampong'),
(40646, 1556, 'Tinda-tindahan'),
(40647, 1556, 'Tong Tampakan'),
(40648, 1556, 'Tubig Dayang Center'),
(40649, 1556, 'Tubig Dayang Riverside'),
(40650, 1556, 'Tubig Dayang'),
(40651, 1556, 'Tukkai'),
(40652, 1556, 'Unas-unas'),
(40653, 1556, 'Likud Dampong'),
(40654, 1556, 'Tangngah'),
(40655, 1557, 'Baliungan'),
(40656, 1557, 'Kakoong'),
(40657, 1557, 'Kepeng'),
(40658, 1557, 'Lahay-lahay'),
(40659, 1557, 'Naungan'),
(40660, 1557, 'Sallangan'),
(40661, 1557, 'Sapa'),
(40662, 1557, 'Silantup'),
(40663, 1557, 'Tapian'),
(40664, 1557, 'Tongbangkaw'),
(40665, 1557, 'Tangngah'),
(40666, 1557, 'Ballak'),
(40667, 1557, 'Butun'),
(40668, 1557, 'Himbah'),
(40669, 1557, 'Kalang-kalang'),
(40670, 1557, 'Salamat'),
(40671, 1557, 'Sibakloon'),
(40672, 1557, 'Tandubato'),
(40673, 1557, 'Tapian Sukah'),
(40674, 1557, 'Taruk'),
(40675, 1558, 'Taganak Poblacion'),
(40676, 1558, 'Likud Bakkao'),
(40677, 1559, 'Bakong'),
(40678, 1559, 'Bas-bas Proper'),
(40679, 1559, 'Basnunuk'),
(40680, 1559, 'Darussalam'),
(40681, 1559, 'Languyan Proper (Pob.)'),
(40682, 1559, 'Maraning'),
(40683, 1559, 'Simalak'),
(40684, 1559, 'Tuhog-tuhog'),
(40685, 1559, 'Tumahubong'),
(40686, 1559, 'Tumbagaan'),
(40687, 1559, 'Parang Pantay'),
(40688, 1559, 'Adnin'),
(40689, 1559, 'Bakaw-bakaw'),
(40690, 1559, 'BasLikud'),
(40691, 1559, 'Jakarta'),
(40692, 1559, 'Kalupag'),
(40693, 1559, 'Kiniktal'),
(40694, 1559, 'Marang-marang'),
(40695, 1559, 'Sikullis'),
(40696, 1559, 'Tubig Dakula'),
(40697, 1560, 'Baldatal Islam'),
(40698, 1560, 'Lookan Banaran'),
(40699, 1560, 'Tonggusong Banaran'),
(40700, 1560, 'Butun'),
(40701, 1560, 'Dalo-dalo'),
(40702, 1560, 'Palate Gadjaminah'),
(40703, 1560, 'Kohec'),
(40704, 1560, 'Latuan'),
(40705, 1560, 'Lakit-lakit'),
(40706, 1560, 'Tangngah'),
(40707, 1560, 'Tabunan Likud Sikubong'),
(40708, 1560, 'Malanta'),
(40709, 1560, 'Mantabuan Tabunan'),
(40710, 1560, 'Sapa-sapa (Pob.)'),
(40711, 1560, 'Tapian Bohe North'),
(40712, 1560, 'Look Natuh'),
(40713, 1560, 'Lookan Latuan'),
(40714, 1560, 'Nunuk Likud Sikubong'),
(40715, 1560, 'Pamasan'),
(40716, 1560, 'Sapaat'),
(40717, 1560, 'Sukah-sukah'),
(40718, 1560, 'Tapian Bohe South'),
(40719, 1560, 'Tup-tup Banaran'),
(40720, 1561, 'Ambulong Sapal'),
(40721, 1561, 'Datu Amilhamja Jaafar'),
(40722, 1561, 'Hadji Imam Bidin'),
(40723, 1561, 'Hadji Mohtar Sulayman'),
(40724, 1561, 'Hadji Taha'),
(40725, 1561, 'Imam Hadji Mohammad'),
(40726, 1561, 'Ligayan'),
(40727, 1561, 'Nunukan'),
(40728, 1561, 'Sheik Makdum'),
(40729, 1561, 'Sibutu (Pob.)'),
(40730, 1561, 'Talisay'),
(40731, 1561, 'Tandu Banak'),
(40732, 1561, 'Taungoh'),
(40733, 1561, 'Tongehat'),
(40734, 1561, 'Tongsibalo'),
(40735, 1561, 'Ungus-ungus'),
(40736, 1562, 'Abilan'),
(40737, 1562, 'Agong-ong'),
(40738, 1562, 'Alubijid'),
(40739, 1562, 'Guinabsan'),
(40740, 1562, 'Macalang'),
(40741, 1562, 'Malapong'),
(40742, 1562, 'Malpoc'),
(40743, 1562, 'Manapa'),
(40744, 1562, 'Matabao'),
(40745, 1562, 'Poblacion 1'),
(40746, 1562, 'Poblacion 2'),
(40747, 1562, 'Poblacion 3'),
(40748, 1562, 'Poblacion 4'),
(40749, 1562, 'Poblacion 5'),
(40750, 1562, 'Poblacion 6'),
(40751, 1562, 'Poblacion 7'),
(40752, 1562, 'Poblacion 8'),
(40753, 1562, 'Poblacion 9'),
(40754, 1562, 'Poblacion 10'),
(40755, 1562, 'Rizal'),
(40756, 1562, 'Sacol'),
(40757, 1562, 'Sangay'),
(40758, 1562, 'Talo-ao'),
(40759, 1562, 'Lower Olave'),
(40760, 1562, 'Simbalan'),
(40761, 1563, 'Agao Pob.'),
(40762, 1563, 'Agusan Pequeño'),
(40763, 1563, 'Ambago'),
(40764, 1563, 'Amparo'),
(40765, 1563, 'Ampayon'),
(40766, 1563, 'Anticala'),
(40767, 1563, 'Antongalon'),
(40768, 1563, 'Aupagan'),
(40769, 1563, 'Baan KM 3'),
(40770, 1563, 'Babag'),
(40771, 1563, 'Bading Pob.'),
(40772, 1563, 'Bancasi'),
(40773, 1563, 'Banza'),
(40774, 1563, 'Baobaoan'),
(40775, 1563, 'Basag'),
(40776, 1563, 'Bayanihan Pob.'),
(40777, 1563, 'Bilay'),
(40778, 1563, 'Bit-os'),
(40779, 1563, 'Bitan-agan'),
(40780, 1563, 'Bobon'),
(40781, 1563, 'Bonbon'),
(40782, 1563, 'Bugabus'),
(40783, 1563, 'Buhangin Pob.'),
(40784, 1563, 'Cabcabon'),
(40785, 1563, 'Camayahan'),
(40786, 1563, 'Baan Riverside Pob.'),
(40787, 1563, 'Dankias'),
(40788, 1563, 'Imadejas Pob.'),
(40789, 1563, 'Diego Silang Pob.'),
(40790, 1563, 'Doongan'),
(40791, 1563, 'Dumalagan'),
(40792, 1563, 'Golden Ribbon Pob.'),
(40793, 1563, 'Dagohoy Pob.'),
(40794, 1563, 'Jose Rizal Pob.'),
(40795, 1563, 'Holy Redeemer Pob.'),
(40796, 1563, 'Humabon Pob.'),
(40797, 1563, 'Kinamlutan'),
(40798, 1563, 'Lapu-lapu Pob.'),
(40799, 1563, 'Lemon'),
(40800, 1563, 'Leon Kilat Pob.'),
(40801, 1563, 'Libertad'),
(40802, 1563, 'Limaha Pob.'),
(40803, 1563, 'Los Angeles'),
(40804, 1563, 'Lumbocan'),
(40805, 1563, 'Maguinda'),
(40806, 1563, 'Mahay'),
(40807, 1563, 'Mahogany Pob.'),
(40808, 1563, 'Maibu'),
(40809, 1563, 'Mandamo'),
(40810, 1563, 'Manila de Bugabus'),
(40811, 1563, 'Maon Pob.'),
(40812, 1563, 'Masao'),
(40813, 1563, 'Maug'),
(40814, 1563, 'Port Poyohon Pob.'),
(40815, 1563, 'New Society Village Pob.'),
(40816, 1563, 'Ong Yiu Pob.'),
(40817, 1563, 'Pianing'),
(40818, 1563, 'Pinamanculan'),
(40819, 1563, 'Rajah Soliman Pob.'),
(40820, 1563, 'San Ignacio Pob.'),
(40821, 1563, 'San Mateo'),
(40822, 1563, 'San Vicente'),
(40823, 1563, 'Sikatuna Pob.'),
(40824, 1563, 'Silongan Pob.'),
(40825, 1563, 'Sumilihon'),
(40826, 1563, 'Tagabaca'),
(40827, 1563, 'Taguibo'),
(40828, 1563, 'Taligaman'),
(40829, 1563, 'Tandang Sora Pob.'),
(40830, 1563, 'Tiniwisan'),
(40831, 1563, 'Tungao'),
(40832, 1563, 'Urduja Pob.'),
(40833, 1563, 'Villa Kananga'),
(40834, 1563, 'Obrero Pob.'),
(40835, 1563, 'Bugsukan'),
(40836, 1563, 'De Oro'),
(40837, 1563, 'Dulag'),
(40838, 1563, 'Florida'),
(40839, 1563, 'Nong-nong'),
(40840, 1563, 'Pagatpatan'),
(40841, 1563, 'Pangabugan'),
(40842, 1563, 'Salvacion'),
(40843, 1563, 'Santo Niño'),
(40844, 1563, 'Sumile'),
(40845, 1563, 'Don Francisco'),
(40846, 1563, 'Pigdaulan'),
(40847, 1564, 'Antonio Luna'),
(40848, 1564, 'Bay-ang'),
(40849, 1564, 'Bayabas'),
(40850, 1564, 'Caasinan'),
(40851, 1564, 'Cabinet'),
(40852, 1564, 'Calamba'),
(40853, 1564, 'Calibunan'),
(40854, 1564, 'Comagascas'),
(40855, 1564, 'Concepcion'),
(40856, 1564, 'Del Pilar'),
(40857, 1564, 'Katugasan'),
(40858, 1564, 'Kauswagan'),
(40859, 1564, 'La Union'),
(40860, 1564, 'Mabini'),
(40861, 1564, 'Poblacion 1'),
(40862, 1564, 'Poblacion 10'),
(40863, 1564, 'Poblacion 11'),
(40864, 1564, 'Poblacion 12'),
(40865, 1564, 'Poblacion 2'),
(40866, 1564, 'Poblacion 3'),
(40867, 1564, 'Poblacion 4'),
(40868, 1564, 'Poblacion 5'),
(40869, 1564, 'Poblacion 6'),
(40870, 1564, 'Poblacion 7'),
(40871, 1564, 'Poblacion 8'),
(40872, 1564, 'Poblacion 9'),
(40873, 1564, 'Puting Bato'),
(40874, 1564, 'Sanghan'),
(40875, 1564, 'Soriano'),
(40876, 1564, 'Tolosa'),
(40877, 1564, 'Mahaba'),
(40878, 1565, 'Cahayagan'),
(40879, 1565, 'Gosoon'),
(40880, 1565, 'Manoligao'),
(40881, 1565, 'Poblacion'),
(40882, 1565, 'Rojales'),
(40883, 1565, 'San Agustin'),
(40884, 1565, 'Tagcatong'),
(40885, 1565, 'Vinapor'),
(40886, 1566, 'Baleguian'),
(40887, 1566, 'Bangonay'),
(40888, 1566, 'A. Beltran'),
(40889, 1566, 'Bunga'),
(40890, 1566, 'Colorado'),
(40891, 1566, 'Cuyago'),
(40892, 1566, 'Libas'),
(40893, 1566, 'Magdagooc'),
(40894, 1566, 'Magsaysay'),
(40895, 1566, 'Maraiging'),
(40896, 1566, 'Poblacion'),
(40897, 1566, 'San Jose'),
(40898, 1566, 'San Pablo'),
(40899, 1566, 'San Vicente'),
(40900, 1566, 'Santo Niño'),
(40901, 1567, 'Bangayan'),
(40902, 1567, 'Canaway'),
(40903, 1567, 'Hinimbangan'),
(40904, 1567, 'Jaliobong'),
(40905, 1567, 'Mahayahay'),
(40906, 1567, 'Poblacion'),
(40907, 1567, 'San Isidro'),
(40908, 1567, 'San Roque'),
(40909, 1567, 'Sangay'),
(40910, 1567, 'Crossing'),
(40911, 1567, 'Songkoy'),
(40912, 1568, 'Ambacon'),
(40913, 1568, 'Bonifacio'),
(40914, 1568, 'Consorcia'),
(40915, 1568, 'Katipunan'),
(40916, 1568, 'Lingayao'),
(40917, 1568, 'Malicato'),
(40918, 1568, 'Maningalao'),
(40919, 1568, 'Marcos Calo'),
(40920, 1568, 'Mat-i'),
(40921, 1568, 'Pinana-an'),
(40922, 1568, 'Poblacion'),
(40923, 1568, 'San Isidro'),
(40924, 1568, 'Tinucoran'),
(40925, 1568, 'Balungagan'),
(40926, 1568, 'Eduardo G. Montilla'),
(40927, 1568, 'Durian'),
(40928, 1568, 'Ibuan'),
(40929, 1568, 'Rosario'),
(40930, 1568, 'San Roque'),
(40931, 1568, 'Casiklan'),
(40932, 1569, 'Buhang'),
(40933, 1569, 'Caloc-an'),
(40934, 1569, 'Guiasan'),
(40935, 1569, 'Poblacion'),
(40936, 1569, 'Taod-oy'),
(40937, 1569, 'Marcos'),
(40938, 1569, 'Santo Niño'),
(40939, 1569, 'Santo Rosario'),
(40940, 1570, 'Aclan'),
(40941, 1570, 'Amontay'),
(40942, 1570, 'Ata-atahon'),
(40943, 1570, 'Camagong'),
(40944, 1570, 'Cubi-cubi'),
(40945, 1570, 'Culit'),
(40946, 1570, 'Jaguimitan'),
(40947, 1570, 'Kinabjangan'),
(40948, 1570, 'Barangay 1 (Pob.)'),
(40949, 1570, 'Barangay 2 (Pob.)'),
(40950, 1570, 'Barangay 3 (Pob.)'),
(40951, 1570, 'Barangay 4 (Pob.)'),
(40952, 1570, 'Barangay 5 (Pob.)'),
(40953, 1570, 'Barangay 6 (Pob.)'),
(40954, 1570, 'Barangay 7 (Pob.)'),
(40955, 1570, 'Punta'),
(40956, 1570, 'Santa Ana'),
(40957, 1570, 'Talisay'),
(40958, 1570, 'Triangulo'),
(40959, 1571, 'Curva'),
(40960, 1571, 'Jagupit'),
(40961, 1571, 'La Paz'),
(40962, 1571, 'Poblacion I'),
(40963, 1571, 'San Isidro'),
(40964, 1571, 'Tagbuyacan'),
(40965, 1571, 'Estanislao Morgado'),
(40966, 1571, 'Poblacion II'),
(40967, 1571, 'Pangaylan-IP'),
(40968, 1572, 'Binuangan'),
(40969, 1572, 'Cabayawa'),
(40970, 1572, 'Doña Rosario'),
(40971, 1572, 'La Fraternidad'),
(40972, 1572, 'Lawigan'),
(40973, 1572, 'Poblacion 1'),
(40974, 1572, 'Poblacion 2'),
(40975, 1572, 'Santa Ana'),
(40976, 1572, 'Tagmamarkay'),
(40977, 1572, 'Tagpangahoy'),
(40978, 1572, 'Tinigbasan'),
(40979, 1572, 'Victory'),
(40980, 1572, 'Doña Telesfora'),
(40981, 1573, 'Poblacion I'),
(40982, 1573, 'Balangbalang'),
(40983, 1573, 'Basilisa'),
(40984, 1573, 'Humilog'),
(40985, 1573, 'Panaytayon'),
(40986, 1573, 'San Antonio'),
(40987, 1573, 'Tagbongabong'),
(40988, 1573, 'Poblacion II'),
(40989, 1574, 'Calaitan'),
(40990, 1574, 'Charito'),
(40991, 1574, 'Fili'),
(40992, 1574, 'Hamogaway'),
(40993, 1574, 'Katipunan'),
(40994, 1574, 'Mabuhay'),
(40995, 1574, 'Marcelina'),
(40996, 1574, 'Maygatasan'),
(40997, 1574, 'Noli'),
(40998, 1574, 'Osmeña'),
(40999, 1574, 'Panaytay'),
(41000, 1574, 'Poblacion'),
(41001, 1574, 'Sagmone'),
(41002, 1574, 'Saguma'),
(41003, 1574, 'Salvacion'),
(41004, 1574, 'San Isidro'),
(41005, 1574, 'Santa Irene'),
(41006, 1574, 'Taglatawan'),
(41007, 1574, 'Verdu'),
(41008, 1574, 'Wawa'),
(41009, 1574, 'Berseba'),
(41010, 1574, 'Bucac'),
(41011, 1574, 'Cagbas'),
(41012, 1574, 'Canayugan'),
(41013, 1574, 'Claro Cortez'),
(41014, 1574, 'Gamao'),
(41015, 1574, 'Getsemane'),
(41016, 1574, 'Grace Estate'),
(41017, 1574, 'Magkiangkang'),
(41018, 1574, 'Mahayag'),
(41019, 1574, 'Montivesta'),
(41020, 1574, 'Mt. Ararat'),
(41021, 1574, 'Mt. Carmel'),
(41022, 1574, 'Mt. Olive'),
(41023, 1574, 'New Salem'),
(41024, 1574, 'Pinagalaan'),
(41025, 1574, 'San Agustin'),
(41026, 1574, 'San Juan'),
(41027, 1574, 'Santa Teresita'),
(41028, 1574, 'Santo Niño'),
(41029, 1574, 'Taglibas'),
(41030, 1574, 'Tagubay'),
(41031, 1574, 'Villa Undayon'),
(41032, 1575, 'Bunawan Brook'),
(41033, 1575, 'Consuelo'),
(41034, 1575, 'Libertad'),
(41035, 1575, 'Mambalili'),
(41036, 1575, 'Poblacion'),
(41037, 1575, 'San Andres'),
(41038, 1575, 'San Marcos'),
(41039, 1575, 'Imelda'),
(41040, 1575, 'Nueva Era'),
(41041, 1575, 'San Teodoro'),
(41042, 1576, 'Anolingan'),
(41043, 1576, 'Bakingking'),
(41044, 1576, 'Bentahon'),
(41045, 1576, 'Bunaguit'),
(41046, 1576, 'Catmonon'),
(41047, 1576, 'Concordia'),
(41048, 1576, 'Dakutan'),
(41049, 1576, 'Duangan'),
(41050, 1576, 'Mac-Arthur'),
(41051, 1576, 'Guadalupe'),
(41052, 1576, 'Hawilian'),
(41053, 1576, 'Labao'),
(41054, 1576, 'Maasin'),
(41055, 1576, 'Mahagcot'),
(41056, 1576, 'Milagros'),
(41057, 1576, 'Nato'),
(41058, 1576, 'Oro'),
(41059, 1576, 'Poblacion'),
(41060, 1576, 'Remedios'),
(41061, 1576, 'Salug'),
(41062, 1576, 'San Toribio'),
(41063, 1576, 'Santa Fe'),
(41064, 1576, 'Segunda'),
(41065, 1576, 'Tagabase'),
(41066, 1576, 'Taganahaw'),
(41067, 1576, 'Tagbalili'),
(41068, 1576, 'Tahina'),
(41069, 1576, 'Tandang Sora'),
(41070, 1576, 'Agsabu'),
(41071, 1576, 'Aguinaldo'),
(41072, 1576, 'Balubo'),
(41073, 1576, 'Cebulan'),
(41074, 1576, 'Crossing Luna'),
(41075, 1576, 'Cubo'),
(41076, 1576, 'Guibonon'),
(41077, 1576, 'Kalabuan'),
(41078, 1576, 'Kinamaybay'),
(41079, 1576, 'Langag'),
(41080, 1576, 'Maliwanag'),
(41081, 1576, 'New Gingoog'),
(41082, 1576, 'Odiong'),
(41083, 1576, 'Piglawigan'),
(41084, 1576, 'San Isidro'),
(41085, 1576, 'San Jose'),
(41086, 1576, 'San Vicente'),
(41087, 1576, 'Sinakungan'),
(41088, 1576, 'Valentina'),
(41089, 1577, 'Bataan'),
(41090, 1577, 'Comota'),
(41091, 1577, 'Halapitan'),
(41092, 1577, 'Langasian'),
(41093, 1577, 'Osmeña, Sr.'),
(41094, 1577, 'Poblacion'),
(41095, 1577, 'Sagunto'),
(41096, 1577, 'Villa Paz'),
(41097, 1577, 'Angeles'),
(41098, 1577, 'Kasapa II'),
(41099, 1577, 'Lydia'),
(41100, 1577, 'Panagangan'),
(41101, 1577, 'Sabang Adgawan'),
(41102, 1577, 'San Patricio'),
(41103, 1577, 'Valentina'),
(41104, 1578, 'Binucayan'),
(41105, 1578, 'Johnson'),
(41106, 1578, 'Magaud'),
(41107, 1578, 'Nueva Gracia'),
(41108, 1578, 'Poblacion'),
(41109, 1578, 'San Isidro'),
(41110, 1578, 'San Mariano'),
(41111, 1578, 'San Vicente'),
(41112, 1578, 'Santa Teresa'),
(41113, 1578, 'Santo Tomas'),
(41114, 1578, 'Violanta'),
(41115, 1578, 'Waloe'),
(41116, 1578, 'Kasapa'),
(41117, 1578, 'Katipunan'),
(41118, 1578, 'Kauswagan'),
(41119, 1578, 'Santo Niño'),
(41120, 1578, 'Sabud'),
(41121, 1579, 'Aurora'),
(41122, 1579, 'Awa'),
(41123, 1579, 'Azpetia'),
(41124, 1579, 'Poblacion'),
(41125, 1579, 'La Caridad'),
(41126, 1579, 'La Suerte'),
(41127, 1579, 'La Union'),
(41128, 1579, 'Las Navas'),
(41129, 1579, 'Libertad'),
(41130, 1579, 'Los Arcos'),
(41131, 1579, 'Lucena'),
(41132, 1579, 'Mabuhay'),
(41133, 1579, 'Magsaysay'),
(41134, 1579, 'Mapaga'),
(41135, 1579, 'New Maug'),
(41136, 1579, 'Napo'),
(41137, 1579, 'Patin-ay'),
(41138, 1579, 'Salimbogaon'),
(41139, 1579, 'Salvacion'),
(41140, 1579, 'San Joaquin'),
(41141, 1579, 'San Jose'),
(41142, 1579, 'San Lorenzo'),
(41143, 1579, 'San Martin'),
(41144, 1579, 'San Pedro'),
(41145, 1579, 'San Rafael'),
(41146, 1579, 'San Salvador'),
(41147, 1579, 'San Vicente'),
(41148, 1579, 'Santa Irene'),
(41149, 1579, 'Santa Maria'),
(41150, 1579, 'La Perian'),
(41151, 1579, 'La Purisima'),
(41152, 1579, 'San Roque'),
(41153, 1580, 'Bayugan 3'),
(41154, 1580, 'Cabantao'),
(41155, 1580, 'Cabawan'),
(41156, 1580, 'Marfil'),
(41157, 1580, 'Novele'),
(41158, 1580, 'Poblacion'),
(41159, 1580, 'Santa Cruz'),
(41160, 1580, 'Tagbayagan'),
(41161, 1580, 'Wasi-an'),
(41162, 1580, 'Libuac'),
(41163, 1580, 'Maligaya'),
(41164, 1581, 'Alegria'),
(41165, 1581, 'Bayugan 2'),
(41166, 1581, 'Borbon'),
(41167, 1581, 'Caimpugan'),
(41168, 1581, 'Ebro'),
(41169, 1581, 'Hubang'),
(41170, 1581, 'Lapinigan'),
(41171, 1581, 'Lucac'),
(41172, 1581, 'Mate'),
(41173, 1581, 'New Visayas'),
(41174, 1581, 'Pasta');
INSERT INTO `table_barangay` (`barangay_id`, `municipality_id`, `barangay_name`) VALUES
(41175, 1581, 'Pisa-an'),
(41176, 1581, 'Barangay 1 (Pob.)'),
(41177, 1581, 'Barangay 2 (Pob.)'),
(41178, 1581, 'Barangay 3 (Pob.)'),
(41179, 1581, 'Barangay 4 (Pob.)'),
(41180, 1581, 'Barangay 5 (Pob.)'),
(41181, 1581, 'Rizal'),
(41182, 1581, 'San Isidro'),
(41183, 1581, 'Santa Ana'),
(41184, 1581, 'Tagapua'),
(41185, 1581, 'Bitan-agan'),
(41186, 1581, 'Buenasuerte'),
(41187, 1581, 'Das-agan'),
(41188, 1581, 'Karaus'),
(41189, 1581, 'Ladgadan'),
(41190, 1581, 'Ormaca'),
(41191, 1582, 'Anislagan'),
(41192, 1582, 'Baylo'),
(41193, 1582, 'Coalicion'),
(41194, 1582, 'Culi'),
(41195, 1582, 'Nuevo Trabajo'),
(41196, 1582, 'Poblacion'),
(41197, 1582, 'Santa Ines'),
(41198, 1582, 'Balit'),
(41199, 1582, 'Binicalan'),
(41200, 1582, 'Cecilia'),
(41201, 1582, 'Dimasalang'),
(41202, 1582, 'Don Alejandro'),
(41203, 1582, 'Don Pedro'),
(41204, 1582, 'Doña Flavia'),
(41205, 1582, 'Mahagsay'),
(41206, 1582, 'Mahapag'),
(41207, 1582, 'Mahayahay'),
(41208, 1582, 'Muritula'),
(41209, 1582, 'Policarpo'),
(41210, 1582, 'San Isidro'),
(41211, 1582, 'San Pedro'),
(41212, 1582, 'Santa Rita'),
(41213, 1582, 'Santiago'),
(41214, 1582, 'Wegguam'),
(41215, 1582, 'Doña Maxima'),
(41216, 1583, 'Angas'),
(41217, 1583, 'Aurora'),
(41218, 1583, 'Awao'),
(41219, 1583, 'Tapaz'),
(41220, 1583, 'Patrocinio'),
(41221, 1583, 'Poblacion'),
(41222, 1583, 'San Jose'),
(41223, 1583, 'Santa Isabel'),
(41224, 1583, 'Sayon'),
(41225, 1583, 'Concepcion'),
(41226, 1583, 'Pag-asa'),
(41227, 1584, 'BuenaGracia'),
(41228, 1584, 'Causwagan'),
(41229, 1584, 'Culi'),
(41230, 1584, 'Del Monte'),
(41231, 1584, 'Desamparados'),
(41232, 1584, 'Labnig'),
(41233, 1584, 'Sabang Gibung'),
(41234, 1584, 'San Agustin (Pob.)'),
(41235, 1584, 'San Isidro (Pob.)'),
(41236, 1584, 'San Nicolas (Pob.)'),
(41237, 1584, 'Zamora'),
(41238, 1584, 'Zillovia'),
(41239, 1584, 'La Flora'),
(41240, 1584, 'Maharlika'),
(41241, 1584, 'Marbon'),
(41242, 1584, 'Batucan'),
(41243, 1585, 'Basa'),
(41244, 1585, 'Cuevas'),
(41245, 1585, 'Kapatungan'),
(41246, 1585, 'Langkila-an'),
(41247, 1585, 'New Visayas'),
(41248, 1585, 'Poblacion'),
(41249, 1585, 'Pulang-lupa'),
(41250, 1585, 'Salvacion'),
(41251, 1585, 'San Ignacio'),
(41252, 1585, 'San Isidro'),
(41253, 1585, 'San Roque'),
(41254, 1585, 'Santa Maria'),
(41255, 1585, 'Tudela'),
(41256, 1585, 'Cebolin'),
(41257, 1585, 'Manat'),
(41258, 1585, 'Pangyan'),
(41259, 1586, 'Binongan'),
(41260, 1586, 'Del Monte'),
(41261, 1586, 'Don Mateo'),
(41262, 1586, 'La Fortuna'),
(41263, 1586, 'Limot'),
(41264, 1586, 'Magsaysay'),
(41265, 1586, 'Masayan'),
(41266, 1586, 'Poblacion'),
(41267, 1586, 'Sampaguita'),
(41268, 1586, 'San Gabriel'),
(41269, 1586, 'Santa Emelia'),
(41270, 1586, 'Sinobong'),
(41271, 1586, 'Anitap'),
(41272, 1586, 'Bacay II'),
(41273, 1586, 'Caigangan'),
(41274, 1586, 'Candiis'),
(41275, 1586, 'Katipunan'),
(41276, 1586, 'Santa Cruz'),
(41277, 1586, 'Sawagan'),
(41278, 1586, 'Sisimon'),
(41279, 1587, 'Afga'),
(41280, 1587, 'Anahawan'),
(41281, 1587, 'Banagbanag'),
(41282, 1587, 'Del Rosario'),
(41283, 1587, 'El Rio'),
(41284, 1587, 'Ilihan'),
(41285, 1587, 'Kauswagan'),
(41286, 1587, 'Kioya'),
(41287, 1587, 'Magkalape'),
(41288, 1587, 'Magsaysay'),
(41289, 1587, 'Mahayahay'),
(41290, 1587, 'New Tubigon'),
(41291, 1587, 'Padiay'),
(41292, 1587, 'Perez'),
(41293, 1587, 'Poblacion'),
(41294, 1587, 'San Isidro'),
(41295, 1587, 'San Vicente'),
(41296, 1587, 'Santa Cruz'),
(41297, 1587, 'Santa Maria'),
(41298, 1587, 'Sinai'),
(41299, 1587, 'Tabon-tabon'),
(41300, 1587, 'Tag-uyango'),
(41301, 1587, 'Villangit'),
(41302, 1587, 'Kolambugan'),
(41303, 1588, 'Poblacion'),
(41304, 1588, 'Alipao'),
(41305, 1588, 'Budlingin'),
(41306, 1588, 'Camp Eduard'),
(41307, 1588, 'Ombong'),
(41308, 1588, 'Pongtud'),
(41309, 1588, 'San Pedro'),
(41310, 1588, 'Ferlda'),
(41311, 1588, 'Julio Ouano (Pob.)'),
(41312, 1588, 'San Juan'),
(41313, 1588, 'Anahaw'),
(41314, 1588, 'Gamuton'),
(41315, 1589, 'Cabugao'),
(41316, 1589, 'Cambuayon'),
(41317, 1589, 'Campo'),
(41318, 1589, 'Dugsangon'),
(41319, 1589, 'Pautao'),
(41320, 1589, 'Payapag'),
(41321, 1589, 'Poblacion'),
(41322, 1589, 'Pungtod'),
(41323, 1589, 'Santo Rosario'),
(41324, 1590, 'Baybay'),
(41325, 1590, 'Bitaug'),
(41326, 1590, 'Poblacion 1'),
(41327, 1590, 'Poblacion 2'),
(41328, 1590, 'San Mateo'),
(41329, 1590, 'Matin-ao'),
(41330, 1591, 'Cabugo'),
(41331, 1591, 'Cagdianao'),
(41332, 1591, 'Daywan'),
(41333, 1591, 'Hayanggabon'),
(41334, 1591, 'Ladgaron (Pob.)'),
(41335, 1591, 'Lapinigan'),
(41336, 1591, 'Magallanes'),
(41337, 1591, 'Panatao'),
(41338, 1591, 'Tayaga'),
(41339, 1591, 'Bagakay'),
(41340, 1591, 'Sapa'),
(41341, 1591, 'Taganito'),
(41342, 1591, 'Urbiztondo'),
(41343, 1591, 'Wangke'),
(41344, 1592, 'Bagakay'),
(41345, 1592, 'Barangay 1 (Pob.)'),
(41346, 1592, 'Barangay 13 (Pob.)'),
(41347, 1592, 'Buenavista'),
(41348, 1592, 'Cabawa'),
(41349, 1592, 'Cambas-ac'),
(41350, 1592, 'Consolacion'),
(41351, 1592, 'Corregidor'),
(41352, 1592, 'Dagohoy'),
(41353, 1592, 'Don Paulino'),
(41354, 1592, 'Jubang'),
(41355, 1592, 'Montserrat'),
(41356, 1592, 'Osmeña'),
(41357, 1592, 'Barangay 10 (Pob.)'),
(41358, 1592, 'Barangay 11 (Pob.)'),
(41359, 1592, 'Barangay 12 (Pob.)'),
(41360, 1592, 'Barangay 2 (Pob.)'),
(41361, 1592, 'Barangay 3 (Pob.)'),
(41362, 1592, 'Barangay 4 (Pob.)'),
(41363, 1592, 'Barangay 5 (Pob.)'),
(41364, 1592, 'Barangay 6 (Pob.)'),
(41365, 1592, 'Barangay 7 (Pob.)'),
(41366, 1592, 'Barangay 8 (Pob.)'),
(41367, 1592, 'Barangay 9 (Pob.)'),
(41368, 1592, 'San Carlos'),
(41369, 1592, 'San Miguel'),
(41370, 1592, 'Santa Fe'),
(41371, 1592, 'Union'),
(41372, 1592, 'Santa Felomina'),
(41373, 1593, 'Bagakay'),
(41374, 1593, 'Antipolo'),
(41375, 1593, 'Bitoon'),
(41376, 1593, 'Cabugao'),
(41377, 1593, 'Cancohoy'),
(41378, 1593, 'Caub'),
(41379, 1593, 'Del Carmen (Pob.)'),
(41380, 1593, 'Domoyog'),
(41381, 1593, 'Esperanza'),
(41382, 1593, 'Jamoyaon'),
(41383, 1593, 'Katipunan'),
(41384, 1593, 'Lobogon'),
(41385, 1593, 'Mabuhay'),
(41386, 1593, 'Mahayahay'),
(41387, 1593, 'Quezon'),
(41388, 1593, 'San Fernando'),
(41389, 1593, 'San Jose (Pob.)'),
(41390, 1593, 'Sayak'),
(41391, 1593, 'Tuboran'),
(41392, 1593, 'Halian'),
(41393, 1594, 'Anajawan'),
(41394, 1594, 'Cabitoonan'),
(41395, 1594, 'Catangnan'),
(41396, 1594, 'Consuelo'),
(41397, 1594, 'Corazon'),
(41398, 1594, 'Daku'),
(41399, 1594, 'Poblacion I'),
(41400, 1594, 'Poblacion II'),
(41401, 1594, 'Poblacion III'),
(41402, 1594, 'Poblacion IV'),
(41403, 1594, 'Poblacion V'),
(41404, 1594, 'La Januza'),
(41405, 1594, 'Libertad'),
(41406, 1594, 'Magsaysay'),
(41407, 1594, 'Malinao'),
(41408, 1594, 'Santa Cruz'),
(41409, 1594, 'Santa Fe'),
(41410, 1594, 'Suyangan'),
(41411, 1594, 'Tawin-tawin'),
(41412, 1595, 'Alambique (Pob.)'),
(41413, 1595, 'Anibongan'),
(41414, 1595, 'Camam-onan'),
(41415, 1595, 'Cam-boayon'),
(41416, 1595, 'Ipil (Pob.)'),
(41417, 1595, 'Lahi'),
(41418, 1595, 'Mahanub'),
(41419, 1595, 'Poniente'),
(41420, 1595, 'San Antonio'),
(41421, 1595, 'San Isidro'),
(41422, 1595, 'Sico-sico'),
(41423, 1595, 'Villaflor'),
(41424, 1595, 'Villafranca'),
(41425, 1596, 'Binga'),
(41426, 1596, 'Bobona-on'),
(41427, 1596, 'Cantugas'),
(41428, 1596, 'Dayano'),
(41429, 1596, 'Mabini'),
(41430, 1596, 'Magpayang'),
(41431, 1596, 'Magsaysay (Pob.)'),
(41432, 1596, 'Mansayao'),
(41433, 1596, 'Marayag'),
(41434, 1596, 'Matin-ao'),
(41435, 1596, 'Paco'),
(41436, 1596, 'Quezon (Pob.)'),
(41437, 1596, 'Roxas'),
(41438, 1596, 'San Francisco'),
(41439, 1596, 'San Isidro'),
(41440, 1596, 'San Jose'),
(41441, 1596, 'Siana'),
(41442, 1596, 'Silop'),
(41443, 1596, 'Tagbuyawan'),
(41444, 1596, 'Tapi-an'),
(41445, 1596, 'Tolingon'),
(41446, 1597, 'Doro'),
(41447, 1597, 'Bunyasan'),
(41448, 1597, 'Cantapoy'),
(41449, 1597, 'Cagtinae'),
(41450, 1597, 'Cayawan'),
(41451, 1597, 'Hanagdong'),
(41452, 1597, 'Karihatag'),
(41453, 1597, 'Masgad'),
(41454, 1597, 'Pili'),
(41455, 1597, 'San Isidro (Pob.)'),
(41456, 1597, 'Tinago'),
(41457, 1597, 'Cansayong'),
(41458, 1597, 'Can-aga'),
(41459, 1597, 'Villariza'),
(41460, 1598, 'Caridad'),
(41461, 1598, 'Katipunan'),
(41462, 1598, 'Maasin'),
(41463, 1598, 'Mabini'),
(41464, 1598, 'Mabuhay'),
(41465, 1598, 'Salvacion'),
(41466, 1598, 'San Roque'),
(41467, 1598, 'Asinan (Pob.)'),
(41468, 1598, 'Centro (Pob.)'),
(41469, 1598, 'Pilaring (Pob.)'),
(41470, 1598, 'Punta (Pob.)'),
(41471, 1598, 'Consolacion'),
(41472, 1598, 'Datu'),
(41473, 1598, 'Dayaohay'),
(41474, 1598, 'Jaboy'),
(41475, 1599, 'Amoslog'),
(41476, 1599, 'Anislagan'),
(41477, 1599, 'Bad-as'),
(41478, 1599, 'Boyongan'),
(41479, 1599, 'Bugas-bugas'),
(41480, 1599, 'Central (Pob.)'),
(41481, 1599, 'Ellaperal'),
(41482, 1599, 'Ipil (Pob.)'),
(41483, 1599, 'Lakandula'),
(41484, 1599, 'Mabini'),
(41485, 1599, 'Macalaya'),
(41486, 1599, 'Magsaysay (Pob.)'),
(41487, 1599, 'Magupange'),
(41488, 1599, 'Pananay-an'),
(41489, 1599, 'Panhutongan'),
(41490, 1599, 'San Isidro'),
(41491, 1599, 'Santa Cruz'),
(41492, 1599, 'Suyoc'),
(41493, 1599, 'Tagbongabong'),
(41494, 1599, 'Sani-sani'),
(41495, 1600, 'Bongdo'),
(41496, 1600, 'Maribojoc'),
(41497, 1600, 'Nuevo Campo'),
(41498, 1600, 'San Juan'),
(41499, 1600, 'Santa Cruz (Pob.)'),
(41500, 1600, 'Talisay (Pob.)'),
(41501, 1601, 'Amontay'),
(41502, 1601, 'Balite'),
(41503, 1601, 'Banbanon'),
(41504, 1601, 'Diaz'),
(41505, 1601, 'Honrado'),
(41506, 1601, 'Jubgan'),
(41507, 1601, 'Linongganan'),
(41508, 1601, 'Macopa'),
(41509, 1601, 'Magtangale'),
(41510, 1601, 'Oslao'),
(41511, 1601, 'Poblacion'),
(41512, 1602, 'Buhing Calipay'),
(41513, 1602, 'Del Carmen (Pob.)'),
(41514, 1602, 'Del Pilar'),
(41515, 1602, 'Macapagal'),
(41516, 1602, 'Pacifico'),
(41517, 1602, 'Pelaez'),
(41518, 1602, 'Roxas'),
(41519, 1602, 'San Miguel'),
(41520, 1602, 'Santa Paz'),
(41521, 1602, 'Santo Niño'),
(41522, 1602, 'Tambacan'),
(41523, 1602, 'Tigasao'),
(41524, 1603, 'Abad Santos'),
(41525, 1603, 'Alegria'),
(41526, 1603, 'T. Arlan (Pob.)'),
(41527, 1603, 'Bailan'),
(41528, 1603, 'Garcia'),
(41529, 1603, 'Libertad'),
(41530, 1603, 'Mabini'),
(41531, 1603, 'Mabuhay (Pob.)'),
(41532, 1603, 'Magsaysay'),
(41533, 1603, 'Rizal'),
(41534, 1603, 'Tangbo'),
(41535, 1604, 'Biyabid'),
(41536, 1604, 'Gacepan'),
(41537, 1604, 'Ima'),
(41538, 1604, 'Lower Patag'),
(41539, 1604, 'Mabuhay'),
(41540, 1604, 'Mayag'),
(41541, 1604, 'Poblacion'),
(41542, 1604, 'San Isidro'),
(41543, 1604, 'San Pablo'),
(41544, 1604, 'Tagbayani'),
(41545, 1604, 'Tinogpahan'),
(41546, 1604, 'Upper Patag'),
(41547, 1605, 'Del Pilar'),
(41548, 1605, 'Helene'),
(41549, 1605, 'Honrado'),
(41550, 1605, 'Navarro (Pob.)'),
(41551, 1605, 'Nueva Estrella'),
(41552, 1605, 'Pamosaingan'),
(41553, 1605, 'Rizal (Pob.)'),
(41554, 1605, 'Salog'),
(41555, 1605, 'San Roque'),
(41556, 1605, 'Santa Cruz'),
(41557, 1605, 'Sering'),
(41558, 1605, 'Songkoy'),
(41559, 1605, 'Sudlon'),
(41560, 1605, 'Albino Taruc'),
(41561, 1606, 'Alang-alang'),
(41562, 1606, 'Alegria'),
(41563, 1606, 'Anomar'),
(41564, 1606, 'Aurora'),
(41565, 1606, 'Serna'),
(41566, 1606, 'Balibayon'),
(41567, 1606, 'Baybay'),
(41568, 1606, 'Bilabid'),
(41569, 1606, 'Bitaugan'),
(41570, 1606, 'Bonifacio'),
(41571, 1606, 'Buenavista'),
(41572, 1606, 'Cabongbongan'),
(41573, 1606, 'Cagniog'),
(41574, 1606, 'Cagutsan'),
(41575, 1606, 'Cantiasay'),
(41576, 1606, 'Capalayan'),
(41577, 1606, 'Catadman'),
(41578, 1606, 'Danao'),
(41579, 1606, 'Danawan'),
(41580, 1606, 'Day-asan'),
(41581, 1606, 'Ipil'),
(41582, 1606, 'Libuac'),
(41583, 1606, 'Lipata'),
(41584, 1606, 'Lisondra'),
(41585, 1606, 'Luna'),
(41586, 1606, 'Mabini'),
(41587, 1606, 'Mabua'),
(41588, 1606, 'Manyagao'),
(41589, 1606, 'Mapawa'),
(41590, 1606, 'Mat-i'),
(41591, 1606, 'Nabago'),
(41592, 1606, 'Nonoc'),
(41593, 1606, 'Poctoy'),
(41594, 1606, 'Punta Bilar'),
(41595, 1606, 'Quezon'),
(41596, 1606, 'Rizal'),
(41597, 1606, 'Sabang'),
(41598, 1606, 'San Isidro'),
(41599, 1606, 'San Jose'),
(41600, 1606, 'San Juan'),
(41601, 1606, 'San Pedro'),
(41602, 1606, 'San Roque'),
(41603, 1606, 'Sidlakan'),
(41604, 1606, 'Silop'),
(41605, 1606, 'Sugbay'),
(41606, 1606, 'Sukailang'),
(41607, 1606, 'Taft (Pob.)'),
(41608, 1606, 'Talisay'),
(41609, 1606, 'Togbongon'),
(41610, 1606, 'Trinidad'),
(41611, 1606, 'Orok'),
(41612, 1606, 'Washington (Pob.)'),
(41613, 1606, 'Zaragoza'),
(41614, 1606, 'Canlanipa'),
(41615, 1607, 'Aurora (Pob.)'),
(41616, 1607, 'Azucena (Pob.)'),
(41617, 1607, 'Banban'),
(41618, 1607, 'Cawilan'),
(41619, 1607, 'Fabio'),
(41620, 1607, 'Himamaug'),
(41621, 1607, 'Laurel'),
(41622, 1607, 'Lower Libas'),
(41623, 1607, 'Opong'),
(41624, 1607, 'Sampaguita (Pob.)'),
(41625, 1607, 'Talavera'),
(41626, 1607, 'Union'),
(41627, 1607, 'Upper Libas'),
(41628, 1607, 'Patino'),
(41629, 1608, 'Capayahan'),
(41630, 1608, 'Cawilan'),
(41631, 1608, 'Del Rosario'),
(41632, 1608, 'Marga'),
(41633, 1608, 'Motorpool'),
(41634, 1608, 'Poblacion'),
(41635, 1608, 'San Isidro'),
(41636, 1608, 'Timamana'),
(41637, 1608, 'San Pablo'),
(41638, 1609, 'Amaga'),
(41639, 1609, 'Bahi'),
(41640, 1609, 'Cabacungan'),
(41641, 1609, 'Cambagang'),
(41642, 1609, 'Causwagan'),
(41643, 1609, 'Dapdap'),
(41644, 1609, 'Dughan'),
(41645, 1609, 'Gamut'),
(41646, 1609, 'Javier'),
(41647, 1609, 'Kinayan'),
(41648, 1609, 'Mamis'),
(41649, 1609, 'Poblacion'),
(41650, 1609, 'Rizal'),
(41651, 1609, 'San Jose'),
(41652, 1609, 'San Vicente'),
(41653, 1609, 'Sua'),
(41654, 1609, 'Sudlon'),
(41655, 1609, 'Unidad'),
(41656, 1609, 'Wakat'),
(41657, 1609, 'San Roque'),
(41658, 1609, 'Tambis'),
(41659, 1610, 'Amag'),
(41660, 1610, 'Balete (Pob.)'),
(41661, 1610, 'Cabugo'),
(41662, 1610, 'Cagbaoto'),
(41663, 1610, 'La Paz'),
(41664, 1610, 'Magobawok'),
(41665, 1610, 'Panaosawon'),
(41666, 1611, 'Bucto'),
(41667, 1611, 'Burboanan'),
(41668, 1611, 'San Roque'),
(41669, 1611, 'Caguyao'),
(41670, 1611, 'Coleto'),
(41671, 1611, 'Labisma'),
(41672, 1611, 'Lawigan'),
(41673, 1611, 'Mangagoy'),
(41674, 1611, 'Mone'),
(41675, 1611, 'Pamaypayan'),
(41676, 1611, 'Poblacion'),
(41677, 1611, 'San Antonio'),
(41678, 1611, 'San Fernando'),
(41679, 1611, 'San Isidro'),
(41680, 1611, 'San Jose'),
(41681, 1611, 'San Vicente'),
(41682, 1611, 'Santa Cruz'),
(41683, 1611, 'Sibaroy'),
(41684, 1611, 'Tabon'),
(41685, 1611, 'Tumanan'),
(41686, 1611, 'Pamanlinan'),
(41687, 1611, 'Kahayag'),
(41688, 1611, 'Maharlika'),
(41689, 1611, 'Comawas'),
(41690, 1612, 'Aras-Asan'),
(41691, 1612, 'Bacolod'),
(41692, 1612, 'Bitaugan East'),
(41693, 1612, 'Bitaugan West'),
(41694, 1612, 'Tawagan'),
(41695, 1612, 'Lactudan'),
(41696, 1612, 'Mat-e'),
(41697, 1612, 'La Purisima'),
(41698, 1612, 'Poblacion'),
(41699, 1612, 'Unidad'),
(41700, 1612, 'Tubo-tubo'),
(41701, 1613, 'Bugsukan'),
(41702, 1613, 'Buntalid'),
(41703, 1613, 'Cabangahan'),
(41704, 1613, 'Cabas-an'),
(41705, 1613, 'Calagdaan'),
(41706, 1613, 'Consuelo'),
(41707, 1613, 'General Island'),
(41708, 1613, 'Lininti-an (Pob.)'),
(41709, 1613, 'Magasang'),
(41710, 1613, 'Magosilom (Pob.)'),
(41711, 1613, 'Pag-Antayan'),
(41712, 1613, 'Palasao'),
(41713, 1613, 'Parang'),
(41714, 1613, 'Tapi'),
(41715, 1613, 'Tigabong'),
(41716, 1613, 'Lobo'),
(41717, 1613, 'San Pedro'),
(41718, 1614, 'Antao'),
(41719, 1614, 'Cancavan'),
(41720, 1614, 'Carmen (Pob.)'),
(41721, 1614, 'Esperanza'),
(41722, 1614, 'Puyat'),
(41723, 1614, 'San Vicente'),
(41724, 1614, 'Santa Cruz'),
(41725, 1614, 'Hinapoyan'),
(41726, 1615, 'Adlay'),
(41727, 1615, 'Babuyan'),
(41728, 1615, 'Bacolod'),
(41729, 1615, 'Baybay (Pob.)'),
(41730, 1615, 'Bon-ot'),
(41731, 1615, 'Caglayag'),
(41732, 1615, 'Dahican'),
(41733, 1615, 'Doyos (Pob.)'),
(41734, 1615, 'Embarcadero (Pob.)'),
(41735, 1615, 'Gamuton'),
(41736, 1615, 'Panikian'),
(41737, 1615, 'Pantukan'),
(41738, 1615, 'Saca (Pob.)'),
(41739, 1615, 'Tag-Anito'),
(41740, 1616, 'Balibadon'),
(41741, 1616, 'Burgos'),
(41742, 1616, 'Capandan'),
(41743, 1616, 'Mabahin'),
(41744, 1616, 'Madrelino'),
(41745, 1616, 'Manlico'),
(41746, 1616, 'Matho'),
(41747, 1616, 'Poblacion'),
(41748, 1616, 'Tag-Anongan'),
(41749, 1616, 'Tigao'),
(41750, 1616, 'Tuboran'),
(41751, 1616, 'Uba'),
(41752, 1617, 'Baculin'),
(41753, 1617, 'Bigaan'),
(41754, 1617, 'Cambatong'),
(41755, 1617, 'Campa'),
(41756, 1617, 'Dugmanon'),
(41757, 1617, 'Harip'),
(41758, 1617, 'La Casa (Pob.)'),
(41759, 1617, 'Loyola'),
(41760, 1617, 'Maligaya'),
(41761, 1617, 'Pagtigni-an'),
(41762, 1617, 'Pocto'),
(41763, 1617, 'Port Lamon'),
(41764, 1617, 'Roxas'),
(41765, 1617, 'San Juan'),
(41766, 1617, 'Sasa'),
(41767, 1617, 'Tagasaka'),
(41768, 1617, 'Talisay'),
(41769, 1617, 'Tarusan'),
(41770, 1617, 'Tidman'),
(41771, 1617, 'Tiwi'),
(41772, 1617, 'Benigno Aquino'),
(41773, 1617, 'Zone II (Pob.)'),
(41774, 1617, 'Zone III Maharlika (Pob.)'),
(41775, 1617, 'Tagbobonga'),
(41776, 1618, 'Agsam'),
(41777, 1618, 'Bocawe'),
(41778, 1618, 'Bunga'),
(41779, 1618, 'Gamuton'),
(41780, 1618, 'Habag'),
(41781, 1618, 'Mampi'),
(41782, 1618, 'Nurcia'),
(41783, 1618, 'Sibahay'),
(41784, 1618, 'Zone I (Pob.)'),
(41785, 1618, 'Pakwan'),
(41786, 1618, 'Zone II (Pob.)'),
(41787, 1618, 'Zone III (Pob.)'),
(41788, 1618, 'Zone IV (Pob.)'),
(41789, 1619, 'Anibongan'),
(41790, 1619, 'Banahao'),
(41791, 1619, 'Ban-as'),
(41792, 1619, 'Baucawe'),
(41793, 1619, 'Diatagon'),
(41794, 1619, 'Ganayon'),
(41795, 1619, 'Liatimco'),
(41796, 1619, 'Manyayay'),
(41797, 1619, 'Payasan'),
(41798, 1619, 'Poblacion'),
(41799, 1619, 'Saint Christine'),
(41800, 1619, 'San Isidro'),
(41801, 1619, 'San Pedro'),
(41802, 1620, 'Anibongan'),
(41803, 1620, 'Barcelona'),
(41804, 1620, 'Bongan'),
(41805, 1620, 'Bogak'),
(41806, 1620, 'Handamayan'),
(41807, 1620, 'Mahayahay'),
(41808, 1620, 'Mandus'),
(41809, 1620, 'Mansa-ilao'),
(41810, 1620, 'Pagtila-an'),
(41811, 1620, 'Palo Alto'),
(41812, 1620, 'Poblacion'),
(41813, 1620, 'Rajah Cabungso-an'),
(41814, 1620, 'Sabang'),
(41815, 1620, 'Salvacion'),
(41816, 1620, 'San Roque'),
(41817, 1620, 'Tagpoporan'),
(41818, 1620, 'Union'),
(41819, 1620, 'Valencia'),
(41820, 1621, 'Bagsac'),
(41821, 1621, 'Bayogo'),
(41822, 1621, 'Magsaysay'),
(41823, 1621, 'Manga'),
(41824, 1621, 'Panayogon'),
(41825, 1621, 'Patong Patong'),
(41826, 1621, 'Quirino (Pob.)'),
(41827, 1621, 'San Antonio'),
(41828, 1621, 'San Juan'),
(41829, 1621, 'San Roque'),
(41830, 1621, 'San Vicente'),
(41831, 1621, 'Songkit'),
(41832, 1621, 'Union'),
(41833, 1621, 'Linibonan'),
(41834, 1622, 'Alegria'),
(41835, 1622, 'Amontay'),
(41836, 1622, 'Antipolo'),
(41837, 1622, 'Arorogan'),
(41838, 1622, 'Bayan'),
(41839, 1622, 'Mahaba'),
(41840, 1622, 'Mararag'),
(41841, 1622, 'Poblacion'),
(41842, 1622, 'San Antonio'),
(41843, 1622, 'San Isidro'),
(41844, 1622, 'San Pedro'),
(41845, 1622, 'Santa Cruz'),
(41846, 1623, 'Bretania'),
(41847, 1623, 'Buatong'),
(41848, 1623, 'Buhisan'),
(41849, 1623, 'Gata'),
(41850, 1623, 'Hornasan'),
(41851, 1623, 'Janipaan'),
(41852, 1623, 'Kauswagan'),
(41853, 1623, 'Oteiza'),
(41854, 1623, 'Poblacion'),
(41855, 1623, 'Pong-on'),
(41856, 1623, 'Pongtod'),
(41857, 1623, 'Salvacion'),
(41858, 1623, 'Santo Niño'),
(41859, 1624, 'Bagyang'),
(41860, 1624, 'Baras'),
(41861, 1624, 'Bitaugan'),
(41862, 1624, 'Bolhoon'),
(41863, 1624, 'Calatngan'),
(41864, 1624, 'Carromata'),
(41865, 1624, 'Castillo'),
(41866, 1624, 'Libas Gua'),
(41867, 1624, 'Libas Sud'),
(41868, 1624, 'Magroyong'),
(41869, 1624, 'Mahayag'),
(41870, 1624, 'Patong'),
(41871, 1624, 'Poblacion'),
(41872, 1624, 'Sagbayan'),
(41873, 1624, 'San Roque'),
(41874, 1624, 'Siagao'),
(41875, 1624, 'Umalag'),
(41876, 1624, 'Tina'),
(41877, 1625, 'Batunan'),
(41878, 1625, 'Carpenito'),
(41879, 1625, 'Kahayagan'),
(41880, 1625, 'Lago'),
(41881, 1625, 'Maglambing'),
(41882, 1625, 'Maglatab'),
(41883, 1625, 'Magsaysay'),
(41884, 1625, 'Malixi'),
(41885, 1625, 'Manambia'),
(41886, 1625, 'Osmeña'),
(41887, 1625, 'Poblacion'),
(41888, 1625, 'Quezon'),
(41889, 1625, 'San Vicente'),
(41890, 1625, 'Santa Cruz'),
(41891, 1625, 'Santa Fe'),
(41892, 1625, 'Santa Juana'),
(41893, 1625, 'Santa Maria'),
(41894, 1625, 'Sayon'),
(41895, 1625, 'Soriano'),
(41896, 1625, 'Tagongon'),
(41897, 1625, 'Trinidad'),
(41898, 1625, 'Ugoban'),
(41899, 1625, 'Villaverde'),
(41900, 1625, 'Doña Carmen'),
(41901, 1625, 'Hinagdanan'),
(41902, 1626, 'Alba'),
(41903, 1626, 'Anahao Bag-o'),
(41904, 1626, 'Anahao Daan'),
(41905, 1626, 'Badong'),
(41906, 1626, 'Bajao'),
(41907, 1626, 'Bangsud'),
(41908, 1626, 'Cagdapao'),
(41909, 1626, 'Camagong'),
(41910, 1626, 'Caras-an'),
(41911, 1626, 'Cayale'),
(41912, 1626, 'Dayo-an'),
(41913, 1626, 'Gamut'),
(41914, 1626, 'Jubang'),
(41915, 1626, 'Kinabigtasan'),
(41916, 1626, 'Layog'),
(41917, 1626, 'Lindoy'),
(41918, 1626, 'Mercedes'),
(41919, 1626, 'Purisima (Pob.)'),
(41920, 1626, 'Sumo-sumo'),
(41921, 1626, 'Umbay'),
(41922, 1626, 'Unaban'),
(41923, 1626, 'Unidos'),
(41924, 1626, 'Victoria'),
(41925, 1626, 'Cabangahan'),
(41926, 1627, 'Awasian'),
(41927, 1627, 'Bagong Lungsod (Pob.)'),
(41928, 1627, 'Bioto'),
(41929, 1627, 'Buenavista'),
(41930, 1627, 'Bongtod Pob.'),
(41931, 1627, 'Dagocdoc (Pob.)'),
(41932, 1627, 'Mabua'),
(41933, 1627, 'Mabuhay'),
(41934, 1627, 'Maitum'),
(41935, 1627, 'Maticdum'),
(41936, 1627, 'Pandanon'),
(41937, 1627, 'Pangi'),
(41938, 1627, 'Quezon'),
(41939, 1627, 'Rosario'),
(41940, 1627, 'Salvacion'),
(41941, 1627, 'San Agustin Norte'),
(41942, 1627, 'San Agustin Sur'),
(41943, 1627, 'San Antonio'),
(41944, 1627, 'San Isidro'),
(41945, 1627, 'San Jose'),
(41946, 1627, 'Telaje'),
(41947, 1628, 'Catadman'),
(41948, 1628, 'Columbus'),
(41949, 1628, 'Coring'),
(41950, 1628, 'Cortes'),
(41951, 1628, 'Doña Helene'),
(41952, 1628, 'Ferdinand'),
(41953, 1628, 'Geotina'),
(41954, 1628, 'Imee'),
(41955, 1628, 'Melgar'),
(41956, 1628, 'Montag'),
(41957, 1628, 'Navarro'),
(41958, 1628, 'Poblacion'),
(41959, 1628, 'Puerto Princesa'),
(41960, 1628, 'Rita Glenda'),
(41961, 1628, 'Roxas'),
(41962, 1628, 'Sering'),
(41963, 1628, 'Tag-abaca'),
(41964, 1628, 'Benglen'),
(41965, 1628, 'Diegas'),
(41966, 1628, 'Edera'),
(41967, 1628, 'New Nazareth'),
(41968, 1628, 'Roma'),
(41969, 1628, 'Santa Monica'),
(41970, 1628, 'Santo Niño'),
(41971, 1628, 'Sombrado'),
(41972, 1628, 'Villa Ecleo'),
(41973, 1628, 'Villa Pantinople'),
(41974, 1629, 'Boa'),
(41975, 1629, 'Cabunga-an'),
(41976, 1629, 'Del Pilar'),
(41977, 1629, 'Laguna'),
(41978, 1629, 'Legaspi'),
(41979, 1629, 'Ma-atas'),
(41980, 1629, 'Nueva Estrella'),
(41981, 1629, 'Poblacion'),
(41982, 1629, 'San Jose'),
(41983, 1629, 'Santa Rita'),
(41984, 1629, 'Tigbao'),
(41985, 1629, 'Valencia'),
(41986, 1629, 'Mabini'),
(41987, 1629, 'R. Ecleo, Sr.'),
(41988, 1630, 'Cab-ilan'),
(41989, 1630, 'Cabayawan'),
(41990, 1630, 'Escolta (Pob.)'),
(41991, 1630, 'Gomez'),
(41992, 1630, 'Magsaysay'),
(41993, 1630, 'Mauswagon (Pob.)'),
(41994, 1630, 'White Beach (Pob.)'),
(41995, 1630, 'Bagumbayan'),
(41996, 1630, 'New Mabuhay'),
(41997, 1630, 'Wadas'),
(41998, 1630, 'Cayetano'),
(41999, 1630, 'Justiniana Edera'),
(42000, 1631, 'Albor (Pob.)'),
(42001, 1631, 'Arellano'),
(42002, 1631, 'Bayanihan'),
(42003, 1631, 'Doña Helen'),
(42004, 1631, 'Garcia'),
(42005, 1631, 'General Aguinaldo'),
(42006, 1631, 'Kanihaan'),
(42007, 1631, 'Magsaysay'),
(42008, 1631, 'Osmeña'),
(42009, 1631, 'Plaridel'),
(42010, 1631, 'Quezon'),
(42011, 1631, 'San Antonio (Pob.)'),
(42012, 1631, 'San Jose'),
(42013, 1631, 'Santo Niño'),
(42014, 1631, 'Llamera'),
(42015, 1631, 'Rosita'),
(42016, 1632, 'Carmen (Pob.)'),
(42017, 1632, 'Esperanza'),
(42018, 1632, 'Ferdinand'),
(42019, 1632, 'Helene'),
(42020, 1632, 'Liberty'),
(42021, 1632, 'Magsaysay'),
(42022, 1632, 'Panamaon'),
(42023, 1632, 'San Juan (Pob.)'),
(42024, 1632, 'Santa Cruz (Pob.)'),
(42025, 1632, 'Santiago (Pob.)'),
(42026, 1633, 'Aurelio'),
(42027, 1633, 'Cuarinta'),
(42028, 1633, 'Don Ruben Ecleo'),
(42029, 1633, 'Jacquez'),
(42030, 1633, 'Justiniana Edera'),
(42031, 1633, 'Luna'),
(42032, 1633, 'Mahayahay'),
(42033, 1633, 'Matingbe'),
(42034, 1633, 'San Jose (Pob.)'),
(42035, 1633, 'San Juan'),
(42036, 1633, 'Santa Cruz'),
(42037, 1633, 'Wilson'),
(42038, 1634, 'Imelda'),
(42039, 1634, 'Mabini'),
(42040, 1634, 'Malinao'),
(42041, 1634, 'Navarro'),
(42042, 1634, 'Diaz'),
(42043, 1634, 'Roxas'),
(42044, 1634, 'San Roque (Pob.)'),
(42045, 1634, 'San Vicente (Pob.)'),
(42046, 1634, 'Santa Cruz (Pob.)');

-- --------------------------------------------------------

--
-- Table structure for table `table_municipality`
--

CREATE TABLE `table_municipality` (
  `municipality_id` varchar(255) DEFAULT NULL,
  `province_id` varchar(255) DEFAULT NULL,
  `municipality_name` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `table_municipality`
--

INSERT INTO `table_municipality` (`municipality_id`, `province_id`, `municipality_name`) VALUES
('1', '2', 'Adams'),
('2', '2', 'Bacarra'),
('3', '2', 'Badoc'),
('4', '2', 'Bangui'),
('5', '2', 'City of Batac'),
('6', '2', 'Burgos'),
('7', '2', 'Carasi'),
('8', '2', 'Currimao'),
('9', '2', 'Dingras'),
('10', '2', 'Dumalneg'),
('11', '2', 'Banna'),
('12', '2', 'City of Laoag'),
('13', '2', 'Marcos'),
('14', '2', 'Nueva Era'),
('15', '2', 'Pagudpud'),
('16', '2', 'Paoay'),
('17', '2', 'Pasuquin'),
('18', '2', 'Piddig'),
('19', '2', 'Pinili'),
('20', '2', 'San Nicolas'),
('21', '2', 'Sarrat'),
('22', '2', 'Solsona'),
('23', '2', 'Vintar'),
('24', '3', 'Alilem'),
('25', '3', 'Banayoyo'),
('26', '3', 'Bantay'),
('27', '3', 'Burgos'),
('28', '3', 'Cabugao'),
('29', '3', 'City of Candon'),
('30', '3', 'Caoayan'),
('31', '3', 'Cervantes'),
('32', '3', 'Galimuyod'),
('33', '3', 'Gregorio del Pilar'),
('34', '3', 'Lidlidda'),
('35', '3', 'Magsingal'),
('36', '3', 'Nagbukel'),
('37', '3', 'Narvacan'),
('38', '3', 'Quirino'),
('39', '3', 'Salcedo'),
('40', '3', 'San Emilio'),
('41', '3', 'San Esteban'),
('42', '3', 'San Ildefonso'),
('43', '3', 'San Juan'),
('44', '3', 'San Vicente'),
('45', '3', 'Santa'),
('46', '3', 'Santa Catalina'),
('47', '3', 'Santa Cruz'),
('48', '3', 'Santa Lucia'),
('49', '3', 'Santa Maria'),
('50', '3', 'Santiago'),
('51', '3', 'Santo Domingo'),
('52', '3', 'Sigay'),
('53', '3', 'Sinait'),
('54', '3', 'Sugpon'),
('55', '3', 'Suyo'),
('56', '3', 'Tagudin'),
('57', '3', 'City of Vigan'),
('58', '4', 'Agoo'),
('59', '4', 'Aringay'),
('60', '4', 'Bacnotan'),
('61', '4', 'Bagulin'),
('62', '4', 'Balaoan'),
('63', '4', 'Bangar'),
('64', '4', 'Bauang'),
('65', '4', 'Burgos'),
('66', '4', 'Caba'),
('67', '4', 'Luna'),
('68', '4', 'Naguilian'),
('69', '4', 'Pugo'),
('70', '4', 'Rosario'),
('71', '4', 'City of San Fernando'),
('72', '4', 'San Gabriel'),
('73', '4', 'San Juan'),
('74', '4', 'Santo Tomas'),
('75', '4', 'Santol'),
('76', '4', 'Sudipen'),
('77', '4', 'Tubao'),
('78', '5', 'Agno'),
('79', '5', 'Aguilar'),
('80', '5', 'City of Alaminos'),
('81', '5', 'Alcala'),
('82', '5', 'Anda'),
('83', '5', 'Asingan'),
('84', '5', 'Balungao'),
('85', '5', 'Bani'),
('86', '5', 'Basista'),
('87', '5', 'Bautista'),
('88', '5', 'Bayambang'),
('89', '5', 'Binalonan'),
('90', '5', 'Binmaley'),
('91', '5', 'Bolinao'),
('92', '5', 'Bugallon'),
('93', '5', 'Burgos'),
('94', '5', 'Calasiao'),
('95', '5', 'City of Dagupan'),
('96', '5', 'Dasol'),
('97', '5', 'Infanta'),
('98', '5', 'Labrador'),
('99', '5', 'Lingayen'),
('100', '5', 'Mabini'),
('101', '5', 'Malasiqui'),
('102', '5', 'Manaoag'),
('103', '5', 'Mangaldan'),
('104', '5', 'Mangatarem'),
('105', '5', 'Mapandan'),
('106', '5', 'Natividad'),
('107', '5', 'Pozorrubio'),
('108', '5', 'Rosales'),
('109', '5', 'City of San Carlos'),
('110', '5', 'San Fabian'),
('111', '5', 'San Jacinto'),
('112', '5', 'San Manuel'),
('113', '5', 'San Nicolas'),
('114', '5', 'San Quintin'),
('115', '5', 'Santa Barbara'),
('116', '5', 'Santa Maria'),
('117', '5', 'Santo Tomas'),
('118', '5', 'Sison'),
('119', '5', 'Sual'),
('120', '5', 'Tayug'),
('121', '5', 'Umingan'),
('122', '5', 'Urbiztondo'),
('123', '5', 'City of Urdaneta'),
('124', '5', 'Villasis'),
('125', '5', 'Laoac'),
('126', '6', 'Basco'),
('127', '6', 'Itbayat'),
('128', '6', 'Ivana'),
('129', '6', 'Mahatao'),
('130', '6', 'Sabtang'),
('131', '6', 'Uyugan'),
('132', '7', 'Abulug'),
('133', '7', 'Alcala'),
('134', '7', 'Allacapan'),
('135', '7', 'Amulung'),
('136', '7', 'Aparri'),
('137', '7', 'Baggao'),
('138', '7', 'Ballesteros'),
('139', '7', 'Buguey'),
('140', '7', 'Calayan'),
('141', '7', 'Camalaniugan'),
('142', '7', 'Claveria'),
('143', '7', 'Enrile'),
('144', '7', 'Gattaran'),
('145', '7', 'Gonzaga'),
('146', '7', 'Iguig'),
('147', '7', 'Lal-Lo'),
('148', '7', 'Lasam'),
('149', '7', 'Pamplona'),
('150', '7', 'Peñablanca'),
('151', '7', 'Piat'),
('152', '7', 'Rizal'),
('153', '7', 'Sanchez-Mira'),
('154', '7', 'Santa Ana'),
('155', '7', 'Santa Praxedes'),
('156', '7', 'Santa Teresita'),
('157', '7', 'Santo Niño'),
('158', '7', 'Solana'),
('159', '7', 'Tuao'),
('160', '7', 'Tuguegarao City'),
('161', '8', 'Alicia'),
('162', '8', 'Angadanan'),
('163', '8', 'Aurora'),
('164', '8', 'Benito Soliven'),
('165', '8', 'Burgos'),
('166', '8', 'Cabagan'),
('167', '8', 'Cabatuan'),
('168', '8', 'City of Cauayan'),
('169', '8', 'Cordon'),
('170', '8', 'Dinapigue'),
('171', '8', 'Divilacan'),
('172', '8', 'Echague'),
('173', '8', 'Gamu'),
('174', '8', 'City of Ilagan'),
('175', '8', 'Jones'),
('176', '8', 'Luna'),
('177', '8', 'Maconacon'),
('178', '8', 'Delfin Albano'),
('179', '8', 'Mallig'),
('180', '8', 'Naguilian'),
('181', '8', 'Palanan'),
('182', '8', 'Quezon'),
('183', '8', 'Quirino'),
('184', '8', 'Ramon'),
('185', '8', 'Reina Mercedes'),
('186', '8', 'Roxas'),
('187', '8', 'San Agustin'),
('188', '8', 'San Guillermo'),
('189', '8', 'San Isidro'),
('190', '8', 'San Manuel'),
('191', '8', 'San Mariano'),
('192', '8', 'San Mateo'),
('193', '8', 'San Pablo'),
('194', '8', 'Santa Maria'),
('195', '8', 'City of Santiago'),
('196', '8', 'Santo Tomas'),
('197', '8', 'Tumauini'),
('198', '9', 'Ambaguio'),
('199', '9', 'Aritao'),
('200', '9', 'Bagabag'),
('201', '9', 'Bambang'),
('202', '9', 'Bayombong'),
('203', '9', 'Diadi'),
('204', '9', 'Dupax del Norte'),
('205', '9', 'Dupax del Sur'),
('206', '9', 'Kasibu'),
('207', '9', 'Kayapa'),
('208', '9', 'Quezon'),
('209', '9', 'Santa Fe'),
('210', '9', 'Solano'),
('211', '9', 'Villaverde'),
('212', '9', 'Alfonso Castaneda'),
('213', '10', 'Aglipay'),
('214', '10', 'Cabarroguis'),
('215', '10', 'Diffun'),
('216', '10', 'Maddela'),
('217', '10', 'Saguday'),
('218', '10', 'Nagtipunan'),
('219', '11', 'Abucay'),
('220', '11', 'Bagac'),
('221', '11', 'City of Balanga'),
('222', '11', 'Dinalupihan'),
('223', '11', 'Hermosa'),
('224', '11', 'Limay'),
('225', '11', 'Mariveles'),
('226', '11', 'Morong'),
('227', '11', 'Orani'),
('228', '11', 'Orion'),
('229', '11', 'Pilar'),
('230', '11', 'Samal'),
('231', '12', 'Angat'),
('232', '12', 'Balagtas'),
('233', '12', 'Baliuag'),
('234', '12', 'Bocaue'),
('235', '12', 'Bulacan'),
('236', '12', 'Bustos'),
('237', '12', 'Calumpit'),
('238', '12', 'Guiguinto'),
('239', '12', 'Hagonoy'),
('240', '12', 'City of Malolos'),
('241', '12', 'Marilao'),
('242', '12', 'City of Meycauayan'),
('243', '12', 'Norzagaray'),
('244', '12', 'Obando'),
('245', '12', 'Pandi'),
('246', '12', 'Paombong'),
('247', '12', 'Plaridel'),
('248', '12', 'Pulilan'),
('249', '12', 'San Ildefonso'),
('250', '12', 'City of San Jose Del Monte'),
('251', '12', 'San Miguel'),
('252', '12', 'San Rafael'),
('253', '12', 'Santa Maria'),
('254', '12', 'Doña Remedios Trinidad'),
('255', '13', 'Aliaga'),
('256', '13', 'Bongabon'),
('257', '13', 'City of Cabanatuan'),
('258', '13', 'Cabiao'),
('259', '13', 'Carranglan'),
('260', '13', 'Cuyapo'),
('261', '13', 'Gabaldon'),
('262', '13', 'City of Gapan'),
('263', '13', 'General Mamerto Natividad'),
('264', '13', 'General Tinio'),
('265', '13', 'Guimba'),
('266', '13', 'Jaen'),
('267', '13', 'Laur'),
('268', '13', 'Licab'),
('269', '13', 'Llanera'),
('270', '13', 'Lupao'),
('271', '13', 'Science City of Muñoz'),
('272', '13', 'Nampicuan'),
('273', '13', 'City of Palayan'),
('274', '13', 'Pantabangan'),
('275', '13', 'Peñaranda'),
('276', '13', 'Quezon'),
('277', '13', 'Rizal'),
('278', '13', 'San Antonio'),
('279', '13', 'San Isidro'),
('280', '13', 'San Jose City'),
('281', '13', 'San Leonardo'),
('282', '13', 'Santa Rosa'),
('283', '13', 'Santo Domingo'),
('284', '13', 'Talavera'),
('285', '13', 'Talugtug'),
('286', '13', 'Zaragoza'),
('287', '14', 'City of Angeles'),
('288', '14', 'Apalit'),
('289', '14', 'Arayat'),
('290', '14', 'Bacolor'),
('291', '14', 'Candaba'),
('292', '14', 'Floridablanca'),
('293', '14', 'Guagua'),
('294', '14', 'Lubao'),
('295', '14', 'Mabalacat City'),
('296', '14', 'Macabebe'),
('297', '14', 'Magalang'),
('298', '14', 'Masantol'),
('299', '14', 'Mexico'),
('300', '14', 'Minalin'),
('301', '14', 'Porac'),
('302', '14', 'City of San Fernando'),
('303', '14', 'San Luis'),
('304', '14', 'San Simon'),
('305', '14', 'Santa Ana'),
('306', '14', 'Santa Rita'),
('307', '14', 'Santo Tomas'),
('308', '14', 'Sasmuan'),
('309', '15', 'Anao'),
('310', '15', 'Bamban'),
('311', '15', 'Camiling'),
('312', '15', 'Capas'),
('313', '15', 'Concepcion'),
('314', '15', 'Gerona'),
('315', '15', 'La Paz'),
('316', '15', 'Mayantoc'),
('317', '15', 'Moncada'),
('318', '15', 'Paniqui'),
('319', '15', 'Pura'),
('320', '15', 'Ramos'),
('321', '15', 'San Clemente'),
('322', '15', 'San Manuel'),
('323', '15', 'Santa Ignacia'),
('324', '15', 'City of Tarlac'),
('325', '15', 'Victoria'),
('326', '15', 'San Jose'),
('327', '16', 'Botolan'),
('328', '16', 'Cabangan'),
('329', '16', 'Candelaria'),
('330', '16', 'Castillejos'),
('331', '16', 'Iba'),
('332', '16', 'Masinloc'),
('333', '16', 'City of Olongapo'),
('334', '16', 'Palauig'),
('335', '16', 'San Antonio'),
('336', '16', 'San Felipe'),
('337', '16', 'San Marcelino'),
('338', '16', 'San Narciso'),
('339', '16', 'Santa Cruz'),
('340', '16', 'Subic'),
('341', '17', 'Baler'),
('342', '17', 'Casiguran'),
('343', '17', 'Dilasag'),
('344', '17', 'Dinalungan'),
('345', '17', 'Dingalan'),
('346', '17', 'Dipaculao'),
('347', '17', 'Maria Aurora'),
('348', '17', 'San Luis'),
('349', '18', 'Agoncillo'),
('350', '18', 'Alitagtag'),
('351', '18', 'Balayan'),
('352', '18', 'Balete'),
('353', '18', 'Batangas City'),
('354', '18', 'Bauan'),
('355', '18', 'Calaca'),
('356', '18', 'Calatagan'),
('357', '18', 'Cuenca'),
('358', '18', 'Ibaan'),
('359', '18', 'Laurel'),
('360', '18', 'Lemery'),
('361', '18', 'Lian'),
('362', '18', 'City of Lipa'),
('363', '18', 'Lobo'),
('364', '18', 'Mabini'),
('365', '18', 'Malvar'),
('366', '18', 'Mataasnakahoy'),
('367', '18', 'Nasugbu'),
('368', '18', 'Padre Garcia'),
('369', '18', 'Rosario'),
('370', '18', 'San Jose'),
('371', '18', 'San Juan'),
('372', '18', 'San Luis'),
('373', '18', 'San Nicolas'),
('374', '18', 'San Pascual'),
('375', '18', 'Santa Teresita'),
('376', '18', 'City of Sto. Tomas'),
('377', '18', 'Taal'),
('378', '18', 'Talisay'),
('379', '18', 'City of Tanauan'),
('380', '18', 'Taysan'),
('381', '18', 'Tingloy'),
('382', '18', 'Tuy'),
('383', '19', 'Alfonso'),
('384', '19', 'Amadeo'),
('385', '19', 'City of Bacoor'),
('386', '19', 'Carmona'),
('387', '19', 'City of Cavite'),
('388', '19', 'City of Dasmariñas'),
('389', '19', 'General Emilio Aguinaldo'),
('390', '19', 'City of General Trias'),
('391', '19', 'City of Imus'),
('392', '19', 'Indang'),
('393', '19', 'Kawit'),
('394', '19', 'Magallanes'),
('395', '19', 'Maragondon'),
('396', '19', 'Mendez'),
('397', '19', 'Naic'),
('398', '19', 'Noveleta'),
('399', '19', 'Rosario'),
('400', '19', 'Silang'),
('401', '19', 'City of Tagaytay'),
('402', '19', 'Tanza'),
('403', '19', 'Ternate'),
('404', '19', 'City of Trece Martires'),
('405', '19', 'Gen. Mariano Alvarez'),
('406', '20', 'Alaminos'),
('407', '20', 'Bay'),
('408', '20', 'City of Biñan'),
('409', '20', 'City of Cabuyao'),
('410', '20', 'City of Calamba'),
('411', '20', 'Calauan'),
('412', '20', 'Cavinti'),
('413', '20', 'Famy'),
('414', '20', 'Kalayaan'),
('415', '20', 'Liliw'),
('416', '20', 'Los Baños'),
('417', '20', 'Luisiana'),
('418', '20', 'Lumban'),
('419', '20', 'Mabitac'),
('420', '20', 'Magdalena'),
('421', '20', 'Majayjay'),
('422', '20', 'Nagcarlan'),
('423', '20', 'Paete'),
('424', '20', 'Pagsanjan'),
('425', '20', 'Pakil'),
('426', '20', 'Pangil'),
('427', '20', 'Pila'),
('428', '20', 'Rizal'),
('429', '20', 'City of San Pablo'),
('430', '20', 'City of San Pedro'),
('431', '20', 'Santa Cruz'),
('432', '20', 'Santa Maria'),
('433', '20', 'City of Santa Rosa'),
('434', '20', 'Siniloan'),
('435', '20', 'Victoria'),
('436', '21', 'Agdangan'),
('437', '21', 'Alabat'),
('438', '21', 'Atimonan'),
('439', '21', 'Buenavista'),
('440', '21', 'Burdeos'),
('441', '21', 'Calauag'),
('442', '21', 'Candelaria'),
('443', '21', 'Catanauan'),
('444', '21', 'Dolores'),
('445', '21', 'General Luna'),
('446', '21', 'General Nakar'),
('447', '21', 'Guinayangan'),
('448', '21', 'Gumaca'),
('449', '21', 'Infanta'),
('450', '21', 'Jomalig'),
('451', '21', 'Lopez'),
('452', '21', 'Lucban'),
('453', '21', 'City of Lucena'),
('454', '21', 'Macalelon'),
('455', '21', 'Mauban'),
('456', '21', 'Mulanay'),
('457', '21', 'Padre Burgos'),
('458', '21', 'Pagbilao'),
('459', '21', 'Panukulan'),
('460', '21', 'Patnanungan'),
('461', '21', 'Perez'),
('462', '21', 'Pitogo'),
('463', '21', 'Plaridel'),
('464', '21', 'Polillo'),
('465', '21', 'Quezon'),
('466', '21', 'Real'),
('467', '21', 'Sampaloc'),
('468', '21', 'San Andres'),
('469', '21', 'San Antonio'),
('470', '21', 'San Francisco'),
('471', '21', 'San Narciso'),
('472', '21', 'Sariaya'),
('473', '21', 'Tagkawayan'),
('474', '21', 'City of Tayabas'),
('475', '21', 'Tiaong'),
('476', '21', 'Unisan'),
('477', '22', 'Angono'),
('478', '22', 'City of Antipolo'),
('479', '22', 'Baras'),
('480', '22', 'Binangonan'),
('481', '22', 'Cainta'),
('482', '22', 'Cardona'),
('483', '22', 'Jala-Jala'),
('484', '22', 'Rodriguez'),
('485', '22', 'Morong'),
('486', '22', 'Pililla'),
('487', '22', 'San Mateo'),
('488', '22', 'Tanay'),
('489', '22', 'Taytay'),
('490', '22', 'Teresa'),
('491', '23', 'Boac'),
('492', '23', 'Buenavista'),
('493', '23', 'Gasan'),
('494', '23', 'Mogpog'),
('495', '23', 'Santa Cruz'),
('496', '23', 'Torrijos'),
('497', '24', 'Abra De Ilog'),
('498', '24', 'Calintaan'),
('499', '24', 'Looc'),
('500', '24', 'Lubang'),
('501', '24', 'Magsaysay'),
('502', '24', 'Mamburao'),
('503', '24', 'Paluan'),
('504', '24', 'Rizal'),
('505', '24', 'Sablayan'),
('506', '24', 'San Jose'),
('507', '24', 'Santa Cruz'),
('508', '25', 'Baco'),
('509', '25', 'Bansud'),
('510', '25', 'Bongabong'),
('511', '25', 'Bulalacao'),
('512', '25', 'City of Calapan'),
('513', '25', 'Gloria'),
('514', '25', 'Mansalay'),
('515', '25', 'Naujan'),
('516', '25', 'Pinamalayan'),
('517', '25', 'Pola'),
('518', '25', 'Puerto Galera'),
('519', '25', 'Roxas'),
('520', '25', 'San Teodoro'),
('521', '25', 'Socorro'),
('522', '25', 'Victoria'),
('523', '26', 'Aborlan'),
('524', '26', 'Agutaya'),
('525', '26', 'Araceli'),
('526', '26', 'Balabac'),
('527', '26', 'Bataraza'),
('528', '26', 'Brooke\'S Point'),
('529', '26', 'Busuanga'),
('530', '26', 'Cagayancillo'),
('531', '26', 'Coron'),
('532', '26', 'Cuyo'),
('533', '26', 'Dumaran'),
('534', '26', 'El Nido'),
('535', '26', 'Linapacan'),
('536', '26', 'Magsaysay'),
('537', '26', 'Narra'),
('538', '26', 'City of Puerto Princesa'),
('539', '26', 'Quezon'),
('540', '26', 'Roxas'),
('541', '26', 'San Vicente'),
('542', '26', 'Taytay'),
('543', '26', 'Kalayaan'),
('544', '26', 'Culion'),
('545', '26', 'Rizal'),
('546', '26', 'Sofronio Española'),
('547', '27', 'Alcantara'),
('548', '27', 'Banton'),
('549', '27', 'Cajidiocan'),
('550', '27', 'Calatrava'),
('551', '27', 'Concepcion'),
('552', '27', 'Corcuera'),
('553', '27', 'Looc'),
('554', '27', 'Magdiwang'),
('555', '27', 'Odiongan'),
('556', '27', 'Romblon'),
('557', '27', 'San Agustin'),
('558', '27', 'San Andres'),
('559', '27', 'San Fernando'),
('560', '27', 'San Jose'),
('561', '27', 'Santa Fe'),
('562', '27', 'Ferrol'),
('563', '27', 'Santa Maria'),
('564', '28', 'Bacacay'),
('565', '28', 'Camalig'),
('566', '28', 'Daraga'),
('567', '28', 'Guinobatan'),
('568', '28', 'Jovellar'),
('569', '28', 'City of Legazpi'),
('570', '28', 'Libon'),
('571', '28', 'City of Ligao'),
('572', '28', 'Malilipot'),
('573', '28', 'Malinao'),
('574', '28', 'Manito'),
('575', '28', 'Oas'),
('576', '28', 'Pio Duran'),
('577', '28', 'Polangui'),
('578', '28', 'Rapu-Rapu'),
('579', '28', 'Santo Domingo'),
('580', '28', 'City of Tabaco'),
('581', '28', 'Tiwi'),
('582', '29', 'Basud'),
('583', '29', 'Capalonga'),
('584', '29', 'Daet'),
('585', '29', 'San Lorenzo Ruiz'),
('586', '29', 'Jose Panganiban'),
('587', '29', 'Labo'),
('588', '29', 'Mercedes'),
('589', '29', 'Paracale'),
('590', '29', 'San Vicente'),
('591', '29', 'Santa Elena'),
('592', '29', 'Talisay'),
('593', '29', 'Vinzons'),
('594', '30', 'Baao'),
('595', '30', 'Balatan'),
('596', '30', 'Bato'),
('597', '30', 'Bombon'),
('598', '30', 'Buhi'),
('599', '30', 'Bula'),
('600', '30', 'Cabusao'),
('601', '30', 'Calabanga'),
('602', '30', 'Camaligan'),
('603', '30', 'Canaman'),
('604', '30', 'Caramoan'),
('605', '30', 'Del Gallego'),
('606', '30', 'Gainza'),
('607', '30', 'Garchitorena'),
('608', '30', 'Goa'),
('609', '30', 'City of Iriga'),
('610', '30', 'Lagonoy'),
('611', '30', 'Libmanan'),
('612', '30', 'Lupi'),
('613', '30', 'Magarao'),
('614', '30', 'Milaor'),
('615', '30', 'Minalabac'),
('616', '30', 'Nabua'),
('617', '30', 'City of Naga'),
('618', '30', 'Ocampo'),
('619', '30', 'Pamplona'),
('620', '30', 'Pasacao'),
('621', '30', 'Pili'),
('622', '30', 'Presentacion'),
('623', '30', 'Ragay'),
('624', '30', 'Sagñay'),
('625', '30', 'San Fernando'),
('626', '30', 'San Jose'),
('627', '30', 'Sipocot'),
('628', '30', 'Siruma'),
('629', '30', 'Tigaon'),
('630', '30', 'Tinambac'),
('631', '31', 'Bagamanoc'),
('632', '31', 'Baras'),
('633', '31', 'Bato'),
('634', '31', 'Caramoran'),
('635', '31', 'Gigmoto'),
('636', '31', 'Pandan'),
('637', '31', 'Panganiban'),
('638', '31', 'San Andres'),
('639', '31', 'San Miguel'),
('640', '31', 'Viga'),
('641', '31', 'Virac'),
('642', '32', 'Aroroy'),
('643', '32', 'Baleno'),
('644', '32', 'Balud'),
('645', '32', 'Batuan'),
('646', '32', 'Cataingan'),
('647', '32', 'Cawayan'),
('648', '32', 'Claveria'),
('649', '32', 'Dimasalang'),
('650', '32', 'Esperanza'),
('651', '32', 'Mandaon'),
('652', '32', 'City of Masbate'),
('653', '32', 'Milagros'),
('654', '32', 'Mobo'),
('655', '32', 'Monreal'),
('656', '32', 'Palanas'),
('657', '32', 'Pio V. Corpuz'),
('658', '32', 'Placer'),
('659', '32', 'San Fernando'),
('660', '32', 'San Jacinto'),
('661', '32', 'San Pascual'),
('662', '32', 'Uson'),
('663', '33', 'Barcelona'),
('664', '33', 'Bulan'),
('665', '33', 'Bulusan'),
('666', '33', 'Casiguran'),
('667', '33', 'Castilla'),
('668', '33', 'Donsol'),
('669', '33', 'Gubat'),
('670', '33', 'Irosin'),
('671', '33', 'Juban'),
('672', '33', 'Magallanes'),
('673', '33', 'Matnog'),
('674', '33', 'Pilar'),
('675', '33', 'Prieto Diaz'),
('676', '33', 'Santa Magdalena'),
('677', '33', 'City of Sorsogon'),
('678', '34', 'Altavas'),
('679', '34', 'Balete'),
('680', '34', 'Banga'),
('681', '34', 'Batan'),
('682', '34', 'Buruanga'),
('683', '34', 'Ibajay'),
('684', '34', 'Kalibo'),
('685', '34', 'Lezo'),
('686', '34', 'Libacao'),
('687', '34', 'Madalag'),
('688', '34', 'Makato'),
('689', '34', 'Malay'),
('690', '34', 'Malinao'),
('691', '34', 'Nabas'),
('692', '34', 'New Washington'),
('693', '34', 'Numancia'),
('694', '34', 'Tangalan'),
('695', '35', 'Anini-Y'),
('696', '35', 'Barbaza'),
('697', '35', 'Belison'),
('698', '35', 'Bugasong'),
('699', '35', 'Caluya'),
('700', '35', 'Culasi'),
('701', '35', 'Tobias Fornier'),
('702', '35', 'Hamtic'),
('703', '35', 'Laua-An'),
('704', '35', 'Libertad'),
('705', '35', 'Pandan'),
('706', '35', 'Patnongon'),
('707', '35', 'San Jose'),
('708', '35', 'San Remigio'),
('709', '35', 'Sebaste'),
('710', '35', 'Sibalom'),
('711', '35', 'Tibiao'),
('712', '35', 'Valderrama'),
('713', '36', 'Cuartero'),
('714', '36', 'Dao'),
('715', '36', 'Dumalag'),
('716', '36', 'Dumarao'),
('717', '36', 'Ivisan'),
('718', '36', 'Jamindan'),
('719', '36', 'Ma-Ayon'),
('720', '36', 'Mambusao'),
('721', '36', 'Panay'),
('722', '36', 'Panitan'),
('723', '36', 'Pilar'),
('724', '36', 'Pontevedra'),
('725', '36', 'President Roxas'),
('726', '36', 'City of Roxas'),
('727', '36', 'Sapi-An'),
('728', '36', 'Sigma'),
('729', '36', 'Tapaz'),
('730', '37', 'Ajuy'),
('731', '37', 'Alimodian'),
('732', '37', 'Anilao'),
('733', '37', 'Badiangan'),
('734', '37', 'Balasan'),
('735', '37', 'Banate'),
('736', '37', 'Barotac Nuevo'),
('737', '37', 'Barotac Viejo'),
('738', '37', 'Batad'),
('739', '37', 'Bingawan'),
('740', '37', 'Cabatuan'),
('741', '37', 'Calinog'),
('742', '37', 'Carles'),
('743', '37', 'Concepcion'),
('744', '37', 'Dingle'),
('745', '37', 'Dueñas'),
('746', '37', 'Dumangas'),
('747', '37', 'Estancia'),
('748', '37', 'Guimbal'),
('749', '37', 'Igbaras'),
('750', '37', 'City of Iloilo'),
('751', '37', 'Janiuay'),
('752', '37', 'Lambunao'),
('753', '37', 'Leganes'),
('754', '37', 'Lemery'),
('755', '37', 'Leon'),
('756', '37', 'Maasin'),
('757', '37', 'Miagao'),
('758', '37', 'Mina'),
('759', '37', 'New Lucena'),
('760', '37', 'Oton'),
('761', '37', 'City of Passi'),
('762', '37', 'Pavia'),
('763', '37', 'Pototan'),
('764', '37', 'San Dionisio'),
('765', '37', 'San Enrique'),
('766', '37', 'San Joaquin'),
('767', '37', 'San Miguel'),
('768', '37', 'San Rafael'),
('769', '37', 'Santa Barbara'),
('770', '37', 'Sara'),
('771', '37', 'Tigbauan'),
('772', '37', 'Tubungan'),
('773', '37', 'Zarraga'),
('774', '38', 'City of Bacolod'),
('775', '38', 'City of Bago'),
('776', '38', 'Binalbagan'),
('777', '38', 'City of Cadiz'),
('778', '38', 'Calatrava'),
('779', '38', 'Candoni'),
('780', '38', 'Cauayan'),
('781', '38', 'Enrique B. Magalona'),
('782', '38', 'City of Escalante'),
('783', '38', 'City of Himamaylan'),
('784', '38', 'Hinigaran'),
('785', '38', 'Hinoba-an'),
('786', '38', 'Ilog'),
('787', '38', 'Isabela'),
('788', '38', 'City of Kabankalan'),
('789', '38', 'City of La Carlota'),
('790', '38', 'La Castellana'),
('791', '38', 'Manapla'),
('792', '38', 'Moises Padilla'),
('793', '38', 'Murcia'),
('794', '38', 'Pontevedra'),
('795', '38', 'Pulupandan'),
('796', '38', 'City of Sagay'),
('797', '38', 'City of San Carlos'),
('798', '38', 'San Enrique'),
('799', '38', 'City of Silay'),
('800', '38', 'City of Sipalay'),
('801', '38', 'City of Talisay'),
('802', '38', 'Toboso'),
('803', '38', 'Valladolid'),
('804', '38', 'City of Victorias'),
('805', '38', 'Salvador Benedicto'),
('806', '39', 'Buenavista'),
('807', '39', 'Jordan'),
('808', '39', 'Nueva Valencia'),
('809', '39', 'San Lorenzo'),
('810', '39', 'Sibunag'),
('811', '40', 'Alburquerque'),
('812', '40', 'Alicia'),
('813', '40', 'Anda'),
('814', '40', 'Antequera'),
('815', '40', 'Baclayon'),
('816', '40', 'Balilihan'),
('817', '40', 'Batuan'),
('818', '40', 'Bilar'),
('819', '40', 'Buenavista'),
('820', '40', 'Calape'),
('821', '40', 'Candijay'),
('822', '40', 'Carmen'),
('823', '40', 'Catigbian'),
('824', '40', 'Clarin'),
('825', '40', 'Corella'),
('826', '40', 'Cortes'),
('827', '40', 'Dagohoy'),
('828', '40', 'Danao'),
('829', '40', 'Dauis'),
('830', '40', 'Dimiao'),
('831', '40', 'Duero'),
('832', '40', 'Garcia Hernandez'),
('833', '40', 'Guindulman'),
('834', '40', 'Inabanga'),
('835', '40', 'Jagna'),
('836', '40', 'Getafe'),
('837', '40', 'Lila'),
('838', '40', 'Loay'),
('839', '40', 'Loboc'),
('840', '40', 'Loon'),
('841', '40', 'Mabini'),
('842', '40', 'Maribojoc'),
('843', '40', 'Panglao'),
('844', '40', 'Pilar'),
('845', '40', 'Pres. Carlos P. Garcia'),
('846', '40', 'Sagbayan'),
('847', '40', 'San Isidro'),
('848', '40', 'San Miguel'),
('849', '40', 'Sevilla'),
('850', '40', 'Sierra Bullones'),
('851', '40', 'Sikatuna'),
('852', '40', 'City of Tagbilaran'),
('853', '40', 'Talibon'),
('854', '40', 'Trinidad'),
('855', '40', 'Tubigon'),
('856', '40', 'Ubay'),
('857', '40', 'Valencia'),
('858', '40', 'Bien Unido'),
('859', '41', 'Alcantara'),
('860', '41', 'Alcoy'),
('861', '41', 'Alegria'),
('862', '41', 'Aloguinsan'),
('863', '41', 'Argao'),
('864', '41', 'Asturias'),
('865', '41', 'Badian'),
('866', '41', 'Balamban'),
('867', '41', 'Bantayan'),
('868', '41', 'Barili'),
('869', '41', 'City of Bogo'),
('870', '41', 'Boljoon'),
('871', '41', 'Borbon'),
('872', '41', 'City of Carcar'),
('873', '41', 'Carmen'),
('874', '41', 'Catmon'),
('875', '41', 'City of Cebu'),
('876', '41', 'Compostela'),
('877', '41', 'Consolacion'),
('878', '41', 'Cordova'),
('879', '41', 'Daanbantayan'),
('880', '41', 'Dalaguete'),
('881', '41', 'Danao City'),
('882', '41', 'Dumanjug'),
('883', '41', 'Ginatilan'),
('884', '41', 'City of Lapu-Lapu'),
('885', '41', 'Liloan'),
('886', '41', 'Madridejos'),
('887', '41', 'Malabuyoc'),
('888', '41', 'City of Mandaue'),
('889', '41', 'Medellin'),
('890', '41', 'Minglanilla'),
('891', '41', 'Moalboal'),
('892', '41', 'City of Naga'),
('893', '41', 'Oslob'),
('894', '41', 'Pilar'),
('895', '41', 'Pinamungajan'),
('896', '41', 'Poro'),
('897', '41', 'Ronda'),
('898', '41', 'Samboan'),
('899', '41', 'San Fernando'),
('900', '41', 'San Francisco'),
('901', '41', 'San Remigio'),
('902', '41', 'Santa Fe'),
('903', '41', 'Santander'),
('904', '41', 'Sibonga'),
('905', '41', 'Sogod'),
('906', '41', 'Tabogon'),
('907', '41', 'Tabuelan'),
('908', '41', 'City of Talisay'),
('909', '41', 'City of Toledo'),
('910', '41', 'Tuburan'),
('911', '41', 'Tudela'),
('912', '42', 'Amlan'),
('913', '42', 'Ayungon'),
('914', '42', 'Bacong'),
('915', '42', 'City of Bais'),
('916', '42', 'Basay'),
('917', '42', 'City of Bayawan'),
('918', '42', 'Bindoy'),
('919', '42', 'City of Canlaon'),
('920', '42', 'Dauin'),
('921', '42', 'City of Dumaguete'),
('922', '42', 'City of Guihulngan'),
('923', '42', 'Jimalalud'),
('924', '42', 'La Libertad'),
('925', '42', 'Mabinay'),
('926', '42', 'Manjuyod'),
('927', '42', 'Pamplona'),
('928', '42', 'San Jose'),
('929', '42', 'Santa Catalina'),
('930', '42', 'Siaton'),
('931', '42', 'Sibulan'),
('932', '42', 'City of Tanjay'),
('933', '42', 'Tayasan'),
('934', '42', 'Valencia'),
('935', '42', 'Vallehermoso'),
('936', '42', 'Zamboanguita'),
('937', '43', 'Enrique Villanueva'),
('938', '43', 'Larena'),
('939', '43', 'Lazi'),
('940', '43', 'Maria'),
('941', '43', 'San Juan'),
('942', '43', 'Siquijor'),
('943', '44', 'Arteche'),
('944', '44', 'Balangiga'),
('945', '44', 'Balangkayan'),
('946', '44', 'City of Borongan'),
('947', '44', 'Can-Avid'),
('948', '44', 'Dolores'),
('949', '44', 'General Macarthur'),
('950', '44', 'Giporlos'),
('951', '44', 'Guiuan'),
('952', '44', 'Hernani'),
('953', '44', 'Jipapad'),
('954', '44', 'Lawaan'),
('955', '44', 'Llorente'),
('956', '44', 'Maslog'),
('957', '44', 'Maydolong'),
('958', '44', 'Mercedes'),
('959', '44', 'Oras'),
('960', '44', 'Quinapondan'),
('961', '44', 'Salcedo'),
('962', '44', 'San Julian'),
('963', '44', 'San Policarpo'),
('964', '44', 'Sulat'),
('965', '44', 'Taft'),
('966', '45', 'Abuyog'),
('967', '45', 'Alangalang'),
('968', '45', 'Albuera'),
('969', '45', 'Babatngon'),
('970', '45', 'Barugo'),
('971', '45', 'Bato'),
('972', '45', 'City of Baybay'),
('973', '45', 'Burauen'),
('974', '45', 'Calubian'),
('975', '45', 'Capoocan'),
('976', '45', 'Carigara'),
('977', '45', 'Dagami'),
('978', '45', 'Dulag'),
('979', '45', 'Hilongos'),
('980', '45', 'Hindang'),
('981', '45', 'Inopacan'),
('982', '45', 'Isabel'),
('983', '45', 'Jaro'),
('984', '45', 'Javier'),
('985', '45', 'Julita'),
('986', '45', 'Kananga'),
('987', '45', 'La Paz'),
('988', '45', 'Leyte'),
('989', '45', 'Macarthur'),
('990', '45', 'Mahaplag'),
('991', '45', 'Matag-Ob'),
('992', '45', 'Matalom'),
('993', '45', 'Mayorga'),
('994', '45', 'Merida'),
('995', '45', 'Ormoc City'),
('996', '45', 'Palo'),
('997', '45', 'Palompon'),
('998', '45', 'Pastrana'),
('999', '45', 'San Isidro'),
('1000', '45', 'San Miguel'),
('1001', '45', 'Santa Fe'),
('1002', '45', 'Tabango'),
('1003', '45', 'Tabontabon'),
('1004', '45', 'City of Tacloban'),
('1005', '45', 'Tanauan'),
('1006', '45', 'Tolosa'),
('1007', '45', 'Tunga'),
('1008', '45', 'Villaba'),
('1009', '46', 'Allen'),
('1010', '46', 'Biri'),
('1011', '46', 'Bobon'),
('1012', '46', 'Capul'),
('1013', '46', 'Catarman'),
('1014', '46', 'Catubig'),
('1015', '46', 'Gamay'),
('1016', '46', 'Laoang'),
('1017', '46', 'Lapinig'),
('1018', '46', 'Las Navas'),
('1019', '46', 'Lavezares'),
('1020', '46', 'Mapanas'),
('1021', '46', 'Mondragon'),
('1022', '46', 'Palapag'),
('1023', '46', 'Pambujan'),
('1024', '46', 'Rosario'),
('1025', '46', 'San Antonio'),
('1026', '46', 'San Isidro'),
('1027', '46', 'San Jose'),
('1028', '46', 'San Roque'),
('1029', '46', 'San Vicente'),
('1030', '46', 'Silvino Lobos'),
('1031', '46', 'Victoria'),
('1032', '46', 'Lope De Vega'),
('1033', '47', 'Almagro'),
('1034', '47', 'Basey'),
('1035', '47', 'City of Calbayog'),
('1036', '47', 'Calbiga'),
('1037', '47', 'City of Catbalogan'),
('1038', '47', 'Daram'),
('1039', '47', 'Gandara'),
('1040', '47', 'Hinabangan'),
('1041', '47', 'Jiabong'),
('1042', '47', 'Marabut'),
('1043', '47', 'Matuguinao'),
('1044', '47', 'Motiong'),
('1045', '47', 'Pinabacdao'),
('1046', '47', 'San Jose De Buan'),
('1047', '47', 'San Sebastian'),
('1048', '47', 'Santa Margarita'),
('1049', '47', 'Santa Rita'),
('1050', '47', 'Santo Niño'),
('1051', '47', 'Talalora'),
('1052', '47', 'Tarangnan'),
('1053', '47', 'Villareal'),
('1054', '47', 'Paranas'),
('1055', '47', 'Zumarraga'),
('1056', '47', 'Tagapul-An'),
('1057', '47', 'San Jorge'),
('1058', '47', 'Pagsanghan'),
('1059', '48', 'Anahawan'),
('1060', '48', 'Bontoc'),
('1061', '48', 'Hinunangan'),
('1062', '48', 'Hinundayan'),
('1063', '48', 'Libagon'),
('1064', '48', 'Liloan'),
('1065', '48', 'City of Maasin'),
('1066', '48', 'Macrohon'),
('1067', '48', 'Malitbog'),
('1068', '48', 'Padre Burgos'),
('1069', '48', 'Pintuyan'),
('1070', '48', 'Saint Bernard'),
('1071', '48', 'San Francisco'),
('1072', '48', 'San Juan'),
('1073', '48', 'San Ricardo'),
('1074', '48', 'Silago'),
('1075', '48', 'Sogod'),
('1076', '48', 'Tomas Oppus'),
('1077', '48', 'Limasawa'),
('1078', '49', 'Almeria'),
('1079', '49', 'Biliran'),
('1080', '49', 'Cabucgayan'),
('1081', '49', 'Caibiran'),
('1082', '49', 'Culaba'),
('1083', '49', 'Kawayan'),
('1084', '49', 'Maripipi'),
('1085', '49', 'Naval'),
('1086', '50', 'City of Dapitan'),
('1087', '50', 'City of Dipolog'),
('1088', '50', 'Katipunan'),
('1089', '50', 'La Libertad'),
('1090', '50', 'Labason'),
('1091', '50', 'Liloy'),
('1092', '50', 'Manukan'),
('1093', '50', 'Mutia'),
('1094', '50', 'Piñan'),
('1095', '50', 'Polanco'),
('1096', '50', 'Pres. Manuel A. Roxas'),
('1097', '50', 'Rizal'),
('1098', '50', 'Salug'),
('1099', '50', 'Sergio Osmeña Sr.'),
('1100', '50', 'Siayan'),
('1101', '50', 'Sibuco'),
('1102', '50', 'Sibutad'),
('1103', '50', 'Sindangan'),
('1104', '50', 'Siocon'),
('1105', '50', 'Sirawai'),
('1106', '50', 'Tampilisan'),
('1107', '50', 'Jose Dalman'),
('1108', '50', 'Gutalac'),
('1109', '50', 'Baliguian'),
('1110', '50', 'Godod'),
('1111', '50', 'Bacungan'),
('1112', '50', 'Kalawit'),
('1113', '51', 'Aurora'),
('1114', '51', 'Bayog'),
('1115', '51', 'Dimataling'),
('1116', '51', 'Dinas'),
('1117', '51', 'Dumalinao'),
('1118', '51', 'Dumingag'),
('1119', '51', 'Kumalarang'),
('1120', '51', 'Labangan'),
('1121', '51', 'Lapuyan'),
('1122', '51', 'Mahayag'),
('1123', '51', 'Margosatubig'),
('1124', '51', 'Midsalip'),
('1125', '51', 'Molave'),
('1126', '51', 'City of Pagadian'),
('1127', '51', 'Ramon Magsaysay'),
('1128', '51', 'San Miguel'),
('1129', '51', 'San Pablo'),
('1130', '51', 'Tabina'),
('1131', '51', 'Tambulig'),
('1132', '51', 'Tukuran'),
('1133', '51', 'City of Zamboanga'),
('1134', '51', 'Lakewood'),
('1135', '51', 'Josefina'),
('1136', '51', 'Pitogo'),
('1137', '51', 'Sominot'),
('1138', '51', 'Vincenzo A. Sagun'),
('1139', '51', 'Guipos'),
('1140', '51', 'Tigbao'),
('1141', '52', 'Alicia'),
('1142', '52', 'Buug'),
('1143', '52', 'Diplahan'),
('1144', '52', 'Imelda'),
('1145', '52', 'Ipil'),
('1146', '52', 'Kabasalan'),
('1147', '52', 'Mabuhay'),
('1148', '52', 'Malangas'),
('1149', '52', 'Naga'),
('1150', '52', 'Olutanga'),
('1151', '52', 'Payao'),
('1152', '52', 'Roseller Lim'),
('1153', '52', 'Siay'),
('1154', '52', 'Talusan'),
('1155', '52', 'Titay'),
('1156', '52', 'Tungawan'),
('1157', '52', 'City of Isabela'),
('1158', '53', 'Baungon'),
('1159', '53', 'Damulog'),
('1160', '53', 'Dangcagan'),
('1161', '53', 'Don Carlos'),
('1162', '53', 'Impasug-ong'),
('1163', '53', 'Kadingilan'),
('1164', '53', 'Kalilangan'),
('1165', '53', 'Kibawe'),
('1166', '53', 'Kitaotao'),
('1167', '53', 'Lantapan'),
('1168', '53', 'Libona'),
('1169', '53', 'City of Malaybalay'),
('1170', '53', 'Malitbog'),
('1171', '53', 'Manolo Fortich'),
('1172', '53', 'Maramag'),
('1173', '53', 'Pangantucan'),
('1174', '53', 'Quezon'),
('1175', '53', 'San Fernando'),
('1176', '53', 'Sumilao'),
('1177', '53', 'Talakag'),
('1178', '53', 'City of Valencia'),
('1179', '53', 'Cabanglasan'),
('1180', '54', 'Catarman'),
('1181', '54', 'Guinsiliban'),
('1182', '54', 'Mahinog'),
('1183', '54', 'Mambajao'),
('1184', '54', 'Sagay'),
('1185', '55', 'Bacolod'),
('1186', '55', 'Baloi'),
('1187', '55', 'Baroy'),
('1188', '55', 'City of Iligan'),
('1189', '55', 'Kapatagan'),
('1190', '55', 'Sultan Naga Dimaporo'),
('1191', '55', 'Kauswagan'),
('1192', '55', 'Kolambugan'),
('1193', '55', 'Lala'),
('1194', '55', 'Linamon'),
('1195', '55', 'Magsaysay'),
('1196', '55', 'Maigo'),
('1197', '55', 'Matungao'),
('1198', '55', 'Munai'),
('1199', '55', 'Nunungan'),
('1200', '55', 'Pantao Ragat'),
('1201', '55', 'Poona Piagapo'),
('1202', '55', 'Salvador'),
('1203', '55', 'Sapad'),
('1204', '55', 'Tagoloan'),
('1205', '55', 'Tangcal'),
('1206', '55', 'Tubod'),
('1207', '55', 'Pantar'),
('1208', '56', 'Aloran'),
('1209', '56', 'Baliangao'),
('1210', '56', 'Bonifacio'),
('1211', '56', 'Calamba'),
('1212', '56', 'Clarin'),
('1213', '56', 'Concepcion'),
('1214', '56', 'Jimenez'),
('1215', '56', 'Lopez Jaena'),
('1216', '56', 'City of Oroquieta'),
('1217', '56', 'City of Ozamiz'),
('1218', '56', 'Panaon'),
('1219', '56', 'Plaridel'),
('1220', '56', 'Sapang Dalaga'),
('1221', '56', 'Sinacaban'),
('1222', '56', 'City of Tangub'),
('1223', '56', 'Tudela'),
('1224', '56', 'Don Victoriano Chiongbian'),
('1225', '57', 'Alubijid'),
('1226', '57', 'Balingasag'),
('1227', '57', 'Balingoan'),
('1228', '57', 'Binuangan'),
('1229', '57', 'City of Cagayan De Oro'),
('1230', '57', 'Claveria'),
('1231', '57', 'City of El Salvador'),
('1232', '57', 'City of Gingoog'),
('1233', '57', 'Gitagum'),
('1234', '57', 'Initao'),
('1235', '57', 'Jasaan'),
('1236', '57', 'Kinoguitan'),
('1237', '57', 'Lagonglong'),
('1238', '57', 'Laguindingan'),
('1239', '57', 'Libertad'),
('1240', '57', 'Lugait'),
('1241', '57', 'Magsaysay'),
('1242', '57', 'Manticao'),
('1243', '57', 'Medina'),
('1244', '57', 'Naawan'),
('1245', '57', 'Opol'),
('1246', '57', 'Salay'),
('1247', '57', 'Sugbongcogon'),
('1248', '57', 'Tagoloan'),
('1249', '57', 'Talisayan'),
('1250', '57', 'Villanueva'),
('1251', '58', 'Asuncion'),
('1252', '58', 'Carmen'),
('1253', '58', 'Kapalong'),
('1254', '58', 'New Corella'),
('1255', '58', 'City of Panabo'),
('1256', '58', 'Island Garden City of Samal'),
('1257', '58', 'Santo Tomas'),
('1258', '58', 'City of Tagum'),
('1259', '58', 'Talaingod'),
('1260', '58', 'Braulio E. Dujali'),
('1261', '58', 'San Isidro'),
('1262', '59', 'Bansalan'),
('1263', '59', 'City of Davao'),
('1264', '59', 'City of Digos'),
('1265', '59', 'Hagonoy'),
('1266', '59', 'Kiblawan'),
('1267', '59', 'Magsaysay'),
('1268', '59', 'Malalag'),
('1269', '59', 'Matanao'),
('1270', '59', 'Padada'),
('1271', '59', 'Santa Cruz'),
('1272', '59', 'Sulop'),
('1273', '60', 'Baganga'),
('1274', '60', 'Banaybanay'),
('1275', '60', 'Boston'),
('1276', '60', 'Caraga'),
('1277', '60', 'Cateel'),
('1278', '60', 'Governor Generoso'),
('1279', '60', 'Lupon'),
('1280', '60', 'Manay'),
('1281', '60', 'City of Mati'),
('1282', '60', 'San Isidro'),
('1283', '60', 'Tarragona'),
('1284', '61', 'Compostela'),
('1285', '61', 'Laak'),
('1286', '61', 'Mabini'),
('1287', '61', 'Maco'),
('1288', '61', 'Maragusan'),
('1289', '61', 'Mawab'),
('1290', '61', 'Monkayo'),
('1291', '61', 'Montevista'),
('1292', '61', 'Nabunturan'),
('1293', '61', 'New Bataan'),
('1294', '61', 'Pantukan'),
('1295', '62', 'Don Marcelino'),
('1296', '62', 'Jose Abad Santos'),
('1297', '62', 'Malita'),
('1298', '62', 'Santa Maria'),
('1299', '62', 'Sarangani'),
('1300', '63', 'Alamada'),
('1301', '63', 'Carmen'),
('1302', '63', 'Kabacan'),
('1303', '63', 'City of Kidapawan'),
('1304', '63', 'Libungan'),
('1305', '63', 'Magpet'),
('1306', '63', 'Makilala'),
('1307', '63', 'Matalam'),
('1308', '63', 'Midsayap'),
('1309', '63', 'M\'Lang'),
('1310', '63', 'Pigkawayan'),
('1311', '63', 'Pikit'),
('1312', '63', 'President Roxas'),
('1313', '63', 'Tulunan'),
('1314', '63', 'Antipas'),
('1315', '63', 'Banisilan'),
('1316', '63', 'Aleosan'),
('1317', '63', 'Arakan'),
('1318', '64', 'Banga'),
('1319', '64', 'City of General Santos'),
('1320', '64', 'City of Koronadal'),
('1321', '64', 'Norala'),
('1322', '64', 'Polomolok'),
('1323', '64', 'Surallah'),
('1324', '64', 'Tampakan'),
('1325', '64', 'Tantangan'),
('1326', '64', 'T\'Boli'),
('1327', '64', 'Tupi'),
('1328', '64', 'Santo Niño'),
('1329', '64', 'Lake Sebu'),
('1330', '65', 'Bagumbayan'),
('1331', '65', 'Columbio'),
('1332', '65', 'Esperanza'),
('1333', '65', 'Isulan'),
('1334', '65', 'Kalamansig'),
('1335', '65', 'Lebak'),
('1336', '65', 'Lutayan'),
('1337', '65', 'Lambayong'),
('1338', '65', 'Palimbang'),
('1339', '65', 'President Quirino'),
('1340', '65', 'City of Tacurong'),
('1341', '65', 'Sen. Ninoy Aquino'),
('1342', '66', 'Alabel'),
('1343', '66', 'Glan'),
('1344', '66', 'Kiamba'),
('1345', '66', 'Maasim'),
('1346', '66', 'Maitum'),
('1347', '66', 'Malapatan'),
('1348', '66', 'Malungon'),
('1349', '66', 'Cotabato City'),
('1350', '1', 'Manila'),
('1351', '1', 'Mandaluyong City'),
('1352', '1', 'Marikina City'),
('1353', '1', 'Pasig City'),
('1354', '1', 'Quezon City'),
('1355', '1', 'San Juan City'),
('1356', '1', 'Caloocan City'),
('1357', '1', 'Malabon City'),
('1358', '1', 'Navotas City'),
('1359', '1', 'Valenzuela City'),
('1360', '1', 'Las Piñas City'),
('1361', '1', 'Makati City'),
('1362', '1', 'Muntinlupa City'),
('1363', '1', 'Parañaque City'),
('1364', '1', 'Pasay City'),
('1365', '1', 'Pateros'),
('1366', '1', 'Taguig City'),
('1367', '67', 'Bangued'),
('1368', '67', 'Boliney'),
('1369', '67', 'Bucay'),
('1370', '67', 'Bucloc'),
('1371', '67', 'Daguioman'),
('1372', '67', 'Danglas'),
('1373', '67', 'Dolores'),
('1374', '67', 'La Paz'),
('1375', '67', 'Lacub'),
('1376', '67', 'Lagangilang'),
('1377', '67', 'Lagayan'),
('1378', '67', 'Langiden'),
('1379', '67', 'Licuan-Baay'),
('1380', '67', 'Luba'),
('1381', '67', 'Malibcong'),
('1382', '67', 'Manabo'),
('1383', '67', 'Peñarrubia'),
('1384', '67', 'Pidigan'),
('1385', '67', 'Pilar'),
('1386', '67', 'Sallapadan'),
('1387', '67', 'San Isidro'),
('1388', '67', 'San Juan'),
('1389', '67', 'San Quintin'),
('1390', '67', 'Tayum'),
('1391', '67', 'Tineg'),
('1392', '67', 'Tubo'),
('1393', '67', 'Villaviciosa'),
('1394', '68', 'Atok'),
('1395', '68', 'City of Baguio'),
('1396', '68', 'Bakun'),
('1397', '68', 'Bokod'),
('1398', '68', 'Buguias'),
('1399', '68', 'Itogon'),
('1400', '68', 'Kabayan'),
('1401', '68', 'Kapangan'),
('1402', '68', 'Kibungan'),
('1403', '68', 'La Trinidad'),
('1404', '68', 'Mankayan'),
('1405', '68', 'Sablan'),
('1406', '68', 'Tuba'),
('1407', '68', 'Tublay'),
('1408', '69', 'Banaue'),
('1409', '69', 'Hungduan'),
('1410', '69', 'Kiangan'),
('1411', '69', 'Lagawe'),
('1412', '69', 'Lamut'),
('1413', '69', 'Mayoyao'),
('1414', '69', 'Alfonso Lista'),
('1415', '69', 'Aguinaldo'),
('1416', '69', 'Hingyon'),
('1417', '69', 'Tinoc'),
('1418', '69', 'Asipulo'),
('1419', '70', 'Balbalan'),
('1420', '70', 'Lubuagan'),
('1421', '70', 'Pasil'),
('1422', '70', 'Pinukpuk'),
('1423', '70', 'Rizal'),
('1424', '70', 'City of Tabuk'),
('1425', '70', 'Tanudan'),
('1426', '70', 'Tinglayan'),
('1427', '71', 'Barlig'),
('1428', '71', 'Bauko'),
('1429', '71', 'Besao'),
('1430', '71', 'Bontoc'),
('1431', '71', 'Natonin'),
('1432', '71', 'Paracelis'),
('1433', '71', 'Sabangan'),
('1434', '71', 'Sadanga'),
('1435', '71', 'Sagada'),
('1436', '71', 'Tadian'),
('1437', '72', 'Calanasan'),
('1438', '72', 'Conner'),
('1439', '72', 'Flora'),
('1440', '72', 'Kabugao'),
('1441', '72', 'Luna'),
('1442', '72', 'Pudtol'),
('1443', '72', 'Santa Marcela'),
('1444', '73', 'City of Lamitan'),
('1445', '73', 'Lantawan'),
('1446', '73', 'Maluso'),
('1447', '73', 'Sumisip'),
('1448', '73', 'Tipo-Tipo'),
('1449', '73', 'Tuburan'),
('1450', '73', 'Akbar'),
('1451', '73', 'Al-Barka'),
('1452', '73', 'Hadji Mohammad Ajul'),
('1453', '73', 'Ungkaya Pukan'),
('1454', '73', 'Hadji Muhtamad'),
('1455', '73', 'Tabuan-Lasa'),
('1456', '74', 'Bacolod-Kalawi'),
('1457', '74', 'Balabagan'),
('1458', '74', 'Balindong'),
('1459', '74', 'Bayang'),
('1460', '74', 'Binidayan'),
('1461', '74', 'Bubong'),
('1462', '74', 'Butig'),
('1463', '74', 'Ganassi'),
('1464', '74', 'Kapai'),
('1465', '74', 'Lumba-Bayabao'),
('1466', '74', 'Lumbatan'),
('1467', '74', 'Madalum'),
('1468', '74', 'Madamba'),
('1469', '74', 'Malabang'),
('1470', '74', 'Marantao'),
('1471', '74', 'City of Marawi'),
('1472', '74', 'Masiu'),
('1473', '74', 'Mulondo'),
('1474', '74', 'Pagayawan'),
('1475', '74', 'Piagapo'),
('1476', '74', 'Poona Bayabao'),
('1477', '74', 'Pualas'),
('1478', '74', 'Ditsaan-Ramain'),
('1479', '74', 'Saguiaran'),
('1480', '74', 'Tamparan'),
('1481', '74', 'Taraka'),
('1482', '74', 'Tubaran'),
('1483', '74', 'Tugaya'),
('1484', '74', 'Wao'),
('1485', '74', 'Marogong'),
('1486', '74', 'Calanogas'),
('1487', '74', 'Buadiposo-Buntong'),
('1488', '74', 'Maguing'),
('1489', '74', 'Picong'),
('1490', '74', 'Lumbayanague'),
('1491', '74', 'Amai Manabilang'),
('1492', '74', 'Tagoloan Ii'),
('1493', '74', 'Kapatagan'),
('1494', '74', 'Sultan Dumalondong'),
('1495', '74', 'Lumbaca-Unayan'),
('1496', '75', 'Ampatuan'),
('1497', '75', 'Buldon'),
('1498', '75', 'Buluan'),
('1499', '75', 'Datu Paglas'),
('1500', '75', 'Datu Piang'),
('1501', '75', 'Datu Odin Sinsuat'),
('1502', '75', 'Shariff Aguak'),
('1503', '75', 'Matanog'),
('1504', '75', 'Pagalungan'),
('1505', '75', 'Parang'),
('1506', '75', 'Sultan Kudarat'),
('1507', '75', 'Sultan Sa Barongis'),
('1508', '75', 'Kabuntalan'),
('1509', '75', 'Upi'),
('1510', '75', 'Talayan'),
('1511', '75', 'South Upi'),
('1512', '75', 'Barira'),
('1513', '75', 'Gen. S.K. Pendatun'),
('1514', '75', 'Mamasapano'),
('1515', '75', 'Talitay'),
('1516', '75', 'Pagagawan'),
('1517', '75', 'Paglat'),
('1518', '75', 'Sultan Mastura'),
('1519', '75', 'Guindulungan'),
('1520', '75', 'Datu Saudi-Ampatuan'),
('1521', '75', 'Datu Unsay'),
('1522', '75', 'Datu Abdullah Sangki'),
('1523', '75', 'Rajah Buayan'),
('1524', '75', 'Datu Blah T. Sinsuat'),
('1525', '75', 'Datu Anggal Midtimbang'),
('1526', '75', 'Mangudadatu'),
('1527', '75', 'Pandag'),
('1528', '75', 'Northern Kabuntalan'),
('1529', '75', 'Datu Hoffer Ampatuan'),
('1530', '75', 'Datu Salibo'),
('1531', '75', 'Shariff Saydona Mustapha'),
('1532', '76', 'Indanan'),
('1533', '76', 'Jolo'),
('1534', '76', 'Kalingalan Caluang'),
('1535', '76', 'Luuk'),
('1536', '76', 'Maimbung'),
('1537', '76', 'Hadji Panglima Tahil'),
('1538', '76', 'Old Panamao'),
('1539', '76', 'Pangutaran'),
('1540', '76', 'Parang'),
('1541', '76', 'Pata'),
('1542', '76', 'Patikul'),
('1543', '76', 'Siasi'),
('1544', '76', 'Talipao'),
('1545', '76', 'Tapul'),
('1546', '76', 'Tongkil'),
('1547', '76', 'Panglima Estino'),
('1548', '76', 'Lugus'),
('1549', '76', 'Pandami'),
('1550', '76', 'Omar'),
('1551', '77', 'Panglima Sugala'),
('1552', '77', 'Bongao (Capital)'),
('1553', '77', 'Mapun'),
('1554', '77', 'Simunul'),
('1555', '77', 'Sitangkai'),
('1556', '77', 'South Ubian'),
('1557', '77', 'Tandubas'),
('1558', '77', 'Turtle Islands'),
('1559', '77', 'Languyan'),
('1560', '77', 'Sapa-Sapa'),
('1561', '77', 'Sibutu'),
('1562', '78', 'Buenavista'),
('1563', '78', 'City of Butuan'),
('1564', '78', 'City of Cabadbaran'),
('1565', '78', 'Carmen'),
('1566', '78', 'Jabonga'),
('1567', '78', 'Kitcharao'),
('1568', '78', 'Las Nieves'),
('1569', '78', 'Magallanes'),
('1570', '78', 'Nasipit'),
('1571', '78', 'Santiago'),
('1572', '78', 'Tubay'),
('1573', '78', 'Remedios T. Romualdez'),
('1574', '79', 'City of Bayugan'),
('1575', '79', 'Bunawan'),
('1576', '79', 'Esperanza'),
('1577', '79', 'La Paz'),
('1578', '79', 'Loreto'),
('1579', '79', 'Prosperidad'),
('1580', '79', 'Rosario'),
('1581', '79', 'San Francisco'),
('1582', '79', 'San Luis'),
('1583', '79', 'Santa Josefa'),
('1584', '79', 'Talacogon'),
('1585', '79', 'Trento'),
('1586', '79', 'Veruela'),
('1587', '79', 'Sibagat'),
('1588', '80', 'Alegria'),
('1589', '80', 'Bacuag'),
('1590', '80', 'Burgos'),
('1591', '80', 'Claver'),
('1592', '80', 'Dapa'),
('1593', '80', 'Del Carmen'),
('1594', '80', 'General Luna'),
('1595', '80', 'Gigaquit'),
('1596', '80', 'Mainit'),
('1597', '80', 'Malimono'),
('1598', '80', 'Pilar'),
('1599', '80', 'Placer'),
('1600', '80', 'San Benito'),
('1601', '80', 'San Francisco'),
('1602', '80', 'San Isidro'),
('1603', '80', 'Santa Monica'),
('1604', '80', 'Sison'),
('1605', '80', 'Socorro'),
('1606', '80', 'City of Surigao'),
('1607', '80', 'Tagana-An'),
('1608', '80', 'Tubod'),
('1609', '81', 'Barobo'),
('1610', '81', 'Bayabas'),
('1611', '81', 'City of Bislig'),
('1612', '81', 'Cagwait'),
('1613', '81', 'Cantilan'),
('1614', '81', 'Carmen'),
('1615', '81', 'Carrascal'),
('1616', '81', 'Cortes'),
('1617', '81', 'Hinatuan'),
('1618', '81', 'Lanuza'),
('1619', '81', 'Lianga'),
('1620', '81', 'Lingig'),
('1621', '81', 'Madrid'),
('1622', '81', 'Marihatag'),
('1623', '81', 'San Agustin'),
('1624', '81', 'San Miguel'),
('1625', '81', 'Tagbina'),
('1626', '81', 'Tago'),
('1627', '81', 'City of Tandag'),
('1628', '82', 'Basilisa'),
('1629', '82', 'Cagdianao'),
('1630', '82', 'Dinagat'),
('1631', '82', 'Libjo'),
('1632', '82', 'Loreto'),
('1633', '82', 'San Jose'),
('1634', '82', 'Tubajon');

-- --------------------------------------------------------

--
-- Table structure for table `table_province`
--

CREATE TABLE `table_province` (
  `province_id` varchar(255) DEFAULT NULL,
  `region_id` varchar(255) DEFAULT NULL,
  `province_name` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `table_province`
--

INSERT INTO `table_province` (`province_id`, `region_id`, `province_name`) VALUES
('1.0', '1.0', 'Metro Manila'),
('2.0', '3.0', 'Ilocos Norte'),
('3.0', '3.0', 'Ilocos Sur'),
('4.0', '3.0', 'La Union'),
('5.0', '3.0', 'Pangasinan'),
('6.0', '4.0', 'Batanes'),
('7.0', '4.0', 'Cagayan'),
('8.0', '4.0', 'Isabela'),
('9.0', '4.0', 'Nueva Vizcaya'),
('10.0', '4.0', 'Quirino'),
('11.0', '5.0', 'Bataan'),
('12.0', '5.0', 'Bulacan'),
('13.0', '5.0', 'Nueva Ecija'),
('14.0', '5.0', 'Pampanga'),
('15.0', '5.0', 'Tarlac'),
('16.0', '5.0', 'Zambales'),
('17.0', '5.0', 'Aurora'),
('18.0', '6.0', 'Batangas'),
('19.0', '6.0', 'Cavite'),
('20.0', '6.0', 'Laguna'),
('21.0', '6.0', 'Quezon'),
('22.0', '6.0', 'Rizal'),
('23.0', '7.0', 'Marinduque'),
('24.0', '7.0', 'Occidental Mindoro'),
('25.0', '7.0', 'Oriental Mindoro'),
('26.0', '7.0', 'Palawan'),
('27.0', '7.0', 'Romblon'),
('28.0', '8.0', 'Albay'),
('29.0', '8.0', 'Camarines Norte'),
('30.0', '8.0', 'Camarines Sur'),
('31.0', '8.0', 'Catanduanes'),
('32.0', '8.0', 'Masbate'),
('33.0', '8.0', 'Sorsogon'),
('34.0', '9.0', 'Aklan'),
('35.0', '9.0', 'Antique'),
('36.0', '9.0', 'Capiz'),
('37.0', '9.0', 'Iloilo'),
('38.0', '9.0', 'Negros Occidental'),
('39.0', '9.0', 'Guimaras'),
('40.0', '10.0', 'Bohol'),
('41.0', '10.0', 'Cebu'),
('42.0', '10.0', 'Negros Oriental'),
('43.0', '10.0', 'Siquijor'),
('44.0', '11.0', 'Eastern Samar'),
('45.0', '11.0', 'Leyte'),
('46.0', '11.0', 'Northern Samar'),
('47.0', '11.0', 'Samar'),
('48.0', '11.0', 'Southern Leyte'),
('49.0', '11.0', 'Biliran'),
('50.0', '12.0', 'Zamboanga del Norte'),
('51.0', '12.0', 'Zamboanga del Sur'),
('52.0', '12.0', 'Zamboanga Sibugay'),
('53.0', '13.0', 'Bukidnon'),
('54.0', '13.0', 'Camiguin'),
('55.0', '13.0', 'Lanao del Norte'),
('56.0', '13.0', 'Misamis Occidental'),
('57.0', '13.0', 'Misamis Oriental'),
('58.0', '14.0', 'Davao del Norte'),
('59.0', '14.0', 'Davao del Sur'),
('60.0', '14.0', 'Davao Oriental'),
('61.0', '14.0', 'Davao de Oro'),
('62.0', '14.0', 'Davao Occidental'),
('63.0', '15.0', 'Cotabato'),
('64.0', '15.0', 'South Cotabato'),
('65.0', '15.0', 'Sultan Kudarat'),
('66.0', '15.0', 'Sarangani'),
('67.0', '2.0', 'Abra'),
('68.0', '2.0', 'Benguet'),
('69.0', '2.0', 'Ifugao'),
('70.0', '2.0', 'Kalinga'),
('71.0', '2.0', 'Mountain Province'),
('72.0', '2.0', 'Apayao'),
('73.0', '17.0', 'Basilan'),
('74.0', '17.0', 'Lanao del Sur'),
('75.0', '17.0', 'Maguindanao'),
('76.0', '17.0', 'Sulu'),
('77.0', '17.0', 'Tawi-Tawi'),
('78.0', '16.0', 'Agusan del Norte'),
('79.0', '16.0', 'Agusan del Sur'),
('80.0', '16.0', 'Surigao del Norte'),
('81.0', '16.0', 'Surigao del Sur'),
('82.0', '16.0', 'Dinagat Islands'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan'),
('nan', 'nan', 'nan');

-- --------------------------------------------------------

--
-- Table structure for table `table_region`
--

CREATE TABLE `table_region` (
  `region_id` varchar(255) DEFAULT NULL,
  `region_name` varchar(255) DEFAULT NULL,
  `region_description` varchar(255) DEFAULT NULL,
  `Unnamed: 3` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `table_region`
--

INSERT INTO `table_region` (`region_id`, `region_name`, `region_description`, `Unnamed: 3`) VALUES
('1', 'NCR', 'National Capital Region', 'nan'),
('2', 'CAR', 'Cordillera Administrative Region', 'nan'),
('3', 'Region I', 'Ilocos Region', 'nan'),
('4', 'Region II', 'Cagayan Valley', 'nan'),
('5', 'Region III', 'Central Luzon', 'nan'),
('6', 'Region IV-A', 'CALABARZON', 'nan'),
('7', 'Region IV-B', 'MIMAROPA', 'nan'),
('8', 'Region V', 'Bicol Region', 'nan'),
('9', 'Region VI', 'Western Visayas', 'nan'),
('10', 'Region VII', 'Central Visayas', 'nan'),
('11', 'Region VIII', 'Eastern Visayas', 'nan'),
('12', 'Region IX', 'Zamboanga Peninsula', 'nan'),
('13', 'Region X', 'Northern Mindanao', 'nan'),
('14', 'Region XI', 'Davao Region', 'nan'),
('15', 'Region XII', 'SOCCSKSARGEN', 'nan'),
('16', 'Region XIII', 'CARAGA', 'nan'),
('17', 'ARMM', 'Autonomous Region in Muslim Mindanao', 'nan');

-- --------------------------------------------------------

--
-- Table structure for table `table_stats`
--

CREATE TABLE `table_stats` (
  `db_name` varchar(64) NOT NULL,
  `table_name` varchar(64) NOT NULL,
  `cardinality` bigint(21) UNSIGNED DEFAULT NULL
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- --------------------------------------------------------

--
-- Table structure for table `table_users_registration`
--

CREATE TABLE `table_users_registration` (
  `id` int(11) NOT NULL,
  `first_name` varchar(100) DEFAULT NULL,
  `middle_name` varchar(100) DEFAULT NULL,
  `last_name` varchar(100) DEFAULT NULL,
  `suffix` varchar(50) DEFAULT NULL,
  `email` varchar(150) DEFAULT NULL,
  `contact` varchar(20) DEFAULT NULL,
  `street` varchar(255) DEFAULT NULL,
  `region_id` int(11) DEFAULT NULL,
  `province_id` int(11) DEFAULT NULL,
  `city_id` int(11) DEFAULT NULL,
  `barangay_id` int(11) DEFAULT NULL,
  `username` varchar(50) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `table_users_registration`
--

INSERT INTO `table_users_registration` (`id`, `first_name`, `middle_name`, `last_name`, `suffix`, `email`, `contact`, `street`, `region_id`, `province_id`, `city_id`, `barangay_id`, `username`, `password`, `created_at`) VALUES
(1, 'wewewe', 'we', 'wewewewe', 'we', 'mojpokqwe@gmail.com', '09999999999', '', 17, 74, 1491, 39551, 'WewewewW', '$2y$10$yClo10TApGwoNgz9.OV94uzlt6ZvuG.0.qYoUMjBDXKIra1wVPg2q', '2025-05-03 17:09:31'),
(3, 'aklfa', 'afkjawfo', 'awjfnwl', '', '3o1pruqwdiq=@gmail.com', '09999999999', '', 13, 53, 1169, 31186, 'WewewewW', '$2y$10$V4aZH/iFMSIsKpznI8ZwGeeMMXkRWapXzU4fkXiozOzdeKyPLJnHi', '2025-05-03 17:17:06');

-- --------------------------------------------------------

--
-- Table structure for table `time_zone`
--

CREATE TABLE `time_zone` (
  `Time_zone_id` int(10) UNSIGNED NOT NULL,
  `Use_leap_seconds` enum('Y','N') NOT NULL DEFAULT 'N'
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;

-- --------------------------------------------------------

--
-- Table structure for table `time_zone_leap_second`
--

CREATE TABLE `time_zone_leap_second` (
  `Transition_time` bigint(20) NOT NULL,
  `Correction` int(11) NOT NULL
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;

-- --------------------------------------------------------

--
-- Table structure for table `time_zone_name`
--

CREATE TABLE `time_zone_name` (
  `Name` char(64) NOT NULL,
  `Time_zone_id` int(10) UNSIGNED NOT NULL
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;

-- --------------------------------------------------------

--
-- Table structure for table `time_zone_transition`
--

CREATE TABLE `time_zone_transition` (
  `Time_zone_id` int(10) UNSIGNED NOT NULL,
  `Transition_time` bigint(20) NOT NULL,
  `Transition_type_id` int(10) UNSIGNED NOT NULL
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;

-- --------------------------------------------------------

--
-- Table structure for table `time_zone_transition_type`
--

CREATE TABLE `time_zone_transition_type` (
  `Time_zone_id` int(10) UNSIGNED NOT NULL,
  `Transition_type_id` int(10) UNSIGNED NOT NULL,
  `Offset` int(11) NOT NULL DEFAULT 0,
  `Is_DST` tinyint(3) UNSIGNED NOT NULL DEFAULT 0,
  `Abbreviation` char(8) NOT NULL DEFAULT ''
) ENGINE=Aria DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;

-- --------------------------------------------------------

--
-- Table structure for table `transaction_registry`
--

CREATE TABLE `transaction_registry` (
  `transaction_id` bigint(20) UNSIGNED NOT NULL,
  `commit_id` bigint(20) UNSIGNED NOT NULL,
  `begin_timestamp` timestamp(6) NOT NULL DEFAULT '0000-00-00 00:00:00.000000',
  `commit_timestamp` timestamp(6) NOT NULL DEFAULT '0000-00-00 00:00:00.000000',
  `isolation_level` enum('READ-UNCOMMITTED','READ-COMMITTED','REPEATABLE-READ','SERIALIZABLE') NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- --------------------------------------------------------

--
-- Stand-in structure for view `user`
-- (See below for the actual view)
--
CREATE TABLE `user` (
`Host` char(60)
,`User` char(80)
,`Password` longtext
,`Select_priv` varchar(1)
,`Insert_priv` varchar(1)
,`Update_priv` varchar(1)
,`Delete_priv` varchar(1)
,`Create_priv` varchar(1)
,`Drop_priv` varchar(1)
,`Reload_priv` varchar(1)
,`Shutdown_priv` varchar(1)
,`Process_priv` varchar(1)
,`File_priv` varchar(1)
,`Grant_priv` varchar(1)
,`References_priv` varchar(1)
,`Index_priv` varchar(1)
,`Alter_priv` varchar(1)
,`Show_db_priv` varchar(1)
,`Super_priv` varchar(1)
,`Create_tmp_table_priv` varchar(1)
,`Lock_tables_priv` varchar(1)
,`Execute_priv` varchar(1)
,`Repl_slave_priv` varchar(1)
,`Repl_client_priv` varchar(1)
,`Create_view_priv` varchar(1)
,`Show_view_priv` varchar(1)
,`Create_routine_priv` varchar(1)
,`Alter_routine_priv` varchar(1)
,`Create_user_priv` varchar(1)
,`Event_priv` varchar(1)
,`Trigger_priv` varchar(1)
,`Create_tablespace_priv` varchar(1)
,`Delete_history_priv` varchar(1)
,`ssl_type` varchar(9)
,`ssl_cipher` longtext
,`x509_issuer` longtext
,`x509_subject` longtext
,`max_questions` bigint(20) unsigned
,`max_updates` bigint(20) unsigned
,`max_connections` bigint(20) unsigned
,`max_user_connections` bigint(21)
,`plugin` longtext
,`authentication_string` longtext
,`password_expired` varchar(1)
,`is_role` varchar(1)
,`default_role` longtext
,`max_statement_time` decimal(12,6)
);

-- --------------------------------------------------------

--
-- Structure for view `user`
--
DROP TABLE IF EXISTS `user`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `user`  AS SELECT `global_priv`.`Host` AS `Host`, `global_priv`.`User` AS `User`, if(json_value(`global_priv`.`Priv`,'$.plugin') in ('mysql_native_password','mysql_old_password'),ifnull(json_value(`global_priv`.`Priv`,'$.authentication_string'),''),'') AS `Password`, if(json_value(`global_priv`.`Priv`,'$.access') & 1,'Y','N') AS `Select_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 2,'Y','N') AS `Insert_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 4,'Y','N') AS `Update_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 8,'Y','N') AS `Delete_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 16,'Y','N') AS `Create_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 32,'Y','N') AS `Drop_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 64,'Y','N') AS `Reload_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 128,'Y','N') AS `Shutdown_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 256,'Y','N') AS `Process_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 512,'Y','N') AS `File_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 1024,'Y','N') AS `Grant_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 2048,'Y','N') AS `References_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 4096,'Y','N') AS `Index_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 8192,'Y','N') AS `Alter_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 16384,'Y','N') AS `Show_db_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 32768,'Y','N') AS `Super_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 65536,'Y','N') AS `Create_tmp_table_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 131072,'Y','N') AS `Lock_tables_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 262144,'Y','N') AS `Execute_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 524288,'Y','N') AS `Repl_slave_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 1048576,'Y','N') AS `Repl_client_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 2097152,'Y','N') AS `Create_view_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 4194304,'Y','N') AS `Show_view_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 8388608,'Y','N') AS `Create_routine_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 16777216,'Y','N') AS `Alter_routine_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 33554432,'Y','N') AS `Create_user_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 67108864,'Y','N') AS `Event_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 134217728,'Y','N') AS `Trigger_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 268435456,'Y','N') AS `Create_tablespace_priv`, if(json_value(`global_priv`.`Priv`,'$.access') & 536870912,'Y','N') AS `Delete_history_priv`, elt(ifnull(json_value(`global_priv`.`Priv`,'$.ssl_type'),0) + 1,'','ANY','X509','SPECIFIED') AS `ssl_type`, ifnull(json_value(`global_priv`.`Priv`,'$.ssl_cipher'),'') AS `ssl_cipher`, ifnull(json_value(`global_priv`.`Priv`,'$.x509_issuer'),'') AS `x509_issuer`, ifnull(json_value(`global_priv`.`Priv`,'$.x509_subject'),'') AS `x509_subject`, cast(ifnull(json_value(`global_priv`.`Priv`,'$.max_questions'),0) as unsigned) AS `max_questions`, cast(ifnull(json_value(`global_priv`.`Priv`,'$.max_updates'),0) as unsigned) AS `max_updates`, cast(ifnull(json_value(`global_priv`.`Priv`,'$.max_connections'),0) as unsigned) AS `max_connections`, cast(ifnull(json_value(`global_priv`.`Priv`,'$.max_user_connections'),0) as signed) AS `max_user_connections`, ifnull(json_value(`global_priv`.`Priv`,'$.plugin'),'') AS `plugin`, ifnull(json_value(`global_priv`.`Priv`,'$.authentication_string'),'') AS `authentication_string`, 'N' AS `password_expired`, elt(ifnull(json_value(`global_priv`.`Priv`,'$.is_role'),0) + 1,'N','Y') AS `is_role`, ifnull(json_value(`global_priv`.`Priv`,'$.default_role'),'') AS `default_role`, cast(ifnull(json_value(`global_priv`.`Priv`,'$.max_statement_time'),0.0) as decimal(12,6)) AS `max_statement_time` FROM `global_priv` ;

--
-- Indexes for dumped tables
--

--
-- Indexes for table `columns_priv`
--
ALTER TABLE `columns_priv`
  ADD PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`,`Column_name`);

--
-- Indexes for table `column_stats`
--
ALTER TABLE `column_stats`
  ADD PRIMARY KEY (`db_name`,`table_name`,`column_name`);

--
-- Indexes for table `db`
--
ALTER TABLE `db`
  ADD PRIMARY KEY (`Host`,`Db`,`User`),
  ADD KEY `User` (`User`);

--
-- Indexes for table `event`
--
ALTER TABLE `event`
  ADD PRIMARY KEY (`db`,`name`);

--
-- Indexes for table `func`
--
ALTER TABLE `func`
  ADD PRIMARY KEY (`name`);

--
-- Indexes for table `global_priv`
--
ALTER TABLE `global_priv`
  ADD PRIMARY KEY (`Host`,`User`);

--
-- Indexes for table `gtid_slave_pos`
--
ALTER TABLE `gtid_slave_pos`
  ADD PRIMARY KEY (`domain_id`,`sub_id`);

--
-- Indexes for table `help_category`
--
ALTER TABLE `help_category`
  ADD PRIMARY KEY (`help_category_id`),
  ADD UNIQUE KEY `name` (`name`);

--
-- Indexes for table `help_keyword`
--
ALTER TABLE `help_keyword`
  ADD PRIMARY KEY (`help_keyword_id`),
  ADD UNIQUE KEY `name` (`name`);

--
-- Indexes for table `help_relation`
--
ALTER TABLE `help_relation`
  ADD PRIMARY KEY (`help_keyword_id`,`help_topic_id`);

--
-- Indexes for table `help_topic`
--
ALTER TABLE `help_topic`
  ADD PRIMARY KEY (`help_topic_id`),
  ADD UNIQUE KEY `name` (`name`);

--
-- Indexes for table `index_stats`
--
ALTER TABLE `index_stats`
  ADD PRIMARY KEY (`db_name`,`table_name`,`index_name`,`prefix_arity`);

--
-- Indexes for table `innodb_index_stats`
--
ALTER TABLE `innodb_index_stats`
  ADD PRIMARY KEY (`database_name`,`table_name`,`index_name`,`stat_name`);

--
-- Indexes for table `innodb_table_stats`
--
ALTER TABLE `innodb_table_stats`
  ADD PRIMARY KEY (`database_name`,`table_name`);

--
-- Indexes for table `plugin`
--
ALTER TABLE `plugin`
  ADD PRIMARY KEY (`name`);

--
-- Indexes for table `proc`
--
ALTER TABLE `proc`
  ADD PRIMARY KEY (`db`,`name`,`type`);

--
-- Indexes for table `procs_priv`
--
ALTER TABLE `procs_priv`
  ADD PRIMARY KEY (`Host`,`Db`,`User`,`Routine_name`,`Routine_type`),
  ADD KEY `Grantor` (`Grantor`);

--
-- Indexes for table `proxies_priv`
--
ALTER TABLE `proxies_priv`
  ADD PRIMARY KEY (`Host`,`User`,`Proxied_host`,`Proxied_user`),
  ADD KEY `Grantor` (`Grantor`);

--
-- Indexes for table `roles_mapping`
--
ALTER TABLE `roles_mapping`
  ADD UNIQUE KEY `Host` (`Host`,`User`,`Role`);

--
-- Indexes for table `servers`
--
ALTER TABLE `servers`
  ADD PRIMARY KEY (`Server_name`);

--
-- Indexes for table `tables_priv`
--
ALTER TABLE `tables_priv`
  ADD PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`),
  ADD KEY `Grantor` (`Grantor`);

--
-- Indexes for table `table_barangay`
--
ALTER TABLE `table_barangay`
  ADD PRIMARY KEY (`barangay_id`);

--
-- Indexes for table `table_stats`
--
ALTER TABLE `table_stats`
  ADD PRIMARY KEY (`db_name`,`table_name`);

--
-- Indexes for table `table_users_registration`
--
ALTER TABLE `table_users_registration`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `time_zone`
--
ALTER TABLE `time_zone`
  ADD PRIMARY KEY (`Time_zone_id`);

--
-- Indexes for table `time_zone_leap_second`
--
ALTER TABLE `time_zone_leap_second`
  ADD PRIMARY KEY (`Transition_time`);

--
-- Indexes for table `time_zone_name`
--
ALTER TABLE `time_zone_name`
  ADD PRIMARY KEY (`Name`);

--
-- Indexes for table `time_zone_transition`
--
ALTER TABLE `time_zone_transition`
  ADD PRIMARY KEY (`Time_zone_id`,`Transition_time`);

--
-- Indexes for table `time_zone_transition_type`
--
ALTER TABLE `time_zone_transition_type`
  ADD PRIMARY KEY (`Time_zone_id`,`Transition_type_id`);

--
-- Indexes for table `transaction_registry`
--
ALTER TABLE `transaction_registry`
  ADD PRIMARY KEY (`transaction_id`),
  ADD UNIQUE KEY `commit_id` (`commit_id`),
  ADD KEY `begin_timestamp` (`begin_timestamp`),
  ADD KEY `commit_timestamp` (`commit_timestamp`,`transaction_id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `table_users_registration`
--
ALTER TABLE `table_users_registration`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT for table `time_zone`
--
ALTER TABLE `time_zone`
  MODIFY `Time_zone_id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
